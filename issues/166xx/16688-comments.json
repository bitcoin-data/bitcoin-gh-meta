[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316934773"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316934773"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Compiling without including transaction header (already included in txmempool.h)",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-08-23T00:21:43Z",
      "diff_hunk" : "@@ -5,9 +5,13 @@\n \n #include <validationinterface.h>\n \n+#include <chain.h>\n+#include <logging.h>\n #include <primitives/block.h>\n+#include <primitives/transaction.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316934773",
      "id" : 316934773,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjkzNDc3Mw==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 7,
      "path" : "src/validationinterface.cpp",
      "position" : 8,
      "pull_request_review_id" : 278747465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316934773",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17828](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17828.html) (net: Use log categories when logging events that P2P peers can trigger arbitrarily by practicalswift)\n* [#17562](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17562.html) (WIP: Validation: Remove ConnectTrace and PerBlockConnectTrace by jnewbery)\n* [#17477](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17477.html) (Remove the mempool's NotifyEntryAdded and NotifyEntryRemoved signals by jnewbery)\n* [#16365](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16365.html) (Log RPC parameters (arguments) if -debug=rpcparams by LarryRuane)\n* [#15606](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15606.html) ([experimental] UTXO snapshots by jamesob)\n* [#10443](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/10443.html) (Add fee_est tool for debugging fee estimation code by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-08-23T00:52:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-524131064",
      "id" : 524131064,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNDEzMTA2NA==",
      "updated_at" : "2020-01-02T22:51:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524131064",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316940139"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316940139"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What's the rational defining func instead of directly as LogPrint arg ?",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-08-23T00:56:46Z",
      "diff_hunk" : "@@ -133,47 +137,62 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316940139",
      "id" : 316940139,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjk0MDEzOQ==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 19,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 278747465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316940139",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316940553"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316940553"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could you use a ternary to check pindexFork instead of two call to LogPrint? Also fInitialDownload could be logged",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-08-23T00:59:03Z",
      "diff_hunk" : "@@ -133,47 +137,62 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {\n+        if (pindexFork) LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: fork block hash=%s\\n\", func, pindexFork->GetBlockHash().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316940553",
      "id" : 316940553,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjk0MDU1Mw==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 21,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 278747465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316940553",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316941180"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316941180"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks to pindex, maybe log the height too",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-08-23T01:03:00Z",
      "diff_hunk" : "@@ -133,47 +137,62 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {\n+        if (pindexFork) LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: fork block hash=%s\\n\", func, pindexFork->GetBlockHash().ToString());\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: new block hash=%s\\n\", func, pindexNew->GetBlockHash().ToString());\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n     });\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());\n         m_internals->TransactionAddedToMempool(ptx);\n     });\n }\n \n void CMainSignals::TransactionRemovedFromMempool(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+        auto func = __func__;\n+        m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+            LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());\n             m_internals->TransactionRemovedFromMempool(ptx);\n         });\n     }\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pblock, pindex, pvtxConflicted, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: block hash=%s\\n\", func, pblock->GetHash().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316941180",
      "id" : 316941180,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjk0MTE4MA==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 51,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 278747465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316941180",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316942251"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316942251"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: maybe \"top block hash %s bottom block hash\"",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-08-23T01:09:35Z",
      "diff_hunk" : "@@ -133,47 +137,62 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {\n+        if (pindexFork) LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: fork block hash=%s\\n\", func, pindexFork->GetBlockHash().ToString());\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: new block hash=%s\\n\", func, pindexNew->GetBlockHash().ToString());\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n     });\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());\n         m_internals->TransactionAddedToMempool(ptx);\n     });\n }\n \n void CMainSignals::TransactionRemovedFromMempool(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+        auto func = __func__;\n+        m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+            LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());\n             m_internals->TransactionRemovedFromMempool(ptx);\n         });\n     }\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pblock, pindex, pvtxConflicted, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: block hash=%s\\n\", func, pblock->GetHash().ToString());\n         m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);\n     });\n }\n \n void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pblock, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: block hash=%s\\n\", func, pblock->GetHash().ToString());\n         m_internals->BlockDisconnected(pblock);\n     });\n }\n \n void CMainSignals::ChainStateFlushed(const CBlockLocator &locator) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([locator, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, locator, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: block hash=%s\\n\", func, locator.IsNull() ? \"null\" : locator.vHave.front().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316942251",
      "id" : 316942251,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjk0MjI1MQ==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 69,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 278747465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316942251",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316942492"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316942492"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "You may add MemPoolRemovalReasonString somewhere, like TransactionErrorString in util/error.cp. IMO that's an interesting info to log",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-08-23T01:11:03Z",
      "diff_hunk" : "@@ -133,47 +137,62 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {\n+        if (pindexFork) LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: fork block hash=%s\\n\", func, pindexFork->GetBlockHash().ToString());\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: new block hash=%s\\n\", func, pindexNew->GetBlockHash().ToString());\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n     });\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());\n         m_internals->TransactionAddedToMempool(ptx);\n     });\n }\n \n void CMainSignals::TransactionRemovedFromMempool(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+        auto func = __func__;\n+        m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+            LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r316942492",
      "id" : 316942492,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjk0MjQ5Mg==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 41,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 278747465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316942492",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r317000871"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317000871"
         }
      },
      "author_association" : "MEMBER",
      "body" : "From the [Developer Notes - Source code organization](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#source-code-organization):\r\n> - Every `.cpp` and `.h` file should `#include` every header file it directly uses classes, functions or other definitions from, even if those headers are already included indirectly through other headers.\r\n>    -  _Rationale_: Excluding headers because they are already indirectly included results in compilation failures when those indirect dependencies change. Furthermore, it obscures what the real code dependencies are.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-08-23T07:12:56Z",
      "diff_hunk" : "@@ -5,9 +5,13 @@\n \n #include <validationinterface.h>\n \n+#include <chain.h>\n+#include <logging.h>\n #include <primitives/block.h>\n+#include <primitives/transaction.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r317000871",
      "id" : 317000871,
      "in_reply_to_id" : 316934773,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzAwMDg3MQ==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 7,
      "path" : "src/validationinterface.cpp",
      "position" : 8,
      "pull_request_review_id" : 278830194,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317000871",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r317143843"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317143843"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah thanks, didn't know it!",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-08-23T13:56:48Z",
      "diff_hunk" : "@@ -5,9 +5,13 @@\n \n #include <validationinterface.h>\n \n+#include <chain.h>\n+#include <logging.h>\n #include <primitives/block.h>\n+#include <primitives/transaction.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r317143843",
      "id" : 317143843,
      "in_reply_to_id" : 316934773,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzE0Mzg0Mw==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 7,
      "path" : "src/validationinterface.cpp",
      "position" : 8,
      "pull_request_review_id" : 279015148,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317143843",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2019-08-24T17:56:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-524569491",
      "id" : 524569491,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNDU2OTQ5MQ==",
      "updated_at" : "2019-08-24T17:56:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524569491",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r317672379"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317672379"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Using it directly will give the name of the lambda, i.e. `operator()`, which is not desirable.\r\n\r\nIdeally, I could use `__func__` in the lambda capture. However, this is not allowed because it has static storage duration. With C++14, we could use capture initializers instead.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-08-26T15:58:14Z",
      "diff_hunk" : "@@ -133,47 +137,62 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r317672379",
      "id" : 317672379,
      "in_reply_to_id" : 316940139,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzY3MjM3OQ==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 19,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 279678717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317672379",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r318809816"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318809816"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I believe the bottom block hash will always be the genesis block hash, so logging it probably won't be very useful. Plus it may be a little confusing given only the top block is being flushed.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-08-28T21:55:34Z",
      "diff_hunk" : "@@ -133,47 +137,62 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {\n+        if (pindexFork) LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: fork block hash=%s\\n\", func, pindexFork->GetBlockHash().ToString());\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: new block hash=%s\\n\", func, pindexNew->GetBlockHash().ToString());\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n     });\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());\n         m_internals->TransactionAddedToMempool(ptx);\n     });\n }\n \n void CMainSignals::TransactionRemovedFromMempool(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+        auto func = __func__;\n+        m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+            LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());\n             m_internals->TransactionRemovedFromMempool(ptx);\n         });\n     }\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pblock, pindex, pvtxConflicted, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: block hash=%s\\n\", func, pblock->GetHash().ToString());\n         m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);\n     });\n }\n \n void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pblock, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: block hash=%s\\n\", func, pblock->GetHash().ToString());\n         m_internals->BlockDisconnected(pblock);\n     });\n }\n \n void CMainSignals::ChainStateFlushed(const CBlockLocator &locator) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([locator, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, locator, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: block hash=%s\\n\", func, locator.IsNull() ? \"null\" : locator.vHave.front().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r318809816",
      "id" : 318809816,
      "in_reply_to_id" : 316942251,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODgwOTgxNg==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 69,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 281124970,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318809816",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r320406870"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320406870"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good call! I had misinterpreted the frequency of this being non-null. Fixed in 4bacb54.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-09-03T18:07:11Z",
      "diff_hunk" : "@@ -133,47 +137,62 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {\n+        if (pindexFork) LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: fork block hash=%s\\n\", func, pindexFork->GetBlockHash().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r320406870",
      "id" : 320406870,
      "in_reply_to_id" : 316940553,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMDQwNjg3MA==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 21,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 283169608,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320406870",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r320406900"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320406900"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added in 4bacb54.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-09-03T18:07:16Z",
      "diff_hunk" : "@@ -133,47 +137,62 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {\n+        if (pindexFork) LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: fork block hash=%s\\n\", func, pindexFork->GetBlockHash().ToString());\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: new block hash=%s\\n\", func, pindexNew->GetBlockHash().ToString());\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n     });\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());\n         m_internals->TransactionAddedToMempool(ptx);\n     });\n }\n \n void CMainSignals::TransactionRemovedFromMempool(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+        auto func = __func__;\n+        m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+            LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());\n             m_internals->TransactionRemovedFromMempool(ptx);\n         });\n     }\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pblock, pindex, pvtxConflicted, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: block hash=%s\\n\", func, pblock->GetHash().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r320406900",
      "id" : 320406900,
      "in_reply_to_id" : 316941180,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMDQwNjkwMA==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 51,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 283169647,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320406900",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r320406935"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320406935"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in 504d009.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-09-03T18:07:19Z",
      "diff_hunk" : "@@ -133,47 +137,62 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {\n+        if (pindexFork) LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: fork block hash=%s\\n\", func, pindexFork->GetBlockHash().ToString());\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: new block hash=%s\\n\", func, pindexNew->GetBlockHash().ToString());\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n     });\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());\n         m_internals->TransactionAddedToMempool(ptx);\n     });\n }\n \n void CMainSignals::TransactionRemovedFromMempool(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+        auto func = __func__;\n+        m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+            LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r320406935",
      "id" : 320406935,
      "in_reply_to_id" : 316942492,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMDQwNjkzNQ==",
      "original_commit_id" : "e13e0f85dcb4c7f2f682c9baa19445ee9f4dc98b",
      "original_position" : 41,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 283169687,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320406935",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Addressed all comments and add correct formatting for valid `CValidationState` in b303865.\r\n\r\nAlso updated `CValidationState` accessors in 3ff8755 to return strings by constant reference to avoid copying. Although this means the references are only valid for the lifetime of the object, which should be okay.",
      "created_at" : "2019-09-03T18:14:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-527575841",
      "id" : 527575841,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNzU3NTg0MQ==",
      "updated_at" : "2019-09-03T18:14:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/527575841",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r332730670"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332730670"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Refer to this as \"IBD\" or \"Initial Block Download\" rather than \"initial download\". I suggest: `\"%s: new block hash=%s fork block hash=%s (In IBD=%d)\\n\"` or similar.\r\n\r\n(These are low-level logs. Anyone reading them should understand what IBD means.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-08T20:59:48Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: new block hash=%s fork block hash=%s initial download=%d\\n\", func,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r332730670",
      "id" : 332730670,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjczMDY3MA==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 43,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 299046396,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332730670",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r332733417"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332733417"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: call this the 'txid' instead of 'tx hash', and also log the wtxid (use `GetWitnessHash()`)",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-08T21:06:15Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: new block hash=%s fork block hash=%s initial download=%d\\n\", func,\n+                 pindexNew->GetBlockHash().ToString(),\n+                 pindexFork ? pindexFork->GetBlockHash().ToString() : \"null\",\n+                 fInitialDownload);\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n     });\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, ptx, this] {\n+        LogPrint(BCLog::VALIDATIONINTERFACE, \"%s: tx hash=%s\\n\", func, ptx->GetHash().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r332733417",
      "id" : 332733417,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjczMzQxNw==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 55,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 299046396,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332733417",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r332735487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332735487"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: I think these strings could just be `EXPIRY`, `SIZELIMIT`, etc. These strings are for logs only, so will only be read by engineers.\r\n\r\nTrying to make these strings more generally accessible obscures some of the nuance. For example `MemPoolRemovalReason::REORG` means that a transaction was removed during a re-org because it spent a coinbase transaction that is no longer mature, or because it is no longer final, or because mempool policy changed since it first entered the mempool so it can no longer be added or because the re-org was too large and we dropped transactions to avoid memory exhaustion.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-08T21:11:25Z",
      "diff_hunk" : "@@ -1098,3 +1100,22 @@ void CTxMemPool::SetIsLoaded(bool loaded)\n }\n \n SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n+\n+std::string MemPoolRemovalReasonString(const MemPoolRemovalReason reason)\n+{\n+    switch (reason) {\n+    case MemPoolRemovalReason::EXPIRY:\n+        return \"Expired from mempool\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r332735487",
      "id" : 332735487,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjczNTQ4Nw==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 18,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 299046396,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332735487",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r332745377"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332745377"
         }
      },
      "author_association" : "MEMBER",
      "body" : "For all of these async validationinterface callbacks, I think it'd be useful to log both when the event is enqueued and dequeued, with some kind of counter to correlate the two logs. Thoughts?",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-08T21:37:39Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r332745377",
      "id" : 332745377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjc0NTM3Nw==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 42,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 299046396,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332745377",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I did some light testing and this looks good. If you wanted to add automated tests, take a look at `assert_debug_log()` in the `TestNode` object. That allows you to test that specific strings have been written to the debug log.\r\n\r\n> updated CValidationState accessors in 3ff8755 to return strings by constant reference to avoid copying.\r\n\r\nWas this required for the PR? Those accessors aren't used very much, so performance isn't critical. I'd suggest not changing them in this PR.",
      "created_at" : "2019-10-09T22:03:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-540222219",
      "id" : 540222219,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDIyMjIxOQ==",
      "updated_at" : "2019-10-09T22:03:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540222219",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r335228213"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335228213"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The scheduler client guarantees these callbacks are executed serially in the order in which they were enqueued. Unless there is a need to correlate the enqueuing with the execution of `BlockChecked` and `NewPowValidBlock`, I'm hesitant to add more complexity to the code.\r\n\r\nIs there a specific case where you think the additional logging would be useful? If so, would correlation using data from the log message be sufficient rather than adding a counter?",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-16T00:01:31Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r335228213",
      "id" : 335228213,
      "in_reply_to_id" : 332745377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTIyODIxMw==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 42,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 302260704,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335228213",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r335552731"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335552731"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this: https://github.com/bitcoin/bitcoin/issues/12978#issuecomment-381265760 would have been easier to spot with logging when the callbacks were enqueued, and it would have been easier to correlate those enqueue events with the thread that was running.\r\n\r\nYou're probably right that there's no need for a counter and that the data from the log message is enough to correlate the enqueue/dequeue events.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-16T15:35:52Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r335552731",
      "id" : 335552731,
      "in_reply_to_id" : 332745377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTU1MjczMQ==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 42,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 302675991,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335552731",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336179659"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336179659"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done. In order to avoid duplicating the logging code, I added some private template methods declared in the header and defined in the implementation file. The linker seems ok with this though let me know if there is a better way. Defining the helpers in the header would have required moving `MainSignalsInstance` into the header.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-17T19:11:44Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336179659",
      "id" : 336179659,
      "in_reply_to_id" : 332745377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjE3OTY1OQ==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 42,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 303483828,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336179659",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> I did some light testing and this looks good. If you wanted to add automated tests, take a look at `assert_debug_log()` in the `TestNode` object. That allows you to test that specific strings have been written to the debug log.\r\n> \r\n\r\nI would be hesitant to add a functional test only to check for informational logging. Is there an existing a test where all these events are exercised? Not sure if it is worth adding regardless.\r\n\r\n> > updated CValidationState accessors in [3ff8755](https://github.com/bitcoin/bitcoin/commit/3ff875575563bf88ea94ec63b892fe8237b5e0f7) to return strings by constant reference to avoid copying.\r\n> \r\n> Was this required for the PR? Those accessors aren't used very much, so performance isn't critical. I'd suggest not changing them in this PR.\r\n\r\nYeah, commit 72c6e50 calls those methods in such a way that not returning references would have incurred excessive copies. Would it be better if the two commits were merged?",
      "created_at" : "2019-10-17T19:40:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543330180",
      "id" : 543330180,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MzMzMDE4MA==",
      "updated_at" : "2019-10-17T19:40:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543330180",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336249532"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336249532"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "FYI, I had to make some minor changes to placate the linter. It was giving the following failures:\r\n\r\n```\r\nsrc/validationinterface.cpp: Expected 0 argument(s) after format string but found 1 argument(s): LogPrint(BCLog::VALIDATIONINTERFACE, fmt, args...)\r\n^---- failure generated from test/lint/lint-format-strings.sh\r\nAll calls to LogPrintf() and LogPrint() should be terminated with \\n\r\nsrc/validationinterface.cpp:    LogPrint(BCLog::VALIDATIONINTERFACE, fmt, args...);\r\n^---- failure generated from test/lint/lint-logs.sh\r\n```\r\n\r\nhttps://travis-ci.org/bitcoin/bitcoin/jobs/599302990",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-17T22:11:09Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336249532",
      "id" : 336249532,
      "in_reply_to_id" : 332745377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjI0OTUzMg==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 42,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 303575890,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336249532",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@jnewbery I have some concerns about this additional logging. Since #14209 was merged, all log function arguments are evaluated regardless of whether logging is enabled for the given category. This was not the case prior to that PR since a macro was used for logging.\r\n\r\nGiven the heavy amount of logging added in this PR, should the function vs macro approach for logging be revisited? Typically, the use of macros in logging libraries is to avoid such argument evaluation if I understand correctly.",
      "created_at" : "2019-10-17T22:33:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543388763",
      "id" : 543388763,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MzM4ODc2Mw==",
      "updated_at" : "2019-10-17T22:33:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543388763",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Since #14209 was merged, all log function arguments are evaluated regardless of whether logging is enabled for the given category.\r\n\r\nHuh? They were passed to `strprintf` before and after that change, but `strprintf` was only called when logging was enabled. I don't see how that pull changed anything.",
      "created_at" : "2019-10-18T13:03:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543733154",
      "id" : 543733154,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MzczMzE1NA==",
      "updated_at" : "2019-10-18T13:03:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543733154",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> > Since #14209 was merged, all log function arguments are evaluated regardless of whether logging is enabled for the given category.\r\n> \r\n> Huh? They were passed to `strprintf` before and after that change, but `strprintf` was only called when logging was enabled. I don't see how that pull changed anything.\r\n\r\nBy evaluation I mean at the call site of `LogPrint`. While this doesn't make a difference when passing variables, it does matter when the arguments are calls to other functions. Prior to #14209, the latter would be textually included when used and thus not evaluated if logging was not enabled for the given category.",
      "created_at" : "2019-10-18T16:36:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543826931",
      "id" : 543826931,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MzgyNjkzMQ==",
      "updated_at" : "2019-10-18T16:36:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543826931",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ah, right",
      "created_at" : "2019-10-18T16:57:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543835460",
      "id" : 543835460,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MzgzNTQ2MA==",
      "updated_at" : "2019-10-18T16:57:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543835460",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336703301"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336703301"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> In order to avoid duplicating the logging code, I added some private template methods declared in the header and defined in the implementation file. The linker seems ok with this(...)\r\n\r\nThis could lead to portability issues, see e.g. https://stackoverflow.com/questions/495021/why-can-templates-only-be-implemented-in-the-header-file. I tried something similar recently in another PR, and the linker in one of the Travis runs did complain, so I am also interested to know if there are better solutions than moving stuff into the header.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-18T23:06:26Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336703301",
      "id" : 336703301,
      "in_reply_to_id" : 332745377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjcwMzMwMQ==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 42,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 304172679,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336703301",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336713974"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336713974"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah, that could very well be the case. That said, if we want to avoid argument evaluation when the logging category is not enabled, I would need to turn these into macros. See discussion starting in https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543388763. Then I could remove those template method declarations from the header.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-19T00:38:19Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336713974",
      "id" : 336713974,
      "in_reply_to_id" : 332745377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjcxMzk3NA==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 42,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 304185715,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336713974",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336742750"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336742750"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why this change? :)",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-19T15:56:32Z",
      "diff_hunk" : "@@ -137,8 +137,8 @@ class CValidationState {\n     }\n     ValidationInvalidReason GetReason() const { return m_reason; }\n     unsigned int GetRejectCode() const { return chRejectCode; }\n-    std::string GetRejectReason() const { return strRejectReason; }\n-    std::string GetDebugMessage() const { return strDebugMessage; }\n+    const std::string& GetRejectReason() const { return strRejectReason; }\n+    const std::string& GetDebugMessage() const { return strDebugMessage; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336742750",
      "id" : 336742750,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc0Mjc1MA==",
      "original_commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "original_position" : 7,
      "path" : "src/consensus/validation.h",
      "position" : null,
      "pull_request_review_id" : 304219538,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336742750",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336747711"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336747711"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "See https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543330180.\r\n\r\n@jnewbery Regarding my previous comment, I'm also happy to remove this commit if that's preferred. Seems I had not read your comment closely enough about it not being performance critical. Though note my concerns about macro vs function logging.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-19T18:08:38Z",
      "diff_hunk" : "@@ -137,8 +137,8 @@ class CValidationState {\n     }\n     ValidationInvalidReason GetReason() const { return m_reason; }\n     unsigned int GetRejectCode() const { return chRejectCode; }\n-    std::string GetRejectReason() const { return strRejectReason; }\n-    std::string GetDebugMessage() const { return strDebugMessage; }\n+    const std::string& GetRejectReason() const { return strRejectReason; }\n+    const std::string& GetDebugMessage() const { return strDebugMessage; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336747711",
      "id" : 336747711,
      "in_reply_to_id" : 336742750,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc0NzcxMQ==",
      "original_commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "original_position" : 7,
      "path" : "src/consensus/validation.h",
      "position" : null,
      "pull_request_review_id" : 304224916,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336747711",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336748680"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336748680"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What is the object lifetime of `strRejectReason` and `strDebugMessage`?\r\n\r\nAre they guaranteed to outlive the callers of `GetRejectReason` or `GetDebugMessage`?",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-19T18:34:39Z",
      "diff_hunk" : "@@ -137,8 +137,8 @@ class CValidationState {\n     }\n     ValidationInvalidReason GetReason() const { return m_reason; }\n     unsigned int GetRejectCode() const { return chRejectCode; }\n-    std::string GetRejectReason() const { return strRejectReason; }\n-    std::string GetDebugMessage() const { return strDebugMessage; }\n+    const std::string& GetRejectReason() const { return strRejectReason; }\n+    const std::string& GetDebugMessage() const { return strDebugMessage; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336748680",
      "id" : 336748680,
      "in_reply_to_id" : 336742750,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc0ODY4MA==",
      "original_commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "original_position" : 7,
      "path" : "src/consensus/validation.h",
      "position" : null,
      "pull_request_review_id" : 304225926,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336748680",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336759875"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336759875"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Their lifetimes are that of the corresponding `CValidationState` as mentioned in https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-527575841. All current uses are guaranteed to outlive the callers as they either make a copy or are passed by const reference to other functions that do something similar. There's no such guarantee for future callers though.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-20T01:45:18Z",
      "diff_hunk" : "@@ -137,8 +137,8 @@ class CValidationState {\n     }\n     ValidationInvalidReason GetReason() const { return m_reason; }\n     unsigned int GetRejectCode() const { return chRejectCode; }\n-    std::string GetRejectReason() const { return strRejectReason; }\n-    std::string GetDebugMessage() const { return strDebugMessage; }\n+    const std::string& GetRejectReason() const { return strRejectReason; }\n+    const std::string& GetDebugMessage() const { return strDebugMessage; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336759875",
      "id" : 336759875,
      "in_reply_to_id" : 336742750,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc1OTg3NQ==",
      "original_commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "original_position" : 7,
      "path" : "src/consensus/validation.h",
      "position" : null,
      "pull_request_review_id" : 304238102,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336759875",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336780553"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336780553"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think 6c730c3926d1871d8ce4c63eb6752808d7c3484a is a good idea: it introduces a very sharp edge in consensus critical code which is not offset by any measurable gain AFAICT.\r\n\r\nWe should always err on the side of caution when touching consensus critical code: if there is a trade-off between safety (current or future) and speed, then safety is generally much more important. In the cases where speed is critical for some reasons we should always measure before optimising :)\r\n\r\nSomewhat related: https://www.youtube.com/watch?v=3MB2iiCkGxg&t=870",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-20T14:12:10Z",
      "diff_hunk" : "@@ -137,8 +137,8 @@ class CValidationState {\n     }\n     ValidationInvalidReason GetReason() const { return m_reason; }\n     unsigned int GetRejectCode() const { return chRejectCode; }\n-    std::string GetRejectReason() const { return strRejectReason; }\n-    std::string GetDebugMessage() const { return strDebugMessage; }\n+    const std::string& GetRejectReason() const { return strRejectReason; }\n+    const std::string& GetDebugMessage() const { return strDebugMessage; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336780553",
      "id" : 336780553,
      "in_reply_to_id" : 336742750,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc4MDU1Mw==",
      "original_commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "original_position" : 7,
      "path" : "src/consensus/validation.h",
      "position" : null,
      "pull_request_review_id" : 304260708,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336780553",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336786215"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336786215"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    } // no default case, so the compiler can warn about missing cas\r\n```\r\n\r\nSee: [Developer Notes - `switch` statement on an enumeration example](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#c-data-structures)",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-20T16:40:13Z",
      "diff_hunk" : "@@ -1098,3 +1100,22 @@ void CTxMemPool::SetIsLoaded(bool loaded)\n }\n \n SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n+\n+std::string MemPoolRemovalReasonString(const MemPoolRemovalReason reason)\n+{\n+    switch (reason) {\n+    case MemPoolRemovalReason::EXPIRY:\n+        return \"EXPIRY\";\n+    case MemPoolRemovalReason::SIZELIMIT:\n+        return \"SIZELIMIT\";\n+    case MemPoolRemovalReason::REORG:\n+        return \"REORG\";\n+    case MemPoolRemovalReason::BLOCK:\n+        return \"BLOCK\";\n+    case MemPoolRemovalReason::CONFLICT:\n+        return \"CONFLICT\";\n+    case MemPoolRemovalReason::REPLACED:\n+        return \"REPLACED\";\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336786215",
      "id" : 336786215,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc4NjIxNQ==",
      "original_commit_id" : "deb243ef8798e7b400da9748a2f2dffe02617cc1",
      "original_position" : 29,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 304266930,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336786215",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336787375"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336787375"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could `event` parameter be a const reference?",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-20T17:09:15Z",
      "diff_hunk" : "@@ -133,47 +138,88 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto event = [pindexNew, pindexFork, fInitialDownload, this] {\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n-    });\n+    };\n+    EnqueueAndLogEvent(event, \"%s: new block hash=%s fork block hash=%s (in IBD=%d)\", __func__,\n+                       pindexNew->GetBlockHash().ToString(),\n+                       pindexFork ? pindexFork->GetBlockHash().ToString() : \"null\",\n+                       fInitialDownload);\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto event = [ptx, this] {\n         m_internals->TransactionAddedToMempool(ptx);\n-    });\n+    };\n+    EnqueueAndLogEvent(event, \"%s: txid=%s wtxid=%s\", __func__,\n+                       ptx->GetHash().ToString(),\n+                       ptx->GetWitnessHash().ToString());\n }\n \n void CMainSignals::TransactionRemovedFromMempool(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+        auto event = [ptx, this] {\n             m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n+        };\n+        EnqueueAndLogEvent(event, \"%s: txid=%s wtxid=%s reason=%s\", __func__,\n+                           ptx->GetHash().ToString(),\n+                           ptx->GetWitnessHash().ToString(),\n+                           MemPoolRemovalReasonString(reason));\n     }\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n+    auto event = [pblock, pindex, pvtxConflicted, this] {\n         m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);\n-    });\n+    };\n+    EnqueueAndLogEvent(event, \"%s: block hash=%s block height=%d\", __func__,\n+                       pblock->GetHash().ToString(),\n+                       pindex->nHeight);\n }\n \n void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, this] {\n+    auto event = [pblock, this] {\n         m_internals->BlockDisconnected(pblock);\n-    });\n+    };\n+    EnqueueAndLogEvent(event, \"%s: block hash=%s\", __func__,\n+                       pblock->GetHash().ToString());\n }\n \n void CMainSignals::ChainStateFlushed(const CBlockLocator &locator) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([locator, this] {\n+    auto event = [locator, this] {\n         m_internals->ChainStateFlushed(locator);\n-    });\n+    };\n+    EnqueueAndLogEvent(event, \"%s: block hash=%s\", __func__,\n+                       locator.IsNull() ? \"null\" : locator.vHave.front().ToString());\n }\n \n void CMainSignals::BlockChecked(const CBlock& block, const CValidationState& state) {\n+    LogEvent(\"%s: block hash=%s state=%s\", __func__,\n+             block.GetHash().ToString(), FormatStateMessage(state));\n     m_internals->BlockChecked(block, state);\n }\n \n void CMainSignals::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock> &block) {\n+    LogEvent(\"%s: block hash=%s\", __func__, block->GetHash().ToString());\n     m_internals->NewPoWValidBlock(pindex, block);\n }\n+\n+template <typename... Args>\n+void CMainSignals::EnqueueAndLogEvent(std::function<void ()> event, const char* fmt, const Args&... args) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336787375",
      "id" : 336787375,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc4NzM3NQ==",
      "original_commit_id" : "b6bc83628fed0f734887d0442df901b795d3ea33",
      "original_position" : 98,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 304266930,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336787375",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336798395"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336798395"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fair enough. I've removed 6c730c3.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-20T21:27:00Z",
      "diff_hunk" : "@@ -137,8 +137,8 @@ class CValidationState {\n     }\n     ValidationInvalidReason GetReason() const { return m_reason; }\n     unsigned int GetRejectCode() const { return chRejectCode; }\n-    std::string GetRejectReason() const { return strRejectReason; }\n-    std::string GetDebugMessage() const { return strDebugMessage; }\n+    const std::string& GetRejectReason() const { return strRejectReason; }\n+    const std::string& GetDebugMessage() const { return strDebugMessage; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r336798395",
      "id" : 336798395,
      "in_reply_to_id" : 336742750,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc5ODM5NQ==",
      "original_commit_id" : "515e3ee7fa4bb83277136742f3b3f1a8ea9e3a56",
      "original_position" : 7,
      "path" : "src/consensus/validation.h",
      "position" : null,
      "pull_request_review_id" : 304280055,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336798395",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> IMO, [6c730c3](https://github.com/bitcoin/bitcoin/commit/6c730c3926d1871d8ce4c63eb6752808d7c3484a) commit is outside the original PR goal.\r\n> Also `string` (i.e., `basic_string<char>`) offers move semantics; so it can be efficiently return by value.\r\n\r\nI removed the commit. But I don't believe move semantics apply here as the function is returning a member variable.",
      "created_at" : "2019-10-20T21:35:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-544295197",
      "id" : 544295197,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NDI5NTE5Nw==",
      "updated_at" : "2019-10-20T21:35:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/544295197",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r337159481"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337159481"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This does indeed seem to have caused a build failure: https://travis-ci.org/bitcoin/bitcoin/jobs/600461225",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-21T18:02:17Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r337159481",
      "id" : 337159481,
      "in_reply_to_id" : 332745377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzE1OTQ4MQ==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 42,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 304746198,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337159481",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I removed the commit. (https://github.com/bitcoin/bitcoin/commit/6c730c3926d1871d8ce4c63eb6752808d7c3484a)\r\n\r\nThanks!\r\n\r\nI've tested this and it works great. I think we need to resolve this question: https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543388763 before merging this PR. It seems reasonable to me to change logging back to using a macro for the reasons you suggest. Adding a `GetHash()` call to every validation interface call, even when logging is disabled, seems a shame. I'd be happy to review a PR that does that.\r\n\r\n_Rename CMainSignals::MempoolEntryRemoved to TransactionRemovedFromMempool_ and _Format CValidationState properly in all cases_ could be pulled out into their own PR while we're waiting for that, although note that _Format CValidationState properly in all cases_ conflicts with https://github.com/bitcoin/bitcoin/pull/17004/commits/0053e16714323c1694c834fdca74f064a1a33529.",
      "created_at" : "2019-10-21T18:18:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-544641770",
      "id" : 544641770,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NDY0MTc3MA==",
      "updated_at" : "2019-10-21T18:18:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/544641770",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r337177094"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337177094"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Indeed. It seems variadic arguments within lambda captures are not supported by that compilation environment. At least that's what I've gleaned from a similar issue (https://github.com/Ultimaker/CuraEngine/issues/426#issuecomment-269451925). However, this shouldn't be a problem if I change it into a macro.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-21T18:40:19Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r337177094",
      "id" : 337177094,
      "in_reply_to_id" : 332745377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzE3NzA5NA==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 42,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 304769046,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337177094",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> I've tested this and it works great. I think we need to resolve this question: [#16688 (comment)](https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-543388763) before merging this PR. It seems reasonable to me to change logging back to using a macro for the reasons you suggest. Adding a `GetHash()` call to every validation interface call, even when logging is disabled, seems a shame. I'd be happy to review a PR that does that.\r\n\r\n@jnewbery Will do.\r\n\r\n@MarcoFalke I'm not sure I follow the part about \"unnecessary branches are not analyzed\" in #14209. If I were to make `LogPrint` (but not `LogPrintf`) a macro again, will I need to define it conditionally based on `USE_COVERAGE` as was done in c8914b9?",
      "created_at" : "2019-10-22T00:01:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-544756845",
      "id" : 544756845,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NDc1Njg0NQ==",
      "updated_at" : "2019-10-22T00:01:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/544756845",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "If you revert #14209, please make it as slim as possible (without the USE_COVERAGE guard, which mostly did only harm)",
      "created_at" : "2019-10-22T12:47:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-544945041",
      "id" : 544945041,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NDk0NTA0MQ==",
      "updated_at" : "2019-10-22T12:47:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/544945041",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I would be hesitant to add a functional test only to check for informational logging. Is there an existing a test where all these events are exercised? Not sure if it is worth adding regardless.\r\n\r\nYeah, I agree that this isn't necessary.",
      "created_at" : "2019-10-22T14:42:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-544996828",
      "id" : 544996828,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NDk5NjgyOA==",
      "updated_at" : "2019-10-22T14:42:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/544996828",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-10-24T09:36:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-545835301",
      "id" : 545835301,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NTgzNTMwMQ==",
      "updated_at" : "2019-10-24T09:36:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545835301",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r340900721"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340900721"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Turns out changing `EnqueueAndLogEvent` into a macro has some implications that are making this infeasible. Consider:\r\n\r\n```c++\r\n#define ENQUEUE_AND_LOG_EVENT(event, fmt, ...)                                             \\\r\n    do {                                                                                   \\\r\n        LOG_EVENT(\"Enqueuing \" fmt, __VA_ARGS__);                                          \\\r\n        m_internals->m_schedulerClient.AddToProcessQueue([event, fmt, __VA_ARGS__, this] { \\\r\n            LOG_EVENT(fmt, __VA_ARGS__);                                                   \\\r\n            event();                                                                       \\\r\n        });                                                                                \\\r\n    } while (0)\r\n\r\n#define LOG_EVENT(fmt, ...) \\\r\n    LogPrint(BCLog::VALIDATIONINTERFACE, fmt \"\\n\", __VA_ARGS__);\r\n```\r\n\r\nThe problem is that the capture list is expecting variables but the call sites are providing expressions. So unfortunately this won't compile. Presumably, if this did work, the expressions in the lambda would be evaluated thus defeating the purpose.\r\n\r\nUnless there is a creative solution that I'm unaware of, the only alternative I can think of is to forgo the macro and duplicate the `LogPrint` for the enqueuing in each method. Thoughts?",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-30T23:14:06Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r340900721",
      "id" : 340900721,
      "in_reply_to_id" : 332745377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDkwMDcyMQ==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 42,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 309574899,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340900721",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r340917763"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340917763"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Actually, it looks like using a default capture instead of `__VA_ARGS__` will do what I need!",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-31T00:30:11Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r340917763",
      "id" : 340917763,
      "in_reply_to_id" : 332745377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MDkxNzc2Mw==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 42,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 309595296,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/340917763",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r341299111"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341299111"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Implemented as a macro in 6ab424c.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-31T18:23:15Z",
      "diff_hunk" : "@@ -128,52 +132,69 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n-\n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto func = __func__;\n+    m_internals->m_schedulerClient.AddToProcessQueue([func, pindexNew, pindexFork, fInitialDownload, this] {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r341299111",
      "id" : 341299111,
      "in_reply_to_id" : 332745377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTI5OTExMQ==",
      "original_commit_id" : "b303865bc68f2bfecd6bd3b8c7baf2c836f30549",
      "original_position" : 42,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 310092896,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341299111",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r341299386"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341299386"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "No longer applicable as this is now a macros in 6ab424c.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-10-31T18:23:53Z",
      "diff_hunk" : "@@ -133,47 +138,88 @@ void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInd\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto event = [pindexNew, pindexFork, fInitialDownload, this] {\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n-    });\n+    };\n+    EnqueueAndLogEvent(event, \"%s: new block hash=%s fork block hash=%s (in IBD=%d)\", __func__,\n+                       pindexNew->GetBlockHash().ToString(),\n+                       pindexFork ? pindexFork->GetBlockHash().ToString() : \"null\",\n+                       fInitialDownload);\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto event = [ptx, this] {\n         m_internals->TransactionAddedToMempool(ptx);\n-    });\n+    };\n+    EnqueueAndLogEvent(event, \"%s: txid=%s wtxid=%s\", __func__,\n+                       ptx->GetHash().ToString(),\n+                       ptx->GetWitnessHash().ToString());\n }\n \n void CMainSignals::TransactionRemovedFromMempool(CTransactionRef ptx, MemPoolRemovalReason reason) {\n     if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+        auto event = [ptx, this] {\n             m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n+        };\n+        EnqueueAndLogEvent(event, \"%s: txid=%s wtxid=%s reason=%s\", __func__,\n+                           ptx->GetHash().ToString(),\n+                           ptx->GetWitnessHash().ToString(),\n+                           MemPoolRemovalReasonString(reason));\n     }\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n+    auto event = [pblock, pindex, pvtxConflicted, this] {\n         m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);\n-    });\n+    };\n+    EnqueueAndLogEvent(event, \"%s: block hash=%s block height=%d\", __func__,\n+                       pblock->GetHash().ToString(),\n+                       pindex->nHeight);\n }\n \n void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, this] {\n+    auto event = [pblock, this] {\n         m_internals->BlockDisconnected(pblock);\n-    });\n+    };\n+    EnqueueAndLogEvent(event, \"%s: block hash=%s\", __func__,\n+                       pblock->GetHash().ToString());\n }\n \n void CMainSignals::ChainStateFlushed(const CBlockLocator &locator) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([locator, this] {\n+    auto event = [locator, this] {\n         m_internals->ChainStateFlushed(locator);\n-    });\n+    };\n+    EnqueueAndLogEvent(event, \"%s: block hash=%s\", __func__,\n+                       locator.IsNull() ? \"null\" : locator.vHave.front().ToString());\n }\n \n void CMainSignals::BlockChecked(const CBlock& block, const CValidationState& state) {\n+    LogEvent(\"%s: block hash=%s state=%s\", __func__,\n+             block.GetHash().ToString(), FormatStateMessage(state));\n     m_internals->BlockChecked(block, state);\n }\n \n void CMainSignals::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock> &block) {\n+    LogEvent(\"%s: block hash=%s\", __func__, block->GetHash().ToString());\n     m_internals->NewPoWValidBlock(pindex, block);\n }\n+\n+template <typename... Args>\n+void CMainSignals::EnqueueAndLogEvent(std::function<void ()> event, const char* fmt, const Args&... args) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r341299386",
      "id" : 341299386,
      "in_reply_to_id" : 336787375,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTI5OTM4Ng==",
      "original_commit_id" : "b6bc83628fed0f734887d0442df901b795d3ea33",
      "original_position" : 98,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 310093254,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341299386",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> _Rename CMainSignals::MempoolEntryRemoved to TransactionRemovedFromMempool_ and _Format CValidationState properly in all cases_ could be pulled out into their own PR while we're waiting for that, although note that _Format CValidationState properly in all cases_ conflicts with [0053e16](https://github.com/bitcoin/bitcoin/commit/0053e16714323c1694c834fdca74f064a1a33529).\r\n\r\nI've rebased and resolved the conflict now that your change has been merged. The PR should be ready for any last comments. Also, will need reviews of #17218. :)",
      "created_at" : "2019-10-31T18:29:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-548510011",
      "id" : 548510011,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0ODUxMDAxMQ==",
      "updated_at" : "2019-10-31T18:29:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548510011",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It appears that the function name isn't being captured properly:\r\n\r\n```\r\n2019-11-01T15:06:44.834237Z [loadblk] Enqueuing BlockConnected: block hash=0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206 block height=0\r\n2019-11-01T15:06:44.834255Z [loadblk] Enqueuing UpdatedBlockTip: new block hash=0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206 fork block hash=null (in IBD=1)\r\n2019-11-01T15:06:44.834276Z [init] block tree size = 1\r\n2019-11-01T15:06:44.834283Z [init] nBestHeight = 0\r\n2019-11-01T15:06:44.834338Z [init] Bound to 127.0.0.1:11625\r\n2019-11-01T15:06:44.834350Z [init] init message: Loading P2P addresses...\r\n2019-11-01T15:06:44.834367Z [init] ERROR: DeserializeFileDB: Failed to open file /tmp/user/1000/bitcoin_func_test_if8trhon/node0/regtest/peers.dat\r\n2019-11-01T15:06:44.834438Z [init] Invalid or missing peers.dat; recreating\r\n2019-11-01T15:06:44.834758Z [scheduler] operator(): block hash=0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206 block height=0\r\n2019-11-01T15:06:44.834919Z [scheduler] operator(): new block hash=0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206 fork block hash=null (in IBD=1)\r\n```\r\n\r\nThose last two lines should show `BlockConnected` and `UpdatedBlockTip`",
      "created_at" : "2019-11-01T15:12:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-548825215",
      "id" : 548825215,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0ODgyNTIxNQ==",
      "updated_at" : "2019-11-01T15:12:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548825215",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> It appears that the function name isn't being captured properly:\r\n\r\nFixed in 9eb373c.",
      "created_at" : "2019-11-01T20:32:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-548940603",
      "id" : 548940603,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0ODk0MDYwMw==",
      "updated_at" : "2019-11-01T20:32:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548940603",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r341748783"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341748783"
         }
      },
      "author_association" : "MEMBER",
      "body" : "At this point, it might just be easier to hard-code the function name into the log strings, or do you see a down-side to that?",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-11-01T20:58:02Z",
      "diff_hunk" : "@@ -126,52 +131,90 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n+// Use a macro instead of a function for conditional logging to prevent\n+// evaluating arguments when logging is not enabled.\n+//\n+// NOTE: The lambda captures all local variables by value.\n+#define ENQUEUE_AND_LOG_EVENT(event, fmt, name, ...)           \\\n+    do {                                                       \\\n+        auto local_name = (name);                              \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r341748783",
      "id" : 341748783,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTc0ODc4Mw==",
      "original_commit_id" : "9eb373c07ad78448ea78eee97d1ee9b9b409b4b9",
      "original_position" : 41,
      "path" : "src/validationinterface.cpp",
      "position" : 24,
      "pull_request_review_id" : 310692707,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341748783",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r341767912"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341767912"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The downside is that the logging can go out of sync if the method is renamed (like in dd2855d) and that the format string is longer.\r\n\r\nNote this implementation was used in an earlier version of the PR: https://github.com/bitcoin/bitcoin/pull/16688#pullrequestreview-278747465 (see second outdated comment). It was no longer needed when I added a helper method but needed again once I switched to a macro.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-11-01T22:09:23Z",
      "diff_hunk" : "@@ -126,52 +131,90 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n+// Use a macro instead of a function for conditional logging to prevent\n+// evaluating arguments when logging is not enabled.\n+//\n+// NOTE: The lambda captures all local variables by value.\n+#define ENQUEUE_AND_LOG_EVENT(event, fmt, name, ...)           \\\n+    do {                                                       \\\n+        auto local_name = (name);                              \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r341767912",
      "id" : 341767912,
      "in_reply_to_id" : 341748783,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTc2NzkxMg==",
      "original_commit_id" : "9eb373c07ad78448ea78eee97d1ee9b9b409b4b9",
      "original_position" : 41,
      "path" : "src/validationinterface.cpp",
      "position" : 24,
      "pull_request_review_id" : 310717851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341767912",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342251600"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342251600"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: `fInitialDownload ? 'true' : 'false'`",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-11-04T20:21:36Z",
      "diff_hunk" : "@@ -126,52 +131,90 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n+// Use a macro instead of a function for conditional logging to prevent\n+// evaluating arguments when logging is not enabled.\n+//\n+// NOTE: The lambda captures all local variables by value.\n+#define ENQUEUE_AND_LOG_EVENT(event, fmt, name, ...)           \\\n+    do {                                                       \\\n+        auto local_name = (name);                              \\\n+        LOG_EVENT(\"Enqueuing \" fmt, local_name, __VA_ARGS__);  \\\n+        m_internals->m_schedulerClient.AddToProcessQueue([=] { \\\n+            LOG_EVENT(fmt, local_name, __VA_ARGS__);           \\\n+            event();                                           \\\n+        });                                                    \\\n+    } while (0)\n+\n+#define LOG_EVENT(fmt, ...) \\\n+    LogPrint(BCLog::VALIDATIONINTERFACE, fmt \"\\n\", __VA_ARGS__)\n \n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto event = [pindexNew, pindexFork, fInitialDownload, this] {\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: new block hash=%s fork block hash=%s (in IBD=%d)\", __func__,\n+                          pindexNew->GetBlockHash().ToString(),\n+                          pindexFork ? pindexFork->GetBlockHash().ToString() : \"null\",\n+                          fInitialDownload);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342251600",
      "id" : 342251600,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MjI1MTYwMA==",
      "original_commit_id" : "9eb373c07ad78448ea78eee97d1ee9b9b409b4b9",
      "original_position" : 65,
      "path" : "src/validationinterface.cpp",
      "position" : 48,
      "pull_request_review_id" : 311334330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342251600",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342255685"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342255685"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Observation: This should be updated to also log the height when #15931 is merged (specifically commit https://github.com/bitcoin/bitcoin/pull/15931/commits/7d0f76a83e50328aaa8e7836b533ea0ea10d3c53)",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-11-04T20:31:38Z",
      "diff_hunk" : "@@ -126,52 +131,90 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n+// Use a macro instead of a function for conditional logging to prevent\n+// evaluating arguments when logging is not enabled.\n+//\n+// NOTE: The lambda captures all local variables by value.\n+#define ENQUEUE_AND_LOG_EVENT(event, fmt, name, ...)           \\\n+    do {                                                       \\\n+        auto local_name = (name);                              \\\n+        LOG_EVENT(\"Enqueuing \" fmt, local_name, __VA_ARGS__);  \\\n+        m_internals->m_schedulerClient.AddToProcessQueue([=] { \\\n+            LOG_EVENT(fmt, local_name, __VA_ARGS__);           \\\n+            event();                                           \\\n+        });                                                    \\\n+    } while (0)\n+\n+#define LOG_EVENT(fmt, ...) \\\n+    LogPrint(BCLog::VALIDATIONINTERFACE, fmt \"\\n\", __VA_ARGS__)\n \n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto event = [pindexNew, pindexFork, fInitialDownload, this] {\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: new block hash=%s fork block hash=%s (in IBD=%d)\", __func__,\n+                          pindexNew->GetBlockHash().ToString(),\n+                          pindexFork ? pindexFork->GetBlockHash().ToString() : \"null\",\n+                          fInitialDownload);\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto event = [ptx, this] {\n         m_internals->TransactionAddedToMempool(ptx);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: txid=%s wtxid=%s\", __func__,\n+                          ptx->GetHash().ToString(),\n+                          ptx->GetWitnessHash().ToString());\n+}\n+\n+void CMainSignals::TransactionRemovedFromMempool(CTransactionRef ptx, MemPoolRemovalReason reason) {\n+    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n+        auto event = [ptx, this] {\n+            m_internals->TransactionRemovedFromMempool(ptx);\n+        };\n+        ENQUEUE_AND_LOG_EVENT(event, \"%s: txid=%s wtxid=%s reason=%s\", __func__,\n+                              ptx->GetHash().ToString(),\n+                              ptx->GetWitnessHash().ToString(),\n+                              MemPoolRemovalReasonString(reason));\n+    }\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n+    auto event = [pblock, pindex, pvtxConflicted, this] {\n         m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: block hash=%s block height=%d\", __func__,\n+                          pblock->GetHash().ToString(),\n+                          pindex->nHeight);\n }\n \n void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, this] {\n+    auto event = [pblock, this] {\n         m_internals->BlockDisconnected(pblock);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: block hash=%s\", __func__,\n+                          pblock->GetHash().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342255685",
      "id" : 342255685,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MjI1NTY4NQ==",
      "original_commit_id" : "9eb373c07ad78448ea78eee97d1ee9b9b409b4b9",
      "original_position" : 109,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 311334330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342255685",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342728594"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342728594"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in f871e27 by changing `%d` to `%s`, as tinyformat does the conversion if using that specifier.\r\n\r\nhttps://github.com/c42f/tinyformat#special-cases-for-p-c-and-s",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-11-05T18:37:41Z",
      "diff_hunk" : "@@ -126,52 +131,90 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n+// Use a macro instead of a function for conditional logging to prevent\n+// evaluating arguments when logging is not enabled.\n+//\n+// NOTE: The lambda captures all local variables by value.\n+#define ENQUEUE_AND_LOG_EVENT(event, fmt, name, ...)           \\\n+    do {                                                       \\\n+        auto local_name = (name);                              \\\n+        LOG_EVENT(\"Enqueuing \" fmt, local_name, __VA_ARGS__);  \\\n+        m_internals->m_schedulerClient.AddToProcessQueue([=] { \\\n+            LOG_EVENT(fmt, local_name, __VA_ARGS__);           \\\n+            event();                                           \\\n+        });                                                    \\\n+    } while (0)\n+\n+#define LOG_EVENT(fmt, ...) \\\n+    LogPrint(BCLog::VALIDATIONINTERFACE, fmt \"\\n\", __VA_ARGS__)\n \n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto event = [pindexNew, pindexFork, fInitialDownload, this] {\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: new block hash=%s fork block hash=%s (in IBD=%d)\", __func__,\n+                          pindexNew->GetBlockHash().ToString(),\n+                          pindexFork ? pindexFork->GetBlockHash().ToString() : \"null\",\n+                          fInitialDownload);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342728594",
      "id" : 342728594,
      "in_reply_to_id" : 342251600,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MjcyODU5NA==",
      "original_commit_id" : "9eb373c07ad78448ea78eee97d1ee9b9b409b4b9",
      "original_position" : 65,
      "path" : "src/validationinterface.cpp",
      "position" : 48,
      "pull_request_review_id" : 311952786,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342728594",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342729535"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342729535"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK. Happy to wait for that to be merged if you prefer.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-11-05T18:39:30Z",
      "diff_hunk" : "@@ -126,52 +131,90 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n+// Use a macro instead of a function for conditional logging to prevent\n+// evaluating arguments when logging is not enabled.\n+//\n+// NOTE: The lambda captures all local variables by value.\n+#define ENQUEUE_AND_LOG_EVENT(event, fmt, name, ...)           \\\n+    do {                                                       \\\n+        auto local_name = (name);                              \\\n+        LOG_EVENT(\"Enqueuing \" fmt, local_name, __VA_ARGS__);  \\\n+        m_internals->m_schedulerClient.AddToProcessQueue([=] { \\\n+            LOG_EVENT(fmt, local_name, __VA_ARGS__);           \\\n+            event();                                           \\\n+        });                                                    \\\n+    } while (0)\n+\n+#define LOG_EVENT(fmt, ...) \\\n+    LogPrint(BCLog::VALIDATIONINTERFACE, fmt \"\\n\", __VA_ARGS__)\n \n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto event = [pindexNew, pindexFork, fInitialDownload, this] {\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: new block hash=%s fork block hash=%s (in IBD=%d)\", __func__,\n+                          pindexNew->GetBlockHash().ToString(),\n+                          pindexFork ? pindexFork->GetBlockHash().ToString() : \"null\",\n+                          fInitialDownload);\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto event = [ptx, this] {\n         m_internals->TransactionAddedToMempool(ptx);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: txid=%s wtxid=%s\", __func__,\n+                          ptx->GetHash().ToString(),\n+                          ptx->GetWitnessHash().ToString());\n+}\n+\n+void CMainSignals::TransactionRemovedFromMempool(CTransactionRef ptx, MemPoolRemovalReason reason) {\n+    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n+        auto event = [ptx, this] {\n+            m_internals->TransactionRemovedFromMempool(ptx);\n+        };\n+        ENQUEUE_AND_LOG_EVENT(event, \"%s: txid=%s wtxid=%s reason=%s\", __func__,\n+                              ptx->GetHash().ToString(),\n+                              ptx->GetWitnessHash().ToString(),\n+                              MemPoolRemovalReasonString(reason));\n+    }\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n+    auto event = [pblock, pindex, pvtxConflicted, this] {\n         m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: block hash=%s block height=%d\", __func__,\n+                          pblock->GetHash().ToString(),\n+                          pindex->nHeight);\n }\n \n void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, this] {\n+    auto event = [pblock, this] {\n         m_internals->BlockDisconnected(pblock);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: block hash=%s\", __func__,\n+                          pblock->GetHash().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342729535",
      "id" : 342729535,
      "in_reply_to_id" : 342255685,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MjcyOTUzNQ==",
      "original_commit_id" : "9eb373c07ad78448ea78eee97d1ee9b9b409b4b9",
      "original_position" : 109,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 311952786,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342729535",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tested ACK f871e272a1e4bd2b1c8b474416ee8eb065ef4e2c",
      "created_at" : "2019-11-05T18:41:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-549961497",
      "id" : 549961497,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0OTk2MTQ5Nw==",
      "updated_at" : "2019-11-05T18:41:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/549961497",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342825836"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342825836"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: const? ",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-11-05T22:14:54Z",
      "diff_hunk" : "@@ -356,6 +356,8 @@ enum class MemPoolRemovalReason {\n     REPLACED,    //!< Removed for replacement\n };\n \n+std::string MemPoolRemovalReasonString(const MemPoolRemovalReason reason);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342825836",
      "id" : 342825836,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MjgyNTgzNg==",
      "original_commit_id" : "454caa12c2267f01ae6aa3d5d0a8525e2d457c50",
      "original_position" : 4,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 312080356,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342825836",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342827985"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342827985"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Not a C++ expert, could you explain or point to why macro prevent to evaluate argument there? I mean aren't they replaced at preprocessing and we know flag only at runtime?",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-11-05T22:20:24Z",
      "diff_hunk" : "@@ -126,52 +131,90 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n+// Use a macro instead of a function for conditional logging to prevent",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342827985",
      "id" : 342827985,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MjgyNzk4NQ==",
      "original_commit_id" : "f871e272a1e4bd2b1c8b474416ee8eb065ef4e2c",
      "original_position" : 19,
      "path" : "src/validationinterface.cpp",
      "position" : 18,
      "pull_request_review_id" : 312080356,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342827985",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342835637"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342835637"
         }
      },
      "author_association" : "MEMBER",
      "body" : "compare the macro expansion:\r\n\r\n```c++\r\nif (debug_foo) {\r\n    LogPrintf(\"Foobar %i\", ExpensiveToComputeFunction());\r\n}\r\n```\r\n\r\nwith\r\n\r\n```c++\r\nLogPrint(BCLog::FOO, \"Foobar %i\", ExpensiveToComputeFunction());\r\n```\r\n\r\nIn the first example, `ExpensiveToComputeFunction` is not invoked if `debug_foo` is false. In the second one it's invoked, but then disregarded by `LogPrint`.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-11-05T22:41:01Z",
      "diff_hunk" : "@@ -126,52 +131,90 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n+// Use a macro instead of a function for conditional logging to prevent",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342835637",
      "id" : 342835637,
      "in_reply_to_id" : 342827985,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MjgzNTYzNw==",
      "original_commit_id" : "f871e272a1e4bd2b1c8b474416ee8eb065ef4e2c",
      "original_position" : 19,
      "path" : "src/validationinterface.cpp",
      "position" : 18,
      "pull_request_review_id" : 312092817,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342835637",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342844017"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342844017"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks but got it, `LogPrint` has been changed to a macro in https://github.com/bitcoin/bitcoin/pull/17218, was still thinking it was a function...\r\n\r\nThat's said shouldn't we use the `LOG_PRINT` convention as for any other macro ?",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-11-05T23:06:38Z",
      "diff_hunk" : "@@ -126,52 +131,90 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n+// Use a macro instead of a function for conditional logging to prevent",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342844017",
      "id" : 342844017,
      "in_reply_to_id" : 342827985,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mjg0NDAxNw==",
      "original_commit_id" : "f871e272a1e4bd2b1c8b474416ee8eb065ef4e2c",
      "original_position" : 19,
      "path" : "src/validationinterface.cpp",
      "position" : 18,
      "pull_request_review_id" : 312103713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342844017",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Tested ACK f871e27",
      "created_at" : "2019-11-05T23:09:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-550064918",
      "id" : 550064918,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MDA2NDkxOA==",
      "updated_at" : "2019-11-05T23:09:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/550064918",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342848451"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342848451"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Do you mean remove the const from the parameter?",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-11-05T23:21:26Z",
      "diff_hunk" : "@@ -356,6 +356,8 @@ enum class MemPoolRemovalReason {\n     REPLACED,    //!< Removed for replacement\n };\n \n+std::string MemPoolRemovalReasonString(const MemPoolRemovalReason reason);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342848451",
      "id" : 342848451,
      "in_reply_to_id" : 342825836,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mjg0ODQ1MQ==",
      "original_commit_id" : "454caa12c2267f01ae6aa3d5d0a8525e2d457c50",
      "original_position" : 4,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 312109298,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342848451",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342876449"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342876449"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nevermind, that's not a class method, useless to put const in function signature",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-11-06T01:14:29Z",
      "diff_hunk" : "@@ -356,6 +356,8 @@ enum class MemPoolRemovalReason {\n     REPLACED,    //!< Removed for replacement\n };\n \n+std::string MemPoolRemovalReasonString(const MemPoolRemovalReason reason);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r342876449",
      "id" : 342876449,
      "in_reply_to_id" : 342825836,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mjg3NjQ0OQ==",
      "original_commit_id" : "454caa12c2267f01ae6aa3d5d0a8525e2d457c50",
      "original_position" : 4,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 312144190,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342876449",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r343476465"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343476465"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm using the convention in this PR but did not change it in the referenced PR for `LogPrint` since it was simply partially reverting a commit. It would have been a much larger change to update all the call sites, and that's something I'd be hesitant in undertaking without enough support for the change.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-11-07T04:57:32Z",
      "diff_hunk" : "@@ -126,52 +131,90 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n+// Use a macro instead of a function for conditional logging to prevent",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r343476465",
      "id" : 343476465,
      "in_reply_to_id" : 342827985,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzQ3NjQ2NQ==",
      "original_commit_id" : "f871e272a1e4bd2b1c8b474416ee8eb065ef4e2c",
      "original_position" : 19,
      "path" : "src/validationinterface.cpp",
      "position" : 18,
      "pull_request_review_id" : 313109192,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343476465",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-11-08T11:05:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-551590055",
      "id" : 551590055,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MTU5MDA1NQ==",
      "updated_at" : "2019-11-08T11:05:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/551590055",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r344134808"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344134808"
         }
      },
      "author_association" : "MEMBER",
      "body" : "#15931 is merged",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-11-08T11:36:13Z",
      "diff_hunk" : "@@ -126,52 +131,90 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n+// Use a macro instead of a function for conditional logging to prevent\n+// evaluating arguments when logging is not enabled.\n+//\n+// NOTE: The lambda captures all local variables by value.\n+#define ENQUEUE_AND_LOG_EVENT(event, fmt, name, ...)           \\\n+    do {                                                       \\\n+        auto local_name = (name);                              \\\n+        LOG_EVENT(\"Enqueuing \" fmt, local_name, __VA_ARGS__);  \\\n+        m_internals->m_schedulerClient.AddToProcessQueue([=] { \\\n+            LOG_EVENT(fmt, local_name, __VA_ARGS__);           \\\n+            event();                                           \\\n+        });                                                    \\\n+    } while (0)\n+\n+#define LOG_EVENT(fmt, ...) \\\n+    LogPrint(BCLog::VALIDATIONINTERFACE, fmt \"\\n\", __VA_ARGS__)\n \n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto event = [pindexNew, pindexFork, fInitialDownload, this] {\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: new block hash=%s fork block hash=%s (in IBD=%d)\", __func__,\n+                          pindexNew->GetBlockHash().ToString(),\n+                          pindexFork ? pindexFork->GetBlockHash().ToString() : \"null\",\n+                          fInitialDownload);\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto event = [ptx, this] {\n         m_internals->TransactionAddedToMempool(ptx);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: txid=%s wtxid=%s\", __func__,\n+                          ptx->GetHash().ToString(),\n+                          ptx->GetWitnessHash().ToString());\n+}\n+\n+void CMainSignals::TransactionRemovedFromMempool(CTransactionRef ptx, MemPoolRemovalReason reason) {\n+    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n+        auto event = [ptx, this] {\n+            m_internals->TransactionRemovedFromMempool(ptx);\n+        };\n+        ENQUEUE_AND_LOG_EVENT(event, \"%s: txid=%s wtxid=%s reason=%s\", __func__,\n+                              ptx->GetHash().ToString(),\n+                              ptx->GetWitnessHash().ToString(),\n+                              MemPoolRemovalReasonString(reason));\n+    }\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n+    auto event = [pblock, pindex, pvtxConflicted, this] {\n         m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: block hash=%s block height=%d\", __func__,\n+                          pblock->GetHash().ToString(),\n+                          pindex->nHeight);\n }\n \n void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, this] {\n+    auto event = [pblock, this] {\n         m_internals->BlockDisconnected(pblock);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: block hash=%s\", __func__,\n+                          pblock->GetHash().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r344134808",
      "id" : 344134808,
      "in_reply_to_id" : 342255685,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDEzNDgwOA==",
      "original_commit_id" : "9eb373c07ad78448ea78eee97d1ee9b9b409b4b9",
      "original_position" : 109,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 314148347,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344134808",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased on master and added height logging to `BlockDisconnected` here: https://github.com/jnewbery/bitcoin/tree/pr16688.1 . Feel free to take it!",
      "created_at" : "2019-11-08T20:47:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-551984040",
      "id" : 551984040,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MTk4NDA0MA==",
      "updated_at" : "2019-11-08T20:47:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/551984040",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r344397553"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344397553"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated in 741cab0.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-11-08T22:52:44Z",
      "diff_hunk" : "@@ -126,52 +131,90 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n-void CMainSignals::MempoolEntryRemoved(CTransactionRef ptx, MemPoolRemovalReason reason) {\n-    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n-        m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n-            m_internals->TransactionRemovedFromMempool(ptx);\n-        });\n-    }\n-}\n+// Use a macro instead of a function for conditional logging to prevent\n+// evaluating arguments when logging is not enabled.\n+//\n+// NOTE: The lambda captures all local variables by value.\n+#define ENQUEUE_AND_LOG_EVENT(event, fmt, name, ...)           \\\n+    do {                                                       \\\n+        auto local_name = (name);                              \\\n+        LOG_EVENT(\"Enqueuing \" fmt, local_name, __VA_ARGS__);  \\\n+        m_internals->m_schedulerClient.AddToProcessQueue([=] { \\\n+            LOG_EVENT(fmt, local_name, __VA_ARGS__);           \\\n+            event();                                           \\\n+        });                                                    \\\n+    } while (0)\n+\n+#define LOG_EVENT(fmt, ...) \\\n+    LogPrint(BCLog::VALIDATIONINTERFACE, fmt \"\\n\", __VA_ARGS__)\n \n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto event = [pindexNew, pindexFork, fInitialDownload, this] {\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: new block hash=%s fork block hash=%s (in IBD=%d)\", __func__,\n+                          pindexNew->GetBlockHash().ToString(),\n+                          pindexFork ? pindexFork->GetBlockHash().ToString() : \"null\",\n+                          fInitialDownload);\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto event = [ptx, this] {\n         m_internals->TransactionAddedToMempool(ptx);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: txid=%s wtxid=%s\", __func__,\n+                          ptx->GetHash().ToString(),\n+                          ptx->GetWitnessHash().ToString());\n+}\n+\n+void CMainSignals::TransactionRemovedFromMempool(CTransactionRef ptx, MemPoolRemovalReason reason) {\n+    if (reason != MemPoolRemovalReason::BLOCK && reason != MemPoolRemovalReason::CONFLICT) {\n+        auto event = [ptx, this] {\n+            m_internals->TransactionRemovedFromMempool(ptx);\n+        };\n+        ENQUEUE_AND_LOG_EVENT(event, \"%s: txid=%s wtxid=%s reason=%s\", __func__,\n+                              ptx->GetHash().ToString(),\n+                              ptx->GetWitnessHash().ToString(),\n+                              MemPoolRemovalReasonString(reason));\n+    }\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n+    auto event = [pblock, pindex, pvtxConflicted, this] {\n         m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: block hash=%s block height=%d\", __func__,\n+                          pblock->GetHash().ToString(),\n+                          pindex->nHeight);\n }\n \n void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock> &pblock) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, this] {\n+    auto event = [pblock, this] {\n         m_internals->BlockDisconnected(pblock);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: block hash=%s\", __func__,\n+                          pblock->GetHash().ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r344397553",
      "id" : 344397553,
      "in_reply_to_id" : 342255685,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NDM5NzU1Mw==",
      "original_commit_id" : "9eb373c07ad78448ea78eee97d1ee9b9b409b4b9",
      "original_position" : 109,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 314501475,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/344397553",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tested ACK 741cab0a7dcfe07860db8ad73678fbfde7eb6ada\r\n\r\nYour latest push has different emails for the Author and Committer in the commits. I'm not sure if that was intentional or you want to change it back.",
      "created_at" : "2019-11-08T23:25:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-552029949",
      "id" : 552029949,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MjAyOTk0OQ==",
      "updated_at" : "2019-11-08T23:25:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/552029949",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-11-10T10:28:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-552182077",
      "id" : 552182077,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MjE4MjA3Nw==",
      "updated_at" : "2019-11-10T10:28:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/552182077",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Tested ACK [741cab0](https://github.com/bitcoin/bitcoin/commit/741cab0a7dcfe07860db8ad73678fbfde7eb6ada)\r\n> \r\n> Your latest push has different emails for the Author and Committer in the commits. I'm not sure if that was intentional or you want to change it back.\r\n\r\nUpdated and rebased.",
      "created_at" : "2019-11-11T21:21:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-552621471",
      "id" : 552621471,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MjYyMTQ3MQ==",
      "updated_at" : "2019-11-11T21:21:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/552621471",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK cd6bf9970fdebc878cfc2d3b80bfc6cd4d39ffd7",
      "created_at" : "2019-11-11T22:12:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-552640474",
      "id" : 552640474,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MjY0MDQ3NA==",
      "updated_at" : "2019-11-11T22:12:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/552640474",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK cd6bf99. Change since last time is block height in `BlockDisconnected` log.",
      "created_at" : "2019-11-14T16:42:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-553972937",
      "id" : 553972937,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1Mzk3MjkzNw==",
      "updated_at" : "2019-11-14T16:42:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/553972937",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-11-22T15:54:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-557586853",
      "id" : 557586853,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NzU4Njg1Mw==",
      "updated_at" : "2019-11-22T15:54:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557586853",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r349771939"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349771939"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "No longer needed since rebasing removed the need for this code.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-11-22T20:02:32Z",
      "diff_hunk" : "@@ -1098,3 +1100,22 @@ void CTxMemPool::SetIsLoaded(bool loaded)\n }\n \n SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n+\n+std::string MemPoolRemovalReasonString(const MemPoolRemovalReason reason)\n+{\n+    switch (reason) {\n+    case MemPoolRemovalReason::EXPIRY:\n+        return \"EXPIRY\";\n+    case MemPoolRemovalReason::SIZELIMIT:\n+        return \"SIZELIMIT\";\n+    case MemPoolRemovalReason::REORG:\n+        return \"REORG\";\n+    case MemPoolRemovalReason::BLOCK:\n+        return \"BLOCK\";\n+    case MemPoolRemovalReason::CONFLICT:\n+        return \"CONFLICT\";\n+    case MemPoolRemovalReason::REPLACED:\n+        return \"REPLACED\";\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r349771939",
      "id" : 349771939,
      "in_reply_to_id" : 336786215,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc3MTkzOQ==",
      "original_commit_id" : "deb243ef8798e7b400da9748a2f2dffe02617cc1",
      "original_position" : 29,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 321779545,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349771939",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased and resolved merge conflicts. The commits for formatting `MemPoolRemovalReason` and renaming `CMainSignals::MempoolEntryRemoved` have been removed since #14384 made them obsolete. But just realized @jnewbery asked to have the reason added in this PR if the #14384 was merged first.",
      "created_at" : "2019-11-22T20:11:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-557676990",
      "id" : 557676990,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NzY3Njk5MA==",
      "updated_at" : "2019-11-22T20:11:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557676990",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> @jnewbery asked to have the reason added in this PR\r\n\r\nIt's not essential but I think logging the reason is definitely a nice-to-have. None of the clients need access to the reason (yet) so it could just be logged and dropped in the validationinterface.",
      "created_at" : "2019-11-22T20:40:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-557685952",
      "id" : 557685952,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NzY4NTk1Mg==",
      "updated_at" : "2019-11-22T20:40:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557685952",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> It's not essential but I think logging the reason is definitely a nice-to-have. None of the clients need access to the reason (yet) so it could just be logged and dropped in the validationinterface.\r\n\r\nDone in 34d6486.",
      "created_at" : "2019-11-22T21:24:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-557700110",
      "id" : 557700110,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NzcwMDExMA==",
      "updated_at" : "2019-11-22T21:24:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557700110",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tested ACK 34d6486de309d24d040a900fe3492582dc6bbb45",
      "created_at" : "2019-11-22T21:43:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-557705599",
      "id" : 557705599,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NzcwNTU5OQ==",
      "updated_at" : "2019-11-22T21:43:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557705599",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'd love to see this merged soon. Once you've had validationinterface logging for test debugging, you don't want to go back!",
      "created_at" : "2019-11-22T21:48:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-557707056",
      "id" : 557707056,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NzcwNzA1Ng==",
      "updated_at" : "2019-11-22T21:48:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557707056",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The linter says 34d6486 introduced a circular dependency:\r\n\r\n```\r\nA new circular dependency in the form of \"txmempool -> validationinterface -> txmempool\" appears to have been introduced.\r\n```\r\n\r\nTo break this, I'd have to move both `MemPoolRemovalReason` and `MemPoolRemovalReasonString` elsewhere. Thoughts?",
      "created_at" : "2019-11-23T01:23:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-557751161",
      "id" : 557751161,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1Nzc1MTE2MQ==",
      "updated_at" : "2019-11-23T01:34:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557751161",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> To break this, I'd have to move both MemPoolRemovalReason and MemPoolRemovalReasonString elsewhere. Thoughts?\r\n\r\nJust remove that commit. No need to make this PR more complex just to log the removal reason. It can be done in a follow-up.",
      "created_at" : "2019-11-23T03:09:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-557760416",
      "id" : 557760416,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1Nzc2MDQxNg==",
      "updated_at" : "2019-11-23T03:09:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557760416",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tested ACK 0cadb123b",
      "created_at" : "2019-11-25T15:28:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-558206079",
      "id" : 558206079,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1ODIwNjA3OQ==",
      "updated_at" : "2019-11-25T15:28:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558206079",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK 0cadb12, only changes are dropping commits/removing arg following #14384 merge",
      "created_at" : "2019-11-25T19:26:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-558303961",
      "id" : 558303961,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1ODMwMzk2MQ==",
      "updated_at" : "2019-11-25T19:26:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558303961",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Will test.",
      "created_at" : "2019-12-21T21:10:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-568212213",
      "id" : 568212213,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2ODIxMjIxMw==",
      "updated_at" : "2019-12-21T21:10:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/568212213",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "There are some code organization concerns.\r\n\r\nI believe that headers and forward class declaration should not be touched in the \"_Format CValidationState properly in all cases_\" commit (ee4d66a38c5c09161f8a3e63047db6b6908687f4).\r\n\r\nInstead, `<consensus/validation.h>` should be included to `validationinterface.cpp` in the \"_Add logging for CValidationInterface events_\" commit (0cadb123bad37a2c224834a3d98bed474c661c21).",
      "created_at" : "2019-12-22T08:50:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-568243356",
      "id" : 568243356,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2ODI0MzM1Ng==",
      "updated_at" : "2019-12-22T08:50:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/568243356",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r361541021"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361541021"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add VALIDATIONINTERFACE to BCLog::LogFlags\" (389d423a252e43d0b08871f8ae5b66a84a8a217c)\r\n\r\nWould change names to `VALIDATION, \"validation\"`. These are just validation events. Fact that they are printed in the validationinterface source file instead of the validation one is an implementation detail that could change and would be arcane to someone just trying to configure logging categories.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-12-26T22:08:05Z",
      "diff_hunk" : "@@ -162,6 +162,7 @@ const CLogCategoryDesc LogCategories[] =\n     {BCLog::COINDB, \"coindb\"},\n     {BCLog::QT, \"qt\"},\n     {BCLog::LEVELDB, \"leveldb\"},\n+    {BCLog::VALIDATIONINTERFACE, \"validationinterface\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r361541021",
      "id" : 361541021,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTU0MTAyMQ==",
      "original_commit_id" : "389d423a252e43d0b08871f8ae5b66a84a8a217c",
      "original_position" : 4,
      "path" : "src/logging.cpp",
      "position" : null,
      "pull_request_review_id" : 336624585,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361541021",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r361541576"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361541576"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Format CValidationState properly in all cases\" (ee4d66a38c5c09161f8a3e63047db6b6908687f4)\r\n\r\nReplacing forward declaration with a full include seems unnecessary here, just making the diff bigger and perhaps unnecessarily slowing down compilation.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-12-26T22:12:38Z",
      "diff_hunk" : "@@ -6,9 +6,9 @@\n #ifndef BITCOIN_UTIL_VALIDATION_H\n #define BITCOIN_UTIL_VALIDATION_H\n \n-#include <string>\n+#include <consensus/validation.h>\n \n-class ValidationState;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r361541576",
      "id" : 361541576,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTU0MTU3Ng==",
      "original_commit_id" : "ee4d66a38c5c09161f8a3e63047db6b6908687f4",
      "original_position" : 7,
      "path" : "src/util/validation.h",
      "position" : null,
      "pull_request_review_id" : 336624585,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361541576",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r361542659"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361542659"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Format CValidationState properly in all cases\" (ee4d66a38c5c09161f8a3e63047db6b6908687f4)\r\n\r\nI'm a little confused by all the changes in this commit. As far as I can tell the only change that affects behavior is adding `if (state.IsValid()) return \"Valid\";` at the top of this function, and everything else is a rewrite / style cleanup. Not a big deal, but in the future it might be good to fully motivate changes in the commit description or do style changes in separate commits.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-12-26T22:22:29Z",
      "diff_hunk" : "@@ -5,15 +5,20 @@\n \n #include <util/validation.h>\n \n-#include <consensus/validation.h>\n #include <tinyformat.h>\n \n-/** Convert ValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const ValidationState &state)\n {\n-    return strprintf(\"%s%s\",\n-        state.GetRejectReason(),\n-        state.GetDebugMessage().empty() ? \"\" : \", \"+state.GetDebugMessage());\n+    if (state.IsValid()) {\n+        return \"Valid\";\n+    }\n+\n+    const std::string debug_message = state.GetDebugMessage();\n+    if (!debug_message.empty()) {\n+        return strprintf(\"%s, %s\", state.GetRejectReason(), debug_message);\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r361542659",
      "id" : 361542659,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTU0MjY1OQ==",
      "original_commit_id" : "ee4d66a38c5c09161f8a3e63047db6b6908687f4",
      "original_position" : 20,
      "path" : "src/util/validation.cpp",
      "position" : 17,
      "pull_request_review_id" : 336624585,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361542659",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r361543177"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361543177"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add logging for CValidationInterface events\" (0cadb123bad37a2c224834a3d98bed474c661c21)\r\n\r\nWhitespace is changing unnecessarily (and format is nonstandard, brace should go on new line)",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2019-12-26T22:27:18Z",
      "diff_hunk" : "@@ -110,52 +114,88 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n+// Use a macro instead of a function for conditional logging to prevent\n+// evaluating arguments when logging is not enabled.\n+//\n+// NOTE: The lambda captures all local variables by value.\n+#define ENQUEUE_AND_LOG_EVENT(event, fmt, name, ...)           \\\n+    do {                                                       \\\n+        auto local_name = (name);                              \\\n+        LOG_EVENT(\"Enqueuing \" fmt, local_name, __VA_ARGS__);  \\\n+        m_internals->m_schedulerClient.AddToProcessQueue([=] { \\\n+            LOG_EVENT(fmt, local_name, __VA_ARGS__);           \\\n+            event();                                           \\\n+        });                                                    \\\n+    } while (0)\n+\n+#define LOG_EVENT(fmt, ...) \\\n+    LogPrint(BCLog::VALIDATIONINTERFACE, fmt \"\\n\", __VA_ARGS__)\n \n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto event = [pindexNew, pindexFork, fInitialDownload, this] {\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: new block hash=%s fork block hash=%s (in IBD=%s)\", __func__,\n+                          pindexNew->GetBlockHash().ToString(),\n+                          pindexFork ? pindexFork->GetBlockHash().ToString() : \"null\",\n+                          fInitialDownload);\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto event = [ptx, this] {\n         m_internals->TransactionAddedToMempool(ptx);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: txid=%s wtxid=%s\", __func__,\n+                          ptx->GetHash().ToString(),\n+                          ptx->GetWitnessHash().ToString());\n }\n \n void CMainSignals::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto event = [ptx, this] {\n         m_internals->TransactionRemovedFromMempool(ptx);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: txid=%s wtxid=%s\", __func__,\n+                          ptx->GetHash().ToString(),\n+                          ptx->GetWitnessHash().ToString());\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n+    auto event = [pblock, pindex, pvtxConflicted, this] {\n         m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: block hash=%s block height=%d\", __func__,\n+                          pblock->GetHash().ToString(),\n+                          pindex->nHeight);\n }\n \n-void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex)\n-{\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, this] {\n+void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r361543177",
      "id" : 361543177,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MTU0MzE3Nw==",
      "original_commit_id" : "0cadb123bad37a2c224834a3d98bed474c661c21",
      "original_position" : 86,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 336624585,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/361543177",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r362925681"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362925681"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I was largely trying to avoid style changes and conform with the local conventions in the file. However, in the interim the brace was moved in https://github.com/bitcoin/bitcoin/commit/10b4729e33f76092bd8cfa06d1a5e0a066436f76#diff-e8d9e22d9683f73a9fb8399be0dab640R159 to use the standard conventions.\r\n\r\nNot sure what is preferred, but I don't mind changing it back to reduce the diff size.",
      "commit_id" : "f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2020-01-03T19:10:26Z",
      "diff_hunk" : "@@ -110,52 +114,88 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n+// Use a macro instead of a function for conditional logging to prevent\n+// evaluating arguments when logging is not enabled.\n+//\n+// NOTE: The lambda captures all local variables by value.\n+#define ENQUEUE_AND_LOG_EVENT(event, fmt, name, ...)           \\\n+    do {                                                       \\\n+        auto local_name = (name);                              \\\n+        LOG_EVENT(\"Enqueuing \" fmt, local_name, __VA_ARGS__);  \\\n+        m_internals->m_schedulerClient.AddToProcessQueue([=] { \\\n+            LOG_EVENT(fmt, local_name, __VA_ARGS__);           \\\n+            event();                                           \\\n+        });                                                    \\\n+    } while (0)\n+\n+#define LOG_EVENT(fmt, ...) \\\n+    LogPrint(BCLog::VALIDATIONINTERFACE, fmt \"\\n\", __VA_ARGS__)\n \n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto event = [pindexNew, pindexFork, fInitialDownload, this] {\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: new block hash=%s fork block hash=%s (in IBD=%s)\", __func__,\n+                          pindexNew->GetBlockHash().ToString(),\n+                          pindexFork ? pindexFork->GetBlockHash().ToString() : \"null\",\n+                          fInitialDownload);\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto event = [ptx, this] {\n         m_internals->TransactionAddedToMempool(ptx);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: txid=%s wtxid=%s\", __func__,\n+                          ptx->GetHash().ToString(),\n+                          ptx->GetWitnessHash().ToString());\n }\n \n void CMainSignals::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto event = [ptx, this] {\n         m_internals->TransactionRemovedFromMempool(ptx);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: txid=%s wtxid=%s\", __func__,\n+                          ptx->GetHash().ToString(),\n+                          ptx->GetWitnessHash().ToString());\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n+    auto event = [pblock, pindex, pvtxConflicted, this] {\n         m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: block hash=%s block height=%d\", __func__,\n+                          pblock->GetHash().ToString(),\n+                          pindex->nHeight);\n }\n \n-void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex)\n-{\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, this] {\n+void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#discussion_r362925681",
      "id" : 362925681,
      "in_reply_to_id" : 361543177,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyNTY4MQ==",
      "original_commit_id" : "0cadb123bad37a2c224834a3d98bed474c661c21",
      "original_position" : 86,
      "path" : "src/validationinterface.cpp",
      "position" : null,
      "pull_request_review_id" : 338229413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16688",
      "updated_at" : "2020-01-03T20:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362925681",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@hebasto @ryanofsky Thanks for the review! I've addressed all comments.",
      "created_at" : "2020-01-03T20:17:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-570686368",
      "id" : 570686368,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MDY4NjM2OA==",
      "updated_at" : "2020-01-03T20:17:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/570686368",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/4015903?v=4",
         "events_url" : "https://api.github.com/users/jkczyz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jkczyz/followers",
         "following_url" : "https://api.github.com/users/jkczyz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jkczyz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jkczyz",
         "id" : 4015903,
         "login" : "jkczyz",
         "node_id" : "MDQ6VXNlcjQwMTU5MDM=",
         "organizations_url" : "https://api.github.com/users/jkczyz/orgs",
         "received_events_url" : "https://api.github.com/users/jkczyz/received_events",
         "repos_url" : "https://api.github.com/users/jkczyz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jkczyz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jkczyz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jkczyz"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2020-01-03T21:07:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-570698525",
      "id" : 570698525,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MDY5ODUyNQ==",
      "updated_at" : "2020-01-03T21:07:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/570698525",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK f9abf4ab6d3d3e4d4b7e90723020b5422a141a6f",
      "created_at" : "2020-01-03T22:06:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-570712502",
      "id" : 570712502,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MDcxMjUwMg==",
      "updated_at" : "2020-01-03T22:06:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/570712502",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK f9abf4a, only changes since 0cadb12 are replacing log indication `VALIDATIONINTERFACE` by `VALIDATION` and avoiding a forward declaration with a new include",
      "created_at" : "2020-01-03T23:10:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16688#issuecomment-570725502",
      "id" : 570725502,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16688",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MDcyNTUwMg==",
      "updated_at" : "2020-01-03T23:11:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/570725502",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   }
]
