[
   {
      "author_association" : "MEMBER",
      "body" : "This is #7729 with the following changes:\r\n\r\n- rebased on master\r\n- don't mark `getaddressinfo` as deprecated (https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177767690)\r\n- used `address` instead of `bitcoinaddress` as the argument for several RPC methods (https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177768880)\r\n- remove destdata from RPC return objects (https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177769646)\r\n- remove the `getlabel` RPC method, now that we have `getaddressinfo` (https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177770329)\r\n- sort labels before returning in `listlabels` RPC (https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177771425)\r\n- add an optional `force` bool argument to `getlabeladdress`, defaulting to False. When set to false, `getlabeladdress` will fail with an error if called on a label that doesn't exist. When set to true `getlabeladdress` will create a new label and new label address if called on a label that doesn't exist. I originally wanted to always throw an error if the label didn't exist (https://github.com/bitcoin/bitcoin/pull/7729/files/fef41789e8d7293ccfd859bc90fa0a3b2484752d#diff-df7d84ff2f53fcb2a0dc15a3a51e55ce), but apparently some miners depend on being able to create labels/accounts this way (https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199444036)\r\n- `getaddressesbylabel` throws an error if called for a label that doesn't exist (https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177776131)\r\n- fixup python tests to work with slightly modified RPCs\r\n\r\n@laanwj doesn't have time to maintain #7729. I'd like to try to get this merged before v0.17.",
      "created_at" : "2018-04-05T17:34:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379016369",
      "id" : 379016369,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-05T17:43:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379016369",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "For full history of this PR, see #7729. Requesting review from reviewers of that PR: @Sjors , @MarcoFalke , @ryanofsky , @jonasschnelli , @instagibbs , @sipa , @luke-jr .\r\n",
      "created_at" : "2018-04-05T17:36:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379016903",
      "id" : 379016903,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-05T17:36:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379016903",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179544127"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179544127"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unrelated change.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-05T17:39:55Z",
      "diff_hunk" : "@@ -294,10 +314,10 @@ UniValue setlabel(const JSONRPCRequest& request)\n             \"\\nSets the label associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"         (string, required) The bitcoin address to be associated with a label.\\n\"\n-            \"2. \\\"label\\\"           (string, required) The label to assign the address to.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"tabby\\\"\")\n-            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"tabby\\\"\")\n+            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179544127",
      "id" : 179544127,
      "original_commit_id" : "a8d607dda88526519ce0d49c30fa4732db9d77d2",
      "original_position" : 63,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109808648,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179544127",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179544644"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179544644"
         }
      },
      "author_association" : "MEMBER",
      "body" : "reverted",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-05T17:41:42Z",
      "diff_hunk" : "@@ -294,10 +314,10 @@ UniValue setlabel(const JSONRPCRequest& request)\n             \"\\nSets the label associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"         (string, required) The bitcoin address to be associated with a label.\\n\"\n-            \"2. \\\"label\\\"           (string, required) The label to assign the address to.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"tabby\\\"\")\n-            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"tabby\\\"\")\n+            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179544644",
      "id" : 179544644,
      "in_reply_to_id" : 179544127,
      "original_commit_id" : "a8d607dda88526519ce0d49c30fa4732db9d77d2",
      "original_position" : 63,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109809269,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179544644",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179550228"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179550228"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Since this call gets even weirder, shouldn't we deprecate it in this PR?",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-05T18:00:10Z",
      "diff_hunk" : "@@ -205,14 +210,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n             \"getlabeladdress \\\"label\\\"\\n\"\n-            \"\\nReturns the current Bitcoin address for receiving payments to this label.\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179550228",
      "id" : 179550228,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 21,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109816045,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179550228",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179586165"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179586165"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Aparently some miners require this functionality (https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199444036).\r\n\r\nI'd personally prefer to deprecate/remove this RPC method, but in the interest of making progress on this, let's maintain the current functionality and reconsider deprecation later.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-05T20:09:28Z",
      "diff_hunk" : "@@ -205,14 +210,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n             \"getlabeladdress \\\"label\\\"\\n\"\n-            \"\\nReturns the current Bitcoin address for receiving payments to this label.\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179586165",
      "id" : 179586165,
      "in_reply_to_id" : 179550228,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 21,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109859344,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179586165",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179595395"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179595395"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Remove `cs_main`?",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-05T20:45:36Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179595395",
      "id" : 179595395,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 168,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179595395",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596357"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596357"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Future improvements:\r\n  - move this to wallet function?\r\n  - index address by label with a multi map?",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-05T20:49:18Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596357",
      "id" : 179596357,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 174,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596357",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596659"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596659"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could push to `ret` and avoid `addresses`?",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-05T20:50:29Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596659",
      "id" : 179596659,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 176,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596659",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596812"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596812"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Remove `cs_main`?",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-05T20:51:05Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596812",
      "id" : 179596812,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 220,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596812",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596968"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`!params[0].isNull()`",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-05T20:51:45Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596968",
      "id" : 179596968,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 223,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596968",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179597144"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179597144"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit, space before `{`.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-05T20:52:20Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> label_set;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179597144",
      "id" : 179597144,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 229,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179597144",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179598325"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179598325"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Already sorted?",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-05T20:56:39Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> label_set;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){\n+            label_set.insert(entry.second.name);\n+        }\n+    }\n+\n+    // Move label names to a list and sort before returning\n+    std::list<std::string> label_list(label_set.begin(), label_set.end());\n+    label_list.sort();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179598325",
      "id" : 179598325,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 236,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179598325",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179598904"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179598904"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit space after `&`.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-05T20:58:41Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> label_set;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){\n+            label_set.insert(entry.second.name);\n+        }\n+    }\n+\n+    // Move label names to a list and sort before returning\n+    std::list<std::string> label_list(label_set.begin(), label_set.end());\n+    label_list.sort();\n+    UniValue ret(UniValue::VARR);\n+    for (const std::string &name : label_list) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179598904",
      "id" : 179598904,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 238,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179598904",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179605981"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179605981"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit, move to `CWallet::DeleteLabel(const std::string& label)`? Or make it `static` for now?",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-05T21:27:09Z",
      "diff_hunk" : "@@ -187,6 +187,11 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n     return EncodeDestination(dest);\n }\n \n+void DeleteLabel(CWallet& wallet, std::string label)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179605981",
      "id" : 179605981,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 4,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179605981",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179606230"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179606230"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Missing `( force )`.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-05T21:28:06Z",
      "diff_hunk" : "@@ -205,14 +210,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n             \"getlabeladdress \\\"label\\\"\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179606230",
      "id" : 179606230,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 19,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179606230",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179606340"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179606340"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Missing `< 1`.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-05T21:28:32Z",
      "diff_hunk" : "@@ -205,14 +210,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() > 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179606340",
      "id" : 179606340,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 17,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179606340",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179606516"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179606516"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit, add `{}`.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-05T21:29:13Z",
      "diff_hunk" : "@@ -224,6 +230,20 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n \n     // Parse the label first so we don't generate a key if there's an error\n     std::string label = LabelFromValue(request.params[0]);\n+    bool force = false;\n+    if (!request.params[1].isNull())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179606516",
      "id" : 179606516,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 37,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179606516",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the review @promag . Will address comments tomorrow.",
      "created_at" : "2018-04-05T21:36:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379084425",
      "id" : 379084425,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-05T21:36:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379084425",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179629187"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179629187"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Agree, if left unchanged this would be the only direct `CWalletDB` call from rpcwallet. Seems as though it should go through `CWallet`",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-05T23:39:49Z",
      "diff_hunk" : "@@ -187,6 +187,11 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n     return EncodeDestination(dest);\n }\n \n+void DeleteLabel(CWallet& wallet, std::string label)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179629187",
      "id" : 179629187,
      "in_reply_to_id" : 179605981,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 4,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109911554,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179629187",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179796359"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179796359"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It seems odd to me that `label` is marked as a required argument for `setlabel` but if it's not provided then we default to an empty string instead of throwing an error. If we want to keep the behavior then `label` should be marked as optional.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-06T15:36:58Z",
      "diff_hunk" : "@@ -308,22 +328,24 @@ UniValue setlabel(const JSONRPCRequest& request)\n     }\n \n     std::string label;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179796359",
      "id" : 179796359,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 67,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110110892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179796359",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179802956"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179802956"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-06T16:00:01Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179802956",
      "id" : 179802956,
      "in_reply_to_id" : 179595395,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 168,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110118893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179802956",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179803063"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179803063"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-06T16:00:20Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179803063",
      "id" : 179803063,
      "in_reply_to_id" : 179596812,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 220,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110119005,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179803063",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179809220"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179809220"
         }
      },
      "author_association" : "MEMBER",
      "body" : "yes, done.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-06T16:25:56Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179809220",
      "id" : 179809220,
      "in_reply_to_id" : 179596659,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 176,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110126650,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179809220",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179809653"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179809653"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-06T16:27:42Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179809653",
      "id" : 179809653,
      "in_reply_to_id" : 179596968,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 223,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110127174,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179809653",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179809880"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179809880"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-06T16:28:36Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> label_set;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179809880",
      "id" : 179809880,
      "in_reply_to_id" : 179597144,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 229,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110127429,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179809880",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179810654"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179810654"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, you're right. I've removed `label_list`",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-06T16:31:50Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> label_set;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){\n+            label_set.insert(entry.second.name);\n+        }\n+    }\n+\n+    // Move label names to a list and sort before returning\n+    std::list<std::string> label_list(label_set.begin(), label_set.end());\n+    label_list.sort();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179810654",
      "id" : 179810654,
      "in_reply_to_id" : 179598325,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 236,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110128383,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179810654",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179810711"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179810711"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-06T16:32:06Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> label_set;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){\n+            label_set.insert(entry.second.name);\n+        }\n+    }\n+\n+    // Move label names to a list and sort before returning\n+    std::list<std::string> label_list(label_set.begin(), label_set.end());\n+    label_list.sort();\n+    UniValue ret(UniValue::VARR);\n+    for (const std::string &name : label_list) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179810711",
      "id" : 179810711,
      "in_reply_to_id" : 179598904,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 238,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110128468,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179810711",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179812404"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179812404"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Moved into `CWallet`",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-06T16:39:06Z",
      "diff_hunk" : "@@ -187,6 +187,11 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n     return EncodeDestination(dest);\n }\n \n+void DeleteLabel(CWallet& wallet, std::string label)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179812404",
      "id" : 179812404,
      "in_reply_to_id" : 179605981,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 4,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110130447,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179812404",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179812653"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179812653"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-06T16:40:07Z",
      "diff_hunk" : "@@ -205,14 +210,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n             \"getlabeladdress \\\"label\\\"\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179812653",
      "id" : 179812653,
      "in_reply_to_id" : 179606230,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 19,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110130759,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179812653",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179814333"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179814333"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've updated the behaviour to match the help text: the rpc call will fail if no label is provided.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-06T16:46:08Z",
      "diff_hunk" : "@@ -308,22 +328,24 @@ UniValue setlabel(const JSONRPCRequest& request)\n     }\n \n     std::string label;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179814333",
      "id" : 179814333,
      "in_reply_to_id" : 179796359,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 67,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110132694,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179814333",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179815039"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179815039"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-06T16:49:12Z",
      "diff_hunk" : "@@ -224,6 +230,20 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n \n     // Parse the label first so we don't generate a key if there's an error\n     std::string label = LabelFromValue(request.params[0]);\n+    bool force = false;\n+    if (!request.params[1].isNull())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179815039",
      "id" : 179815039,
      "in_reply_to_id" : 179606516,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 37,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110133596,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179815039",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179815534"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179815534"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-06T16:51:37Z",
      "diff_hunk" : "@@ -205,14 +210,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() > 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179815534",
      "id" : 179815534,
      "in_reply_to_id" : 179606340,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 17,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110134251,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179815534",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179815634"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179815634"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'll leave this functionality here for now. Can be refactored later if required.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-06T16:52:02Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179815634",
      "id" : 179815634,
      "in_reply_to_id" : 179596357,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 174,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110134371,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179815634",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Addressed review comments from @promag and @PierreRochard . Are you able to re-review?",
      "created_at" : "2018-04-06T16:54:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379312744",
      "id" : 379312744,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-06T16:54:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379312744",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, re-reviewing now",
      "created_at" : "2018-04-06T18:33:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379339376",
      "id" : 379339376,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-06T18:33:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379339376",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "A behavior difference between the old `getaccountaddress` and the new aliased `getlabeladdress` is causing the `wallet_basic.py` to fail. I was able to fix it by adding `force` to the test, but I think it's the endpoint that should be changed if the goal is to not break the API with the aliasing.\r\n\r\n`rpc_listtransactions.py` and `wallet_listreceivedby.py` are also failing, it may be due to the same root cause but I won't be able to confirm until tomorrow.",
      "created_at" : "2018-04-06T21:47:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379392774",
      "id" : 379392774,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-06T21:47:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379392774",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179895721"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179895721"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit, `const std::string& label`.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-06T23:16:50Z",
      "diff_hunk" : "@@ -3643,6 +3643,12 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n     return result;\n }\n \n+void CWallet::DeleteLabel(std::string label)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179895721",
      "id" : 179895721,
      "original_commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "original_position" : 4,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110232588,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179895721",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixing `wallet_basic.py` and `rpc_listtransactions.py`: If we want to continue supporting the behavior of the aliased `getaccountaddress`, `force` should default to `true` when that call is made, so something like `bool force = request.strMethod == \"getaccountaddress\" ? true : false;`\r\n\r\nFixing `wallet_listreceivedby.py`: line 143 should read `self.nodes[1].getlabeladdress(label=\"mynewlabel\", force=True)`\r\n\r\n",
      "created_at" : "2018-04-07T09:21:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379456090",
      "id" : 379456090,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-07T09:21:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379456090",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the fixes @PierreRochard! I've updated the tests as you suggested and force pushed.",
      "created_at" : "2018-04-07T16:43:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379482863",
      "id" : 379482863,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-07T16:43:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379482863",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Tested ACK 1f7f1dfd1c16cf0c9a700e2b262ffa8f6c6559cd",
      "created_at" : "2018-04-07T19:06:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379491909",
      "id" : 379491909,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-07T19:06:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379491909",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "I'm still not convinced we really need `getlabeladdress` in the first place, but anyhow.\r\nutACK https://github.com/bitcoin/bitcoin/pull/12892/commits/1f7f1dfd1c16cf0c9a700e2b262ffa8f6c6559cd",
      "created_at" : "2018-04-09T02:40:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379611854",
      "id" : 379611854,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-09T02:40:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379611854",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Needs rebase",
      "created_at" : "2018-04-09T18:24:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379847574",
      "id" : 379847574,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-09T18:24:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379847574",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased.\r\n\r\n> I'm still not convinced we really need getlabeladdress\r\n\r\nok, that's three concept NACKs for `getlabeladdress` (me, @jonasschnelli https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179550228 and @laanwj https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379611854).\r\n\r\nI kept this call because there was a comment in the previous PR (https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199444036) that this functionality was important for some miners and I wanted to avoid controversy to get this PR merged. However, if there's overwhelming opposition to `getlabeladdress`, it makes sense to remove it. `getlabeladdress` doesn't make much sense to me, and blurs the distinction that \"labels are associated with addresses, instead of addresses associated with labels\".\r\n\r\nOther reviewers of this and the previous PR (@promag, @PierreRochard, @Sjors, @MarcoFalke , @ryanofsky , @instagibbs , @sipa , @luke-jr) - please can you provide concept input into whether we should just remove `getlabeladdress`?",
      "created_at" : "2018-04-09T19:22:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379864444",
      "id" : 379864444,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-09T19:22:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379864444",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jnewbery I agree that `getlabeladdress` should be removed, it has too much overlap with `getnewaddress` and miner-specific use cases are likely best implemented in the mining software (this suggestion seems reasonable: https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-206938418)",
      "created_at" : "2018-04-09T19:58:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379874953",
      "id" : 379874953,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-09T19:58:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379874953",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Other reviewers of this and the previous PR (@promag, @PierreRochard, @Sjors, @MarcoFalke , @ryanofsky , @instagibbs , @sipa , @luke-jr) - please can you provide concept input into whether we should just remove getlabeladdress?\r\n\r\nI think it would be better to keep this PR as focused as possible. The goal should just be to fill in the last missing bits of the label implementation, so it is easy to switch from accounts to labels and we can get rid of broken \"account balance\" code and code that tries to track what account a transaction is sent from. I don't think it makes sense to introduce additional differences between accounts and labels that will make migration more difficult than necessary.\r\n\r\nThe main problem I see with `getlabeladdress` is just the documentation which is completely self-referential:\r\n\r\n> Returns the current 'label address' for this label.\r\n\r\nInstead of explanatory like:\r\n\r\n> Returns the default receiving address for this label. This will reset to a fresh address once there's a transaction that spends to it.\r\n\r\nMaybe there are other problems with `getlabeladdress`, but I can't see where they have been mentioned.\r\n\r\nAlso, I think this PR needs release notes. Good documentation is probably the most important part of this change.",
      "created_at" : "2018-04-09T20:02:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379876303",
      "id" : 379876303,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-09T20:03:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379876303",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I don't think it makes sense to introduce additional differences between accounts and labels that will make migration more difficult than necessary.\r\n\r\nok, I can see the merit in that. Let's keep this PR focused and we can squabble over removing `getlabeladdress` later.\r\n\r\nI've updated the help text for `getlabeladdress` and added release notes.\r\n\r\nRe-review would be very much appreciated at this point :smiley: ",
      "created_at" : "2018-04-09T21:25:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379898889",
      "id" : 379898889,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-09T21:25:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379898889",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180254273"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180254273"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`pushKV`.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-09T22:54:28Z",
      "diff_hunk" : "@@ -3720,6 +3734,17 @@ UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)\n     return ret;\n }\n \n+/** Convert CAddressBookData to JSON record.  */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, const bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.push_back(Pair(\"name\", data.name));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180254273",
      "id" : 180254273,
      "original_commit_id" : "86d3394de8e053c863b1e55b1c8c935d36884802",
      "original_position" : 108,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110232588,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180254273",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180254287"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180254287"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`pushKV`.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-09T22:54:32Z",
      "diff_hunk" : "@@ -3720,6 +3734,17 @@ UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)\n     return ret;\n }\n \n+/** Convert CAddressBookData to JSON record.  */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, const bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.push_back(Pair(\"name\", data.name));\n+    }\n+    ret.push_back(Pair(\"purpose\", data.purpose));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180254287",
      "id" : 180254287,
      "original_commit_id" : "86d3394de8e053c863b1e55b1c8c935d36884802",
      "original_position" : 110,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110232588,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180254287",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "My intent was not for the `getlabeladdress` discussion to block this PR. We need to make a decision about it before the 0.17 release, not necessarily now.\r\n\r\n> getlabeladdress doesn't make much sense to me, and blurs the distinction that \"labels are associated with addresses, instead of addresses associated with labels\".\r\n\r\nAnother problem with it is that it requires keeping this whole `CAccount` administration in place. Part of the reason for this account to label refactor is simplify the wallet mess and to get rid of that.\r\n\r\nWill re-review.\r\n\r\nre-utACK 86d3394de8e053c863b1e55b1c8c935d36884802",
      "created_at" : "2018-04-10T08:46:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-380023219",
      "id" : 380023219,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-10T13:07:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380023219",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180435727"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180435727"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`pushKV`.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T14:12:02Z",
      "diff_hunk" : "@@ -3811,6 +3843,111 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            ret.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180435727",
      "id" : 180435727,
      "original_commit_id" : "86d3394de8e053c863b1e55b1c8c935d36884802",
      "original_position" : 181,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110232588,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180435727",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180436783"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180436783"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit,\r\n```\r\nassociated with labels (unlike with accounts).\r\n```",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T14:14:59Z",
      "diff_hunk" : "@@ -0,0 +1,28 @@\n+'label' API for wallet\n+----------------------\n+\n+A new 'label' API has been introduced for the wallet. This is intended as a\n+replacement for the deprecated 'account' API.\n+\n+The label RPC methods mirror the account functionality, with the following differences:\n+\n+- Labels do not have a balance:\n+    - The `listlabels` RPC method does not show a balance\n+    - The `listlabels` RPC method does not have a `minconf` or `watchonly` argument\n+- Wallet `getnewaddress` and `addmultisigaddress` RPC `account` named\n+  parameters have been renamed to `label` with no change in behavior.\n+- Wallet account RPC methods have been renamed with no change in behavior:\n+    - `getaccountaddress` -> `getlabeladdress`\n+    - `getreceivedbyaccount` -> `getreceivedbylabel`\n+    - `listreceivedbyaccount` -> `listreceivedbylabel`\n+    - `setaccount` -> `setlabel`\n+- Wallet `listreceivedbylabel`, `listreceivedbyaccount` and `listunspent` RPCs\n+  add `label` fields to returned JSON objects that previously only had\n+  `account` fields.\n+- Like in the GUI, labels can be set on any address, not just receiving addreses.\n+- Labels can be deleted by reassigning all addresses using the `setlabel` RPC method.\n+- The returned object from `getaddressesbylabel` is a json object with the addresses\n+  as keys instead of an array of strings.\n+\n+Conceptually, labels are associated with addresses, instead of addresses\n+associated with labels. (unlike with accounts.)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180436783",
      "id" : 180436783,
      "original_commit_id" : "86d3394de8e053c863b1e55b1c8c935d36884802",
      "original_position" : 28,
      "path" : "doc/release-notes-pr12892.md",
      "position" : null,
      "pull_request_review_id" : 110855143,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180436783",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180437903"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180437903"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agree that's better. Fixed.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T14:17:53Z",
      "diff_hunk" : "@@ -3643,6 +3643,12 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n     return result;\n }\n \n+void CWallet::DeleteLabel(std::string label)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180437903",
      "id" : 180437903,
      "in_reply_to_id" : 179895721,
      "original_commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "original_position" : 4,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110856503,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180437903",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180437928"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180437928"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T14:17:58Z",
      "diff_hunk" : "@@ -3720,6 +3734,17 @@ UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)\n     return ret;\n }\n \n+/** Convert CAddressBookData to JSON record.  */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, const bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.push_back(Pair(\"name\", data.name));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180437928",
      "id" : 180437928,
      "in_reply_to_id" : 180254273,
      "original_commit_id" : "86d3394de8e053c863b1e55b1c8c935d36884802",
      "original_position" : 108,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110856545,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180437928",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180437964"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180437964"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T14:18:02Z",
      "diff_hunk" : "@@ -3720,6 +3734,17 @@ UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)\n     return ret;\n }\n \n+/** Convert CAddressBookData to JSON record.  */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, const bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.push_back(Pair(\"name\", data.name));\n+    }\n+    ret.push_back(Pair(\"purpose\", data.purpose));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180437964",
      "id" : 180437964,
      "in_reply_to_id" : 180254287,
      "original_commit_id" : "86d3394de8e053c863b1e55b1c8c935d36884802",
      "original_position" : 110,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110856585,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180437964",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180438007"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180438007"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T14:18:07Z",
      "diff_hunk" : "@@ -3811,6 +3843,111 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            ret.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180438007",
      "id" : 180438007,
      "in_reply_to_id" : 180435727,
      "original_commit_id" : "86d3394de8e053c863b1e55b1c8c935d36884802",
      "original_position" : 181,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110856638,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180438007",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @promag - I've addressed your comments.\r\n\r\n86d3394 -> 74a9e81 . Only change is addressing promag comments:\r\n\r\n```\r\ndiff --git a/src/wallet/rpcwallet.cpp b/src/wallet/rpcwallet.cpp\r\nindex aeea7af..50495d0 100644\r\n--- a/src/wallet/rpcwallet.cpp\r\n+++ b/src/wallet/rpcwallet.cpp\r\n@@ -3739,9 +3739,9 @@ static UniValue AddressBookDataToJSON(const CAddressBookData& data, const bool v\r\n {\r\n     UniValue ret(UniValue::VOBJ);\r\n     if (verbose) {\r\n-        ret.push_back(Pair(\"name\", data.name));\r\n+        ret.pushKV(\"name\", data.name);\r\n     }\r\n-    ret.push_back(Pair(\"purpose\", data.purpose));\r\n+    ret.pushKV(\"purpose\", data.purpose);\r\n     return ret;\r\n }\r\n \r\n@@ -3889,7 +3889,7 @@ UniValue getaddressesbylabel(const JSONRPCRequest& request)\r\n     UniValue ret(UniValue::VOBJ);\r\n     for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\r\n         if (item.second.name == label) {\r\n-            ret.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\r\n+            ret.pushKV(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false));\r\n         }\r\n     }\r\n \r\ndiff --git a/src/wallet/wallet.cpp b/src/wallet/wallet.cpp\r\nindex 7e0ce54..673d91c 100644\r\n--- a/src/wallet/wallet.cpp\r\n+++ b/src/wallet/wallet.cpp\r\n@@ -3640,7 +3640,7 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\r\n     return result;\r\n }\r\n \r\n-void CWallet::DeleteLabel(std::string label)\r\n+void CWallet::DeleteLabel(const std::string& label)\r\n {\r\n     WalletBatch batch(*database);\r\n     batch.EraseAccount(label);\r\ndiff --git a/src/wallet/wallet.h b/src/wallet/wallet.h\r\nindex 4d59059..99b09ec 100644\r\n--- a/src/wallet/wallet.h\r\n+++ b/src/wallet/wallet.h\r\n@@ -989,7 +989,7 @@ public:\r\n     std::map<CTxDestination, CAmount> GetAddressBalances();\r\n \r\n     std::set<CTxDestination> GetLabelAddresses(const std::string& label) const;\r\n-    void DeleteLabel(std::string label);\r\n+    void DeleteLabel(const std::string& label);\r\n \r\n     isminetype IsMine(const CTxIn& txin) const;\r\n     /**\r\n```",
      "created_at" : "2018-04-10T14:20:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-380116979",
      "id" : 380116979,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-10T14:20:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380116979",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180440700"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180440700"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit, could have better alignment:\r\n```\r\nResult:\r\n[                      (json array of string)\r\n  \"label\",  (string) Label name\r\n  ...\r\n] \r\n```",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T14:25:07Z",
      "diff_hunk" : "@@ -3811,6 +3843,111 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            ret.pushKV(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false));\n+        }\n+    }\n+\n+    if (ret.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180440700",
      "id" : 180440700,
      "original_commit_id" : "74a9e812da4d7f308425306e7c986dc5e0786225",
      "original_position" : 207,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110855143,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180440700",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180441702"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180441702"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Build `ret` here:\r\n```cpp\r\nif (label_set.insert(entry.second.name).second) {\r\n    ret.push_back(name);\r\n}",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T14:27:46Z",
      "diff_hunk" : "@@ -3811,6 +3843,111 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            ret.pushKV(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false));\n+        }\n+    }\n+\n+    if (ret.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (!request.params[0].isNull()) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> label_set;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose) {\n+            label_set.insert(entry.second.name);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180441702",
      "id" : 180441702,
      "original_commit_id" : "74a9e812da4d7f308425306e7c986dc5e0786225",
      "original_position" : 231,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110855143,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180441702",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180445243"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180445243"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would suggest changing this to \"(string) The current receiving address for the label.\" I think 'label address' is pretty opaque and introducing it as a formal term is less helpful than just saying \"current receiving address\" or \"default receiving address\" when there's a need to refer to it. Receiving address / receive_address is also how it's referred to in `wallet_labels.py`.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T14:37:23Z",
      "diff_hunk" : "@@ -207,14 +206,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getlabeladdress \\\"label\\\"\\n\"\n-            \"\\nReturns the current Bitcoin address for receiving payments to this label.\\n\"\n+            \"getlabeladdress \\\"label\\\" ( force ) \\n\"\n+            \"\\nReturns the default receiving address for this label. This will reset to a fresh address once there's a transaction that spends to it.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"label\\\"         (string, required) The label name for the address. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created and a new address created  if there is no label by the given name.\\n\"\n+            \"1. \\\"label\\\"         (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"2. \\\"force\\\"         (bool, optional) Whether the label should be created if it does not yet exist. If False, the RPC will return an error if called with a label that doesn't exist. Defaults to False.\\n\"\n             \"\\nResult:\\n\"\n-            \"\\\"address\\\"          (string) The label bitcoin address\\n\"\n+            \"\\\"address\\\"          (string) The 'label address' for the label\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180445243",
      "id" : 180445243,
      "original_commit_id" : "cd62be8583080858bc153f8a3f3c4c224d029696",
      "original_position" : 25,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109834948,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180445243",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180446675"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180446675"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`Defaults to` depends on the method.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T14:41:32Z",
      "diff_hunk" : "@@ -207,14 +206,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getlabeladdress \\\"label\\\"\\n\"\n-            \"\\nReturns the current Bitcoin address for receiving payments to this label.\\n\"\n+            \"getlabeladdress \\\"label\\\" ( force ) \\n\"\n+            \"\\nReturns the default receiving address for this label. This will reset to a fresh address once there's a transaction that spends to it.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"label\\\"         (string, required) The label name for the address. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created and a new address created  if there is no label by the given name.\\n\"\n+            \"1. \\\"label\\\"         (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"2. \\\"force\\\"         (bool, optional) Whether the label should be created if it does not yet exist. If False, the RPC will return an error if called with a label that doesn't exist. Defaults to False.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180446675",
      "id" : 180446675,
      "original_commit_id" : "74a9e812da4d7f308425306e7c986dc5e0786225",
      "original_position" : 22,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110855143,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180446675",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180455083"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180455083"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Defaults to depends on the method.\r\n\r\nI guess simplest way to fix this would be to say \"Defaults to false, unless the getaccountaddress method alias is being called, in which case the default is true for backwards compatibility.\"\r\n\r\nIf you wanted to be more clever I guess you could adapt the help text.\r\n\r\nAll of this is making me less a fan of the original suggestion to have a force argument, though:\r\nhttps://github.com/bitcoin/bitcoin/pull/7729/files/fef41789e8d7293ccfd859bc90fa0a3b2484752d#r177781021\r\n\r\nI definitely wouldn't object if you wanted to drop it.\r\n",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T15:01:43Z",
      "diff_hunk" : "@@ -207,14 +206,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getlabeladdress \\\"label\\\"\\n\"\n-            \"\\nReturns the current Bitcoin address for receiving payments to this label.\\n\"\n+            \"getlabeladdress \\\"label\\\" ( force ) \\n\"\n+            \"\\nReturns the default receiving address for this label. This will reset to a fresh address once there's a transaction that spends to it.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"label\\\"         (string, required) The label name for the address. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created and a new address created  if there is no label by the given name.\\n\"\n+            \"1. \\\"label\\\"         (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"2. \\\"force\\\"         (bool, optional) Whether the label should be created if it does not yet exist. If False, the RPC will return an error if called with a label that doesn't exist. Defaults to False.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180455083",
      "id" : 180455083,
      "in_reply_to_id" : 180446675,
      "original_commit_id" : "74a9e812da4d7f308425306e7c986dc5e0786225",
      "original_position" : 22,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109834948,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180455083",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180456426"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180456426"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Placing into a set sorts the labels by name (`mapAddressBook` will be sorted by key, which is the `CTxDestination`)",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T15:05:12Z",
      "diff_hunk" : "@@ -3811,6 +3843,111 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            ret.pushKV(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false));\n+        }\n+    }\n+\n+    if (ret.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (!request.params[0].isNull()) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> label_set;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose) {\n+            label_set.insert(entry.second.name);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180456426",
      "id" : 180456426,
      "in_reply_to_id" : 180441702,
      "original_commit_id" : "74a9e812da4d7f308425306e7c986dc5e0786225",
      "original_position" : 231,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110878888,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180456426",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180456878"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180456878"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T15:06:27Z",
      "diff_hunk" : "@@ -3811,6 +3843,111 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            ret.pushKV(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false));\n+        }\n+    }\n+\n+    if (ret.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180456878",
      "id" : 180456878,
      "in_reply_to_id" : 180440700,
      "original_commit_id" : "74a9e812da4d7f308425306e7c986dc5e0786225",
      "original_position" : 207,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110879435,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180456878",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180459797"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180459797"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe say receiving address instead of 'label address' here too.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T15:14:15Z",
      "diff_hunk" : "@@ -309,23 +324,22 @@ UniValue setlabel(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     }\n \n-    std::string label;\n-    if (!request.params[1].isNull())\n-        label = LabelFromValue(request.params[1]);\n+    std::string label = LabelFromValue(request.params[1]);\n \n-    // Only add the label if the address is yours.\n     if (IsMine(*pwallet, dest)) {\n-        // Detect when changing the label of an address that is the 'unused current key' of another label:\n+        // Detect when changing the label of an address that is the 'label address' of another label:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180459797",
      "id" : 180459797,
      "original_commit_id" : "74a9e812da4d7f308425306e7c986dc5e0786225",
      "original_position" : 79,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109834948,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180459797",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180460682"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180460682"
         }
      },
      "author_association" : "MEMBER",
      "body" : "thanks! fixed",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T15:16:29Z",
      "diff_hunk" : "@@ -207,14 +206,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getlabeladdress \\\"label\\\"\\n\"\n-            \"\\nReturns the current Bitcoin address for receiving payments to this label.\\n\"\n+            \"getlabeladdress \\\"label\\\" ( force ) \\n\"\n+            \"\\nReturns the default receiving address for this label. This will reset to a fresh address once there's a transaction that spends to it.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"label\\\"         (string, required) The label name for the address. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created and a new address created  if there is no label by the given name.\\n\"\n+            \"1. \\\"label\\\"         (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"2. \\\"force\\\"         (bool, optional) Whether the label should be created if it does not yet exist. If False, the RPC will return an error if called with a label that doesn't exist. Defaults to False.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180460682",
      "id" : 180460682,
      "in_reply_to_id" : 180446675,
      "original_commit_id" : "74a9e812da4d7f308425306e7c986dc5e0786225",
      "original_position" : 22,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110883987,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180460682",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180463279"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180463279"
         }
      },
      "author_association" : "MEMBER",
      "body" : "yes, agree that's better.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T15:23:32Z",
      "diff_hunk" : "@@ -207,14 +206,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getlabeladdress \\\"label\\\"\\n\"\n-            \"\\nReturns the current Bitcoin address for receiving payments to this label.\\n\"\n+            \"getlabeladdress \\\"label\\\" ( force ) \\n\"\n+            \"\\nReturns the default receiving address for this label. This will reset to a fresh address once there's a transaction that spends to it.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"label\\\"         (string, required) The label name for the address. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created and a new address created  if there is no label by the given name.\\n\"\n+            \"1. \\\"label\\\"         (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"2. \\\"force\\\"         (bool, optional) Whether the label should be created if it does not yet exist. If False, the RPC will return an error if called with a label that doesn't exist. Defaults to False.\\n\"\n             \"\\nResult:\\n\"\n-            \"\\\"address\\\"          (string) The label bitcoin address\\n\"\n+            \"\\\"address\\\"          (string) The 'label address' for the label\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180463279",
      "id" : 180463279,
      "in_reply_to_id" : 180445243,
      "original_commit_id" : "cd62be8583080858bc153f8a3f3c4c224d029696",
      "original_position" : 25,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110887236,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180463279",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180463500"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180463500"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T15:24:08Z",
      "diff_hunk" : "@@ -309,23 +324,22 @@ UniValue setlabel(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     }\n \n-    std::string label;\n-    if (!request.params[1].isNull())\n-        label = LabelFromValue(request.params[1]);\n+    std::string label = LabelFromValue(request.params[1]);\n \n-    // Only add the label if the address is yours.\n     if (IsMine(*pwallet, dest)) {\n-        // Detect when changing the label of an address that is the 'unused current key' of another label:\n+        // Detect when changing the label of an address that is the 'label address' of another label:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180463500",
      "id" : 180463500,
      "in_reply_to_id" : 180459797,
      "original_commit_id" : "74a9e812da4d7f308425306e7c986dc5e0786225",
      "original_position" : 79,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110887495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180463500",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180464405"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180464405"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I guess simplest way to fix this would be to say...\r\n\r\nYes, that's clear. Updated.\r\n\r\n> All of this is making me less a fan of the original suggestion to have a force argument, though.\r\n\r\nPlease - can we not hold this PR up on the details of the `getlabeladdress` RPC? I would much rather we merged something that made progress towards removing the accounts system, and then worked out what to do about `getlabeladdress` later.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T15:26:21Z",
      "diff_hunk" : "@@ -207,14 +206,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getlabeladdress \\\"label\\\"\\n\"\n-            \"\\nReturns the current Bitcoin address for receiving payments to this label.\\n\"\n+            \"getlabeladdress \\\"label\\\" ( force ) \\n\"\n+            \"\\nReturns the default receiving address for this label. This will reset to a fresh address once there's a transaction that spends to it.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"label\\\"         (string, required) The label name for the address. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created and a new address created  if there is no label by the given name.\\n\"\n+            \"1. \\\"label\\\"         (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"2. \\\"force\\\"         (bool, optional) Whether the label should be created if it does not yet exist. If False, the RPC will return an error if called with a label that doesn't exist. Defaults to False.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180464405",
      "id" : 180464405,
      "in_reply_to_id" : 180446675,
      "original_commit_id" : "74a9e812da4d7f308425306e7c986dc5e0786225",
      "original_position" : 22,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110888542,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180464405",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @promag and @ryanofsky - I've answered/addressed your comments.\r\n\r\n> In some calls, if the response is empty, RPC_WALLET_INVALID_LABEL_NAME is raised instead of just returning []. However calling listlabels with an unknown purpose will return [].\r\n\r\nI don't think that's inconsistent - calling eg `getaddressesbylabel` with a non-existent label throws an error. Calling `listlabels` with a purpose that no addresses are using returns the list of all addresses that have that purpose (ie `[]`).\r\n\r\n> I also don't see the value of getlabeladdress\r\n\r\nYou and me both pal, but let's defer that discussion for a future PR.",
      "created_at" : "2018-04-10T15:32:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-380144513",
      "id" : 380144513,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-10T15:32:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380144513",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180469859"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180469859"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a comment to explain that this is to sort the labels.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T15:41:23Z",
      "diff_hunk" : "@@ -3811,6 +3843,111 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            ret.pushKV(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false));\n+        }\n+    }\n+\n+    if (ret.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (!request.params[0].isNull()) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> label_set;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose) {\n+            label_set.insert(entry.second.name);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180469859",
      "id" : 180469859,
      "in_reply_to_id" : 180441702,
      "original_commit_id" : "74a9e812da4d7f308425306e7c986dc5e0786225",
      "original_position" : 231,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110895137,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180469859",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180486019"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180486019"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is great! There are a lot of changes I would suggest but I thought it would be easier to just make them in a wiki page:\r\n\r\nhttps://github.com/bitcoin-core/bitcoin-devwiki/wiki/12892-Label-API-release-notes\r\n\r\nThe main change is trying to organize the RPC information in a table.\r\n\r\nFeel free to delete the wiki page and move anything here.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T16:29:53Z",
      "diff_hunk" : "@@ -0,0 +1,28 @@\n+'label' API for wallet\n+----------------------\n+\n+A new 'label' API has been introduced for the wallet. This is intended as a",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180486019",
      "id" : 180486019,
      "original_commit_id" : "883605dc4c0d28f32b724a2cf46fee87711ab6e9",
      "original_position" : 4,
      "path" : "doc/release-notes-pr12892.md",
      "position" : 4,
      "pull_request_review_id" : 110914378,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180486019",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the release notes suggestions Russ. I've taken them almost exactly verbatim from your wiki, with the following change:\r\n\r\n> delete the previous label associated with an address, instead of making an implicit getaccountaddress call to ensure the previous label still has a receiving address\r\n\r\nto\r\n\r\n> delete the previous label associated with an address when the final address using that label is reassigned to a different label, instead of making an implicit getaccountaddress call to ensure the previous label still has a receiving address",
      "created_at" : "2018-04-10T16:57:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-380173557",
      "id" : 380173557,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-10T16:57:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380173557",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> feel free to ignore these unless perhaps you're updating the PR anyway.\r\n\r\nThanks, let's leave these for now. Minor punctuation/wording can be fixed when release notes are merged at the end of the release cycle.",
      "created_at" : "2018-04-10T17:35:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-380185101",
      "id" : 380185101,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-10T17:35:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380185101",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> feel free to ignore these unless perhaps you're updating the PR anyway.\r\n\r\nBleurgh. lint-whitespace didn't like my release notes. Fixed them and pulled in Russ's changes.",
      "created_at" : "2018-04-10T17:39:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-380186499",
      "id" : 380186499,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-10T17:39:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380186499",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK https://github.com/bitcoin/bitcoin/pull/12892/commits/b00faff9ed653ea28d02ff6d821183389fcd8b29\r\n\r\nLooks good. The release notes are very helpful.",
      "created_at" : "2018-04-10T20:56:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-380243880",
      "id" : 380243880,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-10T20:56:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380243880",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180592059"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180592059"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`Add to a set ...`?\r\n\r\nAnyway, I mean there is no point in sorting the response, could very well be an unsorted list. We just want to make sure there are no repeated labels.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T23:00:00Z",
      "diff_hunk" : "@@ -3811,6 +3844,112 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            ret.pushKV(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false));\n+        }\n+    }\n+\n+    if (ret.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"    (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[               (json array of string)\\n\"\n+            \"  \\\"label\\\",      (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (!request.params[0].isNull()) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    // Add to a list to sort by label name, then insert into Univalue array",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180592059",
      "id" : 180592059,
      "original_commit_id" : "b00faff9ed653ea28d02ff6d821183389fcd8b29",
      "original_position" : 229,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 111039953,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:27:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180592059",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180596696"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180596696"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks. Fixed to `Add to a set`",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-10T23:28:08Z",
      "diff_hunk" : "@@ -3811,6 +3844,112 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            ret.pushKV(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false));\n+        }\n+    }\n+\n+    if (ret.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"    (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[               (json array of string)\\n\"\n+            \"  \\\"label\\\",      (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (!request.params[0].isNull()) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    // Add to a list to sort by label name, then insert into Univalue array",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180596696",
      "id" : 180596696,
      "in_reply_to_id" : 180592059,
      "original_commit_id" : "b00faff9ed653ea28d02ff6d821183389fcd8b29",
      "original_position" : 229,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 111045293,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-10T23:28:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180596696",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Fixed comment. b00faff -> 41ba061",
      "created_at" : "2018-04-10T23:28:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-380279074",
      "id" : 380279074,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-10T23:28:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380279074",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "utACK 41ba061.",
      "created_at" : "2018-04-11T08:18:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-380368293",
      "id" : 380368293,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-11T08:18:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380368293",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180680210"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180680210"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: ` ? true : false` is redundant.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-11T08:54:37Z",
      "diff_hunk" : "@@ -226,6 +227,21 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n \n     // Parse the label first so we don't generate a key if there's an error\n     std::string label = LabelFromValue(request.params[0]);\n+    bool force = request.strMethod == \"getaccountaddress\" ? true : false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180680210",
      "id" : 180680210,
      "original_commit_id" : "189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3",
      "original_position" : 34,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 34,
      "pull_request_review_id" : 111139918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-11T09:06:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180680210",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180746056"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180746056"
         }
      },
      "author_association" : "MEMBER",
      "body" : "duh. Will tidy up in follow-up PR.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-11T13:06:11Z",
      "diff_hunk" : "@@ -226,6 +227,21 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n \n     // Parse the label first so we don't generate a key if there's an error\n     std::string label = LabelFromValue(request.params[0]);\n+    bool force = request.strMethod == \"getaccountaddress\" ? true : false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180746056",
      "id" : 180746056,
      "in_reply_to_id" : 180680210,
      "original_commit_id" : "189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3",
      "original_position" : 34,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 34,
      "pull_request_review_id" : 111219365,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-11T13:06:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180746056",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180749367"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180749367"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Let it go, will go away when accounts are removed.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-11T13:17:01Z",
      "diff_hunk" : "@@ -226,6 +227,21 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n \n     // Parse the label first so we don't generate a key if there's an error\n     std::string label = LabelFromValue(request.params[0]);\n+    bool force = request.strMethod == \"getaccountaddress\" ? true : false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180749367",
      "id" : 180749367,
      "in_reply_to_id" : 180680210,
      "original_commit_id" : "189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3",
      "original_position" : 34,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 34,
      "pull_request_review_id" : 111223408,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-11T13:17:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180749367",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180756236"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180756236"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, not worth a PR for just that.",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-11T13:37:49Z",
      "diff_hunk" : "@@ -226,6 +227,21 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n \n     // Parse the label first so we don't generate a key if there's an error\n     std::string label = LabelFromValue(request.params[0]);\n+    bool force = request.strMethod == \"getaccountaddress\" ? true : false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180756236",
      "id" : 180756236,
      "in_reply_to_id" : 180680210,
      "original_commit_id" : "189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3",
      "original_position" : 34,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 34,
      "pull_request_review_id" : 111231793,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-11T13:37:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180756236",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180866587"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180866587"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed in #12953",
      "commit_id" : "41ba0618048b7b2d7e257bb52cf8f138d29dabd3",
      "created_at" : "2018-04-11T19:10:07Z",
      "diff_hunk" : "@@ -226,6 +227,21 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n \n     // Parse the label first so we don't generate a key if there's an error\n     std::string label = LabelFromValue(request.params[0]);\n+    bool force = request.strMethod == \"getaccountaddress\" ? true : false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r180866587",
      "id" : 180866587,
      "in_reply_to_id" : 180680210,
      "original_commit_id" : "189e0ef33ec66f03abf85cfd4d0ede1a0c5c02d3",
      "original_position" : 34,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 34,
      "pull_request_review_id" : 111364970,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-11T19:10:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/180866587",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   }
]
