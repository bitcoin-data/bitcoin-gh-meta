[
   {
      "author_association" : "MEMBER",
      "body" : "concept ACK, we want to test censorship type scenarios for Liquid, but don't have a good way of doing that in our own test harness aside from manually constructing blocks ourselves. Previously we relied on premature witness data being non-standard to \"censor\" the transactions themselves but that is no longer a non-standard case due to buried deployment.\r\n\r\nThoughts:\r\n1) Probably a bunch of code can be de-duplicated with some refactoring\r\n2) This should probably only be available for test networks, and hidden?",
      "created_at" : "2019-12-02T19:52:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17653#issuecomment-560553766",
      "id" : 560553766,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17653",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MDU1Mzc2Ng==",
      "updated_at" : "2019-12-02T19:52:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/560553766",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16365](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16365.html) (Log RPC parameters (arguments) if -debug=rpcparams by LarryRuane)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-12-02T21:02:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17653#issuecomment-560579299",
      "id" : 560579299,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17653",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MDU3OTI5OQ==",
      "updated_at" : "2019-12-02T21:02:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/560579299",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : ">Probably a bunch of code can be de-duplicated with some refactoring\r\n\r\n@instagibbs Most of the duplicated code to create the block is in `BlockAssembler`, and it's very tightly coupled with getting all txs from the mempool. I'm not sure it would be worth messing around with that code for this.\r\n\r\n>This should probably only be available for test networks, and hidden?\r\n\r\nI don't believe this would have any effect if trying to generate on a chain with high difficulty, so not sure if there's any risk with letting it be used anywhere. The same could be said about `generatetoaddress`.",
      "created_at" : "2019-12-03T00:19:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17653#issuecomment-560940438",
      "id" : 560940438,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17653",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MDk0MDQzOA==",
      "updated_at" : "2019-12-03T15:13:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/560940438",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/237213?v=4",
         "events_url" : "https://api.github.com/users/andrewtoth/events{/privacy}",
         "followers_url" : "https://api.github.com/users/andrewtoth/followers",
         "following_url" : "https://api.github.com/users/andrewtoth/following{/other_user}",
         "gists_url" : "https://api.github.com/users/andrewtoth/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/andrewtoth",
         "id" : 237213,
         "login" : "andrewtoth",
         "node_id" : "MDQ6VXNlcjIzNzIxMw==",
         "organizations_url" : "https://api.github.com/users/andrewtoth/orgs",
         "received_events_url" : "https://api.github.com/users/andrewtoth/received_events",
         "repos_url" : "https://api.github.com/users/andrewtoth/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/andrewtoth/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/andrewtoth"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353248441"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17653"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353248441"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`assert_equal` makes the error more clear when it doesn't match",
      "commit_id" : "de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "created_at" : "2019-12-03T15:31:31Z",
      "diff_hunk" : "@@ -0,0 +1,53 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test generatecustomblock rpc.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR\n+\n+class GenerateCustomBlockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        # Generate an empty block to address\n+        address = node.getnewaddress()\n+        node.generatecustomblock(address, [])\n+\n+        # Generate an empty block to a descriptor\n+        node.generatecustomblock(ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR, [])\n+\n+        # Generate 110 blocks to spend\n+        node.generatetoaddress(110, address)\n+\n+        # Generate some extra mempool transactions to verify they don't get mined\n+        for i in range(10):\n+            node.sendtoaddress(address, 0.001)\n+\n+        # Generate custom block with raw tx\n+        utxos = node.listunspent(addresses=[address])\n+        raw = node.createrawtransaction([{\"txid\":utxos[0][\"txid\"], \"vout\":utxos[0][\"vout\"]}],[{address:1}])\n+        signed_raw = node.signrawtransactionwithwallet(raw)['hex']\n+        hash = node.generatecustomblock(address, [signed_raw])\n+        block = node.getblock(hash, 1)\n+        assert len(block['tx']) == 2",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353248441",
      "id" : 353248441,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzI0ODQ0MQ==",
      "original_commit_id" : "de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "original_position" : 41,
      "path" : "test/functional/rpc_generatecustomblock.py",
      "position" : 41,
      "pull_request_review_id" : 326229925,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17653",
      "updated_at" : "2019-12-03T15:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353248441",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353248497"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17653"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353248497"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`assert_equal` makes the error more clear when it doesn't match",
      "commit_id" : "de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "created_at" : "2019-12-03T15:31:36Z",
      "diff_hunk" : "@@ -0,0 +1,53 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test generatecustomblock rpc.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR\n+\n+class GenerateCustomBlockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        # Generate an empty block to address\n+        address = node.getnewaddress()\n+        node.generatecustomblock(address, [])\n+\n+        # Generate an empty block to a descriptor\n+        node.generatecustomblock(ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR, [])\n+\n+        # Generate 110 blocks to spend\n+        node.generatetoaddress(110, address)\n+\n+        # Generate some extra mempool transactions to verify they don't get mined\n+        for i in range(10):\n+            node.sendtoaddress(address, 0.001)\n+\n+        # Generate custom block with raw tx\n+        utxos = node.listunspent(addresses=[address])\n+        raw = node.createrawtransaction([{\"txid\":utxos[0][\"txid\"], \"vout\":utxos[0][\"vout\"]}],[{address:1}])\n+        signed_raw = node.signrawtransactionwithwallet(raw)['hex']\n+        hash = node.generatecustomblock(address, [signed_raw])\n+        block = node.getblock(hash, 1)\n+        assert len(block['tx']) == 2\n+        txid = block['tx'][1]\n+        assert node.gettransaction(txid)['hex'] == signed_raw",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353248497",
      "id" : 353248497,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzI0ODQ5Nw==",
      "original_commit_id" : "de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "original_position" : 43,
      "path" : "test/functional/rpc_generatecustomblock.py",
      "position" : 43,
      "pull_request_review_id" : 326229925,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17653",
      "updated_at" : "2019-12-03T15:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353248497",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353248588"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17653"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353248588"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`assert_equal` makes the error more clear when it doesn't match",
      "commit_id" : "de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "created_at" : "2019-12-03T15:31:45Z",
      "diff_hunk" : "@@ -0,0 +1,53 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test generatecustomblock rpc.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR\n+\n+class GenerateCustomBlockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        # Generate an empty block to address\n+        address = node.getnewaddress()\n+        node.generatecustomblock(address, [])\n+\n+        # Generate an empty block to a descriptor\n+        node.generatecustomblock(ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR, [])\n+\n+        # Generate 110 blocks to spend\n+        node.generatetoaddress(110, address)\n+\n+        # Generate some extra mempool transactions to verify they don't get mined\n+        for i in range(10):\n+            node.sendtoaddress(address, 0.001)\n+\n+        # Generate custom block with raw tx\n+        utxos = node.listunspent(addresses=[address])\n+        raw = node.createrawtransaction([{\"txid\":utxos[0][\"txid\"], \"vout\":utxos[0][\"vout\"]}],[{address:1}])\n+        signed_raw = node.signrawtransactionwithwallet(raw)['hex']\n+        hash = node.generatecustomblock(address, [signed_raw])\n+        block = node.getblock(hash, 1)\n+        assert len(block['tx']) == 2\n+        txid = block['tx'][1]\n+        assert node.gettransaction(txid)['hex'] == signed_raw\n+\n+        # Generate custom block with txid\n+        txid = node.sendtoaddress(address, 1)\n+        hash = node.generatecustomblock(address, [txid])\n+        block = node.getblock(hash, 1)\n+        assert len(block['tx']) == 2",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353248588",
      "id" : 353248588,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzI0ODU4OA==",
      "original_commit_id" : "de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "original_position" : 49,
      "path" : "test/functional/rpc_generatecustomblock.py",
      "position" : 49,
      "pull_request_review_id" : 326229925,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17653",
      "updated_at" : "2019-12-03T15:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353248588",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353248634"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17653"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353248634"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`assert_equal` makes the error more clear when it doesn't match",
      "commit_id" : "de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "created_at" : "2019-12-03T15:31:49Z",
      "diff_hunk" : "@@ -0,0 +1,53 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test generatecustomblock rpc.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR\n+\n+class GenerateCustomBlockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        # Generate an empty block to address\n+        address = node.getnewaddress()\n+        node.generatecustomblock(address, [])\n+\n+        # Generate an empty block to a descriptor\n+        node.generatecustomblock(ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR, [])\n+\n+        # Generate 110 blocks to spend\n+        node.generatetoaddress(110, address)\n+\n+        # Generate some extra mempool transactions to verify they don't get mined\n+        for i in range(10):\n+            node.sendtoaddress(address, 0.001)\n+\n+        # Generate custom block with raw tx\n+        utxos = node.listunspent(addresses=[address])\n+        raw = node.createrawtransaction([{\"txid\":utxos[0][\"txid\"], \"vout\":utxos[0][\"vout\"]}],[{address:1}])\n+        signed_raw = node.signrawtransactionwithwallet(raw)['hex']\n+        hash = node.generatecustomblock(address, [signed_raw])\n+        block = node.getblock(hash, 1)\n+        assert len(block['tx']) == 2\n+        txid = block['tx'][1]\n+        assert node.gettransaction(txid)['hex'] == signed_raw\n+\n+        # Generate custom block with txid\n+        txid = node.sendtoaddress(address, 1)\n+        hash = node.generatecustomblock(address, [txid])\n+        block = node.getblock(hash, 1)\n+        assert len(block['tx']) == 2\n+        assert block['tx'][1] == txid",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353248634",
      "id" : 353248634,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzI0ODYzNA==",
      "original_commit_id" : "de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "original_position" : 50,
      "path" : "test/functional/rpc_generatecustomblock.py",
      "position" : 50,
      "pull_request_review_id" : 326229925,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17653",
      "updated_at" : "2019-12-03T15:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353248634",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I did a bit of refactoring that makes this re-use the existing mining code: https://github.com/instagibbs/bitcoin/tree/generatecustomblock\r\n\r\nFewer added lines, and less redundancy imo.\r\n\r\nFeel free to take this approach instead.",
      "created_at" : "2019-12-03T15:43:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17653#issuecomment-561225955",
      "id" : 561225955,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17653",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MTIyNTk1NQ==",
      "updated_at" : "2019-12-03T15:43:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561225955",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353256893"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17653"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353256893"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think there should also be a test making sure that invalid-ordering-of-txn block doesn't cause something unexpected like a crash.",
      "commit_id" : "de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "created_at" : "2019-12-03T15:45:08Z",
      "diff_hunk" : "@@ -0,0 +1,53 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test generatecustomblock rpc.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR\n+\n+class GenerateCustomBlockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        # Generate an empty block to address\n+        address = node.getnewaddress()\n+        node.generatecustomblock(address, [])\n+\n+        # Generate an empty block to a descriptor\n+        node.generatecustomblock(ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR, [])\n+\n+        # Generate 110 blocks to spend\n+        node.generatetoaddress(110, address)\n+\n+        # Generate some extra mempool transactions to verify they don't get mined\n+        for i in range(10):\n+            node.sendtoaddress(address, 0.001)\n+\n+        # Generate custom block with raw tx\n+        utxos = node.listunspent(addresses=[address])\n+        raw = node.createrawtransaction([{\"txid\":utxos[0][\"txid\"], \"vout\":utxos[0][\"vout\"]}],[{address:1}])\n+        signed_raw = node.signrawtransactionwithwallet(raw)['hex']\n+        hash = node.generatecustomblock(address, [signed_raw])\n+        block = node.getblock(hash, 1)\n+        assert len(block['tx']) == 2\n+        txid = block['tx'][1]\n+        assert node.gettransaction(txid)['hex'] == signed_raw\n+\n+        # Generate custom block with txid\n+        txid = node.sendtoaddress(address, 1)\n+        hash = node.generatecustomblock(address, [txid])\n+        block = node.getblock(hash, 1)\n+        assert len(block['tx']) == 2\n+        assert block['tx'][1] == txid\n+\n+if __name__ == '__main__':",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353256893",
      "id" : 353256893,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzI1Njg5Mw==",
      "original_commit_id" : "de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "original_position" : 52,
      "path" : "test/functional/rpc_generatecustomblock.py",
      "position" : 52,
      "pull_request_review_id" : 326240829,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17653",
      "updated_at" : "2019-12-03T15:45:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353256893",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353259428"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17653"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353259428"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Just `generateblock`?",
      "commit_id" : "de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "created_at" : "2019-12-03T15:49:10Z",
      "diff_hunk" : "@@ -32,6 +32,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"generatetoaddress\", 2, \"maxtries\" },\n     { \"generatetodescriptor\", 0, \"num_blocks\" },\n     { \"generatetodescriptor\", 2, \"maxtries\" },\n+    { \"generatecustomblock\", 1, \"transactions\" },",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353259428",
      "id" : 353259428,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzI1OTQyOA==",
      "original_commit_id" : "de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "original_position" : 4,
      "path" : "src/rpc/client.cpp",
      "position" : 4,
      "pull_request_review_id" : 326244058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17653",
      "updated_at" : "2019-12-03T15:55:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353259428",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353261649"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17653"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353261649"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I guess it's fine supporting both here.",
      "commit_id" : "de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "created_at" : "2019-12-03T15:52:38Z",
      "diff_hunk" : "@@ -220,6 +220,155 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, nGenerate, nMaxTries);\n }\n \n+static std::string GenerateCustomBlock(const CScript& coinbase_script, const std::vector<CTransactionRef>& txs)\n+{\n+    CBlock block;\n+    CChainParams chainparams(Params());\n+\n+    CBlockIndex* previous_index;\n+    {\n+        LOCK(cs_main);\n+        previous_index = ::ChainActive().Tip();\n+    }\n+    CHECK_NONFATAL(previous_index != nullptr);\n+\n+    const int height = previous_index->nHeight + 1;\n+\n+    // Create coinbase transaction.\n+    CMutableTransaction coinbase_tx;\n+    coinbase_tx.vin.resize(1);\n+    coinbase_tx.vin[0].prevout.SetNull();\n+    coinbase_tx.vout.resize(1);\n+    coinbase_tx.vout[0].scriptPubKey = coinbase_script;\n+    coinbase_tx.vout[0].nValue = GetBlockSubsidy(height, chainparams.GetConsensus());\n+    coinbase_tx.vin[0].scriptSig = CScript() << height << OP_0;\n+    block.vtx.push_back(MakeTransactionRef(std::move(coinbase_tx)));\n+\n+    // Add transactions\n+    block.vtx.insert(block.vtx.end(), txs.begin(), txs.end());\n+\n+    block.nVersion = ComputeBlockVersion(previous_index, chainparams.GetConsensus());\n+    if (chainparams.MineBlocksOnDemand())\n+        block.nVersion = gArgs.GetArg(\"-blockversion\", block.nVersion);\n+\n+    // Fill in header\n+    block.hashPrevBlock = previous_index->GetBlockHash();\n+    block.nTime = GetAdjustedTime();\n+    UpdateTime(&block, chainparams.GetConsensus(), previous_index);\n+    block.nBits = GetNextWorkRequired(previous_index, &block, chainparams.GetConsensus());\n+    block.nNonce = 0;\n+\n+    GenerateCoinbaseCommitment(block, previous_index, chainparams.GetConsensus());\n+\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce = 0;\n+        IncrementExtraNonce(&block, ::ChainActive().Tip(), extra_nonce);\n+\n+        BlockValidationState state;\n+        if (!TestBlockValidity(state, chainparams, block, previous_index, false, false)) {\n+            throw JSONRPCError(RPC_VERIFY_ERROR, strprintf(\"TestBlockValidity failed: %s\", FormatStateMessage(state)));\n+        }\n+    }\n+\n+    int max_tries{1000000};\n+\n+    while (max_tries > 0 && !CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus()) && !ShutdownRequested()) {\n+        ++block.nNonce;\n+        --max_tries;\n+    }\n+\n+    if (max_tries == 0) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Exceeded max tries\");\n+    }\n+\n+    std::shared_ptr<const CBlock> shared_block = std::make_shared<const CBlock>(block);\n+    if (!ProcessNewBlock(chainparams, shared_block, true, nullptr))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n+\n+    return block.GetHash().GetHex();\n+}\n+\n+static UniValue generatecustomblock(const JSONRPCRequest& request)\n+{\n+    RPCHelpMan{\"generatecustomblock\",\n+        \"\\nMine a custom block with a set of transactions immediately to a specified address or descriptor (before the RPC call returns)\\n\",\n+        {\n+            {\"address/descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address or descriptor to send the newly generated bitcoin to.\"},\n+            {\"transactions\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"An array of hex strings which are either txids or raw transactions.\\n\"\n+                \"Txids must reference transactions currently in the mempool.\",\n+                {\n+                    {\"rawtx/txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353261649",
      "id" : 353261649,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzI2MTY0OQ==",
      "original_commit_id" : "de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "original_position" : 82,
      "path" : "src/rpc/mining.cpp",
      "position" : 82,
      "pull_request_review_id" : 326244058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17653",
      "updated_at" : "2019-12-03T15:55:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353261649",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353262967"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17653"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353262967"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You can replace this code with `CTxMemPool::get`.",
      "commit_id" : "de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "created_at" : "2019-12-03T15:54:42Z",
      "diff_hunk" : "@@ -220,6 +220,155 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, nGenerate, nMaxTries);\n }\n \n+static std::string GenerateCustomBlock(const CScript& coinbase_script, const std::vector<CTransactionRef>& txs)\n+{\n+    CBlock block;\n+    CChainParams chainparams(Params());\n+\n+    CBlockIndex* previous_index;\n+    {\n+        LOCK(cs_main);\n+        previous_index = ::ChainActive().Tip();\n+    }\n+    CHECK_NONFATAL(previous_index != nullptr);\n+\n+    const int height = previous_index->nHeight + 1;\n+\n+    // Create coinbase transaction.\n+    CMutableTransaction coinbase_tx;\n+    coinbase_tx.vin.resize(1);\n+    coinbase_tx.vin[0].prevout.SetNull();\n+    coinbase_tx.vout.resize(1);\n+    coinbase_tx.vout[0].scriptPubKey = coinbase_script;\n+    coinbase_tx.vout[0].nValue = GetBlockSubsidy(height, chainparams.GetConsensus());\n+    coinbase_tx.vin[0].scriptSig = CScript() << height << OP_0;\n+    block.vtx.push_back(MakeTransactionRef(std::move(coinbase_tx)));\n+\n+    // Add transactions\n+    block.vtx.insert(block.vtx.end(), txs.begin(), txs.end());\n+\n+    block.nVersion = ComputeBlockVersion(previous_index, chainparams.GetConsensus());\n+    if (chainparams.MineBlocksOnDemand())\n+        block.nVersion = gArgs.GetArg(\"-blockversion\", block.nVersion);\n+\n+    // Fill in header\n+    block.hashPrevBlock = previous_index->GetBlockHash();\n+    block.nTime = GetAdjustedTime();\n+    UpdateTime(&block, chainparams.GetConsensus(), previous_index);\n+    block.nBits = GetNextWorkRequired(previous_index, &block, chainparams.GetConsensus());\n+    block.nNonce = 0;\n+\n+    GenerateCoinbaseCommitment(block, previous_index, chainparams.GetConsensus());\n+\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce = 0;\n+        IncrementExtraNonce(&block, ::ChainActive().Tip(), extra_nonce);\n+\n+        BlockValidationState state;\n+        if (!TestBlockValidity(state, chainparams, block, previous_index, false, false)) {\n+            throw JSONRPCError(RPC_VERIFY_ERROR, strprintf(\"TestBlockValidity failed: %s\", FormatStateMessage(state)));\n+        }\n+    }\n+\n+    int max_tries{1000000};\n+\n+    while (max_tries > 0 && !CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus()) && !ShutdownRequested()) {\n+        ++block.nNonce;\n+        --max_tries;\n+    }\n+\n+    if (max_tries == 0) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Exceeded max tries\");\n+    }\n+\n+    std::shared_ptr<const CBlock> shared_block = std::make_shared<const CBlock>(block);\n+    if (!ProcessNewBlock(chainparams, shared_block, true, nullptr))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n+\n+    return block.GetHash().GetHex();\n+}\n+\n+static UniValue generatecustomblock(const JSONRPCRequest& request)\n+{\n+    RPCHelpMan{\"generatecustomblock\",\n+        \"\\nMine a custom block with a set of transactions immediately to a specified address or descriptor (before the RPC call returns)\\n\",\n+        {\n+            {\"address/descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address or descriptor to send the newly generated bitcoin to.\"},\n+            {\"transactions\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"An array of hex strings which are either txids or raw transactions.\\n\"\n+                \"Txids must reference transactions currently in the mempool.\",\n+                {\n+                    {\"rawtx/txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n+                },\n+            }\n+        },\n+        RPCResult{\n+            \"blockhash     (hex) hash of generated block\\n\"\n+        },\n+        RPCExamples{\n+            \"\\nGenerate a block to myaddress, with txs rawtx and mempool_txid\\n\"\n+            + HelpExampleCli(\"generatecustomblock\", R\"(\"myaddress\" '[\"rawtx\", \"mempool_txid\"]')\")\n+        },\n+    }.Check(request);\n+\n+    const auto address_or_descriptor = request.params[0].get_str();\n+    CScript coinbase_script;\n+\n+    FlatSigningProvider key_provider;\n+    std::string error;\n+    const auto desc = Parse(address_or_descriptor, key_provider, error, /* require_checksum = */ false);\n+    if (desc) {\n+        if (desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptor not accepted. Maybe pass through deriveaddresses first?\");\n+        }\n+\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(0, key_provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys\"));\n+        }\n+\n+        CHECK_NONFATAL(scripts.size() == 1);\n+        coinbase_script = scripts.at(0);\n+\n+    } else {\n+        const auto destination = DecodeDestination(address_or_descriptor);\n+        if (!IsValidDestination(destination)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Error: Invalid address or descriptor\");\n+        }\n+\n+        coinbase_script = GetScriptForDestination(destination);\n+    }\n+\n+    std::vector<CTransactionRef> txs;\n+    const auto raw_txs_or_txids = request.params[1].get_array();\n+    for (size_t i = 0; i < raw_txs_or_txids.size(); i++) {\n+        const auto str(raw_txs_or_txids[i].get_str());\n+\n+        uint256 hash;\n+        CMutableTransaction mtx;\n+        if (ParseHashStr(str, hash)) {\n+\n+            LOCK(mempool.cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17653#discussion_r353262967",
      "id" : 353262967,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzI2Mjk2Nw==",
      "original_commit_id" : "de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "original_position" : 133,
      "path" : "src/rpc/mining.cpp",
      "position" : 133,
      "pull_request_review_id" : 326244058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17653",
      "updated_at" : "2019-12-03T15:55:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353262967",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17653#discussion_r355129356"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17653"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355129356"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated",
      "commit_id" : "de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "created_at" : "2019-12-07T16:05:15Z",
      "diff_hunk" : "@@ -32,6 +32,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"generatetoaddress\", 2, \"maxtries\" },\n     { \"generatetodescriptor\", 0, \"num_blocks\" },\n     { \"generatetodescriptor\", 2, \"maxtries\" },\n+    { \"generatecustomblock\", 1, \"transactions\" },",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17653#discussion_r355129356",
      "id" : 355129356,
      "in_reply_to_id" : 353259428,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTEyOTM1Ng==",
      "original_commit_id" : "de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "original_position" : 4,
      "path" : "src/rpc/client.cpp",
      "position" : 4,
      "pull_request_review_id" : 328563314,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17653",
      "updated_at" : "2019-12-07T16:05:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355129356",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/237213?v=4",
         "events_url" : "https://api.github.com/users/andrewtoth/events{/privacy}",
         "followers_url" : "https://api.github.com/users/andrewtoth/followers",
         "following_url" : "https://api.github.com/users/andrewtoth/following{/other_user}",
         "gists_url" : "https://api.github.com/users/andrewtoth/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/andrewtoth",
         "id" : 237213,
         "login" : "andrewtoth",
         "node_id" : "MDQ6VXNlcjIzNzIxMw==",
         "organizations_url" : "https://api.github.com/users/andrewtoth/orgs",
         "received_events_url" : "https://api.github.com/users/andrewtoth/received_events",
         "repos_url" : "https://api.github.com/users/andrewtoth/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/andrewtoth/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/andrewtoth"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17653#discussion_r355133850"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17653"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355133850"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done",
      "commit_id" : "de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "created_at" : "2019-12-07T17:35:00Z",
      "diff_hunk" : "@@ -220,6 +220,155 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n     return generateBlocks(coinbase_script, nGenerate, nMaxTries);\n }\n \n+static std::string GenerateCustomBlock(const CScript& coinbase_script, const std::vector<CTransactionRef>& txs)\n+{\n+    CBlock block;\n+    CChainParams chainparams(Params());\n+\n+    CBlockIndex* previous_index;\n+    {\n+        LOCK(cs_main);\n+        previous_index = ::ChainActive().Tip();\n+    }\n+    CHECK_NONFATAL(previous_index != nullptr);\n+\n+    const int height = previous_index->nHeight + 1;\n+\n+    // Create coinbase transaction.\n+    CMutableTransaction coinbase_tx;\n+    coinbase_tx.vin.resize(1);\n+    coinbase_tx.vin[0].prevout.SetNull();\n+    coinbase_tx.vout.resize(1);\n+    coinbase_tx.vout[0].scriptPubKey = coinbase_script;\n+    coinbase_tx.vout[0].nValue = GetBlockSubsidy(height, chainparams.GetConsensus());\n+    coinbase_tx.vin[0].scriptSig = CScript() << height << OP_0;\n+    block.vtx.push_back(MakeTransactionRef(std::move(coinbase_tx)));\n+\n+    // Add transactions\n+    block.vtx.insert(block.vtx.end(), txs.begin(), txs.end());\n+\n+    block.nVersion = ComputeBlockVersion(previous_index, chainparams.GetConsensus());\n+    if (chainparams.MineBlocksOnDemand())\n+        block.nVersion = gArgs.GetArg(\"-blockversion\", block.nVersion);\n+\n+    // Fill in header\n+    block.hashPrevBlock = previous_index->GetBlockHash();\n+    block.nTime = GetAdjustedTime();\n+    UpdateTime(&block, chainparams.GetConsensus(), previous_index);\n+    block.nBits = GetNextWorkRequired(previous_index, &block, chainparams.GetConsensus());\n+    block.nNonce = 0;\n+\n+    GenerateCoinbaseCommitment(block, previous_index, chainparams.GetConsensus());\n+\n+    {\n+        LOCK(cs_main);\n+        unsigned int extra_nonce = 0;\n+        IncrementExtraNonce(&block, ::ChainActive().Tip(), extra_nonce);\n+\n+        BlockValidationState state;\n+        if (!TestBlockValidity(state, chainparams, block, previous_index, false, false)) {\n+            throw JSONRPCError(RPC_VERIFY_ERROR, strprintf(\"TestBlockValidity failed: %s\", FormatStateMessage(state)));\n+        }\n+    }\n+\n+    int max_tries{1000000};\n+\n+    while (max_tries > 0 && !CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus()) && !ShutdownRequested()) {\n+        ++block.nNonce;\n+        --max_tries;\n+    }\n+\n+    if (max_tries == 0) {\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Exceeded max tries\");\n+    }\n+\n+    std::shared_ptr<const CBlock> shared_block = std::make_shared<const CBlock>(block);\n+    if (!ProcessNewBlock(chainparams, shared_block, true, nullptr))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n+\n+    return block.GetHash().GetHex();\n+}\n+\n+static UniValue generatecustomblock(const JSONRPCRequest& request)\n+{\n+    RPCHelpMan{\"generatecustomblock\",\n+        \"\\nMine a custom block with a set of transactions immediately to a specified address or descriptor (before the RPC call returns)\\n\",\n+        {\n+            {\"address/descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The address or descriptor to send the newly generated bitcoin to.\"},\n+            {\"transactions\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"An array of hex strings which are either txids or raw transactions.\\n\"\n+                \"Txids must reference transactions currently in the mempool.\",\n+                {\n+                    {\"rawtx/txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n+                },\n+            }\n+        },\n+        RPCResult{\n+            \"blockhash     (hex) hash of generated block\\n\"\n+        },\n+        RPCExamples{\n+            \"\\nGenerate a block to myaddress, with txs rawtx and mempool_txid\\n\"\n+            + HelpExampleCli(\"generatecustomblock\", R\"(\"myaddress\" '[\"rawtx\", \"mempool_txid\"]')\")\n+        },\n+    }.Check(request);\n+\n+    const auto address_or_descriptor = request.params[0].get_str();\n+    CScript coinbase_script;\n+\n+    FlatSigningProvider key_provider;\n+    std::string error;\n+    const auto desc = Parse(address_or_descriptor, key_provider, error, /* require_checksum = */ false);\n+    if (desc) {\n+        if (desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptor not accepted. Maybe pass through deriveaddresses first?\");\n+        }\n+\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(0, key_provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys\"));\n+        }\n+\n+        CHECK_NONFATAL(scripts.size() == 1);\n+        coinbase_script = scripts.at(0);\n+\n+    } else {\n+        const auto destination = DecodeDestination(address_or_descriptor);\n+        if (!IsValidDestination(destination)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Error: Invalid address or descriptor\");\n+        }\n+\n+        coinbase_script = GetScriptForDestination(destination);\n+    }\n+\n+    std::vector<CTransactionRef> txs;\n+    const auto raw_txs_or_txids = request.params[1].get_array();\n+    for (size_t i = 0; i < raw_txs_or_txids.size(); i++) {\n+        const auto str(raw_txs_or_txids[i].get_str());\n+\n+        uint256 hash;\n+        CMutableTransaction mtx;\n+        if (ParseHashStr(str, hash)) {\n+\n+            LOCK(mempool.cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17653#discussion_r355133850",
      "id" : 355133850,
      "in_reply_to_id" : 353262967,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTEzMzg1MA==",
      "original_commit_id" : "de2a77fbc210365bf154633ddb0af3ecc1477e12",
      "original_position" : 133,
      "path" : "src/rpc/mining.cpp",
      "position" : 133,
      "pull_request_review_id" : 328567175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17653",
      "updated_at" : "2019-12-07T17:35:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355133850",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/237213?v=4",
         "events_url" : "https://api.github.com/users/andrewtoth/events{/privacy}",
         "followers_url" : "https://api.github.com/users/andrewtoth/followers",
         "following_url" : "https://api.github.com/users/andrewtoth/following{/other_user}",
         "gists_url" : "https://api.github.com/users/andrewtoth/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/andrewtoth",
         "id" : 237213,
         "login" : "andrewtoth",
         "node_id" : "MDQ6VXNlcjIzNzIxMw==",
         "organizations_url" : "https://api.github.com/users/andrewtoth/orgs",
         "received_events_url" : "https://api.github.com/users/andrewtoth/received_events",
         "repos_url" : "https://api.github.com/users/andrewtoth/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/andrewtoth/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/andrewtoth"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Closed by mistake. Reopened new PR #17693 ",
      "created_at" : "2019-12-07T17:35:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17653#issuecomment-562870873",
      "id" : 562870873,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17653",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2Mjg3MDg3Mw==",
      "updated_at" : "2019-12-07T17:35:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562870873",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/237213?v=4",
         "events_url" : "https://api.github.com/users/andrewtoth/events{/privacy}",
         "followers_url" : "https://api.github.com/users/andrewtoth/followers",
         "following_url" : "https://api.github.com/users/andrewtoth/following{/other_user}",
         "gists_url" : "https://api.github.com/users/andrewtoth/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/andrewtoth",
         "id" : 237213,
         "login" : "andrewtoth",
         "node_id" : "MDQ6VXNlcjIzNzIxMw==",
         "organizations_url" : "https://api.github.com/users/andrewtoth/orgs",
         "received_events_url" : "https://api.github.com/users/andrewtoth/received_events",
         "repos_url" : "https://api.github.com/users/andrewtoth/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/andrewtoth/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/andrewtoth"
      }
   }
]
