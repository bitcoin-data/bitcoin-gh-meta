{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "Fix an uninitialized read in `ProcessMessage(â¦, \"tx\", â¦)` when receiving a transaction we already have.\r\n\r\nThe uninitialized value is read and used on [L2526 in the case of `AlreadyHave(inv) == true`](https://github.com/bitcoin/bitcoin/blob/d8a66626d63135fd245d5afc524b88b9a94d208b/src/net_processing.cpp#L2494-L2526).\r\n\r\nProof of concept being run against a `bitcoind` built with MemorySanitizer (`-fsanitize=memory`):\r\n\r\n```\r\n$ ./p2p-uninit-read-in-conditional-poc.py\r\nUsage: ./p2p-uninit-read-in-conditional-poc.py <dstaddr> <dstport> <net>\r\n$ bitcoind -regtest &\r\n$ ./p2p-uninit-read-in-conditional-poc.py 127.0.0.1 18444 regtest\r\nSUMMARY: MemorySanitizer: use-of-uninitialized-value\r\n[1]+  Exit 77                 bitcoind -regtest\r\n$\r\n```\r\n\r\nProof of concept being run against a `bitcoind` running under Valgrind (`valgrind --exit-on-first-error`):\r\n\r\n```\r\n$ valgrind -q --exit-on-first-error=yes --error-exitcode=1 bitcoind -regtest &\r\n$ ./p2p-uninit-read-in-conditional-poc.py 127.0.0.1 18444 regtest\r\n==27351== Conditional jump or move depends on uninitialised value(s)\r\n[1]+  Exit 1                  valgrind -q --exit-on-first-error=yes --error-exitcode=1 bitcoind -regtest\r\n$ \r\n```\r\n\r\nProof of concept script:\r\n\r\n```\r\n#!/usr/bin/env python3\r\n\r\nimport sys\r\n\r\nfrom test_framework.mininode import NetworkThread\r\nfrom test_framework.mininode import P2PDataStore\r\nfrom test_framework.messages import CTransaction, CTxIn, CTxOut, msg_tx\r\n\r\n\r\ndef send_duplicate_tx(dstaddr=\"127.0.0.1\", dstport=18444, net=\"regtest\"):\r\n    network_thread = NetworkThread()\r\n    network_thread.start()\r\n\r\n    node = P2PDataStore()\r\n    node.peer_connect(dstaddr=dstaddr, dstport=dstport, net=net)()\r\n    node.wait_for_verack()\r\n\r\n    tx = CTransaction()\r\n    tx.vin.append(CTxIn())\r\n    tx.vout.append(CTxOut())\r\n    node.send_message(msg_tx(tx))\r\n    node.send_message(msg_tx(tx))\r\n    node.peer_disconnect()\r\n    network_thread.close()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    if len(sys.argv) != 4:\r\n        print(\"Usage: {} <dstaddr> <dstport> <net>\".format(sys.argv[0]))\r\n        sys.exit(0)\r\n    send_duplicate_tx(sys.argv[1], int(sys.argv[2]), sys.argv[3])\r\n```\r\n\r\nNote that the transaction in the proof of concept is the simplest possible, but really any transaction can be used. It does not have to be a valid transaction.\r\n\r\nThis bug was introduced in #15921 (\"validation: Tidy up ValidationState interface\") which was merged in to `master` 28 days ago.\r\n\r\nLuckily this bug was caught before being part of any Bitcoin Core release :)",
   "closed_at" : "2019-11-28T11:59:11Z",
   "closed_by" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
      "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
      "followers_url" : "https://api.github.com/users/laanwj/followers",
      "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/laanwj",
      "id" : 126646,
      "login" : "laanwj",
      "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
      "organizations_url" : "https://api.github.com/users/laanwj/orgs",
      "received_events_url" : "https://api.github.com/users/laanwj/received_events",
      "repos_url" : "https://api.github.com/users/laanwj/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/laanwj"
   },
   "comments" : 4,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17624/comments",
   "created_at" : "2019-11-27T22:14:04Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17624/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/17624",
   "id" : 529595293,
   "labels" : [
      {
         "color" : "006b75",
         "default" : false,
         "description" : null,
         "id" : 98298007,
         "name" : "P2P",
         "node_id" : "MDU6TGFiZWw5ODI5ODAwNw==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17624/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDExOlB1bGxSZXF1ZXN0MzQ2NDQzODA2",
   "number" : 17624,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/17624.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17624",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/17624.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17624"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "net: Fix an uninitialized read in ProcessMessage(â¦, \"tx\", â¦) when receiving a transaction we already have",
   "updated_at" : "2019-11-28T11:59:11Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17624",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   }
}
