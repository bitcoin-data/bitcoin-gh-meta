{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "What is better than fixing bugs? Fixing entire bug classes of course! :)\r\n\r\nAdd option `--valgrind` to run the functional tests under Valgrind.\r\n\r\nRegular functional testing under Valgrind would have caught many of the uninitialized reads we've seen historically.\r\n\r\nLet's kill this bug class once and for all: let's never use an uninitialized value ever again. Or at least not one that would be triggered by running the functional tests! :)\r\n\r\nMy hope is that this addition will make it super-easy to run the functional tests under Valgrind and thus increase the probability of people making use of it :)\r\n\r\nHopefully `test/functional/test_runner.py --valgrind` will become a natural part of the pre-release QA process.\r\n\r\n**Usage:**\r\n\r\n```\r\n$ test/functional/test_runner.py --help\r\nâ¦\r\n  --valgrind            run nodes under the valgrind memory error detector:\r\n                        expect at least a ~10x slowdown, valgrind 3.14 or\r\n                        later required\r\n```\r\n\r\n**Live demo:**\r\n\r\nFirst, let's re-introduce a memory bug by reverting the recent P2P uninitialized read bug fix from PR #17624 (\"net: Fix an uninitialized read in ProcessMessage(â¦, \"tx\", â¦) when receiving a transaction we already have\").\r\n\r\n```\r\n$ git diff\r\ndiff --git a/src/consensus/validation.h b/src/consensus/validation.h\r\nindex 3401eb64c..940adea33 100644\r\n--- a/src/consensus/validation.h\r\n+++ b/src/consensus/validation.h\r\n@@ -114,7 +114,7 @@ inline ValidationState::~ValidationState() {};\r\n\r\n class TxValidationState : public ValidationState {\r\n private:\r\n-    TxValidationResult m_result = TxValidationResult::TX_RESULT_UNSET;\r\n+    TxValidationResult m_result;\r\n public:\r\n     bool Invalid(TxValidationResult result,\r\n                  const std::string &reject_reason=\"\",\r\n```\r\n\r\nSecond, let's test as normal without Valgrind:\r\n\r\n```\r\n$ test/functional/p2p_segwit.py -l INFO\r\n2019-11-28T09:30:42.810000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test__fc8q3qo\r\nâ¦\r\n2019-11-28T09:31:57.187000Z TestFramework (INFO): Subtest: test_non_standard_witness_blinding (Segwit active = True)\r\nâ¦\r\n2019-11-28T09:32:08.265000Z TestFramework (INFO): Tests successful\r\n```\r\n\r\nThird, let's test with `--valgrind` and see if the test fail (as we expect) when the unitialized value is used:\r\n\r\n```\r\n$ test/functional/p2p_segwit.py -l INFO --valgrind\r\n2019-11-28T09:32:33.018000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_gtjecx2l\r\nâ¦\r\n2019-11-28T09:40:36.702000Z TestFramework (INFO): Subtest: test_non_standard_witness_blinding (Segwit active = True)\r\n2019-11-28T09:40:37.813000Z TestFramework (ERROR): Assertion failed\r\nConnectionRefusedError: [Errno 111] Connection refused\r\n```",
   "closed_at" : "2019-12-10T18:31:43Z",
   "closed_by" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
      "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
      "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/MarcoFalke",
      "id" : 6399679,
      "login" : "MarcoFalke",
      "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
      "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
      "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
      "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/MarcoFalke"
   },
   "comments" : 10,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17633/comments",
   "created_at" : "2019-11-29T16:13:41Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17633/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/17633",
   "id" : 530418026,
   "labels" : [
      {
         "color" : "d4c5f9",
         "default" : false,
         "description" : null,
         "id" : 62963516,
         "name" : "Tests",
         "node_id" : "MDU6TGFiZWw2Mjk2MzUxNg==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17633/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDExOlB1bGxSZXF1ZXN0MzQ3MTA1MTcz",
   "number" : 17633,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/17633.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17633",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/17633.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17633"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "tests: Add option --valgrind to run the functional tests under Valgrind",
   "updated_at" : "2019-12-10T18:31:44Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17633",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   }
}
