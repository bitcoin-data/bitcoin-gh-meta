[
   {
      "author_association" : "MEMBER",
      "body" : "I think in general, initializing everything *unless* it's deliberately not done for performance reasons, is a good thing. One company I've worked for even had a strict \"initialize everything\" policy, no exceptions.\r\n\r\nFixing random buffers because of valgrind false positives has some [very bad](https://research.swtch.com/openssl) precedent though, please review carefully.",
      "created_at" : "2019-11-28T09:48:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559421439",
      "id" : 559421439,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTQyMTQzOQ==",
      "updated_at" : "2019-11-28T09:51:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559421439",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@laanwj To be fair this is not a Valgrind false positive? :)  Valgrind false positives are _very_ rare in my experience.\r\n",
      "created_at" : "2019-11-28T09:53:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559423287",
      "id" : 559423287,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTQyMzI4Nw==",
      "updated_at" : "2019-11-28T09:53:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559423287",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> To be fair this is not a Valgrind false positive? :) Valgrind false positives are very rare in my experience.\r\n\r\nIt's a false positive because the buffer is actually filled in by the syscall but ~~valgrind~~ msan doesn't notice. \r\n\r\n> The memory sanitizer cannot see through syscall (see google/sanitizers#852). This caused a false positive use-of-uninitialized-value error for SYS_getrandom.\r\n\r\nOh you're right, wrong tool.",
      "created_at" : "2019-11-28T10:00:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559425791",
      "id" : 559425791,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTQyNTc5MQ==",
      "updated_at" : "2019-11-28T10:01:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559425791",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@laanwj Yes, but the false positive is in MemorySanitizer -- not Valgrind :)",
      "created_at" : "2019-11-28T10:02:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559426538",
      "id" : 559426538,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTQyNjUzOA==",
      "updated_at" : "2019-11-28T10:02:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559426538",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK.\r\nFrom a quick glance it seems like the only change is initializing the value, and because unlike the openssl/debian fiasco, we *don't* use unintialized memory for generating randomness then there's no logical reason why this can make anything that currently works break (unless it was already broken).\r\n\r\nStill requires close up review but I think it's good to keep that in mind",
      "created_at" : "2019-11-28T10:09:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559429166",
      "id" : 559429166,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTQyOTE2Ng==",
      "updated_at" : "2019-11-28T10:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559429166",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Agree that it needs careful review. I can replace the `{0}` with \"// intentionally not initialized\" where needed.\r\n\r\nAlso note that the code this touches is relatively new (added by @sipa in #15250 and #17270), and deserves extra scrutiny anyway now that we've dropped the OpenSSL training wheels.\r\n\r\nThe actual initialization before this commit took place in `GetOSRand`, which is different depending on the operating system details. That's probably another good reason to make sure stuff is initialized before it goes in there.",
      "created_at" : "2019-11-28T10:17:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559432380",
      "id" : 559432380,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTQzMjM4MA==",
      "updated_at" : "2019-11-28T10:17:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559432380",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\n> I think in general, initializing everything _unless_ it's deliberately not done for performance reasons, is a good thing. One company I've worked for even had a strict \"initialize everything\" policy, no exceptions.\r\n\r\nAgree. I think it is worth doing.\r\n\r\nSome background reading that might be of interest regarding the pros/cons of default initialization in general:\r\n* C++ Core Guidelines (Sutter & Stroustrup), \"Always initialize an object\": https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es20-always-initialize-an-object\r\n* Clang automatic variable initialization: https://reviews.llvm.org/D54604 + https://twitter.com/jfbastien/status/1063203517102415872\r\n* Apple has started using automatic variable initialization in iOS kernel builds: https://twitter.com/josephbialek/status/1168930302036762625\r\n* Microsoft has started using MSVC `InitAll` in Windows kernel builds: https://twitter.com/JosephBialek/status/1062774315098112001\r\n* Talk \"Making C Less Dangerous in the Linux kernel\": https://www.youtube.com/watch?v=FY9SbqTO5GQ&feature=youtu.be&t=742\r\n* PDF: \"Fighting Uninitialized Memory in the Kernel\": https://linuxplumbersconf.org/event/4/contributions/426/attachments/338/564/KMSAN_for_LPC_2019\r\n\r\nSome quotes:\r\n* Linus Torvalds: \"So I'd like the zeroing of local variables to be a native compiler option, so that we can (_eventually_ - these things take a long time) just start saying \"ok, we simply consider stack variables to be always initialized\".\r\n* Linus Torvalds: \"Again - I don't think we want a world where everything is force-initialized. There _are_ going to be situations where that just hurts too much. But if we get to a place where we are zero-initialized by default, and have to explicitly mark the unsafe things (and we'll have comments not just about how they get initialized, but also about why that particular thing is so performance-critical), that would be a good place to be.\"\r\n\r\nNote that there is a `clang-tidy` fixup that can rewrite this for us if we want (applies only to integers, booleans, floats, doubles and pointers unfortunately): https://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-init-variables.html",
      "created_at" : "2019-11-28T10:29:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559436518",
      "id" : 559436518,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTQzNjUxOA==",
      "updated_at" : "2019-11-28T10:31:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559436518",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@Sjors Which subset of these changes are required to make MemorySanitizer happy? Not all these are technically needed, right? (I'm not opposing fixing it generally, but asking to get the full picture :))",
      "created_at" : "2019-11-28T10:33:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559438202",
      "id" : 559438202,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTQzODIwMg==",
      "updated_at" : "2019-11-28T10:34:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559438202",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r351755307"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351755307"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@practicalswift once I fixed this one, it ran into unrelated   `use-of-uninitialized-value` problems. That could mean this is the only problem, or the other ones just didn't get a chance to get called before the sanitizer bailed out.",
      "commit_id" : "31408edeffb2e14dd7c25e10ac448d48de7ea4e1",
      "created_at" : "2019-11-28T12:30:41Z",
      "diff_hunk" : "@@ -451,7 +451,7 @@ static void SeedFast(CSHA512& hasher) noexcept\n \n static void SeedSlow(CSHA512& hasher) noexcept\n {\n-    unsigned char buffer[32];\n+    unsigned char buffer[32] = {0};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r351755307",
      "id" : 351755307,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTc1NTMwNw==",
      "original_commit_id" : "ccfed8a22536bc5a307cc463a64fc05c7aa18281",
      "original_position" : 32,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 324256095,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627",
      "updated_at" : "2019-12-06T11:06:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351755307",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Initializing this would conceal from valgrind if changes in the code cased the random variable to not get filled which would be a moderately serious problem: Zero is not an acceptable random value. :)\r\n\r\nSince msan is actually incorrect due to a known and documented limitation in msan, might it not be better to use a suppression?  I'm not a fan of suppressing actual errors-- but this isn't an error, it's a tool limit, and suppressing-by-initializing will reduce the effectiveness other tools without the same limit.\r\n",
      "created_at" : "2019-11-28T15:01:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559525797",
      "id" : 559525797,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTUyNTc5Nw==",
      "updated_at" : "2019-11-28T15:01:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559525797",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Initializing this would conceal from valgrind if changes in the code cased the random variable to not get filled which would be a moderately serious problem: Zero is not an acceptable random value. :)\r\n> \r\n> Since msan is actually incorrect due to a known and documented limitation in msan, might it not be better to use a suppression? I'm not a fan of suppressing actual errors-- but this isn't an error, it's a tool limit, and suppressing-by-initializing will reduce the effectiveness other tools without the same limit.\r\n\r\nThat's a good point. does valgrind support syscalls?",
      "created_at" : "2019-11-28T15:09:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559528278",
      "id" : 559528278,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTUyODI3OA==",
      "updated_at" : "2019-11-28T15:09:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559528278",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Maybe I can add `assert` statements directly after any buffers are filled  to check that they're not still 0? (though I suppose that could be forgotten in new places)",
      "created_at" : "2019-11-28T15:51:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559541756",
      "id" : 559541756,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTU0MTc1Ng==",
      "updated_at" : "2019-11-28T15:51:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559541756",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Clarification regarding my Concept ACK: a suppression would be totally fine too.\r\n\r\nAs long as we make it easier for everyone to use MemorySanitizer I'm happy: we need more MSAN testing :)",
      "created_at" : "2019-11-28T21:11:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559603572",
      "id" : 559603572,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTYwMzU3Mg==",
      "updated_at" : "2019-11-28T21:11:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559603572",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I added asserts to ensure these buffers are actually populated on first use. I also added @gmaxwell's comment about valgrind. I'm not very familiar with how valgrind works. If it substitutes calls to `hasher.Write()`, `hasher.Finalize()`, `GetOSRand()`, etc with no-op, then this won't work.\r\n\r\nI could pick a magic value instead, initialize with that and use == in the assert.",
      "created_at" : "2019-11-29T08:44:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559708343",
      "id" : 559708343,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTcwODM0Mw==",
      "updated_at" : "2019-11-29T08:44:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559708343",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> That's a good point. does valgrind support syscalls?\r\n\r\nYes, valgrind doesn't have this issue.\r\n\r\n> Maybe I can add assert statements directly after any buffers are filled to check that they're not still 0? (though I suppose that could be forgotten in new places)\r\n\r\nBut what if the input is legitly 0? These are not random values being fed in, but just some OS data, which may or may not consist of zeroes.\r\n\r\nSo NACK on the asserts.\r\n",
      "created_at" : "2019-11-29T08:47:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559709475",
      "id" : 559709475,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTcwOTQ3NQ==",
      "updated_at" : "2019-11-29T08:47:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559709475",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r352029242"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352029242"
         }
      },
      "author_association" : "MEMBER",
      "body" : "FWIW: asserting the *address* of the buffer, on the stack, like you do here does nothing.",
      "commit_id" : "31408edeffb2e14dd7c25e10ac448d48de7ea4e1",
      "created_at" : "2019-11-29T08:48:15Z",
      "diff_hunk" : "@@ -389,6 +391,8 @@ class RNGState {\n             ++m_counter;\n             // Finalize the hasher\n             hasher.Finalize(buf);\n+            // Ensure Finalize() populated buf\n+            assert(buf);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r352029242",
      "id" : 352029242,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjAyOTI0Mg==",
      "original_commit_id" : "a69bb009d08f4e64deb37353553f767552241bd3",
      "original_position" : 29,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 324583949,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627",
      "updated_at" : "2019-12-06T11:06:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352029242",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've thought about it a bit and I'm principally opposed to adding asserts here. Now you're changing *run-time* behavior of the application to work around a problem in an analysis tool.\r\n\r\nI'm sorry to say this but : please fix the tool instead",
      "created_at" : "2019-11-29T09:15:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559717966",
      "id" : 559717966,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTcxNzk2Ng==",
      "updated_at" : "2019-11-29T09:15:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559717966",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Echoing the NACK on the asserts :)",
      "created_at" : "2019-11-29T09:26:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559721657",
      "id" : 559721657,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTcyMTY1Nw==",
      "updated_at" : "2019-11-29T09:26:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559721657",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@Sjors Have you considered taking the suppressions route instead? Perhaps that is less intrusive.",
      "created_at" : "2019-11-29T09:30:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559723237",
      "id" : 559723237,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTcyMzIzNw==",
      "updated_at" : "2019-11-29T09:30:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559723237",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Reverted to the original approach, which just initializes to zero. I'm not sure if intentially leaving them uninitialized and having the warnings suppressed if the right approach either.",
      "created_at" : "2019-11-29T09:31:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559723488",
      "id" : 559723488,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTcyMzQ4OA==",
      "updated_at" : "2019-11-29T09:34:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559723488",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I'm not sure if intentially leaving them uninitialized and having the warnings suppressed if the right approach either.\r\n\r\nWhy? :)",
      "created_at" : "2019-11-29T09:34:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559724329",
      "id" : 559724329,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTcyNDMyOQ==",
      "updated_at" : "2019-11-29T09:34:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559724329",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It seems like we're choosing between two tools here:\r\n1. memory sanity check: `= {0}`\r\n2. valgrind: `// intentionally undefined to allow valgrind to catch issues`\r\n\r\nThere's gotta be a solution that involves defined behavior. That would make the code easier to reason about, and prevents folks on different operating systems and compiler optimization flags not noticing bugs (as happened with  #17568 and #17449).",
      "created_at" : "2019-11-29T09:51:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559729879",
      "id" : 559729879,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTcyOTg3OQ==",
      "updated_at" : "2019-11-29T09:51:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559729879",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r352055215"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352055215"
         }
      },
      "author_association" : "MEMBER",
      "body" : "For future reference, something like this works (?), though it's hideous, probably needs a macro, which adds even more complexity:\r\n```\r\nunsigned char zeros[sizeof(buf)] = {0};\r\nassert(!memcmp(fbuf, zeros, sizeof(buf)));\r\n```",
      "commit_id" : "31408edeffb2e14dd7c25e10ac448d48de7ea4e1",
      "created_at" : "2019-11-29T09:52:56Z",
      "diff_hunk" : "@@ -389,6 +391,8 @@ class RNGState {\n             ++m_counter;\n             // Finalize the hasher\n             hasher.Finalize(buf);\n+            // Ensure Finalize() populated buf\n+            assert(buf);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r352055215",
      "id" : 352055215,
      "in_reply_to_id" : 352029242,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjA1NTIxNQ==",
      "original_commit_id" : "a69bb009d08f4e64deb37353553f767552241bd3",
      "original_position" : 29,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 324616652,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627",
      "updated_at" : "2019-12-06T11:06:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352055215",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r352055534"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352055534"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Funny who you run into while googling that: https://rusty.ozlabs.org/?p=560 :-)",
      "commit_id" : "31408edeffb2e14dd7c25e10ac448d48de7ea4e1",
      "created_at" : "2019-11-29T09:53:36Z",
      "diff_hunk" : "@@ -389,6 +391,8 @@ class RNGState {\n             ++m_counter;\n             // Finalize the hasher\n             hasher.Finalize(buf);\n+            // Ensure Finalize() populated buf\n+            assert(buf);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r352055534",
      "id" : 352055534,
      "in_reply_to_id" : 352029242,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjA1NTUzNA==",
      "original_commit_id" : "a69bb009d08f4e64deb37353553f767552241bd3",
      "original_position" : 29,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 324617085,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627",
      "updated_at" : "2019-12-06T11:06:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352055534",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "In that case, let's at least not penalize the tool that actually gets things right (valgrind).\r\n\r\nSo I'd vote for adding a MSAN surpression and just be done with it. It can be removed when the tool is fixed.",
      "created_at" : "2019-11-29T10:00:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559733266",
      "id" : 559733266,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTczMzI2Ng==",
      "updated_at" : "2019-11-29T10:02:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559733266",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Wouldn't initializing to a magic value (e.g `sha256(\"bitcoin\")`) solve both valgrind and sanity check issue?",
      "created_at" : "2019-11-29T10:04:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559734355",
      "id" : 559734355,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTczNDM1NQ==",
      "updated_at" : "2019-11-29T10:04:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559734355",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@Sjors Why not doing a suppression? That seems to be the easiest way to solve the problem this PR is meant to solve :)\r\n\r\nThere are two ways to do MemorySanitizer suppresions: you can do the suppression in the code using the annotation `__attribute__((no_sanitize(\"memory\")))` for the functions you want MSAN-suppressed, or you can use a sanitizer special case blacklist which is perhaps slightly more involved. See https://clang.llvm.org/docs/MemorySanitizer.html#usage for details :)",
      "created_at" : "2019-11-29T15:26:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-559823310",
      "id" : 559823310,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTgyMzMxMA==",
      "updated_at" : "2019-11-29T15:26:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559823310",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "NACK. We don't generally change code to please buggy tool or compiler warnings, especially if the \"fix\" hides actual bugs in our code base.",
      "created_at" : "2019-12-03T19:03:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-561309991",
      "id" : 561309991,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MTMwOTk5MQ==",
      "updated_at" : "2019-12-03T19:03:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561309991",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke it's about more than making tools happy. The tool pointed us to these uninitialized variables, which have caused pretty serious bugs in the recent past and are bad practice. I don't think we should just ignore this.",
      "created_at" : "2019-12-04T09:10:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-561546297",
      "id" : 561546297,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MTU0NjI5Nw==",
      "updated_at" : "2019-12-04T09:10:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561546297",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@Sjors You haven't addressed the question about suppressions. Why not suppress this case? :)",
      "created_at" : "2019-12-04T09:20:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-561550156",
      "id" : 561550156,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MTU1MDE1Ng==",
      "updated_at" : "2019-12-04T09:20:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561550156",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I agree with @MarcoFalke and @practicalswift  here.\r\n\r\nAs I said before, if we do anything here it should be a tool-specific suppression, until the tool is fixed.",
      "created_at" : "2019-12-04T09:22:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-561550822",
      "id" : 561550822,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MTU1MDgyMg==",
      "updated_at" : "2019-12-04T09:22:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561550822",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'm not against suppressing the warning, but I don't think that's enough by itself. It doesn't make the undefined behavior go away. Perhaps one day the address sanitizer can reason about undefined behavior even through syscall. That's great, but still not a good reason to keep the undefined behavior.",
      "created_at" : "2019-12-04T09:36:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-561556393",
      "id" : 561556393,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MTU1NjM5Mw==",
      "updated_at" : "2019-12-04T09:36:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561556393",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "But it is not undefined behavior, *this specific tool* is unable to reason through this. If it was actual undefined behavior, we'd respond very differently.",
      "created_at" : "2019-12-04T09:37:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-561556821",
      "id" : 561556821,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MTU1NjgyMQ==",
      "updated_at" : "2019-12-04T09:38:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561556821",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I added the suppression, as narrowly as possible. I also added comments to the uninitialized variables, pointing back to this discussion so it doesn't get repeated.",
      "created_at" : "2019-12-04T12:48:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-561628884",
      "id" : 561628884,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MTYyODg4NA==",
      "updated_at" : "2019-12-04T12:48:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561628884",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> @MarcoFalke it's about more than making tools happy. The tool pointed us to these uninitialized variables, which have caused pretty serious bugs in the recent past and are bad practice. I don't think we should just ignore this.\r\n\r\nAgain, this is a bug in the tool. These variables are not uninitialized when read. Initializing them with the wrong value will cause bugs in the future because tools that properly detect uninitialized reads will no longer yell at you.\r\n\r\nThis point is repeated every couple of months. Might be a good candidate to add to the dev notes.",
      "created_at" : "2019-12-04T14:50:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-561679458",
      "id" : 561679458,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MTY3OTQ1OA==",
      "updated_at" : "2019-12-04T14:50:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561679458",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r353973199"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353973199"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is a clang bug, right? Should link to the commit that fixed it. And since you are compiling clang from source you might as well use that commit and then remove this code blob here.",
      "commit_id" : "31408edeffb2e14dd7c25e10ac448d48de7ea4e1",
      "created_at" : "2019-12-04T20:45:44Z",
      "diff_hunk" : "@@ -467,6 +467,13 @@ static void SeedEvents(CSHA512& hasher)\n     events_hasher.Write(events_hash, 32);\n }\n \n+// buffer[32] is intentionally not initialized, see https://github.com/bitcoin/bitcoin/pull/17627\n+// Suppress memory sanitizer because it can't see that syscall initializes this in GetOSRand().\n+#if defined(__has_feature) && defined(HAVE_SYS_GETRANDOM)\n+#  if __has_feature(memory_sanitizer)\n+__attribute__((no_sanitize(\"memory\")))\n+#  endif\n+#endif",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r353973199",
      "id" : 353973199,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Mzk3MzE5OQ==",
      "original_commit_id" : "527f3ec9896e35bf34525a981c2b392e59af3c82",
      "original_position" : 37,
      "path" : "src/random.cpp",
      "position" : 46,
      "pull_request_review_id" : 327141281,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627",
      "updated_at" : "2019-12-06T11:06:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353973199",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r353978629"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353978629"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The memory sanitizer appears to be a Google project, and they don't expect `syscall` support to be fixed anytime soon. Only a more narrow case of `getrandom` was fixed, which is of no use to us: https://github.com/google/sanitizers/issues/852#issuecomment-327305535\r\n",
      "commit_id" : "31408edeffb2e14dd7c25e10ac448d48de7ea4e1",
      "created_at" : "2019-12-04T20:57:39Z",
      "diff_hunk" : "@@ -467,6 +467,13 @@ static void SeedEvents(CSHA512& hasher)\n     events_hasher.Write(events_hash, 32);\n }\n \n+// buffer[32] is intentionally not initialized, see https://github.com/bitcoin/bitcoin/pull/17627\n+// Suppress memory sanitizer because it can't see that syscall initializes this in GetOSRand().\n+#if defined(__has_feature) && defined(HAVE_SYS_GETRANDOM)\n+#  if __has_feature(memory_sanitizer)\n+__attribute__((no_sanitize(\"memory\")))\n+#  endif\n+#endif",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r353978629",
      "id" : 353978629,
      "in_reply_to_id" : 353973199,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Mzk3ODYyOQ==",
      "original_commit_id" : "527f3ec9896e35bf34525a981c2b392e59af3c82",
      "original_position" : 37,
      "path" : "src/random.cpp",
      "position" : 46,
      "pull_request_review_id" : 327148315,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627",
      "updated_at" : "2019-12-06T11:06:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353978629",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "created_at" : "2019-12-05T05:25:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-561975042",
      "id" : 561975042,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MTk3NTA0Mg==",
      "updated_at" : "2019-12-05T16:05:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561975042",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@Sjors Thanks for using a suppression instead. Is this the only suppression needed to make MSAN happy in your setup?",
      "created_at" : "2019-12-05T08:13:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-562019966",
      "id" : 562019966,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MjAxOTk2Ng==",
      "updated_at" : "2019-12-05T08:13:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562019966",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift no, it fails on other things, but those appear unrelated. I'll update #17620 later.",
      "created_at" : "2019-12-05T08:56:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-562033723",
      "id" : 562033723,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MjAzMzcyMw==",
      "updated_at" : "2019-12-05T08:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562033723",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r354474171"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/354474171"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok, fine. I'd still prefer a suppression in a suppressions file if possible. Modifying the code like this makes it harder to read and potentially impossible to compile on some environments.",
      "commit_id" : "31408edeffb2e14dd7c25e10ac448d48de7ea4e1",
      "created_at" : "2019-12-05T18:24:11Z",
      "diff_hunk" : "@@ -467,6 +467,13 @@ static void SeedEvents(CSHA512& hasher)\n     events_hasher.Write(events_hash, 32);\n }\n \n+// buffer[32] is intentionally not initialized, see https://github.com/bitcoin/bitcoin/pull/17627\n+// Suppress memory sanitizer because it can't see that syscall initializes this in GetOSRand().\n+#if defined(__has_feature) && defined(HAVE_SYS_GETRANDOM)\n+#  if __has_feature(memory_sanitizer)\n+__attribute__((no_sanitize(\"memory\")))\n+#  endif\n+#endif",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r354474171",
      "id" : 354474171,
      "in_reply_to_id" : 353973199,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NDQ3NDE3MQ==",
      "original_commit_id" : "527f3ec9896e35bf34525a981c2b392e59af3c82",
      "original_position" : 37,
      "path" : "src/random.cpp",
      "position" : 46,
      "pull_request_review_id" : 327757521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627",
      "updated_at" : "2019-12-06T11:06:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/354474171",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-12-05T22:46:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-562352739",
      "id" : 562352739,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MjM1MjczOQ==",
      "updated_at" : "2019-12-05T22:46:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562352739",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "It's not clear to me that everyone understands what's going on here. And maybe I caused some confusion by say that zero is not an acceptable random value. No constant is an acceptable random value.\r\n\r\nThe variable is not undefined. It gets defined by the SYS_getrandom.  Memcheck has a flaw/shortcoming where it doesn't know or assume that sys_getrandom initializes it so it falsely reports it as uninitialized.\r\n\r\nIf it were actually undefined then that would mean that the getrandom call wasn't doing anything which would be a really serious problem because it would mean that the software getting random numbers it was expecting. Ignoring the other belt-and-suspenders randomness inputs, a failure to read random data into that variable would be a total break resulting in predictable keys.\r\n\r\nWith the code as it currently is, should some bug be added so that the variable is not initialized at least valgrind will start yelling.  If the code is changed to initialize the value with anything except a truly random value (such a zero or some random hash) then if a flaw that skips the randomness call is introduced the software will be just as vulnerable but in that case the flaw will be undetectable by valgrind. Similarly, compilers can often warn when they're certain a value will be undefined, and pre-emptive dummy initialization will break those warnings.\r\n\r\nAn assertion would not be appropriate because any value is acceptable random value, so long as it's actually random and not some predictable constant.\r\n\r\nAnother potential tool in the debate between \"pre-initilize variables and avoid the risk of undefined values\" and \"don't pre-init and preserve valgrind/memcheck sensitivity to coding errors that cause the required \"real initialization\" is that valgrind.h has special macros that can be used to mark memory as undefined in valgrind's tracking although they're defined for language purposes. (VALGRIND_MAKE_MEM_UNDEFINED(x,y), see secp256k1/tests.c). I'm not sure if anything similar exists for memcheck.\r\n\r\nIn some rare cases pre-initilization is a performance concern. But in most-- where the variable isn't in some inner loop and doesn't involve a bunch of malloc-- it's not. It is, however, very often a testing sensitivity concern. Of course, in some cases the code can be re-factored to do the proper 'final' initialization at declaration time then that's best.\r\n\r\nIf there were a big swing in the project towards performing dummy initialization I think it would be really useful if it were always done via a macro that would allow disabling it for testing (or valgrind annotating it). ",
      "created_at" : "2019-12-06T01:06:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-562387426",
      "id" : 562387426,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MjM4NzQyNg==",
      "updated_at" : "2019-12-06T01:06:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562387426",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Memcheck has a flaw/shortcoming where it doesn't know or assume that sys_getrandom initializes it so it falsely reports it as uninitialized.\r\n\r\nYou mean MemorySanitizer (MSAN) and not Memcheck (Valgrind), right? :)\r\n\r\n> In some rare cases pre-initilization is a performance concern. But in most-- where the variable isn't in some inner loop and doesn't involve a bunch of malloc-- it's not. It is, however, very often a testing sensitivity concern.\r\n\r\nFrom a security perspective doesn't it boil down to a trade-off between maximising testing sensitivity (achieved by not pre-initializing) vs minimising the risk of leaking non-dummy memory content (achieved by pre-initializing)?\r\n\r\nIs that a fair summary? :)\r\n\r\n---\r\n\r\nBackground context for others:\r\n\r\nDepending on code generation, a programmer who runs into undefined behavior by using an uninialized automatic variable may observe any previous value (including program secrets), or any value which the compiler saw fit to materialize on the stack or in a register (this could be to synthesize an immediate, to refer to code or data locations, to generate cookies, etc).",
      "created_at" : "2019-12-06T07:31:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-562465531",
      "id" : 562465531,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MjQ2NTUzMQ==",
      "updated_at" : "2019-12-06T07:32:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562465531",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r354780838"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/354780838"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@practicalswift any idea how to achieve such a suppressions file? I could also put it in a macro, or we can do that if we ever need it again.\r\nThe outer `#if defined(__has_feature)` is there to make sure other environments don't trip over it. ",
      "commit_id" : "31408edeffb2e14dd7c25e10ac448d48de7ea4e1",
      "created_at" : "2019-12-06T11:10:16Z",
      "diff_hunk" : "@@ -467,6 +467,13 @@ static void SeedEvents(CSHA512& hasher)\n     events_hasher.Write(events_hash, 32);\n }\n \n+// buffer[32] is intentionally not initialized, see https://github.com/bitcoin/bitcoin/pull/17627\n+// Suppress memory sanitizer because it can't see that syscall initializes this in GetOSRand().\n+#if defined(__has_feature) && defined(HAVE_SYS_GETRANDOM)\n+#  if __has_feature(memory_sanitizer)\n+__attribute__((no_sanitize(\"memory\")))\n+#  endif\n+#endif",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r354780838",
      "id" : 354780838,
      "in_reply_to_id" : 353973199,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NDc4MDgzOA==",
      "original_commit_id" : "527f3ec9896e35bf34525a981c2b392e59af3c82",
      "original_position" : 37,
      "path" : "src/random.cpp",
      "position" : 46,
      "pull_request_review_id" : 328138157,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627",
      "updated_at" : "2019-12-06T11:10:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/354780838",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r354846650"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/354846650"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@Sjors Sure! :) You need to use the sanitizer special case list functionality by passing `-fsanitize-blacklist=test/sanitizer_suppressions/msan` as part of `CFLAGS`/`CXXFLAGS`. You need to create the file `test/sanitizer_suppressions/msan` following the file format specified here: https://clang.llvm.org/docs/SanitizerSpecialCaseList.html#format\r\n\r\nUnfortunately MemorySanitizer only supports suppression lists supplied at compile-time. Some of the other sanitizers allow suppression lists supplied at run-time.",
      "commit_id" : "31408edeffb2e14dd7c25e10ac448d48de7ea4e1",
      "created_at" : "2019-12-06T14:02:33Z",
      "diff_hunk" : "@@ -467,6 +467,13 @@ static void SeedEvents(CSHA512& hasher)\n     events_hasher.Write(events_hash, 32);\n }\n \n+// buffer[32] is intentionally not initialized, see https://github.com/bitcoin/bitcoin/pull/17627\n+// Suppress memory sanitizer because it can't see that syscall initializes this in GetOSRand().\n+#if defined(__has_feature) && defined(HAVE_SYS_GETRANDOM)\n+#  if __has_feature(memory_sanitizer)\n+__attribute__((no_sanitize(\"memory\")))\n+#  endif\n+#endif",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r354846650",
      "id" : 354846650,
      "in_reply_to_id" : 353973199,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NDg0NjY1MA==",
      "original_commit_id" : "527f3ec9896e35bf34525a981c2b392e59af3c82",
      "original_position" : 37,
      "path" : "src/random.cpp",
      "position" : 46,
      "pull_request_review_id" : 328220618,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627",
      "updated_at" : "2019-12-06T14:04:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/354846650",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r354860394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/354860394"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I prefer to punt on this until we need it in more places...",
      "commit_id" : "31408edeffb2e14dd7c25e10ac448d48de7ea4e1",
      "created_at" : "2019-12-06T14:33:17Z",
      "diff_hunk" : "@@ -467,6 +467,13 @@ static void SeedEvents(CSHA512& hasher)\n     events_hasher.Write(events_hash, 32);\n }\n \n+// buffer[32] is intentionally not initialized, see https://github.com/bitcoin/bitcoin/pull/17627\n+// Suppress memory sanitizer because it can't see that syscall initializes this in GetOSRand().\n+#if defined(__has_feature) && defined(HAVE_SYS_GETRANDOM)\n+#  if __has_feature(memory_sanitizer)\n+__attribute__((no_sanitize(\"memory\")))\n+#  endif\n+#endif",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r354860394",
      "id" : 354860394,
      "in_reply_to_id" : 353973199,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NDg2MDM5NA==",
      "original_commit_id" : "527f3ec9896e35bf34525a981c2b392e59af3c82",
      "original_position" : 37,
      "path" : "src/random.cpp",
      "position" : 46,
      "pull_request_review_id" : 328239327,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627",
      "updated_at" : "2019-12-06T14:33:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/354860394",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r355399735"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355399735"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I prefer to punt on this until we need it in more places...\r\n\r\nSo this is the only place where MSAN special treatment is needed? That's pretty good, I had assumed it would be the first of many.",
      "commit_id" : "31408edeffb2e14dd7c25e10ac448d48de7ea4e1",
      "created_at" : "2019-12-09T11:34:04Z",
      "diff_hunk" : "@@ -467,6 +467,13 @@ static void SeedEvents(CSHA512& hasher)\n     events_hasher.Write(events_hash, 32);\n }\n \n+// buffer[32] is intentionally not initialized, see https://github.com/bitcoin/bitcoin/pull/17627\n+// Suppress memory sanitizer because it can't see that syscall initializes this in GetOSRand().\n+#if defined(__has_feature) && defined(HAVE_SYS_GETRANDOM)\n+#  if __has_feature(memory_sanitizer)\n+__attribute__((no_sanitize(\"memory\")))\n+#  endif\n+#endif",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r355399735",
      "id" : 355399735,
      "in_reply_to_id" : 353973199,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTM5OTczNQ==",
      "original_commit_id" : "527f3ec9896e35bf34525a981c2b392e59af3c82",
      "original_position" : 37,
      "path" : "src/random.cpp",
      "position" : 46,
      "pull_request_review_id" : 328857047,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627",
      "updated_at" : "2019-12-09T11:34:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355399735",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r355536685"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355536685"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't know yet. The binary exits once it finds a single problem. The next problem in line is in a different file, but who know what happens after that.\r\n\r\nThere's only one place in our codebase where we use `syscall`, so that's a reason for optimism.",
      "commit_id" : "31408edeffb2e14dd7c25e10ac448d48de7ea4e1",
      "created_at" : "2019-12-09T16:07:49Z",
      "diff_hunk" : "@@ -467,6 +467,13 @@ static void SeedEvents(CSHA512& hasher)\n     events_hasher.Write(events_hash, 32);\n }\n \n+// buffer[32] is intentionally not initialized, see https://github.com/bitcoin/bitcoin/pull/17627\n+// Suppress memory sanitizer because it can't see that syscall initializes this in GetOSRand().\n+#if defined(__has_feature) && defined(HAVE_SYS_GETRANDOM)\n+#  if __has_feature(memory_sanitizer)\n+__attribute__((no_sanitize(\"memory\")))\n+#  endif\n+#endif",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#discussion_r355536685",
      "id" : 355536685,
      "in_reply_to_id" : 353973199,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NTUzNjY4NQ==",
      "original_commit_id" : "527f3ec9896e35bf34525a981c2b392e59af3c82",
      "original_position" : 37,
      "path" : "src/random.cpp",
      "position" : 46,
      "pull_request_review_id" : 329033275,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17627",
      "updated_at" : "2019-12-09T16:08:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/355536685",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> minimising the risk of leaking non-dummy memory content (achieved by pre-initializing)\r\n\r\nThere is no risk of leaking anything here, and of the randomness is hashed before being used.\r\n\r\nThe difference between initializing and not is that if a bug is introduced: With initializing a bug that hobbles the random input will not be detectable (except via review),  without initializing the bug would be detectable by memcheck but there would also be undefined behaviour (however, on currently supported compilers/systems the undefined behaviour would be harmless esp compared to the no-randomness bug) until someone noticed the error report in memcheck and fixed it.\r\n",
      "created_at" : "2019-12-21T12:10:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-568176488",
      "id" : 568176488,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2ODE3NjQ4OA==",
      "updated_at" : "2019-12-21T12:10:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/568176488",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "FWIW I attempted to summarise this discussion in the review club notes as a resource and will probably update it with the points made here. Don't hesitate to suggest corrections or improvements in the [repository](https://github.com/bitcoin-core-review-club/bitcoin-core-review-club.github.io) or to me via IRC.  \r\n\r\nhttps://bitcoincore.reviews/17639.html#what-can-we-do-to-mitigate-uninitialized-variables",
      "created_at" : "2019-12-21T12:34:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-568177940",
      "id" : 568177940,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2ODE3Nzk0MA==",
      "updated_at" : "2019-12-21T12:37:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/568177940",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > From a security perspective doesn't it boil down to a trade-off between maximising testing sensitivity (achieved by not pre-initializing) vs minimising the risk of leaking non-dummy memory content (achieved by pre-initializing)?\r\n> \r\n> There is no risk of leaking anything here, and of the randomness is hashed before being used.\r\n\r\nI was talking about the pros and cons of pre-initializing generally: in _this specific case_ there is obviously no risk of leaking sensitive data :)\r\n\r\n---\r\n\r\nRecent discussion on Twitter about pre-initialization in general with some people from Apple working on iPhone security and LLVM respectively that might be of interest for readers of this thread: [\"If youâve got a security-sensitive codebase, you should be using -ftrivial-auto-init=pattern in Clang. In 2020, thereâs no good reason for uninitialized variables to be exploitable.\"](https://twitter.com/jacquesgt/status/1205376977831481345)\r\n\r\nI would assume that they do developer builds without `-ftrivial-auto-init=pattern` (no protection against exploitability but with unchanged testing sensitivity) and release builds with `-ftrivial-auto-init=pattern` (guards against exploitability but loses testing sensitivity).",
      "created_at" : "2019-12-21T17:26:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-568197649",
      "id" : 568197649,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2ODE5NzY0OQ==",
      "updated_at" : "2019-12-21T17:46:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/568197649",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Closing in favor of the more precise fix in #18288. We should still document a policy around initialisation, perhaps requiring _either_ initialisation or a comment that's intentionally not initialised.",
      "created_at" : "2020-03-12T13:17:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17627#issuecomment-598180225",
      "id" : 598180225,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17627",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5ODE4MDIyNQ==",
      "updated_at" : "2020-03-12T13:17:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/598180225",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   }
]
