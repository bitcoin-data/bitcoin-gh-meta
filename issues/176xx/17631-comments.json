[
   {
      "author_association" : "MEMBER",
      "body" : "A test would be nice.",
      "created_at" : "2019-11-29T09:00:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559713149",
      "id" : 559713149,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTcxMzE0OQ==",
      "updated_at" : "2019-11-29T09:00:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559713149",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "After reading `doc/REST-interface.md` I'm not entirely clear about the assumed trust boundaries.\r\n\r\nWhat recommendations do we give to our users regarding exposing the REST endpoints publicly? Do the recommendations differ from our recommendations with regards to exposing the JSON-RPC endpoints publicly?\r\n\r\nAs I've understood it we regard the JSON-RPC interface as as an internal control plane only to be accessible by trusted clients. The assumption we're making from a trust boundary perspective seems to be that we assume that an untrusted clients will never be able to connect to the port serving the JSON-RPC interface (which is the same port as the REST interface).",
      "created_at" : "2019-11-29T09:24:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559721048",
      "id" : 559721048,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTcyMTA0OA==",
      "updated_at" : "2019-11-29T09:29:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559721048",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.\r\n\r\n> After reading doc/REST-interface.md I'm not entirely clear about the assumed trust boundaries.\r\n\r\nThat's a fair question (FWIW the limit has always been: only public data, no complex queries, do not parse JSON as input), but I'd suggest opening a new issue for it. Please keep this one for review of the code changes.",
      "created_at" : "2019-11-29T09:32:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559723792",
      "id" : 559723792,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTcyMzc5Mg==",
      "updated_at" : "2019-11-29T09:32:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559723792",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@laanwj Without knowing if consumers are trusted or not it is pretty hard to review it from a security perspective :)",
      "created_at" : "2019-11-29T09:37:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559725358",
      "id" : 559725358,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTcyNTM1OA==",
      "updated_at" : "2019-11-29T09:37:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559725358",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The REST interface is a lightweight interface for querying public data. Consumers are trusted but less so than on RPC (as they don't authenticate). I still wouldn't recommend exposing it directly to the internet. But maybe it's OK to open it \"publicly\" inside some LAN or VPN that your applications run in.\r\n\r\nThis is my last general comment on this, please open a new issue if you want to continue this discussion.\r\n\r\n> `doc/REST-interface.md`\r\n\r\nSpeaking of which, please update the documentation to mention this new call.",
      "created_at" : "2019-11-29T09:42:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559726929",
      "id" : 559726929,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTcyNjkyOQ==",
      "updated_at" : "2019-11-29T09:46:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559726929",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352165265"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352165265"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit, the use of a single line if statement would be better (including the other one line statements as well)",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2019-11-29T14:55:44Z",
      "diff_hunk" : "@@ -265,6 +267,112 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/requesttype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/requesttype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352165265",
      "id" : 352165265,
      "line" : 305,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjE2NTI2NQ==",
      "original_commit_id" : "661f03f03576b3588d6aa973b6c731b72e50bef8",
      "original_line" : 305,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 59,
      "pull_request_review_id" : 324757830,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-02T02:15:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352165265",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/12272949?v=4",
         "events_url" : "https://api.github.com/users/emilengler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/emilengler/followers",
         "following_url" : "https://api.github.com/users/emilengler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/emilengler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/emilengler",
         "id" : 12272949,
         "login" : "emilengler",
         "node_id" : "MDQ6VXNlcjEyMjcyOTQ5",
         "organizations_url" : "https://api.github.com/users/emilengler/orgs",
         "received_events_url" : "https://api.github.com/users/emilengler/received_events",
         "repos_url" : "https://api.github.com/users/emilengler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/emilengler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/emilengler"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352227089"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352227089"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would be much too long a line to do that.",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2019-11-29T18:57:58Z",
      "diff_hunk" : "@@ -265,6 +267,112 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/requesttype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/requesttype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352227089",
      "id" : 352227089,
      "in_reply_to_id" : 352165265,
      "line" : 305,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjIyNzA4OQ==",
      "original_commit_id" : "661f03f03576b3588d6aa973b6c731b72e50bef8",
      "original_line" : 305,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 59,
      "pull_request_review_id" : 324833271,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-02T02:15:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352227089",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2019-11-29T19:21:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559867818",
      "id" : 559867818,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTg2NzgxOA==",
      "updated_at" : "2019-11-29T19:21:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559867818",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Added a basic sanity test, redid the way headers work to make it easy to get many of them just like the /headers/ request.",
      "created_at" : "2019-11-29T19:37:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559869919",
      "id" : 559869919,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTg2OTkxOQ==",
      "updated_at" : "2019-11-29T19:37:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559869919",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352255960"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352255960"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Oh sorry I meant to ignore the brackets...",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2019-11-29T23:30:54Z",
      "diff_hunk" : "@@ -265,6 +267,112 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/requesttype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/requesttype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352255960",
      "id" : 352255960,
      "in_reply_to_id" : 352165265,
      "line" : 305,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjI1NTk2MA==",
      "original_commit_id" : "661f03f03576b3588d6aa973b6c731b72e50bef8",
      "original_line" : 305,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 59,
      "pull_request_review_id" : 324867658,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-02T02:15:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352255960",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/12272949?v=4",
         "events_url" : "https://api.github.com/users/emilengler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/emilengler/followers",
         "following_url" : "https://api.github.com/users/emilengler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/emilengler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/emilengler",
         "id" : 12272949,
         "login" : "emilengler",
         "node_id" : "MDQ6VXNlcjEyMjcyOTQ5",
         "organizations_url" : "https://api.github.com/users/emilengler/orgs",
         "received_events_url" : "https://api.github.com/users/emilengler/received_events",
         "repos_url" : "https://api.github.com/users/emilengler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/emilengler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/emilengler"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325195"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325195"
         }
      },
      "author_association" : "NONE",
      "body" : "I think it would be useful if this error message provided the user with the valid range.",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2019-12-01T07:30:23Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325195",
      "id" : 352325195,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMyNTE5NQ==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_line" : 300,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 324923896,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-02T02:15:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325195",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1986950?v=4",
         "events_url" : "https://api.github.com/users/paymog/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paymog/followers",
         "following_url" : "https://api.github.com/users/paymog/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paymog/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paymog",
         "id" : 1986950,
         "login" : "paymog",
         "node_id" : "MDQ6VXNlcjE5ODY5NTA=",
         "organizations_url" : "https://api.github.com/users/paymog/orgs",
         "received_events_url" : "https://api.github.com/users/paymog/received_events",
         "repos_url" : "https://api.github.com/users/paymog/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paymog/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paymog/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paymog"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325211"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325211"
         }
      },
      "author_association" : "NONE",
      "body" : "should `2000` be turned into a constant?",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2019-12-01T07:31:01Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325211",
      "id" : 352325211,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMyNTIxMQ==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_line" : 299,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 324923896,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-02T02:15:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325211",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1986950?v=4",
         "events_url" : "https://api.github.com/users/paymog/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paymog/followers",
         "following_url" : "https://api.github.com/users/paymog/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paymog/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paymog",
         "id" : 1986950,
         "login" : "paymog",
         "node_id" : "MDQ6VXNlcjE5ODY5NTA=",
         "organizations_url" : "https://api.github.com/users/paymog/orgs",
         "received_events_url" : "https://api.github.com/users/paymog/received_events",
         "repos_url" : "https://api.github.com/users/paymog/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paymog/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paymog/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paymog"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325362"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325362"
         }
      },
      "author_association" : "NONE",
      "body" : "If I'm reading the code right it looks like json is a valid output format too along with binary and hex.",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2019-12-01T07:35:43Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325362",
      "id" : 352325362,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMyNTM2Mg==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_line" : 372,
      "original_position" : 119,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 324923896,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-02T02:15:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325362",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1986950?v=4",
         "events_url" : "https://api.github.com/users/paymog/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paymog/followers",
         "following_url" : "https://api.github.com/users/paymog/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paymog/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paymog",
         "id" : 1986950,
         "login" : "paymog",
         "node_id" : "MDQ6VXNlcjE5ODY5NTA=",
         "organizations_url" : "https://api.github.com/users/paymog/orgs",
         "received_events_url" : "https://api.github.com/users/paymog/received_events",
         "repos_url" : "https://api.github.com/users/paymog/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paymog/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paymog/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paymog"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325420"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325420"
         }
      },
      "author_association" : "NONE",
      "body" : "the code for extracting `filtertype`, `index` and `blockhash` is shared between these two functions. Should this extraction code be pulled out into their own functions?",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2019-12-01T07:37:17Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n+    }\n+    }\n+\n+}\n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325420",
      "id" : 352325420,
      "line" : 423,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMyNTQyMA==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_line" : 423,
      "original_position" : 149,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 177,
      "pull_request_review_id" : 324923896,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-02T02:15:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325420",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1986950?v=4",
         "events_url" : "https://api.github.com/users/paymog/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paymog/followers",
         "following_url" : "https://api.github.com/users/paymog/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paymog/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paymog",
         "id" : 1986950,
         "login" : "paymog",
         "node_id" : "MDQ6VXNlcjE5ODY5NTA=",
         "organizations_url" : "https://api.github.com/users/paymog/orgs",
         "received_events_url" : "https://api.github.com/users/paymog/received_events",
         "repos_url" : "https://api.github.com/users/paymog/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paymog/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paymog/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paymog"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325461"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325461"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: can the error message be changed to `\"Block \" + uriParts[1] + \" not found\"`?",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2019-12-01T07:38:27Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n+    }\n+    }\n+\n+}\n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        LOCK(cs_main);\n+        block_index = LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            return RESTERR(req, HTTP_NOT_FOUND, uriParts[1] + \" not found\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325461",
      "id" : 352325461,
      "line" : 433,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMyNTQ2MQ==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_line" : 433,
      "original_position" : 159,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 187,
      "pull_request_review_id" : 324923896,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-02T02:15:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325461",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1986950?v=4",
         "events_url" : "https://api.github.com/users/paymog/events{/privacy}",
         "followers_url" : "https://api.github.com/users/paymog/followers",
         "following_url" : "https://api.github.com/users/paymog/following{/other_user}",
         "gists_url" : "https://api.github.com/users/paymog/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/paymog",
         "id" : 1986950,
         "login" : "paymog",
         "node_id" : "MDQ6VXNlcjE5ODY5NTA=",
         "organizations_url" : "https://api.github.com/users/paymog/orgs",
         "received_events_url" : "https://api.github.com/users/paymog/received_events",
         "repos_url" : "https://api.github.com/users/paymog/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/paymog/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/paymog/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/paymog"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2019-12-01T21:06:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-560159029",
      "id" : 560159029,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MDE1OTAyOQ==",
      "updated_at" : "2019-12-01T21:06:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/560159029",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386152"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386152"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Lets leave DRY'ing up rest.cpp for a separate commit. I played with it a bit and there isn't an obvious solution here that doesn't end up adding more lines, but the whole of REST probably could get DRY'd up a lot especially in the results-providing section.",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2019-12-02T00:25:23Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n+    }\n+    }\n+\n+}\n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386152",
      "id" : 352386152,
      "in_reply_to_id" : 352325420,
      "line" : 423,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4NjE1Mg==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_line" : 423,
      "original_position" : 149,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 177,
      "pull_request_review_id" : 324976238,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-02T02:15:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386152",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386354"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386354"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmm, its the same limits as for headers (the code was copied from that section above). Not sure where to document this given the lack of equivalent documentation like we have in RPC where we can fail with help text. Maybe we should have some kind of much more informative general help system like we do for RPC, though its obviously out of scope here.",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2019-12-02T00:28:17Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386354",
      "id" : 352386354,
      "in_reply_to_id" : 352325195,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4NjM1NA==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_line" : 300,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 324976486,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-02T02:15:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386354",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386378"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386378"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ehh, its the net limit, and dunno where to put it? Not really worth it.",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2019-12-02T00:28:43Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386378",
      "id" : 352386378,
      "in_reply_to_id" : 352325211,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4NjM3OA==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_line" : 299,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 324976527,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-02T02:15:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386378",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386428"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386428"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmm, good catch. Looks like headers is busted too, I fixed both.",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2019-12-02T00:29:36Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386428",
      "id" : 352386428,
      "in_reply_to_id" : 352325362,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4NjQyOA==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_line" : 372,
      "original_position" : 119,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 324976597,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-02T02:15:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386428",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386459"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386459"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmm, its coped from the block code, so to keep it the same everywhere I'll leave it.",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2019-12-02T00:30:05Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n+    }\n+    }\n+\n+}\n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        LOCK(cs_main);\n+        block_index = LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            return RESTERR(req, HTTP_NOT_FOUND, uriParts[1] + \" not found\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386459",
      "id" : 352386459,
      "in_reply_to_id" : 352325461,
      "line" : 433,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4NjQ1OQ==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_line" : 433,
      "original_position" : 159,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 187,
      "pull_request_review_id" : 324976635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-02T02:15:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386459",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r353320872"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353320872"
         }
      },
      "author_association" : "MEMBER",
      "body" : "similarly, it'd make sense to define a constant for this, and use it in both places, instead of hardcoding 2000 (which I guess is just a sanity limit)",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2019-12-03T17:31:58Z",
      "diff_hunk" : "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r353320872",
      "id" : 353320872,
      "in_reply_to_id" : 352325195,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzMyMDg3Mg==",
      "original_commit_id" : "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
      "original_line" : 300,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 326321878,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-02T02:15:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353320872",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "created_at" : "2019-12-05T16:05:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-562195592",
      "id" : 562195592,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MjE5NTU5Mg==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562195592/reactions"
      },
      "updated_at" : "2021-10-14T12:17:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562195592",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-12-09T20:04:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-563412054",
      "id" : 563412054,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MzQxMjA1NA==",
      "updated_at" : "2019-12-09T20:04:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/563412054",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r362901473"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362901473"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Use `%u` here instead of `2000`?",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2020-01-03T17:54:20Z",
      "diff_hunk" : "@@ -128,8 +130,8 @@ static bool rest_headers(HTTPRequest* req,\n         return RESTERR(req, HTTP_BAD_REQUEST, \"No header count specified. Use /rest/headers/<count>/<hash>.<ext>.\");\n \n     long count = strtol(path[0].c_str(), nullptr, 10);\n-    if (count < 1 || count > 2000)\n-        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + path[0]);\n+    if (count < 1 || count > MAX_HEADERS_RESULTS)\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of acceptable range (1-2000): \" + path[0]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r362901473",
      "id" : 362901473,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkwMTQ3Mw==",
      "original_commit_id" : "3ab6abcc4dd1a70f30d1341fe21702e2a8b417f5",
      "original_line" : 154,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 338198378,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-02T02:15:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362901473",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased.",
      "created_at" : "2020-05-01T17:40:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-622487014",
      "id" : 622487014,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyMjQ4NzAxNA==",
      "updated_at" : "2020-05-01T17:40:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/622487014",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r425996988"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425996988"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: `constrexpr`",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2020-05-15T19:09:31Z",
      "diff_hunk" : "@@ -27,6 +29,7 @@\n #include <univalue.h>\n \n static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n+static const unsigned int MAX_HEADERS_RESULTS = 2000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r425996988",
      "id" : 425996988,
      "line" : 32,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk5Njk4OA==",
      "original_commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "original_line" : 32,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 17,
      "pull_request_review_id" : 412902113,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-15T19:47:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425996988",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r425997435"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425997435"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Since this is all new code, can you adhere to style guide? if blocks with braces or on same lines, variable names in camel case, etc.",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2020-05-15T19:10:31Z",
      "diff_hunk" : "@@ -285,6 +288,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r425997435",
      "id" : 425997435,
      "line" : 291,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk5NzQzNQ==",
      "original_commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "original_line" : 291,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 45,
      "pull_request_review_id" : 412902113,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-15T19:47:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425997435",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Code review ACK 16d8d2da598a7d234275454f9e053ed074eebf3f.\r\nPerhaps would be good to address the style suggestion above.",
      "created_at" : "2020-05-18T16:14:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-630288035",
      "id" : 630288035,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDI4ODAzNQ==",
      "updated_at" : "2020-05-18T16:14:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630288035",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726682001"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726682001"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`<>` around parameters would be clearer",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2021-10-12T00:52:35Z",
      "diff_hunk" : "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726682001",
      "id" : 726682001,
      "line" : 301,
      "node_id" : "PRRC_kwDOABII584rUEmR",
      "original_commit_id" : "03d3b44e22887de65c168b3fec524b6309a48659",
      "original_line" : 300,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 55,
      "pull_request_review_id" : 776796706,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726682001/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-12T01:16:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726682001",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/meshcollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/meshcollider/followers",
         "following_url" : "https://api.github.com/users/meshcollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/meshcollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/meshcollider",
         "id" : 3211283,
         "login" : "meshcollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/meshcollider/orgs",
         "received_events_url" : "https://api.github.com/users/meshcollider/received_events",
         "repos_url" : "https://api.github.com/users/meshcollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/meshcollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/meshcollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726684583"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726684583"
         }
      },
      "author_association" : "MEMBER",
      "body" : " `strtol` -> `ParseInt32` (#20457)",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2021-10-12T01:00:34Z",
      "diff_hunk" : "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726684583",
      "id" : 726684583,
      "line" : 319,
      "node_id" : "PRRC_kwDOABII584rUFOn",
      "original_commit_id" : "03d3b44e22887de65c168b3fec524b6309a48659",
      "original_line" : 318,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 73,
      "pull_request_review_id" : 776796706,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726684583/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-12T01:16:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726684583",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/meshcollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/meshcollider/followers",
         "following_url" : "https://api.github.com/users/meshcollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/meshcollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/meshcollider",
         "id" : 3211283,
         "login" : "meshcollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/meshcollider/orgs",
         "received_events_url" : "https://api.github.com/users/meshcollider/received_events",
         "repos_url" : "https://api.github.com/users/meshcollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/meshcollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/meshcollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726688389"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726688389"
         }
      },
      "author_association" : "MEMBER",
      "body" : "re: #21866\r\n```\r\nconst CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\r\nCChain& active_chain = chainman.ActiveChain();\r\n...\r\npindex = active_chain.Next(pindex);\r\n```\r\n",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2021-10-12T01:13:45Z",
      "diff_hunk" : "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726688389",
      "id" : 726688389,
      "line" : 333,
      "node_id" : "PRRC_kwDOABII584rUGKF",
      "original_commit_id" : "03d3b44e22887de65c168b3fec524b6309a48659",
      "original_line" : 332,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 87,
      "pull_request_review_id" : 776796706,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726688389/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-12T02:36:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726688389",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/meshcollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/meshcollider/followers",
         "following_url" : "https://api.github.com/users/meshcollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/meshcollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/meshcollider",
         "id" : 3211283,
         "login" : "meshcollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/meshcollider/orgs",
         "received_events_url" : "https://api.github.com/users/meshcollider/received_events",
         "repos_url" : "https://api.github.com/users/meshcollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/meshcollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/meshcollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726690019"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726690019"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        self.test_rest_request(f\"/blockfilter/basic/{bb_hash}\", req_type=ReqType.BIN, ret_type=RetType.OBJ)\r\n```",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2021-10-12T01:19:07Z",
      "diff_hunk" : "@@ -280,6 +280,9 @@ def run_test(self):\n         self.sync_all()\n         json_obj = self.test_rest_request(\"/headers/5/{}\".format(bb_hash))\n         assert_equal(len(json_obj), 5)  # now we should have 5 header objects\n+        json_obj = self.test_rest_request(\"/blockfilterheaders/basic/5/{}\".format(bb_hash))\n+        assert_equal(len(json_obj), 5)  # now we should have 5 filter header objects\n+        self.test_rest_request(\"/blockfilter/basic/{}\".format(bb_hash), req_type=ReqType.BIN, ret_type=RetType.OBJ)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726690019",
      "id" : 726690019,
      "line" : 285,
      "node_id" : "PRRC_kwDOABII584rUGjj",
      "original_commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "original_line" : 285,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "test/functional/interface_rest.py",
      "position" : 15,
      "pull_request_review_id" : 776805612,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726690019/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-12T01:19:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726690019",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726728370"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726728370"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Heh, that's new since this PR was opened :)",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2021-10-12T03:16:54Z",
      "diff_hunk" : "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726728370",
      "id" : 726728370,
      "in_reply_to_id" : 726682001,
      "line" : 301,
      "node_id" : "PRRC_kwDOABII584rUP6y",
      "original_commit_id" : "03d3b44e22887de65c168b3fec524b6309a48659",
      "original_line" : 300,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 55,
      "pull_request_review_id" : 776849069,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726728370/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-12T03:16:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726728370",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726729173"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726729173"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This isn't done in `rest_headers` either, which this code was copied from. Should both change or is it supposed to be strtol?",
      "commit_id" : "16d8d2da598a7d234275454f9e053ed074eebf3f",
      "created_at" : "2021-10-12T03:19:25Z",
      "diff_hunk" : "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726729173",
      "id" : 726729173,
      "in_reply_to_id" : 726684583,
      "line" : 319,
      "node_id" : "PRRC_kwDOABII584rUQHV",
      "original_commit_id" : "03d3b44e22887de65c168b3fec524b6309a48659",
      "original_line" : 318,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 73,
      "pull_request_review_id" : 776850021,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726729173/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-12T03:19:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726729173",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "concept NACK: i'm mostly of the opinion we should deprecate the rest API and make it the responsibility of a proxy server.\r\n\r\nshort of deprecating it, i don't think we should add new data items.",
      "created_at" : "2021-10-12T03:58:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940633673",
      "id" : 940633673,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5844EO5J",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940633673/reactions"
      },
      "updated_at" : "2021-10-12T03:58:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940633673",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah! I'd missed the request for doc updates, sorry about that.",
      "created_at" : "2021-10-12T04:09:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940638949",
      "id" : 940638949,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5844EQLl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940638949/reactions"
      },
      "updated_at" : "2021-10-12T04:09:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940638949",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> concept NACK: i'm mostly of the opinion we should deprecate the rest API and make it the responsibility of a proxy server.\r\n\r\nThat's a *huge* pain. The REST interface is nice precisely *because* you can build a proxy server for it easy - its like 10 lines of nginx.conf. JSON-RPC isn't a nice protocol that is broadly supported, its basically a Bitcoin Core-only thing at this point.",
      "created_at" : "2021-10-12T04:10:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940639460",
      "id" : 940639460,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5844EQTk",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940639460/reactions"
      },
      "updated_at" : "2021-10-12T04:10:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940639460",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "exposing this rest endpoint over NGINX is precisely how our rest endpoint should not be use, so that only serves to add confidence to my notion that it shouldn't be a part of core. A \"proper\" proxy to the rest interface would sanitize all requests.",
      "created_at" : "2021-10-12T04:13:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940641139",
      "id" : 940641139,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5844EQtz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940641139/reactions"
      },
      "updated_at" : "2021-10-12T04:13:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940641139",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "You can sanitize in NGINX too, its probably easier than some python script. But, seriously, that notion is absurd - \"here, you have a running production daemon, run this hacked-together python script to make its API usable\" is not the same as \"we don't want to vouch for the security of this thing, so make sure you pay close attention if you want to expose calls to the outside\".",
      "created_at" : "2021-10-12T04:16:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940642018",
      "id" : 940642018,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5844EQ7i",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940642018/reactions"
      },
      "updated_at" : "2021-10-12T04:16:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940642018",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726958379"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726958379"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think its just another new code preference, to phase out locale-dependent functions. Since you're touching up `MAX_HEADERS_RESULTS` in `rest_headers` anyway, you could do this there too. Up to you.",
      "commit_id" : "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
      "created_at" : "2021-10-12T09:56:16Z",
      "diff_hunk" : "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726958379",
      "id" : 726958379,
      "in_reply_to_id" : 726684583,
      "line" : 369,
      "node_id" : "PRRC_kwDOABII584rVIEr",
      "original_commit_id" : "03d3b44e22887de65c168b3fec524b6309a48659",
      "original_line" : 369,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 73,
      "pull_request_review_id" : 777141981,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726958379/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-12T09:56:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726958379",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/meshcollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/meshcollider/followers",
         "following_url" : "https://api.github.com/users/meshcollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/meshcollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/meshcollider",
         "id" : 3211283,
         "login" : "meshcollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/meshcollider/orgs",
         "received_events_url" : "https://api.github.com/users/meshcollider/received_events",
         "repos_url" : "https://api.github.com/users/meshcollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/meshcollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/meshcollider"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-10-12T12:53:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940984374",
      "id" : 940984374,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5844Fkg2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940984374/reactions"
      },
      "updated_at" : "2021-10-12T12:53:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940984374",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727358127"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727358127"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is it intentionally redefined rather than moving `net_processing`'s to a header?",
      "commit_id" : "f9b714c4fda599e35e5b8184bb3ba151e2e4c5c1",
      "created_at" : "2021-10-12T17:39:07Z",
      "diff_hunk" : "@@ -30,6 +32,7 @@\n #include <univalue.h>\n \n static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n+static constexpr unsigned int MAX_HEADERS_RESULTS = 2000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727358127",
      "id" : 727358127,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584rWpqv",
      "original_commit_id" : "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
      "original_line" : 35,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 777678725,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727358127/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-12T17:39:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727358127",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727359240"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727359240"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Variable names are supposed to be snake case like you had before...",
      "commit_id" : "f9b714c4fda599e35e5b8184bb3ba151e2e4c5c1",
      "created_at" : "2021-10-12T17:40:56Z",
      "diff_hunk" : "@@ -335,6 +338,216 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 blockHash;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727359240",
      "id" : 727359240,
      "line" : 356,
      "node_id" : "PRRC_kwDOABII584rWp8I",
      "original_commit_id" : "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
      "original_line" : 356,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 58,
      "pull_request_review_id" : 777680292,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727359240/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-12T17:40:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727359240",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727361515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727361515"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Better to leave it uninitialised here so failure to do so below (in a future PR) will hit warnings.",
      "commit_id" : "f9b714c4fda599e35e5b8184bb3ba151e2e4c5c1",
      "created_at" : "2021-10-12T17:44:19Z",
      "diff_hunk" : "@@ -335,6 +338,216 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 blockHash;\n+    if (!ParseHashStr(uriParts[2], blockHash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || (unsigned int)count > MAX_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_HEADERS_RESULTS, uriParts[1]));\n+    }\n+\n+\n+    const CBlockIndex* tip = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727361515",
      "id" : 727361515,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584rWqfr",
      "original_commit_id" : "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
      "original_line" : 377,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 777683353,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727361515/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-12T17:44:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727361515",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727367152"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727367152"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "John seems to disagree https://github.com/bitcoin/bitcoin/pull/17631#discussion_r425997435",
      "commit_id" : "f9b714c4fda599e35e5b8184bb3ba151e2e4c5c1",
      "created_at" : "2021-10-12T17:52:28Z",
      "diff_hunk" : "@@ -335,6 +338,216 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 blockHash;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727367152",
      "id" : 727367152,
      "in_reply_to_id" : 727359240,
      "line" : 356,
      "node_id" : "PRRC_kwDOABII584rWr3w",
      "original_commit_id" : "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
      "original_line" : 356,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 58,
      "pull_request_review_id" : 777690565,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727367152/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-12T17:52:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727367152",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727367824"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727367824"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Actually, this variable is unused?",
      "commit_id" : "f9b714c4fda599e35e5b8184bb3ba151e2e4c5c1",
      "created_at" : "2021-10-12T17:53:23Z",
      "diff_hunk" : "@@ -335,6 +338,216 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 blockHash;\n+    if (!ParseHashStr(uriParts[2], blockHash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || (unsigned int)count > MAX_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_HEADERS_RESULTS, uriParts[1]));\n+    }\n+\n+\n+    const CBlockIndex* tip = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727367824",
      "id" : 727367824,
      "in_reply_to_id" : 727361515,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584rWsCQ",
      "original_commit_id" : "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
      "original_line" : 377,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 777691396,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727367824/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-12T17:53:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727367824",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727369694"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727369694"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good catch, renamed it here.",
      "commit_id" : "f9b714c4fda599e35e5b8184bb3ba151e2e4c5c1",
      "created_at" : "2021-10-12T17:56:01Z",
      "diff_hunk" : "@@ -30,6 +32,7 @@\n #include <univalue.h>\n \n static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n+static constexpr unsigned int MAX_HEADERS_RESULTS = 2000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727369694",
      "id" : 727369694,
      "in_reply_to_id" : 727358127,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584rWsfe",
      "original_commit_id" : "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
      "original_line" : 35,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 777693686,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727369694/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-12T17:56:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727369694",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> This pull request conflicts with the target branch and needs rebase.\r\n\r\nLol come on @MarcoFalke...merging 5 day old lint fixes against conflicting feature PRs.....",
      "created_at" : "2021-10-12T17:56:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-941240622",
      "id" : 941240622,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5844GjEu",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/941240622/reactions"
      },
      "updated_at" : "2021-10-12T17:56:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/941240622",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727399160"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727399160"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Must be a typo? https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c",
      "commit_id" : "1887a964db142ebb93e038d432ea4632568df4d1",
      "created_at" : "2021-10-12T18:40:50Z",
      "diff_hunk" : "@@ -335,6 +338,216 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 blockHash;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727399160",
      "id" : 727399160,
      "in_reply_to_id" : 727359240,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584rWzr4",
      "original_commit_id" : "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
      "original_line" : 356,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 777732533,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727399160/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-12T18:40:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727399160",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727683427"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727683427"
         }
      },
      "author_association" : "MEMBER",
      "body" : "could `std::move` this",
      "commit_id" : "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
      "created_at" : "2021-10-13T04:09:43Z",
      "diff_hunk" : "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727683427",
      "id" : 727683427,
      "line" : 410,
      "node_id" : "PRRC_kwDOABII584rX5Fj",
      "original_commit_id" : "c248fc938d04f2c4418eba907f041099416714f7",
      "original_line" : 410,
      "original_position" : 112,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 112,
      "pull_request_review_id" : 778070991,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727683427/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-13T04:30:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727683427",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/meshcollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/meshcollider/followers",
         "following_url" : "https://api.github.com/users/meshcollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/meshcollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/meshcollider",
         "id" : 3211283,
         "login" : "meshcollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/meshcollider/orgs",
         "received_events_url" : "https://api.github.com/users/meshcollider/received_events",
         "repos_url" : "https://api.github.com/users/meshcollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/meshcollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/meshcollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727683868"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727683868"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: extraneous newline",
      "commit_id" : "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
      "created_at" : "2021-10-13T04:11:08Z",
      "diff_hunk" : "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727683868",
      "id" : 727683868,
      "line" : 425,
      "node_id" : "PRRC_kwDOABII584rX5Mc",
      "original_commit_id" : "c248fc938d04f2c4418eba907f041099416714f7",
      "original_line" : 425,
      "original_position" : 127,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 127,
      "pull_request_review_id" : 778070991,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727683868/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-13T04:30:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727683868",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/meshcollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/meshcollider/followers",
         "following_url" : "https://api.github.com/users/meshcollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/meshcollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/meshcollider",
         "id" : 3211283,
         "login" : "meshcollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/meshcollider/orgs",
         "received_events_url" : "https://api.github.com/users/meshcollider/received_events",
         "repos_url" : "https://api.github.com/users/meshcollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/meshcollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/meshcollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727686091"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727686091"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There are only two differences between BINARY and HEX:\r\n- `ssHeader.str()` and `HexStr(ssHeader)`\r\n- `\"application/octet-stream\"` vs `\"text/plain\"`\r\n\r\nIt could be written a lot more concisely as something like this:\r\n```cpp\r\ncase RetFormat::BINARY:\r\ncase RetFormat::HEX: {\r\n    CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\r\n    for (const uint256& header : filter_headers) {\r\n        ssHeader << header;\r\n    }\r\n\r\n    std::string header_string = (rf == RetFormat::HEX) ? HexStr(ssHeader) : ssHeader.str();\r\n    std::string content_type = (rf == RetFormat::HEX) ? \"text/plain\" : \"application/octet-stream\";\r\n    req->WriteHeader(\"Content-Type\", content_type);\r\n    req->WriteReply(HTTP_OK, header_string);\r\n    return true;\r\n}\r\n```",
      "commit_id" : "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
      "created_at" : "2021-10-13T04:18:10Z",
      "diff_hunk" : "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader) + \"\\n\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727686091",
      "id" : 727686091,
      "line" : 432,
      "node_id" : "PRRC_kwDOABII584rX5vL",
      "original_commit_id" : "c248fc938d04f2c4418eba907f041099416714f7",
      "original_line" : 432,
      "original_position" : 134,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 134,
      "pull_request_review_id" : 778070991,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727686091/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-13T04:36:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727686091",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/meshcollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/meshcollider/followers",
         "following_url" : "https://api.github.com/users/meshcollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/meshcollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/meshcollider",
         "id" : 3211283,
         "login" : "meshcollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/meshcollider/orgs",
         "received_events_url" : "https://api.github.com/users/meshcollider/received_events",
         "repos_url" : "https://api.github.com/users/meshcollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/meshcollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/meshcollider"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-941240622\r\n\r\nMerge conflicts are certainly frustrating and I want to apologize for that. Though, the conflicting pull was not a \"lint fix\", but a bug fix. Sure, there was no bug report, but I think that bugs should still be fixed once they are known. When the pull was created, I didn't expect a conflict and it seems there was no activity here for more than a year (https://github.com/bitcoin/bitcoin/pull/17631#ref-pullrequest-1019792843). When the pull was merged, it had several ACKs and this one had none (IIRC). Also, it seems there was a review comment about the integer parsing still unsolved: https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726684583. (A sister pull request #23227 was also merged after 4 days with 3 ACKs, even though there was a conflict, so I think this is generally fine). ",
      "created_at" : "2021-10-13T04:52:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-941919751",
      "id" : 941919751,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5844JI4H",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/941919751/reactions"
      },
      "updated_at" : "2021-10-13T04:52:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/941919751",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727698281"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727698281"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think the real issue isn't whether `strtol` or something else is used, but whether parsing errors are ignored or not. `strtol` makes it easy to ignore them, so it seems reasonable to use our wrappers. (Or alternatively, add the error handling)",
      "commit_id" : "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
      "created_at" : "2021-10-13T04:54:47Z",
      "diff_hunk" : "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727698281",
      "id" : 727698281,
      "in_reply_to_id" : 726684583,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584rX8tp",
      "original_commit_id" : "03d3b44e22887de65c168b3fec524b6309a48659",
      "original_line" : 369,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 778088419,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727698281/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-13T04:54:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727698281",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727703209"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727703209"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION);\r\n```\r\n\r\nnit if you need to retouch. This shouldn't have any effect, since no txs are serialized?",
      "commit_id" : "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
      "created_at" : "2021-10-13T05:09:13Z",
      "diff_hunk" : "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+    }\n+    }\n+\n+}\n+\n+static bool rest_block_filter(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/<filtertype>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        block_index = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            return RESTERR(req, HTTP_NOT_FOUND, uri_parts[1] + \" not found\");\n+        }\n+        block_was_connected = block_index->IsValid(BLOCK_VALID_SCRIPTS);\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    BlockFilter filter;\n+    if (!index->LookupFilter(block_index, filter)) {\n+        std::string errmsg = \"Filter not found.\";\n+\n+        if (!block_was_connected) {\n+            errmsg += \" Block was not connected to active chain.\";\n+        } else if (!index_ready) {\n+            errmsg += \" Block filters are still in the process of being indexed.\";\n+        } else {\n+            errmsg += \" This error is unexpected and indicates index corruption.\";\n+        }\n+\n+        return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n+        ssResp << filter;\n+\n+        std::string binaryResp = ssResp.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryResp);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727703209",
      "id" : 727703209,
      "line" : 526,
      "node_id" : "PRRC_kwDOABII584rX96p",
      "original_commit_id" : "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
      "original_line" : 526,
      "original_position" : 228,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 228,
      "pull_request_review_id" : 778094438,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727703209/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-13T05:11:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727703209",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727703918"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727703918"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit, if you need to re-touch, according to clang-format: \r\n\r\n```suggestion\r\nstatic bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\r\n{\r\n    if (!CheckWarmup(req)) {\r\n```",
      "commit_id" : "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
      "created_at" : "2021-10-13T05:11:08Z",
      "diff_hunk" : "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727703918",
      "id" : 727703918,
      "line" : 345,
      "node_id" : "PRRC_kwDOABII584rX-Fu",
      "original_commit_id" : "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
      "original_line" : 345,
      "original_position" : 47,
      "original_start_line" : 344,
      "path" : "src/rest.cpp",
      "position" : 47,
      "pull_request_review_id" : 778094438,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727703918/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 344,
      "start_side" : "RIGHT",
      "updated_at" : "2021-10-13T05:11:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727703918",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r728287246"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/728287246"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah, I'd misread John's comment at https://github.com/bitcoin/bitcoin/pull/17631#discussion_r425997435 as referring to all braces, not just if ones, my bad.",
      "commit_id" : "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
      "created_at" : "2021-10-13T17:14:35Z",
      "diff_hunk" : "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r728287246",
      "id" : 728287246,
      "in_reply_to_id" : 727703918,
      "line" : 345,
      "node_id" : "PRRC_kwDOABII584raMgO",
      "original_commit_id" : "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
      "original_line" : 345,
      "original_position" : 47,
      "original_start_line" : 344,
      "path" : "src/rest.cpp",
      "position" : 47,
      "pull_request_review_id" : 778878987,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/728287246/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 344,
      "start_side" : "RIGHT",
      "updated_at" : "2021-10-13T17:14:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/728287246",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343312"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343312"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't believe this does anything for the 32-byte array on stack?",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-10-17T02:51:53Z",
      "diff_hunk" : "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343312",
      "id" : 730343312,
      "in_reply_to_id" : 727683427,
      "line" : 411,
      "node_id" : "PRRC_kwDOABII584riCeQ",
      "original_commit_id" : "c248fc938d04f2c4418eba907f041099416714f7",
      "original_line" : 411,
      "original_position" : 112,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 113,
      "pull_request_review_id" : 781403824,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343312/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-17T02:51:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343312",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343426"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343426"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It doesn't make a difference, indeed.",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-10-17T02:53:19Z",
      "diff_hunk" : "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343426",
      "id" : 730343426,
      "in_reply_to_id" : 727683427,
      "line" : 411,
      "node_id" : "PRRC_kwDOABII584riCgC",
      "original_commit_id" : "c248fc938d04f2c4418eba907f041099416714f7",
      "original_line" : 411,
      "original_position" : 112,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 113,
      "pull_request_review_id" : 781403879,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343426/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-17T02:53:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343426",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343458"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343458"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Unless its pressing I'd vaguely rather keep the code the same as the rest of the code in the same file. At least personally I don't find this more readable.",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-10-17T02:53:42Z",
      "diff_hunk" : "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader) + \"\\n\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343458",
      "id" : 730343458,
      "in_reply_to_id" : 727686091,
      "line" : 432,
      "node_id" : "PRRC_kwDOABII584riCgi",
      "original_commit_id" : "c248fc938d04f2c4418eba907f041099416714f7",
      "original_line" : 432,
      "original_position" : 134,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 134,
      "pull_request_review_id" : 781403889,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343458/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-17T02:53:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343458",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2021-10-17T02:55:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-945039954",
      "id" : 945039954,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5844VCpS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/945039954/reactions"
      },
      "updated_at" : "2021-10-17T02:55:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/945039954",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343635"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343635"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is now `const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};`, so good, I presume (though admittedly I don't really know *what* that does....mumbles about C++).",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-10-17T02:55:31Z",
      "diff_hunk" : "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343635",
      "id" : 730343635,
      "in_reply_to_id" : 726684583,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584riCjT",
      "original_commit_id" : "03d3b44e22887de65c168b3fec524b6309a48659",
      "original_line" : 369,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : null,
      "pull_request_review_id" : 781403938,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343635/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-17T02:55:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343635",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Addressed feedback, diff since the previous round of acks:\r\n\r\n```diff\r\n$ git diff-tree -U1 7cf4e22080 2b64fa3251\r\ndiff --git a/src/rest.cpp b/src/rest.cpp\r\nindex dd1be52f86..18ae350630 100644\r\n--- a/src/rest.cpp\r\n+++ b/src/rest.cpp\r\n@@ -343,3 +343,4 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\r\n \r\n-static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\r\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\r\n+{\r\n     if (!CheckWarmup(req))\r\n@@ -414,3 +415,3 @@ static bool rest_filter_header(const std::any& context, HTTPRequest* req, const\r\n     case RetFormat::BINARY: {\r\n-        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\r\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\r\n         for (const uint256& header : filter_headers) {\r\n@@ -424,5 +425,4 @@ static bool rest_filter_header(const std::any& context, HTTPRequest* req, const\r\n     }\r\n-\r\n     case RetFormat::HEX: {\r\n-        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\r\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\r\n         for (const uint256& header : filter_headers) {\r\n@@ -451,6 +451,6 @@ static bool rest_filter_header(const std::any& context, HTTPRequest* req, const\r\n     }\r\n-\r\n }\r\n \r\n-static bool rest_block_filter(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\r\n+static bool rest_block_filter(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\r\n+{\r\n     if (!CheckWarmup(req))\r\n@@ -523,3 +523,2 @@ static bool rest_block_filter(const std::any& context, HTTPRequest* req, const s\r\n     }\r\n-\r\n     case RetFormat::HEX: {\r\n@@ -533,3 +532,2 @@ static bool rest_block_filter(const std::any& context, HTTPRequest* req, const s\r\n     }\r\n-\r\n     case RetFormat::JSON: {\r\n@@ -542,3 +540,2 @@ static bool rest_block_filter(const std::any& context, HTTPRequest* req, const s\r\n     }\r\n-\r\n     default: {\r\n$\r\n```",
      "created_at" : "2021-10-17T02:57:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-945040154",
      "id" : 945040154,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5844VCsa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/945040154/reactions"
      },
      "updated_at" : "2021-10-17T02:59:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/945040154",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730378712"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730378712"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Looks like you didn't remove this in the last force push?",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-10-17T08:46:05Z",
      "diff_hunk" : "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+    }\n+    }\n+\n+}\n+\n+static bool rest_block_filter(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/<filtertype>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        block_index = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            return RESTERR(req, HTTP_NOT_FOUND, uri_parts[1] + \" not found\");\n+        }\n+        block_was_connected = block_index->IsValid(BLOCK_VALID_SCRIPTS);\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    BlockFilter filter;\n+    if (!index->LookupFilter(block_index, filter)) {\n+        std::string errmsg = \"Filter not found.\";\n+\n+        if (!block_was_connected) {\n+            errmsg += \" Block was not connected to active chain.\";\n+        } else if (!index_ready) {\n+            errmsg += \" Block filters are still in the process of being indexed.\";\n+        } else {\n+            errmsg += \" This error is unexpected and indicates index corruption.\";\n+        }\n+\n+        return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n+        ssResp << filter;\n+\n+        std::string binaryResp = ssResp.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryResp);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730378712",
      "id" : 730378712,
      "in_reply_to_id" : 727703209,
      "line" : 525,
      "node_id" : "PRRC_kwDOABII584riLHY",
      "original_commit_id" : "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
      "original_line" : 525,
      "original_position" : 228,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 227,
      "pull_request_review_id" : 781423810,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730378712/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-17T08:46:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730378712",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK 2b64fa3251ac5ff4b4d174f1f0be7226490dce87 - Adding blockfilters to the REST interface is analogous to serving other public data such as transactions or blocks.\r\n\r\nWould be nice to have the code DRY'd up at some point but i would consider it fine for now as that is true for many parts of `rest.cpp` . \r\n\r\nConsider updating the PR description with the updated endpoint paths. ie: `/rest/blockfilterheaders/basic/<COUNT>/...` instead of `/rest/blockfilter/basic/header/...`.",
      "created_at" : "2021-10-17T18:48:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-945175070",
      "id" : 945175070,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5844Vjoe",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/945175070/reactions"
      },
      "updated_at" : "2021-10-17T18:48:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/945175070",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730515278"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730515278"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Oops, I'd misread your comment here, I thought you were asking me to add the flags like they are elsewhere in the file. I'm a bit confused why they were added elsewhere in the file since this PR was opened if they should be removed now?",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-10-18T01:29:08Z",
      "diff_hunk" : "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+    }\n+    }\n+\n+}\n+\n+static bool rest_block_filter(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/<filtertype>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        block_index = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            return RESTERR(req, HTTP_NOT_FOUND, uri_parts[1] + \" not found\");\n+        }\n+        block_was_connected = block_index->IsValid(BLOCK_VALID_SCRIPTS);\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    BlockFilter filter;\n+    if (!index->LookupFilter(block_index, filter)) {\n+        std::string errmsg = \"Filter not found.\";\n+\n+        if (!block_was_connected) {\n+            errmsg += \" Block was not connected to active chain.\";\n+        } else if (!index_ready) {\n+            errmsg += \" Block filters are still in the process of being indexed.\";\n+        } else {\n+            errmsg += \" This error is unexpected and indicates index corruption.\";\n+        }\n+\n+        return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n+        ssResp << filter;\n+\n+        std::string binaryResp = ssResp.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryResp);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730515278",
      "id" : 730515278,
      "in_reply_to_id" : 727703209,
      "line" : 525,
      "node_id" : "PRRC_kwDOABII584risdO",
      "original_commit_id" : "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
      "original_line" : 525,
      "original_position" : 228,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 227,
      "pull_request_review_id" : 781524205,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730515278/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-18T01:29:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730515278",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730682151"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730682151"
         }
      },
      "author_association" : "MEMBER",
      "body" : "They were added in commit 412bab22b23036962509d2655b68cccd726b6ba4 in 2016. `RPCSerializationFlags` only affect txs (and thus blocks), but nothing else.",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-10-18T08:23:40Z",
      "diff_hunk" : "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+    }\n+    }\n+\n+}\n+\n+static bool rest_block_filter(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/<filtertype>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        block_index = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            return RESTERR(req, HTTP_NOT_FOUND, uri_parts[1] + \" not found\");\n+        }\n+        block_was_connected = block_index->IsValid(BLOCK_VALID_SCRIPTS);\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    BlockFilter filter;\n+    if (!index->LookupFilter(block_index, filter)) {\n+        std::string errmsg = \"Filter not found.\";\n+\n+        if (!block_was_connected) {\n+            errmsg += \" Block was not connected to active chain.\";\n+        } else if (!index_ready) {\n+            errmsg += \" Block filters are still in the process of being indexed.\";\n+        } else {\n+            errmsg += \" This error is unexpected and indicates index corruption.\";\n+        }\n+\n+        return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n+        ssResp << filter;\n+\n+        std::string binaryResp = ssResp.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryResp);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730682151",
      "id" : 730682151,
      "in_reply_to_id" : 727703209,
      "line" : 525,
      "node_id" : "PRRC_kwDOABII584rjVMn",
      "original_commit_id" : "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
      "original_line" : 525,
      "original_position" : 228,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 227,
      "pull_request_review_id" : 781735874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730682151/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-18T08:23:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730682151",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730922696"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730922696"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: Is this check intentionally before `filtertype` checks? I would expect `filtertype` to be checked first, unless it is done on purpose for performance reasons.",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-10-18T13:29:17Z",
      "diff_hunk" : "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730922696",
      "id" : 730922696,
      "line" : 360,
      "node_id" : "PRRC_kwDOABII584rkP7I",
      "original_commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_line" : 360,
      "original_position" : 62,
      "original_start_line" : 357,
      "path" : "src/rest.cpp",
      "position" : 62,
      "pull_request_review_id" : 782056448,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730922696/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 357,
      "start_side" : "RIGHT",
      "updated_at" : "2021-10-18T17:01:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730922696",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730933199"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730933199"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: The error message may also say something like \"Header count is invalid or it is out of acceptable range..\" as it happens quite regularly that somebody writes \"1OO\" instead of \"100\".",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-10-18T13:40:28Z",
      "diff_hunk" : "@@ -190,8 +193,8 @@ static bool rest_headers(const std::any& context,\n         return RESTERR(req, HTTP_BAD_REQUEST, \"No header count specified. Use /rest/headers/<count>/<hash>.<ext>.\");\n \n     const auto parsed_count{ToIntegral<size_t>(path[0])};\n-    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > 2000) {\n-        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + path[0]);\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, path[0]));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730933199",
      "id" : 730933199,
      "line" : 197,
      "node_id" : "PRRC_kwDOABII584rkSfP",
      "original_commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_line" : 197,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 28,
      "pull_request_review_id" : 782056448,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730933199/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-19T07:56:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730933199",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730935154"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730935154"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    for (const CBlockIndex* pindex : headers) {\r\n```",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-10-18T13:42:33Z",
      "diff_hunk" : "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730935154",
      "id" : 730935154,
      "line" : 398,
      "node_id" : "PRRC_kwDOABII584rkS9y",
      "original_commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_line" : 398,
      "original_position" : 100,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 100,
      "pull_request_review_id" : 782056448,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730935154/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-18T17:01:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730935154",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730935387"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730935387"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    std::vector<const CBlockIndex*> headers;\r\n```",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-10-18T13:42:47Z",
      "diff_hunk" : "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730935387",
      "id" : 730935387,
      "line" : 377,
      "node_id" : "PRRC_kwDOABII584rkTBb",
      "original_commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_line" : 377,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 79,
      "pull_request_review_id" : 782056448,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730935387/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-18T17:01:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730935387",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730936190"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730936190"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\", MAX_REST_HEADERS_RESULTS, uri_parts[1]));\r\n```",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-10-18T13:43:35Z",
      "diff_hunk" : "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730936190",
      "id" : 730936190,
      "line" : 374,
      "node_id" : "PRRC_kwDOABII584rkTN-",
      "original_commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_line" : 374,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 76,
      "pull_request_review_id" : 782056448,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730936190/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-18T17:01:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730936190",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r731574305"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731574305"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Any reason not to simply do the usual `clang-format -i src/rest.cpp`? :)",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-10-19T07:33:34Z",
      "diff_hunk" : "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r731574305",
      "id" : 731574305,
      "in_reply_to_id" : 730935387,
      "line" : 377,
      "node_id" : "PRRC_kwDOABII584rmvAh",
      "original_commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_line" : 377,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 79,
      "pull_request_review_id" : 782891569,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731574305/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-19T07:33:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731574305",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r731592017"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731592017"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "AFAIK Some violations of clang format in `rest.cpp` are from previous PRs. But in general, it would be a good thing.",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-10-19T07:56:27Z",
      "diff_hunk" : "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r731592017",
      "id" : 731592017,
      "in_reply_to_id" : 730935387,
      "line" : 377,
      "node_id" : "PRRC_kwDOABII584rmzVR",
      "original_commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_line" : 377,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "src/rest.cpp",
      "position" : 79,
      "pull_request_review_id" : 782914911,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731592017/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-19T07:56:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731592017",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r732934750"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732934750"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\nstatic bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\r\n```",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-10-20T16:08:05Z",
      "diff_hunk" : "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r732934750",
      "id" : 732934750,
      "line" : 344,
      "node_id" : "PRRC_kwDOABII584rr7Je",
      "original_commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_line" : 344,
      "original_position" : 46,
      "original_start_line" : 343,
      "path" : "src/rest.cpp",
      "position" : 46,
      "pull_request_review_id" : 784707190,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732934750/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 343,
      "start_side" : "RIGHT",
      "updated_at" : "2021-10-20T16:58:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732934750",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r732947556"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732947556"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would it make sense to do some sanity testing on the returned object? For example:\r\n\r\n```suggestion\r\n        obj = self.test_rest_request(f\"/blockfilter/basic/{bb_hash}\", req_type=ReqType.BIN, ret_type=RetType.OBJ)\r\n        assert_greater_than(len(obj.read()), 0)\r\n```\r\n\r\nor perhaps even verify that the filter is the same as that returned by the `getblockfilter` RPC.",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-10-20T16:23:13Z",
      "diff_hunk" : "@@ -278,11 +278,14 @@ def run_test(self):\n         self.sync_all()\n         json_obj = self.test_rest_request(f\"/headers/5/{bb_hash}\")\n         assert_equal(len(json_obj), 5)  # now we should have 5 header objects\n+        json_obj = self.test_rest_request(f\"/blockfilterheaders/basic/5/{bb_hash}\")\n+        assert_equal(len(json_obj), 5)  # now we should have 5 filter header objects\n+        self.test_rest_request(f\"/blockfilter/basic/{bb_hash}\", req_type=ReqType.BIN, ret_type=RetType.OBJ)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r732947556",
      "id" : 732947556,
      "line" : 283,
      "node_id" : "PRRC_kwDOABII584rr-Rk",
      "original_commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_line" : 283,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "test/functional/interface_rest.py",
      "position" : 15,
      "pull_request_review_id" : 784707190,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732947556/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-20T16:58:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732947556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r732974076"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732974076"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Current style is to have the clause on the same line:\r\n\r\n```suggestion\r\n    if (!CheckWarmup(req)) return false;\r\n```\r\n\r\nor enclosed in braces:\r\n\r\n```suggestion\r\n    if (!CheckWarmup(req)) {\r\n        return false;\r\n    }\r\n```\r\n\r\nSame for `if (!CheckWarmup(req))` in `rest_block_filter()` below.",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-10-20T16:56:48Z",
      "diff_hunk" : "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r732974076",
      "id" : 732974076,
      "line" : 347,
      "node_id" : "PRRC_kwDOABII584rsEv8",
      "original_commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_line" : 347,
      "original_position" : 49,
      "original_start_line" : 346,
      "path" : "src/rest.cpp",
      "position" : 49,
      "pull_request_review_id" : 784707190,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732974076/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 346,
      "start_side" : "RIGHT",
      "updated_at" : "2021-10-20T16:58:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732974076",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r733031180"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733031180"
         }
      },
      "author_association" : "NONE",
      "body" : "From my experience (and e.g. [this stackoverflow reponse](https://stackoverflow.com/a/31261026)), in a RESTful API path parameters are used to represent resources, and query parameters are used to control how this resource is being filtered/sorted/... To my understanding, `<COUNT>` does not represent a resource but rather a control on how many blockfilterheader resources to retrieve.\r\n\r\nWhat do you think about changing the request into\r\n`GET /rest/blockfilterheaders/<FILTERTYPE>/<BLOCK-HASH>.<bin|hex|json>?count=<COUNT>`?",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-10-20T18:13:43Z",
      "diff_hunk" : "@@ -52,6 +52,20 @@ With the /notxdetails/ option JSON response will only contain the transaction ha\n Given a block hash: returns <COUNT> amount of blockheaders in upward direction.\n Returns empty if the block doesn't exist or it isn't in the active chain.\n \n+#### Blockfilter Headers\n+`GET /rest/blockfilterheaders/<FILTERTYPE>/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r733031180",
      "id" : 733031180,
      "line" : 56,
      "node_id" : "PRRC_kwDOABII584rsSsM",
      "original_commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_line" : 56,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "doc/REST-interface.md",
      "position" : 5,
      "pull_request_review_id" : 784838008,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733031180/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-20T18:14:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733031180",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I read this in the pr-review-club. I am still learning.",
      "created_at" : "2021-10-20T18:16:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-947919724",
      "id" : 947919724,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5844gBts",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/947919724/reactions"
      },
      "updated_at" : "2021-10-20T18:16:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/947919724",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/45839100?v=4",
         "events_url" : "https://api.github.com/users/amovfx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amovfx/followers",
         "following_url" : "https://api.github.com/users/amovfx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amovfx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amovfx",
         "id" : 45839100,
         "login" : "amovfx",
         "node_id" : "MDQ6VXNlcjQ1ODM5MTAw",
         "organizations_url" : "https://api.github.com/users/amovfx/orgs",
         "received_events_url" : "https://api.github.com/users/amovfx/received_events",
         "repos_url" : "https://api.github.com/users/amovfx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amovfx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amovfx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amovfx"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re-ack\r\n\r\nThis feature was roughly ready when the pull was opened more than two years ago. It's been held back on mostly non-behaviour changing \"nits\", which still haven't been addressed yet. I don't think they'll be addressed any time soon, so it might be better to fix them in a follow-up at this point. Going to merge to move this forward. ",
      "created_at" : "2021-12-20T08:00:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-997682927",
      "id" : 997682927,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5847d27v",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997682927/reactions"
      },
      "updated_at" : "2021-12-20T08:00:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997682927",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> It's been held back on mostly non-behaviour changing \"nits\", which still haven't been addressed yet. I don't think they'll be addressed any time soon, so it might be better to fix them in a follow-up at this point.\r\n\r\n@MarcoFalke I'm sure this wasn't your intention, but it seems very inconsistent that for most contributors PRs will be closed if review comments haven't been addressed, but in this case the PR was merged despite review comments not being addressed for many months. It shouldn't be the case that certain contributors can get their PRs merged even if they don't follow the project style guide or respond to review comments.\r\n\r\nI also disagree that https://github.com/bitcoin/bitcoin/pull/17631#discussion_r733031180 is a \"nit\". It's feedback on the interface design and changing it later would be an API break.",
      "created_at" : "2021-12-20T08:55:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-997722237",
      "id" : 997722237,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5847eAh9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997722237/reactions"
      },
      "updated_at" : "2021-12-20T08:55:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997722237",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">  It shouldn't be the case that certain contributors can get their PRs merged even if they don't follow the project style guide or respond to review comments.\r\n\r\nStyle-only comments are not mandatory to address. This has always been the case, unless the style issue is so \"severe\" that a linter enforces it. If there are any style issues here that I missed and should be blocking, someone should add a linter to enforce them. Though, I couldn't find any. \r\n\r\n> I also disagree that #17631 (comment) is a \"nit\". It's feedback on the interface design and changing it later would be an API break.\r\n\r\nApologies, my bad. I wasn't aware there is a suggestion that requests to change the behaviour.\r\n",
      "created_at" : "2021-12-20T09:03:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-997727874",
      "id" : 997727874,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5847eB6C",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997727874/reactions"
      },
      "updated_at" : "2021-12-20T09:03:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997727874",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Style-only comments are not mandatory to address. This has always been the case, unless the style issue is so \"severe\" that a linter enforces it. If there are any style issues here that I missed and should be blocking, someone should add a linter to enforce them. Though, I couldn't find any.\r\n\r\nI disagree - all review comments should be addressed, even if that only means responding with a comment \"I don't intend to change this because ...\". If we don't have a culture where all review comments are responded to, then it falls to the maintainers to make the decision about whether the ignored review comments are important or not, and sometimes important review comments fall through the gaps.",
      "created_at" : "2021-12-20T09:18:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-997741057",
      "id" : 997741057,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5847eFIB",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997741057/reactions"
      },
      "updated_at" : "2021-12-20T09:18:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997741057",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ok, again apologies for missing the comment(s). I've marked this \"Up for grabs\", so that someone can address the feedback before the next major release (23.0). If no one does, I'll probably revert the changes.",
      "created_at" : "2021-12-20T09:33:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-997753304",
      "id" : 997753304,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5847eIHY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997753304/reactions"
      },
      "updated_at" : "2021-12-20T09:33:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997753304",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r772326920"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772326920"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@TheBlueMatt: Any thoughts on the above?",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-12-20T12:31:53Z",
      "diff_hunk" : "@@ -52,6 +52,20 @@ With the /notxdetails/ option JSON response will only contain the transaction ha\n Given a block hash: returns <COUNT> amount of blockheaders in upward direction.\n Returns empty if the block doesn't exist or it isn't in the active chain.\n \n+#### Blockfilter Headers\n+`GET /rest/blockfilterheaders/<FILTERTYPE>/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r772326920",
      "id" : 772326920,
      "in_reply_to_id" : 733031180,
      "line" : 56,
      "node_id" : "PRRC_kwDOABII584uCMYI",
      "original_commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_line" : 56,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "doc/REST-interface.md",
      "position" : 5,
      "pull_request_review_id" : 836338048,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772326920/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-20T12:31:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772326920",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r772514100"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772514100"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think the reason for this PR to use `GET /rest/blockfilterheaders/<FILTERTYPE>/<COUNT>/<BLOCK-HASH><bin|hex|json>`  was that the [**blockheader** endpoint](https://github.com/bitcoin/bitcoin/blob/master/doc/REST-interface.md#blockheaders) already uses the same format. (`GET /rest/headers/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`)\r\n\r\n@stickies-v makes a good point but in my opinion staying consistent with the current API was the better move.",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-12-20T16:40:57Z",
      "diff_hunk" : "@@ -52,6 +52,20 @@ With the /notxdetails/ option JSON response will only contain the transaction ha\n Given a block hash: returns <COUNT> amount of blockheaders in upward direction.\n Returns empty if the block doesn't exist or it isn't in the active chain.\n \n+#### Blockfilter Headers\n+`GET /rest/blockfilterheaders/<FILTERTYPE>/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r772514100",
      "id" : 772514100,
      "in_reply_to_id" : 733031180,
      "line" : 56,
      "node_id" : "PRRC_kwDOABII584uC6E0",
      "original_commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_line" : 56,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "doc/REST-interface.md",
      "position" : 5,
      "pull_request_review_id" : 836601396,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772514100/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-20T16:40:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772514100",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "It also feels premature given my nack + alternative path to implementing this in https://github.com/bitcoin/bitcoin/pull/23309 not having been reviewed -- were it just my NACK and no alternate, I'd agree that perhpas it was sufficiently addressed, but it was my NACK + Alternative + Acks on that approach from > 1 contributor.",
      "created_at" : "2021-12-20T16:49:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-998098949",
      "id" : 998098949,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5847fcgF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998098949/reactions"
      },
      "updated_at" : "2021-12-20T16:49:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998098949",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r772521103"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772521103"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks for taking a look @dergoegge . I was thinking about this and assumed that this was done for consistency as well.",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-12-20T16:50:17Z",
      "diff_hunk" : "@@ -52,6 +52,20 @@ With the /notxdetails/ option JSON response will only contain the transaction ha\n Given a block hash: returns <COUNT> amount of blockheaders in upward direction.\n Returns empty if the block doesn't exist or it isn't in the active chain.\n \n+#### Blockfilter Headers\n+`GET /rest/blockfilterheaders/<FILTERTYPE>/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r772521103",
      "id" : 772521103,
      "in_reply_to_id" : 733031180,
      "line" : 56,
      "node_id" : "PRRC_kwDOABII584uC7yP",
      "original_commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_line" : 56,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "doc/REST-interface.md",
      "position" : 5,
      "pull_request_review_id" : 836611079,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772521103/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-20T16:50:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772521103",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I didn't see any NACK.\r\n\r\n![Screenshot 2021-12-20 at 17-50-57 Expose block filters over REST by TheBlueMatt Â· Pull Request #17631 Â· bitcoin bitcoin](https://user-images.githubusercontent.com/6399679/146803422-3effc257-ad4c-4ba6-91dc-0bb09734a295.png)\r\n\r\n\r\nI have no idea how to deal with this, but maybe it could make sense to re-NACK a pull request whenever there is a change (push)? Or maybe use the \"GitHub review\" and click the red cross, which might not be hidden?",
      "created_at" : "2021-12-20T16:55:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-998103204",
      "id" : 998103204,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5847fdik",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998103204/reactions"
      },
      "updated_at" : "2021-12-20T16:55:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998103204",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "And to comment on the content on the NACK: I don't see how this and #23309 are mutually exclusive.",
      "created_at" : "2021-12-20T16:56:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-998104275",
      "id" : 998104275,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5847fdzT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998104275/reactions"
      },
      "updated_at" : "2021-12-20T16:56:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998104275",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I agree with Marco that this has been basically ready for years, even if it might be imperfect. It's not too late for further improvements in followups, but blocking this on it was letting the perfect be the enemy of the good IMO.\r\n\r\nThat being said, it does seem to be a change in merge policy (IMO for the better), and should probably be discussed with the project and applied consistently.",
      "created_at" : "2021-12-20T18:00:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-998150822",
      "id" : 998150822,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5847fpKm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998150822/reactions"
      },
      "updated_at" : "2021-12-20T18:00:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998150822",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@MarcoFalke well it's a Concept Nack, so it doesn't get stale with changes (as opposed to an Approach Nack + Concept Ack).\r\n\r\nW.r.t mutually exclusive, the contention that  I was holding (and @practicalswift too I think?) is that a REST API exposed for unauthenticated users without a strong statement of the security model is probably something we shouldn't be maintaining or increasing dependency on for core, and a preference for doing it as a layer on top of a more strongly audited and maintained interface (JSON RPC) being superior. So extending the REST API and increasing dependency on it for consumers of Core is counter to the goal of removing it and replacing with 'userland' proxies.",
      "created_at" : "2021-12-20T18:42:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-998179500",
      "id" : 998179500,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5847fwKs",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998179500/reactions"
      },
      "updated_at" : "2021-12-20T18:42:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998179500",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@JeremyRubin I think the discussion whether to provide a wrapper, and then later whether or not to deprecate/remove the existing REST interface is mostly independent from the question of what features should be exposed by the REST interface (whether that's provided by bitcoind directly or by a wrapper). Whatever risks exists by having a REST interface in the first place aren't worsened by adding another method.\r\n\r\nI do agree the merging procedure followed here was dubious, though.",
      "created_at" : "2021-12-20T18:52:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-998185449",
      "id" : 998185449,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5847fxnp",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998185449/reactions"
      },
      "updated_at" : "2021-12-20T18:55:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998185449",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I do agree the merging procedure followed here was dubious, though.\r\n\r\nOk, maybe I am being blind, but can someone explain to me what was wrong about the merging procedure?\r\n\r\n**Did this have too little review?**\r\n\r\nI'd say no. There were:\r\n\r\n* Concept ACK laanwj https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559723792\r\n* Concept ACK jonasschnelli  https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-560159029\r\n* Concept ACK sipa https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-945039954\r\n* Nearly ACK jnewbery https://github.com/bitcoin/bitcoin/pull/17631#pullrequestreview-784707190\r\n* Review ACK naumenkogs https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-630288035\r\n* Review ACK meshcollider https://github.com/bitcoin/bitcoin/pull/17631#pullrequestreview-778070991\r\n* Review ACK myself https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-997682927\r\n* Review ACK dergoegge https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-945175070\r\n\r\n\r\nIf it is not possible to merge a pull request with 8 ACKs, then I honestly don't know how much review is needed to get anything merged. I expect that 99.8% of all pull request have less than 8 ACKs.\r\n\r\n**Was this merged before a comment should have been replied to?**\r\n\r\nYes, I missed the comment/question about the interface, and it should have been replied to before merge. Luckily it has been replied to after merge (and in my view resolved). The only unaddressed stuff now is refactoring nit comments.\r\n\r\nI don't think the merging procedure changed here. I still think that comments should be replied to before merge. However, I also think that style comments that haven't been replied to should not block a pull request indefinitely. If the overall direction of a pull request has received overall support (which this pull request did), then I think style-nits can be dropped or fixed in a follow-up. If the overall direction of a pull request is not agreed upon, or if the style-nits are rendering a follow-up to be a re-implementation, then I think it should not be merged (not applicable to this pull request).\r\n\r\n**Something else?**\r\n\r\nAgain, I am not seeing anything else wrong, so please elaborate.",
      "created_at" : "2021-12-21T09:17:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-998606141",
      "id" : 998606141,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5847hYU9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998606141/reactions"
      },
      "updated_at" : "2021-12-21T09:17:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998606141",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">>> can someone explain to me what was wrong about the merging procedure?\r\n\r\n>> Was this merged before a comment should have been replied to?\r\n\r\n> Yes\r\n\r\n@MarcoFalke - this is all I'm claiming - that review comments should be acknowledged and responded to before merge. The author doesn't have to agree with them or implement them, but if someone has taken the time to review the PR, the author should respond to that review before the PR is merged. That happens in 99% of PRs, and I don't see why this one should have been different.\r\n\r\nFor what it's worth, I agree with @stickies-v that we should make the REST API RESTful. I don't feel very strongly about it because I don't use the REST API myself, but I think the discussion should be had before merge.\r\n\r\nAnd to be clear, I think you do a fantastic job as a maintainer. In this instance you missed something, but it should never have been your responsibility to assess whether that comment **should** have been ignored. It's the author's responsibility to address all feedback on their PR.",
      "created_at" : "2021-12-21T10:07:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-998643956",
      "id" : 998643956,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5847hhj0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998643956/reactions"
      },
      "updated_at" : "2021-12-21T10:07:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998643956",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r773150826"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773150826"
         }
      },
      "author_association" : "NONE",
      "body" : "I agree that consistency is important, and in that light am happy to consider this comment as resolved on this PR. However, I think having just 1 prior case should not prevent us from changing course slightly and adopting better RESTful practices. I think this can nicely be done in a separate PR, so I'm happy to look into that and see if there's an elegant way to remain backwards compatible and still adopt/encourage best practices going forward, specifically on these `/headers/` and `/blockfilterheaders/` endpoints.",
      "commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "created_at" : "2021-12-21T13:49:13Z",
      "diff_hunk" : "@@ -52,6 +52,20 @@ With the /notxdetails/ option JSON response will only contain the transaction ha\n Given a block hash: returns <COUNT> amount of blockheaders in upward direction.\n Returns empty if the block doesn't exist or it isn't in the active chain.\n \n+#### Blockfilter Headers\n+`GET /rest/blockfilterheaders/<FILTERTYPE>/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r773150826",
      "id" : 773150826,
      "in_reply_to_id" : 733031180,
      "line" : 56,
      "node_id" : "PRRC_kwDOABII584uFVhq",
      "original_commit_id" : "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
      "original_line" : 56,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "doc/REST-interface.md",
      "position" : 5,
      "pull_request_review_id" : 837455926,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773150826/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-21T13:49:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773150826",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "FWIW - I've [marked](https://github.com/bitcoin/bitcoin/pull/17631#discussion_r773150826) my RESTful comment as resolved, since @dergoegge [pointed out](https://github.com/bitcoin/bitcoin/pull/17631#discussion_r772514100) this is consistent with another endpoint. As such, a follow-up PR is probably the more elegant way to go. I'm also happy to incorporate the other unaddressed style change comments on #17631 into this new PR.\r\n\r\nI appreciate everyone's efforts in both doing the merging and keeping the process honest. I agree that requiring an author's explicit acknowledgement (or dismissal) of all (non-spam) comments would, in my view, be preferable. ",
      "created_at" : "2021-12-21T14:08:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-998808625",
      "id" : 998808625,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5847iJwx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998808625/reactions"
      },
      "updated_at" : "2021-12-21T14:08:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998808625",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Looks like there is a follow up in #23836, so I've removed the \"up for grabs\" label again.",
      "created_at" : "2021-12-22T09:44:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-999433649",
      "id" : 999433649,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5847kiWx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/999433649/reactions"
      },
      "updated_at" : "2021-12-22T09:44:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/999433649",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "#24098 is now ready for review to address the last unaddressed comments (by myself) on this PR.",
      "created_at" : "2022-01-18T22:22:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-1015887548",
      "id" : 1015887548,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
      "node_id" : "IC_kwDOABII5848jTa8",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1015887548/reactions"
      },
      "updated_at" : "2022-01-18T22:22:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1015887548",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   }
]
