{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "Uninitialized read in `bumpfee(â¦)`.\r\n\r\nThe problem can be verified by running `test/functional/wallet_bumpfee.py --valgrind` (see PR #17633 for `--valgrind`).\r\n\r\nLive demo:\r\n\r\n```\r\n$ test/functional/wallet_bumpfee.py --valgrind --tracerpc\r\n2019-11-30T20:58:24.457000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_x66swmkm\r\nâ¦\r\n-152-> bumpfee [\"b8f5472384ca8f1b69c64f058db13d545e3d0b82aec4e777a77087830159ef11\", {\"fee_rate\": 0.0015}]\r\n2019-11-30T21:00:18.358000Z TestFramework (ERROR): Unexpected exception caught during testing\r\nâ¦\r\nConnectionRefusedError: [Errno 111] Connection refused\r\n$ cat /tmp/bitcoin_func_test_x66swmkm/node1/stderr/*\r\n==17181== Thread 15 b-httpworker.0:\r\n==17181== Conditional jump or move depends on uninitialised value(s)\r\n==17181==    at 0x8F00BC: ValueFromAmount(long const&) (core_write.cpp:21)\r\n==17181==    by 0x76FA48: bumpfee(JSONRPCRequest const&) (rpcwallet.cpp:3482)\r\n==17181==    by 0x375CE2: CRPCCommand::CRPCCommand(char const*, char const*, UniValue (*)(JSONRPCRequest const&), std::initializer_list<char const*>)::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}::operator()(JSONRPCRequest const&, UniValue&, bool) const (server.h:104)\r\n==17181==    by 0x375AE0: std::_Function_handler<bool (JSONRPCRequest const&, UniValue&, bool), CRPCCommand::CRPCCommand(char const*, char const*, UniValue (*)(JSONRPCRequest const&), std::initializer_list<char const*>)::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}>::_M_invoke(std::_Any_data const&, JSONRPCRequest const&, UniValue&, bool&&) (std_function.h:282)\r\n==17181==    by 0x16E0E0: std::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const (std_function.h:687)\r\n==17181==    by 0x165D3E: interfaces::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}::operator()(JSONRPCRequest const&, UniValue&, bool) const (chain.cpp:202)\r\n==17181==    by 0x165B00: std::_Function_handler<bool (JSONRPCRequest const&, UniValue&, bool), interfaces::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(CRPCCommand const&)::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}>::_M_invoke(std::_Any_data const&, JSONRPCRequest const&, UniValue&, bool&&) (std_function.h:282)\r\n==17181==    by 0x16E0E0: std::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const (std_function.h:687)\r\n==17181==    by 0x41FF47: ExecuteCommand(CRPCCommand const&, JSONRPCRequest const&, UniValue&, bool) (server.cpp:449)\r\n==17181==    by 0x41FBC2: CRPCTable::execute(JSONRPCRequest const&) const (server.cpp:432)\r\n==17181==    by 0x67771B: HTTPReq_JSONRPC(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (httprpc.cpp:190)\r\n==17181==    by 0x336249: std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), bool (*)(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (std_function.h:282)\r\nâ¦\r\n```\r\n\r\nThe following diff avoids the uninitialized read but is not a correct fix:\r\n\r\n```diff\r\ndiff --git a/src/wallet/rpcwallet.cpp b/src/wallet/rpcwallet.cpp\r\nindex d906f6ddf072..d09d08f05480 100644\r\n--- a/src/wallet/rpcwallet.cpp\r\n+++ b/src/wallet/rpcwallet.cpp\r\n@@ -3437,7 +3437,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\r\n \r\n \r\n     std::vector<std::string> errors;\r\n-    CAmount old_fee;\r\n+    CAmount old_fee = -1;\r\n     CAmount new_fee;\r\n     CMutableTransaction mtx;\r\n     feebumper::Result res;\r\n@@ -3479,7 +3479,9 @@ static UniValue bumpfee(const JSONRPCRequest& request)\r\n     }\r\n     UniValue result(UniValue::VOBJ);\r\n     result.pushKV(\"txid\", txid.GetHex());\r\n-    result.pushKV(\"origfee\", ValueFromAmount(old_fee));\r\n+    if (MoneyRange(old_fee)) {\r\n+        result.pushKV(\"origfee\", ValueFromAmount(old_fee));\r\n+    }\r\n     result.pushKV(\"fee\", ValueFromAmount(new_fee));\r\n     UniValue result_errors(UniValue::VARR);\r\n     for (const std::string& error : errors) {\r\n```",
   "closed_at" : "2019-12-03T15:28:32Z",
   "closed_by" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
      "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
      "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/MarcoFalke",
      "id" : 6399679,
      "login" : "MarcoFalke",
      "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
      "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
      "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
      "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/MarcoFalke"
   },
   "comments" : 1,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17642/comments",
   "created_at" : "2019-12-01T10:07:31Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17642/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/17642",
   "id" : 530706175,
   "labels" : [
      {
         "color" : "FBBAAB",
         "default" : false,
         "description" : null,
         "id" : 64585,
         "name" : "Bug",
         "node_id" : "MDU6TGFiZWw2NDU4NQ==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17642/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU1MzA3MDYxNzU=",
   "number" : 17642,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "wallet: Uninitialized read in bumpfee(â¦)",
   "updated_at" : "2019-12-03T15:28:32Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17642",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   }
}
