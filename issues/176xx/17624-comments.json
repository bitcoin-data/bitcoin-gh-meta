[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17557](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17557.html) (util: Refactor message hashing into a utility function by jkczyz)\n* [#17399](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17399.html) (validation: Templatize ValidationState instead of subclassing by jkczyz)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-11-27T22:33:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17624#issuecomment-559273283",
      "id" : 559273283,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17624",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTI3MzI4Mw==",
      "updated_at" : "2019-11-27T22:33:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559273283",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 73b96c94cb6c2afdee7f151768a96944ecaf9d9b\r\n\r\nGreat catch @practicalswift .  Are the `else if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS)` and `else` branches really not covered by any of our tests? If so, that seems like a big hole in our testing. We should add tests for duplicate TX messages received.",
      "created_at" : "2019-11-28T03:40:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17624#issuecomment-559329172",
      "id" : 559329172,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17624",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTMyOTE3Mg==",
      "updated_at" : "2019-11-28T03:40:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559329172",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 73b96c94cb6c2afdee7f151768a96944ecaf9d9b, thanks for discovering and reporting this before it ended up in a release.\r\n\r\n(travis fail is unrelated, restarted â¦)",
      "created_at" : "2019-11-28T08:56:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17624#issuecomment-559400659",
      "id" : 559400659,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17624",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTQwMDY1OQ==",
      "updated_at" : "2019-11-28T08:58:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559400659",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jnewbery \r\n\r\nBoth branches are covered by our functional tests (specifically `test/functional/p2p_segwit.py`), but unfortunately we're not running the functional tests under MemorySanitizer or Valgrind :(\r\n\r\nI found this issue after observing some weirdness on a `mainnet` when running a live node with MemorySanitizer instrumentation enabled. Receiving duplicate transactions on `mainnet` happens quite regularly. I then reproduced the issue on `regtest`.\r\n\r\nSince discovering the issue on `mainnet` I've \"rediscovered\" it 1.) using static analysis tooling (Coverity is one example), 2.) by running the ordinary functional tests under MemorySanitizer, and 3.) by running the ordinary functional tests under Valgrind.\r\n\r\nMy personal view is that we really really underuse the excellent modern tooling that is typically used in security critical C++ projects to guard against introduction of bugs like this. I find that a bit surprising and I promise to do my best to help improve that situation going forward :)\r\n\r\n---\r\n\r\n**Rediscovery 1. Finding the issue using static analysis (Coverity in this example)**\r\n\r\n```\r\n________________________________________________________________________________________________________\r\n*** CID 350378:  Uninitialized members  (UNINIT_CTOR)\r\n/src/consensus/validation.h: 117 in TxValidationState::TxValidationState()()\r\n111     };\r\n112     \r\n113     inline ValidationState::~ValidationState() {};\r\n114     \r\n115     class TxValidationState : public ValidationState {\r\n116     private:\r\n>>>     CID 350378:  Uninitialized members  (UNINIT_CTOR)\r\n>>>     The compiler-generated constructor for this class does not initialize \"m_result\".\r\n117         TxValidationResult m_result;\r\n118     public:\r\n119         bool Invalid(TxValidationResult result,\r\n120                      const std::string &reject_reason=\"\",\r\n121                      const std::string &debug_message=\"\")\r\n122         {\r\n** CID 350377:  Uninitialized variables  (UNINIT)\r\n________________________________________________________________________________________________________\r\n*** CID 350377:  Uninitialized variables  (UNINIT)\r\n/src/net_processing.cpp: 2526 in ProcessMessage(CNode *, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> &, CDataStream &, long, const CChainParams &, CConnman *, BanMan *, const std::atomic<bool> &)()\r\n2520                     tx.GetHash().ToString(),\r\n2521                     mempool.size(), mempool.DynamicMemoryUsage() / 1000);\r\n2522     \r\n2523                 // Recursively process any orphan transactions that depended on this one\r\n2524                 ProcessOrphanTx(connman, pfrom->orphan_work_set, lRemovedTxn);\r\n2525             }\r\n>>>     CID 350377:  Uninitialized variables  (UNINIT)\r\n>>>     Using uninitialized value \"state.m_result\" when calling \"GetResult\".\r\n2526             else if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS)\r\n2527             {\r\n2528                 bool fRejectedParents = false; // It may be the case that the orphans parents have all been rejected\r\n2529                 for (const CTxIn& txin : tx.vin) {\r\n2530                     if (recentRejects->contains(txin.prevout.hash)) {\r\n2531                         fRejectedParents = true;\r\n** CID 350376:  Uninitialized members  (UNINIT_CTOR)\r\n/src/consensus/validation.h: 132 in BlockValidationState::BlockValidationState()()\r\n```\r\n\r\n**Rediscovery 2. Finding the issue using dynamic analysis (MemorySanitizer)**\r\n\r\nRunning `test/functional/test_runner.py` with `bitcoind` compiled with MSAN instrumentation:\r\n\r\n```\r\n$ test/functional/test_runner.py\r\nâ¦\r\n2020-01-02T04:05:06.123456Z TestFramework (INFO): Subtest: test_non_standard_witness_blinding (Segwit active = True)\r\n2020-01-02T04:05:06.123456Z TestFramework (ERROR): Assertion failed\r\nâ¦\r\nSUMMARY: MemorySanitizer: use-of-uninitialized-value\r\n```\r\n\r\n**Rediscovery 3. Finding the issue using dynamic analysis (Valgrind)**\r\n\r\nRunning `BITCOIND=bitcoind_valgrind test/functional/test_runner.py` where  `bitcoind_valgrind` is a shell script wrapper doing `valgrind -q --exit-on-first-error=yes --error-exitcode=1 --gen-suppressions=all --leak-check=full --show-leak-kinds=all --suppressions=contrib/valgrind.supp src/bitcoind \"$@\"`:\r\n\r\n```\r\n$ BITCOIND=bitcoind_valgrind test/functional/test_runner.py\r\nâ¦\r\n2020-01-02T04:05:06.123456Z TestFramework (INFO): Subtest: test_non_standard_witness_blinding (Segwit active = True)\r\n2020-01-02T04:05:06.123456Z TestFramework (ERROR): Assertion failed\r\nâ¦\r\n==47281== Conditional jump or move depends on uninitialised value(s)\r\n```",
      "created_at" : "2019-11-28T09:39:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17624#issuecomment-559418107",
      "id" : 559418107,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17624",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1OTQxODEwNw==",
      "updated_at" : "2019-11-28T09:39:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559418107",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
