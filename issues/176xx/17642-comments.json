[
   {
      "author_association" : "MEMBER",
      "body" : "A demo of the unitialized read:\r\n\r\n```\r\n$ test/functional/uninitialized_orig_fee.py -l WARNING\r\norigfee: 1401472.87914520\r\n$ test/functional/uninitialized_orig_fee.py -l WARNING\r\norigfee: 1400508.05266608\r\n$ test/functional/uninitialized_orig_fee.py -l WARNING\r\norigfee: 1404964.24912920\r\n$ test/functional/uninitialized_orig_fee.py -l WARNING\r\norigfee: 1E-8\r\n$ test/functional/uninitialized_orig_fee.py -l WARNING\r\norigfee: 1398604.42601496\r\n```\r\n\r\nCode:\r\n\r\n```\r\n#!/usr/bin/env python3\r\n\r\nfrom decimal import Decimal\r\n\r\nfrom test_framework.messages import BIP125_SEQUENCE_NUMBER\r\nfrom test_framework.test_framework import BitcoinTestFramework\r\nfrom test_framework.util import connect_nodes\r\n\r\nMIN_RELAY_FEE = Decimal(\"0.00000141\")\r\nFEE_RATE = 0.0015\r\n\r\nSEND_AMOUNT_1 = Decimal(\"49\")\r\nSEND_AMOUNT_2 = Decimal(\"48\")\r\n\r\n\r\nclass UninitializedOrigFeeTest(BitcoinTestFramework):\r\n    def set_test_params(self):\r\n        self.num_nodes = 2\r\n        self.setup_clean_chain = True\r\n        self.extra_args = [\r\n            [\"-walletrbf={}\".format(i), \"-mintxfee=0.00002\", \"-addresstype=bech32\"]\r\n            for i in range(self.num_nodes)\r\n        ]\r\n\r\n    def run_test(self):\r\n        connect_nodes(self.nodes[0], 1)\r\n        self.sync_all()\r\n        peer_node, rbf_node = self.nodes\r\n        rbf_node_address = rbf_node.getnewaddress()\r\n        peer_node.generate(101)\r\n        self.sync_all()\r\n        peer_node.sendtoaddress(rbf_node_address, SEND_AMOUNT_1)\r\n        self.sync_all()\r\n        peer_node.generate(1)\r\n        self.sync_all()\r\n        dest_address = peer_node.getnewaddress()\r\n        tx_input = dict(\r\n            sequence=BIP125_SEQUENCE_NUMBER,\r\n            **next(u for u in rbf_node.listunspent() if u[\"amount\"] == SEND_AMOUNT_1)\r\n        )\r\n        destinations = {dest_address: SEND_AMOUNT_2}\r\n        destinations[rbf_node.getrawchangeaddress()] = (\r\n            SEND_AMOUNT_1 - SEND_AMOUNT_2 - MIN_RELAY_FEE\r\n        )\r\n        rawtx = rbf_node.createrawtransaction([tx_input], destinations)\r\n        signedtx = rbf_node.signrawtransactionwithwallet(rawtx)\r\n        rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\r\n        self.sync_mempools((rbf_node, peer_node))\r\n        bumped_tx = rbf_node.bumpfee(rbfid, {\"fee_rate\": FEE_RATE})\r\n        print(\"origfee: {}\".format(bumped_tx[\"origfee\"]))\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    UninitializedOrigFeeTest().main()\r\n```",
      "created_at" : "2019-12-02T07:16:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/17642#issuecomment-560264963",
      "id" : 560264963,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17642",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2MDI2NDk2Mw==",
      "updated_at" : "2019-12-02T07:16:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/560264963",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
