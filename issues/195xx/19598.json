{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "NONE",
   "body" : "ok so, in my effort to create a fullnode from scratch both for learning purpose and need (not a topic for discussion, thanks), I was looking at the code that check Merkle Root to not be vulnerable to CVE-2012-2459.\r\n\r\nThat vulnerability basically allows you to create a block that has a valid merkle root but contains duplicate transactions, causing a node that receive such block before the correct one, to be stuck on a fork (because that block will be flagged as incorrect and having the same hash of a correct block will prevent the node to ask again for that block, causing a node to be stuck.\r\n\r\nAnyway, this is an old CVE that was fixed back in 2012 and code changed during time.\r\nNow in bitcoin core the code is not that pretty and the method to compute merkle root are polluted from a boolean parameter that when read back reflects if the block has been mutated (malleated) or not.\r\n\r\nThe code is this\r\n```\r\nuint256 ComputeMerkleRoot(std::vector<uint256> hashes, bool* mutated) {\r\n    bool mutation = false;\r\n    while (hashes.size() > 1) {\r\n        if (mutated) {\r\n            for (size_t pos = 0; pos + 1 < hashes.size(); pos += 2) {\r\n                if (hashes[pos] == hashes[pos + 1]) mutation = true;\r\n            }\r\n        }\r\n        if (hashes.size() & 1) {\r\n            hashes.push_back(hashes.back());\r\n        }\r\n        SHA256D64(hashes[0].begin(), hashes[0].begin(), hashes.size() / 2);\r\n        hashes.resize(hashes.size() / 2);\r\n    }\r\n    if (mutated) *mutated = mutation;\r\n    if (hashes.size() == 0) return uint256();\r\n    return hashes[0];\r\n}\r\n```\r\n\r\nnow thinking about the problem, I think I found a better approach that is O(log n) and allows to have a better code too (without having to pass the `mutated` flag around)... if it works and the logic isn't flawled... so I'd like to know your thought about this.\r\nmy paint skill can show you some of the logic:\r\n\r\n[![\\[12:37\\]][1]][1]\r\nA, B, C... etc... are transactions\r\n\r\nthe vertical line is what I call \"safe point\", basically all transactions before that safe point are guaranteed to be not duplicable (this is one of the assumption I do and one thing to check if it's correct)\r\n\r\nthen, based on how merkle root is computed and how the CVE uses that to do nasty things, you can see some example of malleated blocks\r\n\r\nI created then a gist, containing a LINQPad code that can be run as it is and produce outputs to see if the logc is correct and can spot malleated blocks.\r\n\r\n\r\nhttps://gist.github.com/MithrilMan/27985e4f5bcc3853e792aa39631b9647\r\n\r\n\r\nthis is an output example of that gist\r\n\r\n[![enter image description here][2]][2]\r\n\r\nThe core logic relies into checking the last transaction against the previous, moving exponentially to the left at each iteration (see the picture with the vertical blue arrows showing which element it checks, or see the linqpad result where it's explicitly detailed)\r\n\r\nI handle both the cases where the tx count is even or odd.\r\nTo me it seems to work but would like to have some more eyes on that to see if the logic sounds correct or not.\r\nNote how for 9000 tx I have just to compare 14 transactions instead of thousands like current bitcoin code is doing.\r\nApart from that in my case it has another pros that allow me to split the markle computation and markle cve check in two different places, without having to use a solution like that `mutated` boolean parameter\r\n\r\n(actually I can't setup an environment to check if my intuition is correct and benchmark it so I can't provide numbers, but I'm more interested about the check logic itself)\r\n\r\n  [1]: https://i.stack.imgur.com/b6BuM.png\r\n  [2]: https://i.stack.imgur.com/go0WH.png",
   "closed_at" : "2020-09-20T13:19:30Z",
   "closed_by" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
      "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
      "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/MarcoFalke",
      "id" : 6399679,
      "login" : "MarcoFalke",
      "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
      "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
      "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
      "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/MarcoFalke"
   },
   "comments" : 8,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19598/comments",
   "created_at" : "2020-07-27T11:40:09Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19598/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/19598",
   "id" : 666227827,
   "labels" : [
      {
         "color" : "7cf575",
         "default" : false,
         "description" : null,
         "id" : 64583,
         "name" : "Feature",
         "node_id" : "MDU6TGFiZWw2NDU4Mw==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Feature"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19598/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU2NjYyMjc4Mjc=",
   "number" : 19598,
   "performed_via_github_app" : null,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "CVE-2012-2459, possible code and performance improvement",
   "updated_at" : "2020-09-20T13:19:30Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19598",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/5107375?v=4",
      "events_url" : "https://api.github.com/users/MithrilMan/events{/privacy}",
      "followers_url" : "https://api.github.com/users/MithrilMan/followers",
      "following_url" : "https://api.github.com/users/MithrilMan/following{/other_user}",
      "gists_url" : "https://api.github.com/users/MithrilMan/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/MithrilMan",
      "id" : 5107375,
      "login" : "MithrilMan",
      "node_id" : "MDQ6VXNlcjUxMDczNzU=",
      "organizations_url" : "https://api.github.com/users/MithrilMan/orgs",
      "received_events_url" : "https://api.github.com/users/MithrilMan/received_events",
      "repos_url" : "https://api.github.com/users/MithrilMan/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/MithrilMan/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/MithrilMan/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/MithrilMan"
   }
}
