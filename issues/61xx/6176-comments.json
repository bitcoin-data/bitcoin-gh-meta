[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r30901955"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30901955"
         }
      },
      "body" : "Would it not be possible to rewrite/adapt this test so it would conform to other `qa/rpc-tests/*` and would therefore use the same framework?",
      "commit_id" : "f3044fd191505253e7914916c784235698514e1e",
      "created_at" : "2015-05-22T14:57:43Z",
      "diff_hunk" : "@@ -0,0 +1,315 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test replace-by-fee\n+#\n+\n+import os\n+import sys\n+\n+# Add python-bitcoinlib to module search path:\n+sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinlib\"))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r30901955",
      "id" : 30901955,
      "original_commit_id" : "a4d1ddae217266f594fd2a2b4495bfede133d847",
      "original_position" : 14,
      "path" : "qa/replace-by-fee/replace-by-fee-tests.py",
      "position" : 14,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176",
      "updated_at" : "2015-06-22T04:57:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30901955",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r30902489"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30902489"
         }
      },
      "body" : "Sure, but that framework kinda sucks due to the lack of a good python Bitcoin library. Also, like I said above, I know I'll be backporting it so I needed a stand-alone set of tests that I could test the backports against.",
      "commit_id" : "f3044fd191505253e7914916c784235698514e1e",
      "created_at" : "2015-05-22T15:02:41Z",
      "diff_hunk" : "@@ -0,0 +1,315 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test replace-by-fee\n+#\n+\n+import os\n+import sys\n+\n+# Add python-bitcoinlib to module search path:\n+sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), \"python-bitcoinlib\"))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r30902489",
      "id" : 30902489,
      "original_commit_id" : "a4d1ddae217266f594fd2a2b4495bfede133d847",
      "original_position" : 14,
      "path" : "qa/replace-by-fee/replace-by-fee-tests.py",
      "position" : 14,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176",
      "updated_at" : "2015-06-22T04:57:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30902489",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r30902625"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30902625"
         }
      },
      "body" : "Empty code block?",
      "commit_id" : "f3044fd191505253e7914916c784235698514e1e",
      "created_at" : "2015-05-22T15:03:58Z",
      "diff_hunk" : "@@ -1051,8 +1152,26 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return error(\"AcceptToMemoryPool: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s\", hash.ToString());\n         }\n \n+        // Are we replacing an existing transaction?\n+        if (pool.exists(hash))\n+        {\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r30902625",
      "id" : 30902625,
      "original_commit_id" : "a4d1ddae217266f594fd2a2b4495bfede133d847",
      "original_position" : 134,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176",
      "updated_at" : "2015-06-22T04:57:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30902625",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r30903649"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30903649"
         }
      },
      "body" : "Lol, I must be blind... That's stub code replaced by the lines just below it; fixed, thanks!",
      "commit_id" : "f3044fd191505253e7914916c784235698514e1e",
      "created_at" : "2015-05-22T15:14:33Z",
      "diff_hunk" : "@@ -1051,8 +1152,26 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return error(\"AcceptToMemoryPool: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s\", hash.ToString());\n         }\n \n+        // Are we replacing an existing transaction?\n+        if (pool.exists(hash))\n+        {\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r30903649",
      "id" : 30903649,
      "original_commit_id" : "a4d1ddae217266f594fd2a2b4495bfede133d847",
      "original_position" : 134,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176",
      "updated_at" : "2015-06-22T04:57:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30903649",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r30908342"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30908342"
         }
      },
      "body" : "I believe it shouldn't be possible for there to be more than one transaction in ```ltxConflicted``` here, is that right?  Perhaps clarifying the comment at line 1155 (or adding an assertion about the size of this list) would be helpful.",
      "commit_id" : "f3044fd191505253e7914916c784235698514e1e",
      "created_at" : "2015-05-22T16:08:55Z",
      "diff_hunk" : "@@ -1051,8 +1152,21 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return error(\"AcceptToMemoryPool: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s\", hash.ToString());\n         }\n \n+        // Remove conflicting transaction(s) from mempool (if any)\n+        list<CTransaction> ltxConflicted;\n+        pool.removeConflicts(tx, ltxConflicted);\n+\n         // Store transaction in memory\n         pool.addUnchecked(hash, entry, !IsInitialBlockDownload());\n+\n+        BOOST_FOREACH(const CTransaction &txConflicted, ltxConflicted)\n+        {\n+            LogPrint(\"mempool\", \"replacing tx %s with %s for %s BTC additional fees, %d delta bytes\\n\",\n+                     txConflicted.GetHash().ToString(),\n+                     hash.ToString(),\n+                     FormatMoney(nFees - nConflictingFees),\n+                     (int)nSize - (int)nConflictingSize);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r30908342",
      "id" : 30908342,
      "original_commit_id" : "fb472276b103ecabde5f6cd54a7a7adf8c2896c8",
      "original_position" : 144,
      "path" : "src/main.cpp",
      "position" : 187,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176",
      "updated_at" : "2015-06-22T04:57:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30908342",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r30911637"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30911637"
         }
      },
      "body" : "The mempool isn't locked the whole time, so I believe there's a small chance there could be more than one conflicting transaction. (never mind future design changes!)\r\n\r\nUpdated comment.",
      "commit_id" : "f3044fd191505253e7914916c784235698514e1e",
      "created_at" : "2015-05-22T16:52:51Z",
      "diff_hunk" : "@@ -1051,8 +1152,21 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return error(\"AcceptToMemoryPool: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s\", hash.ToString());\n         }\n \n+        // Remove conflicting transaction(s) from mempool (if any)\n+        list<CTransaction> ltxConflicted;\n+        pool.removeConflicts(tx, ltxConflicted);\n+\n         // Store transaction in memory\n         pool.addUnchecked(hash, entry, !IsInitialBlockDownload());\n+\n+        BOOST_FOREACH(const CTransaction &txConflicted, ltxConflicted)\n+        {\n+            LogPrint(\"mempool\", \"replacing tx %s with %s for %s BTC additional fees, %d delta bytes\\n\",\n+                     txConflicted.GetHash().ToString(),\n+                     hash.ToString(),\n+                     FormatMoney(nFees - nConflictingFees),\n+                     (int)nSize - (int)nConflictingSize);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r30911637",
      "id" : 30911637,
      "original_commit_id" : "fb472276b103ecabde5f6cd54a7a7adf8c2896c8",
      "original_position" : 144,
      "path" : "src/main.cpp",
      "position" : 187,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176",
      "updated_at" : "2015-06-22T04:57:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30911637",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "I think we need to add a check that the replacing transaction isn't spending an output of the to-be-replaced transaction; I just wrote up a quick test and it looks to me like this would cause an orphan transaction to enter the mempool.",
      "created_at" : "2015-05-23T10:04:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-104877829",
      "id" : 104877829,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6176",
      "updated_at" : "2015-05-23T10:04:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/104877829",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "@sdaftuar Nice catch! Fixed.",
      "created_at" : "2015-05-23T16:14:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-104918678",
      "id" : 104918678,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6176",
      "updated_at" : "2015-05-23T16:14:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/104918678",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "Should also ensure that no inputs have been removed or changed (other than scriptsigs) -- only added.\r\n\r\nOtherwise, the semantics change for the original signers.  Imagine a tx with two inputs from different parties.  Should it be easy for party 1 to be able to eliminate party 2 as a contributor of funds?  It's not difficult to imagine real-world consequences to not having contributed to the transaction. tx-level attributes like nLocktime should not change either.\r\n\r\nThe result would be something very like CPFP, but with the new inputs and outputs merged into the original tx, saving space and tx count.",
      "created_at" : "2015-05-26T18:40:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-105630255",
      "id" : 105630255,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6176",
      "updated_at" : "2015-05-26T18:40:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/105630255",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4284124?v=3",
         "events_url" : "https://api.github.com/users/dgenr8/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dgenr8/followers",
         "following_url" : "https://api.github.com/users/dgenr8/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dgenr8/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dgenr8",
         "id" : 4284124,
         "login" : "dgenr8",
         "organizations_url" : "https://api.github.com/users/dgenr8/orgs",
         "received_events_url" : "https://api.github.com/users/dgenr8/received_events",
         "repos_url" : "https://api.github.com/users/dgenr8/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dgenr8/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dgenr8"
      }
   },
   {
      "body" : "I don't see a problem with removing inputs, but perhaps we should consider an additional requirement that any inputs not in the original transaction must also not be in the mempool (and therefore must already be confirmed).\r\n\r\nI think the idea should be that the replacing-transaction is more likely to be confirmed than the previous transaction.  If the replacing transaction has slightly higher fees but adds an input that depends on an unlikely-to-be-confirmed transaction, then a miner might prefer to not do the replacement.",
      "created_at" : "2015-05-26T19:30:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-105642248",
      "id" : 105642248,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6176",
      "updated_at" : "2015-05-26T19:30:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/105642248",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r31074514"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31074514"
         }
      },
      "body" : "Mostly an fyi after looking at this more: despite the mempool lock not being held the whole time, cs_main is held, and that seems important for a preventing a race condition (otherwise the result of ```view.HaveInputs()``` at line 1029 could have changed by the time you get to ```pool.addUnchecked()``` at line 1182)...  Anyway, I don't think there can be more than one conflicting transaction.",
      "commit_id" : "f3044fd191505253e7914916c784235698514e1e",
      "created_at" : "2015-05-26T20:13:26Z",
      "diff_hunk" : "@@ -1051,8 +1152,21 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return error(\"AcceptToMemoryPool: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s\", hash.ToString());\n         }\n \n+        // Remove conflicting transaction(s) from mempool (if any)\n+        list<CTransaction> ltxConflicted;\n+        pool.removeConflicts(tx, ltxConflicted);\n+\n         // Store transaction in memory\n         pool.addUnchecked(hash, entry, !IsInitialBlockDownload());\n+\n+        BOOST_FOREACH(const CTransaction &txConflicted, ltxConflicted)\n+        {\n+            LogPrint(\"mempool\", \"replacing tx %s with %s for %s BTC additional fees, %d delta bytes\\n\",\n+                     txConflicted.GetHash().ToString(),\n+                     hash.ToString(),\n+                     FormatMoney(nFees - nConflictingFees),\n+                     (int)nSize - (int)nConflictingSize);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r31074514",
      "id" : 31074514,
      "original_commit_id" : "fb472276b103ecabde5f6cd54a7a7adf8c2896c8",
      "original_position" : 144,
      "path" : "src/main.cpp",
      "position" : 187,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176",
      "updated_at" : "2015-06-22T04:57:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31074514",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "@sdaftuar That's an interesting point. You're right that just forcing the input to be confirmed works; a more sophisticated - but still fairly easy to implement - approach would be to to have the mempool track the sum fee of transactions' parents and reject the replacement if you're going from a higher fee/KB parent to a lower one.\r\n\r\nHaving said that, I'm don't think you can really create an attack out of this: in either case the attacker is limited by the min-relay-fee, so they could have always done an attack by just broadcasting a long chain of transactions anyway.\r\n\r\nAnyway, I can't think of any applications other than adding inputs to transactions signed with SIGHASH_SINGLE where restricting new inputs to be confirmed would be a major limitation.",
      "created_at" : "2015-05-27T01:14:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-105709000",
      "id" : 105709000,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6176",
      "updated_at" : "2015-05-27T01:14:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/105709000",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "@dgenr8 re: nLockTime, we only allow transactions into the mempool if they're final, in which case the exact nLockTime value is irrelevant; I don't think we should bend over backwards to accommodate weird smart contract protocols, particularly when it's easy to design them such that eliminating a contributor of funds from the transaction means the \"thing\" that was meant to happen doesn't happen. In all the smart contract stuff I've worked on the natural outcome of party #1 eliminating party #2 from being an input simply means that they've decided to \"purchase\" the thing/contract/right/whatever in question all by themselves rather than with the assistance of others.\r\n\r\nI didn't write it up in my FSS RBF writeup, but being able to replace transaction inputs rather than simply add to the vin makes fee bumping significantly more efficient in many scenarios; I'll write that up later on the -dev mailing list.",
      "created_at" : "2015-05-27T01:19:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-105709406",
      "id" : 105709406,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6176",
      "updated_at" : "2015-05-27T01:19:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/105709406",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "@petertodd For a fee increase, there is no need to expose to deletion inputs in a transaction with inputs from multiple parties, which cannot be distinguished from a transaction whose inputs are all owned by a single party. (A tx with exactly one input can't conflict with a 1-input replacement if it increases the fee, given the restrictions on changes to outputs).\r\n\r\nYou're right about nLocktime, but there is simply no need for it to be changed to accomplish a fee bump.\r\n\r\nThis is a NACK for me unless it sticks to only what is necessary to allow a fee bump without otherwise altering the effects of the transaction replaced. IMO economizing on number of inputs is not a good enough reason.\r\n",
      "created_at" : "2015-05-27T04:20:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-105750419",
      "id" : 105750419,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6176",
      "updated_at" : "2015-05-27T23:06:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/105750419",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4284124?v=3",
         "events_url" : "https://api.github.com/users/dgenr8/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dgenr8/followers",
         "following_url" : "https://api.github.com/users/dgenr8/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dgenr8/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dgenr8",
         "id" : 4284124,
         "login" : "dgenr8",
         "organizations_url" : "https://api.github.com/users/dgenr8/orgs",
         "received_events_url" : "https://api.github.com/users/dgenr8/received_events",
         "repos_url" : "https://api.github.com/users/dgenr8/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dgenr8/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dgenr8"
      }
   },
   {
      "body" : "@dgenr8 With CLTV you may need to set nLockTime on a transaction that previous had it unset to accomplish a fee bump; spending an input may require nLockTime to be set. Equally there are 2fa wallet cases where nLockTime must be set. Allowing nLockTime to be increased by the replacement fits well with the fee-sniping protection added by https://github.com/petertodd/bitcoin/commit/ba7fcc8de06602576ab6a5911879d3d8df80d36a\r\n\r\nRe: cost savings, I [posted them](http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg07868.html) to the mailing list. Cost savings in one common example are %34\r\n\r\nIn any case, we'll see if anyone else raises any objections to this aspect of the patch; @gmaxwell has already stated he doesn't see any issue: http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg07846.html http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg07860.html",
      "created_at" : "2015-05-27T07:32:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-105799414",
      "id" : 105799414,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6176",
      "updated_at" : "2015-05-27T07:32:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/105799414",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "@petertodd  I agree comparing the total fee/kb with all parent tx's ought to address the issue, but I wasn't sure if implementing that would be worth the complexity, mainly because CPFP hasn't yet been merged.  But either approach seems fine to me.\r\n\r\nAnyway I also don't see this as an attack vector, more like a way to prevent a user from accidentally RBF'ing to a higher fee tx that has a lower chance of confirming, then having to RBF to a yet-higher-fee to correct the error (assuming the error is even noticed).",
      "created_at" : "2015-05-27T13:43:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-105915255",
      "id" : 105915255,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6176",
      "updated_at" : "2015-05-27T13:43:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/105915255",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "@sdaftuar Here's a new version with the additional restriction that additional inputs must be confirmed.",
      "created_at" : "2015-06-06T02:41:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-109506765",
      "id" : 109506765,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6176",
      "updated_at" : "2015-06-06T02:41:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/109506765",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "@petertodd While I really appreciate you thinking to cc me on this review please do not expect one from me. I've decided to no longer work on bitcoin-related projects nor participate further in the community.",
      "created_at" : "2015-06-20T20:23:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-113817547",
      "id" : 113817547,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6176",
      "updated_at" : "2015-06-20T20:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/113817547",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4391003?v=3",
         "events_url" : "https://api.github.com/users/aalness/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aalness/followers",
         "following_url" : "https://api.github.com/users/aalness/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aalness/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aalness",
         "id" : 4391003,
         "login" : "aalness",
         "organizations_url" : "https://api.github.com/users/aalness/orgs",
         "received_events_url" : "https://api.github.com/users/aalness/received_events",
         "repos_url" : "https://api.github.com/users/aalness/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aalness/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aalness/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aalness"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r32888773"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32888773"
         }
      },
      "body" : "You could avoid checking each vout sequentially by checking mapNextTx.lower_bound(COutPoint(hashConflicting, 0))",
      "commit_id" : "f3044fd191505253e7914916c784235698514e1e",
      "created_at" : "2015-06-20T22:30:35Z",
      "diff_hunk" : "@@ -912,16 +912,121 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     if (pool.exists(hash))\n         return false;\n \n+    uint256 hashConflicting;\n+    CAmount nConflictingFees = 0;\n+    size_t nConflictingSize = 0;\n+\n     // Check for conflicts with in-memory transactions\n     {\n     LOCK(pool.cs); // protect pool.mapNextTx\n+    const CTransaction *ptxConflicting = NULL;\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n     {\n         COutPoint outpoint = tx.vin[i].prevout;\n         if (pool.mapNextTx.count(outpoint))\n         {\n-            // Disable replacement feature for now\n-            return false;\n+            if (ptxConflicting)\n+            {\n+                // For simplicity we only replace transactions on a 1-for-1 basis.\n+                if (pool.mapNextTx[outpoint].ptx != ptxConflicting)\n+                    return state.DoS(0, error(\"AcceptToMemoryPool: replacement %s conflicts with more than one other transaction\",\n+                                              hash.ToString()),\n+                                     REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+            }\n+            else\n+            {\n+                ptxConflicting = pool.mapNextTx[outpoint].ptx;\n+                hashConflicting = ptxConflicting->GetHash();\n+\n+                if (GetBoolArg(\"-firstseensafe\", true))\n+                {\n+                    // Check that the replacement is first-seen-safe.\n+                    //\n+                    // This requires the conflicting transaction's vout to be a\n+                    // subset of the replacement. Outputs can pay more than before,\n+                    // but not less. For simplicity we require the order of outputs\n+                    // be unchanged.\n+                    if (tx.vout.size() < ptxConflicting->vout.size())\n+                    {\n+                        return state.DoS(0, error(\"AcceptToMemoryPool: replacement has %s fewer outputs than original %s\",\n+                                                  hash.ToString(),\n+                                                  hashConflicting.ToString()),\n+                                         REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+                    }\n+                    for (unsigned int j = 0; j < ptxConflicting->vout.size(); j++)\n+                    {\n+                        if (ptxConflicting->vout[j].scriptPubKey != tx.vout[j].scriptPubKey ||\n+                            ptxConflicting->vout[j].nValue > tx.vout[j].nValue)\n+                        {\n+                            return state.DoS(0, error(\"AcceptToMemoryPool: replacement %s outputs not a subset of original %s\",\n+                                                      hash.ToString(),\n+                                                      hashConflicting.ToString()),\n+                                             REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+                        }\n+                    }\n+                }\n+\n+                // Make sure the outputs of the transaction we're replacing\n+                // have not been spent.\n+                for (unsigned int j = 0; j < ptxConflicting->vout.size(); j++)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r32888773",
      "id" : 32888773,
      "original_commit_id" : "b7ac851a98a18e9e6c73a00d97e8541ee3dc6f77",
      "original_position" : 62,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176",
      "updated_at" : "2015-06-22T04:57:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32888773",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/549484?v=3",
         "events_url" : "https://api.github.com/users/ashleyholman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ashleyholman/followers",
         "following_url" : "https://api.github.com/users/ashleyholman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ashleyholman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ashleyholman",
         "id" : 549484,
         "login" : "ashleyholman",
         "organizations_url" : "https://api.github.com/users/ashleyholman/orgs",
         "received_events_url" : "https://api.github.com/users/ashleyholman/received_events",
         "repos_url" : "https://api.github.com/users/ashleyholman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ashleyholman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ashleyholman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ashleyholman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r32888788"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32888788"
         }
      },
      "body" : "I may be wrong here, but wouldn't your previous check (no new inputs are in the mempool) already catch this case?",
      "commit_id" : "f3044fd191505253e7914916c784235698514e1e",
      "created_at" : "2015-06-20T22:31:33Z",
      "diff_hunk" : "@@ -912,16 +912,121 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     if (pool.exists(hash))\n         return false;\n \n+    uint256 hashConflicting;\n+    CAmount nConflictingFees = 0;\n+    size_t nConflictingSize = 0;\n+\n     // Check for conflicts with in-memory transactions\n     {\n     LOCK(pool.cs); // protect pool.mapNextTx\n+    const CTransaction *ptxConflicting = NULL;\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n     {\n         COutPoint outpoint = tx.vin[i].prevout;\n         if (pool.mapNextTx.count(outpoint))\n         {\n-            // Disable replacement feature for now\n-            return false;\n+            if (ptxConflicting)\n+            {\n+                // For simplicity we only replace transactions on a 1-for-1 basis.\n+                if (pool.mapNextTx[outpoint].ptx != ptxConflicting)\n+                    return state.DoS(0, error(\"AcceptToMemoryPool: replacement %s conflicts with more than one other transaction\",\n+                                              hash.ToString()),\n+                                     REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+            }\n+            else\n+            {\n+                ptxConflicting = pool.mapNextTx[outpoint].ptx;\n+                hashConflicting = ptxConflicting->GetHash();\n+\n+                if (GetBoolArg(\"-firstseensafe\", true))\n+                {\n+                    // Check that the replacement is first-seen-safe.\n+                    //\n+                    // This requires the conflicting transaction's vout to be a\n+                    // subset of the replacement. Outputs can pay more than before,\n+                    // but not less. For simplicity we require the order of outputs\n+                    // be unchanged.\n+                    if (tx.vout.size() < ptxConflicting->vout.size())\n+                    {\n+                        return state.DoS(0, error(\"AcceptToMemoryPool: replacement has %s fewer outputs than original %s\",\n+                                                  hash.ToString(),\n+                                                  hashConflicting.ToString()),\n+                                         REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+                    }\n+                    for (unsigned int j = 0; j < ptxConflicting->vout.size(); j++)\n+                    {\n+                        if (ptxConflicting->vout[j].scriptPubKey != tx.vout[j].scriptPubKey ||\n+                            ptxConflicting->vout[j].nValue > tx.vout[j].nValue)\n+                        {\n+                            return state.DoS(0, error(\"AcceptToMemoryPool: replacement %s outputs not a subset of original %s\",\n+                                                      hash.ToString(),\n+                                                      hashConflicting.ToString()),\n+                                             REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+                        }\n+                    }\n+                }\n+\n+                // Make sure the outputs of the transaction we're replacing\n+                // have not been spent.\n+                for (unsigned int j = 0; j < ptxConflicting->vout.size(); j++)\n+                {\n+                    if (pool.mapNextTx.count(COutPoint(hashConflicting, j)))\n+                    {\n+                        return state.DoS(0, error(\"AcceptToMemoryPool: outpoint %s:%d already spent; can't replace with %s\",\n+                                                  hashConflicting.ToString(), j,\n+                                                  hash.ToString()),\n+                                         REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+\n+                    }\n+                }\n+\n+                set<COutPoint> setConflictsPrevouts;\n+                for (unsigned int j = 0; j < ptxConflicting->vin.size(); j++)\n+                {\n+                    setConflictsPrevouts.insert(ptxConflicting->vin[j].prevout);\n+                }\n+\n+                for (unsigned int j = 0; j < tx.vin.size(); j++)\n+                {\n+                    // Check that any new inputs spend only confirmed coins. It\n+                    // might not be economically rational to replace a\n+                    // transaction that spent confirmed inputs with one that\n+                    // spent the result of a long chain of inputs, as the total\n+                    // fee/KB might go down. Forcing all new inputs to be\n+                    // confirmed is a simple way of avoiding that problem.\n+                    if (!setConflictsPrevouts.count(tx.vin[j].prevout))\n+                    {\n+                        // Rather than check the UTXO set - potentially\n+                        // expensive - it's cheaper to just check that the new\n+                        // input refers to a tx that is *not* in the mempool.\n+                        if (pool.exists(tx.vin[j].prevout.hash))\n+                            return state.DoS(0, error(\"AcceptToMemoryPool: replacement %s adds unconfirmed input, idx %d\",\n+                                                      hash.ToString(), j),\n+                                             REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+                    }\n+\n+                    // Check that this transaction doesn't itself spend an output\n+                    // of the conflicting transaction. If it did, when the conflict\n+                    // was removed this transaction would become an orphan. As we\n+                    // checked that the conflicts outputs were all unspent above,\n+                    // we only have to check against the conflict, not any\n+                    // children. Similarly because we'll only ever replace\n+                    // transactions on a 1-1 basis, we only have to do this check\n+                    // once.\n+                    if (tx.vin[j].prevout.hash == hashConflicting)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r32888788",
      "id" : 32888788,
      "original_commit_id" : "b7ac851a98a18e9e6c73a00d97e8541ee3dc6f77",
      "original_position" : 107,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176",
      "updated_at" : "2015-06-22T04:57:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32888788",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/549484?v=3",
         "events_url" : "https://api.github.com/users/ashleyholman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ashleyholman/followers",
         "following_url" : "https://api.github.com/users/ashleyholman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ashleyholman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ashleyholman",
         "id" : 549484,
         "login" : "ashleyholman",
         "organizations_url" : "https://api.github.com/users/ashleyholman/orgs",
         "received_events_url" : "https://api.github.com/users/ashleyholman/received_events",
         "repos_url" : "https://api.github.com/users/ashleyholman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ashleyholman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ashleyholman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ashleyholman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r32892383"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32892383"
         }
      },
      "body" : "Ah, yeah, that's true now that it's been changed to require new inputs to be confirmed. Good catch.",
      "commit_id" : "f3044fd191505253e7914916c784235698514e1e",
      "created_at" : "2015-06-21T10:35:37Z",
      "diff_hunk" : "@@ -912,16 +912,121 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     if (pool.exists(hash))\n         return false;\n \n+    uint256 hashConflicting;\n+    CAmount nConflictingFees = 0;\n+    size_t nConflictingSize = 0;\n+\n     // Check for conflicts with in-memory transactions\n     {\n     LOCK(pool.cs); // protect pool.mapNextTx\n+    const CTransaction *ptxConflicting = NULL;\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n     {\n         COutPoint outpoint = tx.vin[i].prevout;\n         if (pool.mapNextTx.count(outpoint))\n         {\n-            // Disable replacement feature for now\n-            return false;\n+            if (ptxConflicting)\n+            {\n+                // For simplicity we only replace transactions on a 1-for-1 basis.\n+                if (pool.mapNextTx[outpoint].ptx != ptxConflicting)\n+                    return state.DoS(0, error(\"AcceptToMemoryPool: replacement %s conflicts with more than one other transaction\",\n+                                              hash.ToString()),\n+                                     REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+            }\n+            else\n+            {\n+                ptxConflicting = pool.mapNextTx[outpoint].ptx;\n+                hashConflicting = ptxConflicting->GetHash();\n+\n+                if (GetBoolArg(\"-firstseensafe\", true))\n+                {\n+                    // Check that the replacement is first-seen-safe.\n+                    //\n+                    // This requires the conflicting transaction's vout to be a\n+                    // subset of the replacement. Outputs can pay more than before,\n+                    // but not less. For simplicity we require the order of outputs\n+                    // be unchanged.\n+                    if (tx.vout.size() < ptxConflicting->vout.size())\n+                    {\n+                        return state.DoS(0, error(\"AcceptToMemoryPool: replacement has %s fewer outputs than original %s\",\n+                                                  hash.ToString(),\n+                                                  hashConflicting.ToString()),\n+                                         REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+                    }\n+                    for (unsigned int j = 0; j < ptxConflicting->vout.size(); j++)\n+                    {\n+                        if (ptxConflicting->vout[j].scriptPubKey != tx.vout[j].scriptPubKey ||\n+                            ptxConflicting->vout[j].nValue > tx.vout[j].nValue)\n+                        {\n+                            return state.DoS(0, error(\"AcceptToMemoryPool: replacement %s outputs not a subset of original %s\",\n+                                                      hash.ToString(),\n+                                                      hashConflicting.ToString()),\n+                                             REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+                        }\n+                    }\n+                }\n+\n+                // Make sure the outputs of the transaction we're replacing\n+                // have not been spent.\n+                for (unsigned int j = 0; j < ptxConflicting->vout.size(); j++)\n+                {\n+                    if (pool.mapNextTx.count(COutPoint(hashConflicting, j)))\n+                    {\n+                        return state.DoS(0, error(\"AcceptToMemoryPool: outpoint %s:%d already spent; can't replace with %s\",\n+                                                  hashConflicting.ToString(), j,\n+                                                  hash.ToString()),\n+                                         REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+\n+                    }\n+                }\n+\n+                set<COutPoint> setConflictsPrevouts;\n+                for (unsigned int j = 0; j < ptxConflicting->vin.size(); j++)\n+                {\n+                    setConflictsPrevouts.insert(ptxConflicting->vin[j].prevout);\n+                }\n+\n+                for (unsigned int j = 0; j < tx.vin.size(); j++)\n+                {\n+                    // Check that any new inputs spend only confirmed coins. It\n+                    // might not be economically rational to replace a\n+                    // transaction that spent confirmed inputs with one that\n+                    // spent the result of a long chain of inputs, as the total\n+                    // fee/KB might go down. Forcing all new inputs to be\n+                    // confirmed is a simple way of avoiding that problem.\n+                    if (!setConflictsPrevouts.count(tx.vin[j].prevout))\n+                    {\n+                        // Rather than check the UTXO set - potentially\n+                        // expensive - it's cheaper to just check that the new\n+                        // input refers to a tx that is *not* in the mempool.\n+                        if (pool.exists(tx.vin[j].prevout.hash))\n+                            return state.DoS(0, error(\"AcceptToMemoryPool: replacement %s adds unconfirmed input, idx %d\",\n+                                                      hash.ToString(), j),\n+                                             REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+                    }\n+\n+                    // Check that this transaction doesn't itself spend an output\n+                    // of the conflicting transaction. If it did, when the conflict\n+                    // was removed this transaction would become an orphan. As we\n+                    // checked that the conflicts outputs were all unspent above,\n+                    // we only have to check against the conflict, not any\n+                    // children. Similarly because we'll only ever replace\n+                    // transactions on a 1-1 basis, we only have to do this check\n+                    // once.\n+                    if (tx.vin[j].prevout.hash == hashConflicting)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r32892383",
      "id" : 32892383,
      "original_commit_id" : "b7ac851a98a18e9e6c73a00d97e8541ee3dc6f77",
      "original_position" : 107,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176",
      "updated_at" : "2015-06-22T04:57:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32892383",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r32892417"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32892417"
         }
      },
      "body" : "As in, check if the mapNextTx.lower_bound() hash == hashConflicting or the lower_bound() returns mapNextTx.end()?\r\n\r\nSeems reasonable, though the way that depends on which way COutPoint's is sorted bothers me slightly.",
      "commit_id" : "f3044fd191505253e7914916c784235698514e1e",
      "created_at" : "2015-06-21T10:41:51Z",
      "diff_hunk" : "@@ -912,16 +912,121 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     if (pool.exists(hash))\n         return false;\n \n+    uint256 hashConflicting;\n+    CAmount nConflictingFees = 0;\n+    size_t nConflictingSize = 0;\n+\n     // Check for conflicts with in-memory transactions\n     {\n     LOCK(pool.cs); // protect pool.mapNextTx\n+    const CTransaction *ptxConflicting = NULL;\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n     {\n         COutPoint outpoint = tx.vin[i].prevout;\n         if (pool.mapNextTx.count(outpoint))\n         {\n-            // Disable replacement feature for now\n-            return false;\n+            if (ptxConflicting)\n+            {\n+                // For simplicity we only replace transactions on a 1-for-1 basis.\n+                if (pool.mapNextTx[outpoint].ptx != ptxConflicting)\n+                    return state.DoS(0, error(\"AcceptToMemoryPool: replacement %s conflicts with more than one other transaction\",\n+                                              hash.ToString()),\n+                                     REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+            }\n+            else\n+            {\n+                ptxConflicting = pool.mapNextTx[outpoint].ptx;\n+                hashConflicting = ptxConflicting->GetHash();\n+\n+                if (GetBoolArg(\"-firstseensafe\", true))\n+                {\n+                    // Check that the replacement is first-seen-safe.\n+                    //\n+                    // This requires the conflicting transaction's vout to be a\n+                    // subset of the replacement. Outputs can pay more than before,\n+                    // but not less. For simplicity we require the order of outputs\n+                    // be unchanged.\n+                    if (tx.vout.size() < ptxConflicting->vout.size())\n+                    {\n+                        return state.DoS(0, error(\"AcceptToMemoryPool: replacement has %s fewer outputs than original %s\",\n+                                                  hash.ToString(),\n+                                                  hashConflicting.ToString()),\n+                                         REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+                    }\n+                    for (unsigned int j = 0; j < ptxConflicting->vout.size(); j++)\n+                    {\n+                        if (ptxConflicting->vout[j].scriptPubKey != tx.vout[j].scriptPubKey ||\n+                            ptxConflicting->vout[j].nValue > tx.vout[j].nValue)\n+                        {\n+                            return state.DoS(0, error(\"AcceptToMemoryPool: replacement %s outputs not a subset of original %s\",\n+                                                      hash.ToString(),\n+                                                      hashConflicting.ToString()),\n+                                             REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+                        }\n+                    }\n+                }\n+\n+                // Make sure the outputs of the transaction we're replacing\n+                // have not been spent.\n+                for (unsigned int j = 0; j < ptxConflicting->vout.size(); j++)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r32892417",
      "id" : 32892417,
      "original_commit_id" : "b7ac851a98a18e9e6c73a00d97e8541ee3dc6f77",
      "original_position" : 62,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176",
      "updated_at" : "2015-06-22T04:57:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32892417",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r32905456"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32905456"
         }
      },
      "body" : "@ashleyholman Switched to lower_bound(), thanks! Mind checking the new code over?",
      "commit_id" : "f3044fd191505253e7914916c784235698514e1e",
      "created_at" : "2015-06-22T04:58:25Z",
      "diff_hunk" : "@@ -912,16 +912,121 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     if (pool.exists(hash))\n         return false;\n \n+    uint256 hashConflicting;\n+    CAmount nConflictingFees = 0;\n+    size_t nConflictingSize = 0;\n+\n     // Check for conflicts with in-memory transactions\n     {\n     LOCK(pool.cs); // protect pool.mapNextTx\n+    const CTransaction *ptxConflicting = NULL;\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n     {\n         COutPoint outpoint = tx.vin[i].prevout;\n         if (pool.mapNextTx.count(outpoint))\n         {\n-            // Disable replacement feature for now\n-            return false;\n+            if (ptxConflicting)\n+            {\n+                // For simplicity we only replace transactions on a 1-for-1 basis.\n+                if (pool.mapNextTx[outpoint].ptx != ptxConflicting)\n+                    return state.DoS(0, error(\"AcceptToMemoryPool: replacement %s conflicts with more than one other transaction\",\n+                                              hash.ToString()),\n+                                     REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+            }\n+            else\n+            {\n+                ptxConflicting = pool.mapNextTx[outpoint].ptx;\n+                hashConflicting = ptxConflicting->GetHash();\n+\n+                if (GetBoolArg(\"-firstseensafe\", true))\n+                {\n+                    // Check that the replacement is first-seen-safe.\n+                    //\n+                    // This requires the conflicting transaction's vout to be a\n+                    // subset of the replacement. Outputs can pay more than before,\n+                    // but not less. For simplicity we require the order of outputs\n+                    // be unchanged.\n+                    if (tx.vout.size() < ptxConflicting->vout.size())\n+                    {\n+                        return state.DoS(0, error(\"AcceptToMemoryPool: replacement has %s fewer outputs than original %s\",\n+                                                  hash.ToString(),\n+                                                  hashConflicting.ToString()),\n+                                         REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+                    }\n+                    for (unsigned int j = 0; j < ptxConflicting->vout.size(); j++)\n+                    {\n+                        if (ptxConflicting->vout[j].scriptPubKey != tx.vout[j].scriptPubKey ||\n+                            ptxConflicting->vout[j].nValue > tx.vout[j].nValue)\n+                        {\n+                            return state.DoS(0, error(\"AcceptToMemoryPool: replacement %s outputs not a subset of original %s\",\n+                                                      hash.ToString(),\n+                                                      hashConflicting.ToString()),\n+                                             REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+                        }\n+                    }\n+                }\n+\n+                // Make sure the outputs of the transaction we're replacing\n+                // have not been spent.\n+                for (unsigned int j = 0; j < ptxConflicting->vout.size(); j++)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r32905456",
      "id" : 32905456,
      "original_commit_id" : "b7ac851a98a18e9e6c73a00d97e8541ee3dc6f77",
      "original_position" : 62,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176",
      "updated_at" : "2015-06-22T04:58:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32905456",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r32905506"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32905506"
         }
      },
      "body" : "Removed this check and replaced it with a comment describing how it's needed if we ever allow the new inputs to be unconfirmed.",
      "commit_id" : "f3044fd191505253e7914916c784235698514e1e",
      "created_at" : "2015-06-22T04:59:13Z",
      "diff_hunk" : "@@ -912,16 +912,121 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     if (pool.exists(hash))\n         return false;\n \n+    uint256 hashConflicting;\n+    CAmount nConflictingFees = 0;\n+    size_t nConflictingSize = 0;\n+\n     // Check for conflicts with in-memory transactions\n     {\n     LOCK(pool.cs); // protect pool.mapNextTx\n+    const CTransaction *ptxConflicting = NULL;\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n     {\n         COutPoint outpoint = tx.vin[i].prevout;\n         if (pool.mapNextTx.count(outpoint))\n         {\n-            // Disable replacement feature for now\n-            return false;\n+            if (ptxConflicting)\n+            {\n+                // For simplicity we only replace transactions on a 1-for-1 basis.\n+                if (pool.mapNextTx[outpoint].ptx != ptxConflicting)\n+                    return state.DoS(0, error(\"AcceptToMemoryPool: replacement %s conflicts with more than one other transaction\",\n+                                              hash.ToString()),\n+                                     REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+            }\n+            else\n+            {\n+                ptxConflicting = pool.mapNextTx[outpoint].ptx;\n+                hashConflicting = ptxConflicting->GetHash();\n+\n+                if (GetBoolArg(\"-firstseensafe\", true))\n+                {\n+                    // Check that the replacement is first-seen-safe.\n+                    //\n+                    // This requires the conflicting transaction's vout to be a\n+                    // subset of the replacement. Outputs can pay more than before,\n+                    // but not less. For simplicity we require the order of outputs\n+                    // be unchanged.\n+                    if (tx.vout.size() < ptxConflicting->vout.size())\n+                    {\n+                        return state.DoS(0, error(\"AcceptToMemoryPool: replacement has %s fewer outputs than original %s\",\n+                                                  hash.ToString(),\n+                                                  hashConflicting.ToString()),\n+                                         REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+                    }\n+                    for (unsigned int j = 0; j < ptxConflicting->vout.size(); j++)\n+                    {\n+                        if (ptxConflicting->vout[j].scriptPubKey != tx.vout[j].scriptPubKey ||\n+                            ptxConflicting->vout[j].nValue > tx.vout[j].nValue)\n+                        {\n+                            return state.DoS(0, error(\"AcceptToMemoryPool: replacement %s outputs not a subset of original %s\",\n+                                                      hash.ToString(),\n+                                                      hashConflicting.ToString()),\n+                                             REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+                        }\n+                    }\n+                }\n+\n+                // Make sure the outputs of the transaction we're replacing\n+                // have not been spent.\n+                for (unsigned int j = 0; j < ptxConflicting->vout.size(); j++)\n+                {\n+                    if (pool.mapNextTx.count(COutPoint(hashConflicting, j)))\n+                    {\n+                        return state.DoS(0, error(\"AcceptToMemoryPool: outpoint %s:%d already spent; can't replace with %s\",\n+                                                  hashConflicting.ToString(), j,\n+                                                  hash.ToString()),\n+                                         REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+\n+                    }\n+                }\n+\n+                set<COutPoint> setConflictsPrevouts;\n+                for (unsigned int j = 0; j < ptxConflicting->vin.size(); j++)\n+                {\n+                    setConflictsPrevouts.insert(ptxConflicting->vin[j].prevout);\n+                }\n+\n+                for (unsigned int j = 0; j < tx.vin.size(); j++)\n+                {\n+                    // Check that any new inputs spend only confirmed coins. It\n+                    // might not be economically rational to replace a\n+                    // transaction that spent confirmed inputs with one that\n+                    // spent the result of a long chain of inputs, as the total\n+                    // fee/KB might go down. Forcing all new inputs to be\n+                    // confirmed is a simple way of avoiding that problem.\n+                    if (!setConflictsPrevouts.count(tx.vin[j].prevout))\n+                    {\n+                        // Rather than check the UTXO set - potentially\n+                        // expensive - it's cheaper to just check that the new\n+                        // input refers to a tx that is *not* in the mempool.\n+                        if (pool.exists(tx.vin[j].prevout.hash))\n+                            return state.DoS(0, error(\"AcceptToMemoryPool: replacement %s adds unconfirmed input, idx %d\",\n+                                                      hash.ToString(), j),\n+                                             REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+                    }\n+\n+                    // Check that this transaction doesn't itself spend an output\n+                    // of the conflicting transaction. If it did, when the conflict\n+                    // was removed this transaction would become an orphan. As we\n+                    // checked that the conflicts outputs were all unspent above,\n+                    // we only have to check against the conflict, not any\n+                    // children. Similarly because we'll only ever replace\n+                    // transactions on a 1-1 basis, we only have to do this check\n+                    // once.\n+                    if (tx.vin[j].prevout.hash == hashConflicting)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r32905506",
      "id" : 32905506,
      "original_commit_id" : "b7ac851a98a18e9e6c73a00d97e8541ee3dc6f77",
      "original_position" : 107,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176",
      "updated_at" : "2015-06-22T04:59:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32905506",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "ACK",
      "created_at" : "2015-06-25T19:09:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-115366200",
      "id" : 115366200,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6176",
      "updated_at" : "2015-06-25T19:09:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/115366200",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "body" : "Closing in favor of #6352 ",
      "created_at" : "2015-06-29T05:03:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#issuecomment-116436480",
      "id" : 116436480,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6176",
      "updated_at" : "2015-06-29T05:03:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/116436480",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r33446240"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/33446240"
         }
      },
      "body" : "@sdaftuar other policies can replace more than one conflicting transaction. But, yeah, since this code doesn't, an assert with a comment along the lines \"disable multiple replacement feature for now\" wouldn't hurt.",
      "commit_id" : "f3044fd191505253e7914916c784235698514e1e",
      "created_at" : "2015-06-29T09:15:24Z",
      "diff_hunk" : "@@ -1051,8 +1152,21 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return error(\"AcceptToMemoryPool: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s\", hash.ToString());\n         }\n \n+        // Remove conflicting transaction(s) from mempool (if any)\n+        list<CTransaction> ltxConflicted;\n+        pool.removeConflicts(tx, ltxConflicted);\n+\n         // Store transaction in memory\n         pool.addUnchecked(hash, entry, !IsInitialBlockDownload());\n+\n+        BOOST_FOREACH(const CTransaction &txConflicted, ltxConflicted)\n+        {\n+            LogPrint(\"mempool\", \"replacing tx %s with %s for %s BTC additional fees, %d delta bytes\\n\",\n+                     txConflicted.GetHash().ToString(),\n+                     hash.ToString(),\n+                     FormatMoney(nFees - nConflictingFees),\n+                     (int)nSize - (int)nConflictingSize);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6176#discussion_r33446240",
      "id" : 33446240,
      "original_commit_id" : "fb472276b103ecabde5f6cd54a7a7adf8c2896c8",
      "original_position" : 144,
      "path" : "src/main.cpp",
      "position" : 187,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6176",
      "updated_at" : "2015-06-29T09:15:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/33446240",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   }
]
