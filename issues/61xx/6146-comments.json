[
   {
      "body" : "I thought about this solution, to queue a task after the other tasks that signals the main thread to continue. However, as the handling is multi-threaded it is not guaranteed that the other tasks will have finished execution by the time the closing task runs. I think this will need additional synchronization to be sure.",
      "created_at" : "2015-05-15T17:30:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6146#issuecomment-102464391",
      "id" : 102464391,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6146",
      "updated_at" : "2015-05-15T17:33:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/102464391",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "@laanwj : mmm... I think CScheduler needs a way to do a clean shutdown when there are multiple threads servicing the queue.  I'll take a whack at that after lunch.\r\n\r\nAlternatively, the unit test could be changed to just use a single thread so task ordering is deterministic; we aren't using multiple threads to service it, anyway.\r\n",
      "created_at" : "2015-05-15T18:06:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6146#issuecomment-102473977",
      "id" : 102473977,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6146",
      "updated_at" : "2015-05-15T18:06:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/102473977",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=3",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "body" : "Added CScheduler::stop(bool drain) method, which is the semantics we really want (\"let the threads exit when there is nothing left to do\").\r\n",
      "created_at" : "2015-05-15T19:23:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6146#issuecomment-102499940",
      "id" : 102499940,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6146",
      "updated_at" : "2015-05-15T19:23:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/102499940",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=3",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "body" : "Looks good to me.\r\n\r\nHowever, it does not yet address @theuni' comment on #6145 \r\n\r\n> If there's a future bug that would otherwise cause this to fail because the tasks never successfully finish, this would now hang forever rather than failing, no? Maybe give it an absurd timeout, or verify that the numTasksInQueue are decreasing?\r\n\r\nIf the queue never drains (for example if every task keeps adding new taks), it will keep going on for ever.\r\nIf the join takes longer than say, 60 seconds this could be flagged as an error as well. Ironically this was easier to accomplish with the loop of #6145.\r\n\r\nOn the other hand there are plenty of Python unit tests that have 'wait forever' failure scenarios as well, so I don't think this is a big problem. \r\nThis fixes the immediate issue so utACK.\r\n",
      "created_at" : "2015-05-16T06:22:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6146#issuecomment-102576620",
      "id" : 102576620,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6146",
      "updated_at" : "2015-05-16T06:29:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/102576620",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6146#discussion_r30458947"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6146"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30458947"
         }
      },
      "body" : "Could move this if (stopRequested) to above the `#if BOOST_VERSION < 105000`, then the while () conditions don't have to be extended.",
      "commit_id" : "bcf23d04af553e1b4aa464f9d552d0a9cbf044e2",
      "created_at" : "2015-05-16T06:22:59Z",
      "diff_hunk" : "@@ -29,29 +29,37 @@ void CScheduler::serviceQueue()\n {\n     boost::unique_lock<boost::mutex> lock(newTaskMutex);\n     ++nThreadsServicingQueue;\n+    stopRequested = false;\n+    stopWhenEmpty = false;\n \n     // newTaskMutex is locked throughout this loop EXCEPT\n     // when the thread is waiting or when the user's function\n     // is called.\n-    while (1) {\n+    while (!stopRequested && !(stopWhenEmpty && taskQueue.empty())) {\n         try {\n-            while (taskQueue.empty()) {\n+            while (!stopRequested && !stopWhenEmpty && taskQueue.empty()) {\n                 // Wait until there is something to do.\n                 newTaskScheduled.wait(lock);\n             }\n-// Wait until either there is a new task, or until\n-// the time of the first item on the queue:\n+\n+            // Wait until either there is a new task, or until\n+            // the time of the first item on the queue:\n \n // wait_until needs boost 1.50 or later; older versions have timed_wait:\n #if BOOST_VERSION < 105000\n-            while (!taskQueue.empty() && newTaskScheduled.timed_wait(lock, toPosixTime(taskQueue.begin()->first))) {\n+            while (!stopRequested && !taskQueue.empty() &&\n+                   newTaskScheduled.timed_wait(lock, toPosixTime(taskQueue.begin()->first))) {\n                 // Keep waiting until timeout\n             }\n #else\n-            while (!taskQueue.empty() && newTaskScheduled.wait_until(lock, taskQueue.begin()->first) != boost::cv_status::timeout) {\n+            while (!stopRequested && !taskQueue.empty() &&\n+                   newTaskScheduled.wait_until(lock, taskQueue.begin()->first) != boost::cv_status::timeout) {\n                 // Keep waiting until timeout\n             }\n #endif\n+            if (stopRequested)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6146#discussion_r30458947",
      "id" : 30458947,
      "original_commit_id" : "bcf23d04af553e1b4aa464f9d552d0a9cbf044e2",
      "original_position" : 47,
      "path" : "src/scheduler.cpp",
      "position" : 47,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6146",
      "updated_at" : "2015-05-16T06:22:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/30458947",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "Nit picked, merged to master (quick merge because Travis errors are so disruptive).\r\n",
      "created_at" : "2015-05-16T22:04:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6146#issuecomment-102703566",
      "id" : 102703566,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6146",
      "updated_at" : "2015-05-16T22:04:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/102703566",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=3",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   }
]
