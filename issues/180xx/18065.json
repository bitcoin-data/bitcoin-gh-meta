{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "NONE",
   "body" : "I've noticed a rare use-after-scope race in `submitblock` while testing Bitcoin ABC built in debug mode, and the involved code is identical to Core so I believe the same concern exists here.\r\n\r\nEssentially the issue is that `UnregisterValidationInterface` does disconnect the slots promptly, but the slots may be in the process of executing at that precise moment, in the scheduler thread. Even though `UpdatedBlockTip` is an empty function for the `submitblock_StateCatcher` `sc`, it does get wrapped by std::bind and various internal boost wrappers so there's a tiny time window to have a problem. The race looks something like this (Sched = scheduler thread, RPC = thread calling submitblock function)\r\n\r\n- [Sched] Invoke UpdatedBlockTip signal.\r\n- [Sched] Observe the connection for UpdatedBlockTip and extract the slot-to-be-executed.\r\n- [RPC] `submitblock` disconnects the connection.\r\n- [Sched] Start executing the slot, starting with various boost wrappers, passing through std::bind, then a call to the CValidationInterface's virtual UpdatedBlockTip method.\r\n- [RPC] `submitblock` function completes; `sc` is destroyed and zeroed.\r\n- [Sched] Look up the `sc` vtable entry for UpdatedBlockTip and call it. Segfault because `sc`'s vtable pointer has been zeroed.\r\n\r\nBoost signals2 thread safety discussion: https://www.boost.org/doc/libs/1_55_0/doc/html/signals2/thread-safety.html\r\n> Note that since we unlock the connection's mutex before executing its associated slot, it is possible a slot will still be executing after it has been disconnected by a connection::disconnect(), if the disconnect was called concurrently with signal invocation. \r\n\r\n[This](https://reviews.bitcoinabc.org/D5140) was the direct fix in Bitcoin ABC however it does not address the bigger issue: 1) not all signals are queued at the scheduler and so there could be a race with a third thread, and 2) there are other places in the code base (like wallet) that seem to not wait after unregistering. I am not super familiar with signals2 so I'm not sure what is the 'correct' fix. But the TL;DR is that `scoped_connection` only protects the lifecycle of the std::bind and not anything deeper.\r\n\r\nRelevant code\r\n---\r\nThe scope in `submitblock`:\r\nhttps://github.com/bitcoin/bitcoin/blob/651e34388832149402fea0d26f3dc13bbe197f5a/src/rpc/mining.cpp#L781-L792\r\nThe `submitblock_StateCatcher` definition:\r\nhttps://github.com/bitcoin/bitcoin/blob/651e34388832149402fea0d26f3dc13bbe197f5a/src/rpc/mining.cpp#L713-L729\r\n",
   "closed_at" : "2020-04-09T09:08:17Z",
   "closed_by" : {
      "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
      "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
      "followers_url" : "https://api.github.com/users/fanquake/followers",
      "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/fanquake",
      "id" : 863730,
      "login" : "fanquake",
      "node_id" : "MDQ6VXNlcjg2MzczMA==",
      "organizations_url" : "https://api.github.com/users/fanquake/orgs",
      "received_events_url" : "https://api.github.com/users/fanquake/received_events",
      "repos_url" : "https://api.github.com/users/fanquake/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/fanquake"
   },
   "comments" : 4,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18065/comments",
   "created_at" : "2020-02-04T01:44:44Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18065/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/18065",
   "id" : 559436904,
   "labels" : [
      {
         "color" : "ebd775",
         "default" : false,
         "description" : null,
         "id" : 64584,
         "name" : "Brainstorming",
         "node_id" : "MDU6TGFiZWw2NDU4NA==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming"
      },
      {
         "color" : "FBBAAB",
         "default" : false,
         "description" : null,
         "id" : 64585,
         "name" : "Bug",
         "node_id" : "MDU6TGFiZWw2NDU4NQ==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18065/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU1NTk0MzY5MDQ=",
   "number" : 18065,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "boost::signals2 disconnections don't block for slots to finish executing (& CValidationInterface lifecycle races)",
   "updated_at" : "2020-04-09T09:08:17Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18065",
   "user" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/36528214?v=4",
      "events_url" : "https://api.github.com/users/markblundeberg/events{/privacy}",
      "followers_url" : "https://api.github.com/users/markblundeberg/followers",
      "following_url" : "https://api.github.com/users/markblundeberg/following{/other_user}",
      "gists_url" : "https://api.github.com/users/markblundeberg/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/markblundeberg",
      "id" : 36528214,
      "login" : "markblundeberg",
      "node_id" : "MDQ6VXNlcjM2NTI4MjE0",
      "organizations_url" : "https://api.github.com/users/markblundeberg/orgs",
      "received_events_url" : "https://api.github.com/users/markblundeberg/received_events",
      "repos_url" : "https://api.github.com/users/markblundeberg/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/markblundeberg/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/markblundeberg/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/markblundeberg"
   }
}
