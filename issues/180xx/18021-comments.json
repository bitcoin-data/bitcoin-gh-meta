[
   {
      "author_association" : "MEMBER",
      "body" : "@ryanofsky I added another small improvement here that wasn't present in #10785, namely reusing the `VectorUsing` logic in the vector/prevector serializers themselves (avoiding code duplication).",
      "created_at" : "2020-01-29T19:31:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#issuecomment-579921768",
      "id" : 579921768,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18021",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTkyMTc2OA==",
      "updated_at" : "2020-01-29T19:32:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579921768",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r372689082"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372689082"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: specify units?",
      "commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "created_at" : "2020-01-29T23:33:44Z",
      "diff_hunk" : "@@ -25,6 +25,9 @@\n \n static const unsigned int MAX_SIZE = 0x02000000;\n \n+/** Maximum amount of memory to allocate at once when deserializing vectors. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r372689082",
      "id" : 372689082,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY4OTA4Mg==",
      "original_commit_id" : "416300bd0ca62fd41f24f3c826f739d488b0c502",
      "original_position" : 4,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 350498082,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021",
      "updated_at" : "2020-02-07T03:08:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372689082",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r372759739"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372759739"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "created_at" : "2020-01-30T04:57:52Z",
      "diff_hunk" : "@@ -25,6 +25,9 @@\n \n static const unsigned int MAX_SIZE = 0x02000000;\n \n+/** Maximum amount of memory to allocate at once when deserializing vectors. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r372759739",
      "id" : 372759739,
      "in_reply_to_id" : 372689082,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc1OTczOQ==",
      "original_commit_id" : "416300bd0ca62fd41f24f3c826f739d488b0c502",
      "original_position" : 4,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 350581839,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021",
      "updated_at" : "2020-02-07T03:08:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/372759739",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Code review ACK 24235e50e9d532cbe5836dcebbce0c6a04be8652",
      "created_at" : "2020-02-03T06:27:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#issuecomment-581258978",
      "id" : 581258978,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18021",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MTI1ODk3OA==",
      "updated_at" : "2020-02-03T06:28:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/581258978",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r375164775"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/375164775"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe add a comment when this is to be used, on first glance it seems like a no-op.",
      "commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "created_at" : "2020-02-05T10:10:14Z",
      "diff_hunk" : "@@ -673,6 +723,16 @@ inline void Unserialize(Stream& is, T&& a)\n     a.Unserialize(is);\n }\n \n+/** Identity formatter. Serializes objects as themselves. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r375164775",
      "id" : 375164775,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE2NDc3NQ==",
      "original_commit_id" : "24235e50e9d532cbe5836dcebbce0c6a04be8652",
      "original_position" : 68,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 353597959,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021",
      "updated_at" : "2020-02-07T03:08:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/375164775",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r375166767"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/375166767"
         }
      },
      "author_association" : "MEMBER",
      "body" : "A static assert that ` sizeof(typename V::value_type) <= MAX_VECTOR_ALLOCATE` could catch an edge case here.",
      "commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "created_at" : "2020-02-05T10:13:57Z",
      "diff_hunk" : "@@ -593,6 +596,53 @@ class LimitedString\n template<typename I>\n BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }\n \n+/** Formatter to serialize/deserialize vector elements using another formatter\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(X, obj) { READWRITE(Using<VectorUsing<VarInt>>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, size, reserve, push_back, and const iterators.\n+ */\n+template<class Formatter>\n+struct VectorUsing\n+{\n+    template<typename Stream, typename V>\n+    void Ser(Stream& s, const V& v)\n+    {\n+        WriteCompactSize(s, v.size());\n+        for (const typename V::value_type& elem : v) {\n+            s << Using<Formatter>(elem);\n+        }\n+    }\n+\n+    template<typename Stream, typename V>\n+    void Unser(Stream& s, V& v)\n+    {\n+        v.clear();\n+        size_t size = ReadCompactSize(s);\n+        size_t allocated = 0;\n+        while (allocated < size) {\n+            // For DoS prevention, do not blindly allocate as much as the stream claims to contain.\n+            // Instead, allocate in 5MiB batches, so that an attacker actually needs to provide\n+            // X MiB of data to make us allocate X+5 Mib.\n+            allocated = std::min(size, allocated + MAX_VECTOR_ALLOCATE / sizeof(typename V::value_type));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r375166767",
      "id" : 375166767,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE2Njc2Nw==",
      "original_commit_id" : "24235e50e9d532cbe5836dcebbce0c6a04be8652",
      "original_position" : 49,
      "path" : "src/serialize.h",
      "position" : 50,
      "pull_request_review_id" : 353600476,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021",
      "updated_at" : "2020-02-07T03:08:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/375166767",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r375462422"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/375462422"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add custom vector-element formatter\" (741e27bfe5eb6bdc61f99b300c16f4b2f92e8ec7)\r\n\r\nCould avoid creating the temporary:\r\n\r\n```c++\r\nv.emplace_back();\r\ns >> Using<Formatter>(v.back());\r\n```",
      "commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "created_at" : "2020-02-05T19:30:22Z",
      "diff_hunk" : "@@ -596,6 +596,53 @@ class LimitedString\n template<typename I>\n BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }\n \n+/** Formatter to serialize/deserialize vector elements using another formatter\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(X, obj) { READWRITE(Using<VectorUsing<VarInt>>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, size, reserve, push_back, and const iterators.\n+ */\n+template<class Formatter>\n+struct VectorUsing\n+{\n+    template<typename Stream, typename V>\n+    void Ser(Stream& s, const V& v)\n+    {\n+        WriteCompactSize(s, v.size());\n+        for (const typename V::value_type& elem : v) {\n+            s << Using<Formatter>(elem);\n+        }\n+    }\n+\n+    template<typename Stream, typename V>\n+    void Unser(Stream& s, V& v)\n+    {\n+        v.clear();\n+        size_t size = ReadCompactSize(s);\n+        size_t allocated = 0;\n+        while (allocated < size) {\n+            // For DoS prevention, do not blindly allocate as much as the stream claims to contain.\n+            // Instead, allocate in 5MiB batches, so that an attacker actually needs to provide\n+            // X MiB of data to make us allocate X+5 Mib.\n+            allocated = std::min(size, allocated + MAX_VECTOR_ALLOCATE / sizeof(typename V::value_type));\n+            v.reserve(allocated);\n+            while (v.size() < allocated) {\n+                typename V::value_type val;\n+                auto wrapped = Using<Formatter>(val);\n+                s >> wrapped;\n+                v.push_back(std::move(val));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r375462422",
      "id" : 375462422,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ2MjQyMg==",
      "original_commit_id" : "741e27bfe5eb6bdc61f99b300c16f4b2f92e8ec7",
      "original_position" : 45,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 353982674,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021",
      "updated_at" : "2020-02-07T03:08:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/375462422",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r375472656"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/375472656"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Convert undo.h to new serialization framework\" (24235e50e9d532cbe5836dcebbce0c6a04be8652)\r\n\r\nNote: With this check going away, there doesn't appear to be any limit on the total size of the deserialized `vprevout` vector. The incremental allocation size is now limited to MAX_VECTOR_ALLOCATE, though.",
      "commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "created_at" : "2020-02-05T19:50:12Z",
      "diff_hunk" : "@@ -13,88 +13,50 @@\n #include <serialize.h>\n #include <version.h>\n \n-/** Undo information for a CTxIn\n+/** Formatter for undo information for a CTxIn\n  *\n  *  Contains the prevout's CTxOut being spent, and its metadata as well\n  *  (coinbase or not, height). The serialization contains a dummy value of\n  *  zero. This is compatible with older versions which expect to see\n  *  the transaction version there.\n  */\n-class TxInUndoSerializer\n+struct TxInUndo\n {\n-    const Coin* txout;\n-\n-public:\n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1u : 0u)));\n-        if (txout->nHeight > 0) {\n+    void Ser(Stream &s, const Coin& txout) {\n+        ::Serialize(s, VARINT(txout.nHeight * 2 + (txout.fCoinBase ? 1u : 0u)));\n+        if (txout.nHeight > 0) {\n             // Required to maintain compatibility with older undo format.\n             ::Serialize(s, (unsigned char)0);\n         }\n-        ::Serialize(s, Using<TxOutCompression>(REF(txout->out)));\n+        ::Serialize(s, Using<TxOutCompression>(txout.out));\n     }\n \n-    explicit TxInUndoSerializer(const Coin* coin) : txout(coin) {}\n-};\n-\n-class TxInUndoDeserializer\n-{\n-    Coin* txout;\n-\n-public:\n     template<typename Stream>\n-    void Unserialize(Stream &s) {\n+    void Unser(Stream &s, Coin& txout) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        txout->nHeight = nCode / 2;\n-        txout->fCoinBase = nCode & 1;\n-        if (txout->nHeight > 0) {\n+        txout.nHeight = nCode / 2;\n+        txout.fCoinBase = nCode & 1;\n+        if (txout.nHeight > 0) {\n             // Old versions stored the version number for the last spend of\n             // a transaction's outputs. Non-final spends were indicated with\n             // height = 0.\n             unsigned int nVersionDummy;\n             ::Unserialize(s, VARINT(nVersionDummy));\n         }\n-        ::Unserialize(s, Using<TxOutCompression>(REF(txout->out)));\n+        ::Unserialize(s, Using<TxOutCompression>(txout.out));\n     }\n-\n-    explicit TxInUndoDeserializer(Coin* coin) : txout(coin) {}\n };\n \n-static const size_t MIN_TRANSACTION_INPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxIn(), PROTOCOL_VERSION);\n-static const size_t MAX_INPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT / MIN_TRANSACTION_INPUT_WEIGHT;\n-\n /** Undo information for a CTransaction */\n class CTxUndo\n {\n public:\n     // undo information for all txins\n     std::vector<Coin> vprevout;\n \n-    template <typename Stream>\n-    void Serialize(Stream& s) const {\n-        // TODO: avoid reimplementing vector serializer\n-        uint64_t count = vprevout.size();\n-        ::Serialize(s, COMPACTSIZE(REF(count)));\n-        for (const auto& prevout : vprevout) {\n-            ::Serialize(s, TxInUndoSerializer(&prevout));\n-        }\n-    }\n-\n-    template <typename Stream>\n-    void Unserialize(Stream& s) {\n-        // TODO: avoid reimplementing vector deserializer\n-        uint64_t count = 0;\n-        ::Unserialize(s, COMPACTSIZE(count));\n-        if (count > MAX_INPUTS_PER_BLOCK) {\n-            throw std::ios_base::failure(\"Too many input undo records\");\n-        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r375472656",
      "id" : 375472656,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ3MjY1Ng==",
      "original_commit_id" : "24235e50e9d532cbe5836dcebbce0c6a04be8652",
      "original_position" : 91,
      "path" : "src/undo.h",
      "position" : 91,
      "pull_request_review_id" : 353982674,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021",
      "updated_at" : "2020-02-07T03:08:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/375472656",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r375480709"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/375480709"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't think the `VectorUsing` and `UsingSelf` names for formatters are the best. Would suggest sticking to the `FooFormatter` convention and renaming `VectorUsing` to `VectorFormatter` and `UsingSelf` to `DefaultFormatter`.\r\n\r\nAside from giving more consistent class names, it should also make usages more readable: `Using<VectorUsing<UsingSelf>>(v)` -> `Using<VectorFormatter<DefaultFormatter>>(v)`",
      "commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "created_at" : "2020-02-05T20:07:07Z",
      "diff_hunk" : "@@ -596,6 +596,53 @@ class LimitedString\n template<typename I>\n BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }\n \n+/** Formatter to serialize/deserialize vector elements using another formatter\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(X, obj) { READWRITE(Using<VectorUsing<VarInt>>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, size, reserve, push_back, and const iterators.\n+ */\n+template<class Formatter>\n+struct VectorUsing",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r375480709",
      "id" : 375480709,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ4MDcwOQ==",
      "original_commit_id" : "741e27bfe5eb6bdc61f99b300c16f4b2f92e8ec7",
      "original_position" : 18,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 353982674,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021",
      "updated_at" : "2020-02-07T03:08:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/375480709",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376195107"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376195107"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "created_at" : "2020-02-07T03:09:24Z",
      "diff_hunk" : "@@ -673,6 +723,16 @@ inline void Unserialize(Stream& is, T&& a)\n     a.Unserialize(is);\n }\n \n+/** Identity formatter. Serializes objects as themselves. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376195107",
      "id" : 376195107,
      "in_reply_to_id" : 375164775,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NTEwNw==",
      "original_commit_id" : "24235e50e9d532cbe5836dcebbce0c6a04be8652",
      "original_position" : 68,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 354908861,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021",
      "updated_at" : "2020-02-07T03:09:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376195107",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376195138"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376195138"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "created_at" : "2020-02-07T03:09:36Z",
      "diff_hunk" : "@@ -593,6 +596,53 @@ class LimitedString\n template<typename I>\n BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }\n \n+/** Formatter to serialize/deserialize vector elements using another formatter\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(X, obj) { READWRITE(Using<VectorUsing<VarInt>>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, size, reserve, push_back, and const iterators.\n+ */\n+template<class Formatter>\n+struct VectorUsing\n+{\n+    template<typename Stream, typename V>\n+    void Ser(Stream& s, const V& v)\n+    {\n+        WriteCompactSize(s, v.size());\n+        for (const typename V::value_type& elem : v) {\n+            s << Using<Formatter>(elem);\n+        }\n+    }\n+\n+    template<typename Stream, typename V>\n+    void Unser(Stream& s, V& v)\n+    {\n+        v.clear();\n+        size_t size = ReadCompactSize(s);\n+        size_t allocated = 0;\n+        while (allocated < size) {\n+            // For DoS prevention, do not blindly allocate as much as the stream claims to contain.\n+            // Instead, allocate in 5MiB batches, so that an attacker actually needs to provide\n+            // X MiB of data to make us allocate X+5 Mib.\n+            allocated = std::min(size, allocated + MAX_VECTOR_ALLOCATE / sizeof(typename V::value_type));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376195138",
      "id" : 376195138,
      "in_reply_to_id" : 375166767,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NTEzOA==",
      "original_commit_id" : "24235e50e9d532cbe5836dcebbce0c6a04be8652",
      "original_position" : 49,
      "path" : "src/serialize.h",
      "position" : 50,
      "pull_request_review_id" : 354908911,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021",
      "updated_at" : "2020-02-07T03:09:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376195138",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376195163"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376195163"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "created_at" : "2020-02-07T03:09:44Z",
      "diff_hunk" : "@@ -596,6 +596,53 @@ class LimitedString\n template<typename I>\n BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }\n \n+/** Formatter to serialize/deserialize vector elements using another formatter\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(X, obj) { READWRITE(Using<VectorUsing<VarInt>>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, size, reserve, push_back, and const iterators.\n+ */\n+template<class Formatter>\n+struct VectorUsing\n+{\n+    template<typename Stream, typename V>\n+    void Ser(Stream& s, const V& v)\n+    {\n+        WriteCompactSize(s, v.size());\n+        for (const typename V::value_type& elem : v) {\n+            s << Using<Formatter>(elem);\n+        }\n+    }\n+\n+    template<typename Stream, typename V>\n+    void Unser(Stream& s, V& v)\n+    {\n+        v.clear();\n+        size_t size = ReadCompactSize(s);\n+        size_t allocated = 0;\n+        while (allocated < size) {\n+            // For DoS prevention, do not blindly allocate as much as the stream claims to contain.\n+            // Instead, allocate in 5MiB batches, so that an attacker actually needs to provide\n+            // X MiB of data to make us allocate X+5 Mib.\n+            allocated = std::min(size, allocated + MAX_VECTOR_ALLOCATE / sizeof(typename V::value_type));\n+            v.reserve(allocated);\n+            while (v.size() < allocated) {\n+                typename V::value_type val;\n+                auto wrapped = Using<Formatter>(val);\n+                s >> wrapped;\n+                v.push_back(std::move(val));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376195163",
      "id" : 376195163,
      "in_reply_to_id" : 375462422,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NTE2Mw==",
      "original_commit_id" : "741e27bfe5eb6bdc61f99b300c16f4b2f92e8ec7",
      "original_position" : 45,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 354908947,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021",
      "updated_at" : "2020-02-07T03:09:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376195163",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376195351"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376195351"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, I'm aware. I don't think this is significant. The earlier code needed a sanity limit, and had custom code, so it used a custom limit. The new code is safe by default (even though the limit in practice is much higher).",
      "commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "created_at" : "2020-02-07T03:10:39Z",
      "diff_hunk" : "@@ -13,88 +13,50 @@\n #include <serialize.h>\n #include <version.h>\n \n-/** Undo information for a CTxIn\n+/** Formatter for undo information for a CTxIn\n  *\n  *  Contains the prevout's CTxOut being spent, and its metadata as well\n  *  (coinbase or not, height). The serialization contains a dummy value of\n  *  zero. This is compatible with older versions which expect to see\n  *  the transaction version there.\n  */\n-class TxInUndoSerializer\n+struct TxInUndo\n {\n-    const Coin* txout;\n-\n-public:\n     template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        ::Serialize(s, VARINT(txout->nHeight * 2 + (txout->fCoinBase ? 1u : 0u)));\n-        if (txout->nHeight > 0) {\n+    void Ser(Stream &s, const Coin& txout) {\n+        ::Serialize(s, VARINT(txout.nHeight * 2 + (txout.fCoinBase ? 1u : 0u)));\n+        if (txout.nHeight > 0) {\n             // Required to maintain compatibility with older undo format.\n             ::Serialize(s, (unsigned char)0);\n         }\n-        ::Serialize(s, Using<TxOutCompression>(REF(txout->out)));\n+        ::Serialize(s, Using<TxOutCompression>(txout.out));\n     }\n \n-    explicit TxInUndoSerializer(const Coin* coin) : txout(coin) {}\n-};\n-\n-class TxInUndoDeserializer\n-{\n-    Coin* txout;\n-\n-public:\n     template<typename Stream>\n-    void Unserialize(Stream &s) {\n+    void Unser(Stream &s, Coin& txout) {\n         unsigned int nCode = 0;\n         ::Unserialize(s, VARINT(nCode));\n-        txout->nHeight = nCode / 2;\n-        txout->fCoinBase = nCode & 1;\n-        if (txout->nHeight > 0) {\n+        txout.nHeight = nCode / 2;\n+        txout.fCoinBase = nCode & 1;\n+        if (txout.nHeight > 0) {\n             // Old versions stored the version number for the last spend of\n             // a transaction's outputs. Non-final spends were indicated with\n             // height = 0.\n             unsigned int nVersionDummy;\n             ::Unserialize(s, VARINT(nVersionDummy));\n         }\n-        ::Unserialize(s, Using<TxOutCompression>(REF(txout->out)));\n+        ::Unserialize(s, Using<TxOutCompression>(txout.out));\n     }\n-\n-    explicit TxInUndoDeserializer(Coin* coin) : txout(coin) {}\n };\n \n-static const size_t MIN_TRANSACTION_INPUT_WEIGHT = WITNESS_SCALE_FACTOR * ::GetSerializeSize(CTxIn(), PROTOCOL_VERSION);\n-static const size_t MAX_INPUTS_PER_BLOCK = MAX_BLOCK_WEIGHT / MIN_TRANSACTION_INPUT_WEIGHT;\n-\n /** Undo information for a CTransaction */\n class CTxUndo\n {\n public:\n     // undo information for all txins\n     std::vector<Coin> vprevout;\n \n-    template <typename Stream>\n-    void Serialize(Stream& s) const {\n-        // TODO: avoid reimplementing vector serializer\n-        uint64_t count = vprevout.size();\n-        ::Serialize(s, COMPACTSIZE(REF(count)));\n-        for (const auto& prevout : vprevout) {\n-            ::Serialize(s, TxInUndoSerializer(&prevout));\n-        }\n-    }\n-\n-    template <typename Stream>\n-    void Unserialize(Stream& s) {\n-        // TODO: avoid reimplementing vector deserializer\n-        uint64_t count = 0;\n-        ::Unserialize(s, COMPACTSIZE(count));\n-        if (count > MAX_INPUTS_PER_BLOCK) {\n-            throw std::ios_base::failure(\"Too many input undo records\");\n-        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376195351",
      "id" : 376195351,
      "in_reply_to_id" : 375472656,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NTM1MQ==",
      "original_commit_id" : "24235e50e9d532cbe5836dcebbce0c6a04be8652",
      "original_position" : 91,
      "path" : "src/undo.h",
      "position" : 91,
      "pull_request_review_id" : 354909138,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021",
      "updated_at" : "2020-02-07T03:10:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376195351",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376195394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376195394"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That's indeed better. Done.",
      "commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "created_at" : "2020-02-07T03:10:51Z",
      "diff_hunk" : "@@ -596,6 +596,53 @@ class LimitedString\n template<typename I>\n BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }\n \n+/** Formatter to serialize/deserialize vector elements using another formatter\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(X, obj) { READWRITE(Using<VectorUsing<VarInt>>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, size, reserve, push_back, and const iterators.\n+ */\n+template<class Formatter>\n+struct VectorUsing",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376195394",
      "id" : 376195394,
      "in_reply_to_id" : 375480709,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NTM5NA==",
      "original_commit_id" : "741e27bfe5eb6bdc61f99b300c16f4b2f92e8ec7",
      "original_position" : 18,
      "path" : "src/serialize.h",
      "position" : null,
      "pull_request_review_id" : 354909180,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021",
      "updated_at" : "2020-02-07T03:10:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376195394",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#18088](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/18088.html) (build: ensure we aren't using GNU extensions by fanquake)\n* [#18087](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/18087.html) (Get rid of VARINT default argument by sipa)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-02-07T10:06:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#issuecomment-583321333",
      "id" : 583321333,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18021",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MzMyMTMzMw==",
      "updated_at" : "2020-02-07T10:06:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/583321333",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376403864"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376403864"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Lines 632 and 633, so the documentation doesn't go out of date if the value of `MAX_VECTOR_ALLOCATE` changes, perhaps replace \"5 MiB\" and \"5 Mib\" with \"MAX_VECTOR_ALLOCATE\" (and s/X Mib/X/ as the constant is defined in bytes).",
      "commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "created_at" : "2020-02-07T14:00:26Z",
      "diff_hunk" : "@@ -593,6 +596,53 @@ class LimitedString\n template<typename I>\n BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }\n \n+/** Formatter to serialize/deserialize vector elements using another formatter\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(X, obj) { READWRITE(Using<VectorFormatter<VarInt>>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, size, reserve, push_back, and const iterators.\n+ */\n+template<class Formatter>\n+struct VectorFormatter\n+{\n+    template<typename Stream, typename V>\n+    void Ser(Stream& s, const V& v)\n+    {\n+        WriteCompactSize(s, v.size());\n+        for (const typename V::value_type& elem : v) {\n+            s << Using<Formatter>(elem);\n+        }\n+    }\n+\n+    template<typename Stream, typename V>\n+    void Unser(Stream& s, V& v)\n+    {\n+        v.clear();\n+        size_t size = ReadCompactSize(s);\n+        size_t allocated = 0;\n+        while (allocated < size) {\n+            // For DoS prevention, do not blindly allocate as much as the stream claims to contain.\n+            // Instead, allocate in 5MiB batches, so that an attacker actually needs to provide\n+            // X MiB of data to make us allocate X+5 Mib.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376403864",
      "id" : 376403864,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwMzg2NA==",
      "original_commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "original_position" : 48,
      "path" : "src/serialize.h",
      "position" : 48,
      "pull_request_review_id" : 355173521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021",
      "updated_at" : "2020-02-07T14:44:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376403864",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376408131"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376408131"
         }
      },
      "author_association" : "MEMBER",
      "body" : "<strike>Now that the static assert suggested in https://github.com/bitcoin/bitcoin/pull/18021#discussion_r375166767 has been added, possibly worthwhile (or not) to calculate `sizeof(typename V::value_type)` once and cache it.</strike>",
      "commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "created_at" : "2020-02-07T14:09:39Z",
      "diff_hunk" : "@@ -593,6 +596,53 @@ class LimitedString\n template<typename I>\n BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }\n \n+/** Formatter to serialize/deserialize vector elements using another formatter\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(X, obj) { READWRITE(Using<VectorFormatter<VarInt>>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, size, reserve, push_back, and const iterators.\n+ */\n+template<class Formatter>\n+struct VectorFormatter\n+{\n+    template<typename Stream, typename V>\n+    void Ser(Stream& s, const V& v)\n+    {\n+        WriteCompactSize(s, v.size());\n+        for (const typename V::value_type& elem : v) {\n+            s << Using<Formatter>(elem);\n+        }\n+    }\n+\n+    template<typename Stream, typename V>\n+    void Unser(Stream& s, V& v)\n+    {\n+        v.clear();\n+        size_t size = ReadCompactSize(s);\n+        size_t allocated = 0;\n+        while (allocated < size) {\n+            // For DoS prevention, do not blindly allocate as much as the stream claims to contain.\n+            // Instead, allocate in 5MiB batches, so that an attacker actually needs to provide\n+            // X MiB of data to make us allocate X+5 Mib.\n+            static_assert(sizeof(typename V::value_type) <= MAX_VECTOR_ALLOCATE, \"Vector element size too large\");\n+            allocated = std::min(size, allocated + MAX_VECTOR_ALLOCATE / sizeof(typename V::value_type));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376408131",
      "id" : 376408131,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwODEzMQ==",
      "original_commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "original_position" : 50,
      "path" : "src/serialize.h",
      "position" : 50,
      "pull_request_review_id" : 355173521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021",
      "updated_at" : "2020-02-07T16:55:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376408131",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376412053"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376412053"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: With respect to the naming of `Ser` and `Unser`, git grepping for only these might be facilitated with names that don't correspond to the first chars of Serialize/Unserialize. That said, I don't have a suggestion top of mind.",
      "commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "created_at" : "2020-02-07T14:17:28Z",
      "diff_hunk" : "@@ -593,6 +596,53 @@ class LimitedString\n template<typename I>\n BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }\n \n+/** Formatter to serialize/deserialize vector elements using another formatter\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(X, obj) { READWRITE(Using<VectorFormatter<VarInt>>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, size, reserve, push_back, and const iterators.\n+ */\n+template<class Formatter>\n+struct VectorFormatter\n+{\n+    template<typename Stream, typename V>\n+    void Ser(Stream& s, const V& v)\n+    {\n+        WriteCompactSize(s, v.size());\n+        for (const typename V::value_type& elem : v) {\n+            s << Using<Formatter>(elem);\n+        }\n+    }\n+\n+    template<typename Stream, typename V>\n+    void Unser(Stream& s, V& v)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376412053",
      "id" : 376412053,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMjA1Mw==",
      "original_commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "original_position" : 40,
      "path" : "src/serialize.h",
      "position" : 40,
      "pull_request_review_id" : 355173521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021",
      "updated_at" : "2020-02-07T14:44:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376412053",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376429348"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376429348"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Never mind, `git grep \"Ser(\"` and `git grep \"Unser(\"` does the job.",
      "commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "created_at" : "2020-02-07T14:49:28Z",
      "diff_hunk" : "@@ -593,6 +596,53 @@ class LimitedString\n template<typename I>\n BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }\n \n+/** Formatter to serialize/deserialize vector elements using another formatter\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(X, obj) { READWRITE(Using<VectorFormatter<VarInt>>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, size, reserve, push_back, and const iterators.\n+ */\n+template<class Formatter>\n+struct VectorFormatter\n+{\n+    template<typename Stream, typename V>\n+    void Ser(Stream& s, const V& v)\n+    {\n+        WriteCompactSize(s, v.size());\n+        for (const typename V::value_type& elem : v) {\n+            s << Using<Formatter>(elem);\n+        }\n+    }\n+\n+    template<typename Stream, typename V>\n+    void Unser(Stream& s, V& v)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376429348",
      "id" : 376429348,
      "in_reply_to_id" : 376412053,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyOTM0OA==",
      "original_commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "original_position" : 40,
      "path" : "src/serialize.h",
      "position" : 40,
      "pull_request_review_id" : 355206926,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021",
      "updated_at" : "2020-02-07T14:49:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376429348",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376431958"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376431958"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Noting that the result of sizeof is always nonzero, even if applied to an empty class type, so (normally) no risk of division by zero.",
      "commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "created_at" : "2020-02-07T14:54:04Z",
      "diff_hunk" : "@@ -593,6 +596,53 @@ class LimitedString\n template<typename I>\n BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }\n \n+/** Formatter to serialize/deserialize vector elements using another formatter\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(X, obj) { READWRITE(Using<VectorFormatter<VarInt>>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, size, reserve, push_back, and const iterators.\n+ */\n+template<class Formatter>\n+struct VectorFormatter\n+{\n+    template<typename Stream, typename V>\n+    void Ser(Stream& s, const V& v)\n+    {\n+        WriteCompactSize(s, v.size());\n+        for (const typename V::value_type& elem : v) {\n+            s << Using<Formatter>(elem);\n+        }\n+    }\n+\n+    template<typename Stream, typename V>\n+    void Unser(Stream& s, V& v)\n+    {\n+        v.clear();\n+        size_t size = ReadCompactSize(s);\n+        size_t allocated = 0;\n+        while (allocated < size) {\n+            // For DoS prevention, do not blindly allocate as much as the stream claims to contain.\n+            // Instead, allocate in 5MiB batches, so that an attacker actually needs to provide\n+            // X MiB of data to make us allocate X+5 Mib.\n+            static_assert(sizeof(typename V::value_type) <= MAX_VECTOR_ALLOCATE, \"Vector element size too large\");\n+            allocated = std::min(size, allocated + MAX_VECTOR_ALLOCATE / sizeof(typename V::value_type));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376431958",
      "id" : 376431958,
      "in_reply_to_id" : 376408131,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQzMTk1OA==",
      "original_commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "original_position" : 50,
      "path" : "src/serialize.h",
      "position" : 50,
      "pull_request_review_id" : 355210394,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021",
      "updated_at" : "2020-02-07T15:06:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376431958",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376452925"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376452925"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unless I'm confused, sizeof(..) is determined at compile-time, so no reason to cache it.",
      "commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "created_at" : "2020-02-07T15:31:03Z",
      "diff_hunk" : "@@ -593,6 +596,53 @@ class LimitedString\n template<typename I>\n BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }\n \n+/** Formatter to serialize/deserialize vector elements using another formatter\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(X, obj) { READWRITE(Using<VectorFormatter<VarInt>>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, size, reserve, push_back, and const iterators.\n+ */\n+template<class Formatter>\n+struct VectorFormatter\n+{\n+    template<typename Stream, typename V>\n+    void Ser(Stream& s, const V& v)\n+    {\n+        WriteCompactSize(s, v.size());\n+        for (const typename V::value_type& elem : v) {\n+            s << Using<Formatter>(elem);\n+        }\n+    }\n+\n+    template<typename Stream, typename V>\n+    void Unser(Stream& s, V& v)\n+    {\n+        v.clear();\n+        size_t size = ReadCompactSize(s);\n+        size_t allocated = 0;\n+        while (allocated < size) {\n+            // For DoS prevention, do not blindly allocate as much as the stream claims to contain.\n+            // Instead, allocate in 5MiB batches, so that an attacker actually needs to provide\n+            // X MiB of data to make us allocate X+5 Mib.\n+            static_assert(sizeof(typename V::value_type) <= MAX_VECTOR_ALLOCATE, \"Vector element size too large\");\n+            allocated = std::min(size, allocated + MAX_VECTOR_ALLOCATE / sizeof(typename V::value_type));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376452925",
      "id" : 376452925,
      "in_reply_to_id" : 376408131,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1MjkyNQ==",
      "original_commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "original_position" : 50,
      "path" : "src/serialize.h",
      "position" : 50,
      "pull_request_review_id" : 355237428,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021",
      "updated_at" : "2020-02-07T15:31:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376452925",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376498299"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376498299"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oops yes, `static_assert` requires a bool constexpr, otherwise a compile-time error is issued.",
      "commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "created_at" : "2020-02-07T16:55:12Z",
      "diff_hunk" : "@@ -593,6 +596,53 @@ class LimitedString\n template<typename I>\n BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }\n \n+/** Formatter to serialize/deserialize vector elements using another formatter\n+ *\n+ * Example:\n+ *   struct X {\n+ *     std::vector<uint64_t> v;\n+ *     SERIALIZE_METHODS(X, obj) { READWRITE(Using<VectorFormatter<VarInt>>(obj.v)); }\n+ *   };\n+ * will define a struct that contains a vector of uint64_t, which is serialized\n+ * as a vector of VarInt-encoded integers.\n+ *\n+ * V is not required to be an std::vector type. It works for any class that\n+ * exposes a value_type, size, reserve, push_back, and const iterators.\n+ */\n+template<class Formatter>\n+struct VectorFormatter\n+{\n+    template<typename Stream, typename V>\n+    void Ser(Stream& s, const V& v)\n+    {\n+        WriteCompactSize(s, v.size());\n+        for (const typename V::value_type& elem : v) {\n+            s << Using<Formatter>(elem);\n+        }\n+    }\n+\n+    template<typename Stream, typename V>\n+    void Unser(Stream& s, V& v)\n+    {\n+        v.clear();\n+        size_t size = ReadCompactSize(s);\n+        size_t allocated = 0;\n+        while (allocated < size) {\n+            // For DoS prevention, do not blindly allocate as much as the stream claims to contain.\n+            // Instead, allocate in 5MiB batches, so that an attacker actually needs to provide\n+            // X MiB of data to make us allocate X+5 Mib.\n+            static_assert(sizeof(typename V::value_type) <= MAX_VECTOR_ALLOCATE, \"Vector element size too large\");\n+            allocated = std::min(size, allocated + MAX_VECTOR_ALLOCATE / sizeof(typename V::value_type));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#discussion_r376498299",
      "id" : 376498299,
      "in_reply_to_id" : 376408131,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5ODI5OQ==",
      "original_commit_id" : "3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "original_position" : 50,
      "path" : "src/serialize.h",
      "position" : 50,
      "pull_request_review_id" : 355296433,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18021",
      "updated_at" : "2020-02-07T16:55:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/376498299",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "code review ACK 3c94b0039d2ca2a8c41fd6127ff5019a2afc304e",
      "created_at" : "2020-02-10T14:47:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18021#issuecomment-584157462",
      "id" : 584157462,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18021",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NDE1NzQ2Mg==",
      "updated_at" : "2020-02-10T14:47:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/584157462",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
