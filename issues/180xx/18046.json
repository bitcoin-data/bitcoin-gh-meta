{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "When running the fuzzers  in `master` with ASan and UBSan enabled the crashes below will eventually be encountered.\r\n\r\nIdeally one should be able to run all fuzzers in `master` continuously with all sanitisers enabled without ever hitting any issues.\r\n\r\nNote that the presence of an issue in the list below does not necessarily imply a bug in the code under test: it could simply mean that the harness is fuzzing code that is not intended to be robust against random input.\r\n\r\nThus avoiding these issues will require either:\r\n- a.) making the fuzzing harness avoid triggering code that is not meant to be robust to random input, or\r\n- b.) making the code under test more robust.\r\n\r\nSome of these will be easy to fix and could thus be good candidates for a \"good first issue\" :)\r\n\r\n| Fuzzer  | Issue | Fix PR |\r\n| ------------- | ------------- | --- |\r\n| `blockundo_deserialize`  | `undo.h:30:24: runtime error: signed integer overflow: 1972491776 * 2 cannot be represented in type 'int'` | â |\r\n| `coins_deserialize`  | `coins.h:62:33: runtime error: signed integer overflow: 1969937248 * 2 cannot be represented in type 'int'` | â |\r\n| `parse_iso8601`  | `util/time.cpp:101:67: runtime error: signed integer overflow: 2147482930 + 1900 cannot be represented in type 'int'` | Fixed by #18162 |\r\n| `parse_script`  | `script/script.h:332:35: runtime error: negation of -9223372036854775808 cannot be represented in type 'int64_t' (aka 'long'); cast to an unsigned type to negate this value to itself` | Fixed by #18416 |\r\n| `psbt`  | `prevector.h:453:19: runtime error: reference binding to misaligned address 0x7f5c1d552022 for type 'prevector<28, unsigned char, unsigned int, int>::size_type' (aka 'unsigned int'), which requires 4 byte alignment` | Fixed by #17708 |\r\n| `script`  | `prevector.h:453:19: runtime error: reference binding to misaligned address 0x7f182c5a5a22 for type 'prevector<28, unsigned char, unsigned int, int>::size_type' (aka 'unsigned int'), which requires 4 byte alignment` | Fixed by #17708 |\r\n| `transaction`  | `primitives/transaction.cpp:87:19: runtime error: signed integer overflow: 1095216725760 + 9223372032559808512 cannot be represented in type 'long'` | Fixed by #18383 |\r\n| `txundo_deserialize`  | `undo.h:30:24: runtime error: signed integer overflow: 1960862720 * 2 cannot be represented in type 'int'` | â |\r\n\r\nTo reproduce:\r\n\r\n```\r\n$ make distclean\r\n$ ./autogen.sh\r\n$ CC=clang CXX=clang++ ./configure --enable-fuzz \\\r\n      --with-sanitizers=address,fuzzer,undefined\r\n$ make\r\n$ export UBSAN_OPTIONS=\"print_stacktrace=1:halt_on_error=1:report_error_type=1\"\r\n\r\n$ xxd -p -r <<< \"d10000b401018dd88dd7001b0a06\" > crash-blockundo_deserialize\r\n$ src/test/fuzz/blockundo_deserialize crash-blockundo_deserialize\r\nundo.h:30:24: runtime error: signed integer overflow: 1972491776 * 2 cannot be represented in type 'int'\r\n    #0 0x555b1634e7db in void TxInUndoSerializer::Serialize<CDataStream>(CDataStream&) const src/./undo.h:30:24\r\n    #1 0x555b1634da3a in void Serialize<CDataStream, TxInUndoSerializer>(CDataStream&, TxInUndoSerializer const&) src/./serialize.h:667:7\r\n    #2 0x555b1634da3a in void CTxUndo::Serialize<CDataStream>(CDataStream&) const src/./undo.h:81:13\r\n    #3 0x555b16348fc1 in void Serialize<CDataStream, CTxUndo>(CDataStream&, CTxUndo const&) src/./serialize.h:667:7\r\n    #4 0x555b16348fc1 in void Serialize_impl<CDataStream, CTxUndo, std::allocator<CTxUndo>, CTxUndo>(CDataStream&, std::vector<CTxUndo, std::allocator<CTxUndo> > const&, CTxUndo const&) src/./serialize.h:798:9\r\n    #5 0x555b16348b40 in void Serialize<CDataStream, CTxUndo, std::allocator<CTxUndo> >(CDataStream&, std::vector<CTxUndo, std::allocator<CTxUndo> > const&) src/./serialize.h:804:5\r\n    #6 0x555b16348b40 in void SerializeMany<CDataStream, std::vector<CTxUndo, std::allocator<CTxUndo> > >(CDataStream&, std::vector<CTxUndo, std::allocator<CTxUndo> > const&) src/./serialize.h:1029:5\r\n    #7 0x555b16348b40 in void SerReadWriteMany<CDataStream, std::vector<CTxUndo, std::allocator<CTxUndo> > >(CDataStream&, CSerActionSerialize, std::vector<CTxUndo, std::allocator<CTxUndo> > const&) src/./serialize.h:1048:5\r\n    #8 0x555b16348896 in void CBlockUndo::SerializationOp<CDataStream, CSerActionSerialize>(CDataStream&, CSerActionSerialize) src/./undo.h:110:9\r\n    #9 0x555b16348896 in void CBlockUndo::Serialize<CDataStream>(CDataStream&) const src/./undo.h:106:5\r\n    #10 0x555b16348896 in void Serialize<CDataStream, CBlockUndo>(CDataStream&, CBlockUndo const&) src/./serialize.h:667:7\r\n    #11 0x555b1634851f in CDataStream& CDataStream::operator<<<CBlockUndo>(CBlockUndo const&) src/./streams.h:452:9\r\n    #12 0x555b163377c5 in CDataStream (anonymous namespace)::Serialize<CBlockUndo>(CBlockUndo const&) src/test/fuzz/deserialize.cpp:49:8\r\n    #13 0x555b163334e0 in void (anonymous namespace)::DeserializeFromFuzzingInput<CBlockUndo>(std::vector<unsigned char, std::allocator<unsigned char> > const&, CBlockUndo&) src/test/fuzz/deserialize.cpp:77:5\r\n    #14 0x555b1633314b in test_one_input(std::vector<unsigned char, std::allocator<unsigned char> > const&) src/test/fuzz/deserialize.cpp:178:9\r\n\r\n$ xxd -p -r <<< \"f60a20008dd5d5ec400006\" > crash-coins_deserialize\r\n$ src/test/fuzz/coins_deserialize crash-coins_deserialize\r\ncoins.h:62:33: runtime error: signed integer overflow: 1969937248 * 2 cannot be represented in type 'int'\r\n    #0 0x557d369a4be5 in void Coin::Serialize<CDataStream>(CDataStream&) const src/./coins.h:62:33\r\n    #1 0x557d369a45fb in void Serialize<CDataStream, Coin>(CDataStream&, Coin const&) src/./serialize.h:667:7\r\n    #2 0x557d369a45fb in CDataStream& CDataStream::operator<<<Coin>(Coin const&) src/./streams.h:452:9\r\n    #3 0x557d3699d325 in CDataStream (anonymous namespace)::Serialize<Coin>(Coin const&) src/test/fuzz/deserialize.cpp:49:8\r\n    #4 0x557d36998a60 in void (anonymous namespace)::DeserializeFromFuzzingInput<Coin>(std::vector<unsigned char, std::allocator<unsigned char> > const&, Coin&) src/test/fuzz/deserialize.cpp:77:5\r\n    #5 0x557d369986bd in test_one_input(std::vector<unsigned char, std::allocator<unsigned char> > const&) src/test/fuzz/deserialize.cpp:181:9\r\n\r\n$ xxd -p -r <<< \"7200393636e2f031\" > crash-parse_iso8601\r\n$ src/test/fuzz/parse_iso8601 crash-parse_iso8601\r\nutil/time.cpp:101:67: runtime error: signed integer overflow: 2147482930 + 1900 cannot be represented in type 'int'\r\n    #0 0x562ccf9bd323 in FormatISO8601DateTime[abi:cxx11](long) src/util/time.cpp:101:67\r\n    #1 0x562ccf9ba5fb in test_one_input(std::vector<unsigned char, std::allocator<unsigned char> > const&) src/test/fuzz/parse_iso8601.cpp:21:42\r\n\r\n$ xxd -p -r <<< \"2d360932445550092d36093609092d393939393939393939393939393939393939360955\" > crash-parse_script\r\n$ src/test/fuzz/parse_script crash-parse_script\r\nscript/script.h:332:35: runtime error: negation of -9223372036854775808 cannot be represented in type 'int64_t' (aka 'long'); cast to an unsigned type to negate this value to itself\r\n    #0 0x55e134173738 in CScriptNum::serialize(long const&) src/./script/script.h:332:35\r\n    #1 0x55e134172f40 in CScript::push_int64(long) src/./script/script.h:405:22\r\n    #2 0x55e13416984f in CScript::operator<<(long) src/./script/script.h:445:45\r\n    #3 0x55e13416984f in ParseScript(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) src/core_read.cpp:62:20\r\n    #4 0x55e134167b0b in test_one_input(std::vector<unsigned char, std::allocator<unsigned char> > const&) src/test/fuzz/parse_script.cpp:13:15\r\n\r\n$ xxd -p -r <<< \"70736274ff010085830303230309006d0000003c000000006f1a30ff0002b37700726b65721a1a0000000000000000000000000000000000000000000000280040009e2900000000000000000000000000000000000000040000000000000070736274ff01002e00000000000303030303030300000000e51a360000010303000000000000000000000000000000000101090000000000000000000000\" > crash-psbt\r\n$ src/test/fuzz/psbt crash-psbt\r\nprevector.h:453:19: runtime error: reference binding to misaligned address 0x7f5c1d552022 for type 'prevector<28, unsigned char, unsigned int, int>::size_type' (aka 'unsigned int'), which requires 4 byte alignment\r\n0x7f5c1d552022: note: pointer points here\r\n 00 00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  00 00 00 00 00 00\r\n              ^\r\n    #0 0x555e737c657e in prevector<28u, unsigned char, unsigned int, int>::swap(prevector<28u, unsigned char, unsigned int, int>&) src/./prevector.h:453:9\r\n    #1 0x555e737c61be in prevector<28u, unsigned char, unsigned int, int>::operator=(prevector<28u, unsigned char, unsigned int, int>&&) src/./prevector.h:273:9\r\n    #2 0x555e737c61be in CScript::operator=(CScript&&) src/./script/script.h:390:7\r\n    #3 0x555e7383a4e6 in ProduceSignature(SigningProvider const&, BaseSignatureCreator const&, CScript const&, SignatureData&) src/script/sign.cpp:245:23\r\n    #4 0x555e737e91a8 in SignPSBTInput(SigningProvider const&, PartiallySignedTransaction&, int, int, SignatureData*, bool) src/psbt.cpp:285:24\r\n    #5 0x555e73780ff5 in AnalyzePSBT(PartiallySignedTransaction) src/node/psbt.cpp:64:29\r\n    #6 0x555e73745694 in test_one_input(std::vector<unsigned char, std::allocator<unsigned char> > const&) src/test/fuzz/psbt.cpp:35:35\r\n\r\n$ touch crash-script\r\n$ src/test/fuzz/script crash-script\r\nprevector.h:453:19: runtime error: reference binding to misaligned address 0x7f182c5a5a22 for type 'prevector<28, unsigned char, unsigned int, int>::size_type' (aka 'unsigned int'), which requires 4 byte alignment\r\n0x7f182c5a5a22: note: pointer points here\r\n 00 00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  00 00 00 00 00 00\r\n              ^\r\n    #0 0x55867c4d0c5e in prevector<28u, unsigned char, unsigned int, int>::swap(prevector<28u, unsigned char, unsigned int, int>&) src/./prevector.h:453:9\r\n    #1 0x55867c4c989e in prevector<28u, unsigned char, unsigned int, int>::operator=(prevector<28u, unsigned char, unsigned int, int>&&) src/./prevector.h:273:9\r\n    #2 0x55867c4c989e in CScript::operator=(CScript&&) src/./script/script.h:390:7\r\n    #3 0x55867c5564c6 in ProduceSignature(SigningProvider const&, BaseSignatureCreator const&, CScript const&, SignatureData&) src/script/sign.cpp:245:23\r\n    #4 0x55867c5604f9 in IsSolvable(SigningProvider const&, CScript const&) src/script/sign.cpp:444:9\r\n    #5 0x55867c4b6647 in test_one_input(std::vector<unsigned char, std::allocator<unsigned char> > const&) src/test/fuzz/script.cpp:48:11\r\n\r\n$ xxd -p -r <<< \"fb67656c70000000000200ff0000ff0000000000000000ffffff7f0000000000\" > crash-transaction\r\n$ src/test/fuzz/transaction crash-transaction\r\nprimitives/transaction.cpp:87:19: runtime error: signed integer overflow: 1095216725760 + 9223372032559808512 cannot be represented in type 'long'\r\n    #0 0x5574b725f6c1 in CTransaction::GetValueOut() const src/primitives/transaction.cpp:87:19\r\n    #1 0x5574b611e5bb in test_one_input(std::vector<unsigned char, std::allocator<unsigned char> > const&) src/test/fuzz/transaction.cpp:71:18\r\n\r\n$ xxd -p -r <<< \"d1000000018dcd828f01000006\" > crash-txundo_deserialize\r\n$ src/test/fuzz/txundo_deserialize crash-txundo_deserialize\r\nundo.h:30:24: runtime error: signed integer overflow: 1960862720 * 2 cannot be represented in type 'int'\r\n    #0 0x55e6eb9ae8bb in void TxInUndoSerializer::Serialize<CDataStream>(CDataStream&) const src/./undo.h:30:24\r\n    #1 0x55e6eb9a99ba in void Serialize<CDataStream, TxInUndoSerializer>(CDataStream&, TxInUndoSerializer const&) src/./serialize.h:667:7\r\n    #2 0x55e6eb9a99ba in void CTxUndo::Serialize<CDataStream>(CDataStream&) const src/./undo.h:81:13\r\n    #3 0x55e6eb9a93eb in void Serialize<CDataStream, CTxUndo>(CDataStream&, CTxUndo const&) src/./serialize.h:667:7\r\n    #4 0x55e6eb9a93eb in CDataStream& CDataStream::operator<<<CTxUndo>(CTxUndo const&) src/./streams.h:452:9\r\n    #5 0x55e6eb99c3d5 in CDataStream (anonymous namespace)::Serialize<CTxUndo>(CTxUndo const&) src/test/fuzz/deserialize.cpp:49:8\r\n    #6 0x55e6eb9987f0 in void (anonymous namespace)::DeserializeFromFuzzingInput<CTxUndo>(std::vector<unsigned char, std::allocator<unsigned char> > const&, CTxUndo&) src/test/fuzz/deserialize.cpp:77:5\r\n    #7 0x55e6eb99845b in test_one_input(std::vector<unsigned char, std::allocator<unsigned char> > const&) src/test/fuzz/deserialize.cpp:175:9\r\n```",
   "closed_at" : "2020-04-02T22:51:19Z",
   "closed_by" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
      "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
      "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/MarcoFalke",
      "id" : 6399679,
      "login" : "MarcoFalke",
      "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
      "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
      "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
      "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/MarcoFalke"
   },
   "comments" : 12,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18046/comments",
   "created_at" : "2020-01-31T21:56:37Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18046/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/18046",
   "id" : 558394012,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18046/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU1NTgzOTQwMTI=",
   "number" : 18046,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "Some fuzzing crashes when running under ASan and/or UBSan",
   "updated_at" : "2020-04-02T22:51:19Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18046",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   }
}
