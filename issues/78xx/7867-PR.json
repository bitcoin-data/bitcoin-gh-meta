{
   "_links" : {
      "comments" : {
         "href" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7867/comments"
      },
      "commits" : {
         "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7867/commits"
      },
      "html" : {
         "href" : "https://github.com/bitcoin/bitcoin/pull/7867"
      },
      "issue" : {
         "href" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7867"
      },
      "review_comment" : {
         "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments{/number}"
      },
      "review_comments" : {
         "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7867/comments"
      },
      "self" : {
         "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7867"
      },
      "statuses" : {
         "href" : "https://api.github.com/repos/bitcoin/bitcoin/statuses/06beb06a415322dbf57352cae32ea18c53309f77"
      }
   },
   "additions" : 0,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "NONE",
   "base" : {
      "label" : "bitcoin:master",
      "ref" : "master",
      "repo" : {
         "archive_url" : "https://api.github.com/repos/bitcoin/bitcoin/{archive_format}{/ref}",
         "archived" : false,
         "assignees_url" : "https://api.github.com/repos/bitcoin/bitcoin/assignees{/user}",
         "blobs_url" : "https://api.github.com/repos/bitcoin/bitcoin/git/blobs{/sha}",
         "branches_url" : "https://api.github.com/repos/bitcoin/bitcoin/branches{/branch}",
         "clone_url" : "https://github.com/bitcoin/bitcoin.git",
         "collaborators_url" : "https://api.github.com/repos/bitcoin/bitcoin/collaborators{/collaborator}",
         "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/comments{/number}",
         "commits_url" : "https://api.github.com/repos/bitcoin/bitcoin/commits{/sha}",
         "compare_url" : "https://api.github.com/repos/bitcoin/bitcoin/compare/{base}...{head}",
         "contents_url" : "https://api.github.com/repos/bitcoin/bitcoin/contents/{+path}",
         "contributors_url" : "https://api.github.com/repos/bitcoin/bitcoin/contributors",
         "created_at" : "2010-12-19T15:16:43Z",
         "default_branch" : "master",
         "deployments_url" : "https://api.github.com/repos/bitcoin/bitcoin/deployments",
         "description" : "Bitcoin Core integration/staging tree",
         "downloads_url" : "https://api.github.com/repos/bitcoin/bitcoin/downloads",
         "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/events",
         "fork" : false,
         "forks" : 18351,
         "forks_count" : 18351,
         "forks_url" : "https://api.github.com/repos/bitcoin/bitcoin/forks",
         "full_name" : "bitcoin/bitcoin",
         "git_commits_url" : "https://api.github.com/repos/bitcoin/bitcoin/git/commits{/sha}",
         "git_refs_url" : "https://api.github.com/repos/bitcoin/bitcoin/git/refs{/sha}",
         "git_tags_url" : "https://api.github.com/repos/bitcoin/bitcoin/git/tags{/sha}",
         "git_url" : "git://github.com/bitcoin/bitcoin.git",
         "has_downloads" : false,
         "has_issues" : true,
         "has_pages" : false,
         "has_projects" : true,
         "has_wiki" : false,
         "homepage" : "https://bitcoin.org/en/download",
         "hooks_url" : "https://api.github.com/repos/bitcoin/bitcoin/hooks",
         "html_url" : "https://github.com/bitcoin/bitcoin",
         "id" : 1181927,
         "issue_comment_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments{/number}",
         "issue_events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/events{/number}",
         "issues_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues{/number}",
         "keys_url" : "https://api.github.com/repos/bitcoin/bitcoin/keys{/key_id}",
         "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/labels{/name}",
         "language" : "C++",
         "languages_url" : "https://api.github.com/repos/bitcoin/bitcoin/languages",
         "license" : {
            "key" : "mit",
            "name" : "MIT License",
            "spdx_id" : "MIT",
            "url" : "https://api.github.com/licenses/mit"
         },
         "merges_url" : "https://api.github.com/repos/bitcoin/bitcoin/merges",
         "milestones_url" : "https://api.github.com/repos/bitcoin/bitcoin/milestones{/number}",
         "mirror_url" : null,
         "name" : "bitcoin",
         "notifications_url" : "https://api.github.com/repos/bitcoin/bitcoin/notifications{?since,all,participating}",
         "open_issues" : 772,
         "open_issues_count" : 772,
         "owner" : {
            "avatar_url" : "https://avatars2.githubusercontent.com/u/528860?v=4",
            "events_url" : "https://api.github.com/users/bitcoin/events{/privacy}",
            "followers_url" : "https://api.github.com/users/bitcoin/followers",
            "following_url" : "https://api.github.com/users/bitcoin/following{/other_user}",
            "gists_url" : "https://api.github.com/users/bitcoin/gists{/gist_id}",
            "gravatar_id" : "",
            "html_url" : "https://github.com/bitcoin",
            "id" : 528860,
            "login" : "bitcoin",
            "organizations_url" : "https://api.github.com/users/bitcoin/orgs",
            "received_events_url" : "https://api.github.com/users/bitcoin/received_events",
            "repos_url" : "https://api.github.com/users/bitcoin/repos",
            "site_admin" : false,
            "starred_url" : "https://api.github.com/users/bitcoin/starred{/owner}{/repo}",
            "subscriptions_url" : "https://api.github.com/users/bitcoin/subscriptions",
            "type" : "Organization",
            "url" : "https://api.github.com/users/bitcoin"
         },
         "private" : false,
         "pulls_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls{/number}",
         "pushed_at" : "2018-04-14T19:46:12Z",
         "releases_url" : "https://api.github.com/repos/bitcoin/bitcoin/releases{/id}",
         "size" : 104301,
         "ssh_url" : "git@github.com:bitcoin/bitcoin.git",
         "stargazers_count" : 30578,
         "stargazers_url" : "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
         "statuses_url" : "https://api.github.com/repos/bitcoin/bitcoin/statuses/{sha}",
         "subscribers_url" : "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
         "subscription_url" : "https://api.github.com/repos/bitcoin/bitcoin/subscription",
         "svn_url" : "https://github.com/bitcoin/bitcoin",
         "tags_url" : "https://api.github.com/repos/bitcoin/bitcoin/tags",
         "teams_url" : "https://api.github.com/repos/bitcoin/bitcoin/teams",
         "trees_url" : "https://api.github.com/repos/bitcoin/bitcoin/git/trees{/sha}",
         "updated_at" : "2018-04-14T19:18:45Z",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin",
         "watchers" : 30578,
         "watchers_count" : 30578
      },
      "sha" : "514993554c370f4cf30a109ac28d5d64893dbf0a",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/528860?v=4",
         "events_url" : "https://api.github.com/users/bitcoin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/bitcoin/followers",
         "following_url" : "https://api.github.com/users/bitcoin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/bitcoin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/bitcoin",
         "id" : 528860,
         "login" : "bitcoin",
         "organizations_url" : "https://api.github.com/users/bitcoin/orgs",
         "received_events_url" : "https://api.github.com/users/bitcoin/received_events",
         "repos_url" : "https://api.github.com/users/bitcoin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/bitcoin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/bitcoin/subscriptions",
         "type" : "Organization",
         "url" : "https://api.github.com/users/bitcoin"
      }
   },
   "body" : "Skip to content\nThis repository\nSearch\nPull requests\nIssues\nGist\n @mrCertified\nOne of our mostly harmless robots seems to think you are not a human.\nBecause of that, itÃ¢ÂÂs hidden your profile from the public. If you really are human, please contact support to have your profile reinstated. We promise we wonÃ¢ÂÂt require DNA proof of your humanity.\n Unwatch 1,118\n  Star 8,833\n Fork 5,969 bitcoin/bitcoin\n Code  Issues 355  Pull requests 117  Pulse  Graphs\nYouÃ¢ÂÂre editing a file in a project you donÃ¢ÂÂt have write access to. Submitting a change to this file will write it to a new branch in your fork mrCertified/bitcoin, so you can send a pull request.\nbitcoin/configure.ac\nView 1,090  configure.ac\n@@ -1,1090 +0,0 @@\n-dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)  \n-AC_PREREQ([2.60])  \n-define(_CLIENT_VERSION_MAJOR, 0)  \n-define(_CLIENT_VERSION_MINOR, 12)  \n-define(_CLIENT_VERSION_REVISION, 99)  \n-define(_CLIENT_VERSION_BUILD, 0)  \n-define(_CLIENT_VERSION_IS_RELEASE, false)  \n-define(_COPYRIGHT_YEAR, 2016)  \n-define(_COPYRIGHT_HOLDERS,[The %s developers])  \n-define(_COPYRIGHT_HOLDERS_SUBSTITUTION,[[Bitcoin Core]])  \n-AC_INIT([Bitcoin Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[https://github.com/bitcoin/bitcoin/issues],[bitcoin],[https://bitcoincore.org/])  \n-AC_CONFIG_SRCDIR([src/main.cpp])  \n-AC_CONFIG_HEADERS([src/config/bitcoin-config.h])  \n-AC_CONFIG_AUX_DIR([build-aux])     \n## -AC_CONFIG_MACRO_DIR([build-aux/m4])        \n## -AC_CANONICAL_HOST      \n\n-AH_TOP([#ifndef BITCOIN_CONFIG_H])  \n-AH_TOP([#define BITCOIN_CONFIG_H])     \n## -AH_BOTTOM([#endif //BITCOIN_CONFIG_H])     \n\n-dnl faketime breaks configure and is only needed for make. Disable it here.        \n## -unset FAKETIME     \n\n-dnl Automake init set-up and checks        \n## -AM_INIT_AUTOMAKE([no-define subdir-objects foreign])       \n\n-dnl faketime messes with timestamps and causes configure to be re-run.  \n-dnl --disable-maintainer-mode can be used to bypass this.      \n## -AM_MAINTAINER_MODE([enable])       \n\n-dnl make the compilation flags quiet unless V=1 is used        \n## -m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])      \n\n-dnl Compiler checks (here before libtool).  \n-if test \"x${CXXFLAGS+set}\" = \"xset\"; then      \n-  CXXFLAGS_overridden=yes  \n  -else  \n-  CXXFLAGS_overridden=no  \n  -fi  \n  -AC_PROG_CXX  \n  -m4_ifdef([AC_PROG_OBJCXX],[AC_PROG_OBJCXX])  \n-   \n  -dnl By default, libtool for mingw refuses to link static libs into a dll for  \n  -dnl fear of mixing pic/non-pic objects, and import/export complications. Since  \n  -dnl we have those under control, re-enable that functionality.  \n  -case $host in  \n-  _mingw_)  \n-     lt_cv_deplibs_check_method=\"pass_all\"  \n-  ;;  \n  -esac  \n  -dnl Libtool init checks.  \n  -LT_INIT([pic-only])  \n-   \n  -dnl Check/return PATH for base programs.  \n  -AC_PATH_TOOL(AR, ar)  \n  -AC_PATH_TOOL(RANLIB, ranlib)  \n  -AC_PATH_TOOL(STRIP, strip)  \n  -AC_PATH_TOOL(GCOV, gcov)  \n  -AC_PATH_PROG(LCOV, lcov)  \n  -AC_PATH_PROG(JAVA, java)  \n  -AC_PATH_PROGS([PYTHON], [python3 python2.7 python2 python])  \n  -AC_PATH_PROG(GENHTML, genhtml)  \n  -AC_PATH_PROG([GIT], [git])  \n  -AC_PATH_PROG(CCACHE,ccache)  \n  -AC_PATH_PROG(XGETTEXT,xgettext)  \n  -AC_PATH_PROG(HEXDUMP,hexdump)  \n  -AC_PATH_TOOL(READELF, readelf)  \n  -AC_PATH_TOOL(CPPFILT, c++filt)  \n-   \n  -AC_ARG_VAR(PYTHONPATH, Augments the default search path for python module files)  \n-   \n  -dnl pkg-config check.  \n  -PKG_PROG_PKG_CONFIG  \n-   \n  -# Enable wallet  \n  -AC_ARG_ENABLE([wallet],  \n-  [AS_HELP_STRING([--disable-wallet],  \n-  [disable wallet (enabled by default)])],  \n-  [enable_wallet=$enableval],  \n## \\-  [enable_wallet=yes])     \n\n-AC_ARG_WITH([miniupnpc],       \n-  [AS_HELP_STRING([--with-miniupnpc],  \n-  [enable UPNP (default is yes if libminiupnpc is found)])],  \n-  [use_upnp=$withval],  \n## \\-  [use_upnp=auto])     \n\n-AC_ARG_ENABLE([upnp-default],      \n-  [AS_HELP_STRING([--enable-upnp-default],  \n-  [if UPNP is enabled, turn it on at startup (default is no)])],  \n-  [use_upnp_default=$enableval],  \n## \\-  [use_upnp_default=no])       \n\n-AC_ARG_ENABLE(tests,       \n-    AS_HELP_STRING([--disable-tests],[do not compile tests (default is to compile)]),  \n-    [use_tests=$enableval],  \n## \\-    [use_tests=yes])       \n\n-AC_ARG_ENABLE(gui-tests,       \n-    AS_HELP_STRING([--disable-gui-tests],[do not compile GUI tests (default is to compile if GUI and tests enabled)]),  \n-    [use_gui_tests=$enableval],  \n## \\-    [use_gui_tests=$use_tests])        \n\n-AC_ARG_ENABLE(bench,       \n-    AS_HELP_STRING([--disable-bench],[do not compile benchmarks (default is to compile)]),  \n-    [use_bench=$enableval],  \n## \\-    [use_bench=yes])       \n\n-AC_ARG_WITH([comparison-tool],     \n-    AS_HELP_STRING([--with-comparison-tool],[path to java comparison tool (requires --enable-tests)]),  \n-    [use_comparison_tool=$withval],  \n## \\-    [use_comparison_tool=no])      \n\n-AC_ARG_ENABLE([comparison-tool-reorg-tests],       \n-    AS_HELP_STRING([--enable-comparison-tool-reorg-tests],[enable expensive reorg tests in the comparison tool (default no)]),  \n-    [use_comparison_tool_reorg_tests=$enableval],  \n## \\-    [use_comparison_tool_reorg_tests=no])      \n\n-AC_ARG_ENABLE([extended-rpc-tests],        \n-    AS_HELP_STRING([--enable-extended-rpc-tests],[enable expensive RPC tests when using lcov (default no)]),  \n-    [use_extended_rpc_tests=$enableval],  \n## \\-    [use_extended_rpc_tests=no])       \n\n-AC_ARG_WITH([qrencode],        \n-  [AS_HELP_STRING([--with-qrencode],  \n-  [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],  \n-  [use_qr=$withval],  \n## \\-  [use_qr=auto])       \n\n-AC_ARG_ENABLE([hardening],     \n-  [AS_HELP_STRING([--disable-hardening],  \n-  [do not attempt to harden the resulting executables (default is to harden)])],  \n-  [use_hardening=$enableval],  \n## \\-  [use_hardening=yes])     \n\n-AC_ARG_ENABLE([reduce-exports],        \n-  [AS_HELP_STRING([--enable-reduce-exports],  \n-  [attempt to reduce exported symbols in the resulting executables (default is no)])],  \n-  [use_reduce_exports=$enableval],  \n## \\-  [use_reduce_exports=no])     \n\n-AC_ARG_ENABLE([ccache],        \n-  [AS_HELP_STRING([--disable-ccache],  \n-  [do not use ccache for building (default is to use if found)])],  \n-  [use_ccache=$enableval],  \n## \\-  [use_ccache=auto])       \n\n-AC_ARG_ENABLE([lcov],      \n-  [AS_HELP_STRING([--enable-lcov],  \n-  [enable lcov testing (default is no)])],  \n-  [use_lcov=yes],  \n## \\-  [use_lcov=no])       \n\n-AC_ARG_ENABLE([glibc-back-compat],     \n-  [AS_HELP_STRING([--enable-glibc-back-compat],  \n-  [enable backwards compatibility with glibc])],  \n-  [use_glibc_compat=$enableval],  \n## \\-  [use_glibc_compat=no])       \n\n-AC_ARG_WITH([system-univalue],     \n-  [AS_HELP_STRING([--with-system-univalue],  \n-  [Build with system UniValue (default is no)])],  \n-  [system_univalue=$withval],  \n-  [system_univalue=no]  \n  -)  \n  -AC_ARG_ENABLE([zmq],  \n-  [AS_HELP_STRING([--disable-zmq],  \n-  [disable ZMQ notifications])],  \n-  [use_zmq=$enableval],  \n## \\-  [use_zmq=yes])       \n## -AC_ARG_WITH([protoc-bindir],[AS_HELP_STRING([--with-protoc-bindir=BIN_DIR],[specify protoc bin path])], [protoc_bin_path=$withval], [])        \n\n-# Enable debug  \n-AC_ARG_ENABLE([debug],     \n-    [AS_HELP_STRING([--enable-debug],  \n-                    [use debug compiler flags and macros (default is no)])],  \n-    [enable_debug=$enableval],  \n## \\-    [enable_debug=no])     \n\n-if test \"x$enable_debug\" = xyes; then      \n-    CPPFLAGS=\"$CPPFLAGS -DDEBUG -DDEBUG_LOCKORDER\"  \n-    if test \"x$GCC\" = xyes; then  \n-        CFLAGS=\"$CFLAGS -g3 -O0\"  \n## \\-    fi     \n-    if test \"x$GXX\" = xyes; then  \n-        CXXFLAGS=\"$CXXFLAGS -g3 -O0\"  \n-    fi  \n  -fi  \n-   \n  -## TODO: Remove these hard-coded paths and flags. They are here for the sake of  \n  -##       compatibility with the legacy buildsystem.  \n  -##  \n  -if test \"x$CXXFLAGS_overridden\" = \"xno\"; then  \n-  CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -Wno-self-assign\"  \n  -fi  \n  -CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"  \n-   \n  -AC_ARG_WITH([utils],  \n-  [AS_HELP_STRING([--with-utils],  \n-  [build bitcoin-cli bitcoin-tx (default=yes)])],  \n-  [build_bitcoin_utils=$withval],  \n## \\-  [build_bitcoin_utils=yes])       \n\n-AC_ARG_WITH([libs],        \n-  [AS_HELP_STRING([--with-libs],  \n-  [build libraries (default=yes)])],  \n-  [build_bitcoin_libs=$withval],  \n## \\-  [build_bitcoin_libs=yes])        \n\n-AC_ARG_WITH([daemon],      \n-  [AS_HELP_STRING([--with-daemon],  \n-  [build bitcoind daemon (default=yes)])],  \n-  [build_bitcoind=$withval],  \n## \\-  [build_bitcoind=yes])        \n## -AC_LANG_PUSH([C++])        \n\n-use_pkgconfig=yes  \n-case $host in      \n## \\-  _mingw_)     \n-     #pkgconfig does more harm than good with MinGW  \n## \\-     use_pkgconfig=no      \n-     TARGET_OS=windows  \n-     AC_CHECK_LIB([mingwthrd],      [main],, AC_MSG_ERROR(lib missing))  \n-     AC_CHECK_LIB([kernel32],      [main],, AC_MSG_ERROR(lib missing))  \n-     AC_CHECK_LIB([user32],      [main],, AC_MSG_ERROR(lib missing))  \n-     AC_CHECK_LIB([gdi32],      [main],, AC_MSG_ERROR(lib missing))  \n-     AC_CHECK_LIB([comdlg32],      [main],, AC_MSG_ERROR(lib missing))  \n-     AC_CHECK_LIB([winspool],      [main],, AC_MSG_ERROR(lib missing))  \n-     AC_CHECK_LIB([winmm],      [main],, AC_MSG_ERROR(lib missing))  \n-     AC_CHECK_LIB([shell32],      [main],, AC_MSG_ERROR(lib missing))  \n-     AC_CHECK_LIB([comctl32],      [main],, AC_MSG_ERROR(lib missing))  \n-     AC_CHECK_LIB([ole32],      [main],, AC_MSG_ERROR(lib missing))  \n-     AC_CHECK_LIB([oleaut32],      [main],, AC_MSG_ERROR(lib missing))  \n-     AC_CHECK_LIB([uuid],      [main],, AC_MSG_ERROR(lib missing))  \n-     AC_CHECK_LIB([rpcrt4],      [main],, AC_MSG_ERROR(lib missing))  \n-     AC_CHECK_LIB([advapi32],      [main],, AC_MSG_ERROR(lib missing))  \n-     AC_CHECK_LIB([ws2_32],      [main],, AC_MSG_ERROR(lib missing))  \n-     AC_CHECK_LIB([mswsock],      [main],, AC_MSG_ERROR(lib missing))  \n-     AC_CHECK_LIB([shlwapi],      [main],, AC_MSG_ERROR(lib missing))  \n-     AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(lib missing))  \n## \\-     AC_CHECK_LIB([crypt32],      [main],, AC_MSG_ERROR(lib missing))      \n-     # -static is interpreted by libtool, where it has a different meaning.  \n-     # In libtool-speak, it's -all-static.  \n## \\-     AX_CHECK_LINK_FLAG([[-static]],[LIBTOOL_APP_LDFLAGS=\"$LIBTOOL_APP_LDFLAGS -all-static\"])      \n-     AC_PATH_PROG([MAKENSIS], [makensis], none)  \n-     if test x$MAKENSIS = xnone; then  \n-       AC_MSG_WARN(\"makensis not found. Cannot create installer.\")  \n## \\-     fi        \n-     AC_PATH_TOOL(WINDRES, windres, none)  \n-     if test x$WINDRES = xnone; then  \n-       AC_MSG_ERROR(\"windres not found\")  \n## \\-     fi        \n-     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"  \n-     LEVELDB_TARGET_FLAGS=\"TARGET_OS=OS_WINDOWS_CROSSCOMPILE\"  \n-     if test \"x$CXXFLAGS_overridden\" = \"xno\"; then  \n-       CXXFLAGS=\"$CXXFLAGS -w\"  \n-     fi  \n-     case $host in  \n-       i?86-*) WINDOWS_BITS=32 ;;  \n-       x86_64-*) WINDOWS_BITS=64 ;;  \n-       *) AC_MSG_ERROR(\"Could not determine win32/win64 for installer\") ;;  \n-     esac  \n## \\-     AC_SUBST(WINDOWS_BITS)        \n-     dnl libtool insists upon adding -nostdlib and a list of objects/libs to link against.  \n-     dnl That breaks our ability to build dll's with static libgcc/libstdc++/libssp. Override  \n-     dnl its command here, with the predeps/postdeps removed, and -static inserted. Postdeps are  \n-     dnl also overridden to prevent their insertion later.  \n-     dnl This should only affect dll's.  \n-     archive_cmds_CXX=\"\\$CC -shared \\$libobjs \\$deplibs \\$compiler_flags -static -o \\$output_objdir/\\$soname \\${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker \\$lib\"  \n## \\-     postdeps_CXX=     \n-     ;;  \n-  _darwin_)  \n-     TARGET_OS=darwin  \n-     LEVELDB_TARGET_FLAGS=\"TARGET_OS=Darwin\"  \n-     if  test x$cross_compiling != xyes; then  \n-       BUILD_OS=darwin  \n-       AC_CHECK_PROG([PORT],port, port)  \n-       if test x$PORT = xport; then  \n-         dnl add default macports paths  \n-         CPPFLAGS=\"$CPPFLAGS -isystem /opt/local/include\"  \n-         LIBS=\"$LIBS -L/opt/local/lib\"  \n-         if test -d /opt/local/include/db48; then  \n-           CPPFLAGS=\"$CPPFLAGS -I/opt/local/include/db48\"  \n-           LIBS=\"$LIBS -L/opt/local/lib/db48\"  \n-         fi  \n## \\-       fi      \n-       AC_CHECK_PROG([BREW],brew, brew)  \n-       if test x$BREW = xbrew; then  \n-         dnl These Homebrew packages may be keg-only, meaning that they won't be found  \n-         dnl in expected paths because they may conflict with system files. Ask  \n-         dnl Homebrew where each one is located, then adjust paths accordingly.  \n-         dnl It's safe to add these paths even if the functionality is disabled by  \n## \\-         dnl the user (--without-wallet or --without-gui for example).     \n-         openssl_prefix=`$BREW --prefix openssl 2>/dev/null`  \n-         bdb_prefix=`$BREW --prefix berkeley-db4 2>/dev/null`  \n-         qt5_prefix=`$BREW --prefix qt5 2>/dev/null`  \n-         if test x$openssl_prefix != x; then  \n-           PKG_CONFIG_PATH=\"$openssl_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"  \n-           export PKG_CONFIG_PATH  \n-         fi  \n-         if test x$bdb_prefix != x; then  \n-           CPPFLAGS=\"$CPPFLAGS -I$bdb_prefix/include\"  \n-           LIBS=\"$LIBS -L$bdb_prefix/lib\"  \n-         fi  \n-         if test x$qt5_prefix != x; then  \n-           PKG_CONFIG_PATH=\"$qt5_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"  \n-           export PKG_CONFIG_PATH  \n-         fi  \n-       fi  \n-     else  \n-       case $build_os in  \n-         _darwin_)  \n-           BUILD_OS=darwin  \n-           ;;  \n-         *)  \n-           AC_PATH_TOOL([INSTALLNAMETOOL], [install_name_tool], install_name_tool)  \n-           AC_PATH_TOOL([OTOOL], [otool], otool)  \n-           AC_PATH_PROGS([GENISOIMAGE], [genisoimage mkisofs],genisoimage)  \n-           AC_PATH_PROGS([RSVG_CONVERT], [rsvg-convert rsvg],rsvg-convert)  \n-           AC_PATH_PROGS([IMAGEMAGICK_CONVERT], [convert],convert)  \n## \\-           AC_PATH_PROGS([TIFFCP], [tiffcp],tiffcp)        \n-           dnl libtool will try to strip the static lib, which is a problem for  \n-           dnl cross-builds because strip attempts to call a hard-coded ld,  \n-           dnl which may not exist in the path. Stripping the .a is not  \n-           dnl necessary, so just disable it.  \n-           old_striplib=  \n-           ;;  \n-       esac  \n## \\-     fi        \n-     AX_CHECK_LINK_FLAG([[-Wl,-headerpad_max_install_names]], [LDFLAGS=\"$LDFLAGS -Wl,-headerpad_max_install_names\"])  \n-     CPPFLAGS=\"$CPPFLAGS -DMAC_OSX\"  \n-     OBJCXXFLAGS=\"$CXXFLAGS\"  \n-     ;;  \n-   _linux_)  \n-     TARGET_OS=linux  \n-     ;;  \n-   *)  \n-     ;;  \n  -esac  \n-   \n  -if test x$use_comparison_tool != xno; then  \n-  AC_SUBST(JAVA_COMPARISON_TOOL, $use_comparison_tool)  \n  -fi  \n-   \n  -if test x$use_comparison_tool_reorg_tests != xno; then  \n-  if test x$use_comparison_tool = x; then  \n-    AC_MSG_ERROR(\"comparison tool reorg tests but comparison tool was not specified\")  \n-  fi  \n-  AC_SUBST(COMPARISON_TOOL_REORG_TESTS, 1)  \n  -else  \n-  AC_SUBST(COMPARISON_TOOL_REORG_TESTS, 0)  \n  -fi  \n-   \n  -if test x$use_extended_rpc_tests != xno; then  \n-  AC_SUBST(EXTENDED_RPC_TESTS, -extended)  \n  -fi  \n-   \n  -if test x$use_lcov = xyes; then  \n-  if test x$LCOV = x; then  \n-    AC_MSG_ERROR(\"lcov testing requested but lcov not found\")  \n-  fi  \n-  if test x$GCOV = x; then  \n-    AC_MSG_ERROR(\"lcov testing requested but gcov not found\")  \n-  fi  \n-  if test x$JAVA = x; then  \n-    AC_MSG_ERROR(\"lcov testing requested but java not found\")  \n-  fi  \n-  if test x$PYTHON = x; then  \n-    AC_MSG_ERROR(\"lcov testing requested but python not found\")  \n-  fi  \n-  if test x$GENHTML = x; then  \n-    AC_MSG_ERROR(\"lcov testing requested but genhtml not found\")  \n-  fi  \n-  if test x$use_comparison_tool = x; then  \n-    AC_MSG_ERROR(\"lcov testing requested but comparison tool was not specified\")  \n-  fi  \n-  LCOV=\"$LCOV --gcov-tool=$GCOV\"  \n-  AX_CHECK_COMPILE_FLAG([--coverage],[CXXFLAGS=\"$CXXFLAGS --coverage\"],  \n-    [AC_MSG_ERROR(\"lcov testing requested but --coverage flag does not work\")])  \n  -fi  \n-   \n  -dnl Check for endianness  \n  -AC_C_BIGENDIAN  \n-   \n  -dnl Check for pthread compile/link requirements  \n  -AX_PTHREAD  \n-   \n  -# The following macro will add the necessary defines to bitcoin-config.h, but  \n  -# they also need to be passed down to any subprojects. Pull the results out of  \n  -# the cache and add them to CPPFLAGS.  \n  -AC_SYS_LARGEFILE  \n  -# detect POSIX or GNU variant of strerror_r  \n  -AC_FUNC_STRERROR_R  \n-   \n  -if test x$ac_cv_sys_file_offset_bits != x &&  \n-   test x$ac_cv_sys_file_offset_bits != xno &&  \n-   test x$ac_cv_sys_file_offset_bits != xunknown; then  \n-  CPPFLAGS=\"$CPPFLAGS -D_FILE_OFFSET_BITS=$ac_cv_sys_file_offset_bits\"  \n  -fi  \n-   \n  -if test x$ac_cv_sys_large_files != x &&  \n-   test x$ac_cv_sys_large_files != xno &&  \n-   test x$ac_cv_sys_large_files != xunknown; then  \n-  CPPFLAGS=\"$CPPFLAGS -D_LARGE_FILES=$ac_cv_sys_large_files\"  \n  -fi  \n-   \n  -AX_CHECK_LINK_FLAG([[-Wl,--large-address-aware]], [LDFLAGS=\"$LDFLAGS -Wl,--large-address-aware\"])  \n-   \n  -AX_GCC_FUNC_ATTRIBUTE([visibility])  \n  -AX_GCC_FUNC_ATTRIBUTE([dllexport])  \n  -AX_GCC_FUNC_ATTRIBUTE([dllimport])  \n-   \n  -if test x$use_glibc_compat != xno; then  \n-   \n-  #glibc absorbed clock_gettime in 2.17. librt (its previous location) is safe to link  \n-  #in anyway for back-compat.  \n## \\-  AC_CHECK_LIB([rt],[clock_gettime],, AC_MSG_ERROR(lib missing))       \n-  #__fdelt_chk's params and return type have changed from long unsigned int to long int.  \n-  # See which one is present here.  \n-  AC_MSG_CHECKING(__fdelt_chk type)  \n-  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#ifdef _FORTIFY_SOURCE  \n-                    #undef _FORTIFY_SOURCE  \n-                  #endif  \n-                  #define _FORTIFY_SOURCE 2  \n-                  #include <sys/select.h>  \n-     extern \"C\" long unsigned int __fdelt_warn(long unsigned int);]],[[]])],  \n-    [ fdelt_type=\"long unsigned int\"],  \n-    [ fdelt_type=\"long int\"])  \n-  AC_MSG_RESULT($fdelt_type)  \n-  AC_DEFINE_UNQUOTED(FDELT_TYPE, $fdelt_type,[parameter and return value type for __fdelt_chk])  \n  -else  \n-  AC_SEARCH_LIBS([clock_gettime],[rt])  \n  -fi  \n-   \n  -if test x$TARGET_OS != xwindows; then  \n-  # All windows code is PIC, forcing it on just adds useless compile warnings  \n-  AX_CHECK_COMPILE_FLAG([-fPIC],[PIC_FLAGS=\"-fPIC\"])  \n  -fi  \n-   \n  -if test x$use_hardening != xno; then  \n-  AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])  \n## \\-  AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])        \n-  AX_CHECK_PREPROC_FLAG([-D_FORTIFY_SOURCE=2],[  \n-    AX_CHECK_PREPROC_FLAG([-U_FORTIFY_SOURCE],[  \n-      HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -U_FORTIFY_SOURCE\"  \n-    ])  \n-    HARDENED_CPPFLAGS=\"$HARDENED_CPPFLAGS -D_FORTIFY_SOURCE=2\"  \n## \\-  ])       \n-  AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])  \n-  AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])  \n-  AX_CHECK_LINK_FLAG([[-Wl,-z,relro]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,relro\"])  \n## \\-  AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,now\"])        \n-  if test x$TARGET_OS != xwindows; then  \n-    AX_CHECK_COMPILE_FLAG([-fPIE],[PIE_FLAGS=\"-fPIE\"])  \n-    AX_CHECK_LINK_FLAG([[-pie]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"])  \n## \\-  fi       \n-  case $host in  \n-    _mingw_)  \n-       AC_CHECK_LIB([ssp],      [main],, AC_MSG_ERROR(lib missing))  \n-    ;;  \n-  esac  \n  -fi  \n-   \n  -dnl this flag screws up non-darwin gcc even when the check fails. special-case it.  \n  -if test x$TARGET_OS = xdarwin; then  \n-  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])  \n  -fi  \n-   \n  -AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])  \n  -AC_SEARCH_LIBS([getaddrinfo_a], [anl], [AC_DEFINE(HAVE_GETADDRINFO_A, 1, [Define this symbol if you have getaddrinfo_a])])  \n  -AC_SEARCH_LIBS([inet_pton], [nsl resolv], [AC_DEFINE(HAVE_INET_PTON, 1, [Define this symbol if you have inet_pton])])  \n-   \n  -AC_CHECK_DECLS([strnlen])  \n-   \n  -AC_CHECK_DECLS([le16toh, le32toh, le64toh, htole16, htole32, htole64, be16toh, be32toh, be64toh, htobe16, htobe32, htobe64],,,  \n-       [#if HAVE_ENDIAN_H  \n-                 #include <endian.h>  \n-                 #elif HAVE_SYS_ENDIAN_H  \n-                 #include <sys/endian.h>  \n## \\-                 #endif])      \n\n-AC_CHECK_DECLS([bswap_16, bswap_32, bswap_64],,,       \n-       [#if HAVE_BYTESWAP_H  \n-                 #include <byteswap.h>  \n## \\-                 #endif])      \n\n-dnl Check for MSG_NOSIGNAL  \n-AC_MSG_CHECKING(for MSG_NOSIGNAL)  \n-AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/socket.h>]],        \n- [[ int f = MSG_NOSIGNAL; ]])],  \n- [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MSG_NOSIGNAL, 1,[Define this symbol if you have MSG_NOSIGNAL]) ],  \n- [ AC_MSG_RESULT(no)]  \n  -)  \n-   \n  -AC_MSG_CHECKING([for visibility attribute])  \n  -AC_LINK_IFELSE([AC_LANG_SOURCE([  \n-  int foo_def( void ) **attribute**((visibility(\"default\")));  \n-  int main(){}  \n-  ])],  \n-  [  \n-    AC_DEFINE(HAVE_VISIBILITY_ATTRIBUTE,1,[Define if the visibility attribute is supported.])  \n-    AC_MSG_RESULT(yes)  \n-  ],  \n-  [  \n-    AC_MSG_RESULT(no)  \n-    if test x$use_reduce_exports = xyes; then  \n-      AC_MSG_ERROR([Cannot find a working visibility attribute. Use --disable-reduce-exports.])  \n-    fi  \n-  ]  \n  -)  \n-   \n  -if test x$use_reduce_exports = xyes; then  \n-  AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[RE_CXXFLAGS=\"-fvisibility=hidden\"],  \n-  [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduce-exports.])])  \n  -fi  \n-   \n  -LEVELDB_CPPFLAGS=  \n  -LIBLEVELDB=  \n  -LIBMEMENV=  \n  -AM_CONDITIONAL([EMBEDDED_LEVELDB],[true])  \n  -AC_SUBST(LEVELDB_CPPFLAGS)  \n  -AC_SUBST(LIBLEVELDB)  \n  -AC_SUBST(LIBMEMENV)  \n-   \n  -if test x$enable_wallet != xno; then  \n-    dnl Check for libdb_cxx only if wallet enabled  \n-    BITCOIN_FIND_BDB48  \n  -fi  \n-   \n  -dnl Check for libminiupnpc (optional)  \n  -if test x$use_upnp != xno; then  \n-  AC_CHECK_HEADERS(  \n-    [miniupnpc/miniwget.h miniupnpc/miniupnpc.h miniupnpc/upnpcommands.h miniupnpc/upnperrors.h],  \n-    [AC_CHECK_LIB([miniupnpc], [main],[MINIUPNPC_LIBS=-lminiupnpc], [have_miniupnpc=no])],  \n-    [have_miniupnpc=no]  \n-  )  \n  -fi  \n-   \n  -BITCOIN_QT_INIT  \n-   \n  -dnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus  \n  -BITCOIN_QT_CONFIGURE([$use_pkgconfig], [qt5])  \n-   \n  -if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests = xnononono; then  \n-    use_boost=no  \n  -else  \n-    use_boost=yes  \n  -fi  \n-   \n  -if test x$use_boost = xyes; then  \n-   \n  -dnl Check for boost libs  \n  -AX_BOOST_BASE  \n  -AX_BOOST_SYSTEM  \n  -AX_BOOST_FILESYSTEM  \n  -AX_BOOST_PROGRAM_OPTIONS  \n  -AX_BOOST_THREAD  \n  -AX_BOOST_CHRONO  \n## \n-   \n  -if test x$use_reduce_exports = xyes; then  \n-  AC_MSG_CHECKING([for working boost reduced exports])  \n-  TEMP_CPPFLAGS=\"$CPPFLAGS\"  \n-  CPPFLAGS=\"$BOOST_CPPFLAGS $CPPFLAGS\"  \n-  AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[  \n-      @%:@include <boost/version.hpp>  \n-    ]], [[  \n-      #if BOOST_VERSION >= 104900  \n-      // Everything is okay  \n-      #else  \n-      #  error Boost version is too old  \n-      #endif  \n-    ]])],[  \n-      AC_MSG_RESULT(yes)  \n-    ],[  \n-    AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduce-exports.])  \n-  ])  \n-  CPPFLAGS=\"$TEMP_CPPFLAGS\"  \n  -fi  \n  -fi  \n-   \n  -if test x$use_reduce_exports = xyes; then  \n-    CXXFLAGS=\"$CXXFLAGS $RE_CXXFLAGS\"  \n-    AX_CHECK_LINK_FLAG([[-Wl,--exclude-libs,ALL]], [RELDFLAGS=\"-Wl,--exclude-libs,ALL\"])  \n  -fi  \n-   \n  -if test x$use_tests = xyes; then  \n-   \n-  if test x$HEXDUMP = x; then  \n-    AC_MSG_ERROR(hexdump is required for tests)  \n## \\-  fi       \n-   \n## \\-  if test x$use_boost = xyes; then     \n## \\-  AX_BOOST_UNIT_TEST_FRAMEWORK     \n-  dnl Determine if -DBOOST_TEST_DYN_LINK is needed  \n-  AC_MSG_CHECKING([for dynamic linked boost test])  \n-  TEMP_LIBS=\"$LIBS\"  \n-  LIBS=\"$LIBS $BOOST_LDFLAGS $BOOST_UNIT_TEST_FRAMEWORK_LIB\"  \n-  TEMP_CPPFLAGS=\"$CPPFLAGS\"  \n-  CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"  \n-  AC_LINK_IFELSE([AC_LANG_SOURCE([  \n-       #define BOOST_TEST_DYN_LINK  \n-       #define BOOST_TEST_MAIN  \n## \\-        #include <boost/test/unit_test.hpp>        \n-       ])],  \n-    [AC_MSG_RESULT(yes)]  \n-    [TESTDEFS=\"$TESTDEFS -DBOOST_TEST_DYN_LINK\"],  \n-    [AC_MSG_RESULT(no)])  \n-  LIBS=\"$TEMP_LIBS\"  \n## \\-  CPPFLAGS=\"$TEMP_CPPFLAGS\"        \n-  fi  \n  -fi  \n-   \n  -if test x$use_boost = xyes; then  \n-   \n  -BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_PROGRAM_OPTIONS_LIB $BOOST_THREAD_LIB $BOOST_CHRONO_LIB\"  \n## \n-   \n  -dnl If boost (prior to 1.57) was built without c++11, it emulated scoped enums  \n  -dnl using c++98 constructs. Unfortunately, this implementation detail leaked into  \n  -dnl the abi. This was fixed in 1.57.  \n-   \n  -dnl When building against that installed version using c++11, the headers pick up  \n  -dnl on the native c++11 scoped enum support and enable it, however it will fail to  \n  -dnl link. This can be worked around by disabling c++11 scoped enums if linking will  \n  -dnl fail.  \n  -dnl BOOST_NO_SCOPED_ENUMS was changed to BOOST_NO_CXX11_SCOPED_ENUMS in 1.51.  \n-   \n  -TEMP_LIBS=\"$LIBS\"  \n  -LIBS=\"$BOOST_LIBS $LIBS\"  \n  -TEMP_CPPFLAGS=\"$CPPFLAGS\"  \n  -CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"  \n  -AC_MSG_CHECKING([for mismatched boost c++11 scoped enums])  \n  -AC_LINK_IFELSE([AC_LANG_PROGRAM([[  \n-  #include \"boost/config.hpp\"  \n-  #include \"boost/version.hpp\"  \n-  #if !defined(BOOST_NO_SCOPED_ENUMS) && !defined(BOOST_NO_CXX11_SCOPED_ENUMS) && BOOST_VERSION < 105700  \n-  #define BOOST_NO_SCOPED_ENUMS  \n-  #define BOOST_NO_CXX11_SCOPED_ENUMS  \n-  #define CHECK  \n-  #endif  \n-  #include \"boost/filesystem.hpp\"  \n-  ]],[[  \n-  #if defined(CHECK)  \n-    boost::filesystem::copy_file(\"foo\", \"bar\");  \n-  #else  \n-    choke;  \n-  #endif  \n-  ]])],  \n-  [AC_MSG_RESULT(mismatched); BOOST_CPPFLAGS=\"$BOOST_CPPFLAGS -DBOOST_NO_SCOPED_ENUMS -DBOOST_NO_CXX11_SCOPED_ENUMS\"], [AC_MSG_RESULT(ok)])  \n  -LIBS=\"$TEMP_LIBS\"  \n  -CPPFLAGS=\"$TEMP_CPPFLAGS\"  \n-   \n  -dnl Boost >= 1.50 uses sleep_for rather than the now-deprecated sleep, however  \n  -dnl it was broken from 1.50 to 1.52 when backed by nanosleep. Use sleep_for if  \n  -dnl a working version is available, else fall back to sleep. sleep was removed  \n  -dnl after 1.56.  \n  -dnl If neither is available, abort.  \n  -TEMP_LIBS=\"$LIBS\"  \n  -LIBS=\"$BOOST_LIBS $LIBS\"  \n  -TEMP_CPPFLAGS=\"$CPPFLAGS\"  \n  -CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"  \n  -AC_LINK_IFELSE([AC_LANG_PROGRAM([[  \n-  #include <boost/thread/thread.hpp>  \n-  #include <boost/version.hpp>  \n-  ]],[[  \n-  #if BOOST_VERSION >= 105000 && (!defined(BOOST_HAS_NANOSLEEP) || BOOST_VERSION >= 105200)  \n-      boost::this_thread::sleep_for(boost::chrono::milliseconds(0));  \n-  #else  \n-   choke me  \n-  #endif  \n-  ]])],  \n-  [boost_sleep=yes;  \n-     AC_DEFINE(HAVE_WORKING_BOOST_SLEEP_FOR, 1, [Define this symbol if boost sleep_for works])],  \n-  [boost_sleep=no])  \n  -LIBS=\"$TEMP_LIBS\"  \n  -CPPFLAGS=\"$TEMP_CPPFLAGS\"  \n-   \n  -if test x$boost_sleep != xyes; then  \n  -TEMP_LIBS=\"$LIBS\"  \n  -LIBS=\"$BOOST_LIBS $LIBS\"  \n  -TEMP_CPPFLAGS=\"$CPPFLAGS\"  \n  -CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"  \n  -AC_LINK_IFELSE([AC_LANG_PROGRAM([[  \n-  #include <boost/version.hpp>  \n-  #include <boost/thread.hpp>  \n-  #include <boost/date_time/posix_time/posix_time_types.hpp>  \n-  ]],[[  \n-  #if BOOST_VERSION <= 105600  \n-      boost::this_thread::sleep(boost::posix_time::milliseconds(0));  \n-  #else  \n-   choke me  \n-  #endif  \n-  ]])],  \n-  [boost_sleep=yes; AC_DEFINE(HAVE_WORKING_BOOST_SLEEP, 1, [Define this symbol if boost sleep works])],  \n-  [boost_sleep=no])  \n  -LIBS=\"$TEMP_LIBS\"  \n  -CPPFLAGS=\"$TEMP_CPPFLAGS\"  \n  -fi  \n-   \n  -if test x$boost_sleep != xyes; then  \n-  AC_MSG_ERROR(No working boost sleep implementation found.)  \n  -fi  \n-   \n  -fi  \n-   \n  -if test x$use_pkgconfig = xyes; then  \n-   \n-  if test x\"$PKG_CONFIG\" = \"x\"; then  \n-    AC_MSG_ERROR(pkg-config not found.)  \n## \\-  fi       \n-  : #NOP  \n-  m4_ifdef(  \n-    [PKG_CHECK_MODULES],  \n-    [  \n-      PKG_CHECK_MODULES([SSL], [libssl],, [AC_MSG_ERROR(openssl  not found.)])  \n-      PKG_CHECK_MODULES([CRYPTO], [libcrypto],,[AC_MSG_ERROR(libcrypto  not found.)])  \n-      BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [BITCOIN_QT_FAIL(libprotobuf not found)])])  \n-      if test x$use_qr != xno; then  \n-        BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])  \n-      fi  \n-      if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests != xnononono; then  \n-        PKG_CHECK_MODULES([EVENT], [libevent],, [AC_MSG_ERROR(libevent not found.)])  \n-        if test x$TARGET_OS != xwindows; then  \n-          PKG_CHECK_MODULES([EVENT_PTHREADS], [libevent_pthreads],, [AC_MSG_ERROR(libevent_pthreads not found.)])  \n-        fi  \n## \\-      fi       \n-      if test \"x$use_zmq\" = \"xyes\"; then  \n-        PKG_CHECK_MODULES([ZMQ],[libzmq >= 4],  \n-          [AC_DEFINE([ENABLE_ZMQ],[1],[Define to 1 to enable ZMQ functions])],  \n-          [AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])  \n-           AC_MSG_WARN([libzmq version 4.x or greater not found, disabling])  \n-           use_zmq=no])  \n-      else  \n-          AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])  \n-      fi  \n-    ]  \n-  )  \n  -else  \n-  AC_CHECK_HEADER([openssl/crypto.h],,AC_MSG_ERROR(libcrypto headers missing))  \n## \\-  AC_CHECK_LIB([crypto],      [main],CRYPTO_LIBS=-lcrypto, AC_MSG_ERROR(libcrypto missing))        \n-  AC_CHECK_HEADER([openssl/ssl.h],, AC_MSG_ERROR(libssl headers missing),)  \n## \\-  AC_CHECK_LIB([ssl],         [main],SSL_LIBS=-lssl, AC_MSG_ERROR(libssl missing))     \n-  if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests != xnononono; then  \n-    AC_CHECK_HEADER([event2/event.h],, AC_MSG_ERROR(libevent headers missing),)  \n-    AC_CHECK_LIB([event],[main],EVENT_LIBS=-levent,AC_MSG_ERROR(libevent missing))  \n-    if test x$TARGET_OS != xwindows; then  \n-      AC_CHECK_LIB([event_pthreads],[main],EVENT_PTHREADS_LIBS=-levent_pthreads,AC_MSG_ERROR(libevent_pthreads missing))  \n-    fi  \n## \\-  fi       \n-  if test \"x$use_zmq\" = \"xyes\"; then  \n-     AC_CHECK_HEADER([zmq.h],  \n-       [AC_DEFINE([ENABLE_ZMQ],[1],[Define to 1 to enable ZMQ functions])],  \n-       [AC_MSG_WARN([zmq.h not found, disabling zmq support])  \n-        use_zmq=no  \n-        AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])])  \n-     AC_CHECK_LIB([zmq],[zmq_ctx_shutdown],ZMQ_LIBS=-lzmq,  \n-       [AC_MSG_WARN([libzmq >= 4.0 not found, disabling zmq support])  \n-        use_zmq=no  \n-        AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])])  \n-  else  \n-    AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])  \n## \\-  fi       \n-  BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], BITCOIN_QT_FAIL(libprotobuf not found)))  \n-  if test x$use_qr != xno; then  \n-    BITCOIN_QT_CHECK([AC_CHECK_LIB([qrencode], [main],[QR_LIBS=-lqrencode], [have_qrencode=no])])  \n-    BITCOIN_QT_CHECK([AC_CHECK_HEADER([qrencode.h],, have_qrencode=no)])  \n-  fi  \n  -fi  \n-   \n  -dnl univalue check  \n-   \n  -if test x$system_univalue != xno ; then  \n-  found_univalue=no  \n-  if test x$use_pkgconfig = xyes; then  \n-    : #NOP  \n-    m4_ifdef(  \n-      [PKG_CHECK_MODULES],  \n-      [  \n-        PKG_CHECK_MODULES([UNIVALUE],[libunivalue],[found_univalue=yes],[true])  \n-      ]  \n-    )  \n-  else  \n-    AC_CHECK_HEADER([univalue.h],[  \n-      AC_CHECK_LIB([univalue],  [main],[  \n-        UNIVALUE_LIBS=-lunivalue  \n-        found_univalue=yes  \n-      ],[true])  \n-    ],[true])  \n## \\-  fi       \n-  if test x$found_univalue = xyes ; then  \n-    system_univalue=yes  \n-  elif test x$system_univalue = xyes ; then  \n-    AC_MSG_ERROR([univalue not found])  \n-  else  \n-    system_univalue=no  \n-  fi  \n  -fi  \n-   \n  -if test x$system_univalue = xno ; then  \n-  UNIVALUE_CFLAGS='-I$(srcdir)/univalue/include'  \n-  UNIVALUE_LIBS='univalue/libunivalue.la'  \n  -fi  \n  -AM_CONDITIONAL([EMBEDDED_UNIVALUE],[test x$system_univalue = xno])  \n  -AC_SUBST(UNIVALUE_CFLAGS)  \n  -AC_SUBST(UNIVALUE_LIBS)  \n-   \n  -CXXFLAGS_TEMP=\"$CXXFLAGS\"  \n  -LIBS_TEMP=\"$LIBS\"  \n  -CXXFLAGS=\"$CXXFLAGS $SSL_CFLAGS $CRYPTO_CFLAGS\"  \n  -LIBS=\"$LIBS $SSL_LIBS $CRYPTO_LIBS\"  \n  -AC_CHECK_HEADER([openssl/ec.h],, AC_MSG_ERROR(OpenSSL ec header missing),)  \n  -CXXFLAGS=\"$CXXFLAGS_TEMP\"  \n  -LIBS=\"$LIBS_TEMP\"  \n-   \n  -BITCOIN_QT_PATH_PROGS([PROTOC], [protoc],$protoc_bin_path)  \n-   \n  -AC_MSG_CHECKING([whether to build bitcoind])  \n  -AM_CONDITIONAL([BUILD_BITCOIND], [test x$build_bitcoind = xyes])  \n  -AC_MSG_RESULT($build_bitcoind)  \n-   \n  -AC_MSG_CHECKING([whether to build utils (bitcoin-cli bitcoin-tx)])  \n  -AM_CONDITIONAL([BUILD_BITCOIN_UTILS], [test x$build_bitcoin_utils = xyes])  \n  -AC_MSG_RESULT($build_bitcoin_utils)  \n-   \n  -AC_MSG_CHECKING([whether to build libraries])  \n  -AM_CONDITIONAL([BUILD_BITCOIN_LIBS], [test x$build_bitcoin_libs = xyes])  \n  -if test x$build_bitcoin_libs = xyes; then  \n-  AC_DEFINE(HAVE_CONSENSUS_LIB, 1, [Define this symbol if the consensus lib has been built])  \n-  AC_CONFIG_FILES([libbitcoinconsensus.pc:libbitcoinconsensus.pc.in])  \n  -fi  \n  -AC_MSG_RESULT($build_bitcoin_libs)  \n-   \n  -AC_LANG_POP  \n-   \n  -if test \"x$use_ccache\" != \"xno\"; then  \n-  AC_MSG_CHECKING(if ccache should be used)  \n-  if test x$CCACHE = x; then  \n-    if test \"x$use_ccache\" = \"xyes\"; then  \n-      AC_MSG_ERROR([ccache not found.]);  \n-    else  \n-      use_ccache=no  \n-    fi  \n-  else  \n-    use_ccache=yes  \n-    CC=\"$ac_cv_path_CCACHE $CC\"  \n-    CXX=\"$ac_cv_path_CCACHE $CXX\"  \n-  fi  \n-  AC_MSG_RESULT($use_ccache)  \n  -fi  \n  -if test \"x$use_ccache\" = \"xyes\"; then  \n-    AX_CHECK_PREPROC_FLAG([-Qunused-arguments],[CPPFLAGS=\"-Qunused-arguments $CPPFLAGS\"])  \n  -fi  \n-   \n  -dnl enable wallet  \n  -AC_MSG_CHECKING([if wallet should be enabled])  \n  -if test x$enable_wallet != xno; then  \n-  AC_MSG_RESULT(yes)  \n## \\-  AC_DEFINE_UNQUOTED([ENABLE_WALLET],[1],[Define to 1 to enable wallet functions])     \n\n-else       \n-  AC_MSG_RESULT(no)  \n  -fi  \n-   \n  -dnl enable upnp support  \n  -AC_MSG_CHECKING([whether to build with support for UPnP])  \n  -if test x$have_miniupnpc = xno; then  \n-  if test x$use_upnp = xyes; then  \n-     AC_MSG_ERROR(\"UPnP requested but cannot be built. use --without-miniupnpc\")  \n-  fi  \n-  AC_MSG_RESULT(no)  \n  -else  \n-  if test x$use_upnp != xno; then  \n-    AC_MSG_RESULT(yes)  \n-    AC_MSG_CHECKING([whether to build with UPnP enabled by default])  \n-    use_upnp=yes  \n-    upnp_setting=0  \n-    if test x$use_upnp_default != xno; then  \n-      use_upnp_default=yes  \n-      upnp_setting=1  \n-    fi  \n-    AC_MSG_RESULT($use_upnp_default)  \n-    AC_DEFINE_UNQUOTED([USE_UPNP],[$upnp_setting],[UPnP support not compiled if undefined, otherwise value (0 or 1) determines default state])  \n-    if test x$TARGET_OS = xwindows; then  \n-      MINIUPNPC_CPPFLAGS=\"-DSTATICLIB -DMINIUPNP_STATICLIB\"  \n-    fi  \n-  else  \n-    AC_MSG_RESULT(no)  \n-  fi  \n  -fi  \n-   \n  -dnl these are only used when qt is enabled  \n  -BUILD_TEST_QT=\"\"  \n  -if test x$bitcoin_enable_qt != xno; then  \n-  dnl enable dbus support  \n-  AC_MSG_CHECKING([whether to build GUI with support for D-Bus])  \n-  if test x$bitcoin_enable_qt_dbus != xno; then  \n-    AC_DEFINE([USE_DBUS],[1],[Define if dbus support should be compiled in])  \n-  fi  \n## \\-  AC_MSG_RESULT($bitcoin_enable_qt_dbus)       \n-  dnl enable qr support  \n-  AC_MSG_CHECKING([whether to build GUI with support for QR codes])  \n-  if test x$have_qrencode = xno; then  \n-    if test x$use_qr = xyes; then  \n-     AC_MSG_ERROR(\"QR support requested but cannot be built. use --without-qrencode\")  \n-    fi  \n-    AC_MSG_RESULT(no)  \n-  else  \n-    if test x$use_qr != xno; then  \n-      AC_MSG_RESULT(yes)  \n-      AC_DEFINE([USE_QRCODE],[1],[Define if QR support should be compiled in])  \n-      use_qr=yes  \n-    else  \n-      AC_MSG_RESULT(no)  \n-    fi  \n## \\-  fi       \n-  if test x$XGETTEXT = x; then  \n-    AC_MSG_WARN(\"xgettext is required to update qt translations\")  \n## \\-  fi       \n-  AC_MSG_CHECKING([whether to build test_bitcoin-qt])  \n-  if test x$use_gui_tests$bitcoin_enable_qt_test = xyesyes; then  \n-    AC_MSG_RESULT([yes])  \n-    BUILD_TEST_QT=\"yes\"  \n-  else  \n-    AC_MSG_RESULT([no])  \n-  fi  \n  -fi  \n-   \n  -AM_CONDITIONAL([ENABLE_ZMQ], [test \"x$use_zmq\" = \"xyes\"])  \n-   \n  -AC_MSG_CHECKING([whether to build test_bitcoin])  \n  -if test x$use_tests = xyes; then  \n-  AC_MSG_RESULT([yes])  \n-  BUILD_TEST=\"yes\"  \n  -else  \n-  AC_MSG_RESULT([no])  \n-  BUILD_TEST=\"\"  \n  -fi  \n-   \n  -AC_MSG_CHECKING([whether to reduce exports])  \n  -if test x$use_reduce_exports = xyes; then  \n-  AC_MSG_RESULT([yes])  \n  -else  \n-  AC_MSG_RESULT([no])  \n  -fi  \n-   \n  -if test x$build_bitcoin_utils$build_bitcoin_libs$build_bitcoind$bitcoin_enable_qt$use_tests = xnonononono; then  \n-  AC_MSG_ERROR([No targets! Please specify at least one of: --with-utils --with-libs --with-daemon --with-gui or --enable-tests])  \n  -fi  \n-   \n  -AM_CONDITIONAL([TARGET_DARWIN], [test x$TARGET_OS = xdarwin])  \n  -AM_CONDITIONAL([BUILD_DARWIN], [test x$BUILD_OS = xdarwin])  \n  -AM_CONDITIONAL([TARGET_WINDOWS], [test x$TARGET_OS = xwindows])  \n  -AM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet = xyes])  \n  -AM_CONDITIONAL([ENABLE_TESTS],[test x$BUILD_TEST = xyes])  \n  -AM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt = xyes])  \n  -AM_CONDITIONAL([ENABLE_QT_TESTS],[test x$BUILD_TEST_QT = xyes])  \n  -AM_CONDITIONAL([ENABLE_BENCH],[test x$use_bench = xyes])  \n  -AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])  \n  -AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])  \n  -AM_CONDITIONAL([USE_COMPARISON_TOOL],[test x$use_comparison_tool != xno])  \n  -AM_CONDITIONAL([USE_COMPARISON_TOOL_REORG_TESTS],[test x$use_comparison_tool_reorg_test != xno])  \n  -AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])  \n  -AM_CONDITIONAL([HARDEN],[test x$use_hardening = xyes])  \n-   \n  -AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])  \n  -AC_DEFINE(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR, [Minor version])  \n  -AC_DEFINE(CLIENT_VERSION_REVISION, _CLIENT_VERSION_REVISION, [Build revision])  \n  -AC_DEFINE(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD, [Version Build])  \n  -AC_DEFINE(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE, [Version is release])  \n  -AC_DEFINE(COPYRIGHT_YEAR, _COPYRIGHT_YEAR, [Copyright year])  \n  -AC_DEFINE(COPYRIGHT_HOLDERS, \"_COPYRIGHT_HOLDERS\", [Copyright holder(s) before %s replacement])  \n  -AC_DEFINE(COPYRIGHT_HOLDERS_SUBSTITUTION, \"_COPYRIGHT_HOLDERS_SUBSTITUTION\", [Replacement for %s in copyright holders string])  \n  -define(_COPYRIGHT_HOLDERS_FINAL, [patsubst(_COPYRIGHT_HOLDERS, [%s], [_COPYRIGHT_HOLDERS_SUBSTITUTION])])  \n  -AC_DEFINE(COPYRIGHT_HOLDERS_FINAL, \"_COPYRIGHT_HOLDERS_FINAL\", [Copyright holder(s)])  \n  -AC_SUBST(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR)  \n  -AC_SUBST(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR)  \n  -AC_SUBST(CLIENT_VERSION_REVISION, _CLIENT_VERSION_REVISION)  \n  -AC_SUBST(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD)  \n  -AC_SUBST(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE)  \n  -AC_SUBST(COPYRIGHT_YEAR, _COPYRIGHT_YEAR)  \n  -AC_SUBST(COPYRIGHT_HOLDERS, \"_COPYRIGHT_HOLDERS\")  \n  -AC_SUBST(COPYRIGHT_HOLDERS_SUBSTITUTION, \"_COPYRIGHT_HOLDERS_SUBSTITUTION\")  \n  -AC_SUBST(COPYRIGHT_HOLDERS_FINAL, \"_COPYRIGHT_HOLDERS_FINAL\")  \n-   \n  -AC_SUBST(RELDFLAGS)  \n  -AC_SUBST(HARDENED_CXXFLAGS)  \n  -AC_SUBST(HARDENED_CPPFLAGS)  \n  -AC_SUBST(HARDENED_LDFLAGS)  \n  -AC_SUBST(PIC_FLAGS)  \n  -AC_SUBST(PIE_FLAGS)  \n  -AC_SUBST(LIBTOOL_APP_LDFLAGS)  \n  -AC_SUBST(USE_UPNP)  \n  -AC_SUBST(USE_QRCODE)  \n  -AC_SUBST(BOOST_LIBS)  \n  -AC_SUBST(TESTDEFS)  \n  -AC_SUBST(LEVELDB_TARGET_FLAGS)  \n  -AC_SUBST(MINIUPNPC_CPPFLAGS)  \n  -AC_SUBST(MINIUPNPC_LIBS)  \n  -AC_CONFIG_FILES([Makefile src/Makefile share/setup.nsi share/qt/Info.plist src/test/buildenv.py])  \n  -AC_CONFIG_FILES([qa/pull-tester/run-bitcoind-for-test.sh],[chmod +x qa/pull-tester/run-bitcoind-for-test.sh])  \n  -AC_CONFIG_FILES([qa/pull-tester/tests_config.py],[chmod +x qa/pull-tester/tests_config.py])  \n-   \n  -dnl boost's m4 checks do something really nasty: they export these vars. As a  \n  -dnl result, they leak into secp256k1's configure and crazy things happen.  \n  -dnl Until this is fixed upstream and we've synced, we'll just un-export them.  \n  -CPPFLAGS_TEMP=\"$CPPFLAGS\"  \n  -unset CPPFLAGS  \n  -CPPFLAGS=\"$CPPFLAGS_TEMP\"  \n-   \n  -LDFLAGS_TEMP=\"$LDFLAGS\"  \n  -unset LDFLAGS  \n  -LDFLAGS=\"$LDFLAGS_TEMP\"  \n-   \n  -LIBS_TEMP=\"$LIBS\"  \n  -unset LIBS  \n  -LIBS=\"$LIBS_TEMP\"  \n-   \n  -PKGCONFIG_PATH_TEMP=\"$PKG_CONFIG_PATH\"  \n  -unset PKG_CONFIG_PATH  \n  -PKG_CONFIG_PATH=\"$PKGCONFIG_PATH_TEMP\"  \n-   \n  -PKGCONFIG_LIBDIR_TEMP=\"$PKG_CONFIG_LIBDIR\"  \n  -unset PKG_CONFIG_LIBDIR  \n  -PKG_CONFIG_LIBDIR=\"$PKGCONFIG_LIBDIR_TEMP\"  \n-   \n  -if test x$system_univalue = xno; then  \n-  AC_CONFIG_SUBDIRS([src/univalue])  \n  -fi  \n-   \n  -ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --with-bignum=no --enable-module-recovery\"  \n  -AC_CONFIG_SUBDIRS([src/secp256k1])  \n-   \n  -AC_OUTPUT  \n-   \n  -dnl Taken from https://wiki.debian.org/RpathIssue  \n  -case $host in  \n-   _-_-linux-gnu)  \n-     AC_MSG_RESULT([Fixing libtool for -rpath problems.])  \n-     sed < libtool > libtool-2 \\  \n-     's/^hardcode_libdir_flag_spec.*$'/'hardcode_libdir_flag_spec=\" -D__LIBTOOL_IS_A_FOOL__ \"/'  \n-     mv libtool-2 libtool  \n-     chmod 755 libtool  \n-   ;;  \n  -esac  \n-   \n  -dnl Replace the BUILDDIR path with the correct Windows path if compiling on Native Windows  \n  -case ${OS} in  \n-   _Windows_)  \n-     sed  's/BUILDDIR=\"\\/([[a-z]])/BUILDDIR=\"\\1:/'  qa/pull-tester/tests_config.py > qa/pull-tester/tests_config-2.py  \n-     mv qa/pull-tester/tests_config-2.py qa/pull-tester/tests_config.py  \n-   ;;  \n  -esac  \n  @mrCertified\n  Propose file change\n\nDeleted revive to al data sourceconfigure.ac\n\nAdd an optional extended descriptionÃ¢ÂÂ¦\nPropose file change  Returned\nStatus API Training Shop Blog About\nÃÂ© 2016 GitHub, Inc. Terms Privacy Security Contact Help\n",
   "changed_files" : 1,
   "closed_at" : "2016-05-31T13:44:55Z",
   "comments" : 1,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7867/comments",
   "commits" : 1,
   "commits_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7867/commits",
   "created_at" : "2016-04-13T02:20:41Z",
   "deletions" : 1090,
   "diff_url" : "https://github.com/bitcoin/bitcoin/pull/7867.diff",
   "head" : {
      "label" : "mrCertified:patch-1",
      "ref" : "patch-1",
      "repo" : {
         "archive_url" : "https://api.github.com/repos/mrCertified/bitcoin/{archive_format}{/ref}",
         "archived" : false,
         "assignees_url" : "https://api.github.com/repos/mrCertified/bitcoin/assignees{/user}",
         "blobs_url" : "https://api.github.com/repos/mrCertified/bitcoin/git/blobs{/sha}",
         "branches_url" : "https://api.github.com/repos/mrCertified/bitcoin/branches{/branch}",
         "clone_url" : "https://github.com/mrCertified/bitcoin.git",
         "collaborators_url" : "https://api.github.com/repos/mrCertified/bitcoin/collaborators{/collaborator}",
         "comments_url" : "https://api.github.com/repos/mrCertified/bitcoin/comments{/number}",
         "commits_url" : "https://api.github.com/repos/mrCertified/bitcoin/commits{/sha}",
         "compare_url" : "https://api.github.com/repos/mrCertified/bitcoin/compare/{base}...{head}",
         "contents_url" : "https://api.github.com/repos/mrCertified/bitcoin/contents/{+path}",
         "contributors_url" : "https://api.github.com/repos/mrCertified/bitcoin/contributors",
         "created_at" : "2016-04-13T02:13:19Z",
         "default_branch" : "master",
         "deployments_url" : "https://api.github.com/repos/mrCertified/bitcoin/deployments",
         "description" : "Bitcoin Core integration/staging tree",
         "downloads_url" : "https://api.github.com/repos/mrCertified/bitcoin/downloads",
         "events_url" : "https://api.github.com/repos/mrCertified/bitcoin/events",
         "fork" : true,
         "forks" : 0,
         "forks_count" : 0,
         "forks_url" : "https://api.github.com/repos/mrCertified/bitcoin/forks",
         "full_name" : "mrCertified/bitcoin",
         "git_commits_url" : "https://api.github.com/repos/mrCertified/bitcoin/git/commits{/sha}",
         "git_refs_url" : "https://api.github.com/repos/mrCertified/bitcoin/git/refs{/sha}",
         "git_tags_url" : "https://api.github.com/repos/mrCertified/bitcoin/git/tags{/sha}",
         "git_url" : "git://github.com/mrCertified/bitcoin.git",
         "has_downloads" : false,
         "has_issues" : false,
         "has_pages" : false,
         "has_projects" : true,
         "has_wiki" : false,
         "homepage" : "https://bitcoin.org/en/download",
         "hooks_url" : "https://api.github.com/repos/mrCertified/bitcoin/hooks",
         "html_url" : "https://github.com/mrCertified/bitcoin",
         "id" : 56113421,
         "issue_comment_url" : "https://api.github.com/repos/mrCertified/bitcoin/issues/comments{/number}",
         "issue_events_url" : "https://api.github.com/repos/mrCertified/bitcoin/issues/events{/number}",
         "issues_url" : "https://api.github.com/repos/mrCertified/bitcoin/issues{/number}",
         "keys_url" : "https://api.github.com/repos/mrCertified/bitcoin/keys{/key_id}",
         "labels_url" : "https://api.github.com/repos/mrCertified/bitcoin/labels{/name}",
         "language" : "C++",
         "languages_url" : "https://api.github.com/repos/mrCertified/bitcoin/languages",
         "license" : {
            "key" : "mit",
            "name" : "MIT License",
            "spdx_id" : "MIT",
            "url" : "https://api.github.com/licenses/mit"
         },
         "merges_url" : "https://api.github.com/repos/mrCertified/bitcoin/merges",
         "milestones_url" : "https://api.github.com/repos/mrCertified/bitcoin/milestones{/number}",
         "mirror_url" : null,
         "name" : "bitcoin",
         "notifications_url" : "https://api.github.com/repos/mrCertified/bitcoin/notifications{?since,all,participating}",
         "open_issues" : 0,
         "open_issues_count" : 0,
         "owner" : {
            "avatar_url" : "https://avatars0.githubusercontent.com/u/6655094?v=4",
            "events_url" : "https://api.github.com/users/mrCertified/events{/privacy}",
            "followers_url" : "https://api.github.com/users/mrCertified/followers",
            "following_url" : "https://api.github.com/users/mrCertified/following{/other_user}",
            "gists_url" : "https://api.github.com/users/mrCertified/gists{/gist_id}",
            "gravatar_id" : "",
            "html_url" : "https://github.com/mrCertified",
            "id" : 6655094,
            "login" : "mrCertified",
            "organizations_url" : "https://api.github.com/users/mrCertified/orgs",
            "received_events_url" : "https://api.github.com/users/mrCertified/received_events",
            "repos_url" : "https://api.github.com/users/mrCertified/repos",
            "site_admin" : false,
            "starred_url" : "https://api.github.com/users/mrCertified/starred{/owner}{/repo}",
            "subscriptions_url" : "https://api.github.com/users/mrCertified/subscriptions",
            "type" : "User",
            "url" : "https://api.github.com/users/mrCertified"
         },
         "private" : false,
         "pulls_url" : "https://api.github.com/repos/mrCertified/bitcoin/pulls{/number}",
         "pushed_at" : "2016-05-03T18:06:10Z",
         "releases_url" : "https://api.github.com/repos/mrCertified/bitcoin/releases{/id}",
         "size" : 65867,
         "ssh_url" : "git@github.com:mrCertified/bitcoin.git",
         "stargazers_count" : 0,
         "stargazers_url" : "https://api.github.com/repos/mrCertified/bitcoin/stargazers",
         "statuses_url" : "https://api.github.com/repos/mrCertified/bitcoin/statuses/{sha}",
         "subscribers_url" : "https://api.github.com/repos/mrCertified/bitcoin/subscribers",
         "subscription_url" : "https://api.github.com/repos/mrCertified/bitcoin/subscription",
         "svn_url" : "https://github.com/mrCertified/bitcoin",
         "tags_url" : "https://api.github.com/repos/mrCertified/bitcoin/tags",
         "teams_url" : "https://api.github.com/repos/mrCertified/bitcoin/teams",
         "trees_url" : "https://api.github.com/repos/mrCertified/bitcoin/git/trees{/sha}",
         "updated_at" : "2016-04-13T02:13:30Z",
         "url" : "https://api.github.com/repos/mrCertified/bitcoin",
         "watchers" : 0,
         "watchers_count" : 0
      },
      "sha" : "06beb06a415322dbf57352cae32ea18c53309f77",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6655094?v=4",
         "events_url" : "https://api.github.com/users/mrCertified/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mrCertified/followers",
         "following_url" : "https://api.github.com/users/mrCertified/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mrCertified/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mrCertified",
         "id" : 6655094,
         "login" : "mrCertified",
         "organizations_url" : "https://api.github.com/users/mrCertified/orgs",
         "received_events_url" : "https://api.github.com/users/mrCertified/received_events",
         "repos_url" : "https://api.github.com/users/mrCertified/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mrCertified/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mrCertified/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mrCertified"
      }
   },
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/7867",
   "id" : 66256808,
   "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7867",
   "labels" : [],
   "locked" : false,
   "maintainer_can_modify" : false,
   "merge_commit_sha" : "9d37bdd398ac4beec594936047daec756ca825c0",
   "mergeable" : false,
   "mergeable_state" : "dirty",
   "merged" : false,
   "merged_at" : null,
   "merged_by" : null,
   "milestone" : null,
   "number" : 7867,
   "patch_url" : "https://github.com/bitcoin/bitcoin/pull/7867.patch",
   "rebaseable" : false,
   "requested_reviewers" : [],
   "requested_teams" : [],
   "review_comment_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments{/number}",
   "review_comments" : 0,
   "review_comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7867/comments",
   "state" : "closed",
   "statuses_url" : "https://api.github.com/repos/bitcoin/bitcoin/statuses/06beb06a415322dbf57352cae32ea18c53309f77",
   "title" : "deleted restored sampler Configure.ac restored bits to all networks =(%master%masterCode[{rLi}])",
   "updated_at" : "2016-05-31T13:44:56Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7867",
   "user" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/6655094?v=4",
      "events_url" : "https://api.github.com/users/mrCertified/events{/privacy}",
      "followers_url" : "https://api.github.com/users/mrCertified/followers",
      "following_url" : "https://api.github.com/users/mrCertified/following{/other_user}",
      "gists_url" : "https://api.github.com/users/mrCertified/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/mrCertified",
      "id" : 6655094,
      "login" : "mrCertified",
      "organizations_url" : "https://api.github.com/users/mrCertified/orgs",
      "received_events_url" : "https://api.github.com/users/mrCertified/received_events",
      "repos_url" : "https://api.github.com/users/mrCertified/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/mrCertified/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/mrCertified/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/mrCertified"
   }
}
