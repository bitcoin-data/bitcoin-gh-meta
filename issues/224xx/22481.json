{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "Apply the rule of five to `src/util/epochguard.h::{Epoch, Marker}` for safety, which also nicely fixes the `-Wdeprecated-copy` compiler warnings with Clang 13.\r\n\r\nReferences:\r\n\r\n- https://en.cppreference.com/w/cpp/language/rule_of_three\r\n- https://www.stroustrup.com/C++11FAQ.html#default\r\n- https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-five\r\n\r\n<details><summary>Compiler warnings fixed</summary><p>\r\n\r\n```bash\r\nIn file included from policy/rbf.cpp:5:\r\nIn file included from ./policy/rbf.h:8:\r\nIn file included from ./txmempool.h:24:\r\n./util/epochguard.h:53:17: warning: definition of implicit copy constructor for 'Marker' is deprecated because it has a user-declared copy assignment operator [-Wdeprecated-copy]\r\n        Marker& operator=(const Marker&) = delete;\r\n                ^\r\n./txmempool.h:81:7: note: in implicit copy constructor for 'Epoch::Marker' first required here\r\nclass CTxMemPoolEntry\r\n      ^\r\npolicy/rbf.cpp:29:29: note: in implicit copy constructor for 'CTxMemPoolEntry' first required here\r\n    CTxMemPoolEntry entry = *pool.mapTx.find(tx.GetHash());\r\n```\r\n\r\n```bash\r\nIn file included from txmempool.cpp:6:\r\nIn file included from ./txmempool.h:24:\r\n./util/epochguard.h:53:17: warning: definition of implicit copy constructor for 'Marker' is deprecated because it has a user-declared copy assignment operator [-Wdeprecated-copy]\r\n        Marker& operator=(const Marker&) = delete;\r\n                ^\r\n./txmempool.h:81:7: note: in implicit copy constructor for 'Epoch::Marker' first required here\r\nclass CTxMemPoolEntry\r\n      ^\r\n/usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/ext/new_allocator.h:150:23: note: in implicit copy constructor for 'CTxMemPoolEntry' first required here\r\n        { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\r\n                             ^\r\n/usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/alloc_traits.h:512:8: note: in instantiation of function template specialization '__gnu_cxx::new_allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry>>>>>>>>::construct<CTxMemPoolEntry, const CTxMemPoolEntry &>' requested here\r\n          __a.construct(__p, std::forward<_Args>(__args)...);\r\n              ^\r\n/usr/include/boost/multi_index_container.hpp:655:24: note: in instantiation of function template specialization 'std::allocator_traits<std::allocator<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::hashed_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<CTxMemPoolEntry, std::allocator<CTxMemPoolEntry>>>>>>>>>::construct<CTxMemPoolEntry, const CTxMemPoolEntry &>' requested here\r\n    node_alloc_traits::construct(\r\n                       ^\r\n/usr/include/boost/multi_index/detail/index_base.hpp:108:15: note: in instantiation of member function 'boost::multi_index::multi_index_container<CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher>, boost::multi_index::hashed_unique<boost::multi_index::tag<index_by_wtxid>, mempoolentry_wtxid, SaltedTxidHasher>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>>>::construct_value' requested here\r\n      final().construct_value(x,v);\r\n              ^\r\n/usr/include/boost/multi_index/detail/ord_index_impl.hpp:770:33: note: (skipping 5 contexts in backtrace; use -ftemplate-backtrace-limit=0 to see all)\r\n    final_node_type* res=super::insert_(v,x,variant);\r\n                                ^\r\n/usr/include/boost/multi_index_container.hpp:693:33: note: in instantiation of function template specialization 'boost::multi_index::detail::hashed_index<mempoolentry_txid, SaltedTxidHasher, std::equal_to<uint256>, boost::multi_index::detail::nth_layer<1, CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher>, boost::multi_index::hashed_unique<boost::multi_index::tag<index_by_wtxid>, mempoolentry_wtxid, SaltedTxidHasher>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>>, std::allocator<CTxMemPoolEntry>>, boost::mpl::vector0<>, boost::multi_index::detail::hashed_unique_tag>::insert_<boost::multi_index::detail::lvalue_tag>' requested here\r\n    final_node_type* res=super::insert_(v,x,variant);\r\n                                ^\r\n/usr/include/boost/multi_index_container.hpp:705:12: note: in instantiation of function template specialization 'boost::multi_index::multi_index_container<CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher>, boost::multi_index::hashed_unique<boost::multi_index::tag<index_by_wtxid>, mempoolentry_wtxid, SaltedTxidHasher>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>>>::insert_<boost::multi_index::detail::lvalue_tag>' requested here\r\n    return insert_(v,detail::lvalue_tag());\r\n           ^\r\n/usr/include/boost/multi_index/detail/index_base.hpp:213:21: note: in instantiation of member function 'boost::multi_index::multi_index_container<CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher>, boost::multi_index::hashed_unique<boost::multi_index::tag<index_by_wtxid>, mempoolentry_wtxid, SaltedTxidHasher>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>>>::insert_' requested here\r\n    {return final().insert_(x);}\r\n                    ^\r\n/usr/include/boost/multi_index/hashed_index.hpp:284:46: note: in instantiation of member function 'boost::multi_index::detail::index_base<CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher>, boost::multi_index::hashed_unique<boost::multi_index::tag<index_by_wtxid>, mempoolentry_wtxid, SaltedTxidHasher>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>>, std::allocator<CTxMemPoolEntry>>::final_insert_' requested here\r\n    std::pair<final_node_type*,bool> p=this->final_insert_(x);\r\n                                             ^\r\ntxmempool.cpp:363:53: note: in instantiation of member function 'boost::multi_index::detail::hashed_index<mempoolentry_txid, SaltedTxidHasher, std::equal_to<uint256>, boost::multi_index::detail::nth_layer<1, CTxMemPoolEntry, boost::multi_index::indexed_by<boost::multi_index::hashed_unique<mempoolentry_txid, SaltedTxidHasher>, boost::multi_index::hashed_unique<boost::multi_index::tag<index_by_wtxid>, mempoolentry_wtxid, SaltedTxidHasher>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<descendant_score>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByDescendantScore>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<entry_time>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByEntryTime>, boost::multi_index::ordered_non_unique<boost::multi_index::tag<ancestor_score>, boost::multi_index::identity<CTxMemPoolEntry>, CompareTxMemPoolEntryByAncestorFee>>, std::allocator<CTxMemPoolEntry>>, boost::mpl::vector0<>, boost::multi_index::detail::hashed_unique_tag>::insert' requested here\r\n    indexed_transaction_set::iterator newit = mapTx.insert(entry).first;\r\n```\r\n\r\n```bash\r\nIn file included from test/fuzz/policy_estimator.cpp:9:\r\nIn file included from ./test/fuzz/util.h:27:\r\nIn file included from ./txmempool.h:24:\r\n./util/epochguard.h:53:17: warning: definition of implicit copy constructor for 'Marker' is deprecated because it has a user-declared copy assignment operator [-Wdeprecated-copy]\r\n        Marker& operator=(const Marker&) = delete;\r\n                ^\r\n./txmempool.h:81:7: note: in implicit copy constructor for 'Epoch::Marker' first required here\r\nclass CTxMemPoolEntry\r\n      ^\r\n/usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/ext/new_allocator.h:150:23: note: in implicit move constructor for 'CTxMemPoolEntry' first required here\r\n        { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\r\n                             ^\r\n/usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/alloc_traits.h:512:8: note: in instantiation of function template specialization '__gnu_cxx::new_allocator<CTxMemPoolEntry>::construct<CTxMemPoolEntry, CTxMemPoolEntry>' requested here\r\n          __a.construct(__p, std::forward<_Args>(__args)...);\r\n              ^\r\n/usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/vector.tcc:115:21: note: in instantiation of function template specialization 'std::allocator_traits<std::allocator<CTxMemPoolEntry>>::construct<CTxMemPoolEntry, CTxMemPoolEntry>' requested here\r\n            _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,\r\n                           ^\r\n/usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/stl_vector.h:1204:9: note: in instantiation of function template specialization 'std::vector<CTxMemPoolEntry>::emplace_back<CTxMemPoolEntry>' requested here\r\n      { emplace_back(std::move(__x)); }\r\n        ^\r\ntest/fuzz/policy_estimator.cpp:49:37: note: in instantiation of member function 'std::vector<CTxMemPoolEntry>::push_back' requested here\r\n                    mempool_entries.push_back(ConsumeTxMemPoolEntry(fuzzed_data_provider, tx));\r\n```\r\n</p></details>\r\n",
   "closed_at" : "2021-07-22T12:57:56Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
      "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
      "followers_url" : "https://api.github.com/users/laanwj/followers",
      "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/laanwj",
      "id" : 126646,
      "login" : "laanwj",
      "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
      "organizations_url" : "https://api.github.com/users/laanwj/orgs",
      "received_events_url" : "https://api.github.com/users/laanwj/received_events",
      "repos_url" : "https://api.github.com/users/laanwj/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/laanwj"
   },
   "comments" : 4,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22481/comments",
   "created_at" : "2021-07-18T00:06:25Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22481/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/22481",
   "id" : 946921788,
   "labels" : [
      {
         "color" : "fef2c0",
         "default" : false,
         "description" : null,
         "id" : 164208572,
         "name" : "Mempool",
         "node_id" : "MDU6TGFiZWwxNjQyMDg1NzI=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool"
      },
      {
         "color" : "5319e7",
         "default" : false,
         "description" : "",
         "id" : 241832923,
         "name" : "Utils/log/libs",
         "node_id" : "MDU6TGFiZWwyNDE4MzI5MjM=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22481/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDExOlB1bGxSZXF1ZXN0NjkyMDA2MzA1",
   "number" : 22481,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/22481.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22481",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/22481.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22481"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "mempool: apply rule of 5 to epochguard.h, fix compiler warnings",
   "updated_at" : "2021-07-22T13:18:36Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22481",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
      "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
      "followers_url" : "https://api.github.com/users/jonatack/followers",
      "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/jonatack",
      "id" : 2415484,
      "login" : "jonatack",
      "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
      "organizations_url" : "https://api.github.com/users/jonatack/orgs",
      "received_events_url" : "https://api.github.com/users/jonatack/received_events",
      "repos_url" : "https://api.github.com/users/jonatack/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/jonatack"
   }
}
