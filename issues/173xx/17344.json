{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "I've compiled a list of commonly enabled compiler diagnostics that we are currently choosing not to enable.\r\n\r\nThis is the list:\r\n\r\n| Compiler diagnostic | no# of emitted unique GCC warnings in `master` | no# of emitted unique Clang warnings in `master` |\r\n| ------------- | ------------- | ------------- |\r\n| `-Wconditional-uninitialized`: Warn if a variable may be uninitialized when used  | Not supported | 2 |\r\n| `-Wdouble-promotion`: Warn if `float` is implicit promoted to `double` | 1 | 8 |\r\n| `-Wduplicated-branches`: Warn if `if`/`else` branches have duplicated code  | 0 | Not supported |\r\n| `-Wduplicated-cond`: Warn if `if`/`else` chain has duplicated conditions  | 0 | Not supported |\r\n| `-Wfloat-equal`: Warn if floating-point values are used in equality comparisons | 29 | 18 |\r\n| `-Wlogical-op`: Warn about logical operations being used where bitwise were probably wanted  | 0 | Not supported |\r\n| `-Wnon-virtual-dtor`: Warn the user if a class with virtual functions has a non-virtual destructor. This helps catch hard to track down memory errors.  | 22 | 10 |\r\n| `-Wnull-dereference`: Warn if a potential `nullptr` dereference is detected  | 48 | Not supported |\r\n| `-Woverloaded-virtual`: Warn if you overload (not `override`) a virtual function  | 0 | 0 |\r\n| `-Wsuggest-override`: Warn about overriding virtual functions that are not marked with the `override` keyword | 303 (of which 192 are in `src/leveldb/` | Not supported |\r\n| `-Wunreachable-code-loop-increment`: Warn if a loop will run only once (loop increment never executed)  | Not supported | 1 |\r\n| `-Wunused-member-function`: Warn on unused member function  | Not supported | 2 |\r\n| `-Wunused-template`: Warn on unused template | Not supported | 1 |\r\n\r\nThere is a large overlap between this list and [Jason Turner's list of recommended compiler diagnostics in the Collaborative Collection of C++ Best Practices (`cppbestpractices`) project](https://github.com/lefticus/cppbestpractices/blob/master/02-Use_the_Tools_Available.md#gcc--clang). There is also an overlap with the recommendations given in the [C++ Core Guidelines](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines) (with editors Bjarne Stroustrup and Herb Sutter).\r\n\r\nI'm now seeking feedback regarding these diagnostics: which of these would make sense to enable in the Bitcoin Core project? :)",
   "closed_at" : "2020-08-18T05:00:34Z",
   "closed_by" : {
      "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
      "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
      "followers_url" : "https://api.github.com/users/fanquake/followers",
      "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/fanquake",
      "id" : 863730,
      "login" : "fanquake",
      "node_id" : "MDQ6VXNlcjg2MzczMA==",
      "organizations_url" : "https://api.github.com/users/fanquake/orgs",
      "received_events_url" : "https://api.github.com/users/fanquake/received_events",
      "repos_url" : "https://api.github.com/users/fanquake/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/fanquake"
   },
   "comments" : 24,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17344/comments",
   "created_at" : "2019-11-01T15:58:47Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17344/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/17344",
   "id" : 516200086,
   "labels" : [
      {
         "color" : "ebd775",
         "default" : false,
         "description" : null,
         "id" : 64584,
         "name" : "Brainstorming",
         "node_id" : "MDU6TGFiZWw2NDU4NA==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Brainstorming"
      },
      {
         "color" : "5319e7",
         "default" : false,
         "description" : null,
         "id" : 61889416,
         "name" : "Build system",
         "node_id" : "MDU6TGFiZWw2MTg4OTQxNg==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Build%20system"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17344/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU1MTYyMDAwODY=",
   "number" : 17344,
   "performed_via_github_app" : null,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "RFC: Enabling some commonly enabled compiler diagnostics",
   "updated_at" : "2020-08-18T05:00:34Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17344",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   }
}
