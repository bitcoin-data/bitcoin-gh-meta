[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r342982604"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342982604"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I really don't like setting these in stone. Let's test desired behavior. Instead of adding tests for the current insane behavior (which relies on implementation details of `atoi`), I think we need to work on getting errors to the user for these.",
      "commit_id" : "286f197704e82045c762d332aba5d1ac52e0212d",
      "created_at" : "2019-11-06T09:08:30Z",
      "diff_hunk" : "@@ -231,6 +231,53 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+}\n+\n+// Test bool and int parsing. Some of these cases could be ambiguous or\n+// surprising to users, and might be worth triggering errors or warning in the\n+// future. But for now basic test coverage is useful to avoid breaking backwards\n+// compatibility unintentionally.\n+BOOST_AUTO_TEST_CASE(util_ArgParsing)\n+{\n+    TestParse(\"\", true, 0);\n+    TestParse(\" \", false, 0);\n+    TestParse(\"0\", false, 0);\n+    TestParse(\"0 \", false, 0);\n+    TestParse(\" 0\", false, 0);\n+    TestParse(\"+0\", false, 0);\n+    TestParse(\"-0\", false, 0);\n+    TestParse(\"5\", true, 5);\n+    TestParse(\"5 \", true, 5);\n+    TestParse(\" 5\", true, 5);\n+    TestParse(\"+5\", true, 5);\n+    TestParse(\"-5\", true, -5);\n+    TestParse(\"0.0\", false, 0);\n+    TestParse(\"0.5\", false, 0);\n+    TestParse(\"5.0\", true, 5);\n+    TestParse(\"5.5\", true, 5);\n+    TestParse(\"x\", false, 0);\n+    TestParse(\"x0\", false, 0);\n+    TestParse(\"x5\", false, 0);\n+    TestParse(\"0x\", false, 0);\n+    TestParse(\"5x\", true, 5);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r342982604",
      "id" : 342982604,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Mjk4MjYwNA==",
      "original_commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "original_position" : 43,
      "path" : "src/test/util_tests.cpp",
      "position" : 50,
      "pull_request_review_id" : 312280729,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390",
      "updated_at" : "2019-11-06T15:00:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/342982604",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343065919"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343065919"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it is easier to review \"fixes\" when they are also documented with test changes.",
      "commit_id" : "286f197704e82045c762d332aba5d1ac52e0212d",
      "created_at" : "2019-11-06T12:24:32Z",
      "diff_hunk" : "@@ -231,6 +231,53 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+}\n+\n+// Test bool and int parsing. Some of these cases could be ambiguous or\n+// surprising to users, and might be worth triggering errors or warning in the\n+// future. But for now basic test coverage is useful to avoid breaking backwards\n+// compatibility unintentionally.\n+BOOST_AUTO_TEST_CASE(util_ArgParsing)\n+{\n+    TestParse(\"\", true, 0);\n+    TestParse(\" \", false, 0);\n+    TestParse(\"0\", false, 0);\n+    TestParse(\"0 \", false, 0);\n+    TestParse(\" 0\", false, 0);\n+    TestParse(\"+0\", false, 0);\n+    TestParse(\"-0\", false, 0);\n+    TestParse(\"5\", true, 5);\n+    TestParse(\"5 \", true, 5);\n+    TestParse(\" 5\", true, 5);\n+    TestParse(\"+5\", true, 5);\n+    TestParse(\"-5\", true, -5);\n+    TestParse(\"0.0\", false, 0);\n+    TestParse(\"0.5\", false, 0);\n+    TestParse(\"5.0\", true, 5);\n+    TestParse(\"5.5\", true, 5);\n+    TestParse(\"x\", false, 0);\n+    TestParse(\"x0\", false, 0);\n+    TestParse(\"x5\", false, 0);\n+    TestParse(\"0x\", false, 0);\n+    TestParse(\"5x\", true, 5);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343065919",
      "id" : 343065919,
      "in_reply_to_id" : 342982604,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzA2NTkxOQ==",
      "original_commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "original_position" : 43,
      "path" : "src/test/util_tests.cpp",
      "position" : 50,
      "pull_request_review_id" : 312390933,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390",
      "updated_at" : "2019-11-06T15:00:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343065919",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343068269"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343068269"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not sure about that. It could just as well bite anyone that dares to change this parsing in the future. This behavior was never documented so no one should be relying on it.\r\n(and a test is essentially \"this should work\" documentation)",
      "commit_id" : "286f197704e82045c762d332aba5d1ac52e0212d",
      "created_at" : "2019-11-06T12:30:30Z",
      "diff_hunk" : "@@ -231,6 +231,53 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+}\n+\n+// Test bool and int parsing. Some of these cases could be ambiguous or\n+// surprising to users, and might be worth triggering errors or warning in the\n+// future. But for now basic test coverage is useful to avoid breaking backwards\n+// compatibility unintentionally.\n+BOOST_AUTO_TEST_CASE(util_ArgParsing)\n+{\n+    TestParse(\"\", true, 0);\n+    TestParse(\" \", false, 0);\n+    TestParse(\"0\", false, 0);\n+    TestParse(\"0 \", false, 0);\n+    TestParse(\" 0\", false, 0);\n+    TestParse(\"+0\", false, 0);\n+    TestParse(\"-0\", false, 0);\n+    TestParse(\"5\", true, 5);\n+    TestParse(\"5 \", true, 5);\n+    TestParse(\" 5\", true, 5);\n+    TestParse(\"+5\", true, 5);\n+    TestParse(\"-5\", true, -5);\n+    TestParse(\"0.0\", false, 0);\n+    TestParse(\"0.5\", false, 0);\n+    TestParse(\"5.0\", true, 5);\n+    TestParse(\"5.5\", true, 5);\n+    TestParse(\"x\", false, 0);\n+    TestParse(\"x0\", false, 0);\n+    TestParse(\"x5\", false, 0);\n+    TestParse(\"0x\", false, 0);\n+    TestParse(\"5x\", true, 5);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343068269",
      "id" : 343068269,
      "in_reply_to_id" : 342982604,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzA2ODI2OQ==",
      "original_commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "original_position" : 43,
      "path" : "src/test/util_tests.cpp",
      "position" : 50,
      "pull_request_review_id" : 312394114,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390",
      "updated_at" : "2019-11-06T15:00:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343068269",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343081284"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343081284"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I really don't like setting these in stone. \r\n\r\nLike Marco is saying the goal of the test is to make it **easier** not harder to fix these confusing parsings in the future. Easier as a developer because you can test the effects of your change with a simple make check, easier as a reviewer to underand the change. Easier as a developer because after implementing the desired behavior you don't have to write a new test to gain coverage, but can just update a line in the existing test.\r\n\r\nI agree with laanwj's objection broadly that it would be bad to add tests which indirectly rely on parsing behaviors, because they would be fragile and difficult to update when parsing is cleaned up. But this is a simple, direct test added specifically so we can be confident that when we intend to make parsing changes, they work as expected, and that when we intend to make other changes, we don't unknowingly break parsing.\r\n\r\nI'm still planning on reviewing #17385 today, too. Vast majority of changes there look very good and can go a new pr even if #17385 won't be reopened.",
      "commit_id" : "286f197704e82045c762d332aba5d1ac52e0212d",
      "created_at" : "2019-11-06T13:01:56Z",
      "diff_hunk" : "@@ -231,6 +231,53 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+}\n+\n+// Test bool and int parsing. Some of these cases could be ambiguous or\n+// surprising to users, and might be worth triggering errors or warning in the\n+// future. But for now basic test coverage is useful to avoid breaking backwards\n+// compatibility unintentionally.\n+BOOST_AUTO_TEST_CASE(util_ArgParsing)\n+{\n+    TestParse(\"\", true, 0);\n+    TestParse(\" \", false, 0);\n+    TestParse(\"0\", false, 0);\n+    TestParse(\"0 \", false, 0);\n+    TestParse(\" 0\", false, 0);\n+    TestParse(\"+0\", false, 0);\n+    TestParse(\"-0\", false, 0);\n+    TestParse(\"5\", true, 5);\n+    TestParse(\"5 \", true, 5);\n+    TestParse(\" 5\", true, 5);\n+    TestParse(\"+5\", true, 5);\n+    TestParse(\"-5\", true, -5);\n+    TestParse(\"0.0\", false, 0);\n+    TestParse(\"0.5\", false, 0);\n+    TestParse(\"5.0\", true, 5);\n+    TestParse(\"5.5\", true, 5);\n+    TestParse(\"x\", false, 0);\n+    TestParse(\"x0\", false, 0);\n+    TestParse(\"x5\", false, 0);\n+    TestParse(\"0x\", false, 0);\n+    TestParse(\"5x\", true, 5);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343081284",
      "id" : 343081284,
      "in_reply_to_id" : 342982604,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzA4MTI4NA==",
      "original_commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "original_position" : 43,
      "path" : "src/test/util_tests.cpp",
      "position" : 50,
      "pull_request_review_id" : 312411665,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390",
      "updated_at" : "2019-11-06T15:00:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343081284",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343083742"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343083742"
         }
      },
      "author_association" : "MEMBER",
      "body" : "OK, fair enough. To be clear I agree with adding this test conceptually, and some of the additional cases like \"spaces around the argument should be ignored\" seem decent\r\nbut say, we probably don't want a test for \"what atoi regards as whitespace depends on your locale\" :cry: \r\nanyhow, if this is with the understanding that these aren't supposed to be guaranteed to be supported for the infinite future, I'm ok with this list\r\n",
      "commit_id" : "286f197704e82045c762d332aba5d1ac52e0212d",
      "created_at" : "2019-11-06T13:08:00Z",
      "diff_hunk" : "@@ -231,6 +231,53 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+}\n+\n+// Test bool and int parsing. Some of these cases could be ambiguous or\n+// surprising to users, and might be worth triggering errors or warning in the\n+// future. But for now basic test coverage is useful to avoid breaking backwards\n+// compatibility unintentionally.\n+BOOST_AUTO_TEST_CASE(util_ArgParsing)\n+{\n+    TestParse(\"\", true, 0);\n+    TestParse(\" \", false, 0);\n+    TestParse(\"0\", false, 0);\n+    TestParse(\"0 \", false, 0);\n+    TestParse(\" 0\", false, 0);\n+    TestParse(\"+0\", false, 0);\n+    TestParse(\"-0\", false, 0);\n+    TestParse(\"5\", true, 5);\n+    TestParse(\"5 \", true, 5);\n+    TestParse(\" 5\", true, 5);\n+    TestParse(\"+5\", true, 5);\n+    TestParse(\"-5\", true, -5);\n+    TestParse(\"0.0\", false, 0);\n+    TestParse(\"0.5\", false, 0);\n+    TestParse(\"5.0\", true, 5);\n+    TestParse(\"5.5\", true, 5);\n+    TestParse(\"x\", false, 0);\n+    TestParse(\"x0\", false, 0);\n+    TestParse(\"x5\", false, 0);\n+    TestParse(\"0x\", false, 0);\n+    TestParse(\"5x\", true, 5);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343083742",
      "id" : 343083742,
      "in_reply_to_id" : 342982604,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzA4Mzc0Mg==",
      "original_commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "original_position" : 43,
      "path" : "src/test/util_tests.cpp",
      "position" : 50,
      "pull_request_review_id" : 312415069,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390",
      "updated_at" : "2019-11-06T15:00:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343083742",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343088006"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343088006"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe a comment that says the tests are fragile and meant to be removed could help?",
      "commit_id" : "286f197704e82045c762d332aba5d1ac52e0212d",
      "created_at" : "2019-11-06T13:17:36Z",
      "diff_hunk" : "@@ -231,6 +231,53 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+}\n+\n+// Test bool and int parsing. Some of these cases could be ambiguous or\n+// surprising to users, and might be worth triggering errors or warning in the\n+// future. But for now basic test coverage is useful to avoid breaking backwards\n+// compatibility unintentionally.\n+BOOST_AUTO_TEST_CASE(util_ArgParsing)\n+{\n+    TestParse(\"\", true, 0);\n+    TestParse(\" \", false, 0);\n+    TestParse(\"0\", false, 0);\n+    TestParse(\"0 \", false, 0);\n+    TestParse(\" 0\", false, 0);\n+    TestParse(\"+0\", false, 0);\n+    TestParse(\"-0\", false, 0);\n+    TestParse(\"5\", true, 5);\n+    TestParse(\"5 \", true, 5);\n+    TestParse(\" 5\", true, 5);\n+    TestParse(\"+5\", true, 5);\n+    TestParse(\"-5\", true, -5);\n+    TestParse(\"0.0\", false, 0);\n+    TestParse(\"0.5\", false, 0);\n+    TestParse(\"5.0\", true, 5);\n+    TestParse(\"5.5\", true, 5);\n+    TestParse(\"x\", false, 0);\n+    TestParse(\"x0\", false, 0);\n+    TestParse(\"x5\", false, 0);\n+    TestParse(\"0x\", false, 0);\n+    TestParse(\"5x\", true, 5);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343088006",
      "id" : 343088006,
      "in_reply_to_id" : 342982604,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzA4ODAwNg==",
      "original_commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "original_position" : 43,
      "path" : "src/test/util_tests.cpp",
      "position" : 50,
      "pull_request_review_id" : 312420822,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390",
      "updated_at" : "2019-11-06T15:00:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343088006",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343092555"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343092555"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Maybe a comment that says the tests are fragile and meant to be removed could help?\r\n\r\nThere is a general comment already that \"Some of these cases could be ambiguous or surprising to users, and might be worth triggering errors or warning in the future\", but I could also note something like \"// Confusing parsing, should be changed or disallowed in the future\" on specific cases if desired.\r\n\r\n> but say, we probably don't want a test for \"what atoi regards as whitespace depends on your locale\" \r\n\r\nI didn't think of that but definitely agree.",
      "commit_id" : "286f197704e82045c762d332aba5d1ac52e0212d",
      "created_at" : "2019-11-06T13:27:06Z",
      "diff_hunk" : "@@ -231,6 +231,53 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+}\n+\n+// Test bool and int parsing. Some of these cases could be ambiguous or\n+// surprising to users, and might be worth triggering errors or warning in the\n+// future. But for now basic test coverage is useful to avoid breaking backwards\n+// compatibility unintentionally.\n+BOOST_AUTO_TEST_CASE(util_ArgParsing)\n+{\n+    TestParse(\"\", true, 0);\n+    TestParse(\" \", false, 0);\n+    TestParse(\"0\", false, 0);\n+    TestParse(\"0 \", false, 0);\n+    TestParse(\" 0\", false, 0);\n+    TestParse(\"+0\", false, 0);\n+    TestParse(\"-0\", false, 0);\n+    TestParse(\"5\", true, 5);\n+    TestParse(\"5 \", true, 5);\n+    TestParse(\" 5\", true, 5);\n+    TestParse(\"+5\", true, 5);\n+    TestParse(\"-5\", true, -5);\n+    TestParse(\"0.0\", false, 0);\n+    TestParse(\"0.5\", false, 0);\n+    TestParse(\"5.0\", true, 5);\n+    TestParse(\"5.5\", true, 5);\n+    TestParse(\"x\", false, 0);\n+    TestParse(\"x0\", false, 0);\n+    TestParse(\"x5\", false, 0);\n+    TestParse(\"0x\", false, 0);\n+    TestParse(\"5x\", true, 5);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343092555",
      "id" : 343092555,
      "in_reply_to_id" : 342982604,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzA5MjU1NQ==",
      "original_commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "original_position" : 43,
      "path" : "src/test/util_tests.cpp",
      "position" : 50,
      "pull_request_review_id" : 312426806,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390",
      "updated_at" : "2019-11-06T15:00:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343092555",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "created_at" : "2019-11-06T13:40:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#issuecomment-550312942",
      "id" : 550312942,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17390",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MDMxMjk0Mg==",
      "updated_at" : "2019-11-06T13:40:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/550312942",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343115184"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343115184"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> \"// Confusing parsing, should be changed or disallowed in the future\" on specific cases if desired.\r\n\r\nI think that's a good idea, to split the list into \"normal\" and \"expected\" cases and \"parser details leaking through please don't do this\" cases.\r\n",
      "commit_id" : "286f197704e82045c762d332aba5d1ac52e0212d",
      "created_at" : "2019-11-06T14:12:39Z",
      "diff_hunk" : "@@ -231,6 +231,53 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+}\n+\n+// Test bool and int parsing. Some of these cases could be ambiguous or\n+// surprising to users, and might be worth triggering errors or warning in the\n+// future. But for now basic test coverage is useful to avoid breaking backwards\n+// compatibility unintentionally.\n+BOOST_AUTO_TEST_CASE(util_ArgParsing)\n+{\n+    TestParse(\"\", true, 0);\n+    TestParse(\" \", false, 0);\n+    TestParse(\"0\", false, 0);\n+    TestParse(\"0 \", false, 0);\n+    TestParse(\" 0\", false, 0);\n+    TestParse(\"+0\", false, 0);\n+    TestParse(\"-0\", false, 0);\n+    TestParse(\"5\", true, 5);\n+    TestParse(\"5 \", true, 5);\n+    TestParse(\" 5\", true, 5);\n+    TestParse(\"+5\", true, 5);\n+    TestParse(\"-5\", true, -5);\n+    TestParse(\"0.0\", false, 0);\n+    TestParse(\"0.5\", false, 0);\n+    TestParse(\"5.0\", true, 5);\n+    TestParse(\"5.5\", true, 5);\n+    TestParse(\"x\", false, 0);\n+    TestParse(\"x0\", false, 0);\n+    TestParse(\"x5\", false, 0);\n+    TestParse(\"0x\", false, 0);\n+    TestParse(\"5x\", true, 5);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343115184",
      "id" : 343115184,
      "in_reply_to_id" : 342982604,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzExNTE4NA==",
      "original_commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "original_position" : 43,
      "path" : "src/test/util_tests.cpp",
      "position" : 50,
      "pull_request_review_id" : 312458317,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390",
      "updated_at" : "2019-11-06T15:00:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343115184",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated 9c1b60bc0793207295a8355df83ffcf094aa77c8 -> fc76edec6140be51cfc1b44900aaf0139fdc4950 ([`pr/argparse-test.2`](https://github.com/ryanofsky/bitcoin/commits/pr/argparse-test.2) -> [`pr/argparse-test.3`](https://github.com/ryanofsky/bitcoin/commits/pr/argparse-test.3), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argparse-test.2..pr/argparse-test.3)) to make comment a little clearer and avoid `99999` special case for int parsing\r\nUpdated fc76edec6140be51cfc1b44900aaf0139fdc4950 -> 286f197704e82045c762d332aba5d1ac52e0212d ([`pr/argparse-test.3`](https://github.com/ryanofsky/bitcoin/commits/pr/argparse-test.3) -> [`pr/argparse-test.4`](https://github.com/ryanofsky/bitcoin/commits/pr/argparse-test.4), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/argparse-test.3..pr/argparse-test.4)) with a handful more test cases",
      "created_at" : "2019-11-06T14:15:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#issuecomment-550328156",
      "id" : 550328156,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17390",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MDMyODE1Ng==",
      "updated_at" : "2019-11-06T15:02:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/550328156",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343140341"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343140341"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit, if you have to push again maybe include `BOOST_CHECK(error.empty());`.",
      "commit_id" : "286f197704e82045c762d332aba5d1ac52e0212d",
      "created_at" : "2019-11-06T14:56:07Z",
      "diff_hunk" : "@@ -231,6 +231,55 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343140341",
      "id" : 343140341,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzE0MDM0MQ==",
      "original_commit_id" : "fc76edec6140be51cfc1b44900aaf0139fdc4950",
      "original_position" : 12,
      "path" : "src/test/util_tests.cpp",
      "position" : 12,
      "pull_request_review_id" : 312493248,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390",
      "updated_at" : "2019-11-06T15:02:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343140341",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343140407"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343140407"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> > \"// Confusing parsing, should be changed or disallowed in the future\" on specific cases if desired.\r\n> \r\n> I think that's a good idea, to split the list into \"normal\" and \"expected\" cases and \"parser details leaking through please don't do this\" cases.\r\n\r\nI started to do this, but wasn't actually sure which specific cases people may want to change in the future, and figured it would be best to leave decisions to future PRs actually implementing fixes, rather than add my opinions or speculation here. For example I think leading and trailing spaces should probably just be ignored and not made into errors, and probably `5.0` and `5.5` should be errors but maybe `5.` should be allowed. Unclear whether numbers with extra leading 0's should be allowed because maybe they could be mistaken for octal. Personally I think it's strange to interpret empty string `\"\"` as true and space `\" \"` as false (especially when after #15934 and #16545 we could begin to treat `-flag` and `-flag=` distinctly), and I also think we could support `true` `false` `yes` `no` for boolean flags in the future, but who knows what people are doing with existing bools today. Basically people could have opinions about every single case here except maybe the `0` case. Even the `5` case could arguably trigger an error or warning in the future if specified as the value to a boolean flag.",
      "commit_id" : "286f197704e82045c762d332aba5d1ac52e0212d",
      "created_at" : "2019-11-06T14:56:14Z",
      "diff_hunk" : "@@ -231,6 +231,53 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+}\n+\n+// Test bool and int parsing. Some of these cases could be ambiguous or\n+// surprising to users, and might be worth triggering errors or warning in the\n+// future. But for now basic test coverage is useful to avoid breaking backwards\n+// compatibility unintentionally.\n+BOOST_AUTO_TEST_CASE(util_ArgParsing)\n+{\n+    TestParse(\"\", true, 0);\n+    TestParse(\" \", false, 0);\n+    TestParse(\"0\", false, 0);\n+    TestParse(\"0 \", false, 0);\n+    TestParse(\" 0\", false, 0);\n+    TestParse(\"+0\", false, 0);\n+    TestParse(\"-0\", false, 0);\n+    TestParse(\"5\", true, 5);\n+    TestParse(\"5 \", true, 5);\n+    TestParse(\" 5\", true, 5);\n+    TestParse(\"+5\", true, 5);\n+    TestParse(\"-5\", true, -5);\n+    TestParse(\"0.0\", false, 0);\n+    TestParse(\"0.5\", false, 0);\n+    TestParse(\"5.0\", true, 5);\n+    TestParse(\"5.5\", true, 5);\n+    TestParse(\"x\", false, 0);\n+    TestParse(\"x0\", false, 0);\n+    TestParse(\"x5\", false, 0);\n+    TestParse(\"0x\", false, 0);\n+    TestParse(\"5x\", true, 5);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343140407",
      "id" : 343140407,
      "in_reply_to_id" : 342982604,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzE0MDQwNw==",
      "original_commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "original_position" : 43,
      "path" : "src/test/util_tests.cpp",
      "position" : 50,
      "pull_request_review_id" : 312493351,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390",
      "updated_at" : "2019-11-06T15:00:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343140407",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 286f197, more surprising results ð± ",
      "created_at" : "2019-11-06T15:03:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#issuecomment-550350215",
      "id" : 550350215,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17390",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MDM1MDIxNQ==",
      "updated_at" : "2019-11-06T15:03:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/550350215",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343150286"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343150286"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I also think we could support true false yes no for boolean flags in the future\r\n\r\nSure, but even in that case, they probably shouldn't all evaluate as 0/false. `5.` and even `5.0` such at least do what could be remotely expected (truncating decimal). Accepting faux hexadecimal is pretty bad though (which is why I initially commented on this line specifically)\r\n\r\nBut I agree this might not be the place for this discussion. I'm sorry for starting this in the first place. I honestly didn't know anyone had such strong opinions about this, and would have let this sleeping dog lie if I knew.",
      "commit_id" : "286f197704e82045c762d332aba5d1ac52e0212d",
      "created_at" : "2019-11-06T15:13:17Z",
      "diff_hunk" : "@@ -231,6 +231,53 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+}\n+\n+// Test bool and int parsing. Some of these cases could be ambiguous or\n+// surprising to users, and might be worth triggering errors or warning in the\n+// future. But for now basic test coverage is useful to avoid breaking backwards\n+// compatibility unintentionally.\n+BOOST_AUTO_TEST_CASE(util_ArgParsing)\n+{\n+    TestParse(\"\", true, 0);\n+    TestParse(\" \", false, 0);\n+    TestParse(\"0\", false, 0);\n+    TestParse(\"0 \", false, 0);\n+    TestParse(\" 0\", false, 0);\n+    TestParse(\"+0\", false, 0);\n+    TestParse(\"-0\", false, 0);\n+    TestParse(\"5\", true, 5);\n+    TestParse(\"5 \", true, 5);\n+    TestParse(\" 5\", true, 5);\n+    TestParse(\"+5\", true, 5);\n+    TestParse(\"-5\", true, -5);\n+    TestParse(\"0.0\", false, 0);\n+    TestParse(\"0.5\", false, 0);\n+    TestParse(\"5.0\", true, 5);\n+    TestParse(\"5.5\", true, 5);\n+    TestParse(\"x\", false, 0);\n+    TestParse(\"x0\", false, 0);\n+    TestParse(\"x5\", false, 0);\n+    TestParse(\"0x\", false, 0);\n+    TestParse(\"5x\", true, 5);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343150286",
      "id" : 343150286,
      "in_reply_to_id" : 342982604,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzE1MDI4Ng==",
      "original_commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "original_position" : 43,
      "path" : "src/test/util_tests.cpp",
      "position" : 50,
      "pull_request_review_id" : 312507150,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390",
      "updated_at" : "2019-11-06T15:13:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343150286",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343171747"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343171747"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I honestly didn't know anyone had such strong opinions about this, and would have let this sleeping dog lie if I knew.\r\n\r\nHeh, I will talk to you all day about settings. But thanks for starting this. Previously, I assumed we actually had pretty good test coverage for parsing settings strings. I think filling the gap can prevent confusing and potentially dangerous bugs like https://github.com/bitcoin/bitcoin/issues/14523#issuecomment-431605226 in the future.\r\n\r\n> > I also think we could support true false yes no for boolean flags in the future\r\n> \r\n> Sure, but even in that case, they probably shouldn't all evaluate as 0/false. \r\n\r\nOf course yes. By \"support\" I meant interpret `true` as `true` instead of `false`",
      "commit_id" : "286f197704e82045c762d332aba5d1ac52e0212d",
      "created_at" : "2019-11-06T15:48:46Z",
      "diff_hunk" : "@@ -231,6 +231,53 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n+static void TestParse(const std::string& str, bool expected_bool, int64_t expected_int)\n+{\n+    TestArgsManager test;\n+    test.SetupArgs({{\"-value\", ArgsManager::ALLOW_ANY}});\n+    std::string arg = \"-value=\" + str;\n+    const char* argv[] = {\"ignored\", arg.c_str()};\n+    std::string error;\n+    BOOST_CHECK(test.ParseParameters(2, (char**)argv, error));\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), expected_bool);\n+    BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), expected_int);\n+}\n+\n+// Test bool and int parsing. Some of these cases could be ambiguous or\n+// surprising to users, and might be worth triggering errors or warning in the\n+// future. But for now basic test coverage is useful to avoid breaking backwards\n+// compatibility unintentionally.\n+BOOST_AUTO_TEST_CASE(util_ArgParsing)\n+{\n+    TestParse(\"\", true, 0);\n+    TestParse(\" \", false, 0);\n+    TestParse(\"0\", false, 0);\n+    TestParse(\"0 \", false, 0);\n+    TestParse(\" 0\", false, 0);\n+    TestParse(\"+0\", false, 0);\n+    TestParse(\"-0\", false, 0);\n+    TestParse(\"5\", true, 5);\n+    TestParse(\"5 \", true, 5);\n+    TestParse(\" 5\", true, 5);\n+    TestParse(\"+5\", true, 5);\n+    TestParse(\"-5\", true, -5);\n+    TestParse(\"0.0\", false, 0);\n+    TestParse(\"0.5\", false, 0);\n+    TestParse(\"5.0\", true, 5);\n+    TestParse(\"5.5\", true, 5);\n+    TestParse(\"x\", false, 0);\n+    TestParse(\"x0\", false, 0);\n+    TestParse(\"x5\", false, 0);\n+    TestParse(\"0x\", false, 0);\n+    TestParse(\"5x\", true, 5);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#discussion_r343171747",
      "id" : 343171747,
      "in_reply_to_id" : 342982604,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MzE3MTc0Nw==",
      "original_commit_id" : "9c1b60bc0793207295a8355df83ffcf094aa77c8",
      "original_position" : 43,
      "path" : "src/test/util_tests.cpp",
      "position" : 50,
      "pull_request_review_id" : 312536765,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17390",
      "updated_at" : "2019-11-06T15:51:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/343171747",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 286f197704e82045c762d332aba5d1ac52e0212d",
      "created_at" : "2019-11-06T16:00:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17390#issuecomment-550376486",
      "id" : 550376486,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17390",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MDM3NjQ4Ng==",
      "updated_at" : "2019-11-06T16:00:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/550376486",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
