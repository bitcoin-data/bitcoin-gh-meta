[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17581](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17581.html) (refactor: Remove settings merge reverse precedence code by ryanofsky)\n* [#17580](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17580.html) (refactor: Add ALLOW_LIST flags and enforce usage in CheckArgFlags by ryanofsky)\n* [#17493](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17493.html) (util: Forbid ambiguous multiple assignments in config file by ryanofsky)\n* [#17452](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17452.html) (lib: update fuzz directory in .gitignore by jonatack)\n* [#17398](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17398.html) (build: Update leveldb to 1.22+ by laanwj)\n* [#17383](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17383.html) (Refactor: Move consts to their correct translation units by jnewbery)\n* [#17227](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17227.html) (Qt: Add Android packaging support by icota)\n* [#16722](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16722.html) (build: Disable warnings for leveldb subtree by default by hebasto)\n* [#16688](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16688.html) (log: Add validation interface logging by jkczyz)\n* [#16365](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16365.html) (Log RPC parameters (arguments) if -debug=rpcparams by LarryRuane)\n* [#15606](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15606.html) ([experimental] UTXO snapshots by jamesob)\n* [#15367](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15367.html) (feature: Added ability for users to add a startup command by benthecarman)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-11-05T06:53:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17376#issuecomment-549687895",
      "id" : 549687895,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17376",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0OTY4Nzg5NQ==",
      "updated_at" : "2019-11-25T00:33:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/549687895",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK.\r\n\r\nMy personal interest here is to easier deploy alternative protocols. For example, new block relay strategy or new address relay.\r\n\r\nReplacing those existing protocols in Bitcoin core doesn't seem feasible (unless we come up with something really brilliant), because those are critical for security and have been proving robustness for years.\r\nAt the same time, building something in an additive manner seems possible.\r\n\r\nThese protocols also might be more flexible. I don't want to have overwhelming configurations in Bitcoin Core, but if someone wants to enable, let's say, a more anonymous but less fast block propagation locally âÂ it's good to enable that with a module in rust.",
      "created_at" : "2019-11-05T17:59:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17376#issuecomment-549941416",
      "id" : 549941416,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17376",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0OTk0MTQxNg==",
      "updated_at" : "2019-11-05T17:59:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/549941416",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> My personal interest here is to easier deploy alternative protocols. For example, new block relay strategy or new address relay.\r\n\r\nWhile new address relay in-scope for \"reliability\" reasons, I'm not sure that new block relay protocols would be - I don't know that this code wants to grow much beyond what it is already...less code, less bugs :) (nor do I see any coming down the pipe on the horizon?).",
      "created_at" : "2019-11-05T19:29:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17376#issuecomment-549981980",
      "id" : 549981980,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17376",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0OTk4MTk4MA==",
      "updated_at" : "2019-11-05T19:29:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/549981980",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : ">I'm not sure that new block relay protocols would be\r\n\r\nWe're doing great right now, but I think there's a non-zero probability of us wanting something different in future :)\r\nAnyway, don't want to flood this PR with this particular discussion.",
      "created_at" : "2019-11-05T19:44:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17376#issuecomment-549987988",
      "id" : 549987988,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17376",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0OTk4Nzk4OA==",
      "updated_at" : "2019-11-05T19:44:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/549987988",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "In the \"nice to have\" list, I would add \"fork(2)\" to the OP checklist.\r\n\r\nforking does a far better job creating a security barrier between network and the rest of the code.\r\n\r\nIt was always a long term goal to create a process boundary separation between wallet and network, for example.  One way to accomplish that is removing the wallet from the core validation engine.  Another way to accomplish that is forking.   in re Windows, the cygwin method should work here.\r\n\r\nA kernel guarantee is stronger than a programming language guarantee, by far.\r\n\r\n(to be crystal clear, this is not objecting to this PR, nor proposing an alternative, just recalling relevant historical material)",
      "created_at" : "2019-11-05T19:53:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17376#issuecomment-549991530",
      "id" : 549991530,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17376",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0OTk5MTUzMA==",
      "updated_at" : "2019-11-05T19:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/549991530",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Very interesting work @TheBlueMatt!\r\n\r\nI really appreciate that proper fuzz testing is integrated from the very start. Very nice!\r\n\r\nIs the inclusion of the fuzzing corpus intentional (`src/rusty/rust-bitcoin/fuzz/hfuzz_input/deserialize_udecimal/input/id:000121,src:000007,op:havoc,rep:2`, etc.)?\r\n\r\nI suggest removing the corpus files in order to not clutter the PR \"Files changed\" view (currently listing 1233 files as changed! :)).",
      "created_at" : "2019-11-05T21:34:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17376#issuecomment-550031195",
      "id" : 550031195,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17376",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MDAzMTE5NQ==",
      "updated_at" : "2019-11-05T21:34:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/550031195",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@practicalswift the parts you're referring to here are just dependencies from the rust-bitcoin github org pulled in here (which are included as-is so that we can subtree them in the future, though they may need to go in via depends/ I'm just not sure how that process works), not fresh code. Indeed, most of the rust-bitcoin libraries are well-tested and have a bunch of fuzz testing built in, the inclusion of the corpus is largely because we run a few rounds of fuzz on travis and we want a good starting point for it.",
      "created_at" : "2019-11-06T00:17:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17376#issuecomment-550083187",
      "id" : 550083187,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17376",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MDA4MzE4Nw==",
      "updated_at" : "2019-11-06T00:17:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/550083187",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17376#discussion_r347073757"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17376"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347073757"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`-L rusty` pointing to directory should resolve rlibs automatically instead of using all these explicit `--extern`s?",
      "commit_id" : "33287e2a3f516e38d70537436c680c4b43be3587",
      "created_at" : "2019-11-16T03:22:28Z",
      "diff_hunk" : "@@ -359,6 +370,51 @@ libbitcoin_wallet_tool_a_SOURCES = \\\n   wallet/wallettool.cpp \\\n   $(BITCOIN_CORE_H)\n \n+# rustc only reqires the main .rs file as input, but rustc must also be invoked\n+# if any of the other files change. List the main file first, then targets can\n+# depend on $(LIBBITCOIN_RUSTY_SRCS), but only build the first source file ($<).\n+LIBBITCOIN_RUSTY_SRCS= \\\n+  rusty/src/lib.rs \\\n+  rusty/src/bridge.rs \\\n+  rusty/src/dns_headers.rs \\\n+  rusty/src/rest_downloader.rs \\\n+  rusty/src/p2p_addrs.rs rusty/src/p2p_client.rs \\\n+  rusty/src/p2p_socket_handler.rs\n+\n+LIBBITCOIN_RUSTY_TEST_SRCS= \\\n+  rusty/src/test_bridge.rs\n+\n+rusty/liblibc.rlib: rusty/libc/src/lib.rs $(wildcard rusty/libc/src/*.rs)\n+\t$(RUSTC) --crate-name libc $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --out-dir $(@D) && \\\n+\ttouch $@\n+\n+rusty/libbech32.rlib: rusty/rust-bech32/src/lib.rs $(wildcard rusty/rust-bech32/src/*.rs)\n+\t$(RUSTC) --crate-name bech32 $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --out-dir $(@D) && \\\n+\ttouch $@\n+\n+rusty/libbitcoin_hashes.rlib: rusty/bitcoin_hashes/src/lib.rs $(wildcard rusty/bitcoin_hashes/src/*.rs)\n+\t$(RUSTC) --crate-name bitcoin_hashes $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' --out-dir $(@D) && \\\n+\ttouch $@\n+\n+rusty/libsecp256k1.rlib: rusty/rust-secp256k1/src/lib.rs $(wildcard rusty/rust-secp256k1/src/*.rs) $(LIBSECP256K1)\n+\t$(RUSTC) --crate-name secp256k1 $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --cfg 'feature=\"std\"' --cfg 'feature=\"dont_replace_c_symbols\"' --out-dir $(@D) && \\\n+\ttouch $@\n+\n+rusty/libbitcoin.rlib: rusty/libbech32.rlib rusty/libbitcoin_hashes.rlib rusty/libsecp256k1.rlib\n+rusty/libbitcoin.rlib: rusty/rust-bitcoin/src/lib.rs $(wildcard rusty/rust-bitcoin/src/*.rs) $(wildcard rusty/rust-bitcoin/src/*/*.rs) $(wildcard rusty/rust-bitcoin/src/*/*/*.rs)\n+\t$(RUSTC) --crate-name bitcoin $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --out-dir $(@D) --extern bech32=$(@D)/libbech32.rlib --extern bitcoin_hashes=$(@D)/libbitcoin_hashes.rlib --extern secp256k1=$(@D)/libsecp256k1.rlib && \\\n+\ttouch $@\n+\n+# We force overflow checks on so that any integer overflows result in a panic\n+# instead of, eg, attempting to alloc 4GB of memory (though we will catch such\n+# an alloc and refuse it, generating a panic instead).\n+# Also force panics to unwind (instead of calling abort()) as we want to catch\n+# panics in the Rust threads and simply close the thread, instead of bringing\n+# down the rest of Bitcoin Core.\n+$(LIBBITCOIN_RUSTY): $(LIBBITCOIN_RUSTY_SRCS) rusty/libbitcoin.rlib rusty/liblibc.rlib\n+\t$(RUSTC) --crate-name rusty $< --target=$(RUST_TARGET) --crate-type=staticlib --emit=link -g -O -C lto=on -C overflow-checks=on -C panic=unwind --out-dir $(@D) -L dependency=$(@D) --extern libc=$(@D)/liblibc.rlib --extern bitcoin_hashes=$(@D)/libbitcoin_hashes.rlib --extern bitcoin=$(@D)/libbitcoin.rlib",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17376#discussion_r347073757",
      "id" : 347073757,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NzA3Mzc1Nw==",
      "original_commit_id" : "33287e2a3f516e38d70537436c680c4b43be3587",
      "original_position" : 85,
      "path" : "src/Makefile.am",
      "position" : 85,
      "pull_request_review_id" : 317949982,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17376",
      "updated_at" : "2019-11-16T03:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347073757",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/762502?v=4",
         "events_url" : "https://api.github.com/users/icota/events{/privacy}",
         "followers_url" : "https://api.github.com/users/icota/followers",
         "following_url" : "https://api.github.com/users/icota/following{/other_user}",
         "gists_url" : "https://api.github.com/users/icota/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/icota",
         "id" : 762502,
         "login" : "icota",
         "node_id" : "MDQ6VXNlcjc2MjUwMg==",
         "organizations_url" : "https://api.github.com/users/icota/orgs",
         "received_events_url" : "https://api.github.com/users/icota/received_events",
         "repos_url" : "https://api.github.com/users/icota/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/icota/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/icota/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/icota"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17376#discussion_r347158355"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17376"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347158355"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Doesn't seem to for me, no?",
      "commit_id" : "33287e2a3f516e38d70537436c680c4b43be3587",
      "created_at" : "2019-11-17T20:47:03Z",
      "diff_hunk" : "@@ -359,6 +370,51 @@ libbitcoin_wallet_tool_a_SOURCES = \\\n   wallet/wallettool.cpp \\\n   $(BITCOIN_CORE_H)\n \n+# rustc only reqires the main .rs file as input, but rustc must also be invoked\n+# if any of the other files change. List the main file first, then targets can\n+# depend on $(LIBBITCOIN_RUSTY_SRCS), but only build the first source file ($<).\n+LIBBITCOIN_RUSTY_SRCS= \\\n+  rusty/src/lib.rs \\\n+  rusty/src/bridge.rs \\\n+  rusty/src/dns_headers.rs \\\n+  rusty/src/rest_downloader.rs \\\n+  rusty/src/p2p_addrs.rs rusty/src/p2p_client.rs \\\n+  rusty/src/p2p_socket_handler.rs\n+\n+LIBBITCOIN_RUSTY_TEST_SRCS= \\\n+  rusty/src/test_bridge.rs\n+\n+rusty/liblibc.rlib: rusty/libc/src/lib.rs $(wildcard rusty/libc/src/*.rs)\n+\t$(RUSTC) --crate-name libc $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --out-dir $(@D) && \\\n+\ttouch $@\n+\n+rusty/libbech32.rlib: rusty/rust-bech32/src/lib.rs $(wildcard rusty/rust-bech32/src/*.rs)\n+\t$(RUSTC) --crate-name bech32 $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --out-dir $(@D) && \\\n+\ttouch $@\n+\n+rusty/libbitcoin_hashes.rlib: rusty/bitcoin_hashes/src/lib.rs $(wildcard rusty/bitcoin_hashes/src/*.rs)\n+\t$(RUSTC) --crate-name bitcoin_hashes $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' --out-dir $(@D) && \\\n+\ttouch $@\n+\n+rusty/libsecp256k1.rlib: rusty/rust-secp256k1/src/lib.rs $(wildcard rusty/rust-secp256k1/src/*.rs) $(LIBSECP256K1)\n+\t$(RUSTC) --crate-name secp256k1 $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --cfg 'feature=\"std\"' --cfg 'feature=\"dont_replace_c_symbols\"' --out-dir $(@D) && \\\n+\ttouch $@\n+\n+rusty/libbitcoin.rlib: rusty/libbech32.rlib rusty/libbitcoin_hashes.rlib rusty/libsecp256k1.rlib\n+rusty/libbitcoin.rlib: rusty/rust-bitcoin/src/lib.rs $(wildcard rusty/rust-bitcoin/src/*.rs) $(wildcard rusty/rust-bitcoin/src/*/*.rs) $(wildcard rusty/rust-bitcoin/src/*/*/*.rs)\n+\t$(RUSTC) --crate-name bitcoin $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --out-dir $(@D) --extern bech32=$(@D)/libbech32.rlib --extern bitcoin_hashes=$(@D)/libbitcoin_hashes.rlib --extern secp256k1=$(@D)/libsecp256k1.rlib && \\\n+\ttouch $@\n+\n+# We force overflow checks on so that any integer overflows result in a panic\n+# instead of, eg, attempting to alloc 4GB of memory (though we will catch such\n+# an alloc and refuse it, generating a panic instead).\n+# Also force panics to unwind (instead of calling abort()) as we want to catch\n+# panics in the Rust threads and simply close the thread, instead of bringing\n+# down the rest of Bitcoin Core.\n+$(LIBBITCOIN_RUSTY): $(LIBBITCOIN_RUSTY_SRCS) rusty/libbitcoin.rlib rusty/liblibc.rlib\n+\t$(RUSTC) --crate-name rusty $< --target=$(RUST_TARGET) --crate-type=staticlib --emit=link -g -O -C lto=on -C overflow-checks=on -C panic=unwind --out-dir $(@D) -L dependency=$(@D) --extern libc=$(@D)/liblibc.rlib --extern bitcoin_hashes=$(@D)/libbitcoin_hashes.rlib --extern bitcoin=$(@D)/libbitcoin.rlib",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17376#discussion_r347158355",
      "id" : 347158355,
      "in_reply_to_id" : 347073757,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NzE1ODM1NQ==",
      "original_commit_id" : "33287e2a3f516e38d70537436c680c4b43be3587",
      "original_position" : 85,
      "path" : "src/Makefile.am",
      "position" : 85,
      "pull_request_review_id" : 318043022,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17376",
      "updated_at" : "2019-11-17T20:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347158355",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17376#discussion_r347272353"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17376"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347272353"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I tested and it seems like `--extern` is only necessary for `libc` (`rustc` hits [E0658](https://doc.rust-lang.org/error-index.html#E0658) otherwise). This works for me:\r\n`/home/igor/.cargo/bin/rustc --crate-name rusty rusty/src/lib.rs --target=x86_64-unknown-linux-gnu --crate-type=staticlib --emit=link -g -C lto=on -C overflow-checks=on -C panic=unwind --out-dir rusty -L rusty --extern libc=rusty/liblibc.rlib`",
      "commit_id" : "33287e2a3f516e38d70537436c680c4b43be3587",
      "created_at" : "2019-11-18T09:28:57Z",
      "diff_hunk" : "@@ -359,6 +370,51 @@ libbitcoin_wallet_tool_a_SOURCES = \\\n   wallet/wallettool.cpp \\\n   $(BITCOIN_CORE_H)\n \n+# rustc only reqires the main .rs file as input, but rustc must also be invoked\n+# if any of the other files change. List the main file first, then targets can\n+# depend on $(LIBBITCOIN_RUSTY_SRCS), but only build the first source file ($<).\n+LIBBITCOIN_RUSTY_SRCS= \\\n+  rusty/src/lib.rs \\\n+  rusty/src/bridge.rs \\\n+  rusty/src/dns_headers.rs \\\n+  rusty/src/rest_downloader.rs \\\n+  rusty/src/p2p_addrs.rs rusty/src/p2p_client.rs \\\n+  rusty/src/p2p_socket_handler.rs\n+\n+LIBBITCOIN_RUSTY_TEST_SRCS= \\\n+  rusty/src/test_bridge.rs\n+\n+rusty/liblibc.rlib: rusty/libc/src/lib.rs $(wildcard rusty/libc/src/*.rs)\n+\t$(RUSTC) --crate-name libc $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --out-dir $(@D) && \\\n+\ttouch $@\n+\n+rusty/libbech32.rlib: rusty/rust-bech32/src/lib.rs $(wildcard rusty/rust-bech32/src/*.rs)\n+\t$(RUSTC) --crate-name bech32 $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --out-dir $(@D) && \\\n+\ttouch $@\n+\n+rusty/libbitcoin_hashes.rlib: rusty/bitcoin_hashes/src/lib.rs $(wildcard rusty/bitcoin_hashes/src/*.rs)\n+\t$(RUSTC) --crate-name bitcoin_hashes $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' --out-dir $(@D) && \\\n+\ttouch $@\n+\n+rusty/libsecp256k1.rlib: rusty/rust-secp256k1/src/lib.rs $(wildcard rusty/rust-secp256k1/src/*.rs) $(LIBSECP256K1)\n+\t$(RUSTC) --crate-name secp256k1 $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --cfg 'feature=\"std\"' --cfg 'feature=\"dont_replace_c_symbols\"' --out-dir $(@D) && \\\n+\ttouch $@\n+\n+rusty/libbitcoin.rlib: rusty/libbech32.rlib rusty/libbitcoin_hashes.rlib rusty/libsecp256k1.rlib\n+rusty/libbitcoin.rlib: rusty/rust-bitcoin/src/lib.rs $(wildcard rusty/rust-bitcoin/src/*.rs) $(wildcard rusty/rust-bitcoin/src/*/*.rs) $(wildcard rusty/rust-bitcoin/src/*/*/*.rs)\n+\t$(RUSTC) --crate-name bitcoin $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --out-dir $(@D) --extern bech32=$(@D)/libbech32.rlib --extern bitcoin_hashes=$(@D)/libbitcoin_hashes.rlib --extern secp256k1=$(@D)/libsecp256k1.rlib && \\\n+\ttouch $@\n+\n+# We force overflow checks on so that any integer overflows result in a panic\n+# instead of, eg, attempting to alloc 4GB of memory (though we will catch such\n+# an alloc and refuse it, generating a panic instead).\n+# Also force panics to unwind (instead of calling abort()) as we want to catch\n+# panics in the Rust threads and simply close the thread, instead of bringing\n+# down the rest of Bitcoin Core.\n+$(LIBBITCOIN_RUSTY): $(LIBBITCOIN_RUSTY_SRCS) rusty/libbitcoin.rlib rusty/liblibc.rlib\n+\t$(RUSTC) --crate-name rusty $< --target=$(RUST_TARGET) --crate-type=staticlib --emit=link -g -O -C lto=on -C overflow-checks=on -C panic=unwind --out-dir $(@D) -L dependency=$(@D) --extern libc=$(@D)/liblibc.rlib --extern bitcoin_hashes=$(@D)/libbitcoin_hashes.rlib --extern bitcoin=$(@D)/libbitcoin.rlib",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17376#discussion_r347272353",
      "id" : 347272353,
      "in_reply_to_id" : 347073757,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NzI3MjM1Mw==",
      "original_commit_id" : "33287e2a3f516e38d70537436c680c4b43be3587",
      "original_position" : 85,
      "path" : "src/Makefile.am",
      "position" : 85,
      "pull_request_review_id" : 318192768,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17376",
      "updated_at" : "2019-11-18T09:28:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347272353",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/762502?v=4",
         "events_url" : "https://api.github.com/users/icota/events{/privacy}",
         "followers_url" : "https://api.github.com/users/icota/followers",
         "following_url" : "https://api.github.com/users/icota/following{/other_user}",
         "gists_url" : "https://api.github.com/users/icota/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/icota",
         "id" : 762502,
         "login" : "icota",
         "node_id" : "MDQ6VXNlcjc2MjUwMg==",
         "organizations_url" : "https://api.github.com/users/icota/orgs",
         "received_events_url" : "https://api.github.com/users/icota/received_events",
         "repos_url" : "https://api.github.com/users/icota/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/icota/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/icota/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/icota"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17376#discussion_r347521655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17376"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347521655"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ehh, might as well just leave it, then.",
      "commit_id" : "33287e2a3f516e38d70537436c680c4b43be3587",
      "created_at" : "2019-11-18T17:51:02Z",
      "diff_hunk" : "@@ -359,6 +370,51 @@ libbitcoin_wallet_tool_a_SOURCES = \\\n   wallet/wallettool.cpp \\\n   $(BITCOIN_CORE_H)\n \n+# rustc only reqires the main .rs file as input, but rustc must also be invoked\n+# if any of the other files change. List the main file first, then targets can\n+# depend on $(LIBBITCOIN_RUSTY_SRCS), but only build the first source file ($<).\n+LIBBITCOIN_RUSTY_SRCS= \\\n+  rusty/src/lib.rs \\\n+  rusty/src/bridge.rs \\\n+  rusty/src/dns_headers.rs \\\n+  rusty/src/rest_downloader.rs \\\n+  rusty/src/p2p_addrs.rs rusty/src/p2p_client.rs \\\n+  rusty/src/p2p_socket_handler.rs\n+\n+LIBBITCOIN_RUSTY_TEST_SRCS= \\\n+  rusty/src/test_bridge.rs\n+\n+rusty/liblibc.rlib: rusty/libc/src/lib.rs $(wildcard rusty/libc/src/*.rs)\n+\t$(RUSTC) --crate-name libc $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --out-dir $(@D) && \\\n+\ttouch $@\n+\n+rusty/libbech32.rlib: rusty/rust-bech32/src/lib.rs $(wildcard rusty/rust-bech32/src/*.rs)\n+\t$(RUSTC) --crate-name bech32 $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --out-dir $(@D) && \\\n+\ttouch $@\n+\n+rusty/libbitcoin_hashes.rlib: rusty/bitcoin_hashes/src/lib.rs $(wildcard rusty/bitcoin_hashes/src/*.rs)\n+\t$(RUSTC) --crate-name bitcoin_hashes $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' --out-dir $(@D) && \\\n+\ttouch $@\n+\n+rusty/libsecp256k1.rlib: rusty/rust-secp256k1/src/lib.rs $(wildcard rusty/rust-secp256k1/src/*.rs) $(LIBSECP256K1)\n+\t$(RUSTC) --crate-name secp256k1 $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --cfg 'feature=\"std\"' --cfg 'feature=\"dont_replace_c_symbols\"' --out-dir $(@D) && \\\n+\ttouch $@\n+\n+rusty/libbitcoin.rlib: rusty/libbech32.rlib rusty/libbitcoin_hashes.rlib rusty/libsecp256k1.rlib\n+rusty/libbitcoin.rlib: rusty/rust-bitcoin/src/lib.rs $(wildcard rusty/rust-bitcoin/src/*.rs) $(wildcard rusty/rust-bitcoin/src/*/*.rs) $(wildcard rusty/rust-bitcoin/src/*/*/*.rs)\n+\t$(RUSTC) --crate-name bitcoin $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --out-dir $(@D) --extern bech32=$(@D)/libbech32.rlib --extern bitcoin_hashes=$(@D)/libbitcoin_hashes.rlib --extern secp256k1=$(@D)/libsecp256k1.rlib && \\\n+\ttouch $@\n+\n+# We force overflow checks on so that any integer overflows result in a panic\n+# instead of, eg, attempting to alloc 4GB of memory (though we will catch such\n+# an alloc and refuse it, generating a panic instead).\n+# Also force panics to unwind (instead of calling abort()) as we want to catch\n+# panics in the Rust threads and simply close the thread, instead of bringing\n+# down the rest of Bitcoin Core.\n+$(LIBBITCOIN_RUSTY): $(LIBBITCOIN_RUSTY_SRCS) rusty/libbitcoin.rlib rusty/liblibc.rlib\n+\t$(RUSTC) --crate-name rusty $< --target=$(RUST_TARGET) --crate-type=staticlib --emit=link -g -O -C lto=on -C overflow-checks=on -C panic=unwind --out-dir $(@D) -L dependency=$(@D) --extern libc=$(@D)/liblibc.rlib --extern bitcoin_hashes=$(@D)/libbitcoin_hashes.rlib --extern bitcoin=$(@D)/libbitcoin.rlib",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17376#discussion_r347521655",
      "id" : 347521655,
      "in_reply_to_id" : 347073757,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NzUyMTY1NQ==",
      "original_commit_id" : "33287e2a3f516e38d70537436c680c4b43be3587",
      "original_position" : 85,
      "path" : "src/Makefile.am",
      "position" : 85,
      "pull_request_review_id" : 318516345,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17376",
      "updated_at" : "2019-11-18T17:51:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347521655",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17376#discussion_r347787973"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17376"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347787973"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah, it's not a big deal",
      "commit_id" : "33287e2a3f516e38d70537436c680c4b43be3587",
      "created_at" : "2019-11-19T08:34:38Z",
      "diff_hunk" : "@@ -359,6 +370,51 @@ libbitcoin_wallet_tool_a_SOURCES = \\\n   wallet/wallettool.cpp \\\n   $(BITCOIN_CORE_H)\n \n+# rustc only reqires the main .rs file as input, but rustc must also be invoked\n+# if any of the other files change. List the main file first, then targets can\n+# depend on $(LIBBITCOIN_RUSTY_SRCS), but only build the first source file ($<).\n+LIBBITCOIN_RUSTY_SRCS= \\\n+  rusty/src/lib.rs \\\n+  rusty/src/bridge.rs \\\n+  rusty/src/dns_headers.rs \\\n+  rusty/src/rest_downloader.rs \\\n+  rusty/src/p2p_addrs.rs rusty/src/p2p_client.rs \\\n+  rusty/src/p2p_socket_handler.rs\n+\n+LIBBITCOIN_RUSTY_TEST_SRCS= \\\n+  rusty/src/test_bridge.rs\n+\n+rusty/liblibc.rlib: rusty/libc/src/lib.rs $(wildcard rusty/libc/src/*.rs)\n+\t$(RUSTC) --crate-name libc $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --out-dir $(@D) && \\\n+\ttouch $@\n+\n+rusty/libbech32.rlib: rusty/rust-bech32/src/lib.rs $(wildcard rusty/rust-bech32/src/*.rs)\n+\t$(RUSTC) --crate-name bech32 $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --out-dir $(@D) && \\\n+\ttouch $@\n+\n+rusty/libbitcoin_hashes.rlib: rusty/bitcoin_hashes/src/lib.rs $(wildcard rusty/bitcoin_hashes/src/*.rs)\n+\t$(RUSTC) --crate-name bitcoin_hashes $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --cfg 'feature=\"default\"' --cfg 'feature=\"std\"' --out-dir $(@D) && \\\n+\ttouch $@\n+\n+rusty/libsecp256k1.rlib: rusty/rust-secp256k1/src/lib.rs $(wildcard rusty/rust-secp256k1/src/*.rs) $(LIBSECP256K1)\n+\t$(RUSTC) --crate-name secp256k1 $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --cfg 'feature=\"std\"' --cfg 'feature=\"dont_replace_c_symbols\"' --out-dir $(@D) && \\\n+\ttouch $@\n+\n+rusty/libbitcoin.rlib: rusty/libbech32.rlib rusty/libbitcoin_hashes.rlib rusty/libsecp256k1.rlib\n+rusty/libbitcoin.rlib: rusty/rust-bitcoin/src/lib.rs $(wildcard rusty/rust-bitcoin/src/*.rs) $(wildcard rusty/rust-bitcoin/src/*/*.rs) $(wildcard rusty/rust-bitcoin/src/*/*/*.rs)\n+\t$(RUSTC) --crate-name bitcoin $< --crate-type=rlib -g -O -C overflow-checks=on -C panic=unwind --out-dir $(@D) --extern bech32=$(@D)/libbech32.rlib --extern bitcoin_hashes=$(@D)/libbitcoin_hashes.rlib --extern secp256k1=$(@D)/libsecp256k1.rlib && \\\n+\ttouch $@\n+\n+# We force overflow checks on so that any integer overflows result in a panic\n+# instead of, eg, attempting to alloc 4GB of memory (though we will catch such\n+# an alloc and refuse it, generating a panic instead).\n+# Also force panics to unwind (instead of calling abort()) as we want to catch\n+# panics in the Rust threads and simply close the thread, instead of bringing\n+# down the rest of Bitcoin Core.\n+$(LIBBITCOIN_RUSTY): $(LIBBITCOIN_RUSTY_SRCS) rusty/libbitcoin.rlib rusty/liblibc.rlib\n+\t$(RUSTC) --crate-name rusty $< --target=$(RUST_TARGET) --crate-type=staticlib --emit=link -g -O -C lto=on -C overflow-checks=on -C panic=unwind --out-dir $(@D) -L dependency=$(@D) --extern libc=$(@D)/liblibc.rlib --extern bitcoin_hashes=$(@D)/libbitcoin_hashes.rlib --extern bitcoin=$(@D)/libbitcoin.rlib",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17376#discussion_r347787973",
      "id" : 347787973,
      "in_reply_to_id" : 347073757,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0Nzc4Nzk3Mw==",
      "original_commit_id" : "33287e2a3f516e38d70537436c680c4b43be3587",
      "original_position" : 85,
      "path" : "src/Makefile.am",
      "position" : 85,
      "pull_request_review_id" : 318856763,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17376",
      "updated_at" : "2019-11-19T08:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347787973",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/762502?v=4",
         "events_url" : "https://api.github.com/users/icota/events{/privacy}",
         "followers_url" : "https://api.github.com/users/icota/followers",
         "following_url" : "https://api.github.com/users/icota/following{/other_user}",
         "gists_url" : "https://api.github.com/users/icota/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/icota",
         "id" : 762502,
         "login" : "icota",
         "node_id" : "MDQ6VXNlcjc2MjUwMg==",
         "organizations_url" : "https://api.github.com/users/icota/orgs",
         "received_events_url" : "https://api.github.com/users/icota/received_events",
         "repos_url" : "https://api.github.com/users/icota/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/icota/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/icota/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/icota"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Closing due to lack of interest.",
      "created_at" : "2020-03-05T19:48:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17376#issuecomment-595413976",
      "id" : 595413976,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17376",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NTQxMzk3Ng==",
      "updated_at" : "2020-03-05T19:48:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/595413976",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   }
]
