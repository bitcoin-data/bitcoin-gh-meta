[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.\r\nThis feels very deja-vu. Is it somehow possible to prevent these from being introduced? How did you find them?",
      "created_at" : "2020-12-05T11:35:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-739239277",
      "id" : 739239277,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20575",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTIzOTI3Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-05T12:05:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739239277",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "An alternative (and shorter patch) would be to use `Assert`, whose expression is always evaluated, even if for some unexplainable reason NDEBUG is set. ",
      "created_at" : "2020-12-05T12:35:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-739245250",
      "id" : 739245250,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20575",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTI0NTI1MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-05T12:35:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739245250",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke that's a different approach right? It would be allowed to use stuff like `Assert(--i)`.",
      "created_at" : "2020-12-05T12:38:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-739245577",
      "id" : 739245577,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20575",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTI0NTU3Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-05T12:42:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739245577",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2020-12-05T13:13:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-739249471",
      "id" : 739249471,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20575",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTI0OTQ3MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-05T13:13:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739249471",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Concept ACK.\r\n\r\nThanks!\r\n\r\n> This feels very deja-vu.\r\n> Is it somehow possible to prevent these from being introduced? \r\n\r\nHeh, the deja-vu is understandable :)  You [asked](https://github.com/bitcoin/bitcoin/pull/9344#issuecomment-266971851) the same question (\"How can we avoid these from being introduced again?\") in a gmaxwell PR with _exactly_ the same title four years ago: #9344 (\"Do not run functions with necessary side-effects in assert()\") :D\r\n\r\nLuckily assertion side-effects can trivially be guarded against using liniting. Let me know if we want such a linter: I'd be happy to write one if we have a consensus Concept ACK on that.\r\n\r\n> How did you find them?\r\n\r\nI stumbled upon these when reading static analyzer logs in search for more severe issues. Static analysers typically flag assertions with side effects. See #18920 for instructions on how to analyze Bitcoin Core using Clang Static Analysis, `clang-tidy` and `cppcheck`.\r\n\r\nExample:\r\n\r\n```\r\n$ CPPCHECK_VERSION=2.3\r\n$ curl -s https://codeload.github.com/danmar/cppcheck/tar.gz/${CPPCHECK_VERSION} | tar -zxf - --directory /tmp/\r\n$ (cd /tmp/cppcheck-${CPPCHECK_VERSION}/ && make CFGDIR=/tmp/cppcheck-${CPPCHECK_VERSION}/cfg/ > /dev/null)\r\n$ /tmp/cppcheck-${CPPCHECK_VERSION}/cppcheck \\\r\n    --enable=all \\\r\n    --language=c++ \\\r\n    --std=c++17 \\\r\n    -D__cplusplus \\\r\n    -DCLIENT_VERSION_BUILD \\\r\n    -DCLIENT_VERSION_IS_RELEASE \\\r\n    -DCLIENT_VERSION_MAJOR \\\r\n    -DCLIENT_VERSION_MINOR \\\r\n    -DCLIENT_VERSION_REVISION \\\r\n    -DCOPYRIGHT_YEAR \\\r\n    -DDEBUG \\\r\n    -DHAVE_WORKING_BOOST_SLEEP_FOR \\\r\n    -I src/ \\\r\n    -q \\\r\n    $(git ls-files -- \"*.cpp\" \"*.h\" \":(exclude)src/leveldb/\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\") 2>&1 | \\\r\n    grep -A2 assertWithSideEffect\r\n\r\nsrc/bench/chacha_poly_aead.cpp:34:21: warning: Assert statement calls a function which may have desired side effects: 'Crypt'. [assertWithSideEffect]\r\n        assert(aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, out.data(), out.size(), in.data(), buffersize, true));\r\n                    ^\r\nsrc/bench/chacha_poly_aead.cpp:38:25: warning: Assert statement calls a function which may have desired side effects: 'GetLength'. [assertWithSideEffect]\r\n            assert(aead.GetLength(&len, seqnr_aad, aad_pos, in.data()));\r\n                        ^\r\nsrc/bench/chacha_poly_aead.cpp:39:25: warning: Assert statement calls a function which may have desired side effects: 'Crypt'. [assertWithSideEffect]\r\n            assert(aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, out.data(), out.size(), in.data(), buffersize, true));\r\n                        ^\r\n--\r\nsrc/init.cpp:1666:40: warning: Assert statement calls a function which may have desired side effects: 'CanFlushToDisk'. [assertWithSideEffect]\r\n                    assert(chainstate->CanFlushToDisk());\r\n                                       ^\r\n```",
      "created_at" : "2020-12-05T16:23:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-739316938",
      "id" : 739316938,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20575",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTMxNjkzOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-06T00:33:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739316938",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20575#discussion_r536922900"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20575"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536922900"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Pretty sure this doesn't have side effects. Why does your tool think otherwise?",
      "commit_id" : "5021810650afc3073c2af6953ff046ad4d27a1fc",
      "created_at" : "2020-12-06T00:41:52Z",
      "diff_hunk" : "@@ -2226,7 +2226,8 @@ bool CChainState::FlushStateToDisk(\n     int nManualPruneHeight)\n {\n     LOCK(cs_main);\n-    assert(this->CanFlushToDisk());\n+    const bool can_flush = this->CanFlushToDisk();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20575#discussion_r536922900",
      "id" : 536922900,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyMjkwMA==",
      "original_commit_id" : "977139eac694c3039d49a982322768e8b588a52e",
      "original_line" : 2229,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 545660351,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20575",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-06T00:58:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536922900",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20575#discussion_r536923887"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20575"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536923887"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You're right. Dropping this one and marking `CanFlushToDisk` const.",
      "commit_id" : "5021810650afc3073c2af6953ff046ad4d27a1fc",
      "created_at" : "2020-12-06T00:49:24Z",
      "diff_hunk" : "@@ -2226,7 +2226,8 @@ bool CChainState::FlushStateToDisk(\n     int nManualPruneHeight)\n {\n     LOCK(cs_main);\n-    assert(this->CanFlushToDisk());\n+    const bool can_flush = this->CanFlushToDisk();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20575#discussion_r536923887",
      "id" : 536923887,
      "in_reply_to_id" : 536922900,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyMzg4Nw==",
      "original_commit_id" : "977139eac694c3039d49a982322768e8b588a52e",
      "original_line" : 2229,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 545660665,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20575",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-06T00:58:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536923887",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20575#discussion_r536924077"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20575"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536924077"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The function could be made const. Perhaps `cppcheck` then doesn't see this as potentially side-effect having?",
      "commit_id" : "5021810650afc3073c2af6953ff046ad4d27a1fc",
      "created_at" : "2020-12-06T00:50:46Z",
      "diff_hunk" : "@@ -2226,7 +2226,8 @@ bool CChainState::FlushStateToDisk(\n     int nManualPruneHeight)\n {\n     LOCK(cs_main);\n-    assert(this->CanFlushToDisk());\n+    const bool can_flush = this->CanFlushToDisk();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20575#discussion_r536924077",
      "id" : 536924077,
      "in_reply_to_id" : 536922900,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkyNDA3Nw==",
      "original_commit_id" : "977139eac694c3039d49a982322768e8b588a52e",
      "original_line" : 2229,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 545660721,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20575",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-06T00:58:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536924077",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Luckily assertion side-effects can trivially be guarded against using liniting. Let me know if we want such a linter: I'd be happy to write one if we have a consensus Concept ACK on that.\r\n\r\nMaybeâ@sipa's find shows that at least a trivial linter could be easily confused.\r\n\r\n> An alternative (and shorter patch) would be to use Assert, whose expression is always evaluated, even if for some unexplainable reason NDEBUG is set.\r\n\r\nThis seems like the best long-term strategy to me. Move to our own assert function that is always evaluated, then forbid (using a trivial linter) use of built-in assert.\r\n\r\nCode review ACK 5021810650afc3073c2af6953ff046ad4d27a1fc",
      "created_at" : "2020-12-10T12:44:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-742498461",
      "id" : 742498461,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20575",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MjQ5ODQ2MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-10T12:54:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/742498461",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@practicalswift good catch ....\r\n\r\nGeneral Remark:\r\n/> When I read assert, my AI I read hazard too.\r\nQuestion: \r\n/> Morph from assert to general own Assert https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-739245250 has my sympathy too. \r\n/> why do we here and in some other places **const** ...  and not like in Assert  i.e. auto&& check; assert(...  & check); ....\r\n/> **const** is a promise in my view to a compiler that the src try to keep and the compiler might optimize such val out to regs.\r\n\r\nSo my question, why const and not auto&& or any clear var definition?\r\nI really would like to know why and rest my soul in peace.with that. ",
      "created_at" : "2020-12-13T10:18:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-743983757",
      "id" : 743983757,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20575",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0Mzk4Mzc1Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-13T10:18:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/743983757",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/34917548?v=4",
         "events_url" : "https://api.github.com/users/Saibato/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Saibato/followers",
         "following_url" : "https://api.github.com/users/Saibato/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Saibato/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Saibato",
         "id" : 34917548,
         "login" : "Saibato",
         "node_id" : "MDQ6VXNlcjM0OTE3NTQ4",
         "organizations_url" : "https://api.github.com/users/Saibato/orgs",
         "received_events_url" : "https://api.github.com/users/Saibato/received_events",
         "repos_url" : "https://api.github.com/users/Saibato/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Saibato/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Saibato/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Saibato"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@Saibato \r\n\r\nIs the question why `const bool foo = bar(â¦)` (with `const`) is used instead of `bool foo = bar(â¦)` (without `const`)?\r\n\r\nI try to make objects immutable by default. \r\n\r\nRationale from C++ Core Guidelines' [\"Con.1: By default, make objects immutable\"](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#con1-by-default-make-objects-immutable): \"Immutable objects are easier to reason about, so make objects non-const only when there is a need to change their value. Prevents accidental or hard-to-notice change of value.\"\r\n\r\nDoes that answer your question? :)",
      "created_at" : "2020-12-13T20:42:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-744065584",
      "id" : 744065584,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20575",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NDA2NTU4NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-13T20:42:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744065584",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@practicalswift \r\n> Is the question why `const bool foo = bar(â¦)` (with `const`) is used instead of `bool foo = bar(â¦)` (without `const`)?\r\n\r\nYup, that was the question, thx for the reasoning for that.\r\n\r\nAnd in every other case other  that assert, I would say perfect and sufficient and best good practice but in case of assert we check almost always for things that are volatile var and critical  and my point is if we put them even temp by promise const and expose those critical statements about what we expect to interpreted other as in the following lines we like to protect ( **const** maybe put by the compiler to rd-only mem or optimized out or hooked ).\r\n\r\nI just wonder if it is in this case not better to leave them var volatile as is and declare them like they will be used in the code lines we want to protect?",
      "created_at" : "2020-12-14T07:33:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-744237351",
      "id" : 744237351,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20575",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NDIzNzM1MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-14T07:37:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/744237351",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/34917548?v=4",
         "events_url" : "https://api.github.com/users/Saibato/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Saibato/followers",
         "following_url" : "https://api.github.com/users/Saibato/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Saibato/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Saibato",
         "id" : 34917548,
         "login" : "Saibato",
         "node_id" : "MDQ6VXNlcjM0OTE3NTQ4",
         "organizations_url" : "https://api.github.com/users/Saibato/orgs",
         "received_events_url" : "https://api.github.com/users/Saibato/received_events",
         "repos_url" : "https://api.github.com/users/Saibato/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Saibato/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Saibato/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Saibato"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@Saibato \r\n\r\n> And in every other case other that assert, I would say perfect and sufficient and best good practice but in case of assert we check almost always for things that are volatile var and critical and my point is if we put them even temp by promise const and expose those critical statements about what we expect to interpreted other as in the following lines we like to protect ( const maybe put by the compiler to rd-only mem or optimized out or hooked ).\r\n\r\nIs the concern that this change would give permission to the compiler to optimise away the assertions?\r\n\r\nIf so, there is no need for such concern: the compiler is simply not allowed to do that :)",
      "created_at" : "2020-12-15T12:54:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-745269201",
      "id" : 745269201,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20575",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NTI2OTIwMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-15T12:54:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745269201",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@practicalswift \r\n> Is the concern that this change would give permission to the compiler to optimise away the assertions?\r\n\r\nI hope not and also that no compiler does that ever in a way  i,e hey const bla = blabla(blablabla) , why update more than once, always true or false at first run and then save processor time? ,\r\nI was wary more that those values land in special regs or in general treated different that have we use those values we check for in the codelines that follow assertions.\r\nHavvy nitpicking, but . that was what i thought might happen.",
      "created_at" : "2020-12-15T17:19:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-745438282",
      "id" : 745438282,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20575",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NTQzODI4Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-15T17:19:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745438282",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/34917548?v=4",
         "events_url" : "https://api.github.com/users/Saibato/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Saibato/followers",
         "following_url" : "https://api.github.com/users/Saibato/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Saibato/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Saibato",
         "id" : 34917548,
         "login" : "Saibato",
         "node_id" : "MDQ6VXNlcjM0OTE3NTQ4",
         "organizations_url" : "https://api.github.com/users/Saibato/orgs",
         "received_events_url" : "https://api.github.com/users/Saibato/received_events",
         "repos_url" : "https://api.github.com/users/Saibato/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Saibato/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Saibato/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Saibato"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Two ACKs (laanwj & theStack) and one stale ACK (promag): getting ready for merge? :)",
      "created_at" : "2020-12-15T17:33:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-745446866",
      "id" : 745446866,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20575",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NTQ0Njg2Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-15T17:33:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745446866",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@Saibato The C and C++ languages specify exactly what kind of optimizations the compiler is allowed to make, and with a very small set of exceptions, that is the \"as if\" rule: optimizations may not change observable behavior: https://en.cppreference.com/w/cpp/language/as_if . Making an object const may enable optimizations (though only very rarely), but the effect can never be observable (and an assertion failure is observable).\r\n",
      "created_at" : "2020-12-15T17:47:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-745455521",
      "id" : 745455521,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20575",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NTQ1NTUyMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-15T17:47:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745455521",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 5021810650afc3073c2af6953ff046ad4d27a1fc",
      "created_at" : "2020-12-15T17:48:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-745456414",
      "id" : 745456414,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20575",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NTQ1NjQxNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-15T17:48:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745456414",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@practicalswift @sipa thx for addressing my remarks I rest this now,assuming the overall consensus is that https://github.com/bitcoin/bitcoin/commit/5021810650afc3073c2af6953ff046ad4d27a1fc  is well defined save behavior,",
      "created_at" : "2020-12-16T07:40:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20575#issuecomment-745842499",
      "id" : 745842499,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20575",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NTg0MjQ5OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-16T07:40:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745842499",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/34917548?v=4",
         "events_url" : "https://api.github.com/users/Saibato/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Saibato/followers",
         "following_url" : "https://api.github.com/users/Saibato/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Saibato/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Saibato",
         "id" : 34917548,
         "login" : "Saibato",
         "node_id" : "MDQ6VXNlcjM0OTE3NTQ4",
         "organizations_url" : "https://api.github.com/users/Saibato/orgs",
         "received_events_url" : "https://api.github.com/users/Saibato/received_events",
         "repos_url" : "https://api.github.com/users/Saibato/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Saibato/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Saibato/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Saibato"
      }
   }
]
