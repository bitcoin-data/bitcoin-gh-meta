[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21483 (p2p: add time when deserialize file db for ReadAnchors by brunoerg)\n* #20966 (banman: save the banlist in a JSON format on disk by vasild)\n* #20509 (net: CAddress deser: use stream's version, not what's coming from disk by vasild)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-11-27T02:24:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-734548674",
      "id" : 734548674,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20516",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczNDU0ODY3NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-14T16:16:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/734548674",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I merged the anchors.dat addrv2 support from #20514 into this PR, as doing it correctly requires changes the `Cservice` serialization from stream version based to stored version based.",
      "created_at" : "2020-11-27T19:17:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-734958654",
      "id" : 734958654,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20516",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczNDk1ODY1NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-27T19:17:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/734958654",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.\r\n\r\nFrom the PR description and quick code reading it follows that there is no hurry to backport these changes into 0.21, right?",
      "created_at" : "2020-11-27T19:49:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-734965909",
      "id" : 734965909,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20516",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczNDk2NTkwOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-27T19:49:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/734965909",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Indeed, there is probably no hurry, unless we want to support torv3 anchors in 0.21.",
      "created_at" : "2020-11-27T19:50:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-734966179",
      "id" : 734966179,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20516",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczNDk2NjE3OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-27T19:50:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/734966179",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r532026970"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532026970"
         }
      },
      "author_association" : "MEMBER",
      "body" : "501de309e682f2edddb7e51e55665e034e1a86be, while this line is touched, it seems natural to inherit the stream type as well:\r\n\r\n```suggestion\r\n        CHashWriter hasher(stream.GetType(), stream.GetVersion());\r\n```\r\n\r\nAnd `CHashVerifier` uses type of stream.",
      "commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "created_at" : "2020-11-28T11:03:35Z",
      "diff_hunk" : "@@ -23,7 +23,7 @@ bool SerializeDB(Stream& stream, const Data& data)\n {\n     // Write and commit header, data\n     try {\n-        CHashWriter hasher(SER_DISK, CLIENT_VERSION);\n+        CHashWriter hasher(SER_DISK, stream.GetVersion());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r532026970",
      "id" : 532026970,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAyNjk3MA==",
      "original_commit_id" : "04e3733b8dc073562e30a12f955a0430793cfe25",
      "original_line" : 26,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/addrdb.cpp",
      "position" : null,
      "pull_request_review_id" : 540368109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-30T21:40:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532026970",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r532053363"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532053363"
         }
      },
      "author_association" : "MEMBER",
      "body" : "6d16903c4c384bc15f3f29e5635bb9dccd789cb6\r\n```suggestion\r\n    static_assert(DISK_VERSION_ADDRV2 == ADDRV2_FORMAT, \"DISK_VERSION_ADDRV2 must be equal to ADDRV2_FORMAT for backward compatibility\");\r\n```",
      "commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "created_at" : "2020-11-28T15:43:53Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,\n+     *  but the actual format is determined by the high bits in the stored version field.\n+     *  For network serialization ADDRV2_FORMAT determines the actual format used (as it has no\n+     *  embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{(1 << 19) - 1};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static constexpr uint32_t DISK_VERSION_ADDRV2 = 0x20000000;\n+    static_assert((DISK_VERSION_ADDRV2 & DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_ADDRV2 must not be covered by DISK_VERSION_IGNORE_MASK\");\n+    static_assert(DISK_VERSION_ADDRV2 == ADDRV2_FORMAT, \"DISK_VERSION_ADDRV2 must ADDRV2_FORMAT for backward compatibility\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r532053363",
      "id" : 532053363,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1MzM2Mw==",
      "original_commit_id" : "04e3733b8dc073562e30a12f955a0430793cfe25",
      "original_line" : 386,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 540383063,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-30T21:40:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532053363",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r532057230"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532057230"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe present `DISK_VERSION_ADDRV2` as a bit flag explicitly, i.e.\r\n```suggestion\r\n    static constexpr uint32_t DISK_VERSION_ADDRV2 = 1 << 29;\r\n```\r\n?",
      "commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "created_at" : "2020-11-28T16:21:41Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,\n+     *  but the actual format is determined by the high bits in the stored version field.\n+     *  For network serialization ADDRV2_FORMAT determines the actual format used (as it has no\n+     *  embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{(1 << 19) - 1};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static constexpr uint32_t DISK_VERSION_ADDRV2 = 0x20000000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r532057230",
      "id" : 532057230,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1NzIzMA==",
      "original_commit_id" : "04e3733b8dc073562e30a12f955a0430793cfe25",
      "original_line" : 384,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 540385340,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-30T21:40:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532057230",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r532057860"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532057860"
         }
      },
      "author_association" : "MEMBER",
      "body" : "When a new bit flag for disk serialization will be introduced in the future, a downgraded (after upgrading) node will throw an exception during deserialization. Maybe:\r\n```suggestion\r\n            } else if (stored_format_version & DISK_VERSION_ADDRV2 && (s.GetVersion() & ADDRV2_FORMAT)) {\r\n```\r\n?",
      "commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "created_at" : "2020-11-28T16:27:28Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,\n+     *  but the actual format is determined by the high bits in the stored version field.\n+     *  For network serialization ADDRV2_FORMAT determines the actual format used (as it has no\n+     *  embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{(1 << 19) - 1};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static constexpr uint32_t DISK_VERSION_ADDRV2 = 0x20000000;\n+    static_assert((DISK_VERSION_ADDRV2 & DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_ADDRV2 must not be covered by DISK_VERSION_IGNORE_MASK\");\n+    static_assert(DISK_VERSION_ADDRV2 == ADDRV2_FORMAT, \"DISK_VERSION_ADDRV2 must ADDRV2_FORMAT for backward compatibility\");\n+\n public:\n     CAddress() : CService{} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn) : CService{ipIn}, nServices{nServicesIn} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn, uint32_t nTimeIn) : CService{ipIn}, nTime{nTimeIn}, nServices{nServicesIn} {};\n \n     SERIALIZE_METHODS(CAddress, obj)\n     {\n-        SER_READ(obj, obj.nTime = TIME_INIT);\n-        int nVersion = s.GetVersion();\n+        // CAddress has a distinct network serialization and a disk serialization, but it should never\n+        // be hashed (except through CHashWriter in addrdb.cpp, which sets SER_DISK), and it's\n+        // ambiguous what that would mean. Make sure no code relying on that is introduced:\n+        assert(!(s.GetType() & SER_GETHASH));\n+        bool use_v2;\n+        bool store_time;\n         if (s.GetType() & SER_DISK) {\n-            READWRITE(nVersion);\n-        }\n-        if ((s.GetType() & SER_DISK) ||\n-            (nVersion != INIT_PROTO_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            uint32_t stored_format_version = DISK_VERSION_INIT;\n+            if (s.GetVersion() & ADDRV2_FORMAT) stored_format_version |= DISK_VERSION_ADDRV2;\n+            READWRITE(stored_format_version);\n+            stored_format_version &= ~DISK_VERSION_IGNORE_MASK; // ignore low bits\n+            if (stored_format_version == 0) {\n+                use_v2 = false;\n+            } else if (stored_format_version == DISK_VERSION_ADDRV2 && (s.GetVersion() & ADDRV2_FORMAT)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r532057860",
      "id" : 532057860,
      "line" : 408,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA1Nzg2MA==",
      "original_commit_id" : "04e3733b8dc073562e30a12f955a0430793cfe25",
      "original_line" : 408,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 61,
      "pull_request_review_id" : 540385340,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-30T21:40:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532057860",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r532091123"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532091123"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No, that would break the ability to add other formats in a compatible way.\r\n\r\nIt's supposed to throw an exception if it can't be read.",
      "commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "created_at" : "2020-11-28T18:23:55Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,\n+     *  but the actual format is determined by the high bits in the stored version field.\n+     *  For network serialization ADDRV2_FORMAT determines the actual format used (as it has no\n+     *  embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{(1 << 19) - 1};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static constexpr uint32_t DISK_VERSION_ADDRV2 = 0x20000000;\n+    static_assert((DISK_VERSION_ADDRV2 & DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_ADDRV2 must not be covered by DISK_VERSION_IGNORE_MASK\");\n+    static_assert(DISK_VERSION_ADDRV2 == ADDRV2_FORMAT, \"DISK_VERSION_ADDRV2 must ADDRV2_FORMAT for backward compatibility\");\n+\n public:\n     CAddress() : CService{} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn) : CService{ipIn}, nServices{nServicesIn} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn, uint32_t nTimeIn) : CService{ipIn}, nTime{nTimeIn}, nServices{nServicesIn} {};\n \n     SERIALIZE_METHODS(CAddress, obj)\n     {\n-        SER_READ(obj, obj.nTime = TIME_INIT);\n-        int nVersion = s.GetVersion();\n+        // CAddress has a distinct network serialization and a disk serialization, but it should never\n+        // be hashed (except through CHashWriter in addrdb.cpp, which sets SER_DISK), and it's\n+        // ambiguous what that would mean. Make sure no code relying on that is introduced:\n+        assert(!(s.GetType() & SER_GETHASH));\n+        bool use_v2;\n+        bool store_time;\n         if (s.GetType() & SER_DISK) {\n-            READWRITE(nVersion);\n-        }\n-        if ((s.GetType() & SER_DISK) ||\n-            (nVersion != INIT_PROTO_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            uint32_t stored_format_version = DISK_VERSION_INIT;\n+            if (s.GetVersion() & ADDRV2_FORMAT) stored_format_version |= DISK_VERSION_ADDRV2;\n+            READWRITE(stored_format_version);\n+            stored_format_version &= ~DISK_VERSION_IGNORE_MASK; // ignore low bits\n+            if (stored_format_version == 0) {\n+                use_v2 = false;\n+            } else if (stored_format_version == DISK_VERSION_ADDRV2 && (s.GetVersion() & ADDRV2_FORMAT)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r532091123",
      "id" : 532091123,
      "in_reply_to_id" : 532057860,
      "line" : 408,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA5MTEyMw==",
      "original_commit_id" : "04e3733b8dc073562e30a12f955a0430793cfe25",
      "original_line" : 408,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 61,
      "pull_request_review_id" : 540408979,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-30T21:40:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/532091123",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Addressed comments.",
      "created_at" : "2020-11-30T21:41:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-736073151",
      "id" : 736073151,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20516",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczNjA3MzE1MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-30T21:41:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/736073151",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2020-12-15T18:40:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-745485657",
      "id" : 745485657,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20516",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NTQ4NTY1Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-15T18:40:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745485657",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545902150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545902150"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n     *  For disk deserialization, ADDRV2_FORMAT in the stream version signals that ADDRV2 deserialization is permitted,\r\n```",
      "commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "created_at" : "2020-12-18T15:17:33Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545902150",
      "id" : 545902150,
      "line" : 376,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkwMjE1MA==",
      "original_commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "original_line" : 376,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 23,
      "pull_request_review_id" : 555578477,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-18T16:50:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545902150",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545902418"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545902418"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n     *  For network serialization ADDRV2_FORMAT in the stream version determines the actual format used (as it has no\r\n```",
      "commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "created_at" : "2020-12-18T15:17:58Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,\n+     *  but the actual format is determined by the high bits in the stored version field.\n+     *  For network serialization ADDRV2_FORMAT determines the actual format used (as it has no",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545902418",
      "id" : 545902418,
      "line" : 378,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkwMjQxOA==",
      "original_commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "original_line" : 378,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 25,
      "pull_request_review_id" : 555578477,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-18T16:50:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545902418",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545917692"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545917692"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nowadays\r\n\r\n```cpp\r\n(1 << 19) - 1\r\n```\r\n\r\ncan be written as\r\n\r\n```cpp\r\n0b00000000'00000111'11111111'11111111\r\n```\r\n\r\n(feel free to ignore)",
      "commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "created_at" : "2020-12-18T15:42:11Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,\n+     *  but the actual format is determined by the high bits in the stored version field.\n+     *  For network serialization ADDRV2_FORMAT determines the actual format used (as it has no\n+     *  embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{(1 << 19) - 1};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545917692",
      "id" : 545917692,
      "line" : 382,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkxNzY5Mg==",
      "original_commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "original_line" : 382,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 29,
      "pull_request_review_id" : 555578477,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-18T16:50:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545917692",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545922062"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545922062"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think it is ok to assign `ADDRV2_FORMAT` here and remove the last `static_assert` below.",
      "commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "created_at" : "2020-12-18T15:49:09Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,\n+     *  but the actual format is determined by the high bits in the stored version field.\n+     *  For network serialization ADDRV2_FORMAT determines the actual format used (as it has no\n+     *  embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{(1 << 19) - 1};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static constexpr uint32_t DISK_VERSION_ADDRV2 = 1 << 29;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545922062",
      "id" : 545922062,
      "line" : 384,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkyMjA2Mg==",
      "original_commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "original_line" : 384,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 31,
      "pull_request_review_id" : 555578477,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-18T16:50:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545922062",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545924591"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545924591"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Shouldn't this be 18 bytes, instead of 19? `CLIENT_VERSION` of `219900` is 18 bytes (`0b11'01011010'11111100`).",
      "commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "created_at" : "2020-12-18T15:53:15Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,\n+     *  but the actual format is determined by the high bits in the stored version field.\n+     *  For network serialization ADDRV2_FORMAT determines the actual format used (as it has no\n+     *  embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{(1 << 19) - 1};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545924591",
      "id" : 545924591,
      "line" : 382,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkyNDU5MQ==",
      "original_commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "original_line" : 382,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 29,
      "pull_request_review_id" : 555578477,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-18T16:50:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545924591",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545938774"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545938774"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The repeated code can be moved after the `if`:\r\n\r\n```suggestion\r\n        } else {\r\n            READWRITE(Using<CustomUintFormatter<8>>(obj.nServices));\r\n        }\r\n        OverrideStream<Stream> os(&s, s.GetType(), use_v2 ? ADDRV2_FORMAT : 0);\r\n        SerReadWriteMany(os, ser_action, ReadWriteAsHelper<CService>(obj));\r\n```",
      "commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "created_at" : "2020-12-18T16:16:59Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,\n+     *  but the actual format is determined by the high bits in the stored version field.\n+     *  For network serialization ADDRV2_FORMAT determines the actual format used (as it has no\n+     *  embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{(1 << 19) - 1};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static constexpr uint32_t DISK_VERSION_ADDRV2 = 1 << 29;\n+    static_assert((DISK_VERSION_ADDRV2 & DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_ADDRV2 must not be covered by DISK_VERSION_IGNORE_MASK\");\n+    static_assert(DISK_VERSION_ADDRV2 == ADDRV2_FORMAT, \"DISK_VERSION_ADDRV2 must be equal to ADDRV2_FORMAT for backward compatibility\");\n+\n public:\n     CAddress() : CService{} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn) : CService{ipIn}, nServices{nServicesIn} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn, uint32_t nTimeIn) : CService{ipIn}, nTime{nTimeIn}, nServices{nServicesIn} {};\n \n     SERIALIZE_METHODS(CAddress, obj)\n     {\n-        SER_READ(obj, obj.nTime = TIME_INIT);\n-        int nVersion = s.GetVersion();\n+        // CAddress has a distinct network serialization and a disk serialization, but it should never\n+        // be hashed (except through CHashWriter in addrdb.cpp, which sets SER_DISK), and it's\n+        // ambiguous what that would mean. Make sure no code relying on that is introduced:\n+        assert(!(s.GetType() & SER_GETHASH));\n+        bool use_v2;\n+        bool store_time;\n         if (s.GetType() & SER_DISK) {\n-            READWRITE(nVersion);\n-        }\n-        if ((s.GetType() & SER_DISK) ||\n-            (nVersion != INIT_PROTO_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            uint32_t stored_format_version = DISK_VERSION_INIT;\n+            if (s.GetVersion() & ADDRV2_FORMAT) stored_format_version |= DISK_VERSION_ADDRV2;\n+            READWRITE(stored_format_version);\n+            stored_format_version &= ~DISK_VERSION_IGNORE_MASK; // ignore low bits\n+            if (stored_format_version == 0) {\n+                use_v2 = false;\n+            } else if (stored_format_version == DISK_VERSION_ADDRV2 && (s.GetVersion() & ADDRV2_FORMAT)) {\n+                // Only support v2 deserialization if ADDRV2_FORMAT is set.\n+                use_v2 = true;\n+            } else {\n+                throw std::ios_base::failure(\"Unsupported CAddress disk format version\");\n+            }\n+            store_time = true;\n+        } else {\n+            assert(s.GetType() & SER_NETWORK);\n+            use_v2 = s.GetVersion() & ADDRV2_FORMAT;\n             // The only time we serialize a CAddress object without nTime is in\n             // the initial VERSION messages which contain two CAddress records.\n             // At that point, the serialization version is INIT_PROTO_VERSION.\n             // After the version handshake, serialization version is >=\n             // MIN_PEER_PROTO_VERSION and all ADDR messages are serialized with\n             // nTime.\n-            READWRITE(obj.nTime);\n+            store_time = s.GetVersion() != INIT_PROTO_VERSION;\n         }\n-        if (nVersion & ADDRV2_FORMAT) {\n+\n+        SER_READ(obj, obj.nTime = TIME_INIT);\n+        if (store_time) READWRITE(obj.nTime);\n+        if (use_v2) {\n             uint64_t services_tmp;\n             SER_WRITE(obj, services_tmp = obj.nServices);\n             READWRITE(Using<CompactSizeFormatter<false>>(services_tmp));\n             SER_READ(obj, obj.nServices = static_cast<ServiceFlags>(services_tmp));\n+            // Invoke V2 serializer for CService parent object.\n+            OverrideStream<Stream> os(&s, s.GetType(), ADDRV2_FORMAT);\n+            SerReadWriteMany(os, ser_action, ReadWriteAsHelper<CService>(obj));\n         } else {\n             READWRITE(Using<CustomUintFormatter<8>>(obj.nServices));\n+            // Invoke V1 serializer for CService parent object.\n+            OverrideStream<Stream> os(&s, s.GetType(), 0);\n+            SerReadWriteMany(os, ser_action, ReadWriteAsHelper<CService>(obj));\n         }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545938774",
      "id" : 545938774,
      "line" : 442,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkzODc3NA==",
      "original_commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "original_line" : 442,
      "original_position" : 97,
      "original_start_line" : 434,
      "path" : "src/protocol.h",
      "position" : 97,
      "pull_request_review_id" : 555578477,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : 434,
      "start_side" : "RIGHT",
      "updated_at" : "2020-12-18T16:50:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545938774",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545942030"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545942030"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Here and below in deserialize, why add `CLIENT_VERSION` when it is going to be ignored during ser/deser (they only check `s.GetVersion() & ADDRV2_FORMAT`)?",
      "commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "created_at" : "2020-12-18T16:22:41Z",
      "diff_hunk" : "@@ -161,13 +161,13 @@ bool CAddrDB::Read(CAddrMan& addr, CDataStream& ssPeers)\n void DumpAnchors(const fs::path& anchors_db_path, const std::vector<CAddress>& anchors)\n {\n     LOG_TIME_SECONDS(strprintf(\"Flush %d outbound block-relay-only peer addresses to anchors.dat\", anchors.size()));\n-    SerializeFileDB(\"anchors\", anchors_db_path, anchors);\n+    SerializeFileDB(\"anchors\", anchors_db_path, anchors, CLIENT_VERSION | ADDRV2_FORMAT);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545942030",
      "id" : 545942030,
      "line" : 164,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk0MjAzMA==",
      "original_commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "original_line" : 164,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/addrdb.cpp",
      "position" : 76,
      "pull_request_review_id" : 555578477,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-18T16:50:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545942030",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545944869"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545944869"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe this comment warrants an update, since we do not allow anything other than disk and network now.\r\n\r\nAlso, it is \"network only if s.GetVersion() != INIT_PROTO_VERSION\".",
      "commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "created_at" : "2020-12-18T16:27:27Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,\n+     *  but the actual format is determined by the high bits in the stored version field.\n+     *  For network serialization ADDRV2_FORMAT determines the actual format used (as it has no\n+     *  embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{(1 << 19) - 1};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static constexpr uint32_t DISK_VERSION_ADDRV2 = 1 << 29;\n+    static_assert((DISK_VERSION_ADDRV2 & DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_ADDRV2 must not be covered by DISK_VERSION_IGNORE_MASK\");\n+    static_assert(DISK_VERSION_ADDRV2 == ADDRV2_FORMAT, \"DISK_VERSION_ADDRV2 must be equal to ADDRV2_FORMAT for backward compatibility\");\n+\n public:\n     CAddress() : CService{} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn) : CService{ipIn}, nServices{nServicesIn} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn, uint32_t nTimeIn) : CService{ipIn}, nTime{nTimeIn}, nServices{nServicesIn} {};\n \n     SERIALIZE_METHODS(CAddress, obj)\n     {\n-        SER_READ(obj, obj.nTime = TIME_INIT);\n-        int nVersion = s.GetVersion();\n+        // CAddress has a distinct network serialization and a disk serialization, but it should never\n+        // be hashed (except through CHashWriter in addrdb.cpp, which sets SER_DISK), and it's\n+        // ambiguous what that would mean. Make sure no code relying on that is introduced:\n+        assert(!(s.GetType() & SER_GETHASH));\n+        bool use_v2;\n+        bool store_time;\n         if (s.GetType() & SER_DISK) {\n-            READWRITE(nVersion);\n-        }\n-        if ((s.GetType() & SER_DISK) ||\n-            (nVersion != INIT_PROTO_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            uint32_t stored_format_version = DISK_VERSION_INIT;\n+            if (s.GetVersion() & ADDRV2_FORMAT) stored_format_version |= DISK_VERSION_ADDRV2;\n+            READWRITE(stored_format_version);\n+            stored_format_version &= ~DISK_VERSION_IGNORE_MASK; // ignore low bits\n+            if (stored_format_version == 0) {\n+                use_v2 = false;\n+            } else if (stored_format_version == DISK_VERSION_ADDRV2 && (s.GetVersion() & ADDRV2_FORMAT)) {\n+                // Only support v2 deserialization if ADDRV2_FORMAT is set.\n+                use_v2 = true;\n+            } else {\n+                throw std::ios_base::failure(\"Unsupported CAddress disk format version\");\n+            }\n+            store_time = true;\n+        } else {\n+            assert(s.GetType() & SER_NETWORK);\n+            use_v2 = s.GetVersion() & ADDRV2_FORMAT;\n             // The only time we serialize a CAddress object without nTime is in\n             // the initial VERSION messages which contain two CAddress records.\n             // At that point, the serialization version is INIT_PROTO_VERSION.\n             // After the version handshake, serialization version is >=\n             // MIN_PEER_PROTO_VERSION and all ADDR messages are serialized with\n             // nTime.\n-            READWRITE(obj.nTime);\n+            store_time = s.GetVersion() != INIT_PROTO_VERSION;\n         }\n-        if (nVersion & ADDRV2_FORMAT) {\n+\n+        SER_READ(obj, obj.nTime = TIME_INIT);\n+        if (store_time) READWRITE(obj.nTime);\n+        if (use_v2) {\n             uint64_t services_tmp;\n             SER_WRITE(obj, services_tmp = obj.nServices);\n             READWRITE(Using<CompactSizeFormatter<false>>(services_tmp));\n             SER_READ(obj, obj.nServices = static_cast<ServiceFlags>(services_tmp));\n+            // Invoke V2 serializer for CService parent object.\n+            OverrideStream<Stream> os(&s, s.GetType(), ADDRV2_FORMAT);\n+            SerReadWriteMany(os, ser_action, ReadWriteAsHelper<CService>(obj));\n         } else {\n             READWRITE(Using<CustomUintFormatter<8>>(obj.nServices));\n+            // Invoke V1 serializer for CService parent object.\n+            OverrideStream<Stream> os(&s, s.GetType(), 0);\n+            SerReadWriteMany(os, ser_action, ReadWriteAsHelper<CService>(obj));\n         }\n-        READWRITEAS(CService, obj);\n     }\n \n     // disk and network only\n     uint32_t nTime{TIME_INIT};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545944869",
      "id" : 545944869,
      "line" : 446,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk0NDg2OQ==",
      "original_commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "original_line" : 446,
      "original_position" : 102,
      "original_start_line" : 445,
      "path" : "src/protocol.h",
      "position" : 102,
      "pull_request_review_id" : 555578477,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : 445,
      "start_side" : "RIGHT",
      "updated_at" : "2020-12-18T16:50:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545944869",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545958131"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545958131"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe also mention what happens during disk serialization and network deserialization:\r\n\r\nFor disk serialization, ADDRV2_FORMAT in the stream version indicates a write in that format\r\nFor network deserialization ADDRV2_FORMAT in the stream version indicates that the data is expected to be in that format",
      "commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "created_at" : "2020-12-18T16:49:44Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,\n+     *  but the actual format is determined by the high bits in the stored version field.\n+     *  For network serialization ADDRV2_FORMAT determines the actual format used (as it has no\n+     *  embedded version number).\n+     */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545958131",
      "id" : 545958131,
      "line" : 380,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk1ODEzMQ==",
      "original_commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "original_line" : 380,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 27,
      "pull_request_review_id" : 555578477,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-18T16:50:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/545958131",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638374077"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638374077"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done (ages ago).",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-05-25T00:31:12Z",
      "diff_hunk" : "@@ -23,7 +23,7 @@ bool SerializeDB(Stream& stream, const Data& data)\n {\n     // Write and commit header, data\n     try {\n-        CHashWriter hasher(SER_DISK, CLIENT_VERSION);\n+        CHashWriter hasher(SER_DISK, stream.GetVersion());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638374077",
      "id" : 638374077,
      "in_reply_to_id" : 532026970,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM3NDA3Nw==",
      "original_commit_id" : "04e3733b8dc073562e30a12f955a0430793cfe25",
      "original_line" : 26,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/addrdb.cpp",
      "position" : null,
      "pull_request_review_id" : 667296705,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-25T00:31:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638374077",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638380149"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638380149"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd rather not do that. The idea is that ADDRV2_FORMAT is irrelevant in the new code - it's purely an internal flag that has no impact on the disk format. It could be changed to whatever, or dropped entirely - but if that happens, DISK_VERSION_ADDRV2 must still remain `1 << 29`, because that's what *old* versions used as disk serialization marker.\r\n\r\nI've just removed the assert, and replaced it with a comment.",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-05-25T00:51:38Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,\n+     *  but the actual format is determined by the high bits in the stored version field.\n+     *  For network serialization ADDRV2_FORMAT determines the actual format used (as it has no\n+     *  embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{(1 << 19) - 1};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static constexpr uint32_t DISK_VERSION_ADDRV2 = 1 << 29;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638380149",
      "id" : 638380149,
      "in_reply_to_id" : 545922062,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM4MDE0OQ==",
      "original_commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "original_line" : 384,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 667303270,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-25T00:51:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638380149",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638380334"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638380334"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I guess I added one slack bit, because the version number is pretty close to needing that many already.",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-05-25T00:52:15Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,\n+     *  but the actual format is determined by the high bits in the stored version field.\n+     *  For network serialization ADDRV2_FORMAT determines the actual format used (as it has no\n+     *  embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{(1 << 19) - 1};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638380334",
      "id" : 638380334,
      "in_reply_to_id" : 545924591,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM4MDMzNA==",
      "original_commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "original_line" : 382,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 667303484,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-25T00:52:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638380334",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384486"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638384486"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-05-25T01:06:58Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,\n+     *  but the actual format is determined by the high bits in the stored version field.\n+     *  For network serialization ADDRV2_FORMAT determines the actual format used (as it has no\n+     *  embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{(1 << 19) - 1};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static constexpr uint32_t DISK_VERSION_ADDRV2 = 0x20000000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384486",
      "id" : 638384486,
      "in_reply_to_id" : 532057230,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM4NDQ4Ng==",
      "original_commit_id" : "04e3733b8dc073562e30a12f955a0430793cfe25",
      "original_line" : 384,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 667308310,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-25T01:06:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638384486",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384529"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638384529"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-05-25T01:07:09Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384529",
      "id" : 638384529,
      "in_reply_to_id" : 545902150,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM4NDUyOQ==",
      "original_commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "original_line" : 376,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 667308373,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-25T01:07:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638384529",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384569"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638384569"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-05-25T01:07:15Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,\n+     *  but the actual format is determined by the high bits in the stored version field.\n+     *  For network serialization ADDRV2_FORMAT determines the actual format used (as it has no",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384569",
      "id" : 638384569,
      "in_reply_to_id" : 545902418,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM4NDU2OQ==",
      "original_commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "original_line" : 378,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 667308406,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-25T01:07:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638384569",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384617"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638384617"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-05-25T01:07:21Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,\n+     *  but the actual format is determined by the high bits in the stored version field.\n+     *  For network serialization ADDRV2_FORMAT determines the actual format used (as it has no\n+     *  embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{(1 << 19) - 1};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384617",
      "id" : 638384617,
      "in_reply_to_id" : 545917692,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM4NDYxNw==",
      "original_commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "original_line" : 382,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 667308453,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-25T01:07:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638384617",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384672"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638384672"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-05-25T01:07:31Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,\n+     *  but the actual format is determined by the high bits in the stored version field.\n+     *  For network serialization ADDRV2_FORMAT determines the actual format used (as it has no\n+     *  embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{(1 << 19) - 1};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static constexpr uint32_t DISK_VERSION_ADDRV2 = 1 << 29;\n+    static_assert((DISK_VERSION_ADDRV2 & DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_ADDRV2 must not be covered by DISK_VERSION_IGNORE_MASK\");\n+    static_assert(DISK_VERSION_ADDRV2 == ADDRV2_FORMAT, \"DISK_VERSION_ADDRV2 must be equal to ADDRV2_FORMAT for backward compatibility\");\n+\n public:\n     CAddress() : CService{} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn) : CService{ipIn}, nServices{nServicesIn} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn, uint32_t nTimeIn) : CService{ipIn}, nTime{nTimeIn}, nServices{nServicesIn} {};\n \n     SERIALIZE_METHODS(CAddress, obj)\n     {\n-        SER_READ(obj, obj.nTime = TIME_INIT);\n-        int nVersion = s.GetVersion();\n+        // CAddress has a distinct network serialization and a disk serialization, but it should never\n+        // be hashed (except through CHashWriter in addrdb.cpp, which sets SER_DISK), and it's\n+        // ambiguous what that would mean. Make sure no code relying on that is introduced:\n+        assert(!(s.GetType() & SER_GETHASH));\n+        bool use_v2;\n+        bool store_time;\n         if (s.GetType() & SER_DISK) {\n-            READWRITE(nVersion);\n-        }\n-        if ((s.GetType() & SER_DISK) ||\n-            (nVersion != INIT_PROTO_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            uint32_t stored_format_version = DISK_VERSION_INIT;\n+            if (s.GetVersion() & ADDRV2_FORMAT) stored_format_version |= DISK_VERSION_ADDRV2;\n+            READWRITE(stored_format_version);\n+            stored_format_version &= ~DISK_VERSION_IGNORE_MASK; // ignore low bits\n+            if (stored_format_version == 0) {\n+                use_v2 = false;\n+            } else if (stored_format_version == DISK_VERSION_ADDRV2 && (s.GetVersion() & ADDRV2_FORMAT)) {\n+                // Only support v2 deserialization if ADDRV2_FORMAT is set.\n+                use_v2 = true;\n+            } else {\n+                throw std::ios_base::failure(\"Unsupported CAddress disk format version\");\n+            }\n+            store_time = true;\n+        } else {\n+            assert(s.GetType() & SER_NETWORK);\n+            use_v2 = s.GetVersion() & ADDRV2_FORMAT;\n             // The only time we serialize a CAddress object without nTime is in\n             // the initial VERSION messages which contain two CAddress records.\n             // At that point, the serialization version is INIT_PROTO_VERSION.\n             // After the version handshake, serialization version is >=\n             // MIN_PEER_PROTO_VERSION and all ADDR messages are serialized with\n             // nTime.\n-            READWRITE(obj.nTime);\n+            store_time = s.GetVersion() != INIT_PROTO_VERSION;\n         }\n-        if (nVersion & ADDRV2_FORMAT) {\n+\n+        SER_READ(obj, obj.nTime = TIME_INIT);\n+        if (store_time) READWRITE(obj.nTime);\n+        if (use_v2) {\n             uint64_t services_tmp;\n             SER_WRITE(obj, services_tmp = obj.nServices);\n             READWRITE(Using<CompactSizeFormatter<false>>(services_tmp));\n             SER_READ(obj, obj.nServices = static_cast<ServiceFlags>(services_tmp));\n+            // Invoke V2 serializer for CService parent object.\n+            OverrideStream<Stream> os(&s, s.GetType(), ADDRV2_FORMAT);\n+            SerReadWriteMany(os, ser_action, ReadWriteAsHelper<CService>(obj));\n         } else {\n             READWRITE(Using<CustomUintFormatter<8>>(obj.nServices));\n+            // Invoke V1 serializer for CService parent object.\n+            OverrideStream<Stream> os(&s, s.GetType(), 0);\n+            SerReadWriteMany(os, ser_action, ReadWriteAsHelper<CService>(obj));\n         }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384672",
      "id" : 638384672,
      "in_reply_to_id" : 545938774,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM4NDY3Mg==",
      "original_commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "original_line" : 442,
      "original_position" : 97,
      "original_start_line" : 434,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 667308507,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-05-25T01:07:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638384672",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384739"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638384739"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've updated the comments here.",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-05-25T01:07:44Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,\n+     *  but the actual format is determined by the high bits in the stored version field.\n+     *  For network serialization ADDRV2_FORMAT determines the actual format used (as it has no\n+     *  embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{(1 << 19) - 1};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static constexpr uint32_t DISK_VERSION_ADDRV2 = 1 << 29;\n+    static_assert((DISK_VERSION_ADDRV2 & DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_ADDRV2 must not be covered by DISK_VERSION_IGNORE_MASK\");\n+    static_assert(DISK_VERSION_ADDRV2 == ADDRV2_FORMAT, \"DISK_VERSION_ADDRV2 must be equal to ADDRV2_FORMAT for backward compatibility\");\n+\n public:\n     CAddress() : CService{} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn) : CService{ipIn}, nServices{nServicesIn} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn, uint32_t nTimeIn) : CService{ipIn}, nTime{nTimeIn}, nServices{nServicesIn} {};\n \n     SERIALIZE_METHODS(CAddress, obj)\n     {\n-        SER_READ(obj, obj.nTime = TIME_INIT);\n-        int nVersion = s.GetVersion();\n+        // CAddress has a distinct network serialization and a disk serialization, but it should never\n+        // be hashed (except through CHashWriter in addrdb.cpp, which sets SER_DISK), and it's\n+        // ambiguous what that would mean. Make sure no code relying on that is introduced:\n+        assert(!(s.GetType() & SER_GETHASH));\n+        bool use_v2;\n+        bool store_time;\n         if (s.GetType() & SER_DISK) {\n-            READWRITE(nVersion);\n-        }\n-        if ((s.GetType() & SER_DISK) ||\n-            (nVersion != INIT_PROTO_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            uint32_t stored_format_version = DISK_VERSION_INIT;\n+            if (s.GetVersion() & ADDRV2_FORMAT) stored_format_version |= DISK_VERSION_ADDRV2;\n+            READWRITE(stored_format_version);\n+            stored_format_version &= ~DISK_VERSION_IGNORE_MASK; // ignore low bits\n+            if (stored_format_version == 0) {\n+                use_v2 = false;\n+            } else if (stored_format_version == DISK_VERSION_ADDRV2 && (s.GetVersion() & ADDRV2_FORMAT)) {\n+                // Only support v2 deserialization if ADDRV2_FORMAT is set.\n+                use_v2 = true;\n+            } else {\n+                throw std::ios_base::failure(\"Unsupported CAddress disk format version\");\n+            }\n+            store_time = true;\n+        } else {\n+            assert(s.GetType() & SER_NETWORK);\n+            use_v2 = s.GetVersion() & ADDRV2_FORMAT;\n             // The only time we serialize a CAddress object without nTime is in\n             // the initial VERSION messages which contain two CAddress records.\n             // At that point, the serialization version is INIT_PROTO_VERSION.\n             // After the version handshake, serialization version is >=\n             // MIN_PEER_PROTO_VERSION and all ADDR messages are serialized with\n             // nTime.\n-            READWRITE(obj.nTime);\n+            store_time = s.GetVersion() != INIT_PROTO_VERSION;\n         }\n-        if (nVersion & ADDRV2_FORMAT) {\n+\n+        SER_READ(obj, obj.nTime = TIME_INIT);\n+        if (store_time) READWRITE(obj.nTime);\n+        if (use_v2) {\n             uint64_t services_tmp;\n             SER_WRITE(obj, services_tmp = obj.nServices);\n             READWRITE(Using<CompactSizeFormatter<false>>(services_tmp));\n             SER_READ(obj, obj.nServices = static_cast<ServiceFlags>(services_tmp));\n+            // Invoke V2 serializer for CService parent object.\n+            OverrideStream<Stream> os(&s, s.GetType(), ADDRV2_FORMAT);\n+            SerReadWriteMany(os, ser_action, ReadWriteAsHelper<CService>(obj));\n         } else {\n             READWRITE(Using<CustomUintFormatter<8>>(obj.nServices));\n+            // Invoke V1 serializer for CService parent object.\n+            OverrideStream<Stream> os(&s, s.GetType(), 0);\n+            SerReadWriteMany(os, ser_action, ReadWriteAsHelper<CService>(obj));\n         }\n-        READWRITEAS(CService, obj);\n     }\n \n     // disk and network only\n     uint32_t nTime{TIME_INIT};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384739",
      "id" : 638384739,
      "in_reply_to_id" : 545944869,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM4NDczOQ==",
      "original_commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "original_line" : 449,
      "original_position" : 102,
      "original_start_line" : 445,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 667308572,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-05-25T01:07:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638384739",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384950"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638384950"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I feel that's pretty much already mentioned (just above, and in other places). I've tried to improve the comments further.",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-05-25T01:08:27Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,\n+     *  but the actual format is determined by the high bits in the stored version field.\n+     *  For network serialization ADDRV2_FORMAT determines the actual format used (as it has no\n+     *  embedded version number).\n+     */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384950",
      "id" : 638384950,
      "in_reply_to_id" : 545958131,
      "line" : 377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM4NDk1MA==",
      "original_commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "original_line" : 377,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 27,
      "pull_request_review_id" : 667308810,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-25T01:08:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638384950",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased, and addressed comments.",
      "created_at" : "2021-05-25T01:08:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-847456308",
      "id" : 847456308,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20516",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0NzQ1NjMwOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-25T01:08:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/847456308",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638386087"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638386087"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That's just common in the codebase; use CLIENT_VERSION for disk serializations, PROTOCOL_VERSION for network serializations.\r\n\r\nI think this whole idea of streams having a version numbers with magic meanings, and implicit (=bad) compatibility properties for anything relying on it are silly, but getting rid of it isn't for this PR.",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-05-25T01:12:13Z",
      "diff_hunk" : "@@ -161,13 +161,13 @@ bool CAddrDB::Read(CAddrMan& addr, CDataStream& ssPeers)\n void DumpAnchors(const fs::path& anchors_db_path, const std::vector<CAddress>& anchors)\n {\n     LOG_TIME_SECONDS(strprintf(\"Flush %d outbound block-relay-only peer addresses to anchors.dat\", anchors.size()));\n-    SerializeFileDB(\"anchors\", anchors_db_path, anchors);\n+    SerializeFileDB(\"anchors\", anchors_db_path, anchors, CLIENT_VERSION | ADDRV2_FORMAT);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638386087",
      "id" : 638386087,
      "in_reply_to_id" : 545942030,
      "line" : 164,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODM4NjA4Nw==",
      "original_commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "original_line" : 164,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/addrdb.cpp",
      "position" : 76,
      "pull_request_review_id" : 667310124,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-25T01:12:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638386087",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r640644694"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640644694"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "_`s/bytes/bits/` in my comment above_\r\n\r\nI see, 18 bits would work until version 26 and 19 bits until version 52 (~15 years from now). Maybe add a few more bits (up to 29 is ok). And/or add some comment on what is that `19` (or another number if you choose to increment it).",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-05-27T13:51:41Z",
      "diff_hunk" : "@@ -361,43 +362,97 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT signals that ADDRV2 deserialization is permitted,\n+     *  but the actual format is determined by the high bits in the stored version field.\n+     *  For network serialization ADDRV2_FORMAT determines the actual format used (as it has no\n+     *  embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{(1 << 19) - 1};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r640644694",
      "id" : 640644694,
      "in_reply_to_id" : 545924591,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDY0NDY5NA==",
      "original_commit_id" : "80f5c544202c35a936bc04ee45e092b4325e637d",
      "original_line" : 382,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : null,
      "pull_request_review_id" : 670211080,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-27T13:51:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640644694",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r641443508"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641443508"
         }
      },
      "author_association" : "MEMBER",
      "body" : "8cd8f37 perhaps `constexpr`?\r\n",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-05-28T10:25:22Z",
      "diff_hunk" : "@@ -358,43 +359,103 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT in the stream version signals that ADDRV2\n+     *  deserialization is permitted, but the actual format is determined by the high bits in the\n+     *  stored version field. For network serialization, the stream version having ADDRV2_FORMAT or\n+     *  not determines the actual format used (as it has no embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{0b00000000'00000111'11111111'11111111};\n+    /** The version number written in disk serialized addresses to indicate V2 serializations.\n+     * It must be exactly 1<<29, as that is the value that historical versions used for this\n+     * (they used their internal ADDRV2_FORMAT flag here). */\n+    static constexpr uint32_t DISK_VERSION_ADDRV2{1 << 29};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static_assert((DISK_VERSION_ADDRV2 & DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_ADDRV2 must not be covered by DISK_VERSION_IGNORE_MASK\");\n+\n public:\n     CAddress() : CService{} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn) : CService{ipIn}, nServices{nServicesIn} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn, uint32_t nTimeIn) : CService{ipIn}, nTime{nTimeIn}, nServices{nServicesIn} {};\n \n     SERIALIZE_METHODS(CAddress, obj)\n     {\n-        SER_READ(obj, obj.nTime = TIME_INIT);\n-        int nVersion = s.GetVersion();\n+        // CAddress has a distinct network serialization and a disk serialization, but it should never\n+        // be hashed (except through CHashWriter in addrdb.cpp, which sets SER_DISK), and it's\n+        // ambiguous what that would mean. Make sure no code relying on that is introduced:\n+        assert(!(s.GetType() & SER_GETHASH));\n+        bool use_v2;\n+        bool store_time;\n         if (s.GetType() & SER_DISK) {\n-            READWRITE(nVersion);\n-        }\n-        if ((s.GetType() & SER_DISK) ||\n-            (nVersion != INIT_PROTO_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            // In the disk serialization format, the encoding (v1 or v2) is determined by a flag version\n+            // that's part of the serialization itself. ADDRV2_FORMAT in the stream version only determines\n+            // whether V2 is chosen/permitted at all.\n+            uint32_t stored_format_version = DISK_VERSION_INIT;\n+            if (s.GetVersion() & ADDRV2_FORMAT) stored_format_version |= DISK_VERSION_ADDRV2;\n+            READWRITE(stored_format_version);\n+            stored_format_version &= ~DISK_VERSION_IGNORE_MASK; // ignore low bits\n+            if (stored_format_version == 0) {\n+                use_v2 = false;\n+            } else if (stored_format_version == DISK_VERSION_ADDRV2 && (s.GetVersion() & ADDRV2_FORMAT)) {\n+                // Only support v2 deserialization if ADDRV2_FORMAT is set.\n+                use_v2 = true;\n+            } else {\n+                throw std::ios_base::failure(\"Unsupported CAddress disk format version\");\n+            }\n+            store_time = true;\n+        } else {\n+            // In the network serialization format, the encoding (v1 or v2) is determined directly by\n+            // the value of ADDRV2_FORMAT in the stream version, as no explicitly encoded version\n+            // exists in the stream.\n+            assert(s.GetType() & SER_NETWORK);\n+            use_v2 = s.GetVersion() & ADDRV2_FORMAT;\n             // The only time we serialize a CAddress object without nTime is in\n             // the initial VERSION messages which contain two CAddress records.\n             // At that point, the serialization version is INIT_PROTO_VERSION.\n             // After the version handshake, serialization version is >=\n             // MIN_PEER_PROTO_VERSION and all ADDR messages are serialized with\n             // nTime.\n-            READWRITE(obj.nTime);\n+            store_time = s.GetVersion() != INIT_PROTO_VERSION;\n         }\n-        if (nVersion & ADDRV2_FORMAT) {\n+\n+        SER_READ(obj, obj.nTime = TIME_INIT);\n+        if (store_time) READWRITE(obj.nTime);\n+        // nServices is serialized as CompactSize in V2; as uint64_t in V1.\n+        if (use_v2) {\n             uint64_t services_tmp;\n             SER_WRITE(obj, services_tmp = obj.nServices);\n             READWRITE(Using<CompactSizeFormatter<false>>(services_tmp));\n             SER_READ(obj, obj.nServices = static_cast<ServiceFlags>(services_tmp));\n         } else {\n             READWRITE(Using<CustomUintFormatter<8>>(obj.nServices));\n         }\n-        READWRITEAS(CService, obj);\n+        // Invoke V1/V2 serializer for CService parent object.\n+        OverrideStream<Stream> os(&s, s.GetType(), use_v2 ? ADDRV2_FORMAT : 0);\n+        SerReadWriteMany(os, ser_action, ReadWriteAsHelper<CService>(obj));\n     }\n \n-    // disk and network only\n+    //! Always included in serialization, except in the network format on INIT_PROTO_VERSION.\n     uint32_t nTime{TIME_INIT};\n-\n+    //! Serialized as uint64_t in V1, and as CompactSize in V2.\n     ServiceFlags nServices{NODE_NONE};\n+\n+    friend bool operator==(const CAddress& a, const CAddress& b)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r641443508",
      "id" : 641443508,
      "line" : 453,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MTQ0MzUwOA==",
      "original_commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "original_line" : 453,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 114,
      "pull_request_review_id" : 671157519,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-28T10:34:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/641443508",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650436338"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650436338"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Seems fine, but also pointless. I don't think anyone is going to use these comparisons in compile-time initialized objects.\r\n\r\nI'll do this if I need to retouch.",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-06-12T21:05:07Z",
      "diff_hunk" : "@@ -358,43 +359,103 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT in the stream version signals that ADDRV2\n+     *  deserialization is permitted, but the actual format is determined by the high bits in the\n+     *  stored version field. For network serialization, the stream version having ADDRV2_FORMAT or\n+     *  not determines the actual format used (as it has no embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{0b00000000'00000111'11111111'11111111};\n+    /** The version number written in disk serialized addresses to indicate V2 serializations.\n+     * It must be exactly 1<<29, as that is the value that historical versions used for this\n+     * (they used their internal ADDRV2_FORMAT flag here). */\n+    static constexpr uint32_t DISK_VERSION_ADDRV2{1 << 29};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static_assert((DISK_VERSION_ADDRV2 & DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_ADDRV2 must not be covered by DISK_VERSION_IGNORE_MASK\");\n+\n public:\n     CAddress() : CService{} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn) : CService{ipIn}, nServices{nServicesIn} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn, uint32_t nTimeIn) : CService{ipIn}, nTime{nTimeIn}, nServices{nServicesIn} {};\n \n     SERIALIZE_METHODS(CAddress, obj)\n     {\n-        SER_READ(obj, obj.nTime = TIME_INIT);\n-        int nVersion = s.GetVersion();\n+        // CAddress has a distinct network serialization and a disk serialization, but it should never\n+        // be hashed (except through CHashWriter in addrdb.cpp, which sets SER_DISK), and it's\n+        // ambiguous what that would mean. Make sure no code relying on that is introduced:\n+        assert(!(s.GetType() & SER_GETHASH));\n+        bool use_v2;\n+        bool store_time;\n         if (s.GetType() & SER_DISK) {\n-            READWRITE(nVersion);\n-        }\n-        if ((s.GetType() & SER_DISK) ||\n-            (nVersion != INIT_PROTO_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            // In the disk serialization format, the encoding (v1 or v2) is determined by a flag version\n+            // that's part of the serialization itself. ADDRV2_FORMAT in the stream version only determines\n+            // whether V2 is chosen/permitted at all.\n+            uint32_t stored_format_version = DISK_VERSION_INIT;\n+            if (s.GetVersion() & ADDRV2_FORMAT) stored_format_version |= DISK_VERSION_ADDRV2;\n+            READWRITE(stored_format_version);\n+            stored_format_version &= ~DISK_VERSION_IGNORE_MASK; // ignore low bits\n+            if (stored_format_version == 0) {\n+                use_v2 = false;\n+            } else if (stored_format_version == DISK_VERSION_ADDRV2 && (s.GetVersion() & ADDRV2_FORMAT)) {\n+                // Only support v2 deserialization if ADDRV2_FORMAT is set.\n+                use_v2 = true;\n+            } else {\n+                throw std::ios_base::failure(\"Unsupported CAddress disk format version\");\n+            }\n+            store_time = true;\n+        } else {\n+            // In the network serialization format, the encoding (v1 or v2) is determined directly by\n+            // the value of ADDRV2_FORMAT in the stream version, as no explicitly encoded version\n+            // exists in the stream.\n+            assert(s.GetType() & SER_NETWORK);\n+            use_v2 = s.GetVersion() & ADDRV2_FORMAT;\n             // The only time we serialize a CAddress object without nTime is in\n             // the initial VERSION messages which contain two CAddress records.\n             // At that point, the serialization version is INIT_PROTO_VERSION.\n             // After the version handshake, serialization version is >=\n             // MIN_PEER_PROTO_VERSION and all ADDR messages are serialized with\n             // nTime.\n-            READWRITE(obj.nTime);\n+            store_time = s.GetVersion() != INIT_PROTO_VERSION;\n         }\n-        if (nVersion & ADDRV2_FORMAT) {\n+\n+        SER_READ(obj, obj.nTime = TIME_INIT);\n+        if (store_time) READWRITE(obj.nTime);\n+        // nServices is serialized as CompactSize in V2; as uint64_t in V1.\n+        if (use_v2) {\n             uint64_t services_tmp;\n             SER_WRITE(obj, services_tmp = obj.nServices);\n             READWRITE(Using<CompactSizeFormatter<false>>(services_tmp));\n             SER_READ(obj, obj.nServices = static_cast<ServiceFlags>(services_tmp));\n         } else {\n             READWRITE(Using<CustomUintFormatter<8>>(obj.nServices));\n         }\n-        READWRITEAS(CService, obj);\n+        // Invoke V1/V2 serializer for CService parent object.\n+        OverrideStream<Stream> os(&s, s.GetType(), use_v2 ? ADDRV2_FORMAT : 0);\n+        SerReadWriteMany(os, ser_action, ReadWriteAsHelper<CService>(obj));\n     }\n \n-    // disk and network only\n+    //! Always included in serialization, except in the network format on INIT_PROTO_VERSION.\n     uint32_t nTime{TIME_INIT};\n-\n+    //! Serialized as uint64_t in V1, and as CompactSize in V2.\n     ServiceFlags nServices{NODE_NONE};\n+\n+    friend bool operator==(const CAddress& a, const CAddress& b)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650436338",
      "id" : 650436338,
      "in_reply_to_id" : 641443508,
      "line" : 453,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQzNjMzOA==",
      "original_commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "original_line" : 453,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 114,
      "pull_request_review_id" : 682354227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-12T21:05:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650436338",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650436877"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650436877"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is it possible to drop the \"changes requested\" marker here?",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-06-12T21:11:51Z",
      "diff_hunk" : "@@ -358,43 +359,103 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT in the stream version signals that ADDRV2\n+     *  deserialization is permitted, but the actual format is determined by the high bits in the\n+     *  stored version field. For network serialization, the stream version having ADDRV2_FORMAT or\n+     *  not determines the actual format used (as it has no embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{0b00000000'00000111'11111111'11111111};\n+    /** The version number written in disk serialized addresses to indicate V2 serializations.\n+     * It must be exactly 1<<29, as that is the value that historical versions used for this\n+     * (they used their internal ADDRV2_FORMAT flag here). */\n+    static constexpr uint32_t DISK_VERSION_ADDRV2{1 << 29};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static_assert((DISK_VERSION_ADDRV2 & DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_ADDRV2 must not be covered by DISK_VERSION_IGNORE_MASK\");\n+\n public:\n     CAddress() : CService{} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn) : CService{ipIn}, nServices{nServicesIn} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn, uint32_t nTimeIn) : CService{ipIn}, nTime{nTimeIn}, nServices{nServicesIn} {};\n \n     SERIALIZE_METHODS(CAddress, obj)\n     {\n-        SER_READ(obj, obj.nTime = TIME_INIT);\n-        int nVersion = s.GetVersion();\n+        // CAddress has a distinct network serialization and a disk serialization, but it should never\n+        // be hashed (except through CHashWriter in addrdb.cpp, which sets SER_DISK), and it's\n+        // ambiguous what that would mean. Make sure no code relying on that is introduced:\n+        assert(!(s.GetType() & SER_GETHASH));\n+        bool use_v2;\n+        bool store_time;\n         if (s.GetType() & SER_DISK) {\n-            READWRITE(nVersion);\n-        }\n-        if ((s.GetType() & SER_DISK) ||\n-            (nVersion != INIT_PROTO_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            // In the disk serialization format, the encoding (v1 or v2) is determined by a flag version\n+            // that's part of the serialization itself. ADDRV2_FORMAT in the stream version only determines\n+            // whether V2 is chosen/permitted at all.\n+            uint32_t stored_format_version = DISK_VERSION_INIT;\n+            if (s.GetVersion() & ADDRV2_FORMAT) stored_format_version |= DISK_VERSION_ADDRV2;\n+            READWRITE(stored_format_version);\n+            stored_format_version &= ~DISK_VERSION_IGNORE_MASK; // ignore low bits\n+            if (stored_format_version == 0) {\n+                use_v2 = false;\n+            } else if (stored_format_version == DISK_VERSION_ADDRV2 && (s.GetVersion() & ADDRV2_FORMAT)) {\n+                // Only support v2 deserialization if ADDRV2_FORMAT is set.\n+                use_v2 = true;\n+            } else {\n+                throw std::ios_base::failure(\"Unsupported CAddress disk format version\");\n+            }\n+            store_time = true;\n+        } else {\n+            // In the network serialization format, the encoding (v1 or v2) is determined directly by\n+            // the value of ADDRV2_FORMAT in the stream version, as no explicitly encoded version\n+            // exists in the stream.\n+            assert(s.GetType() & SER_NETWORK);\n+            use_v2 = s.GetVersion() & ADDRV2_FORMAT;\n             // The only time we serialize a CAddress object without nTime is in\n             // the initial VERSION messages which contain two CAddress records.\n             // At that point, the serialization version is INIT_PROTO_VERSION.\n             // After the version handshake, serialization version is >=\n             // MIN_PEER_PROTO_VERSION and all ADDR messages are serialized with\n             // nTime.\n-            READWRITE(obj.nTime);\n+            store_time = s.GetVersion() != INIT_PROTO_VERSION;\n         }\n-        if (nVersion & ADDRV2_FORMAT) {\n+\n+        SER_READ(obj, obj.nTime = TIME_INIT);\n+        if (store_time) READWRITE(obj.nTime);\n+        // nServices is serialized as CompactSize in V2; as uint64_t in V1.\n+        if (use_v2) {\n             uint64_t services_tmp;\n             SER_WRITE(obj, services_tmp = obj.nServices);\n             READWRITE(Using<CompactSizeFormatter<false>>(services_tmp));\n             SER_READ(obj, obj.nServices = static_cast<ServiceFlags>(services_tmp));\n         } else {\n             READWRITE(Using<CustomUintFormatter<8>>(obj.nServices));\n         }\n-        READWRITEAS(CService, obj);\n+        // Invoke V1/V2 serializer for CService parent object.\n+        OverrideStream<Stream> os(&s, s.GetType(), use_v2 ? ADDRV2_FORMAT : 0);\n+        SerReadWriteMany(os, ser_action, ReadWriteAsHelper<CService>(obj));\n     }\n \n-    // disk and network only\n+    //! Always included in serialization, except in the network format on INIT_PROTO_VERSION.\n     uint32_t nTime{TIME_INIT};\n-\n+    //! Serialized as uint64_t in V1, and as CompactSize in V2.\n     ServiceFlags nServices{NODE_NONE};\n+\n+    friend bool operator==(const CAddress& a, const CAddress& b)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650436877",
      "id" : 650436877,
      "in_reply_to_id" : 641443508,
      "line" : 453,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQzNjg3Nw==",
      "original_commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "original_line" : 453,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 114,
      "pull_request_review_id" : 682354529,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-12T21:11:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650436877",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650438538"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650438538"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think that marker may be related to \"hebasto requested changes on Nov 28, 2020\" above (I don't use the \"requested changes\" review type here, at least not intentionally).",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-06-12T21:33:30Z",
      "diff_hunk" : "@@ -358,43 +359,103 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT in the stream version signals that ADDRV2\n+     *  deserialization is permitted, but the actual format is determined by the high bits in the\n+     *  stored version field. For network serialization, the stream version having ADDRV2_FORMAT or\n+     *  not determines the actual format used (as it has no embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{0b00000000'00000111'11111111'11111111};\n+    /** The version number written in disk serialized addresses to indicate V2 serializations.\n+     * It must be exactly 1<<29, as that is the value that historical versions used for this\n+     * (they used their internal ADDRV2_FORMAT flag here). */\n+    static constexpr uint32_t DISK_VERSION_ADDRV2{1 << 29};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static_assert((DISK_VERSION_ADDRV2 & DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_ADDRV2 must not be covered by DISK_VERSION_IGNORE_MASK\");\n+\n public:\n     CAddress() : CService{} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn) : CService{ipIn}, nServices{nServicesIn} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn, uint32_t nTimeIn) : CService{ipIn}, nTime{nTimeIn}, nServices{nServicesIn} {};\n \n     SERIALIZE_METHODS(CAddress, obj)\n     {\n-        SER_READ(obj, obj.nTime = TIME_INIT);\n-        int nVersion = s.GetVersion();\n+        // CAddress has a distinct network serialization and a disk serialization, but it should never\n+        // be hashed (except through CHashWriter in addrdb.cpp, which sets SER_DISK), and it's\n+        // ambiguous what that would mean. Make sure no code relying on that is introduced:\n+        assert(!(s.GetType() & SER_GETHASH));\n+        bool use_v2;\n+        bool store_time;\n         if (s.GetType() & SER_DISK) {\n-            READWRITE(nVersion);\n-        }\n-        if ((s.GetType() & SER_DISK) ||\n-            (nVersion != INIT_PROTO_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            // In the disk serialization format, the encoding (v1 or v2) is determined by a flag version\n+            // that's part of the serialization itself. ADDRV2_FORMAT in the stream version only determines\n+            // whether V2 is chosen/permitted at all.\n+            uint32_t stored_format_version = DISK_VERSION_INIT;\n+            if (s.GetVersion() & ADDRV2_FORMAT) stored_format_version |= DISK_VERSION_ADDRV2;\n+            READWRITE(stored_format_version);\n+            stored_format_version &= ~DISK_VERSION_IGNORE_MASK; // ignore low bits\n+            if (stored_format_version == 0) {\n+                use_v2 = false;\n+            } else if (stored_format_version == DISK_VERSION_ADDRV2 && (s.GetVersion() & ADDRV2_FORMAT)) {\n+                // Only support v2 deserialization if ADDRV2_FORMAT is set.\n+                use_v2 = true;\n+            } else {\n+                throw std::ios_base::failure(\"Unsupported CAddress disk format version\");\n+            }\n+            store_time = true;\n+        } else {\n+            // In the network serialization format, the encoding (v1 or v2) is determined directly by\n+            // the value of ADDRV2_FORMAT in the stream version, as no explicitly encoded version\n+            // exists in the stream.\n+            assert(s.GetType() & SER_NETWORK);\n+            use_v2 = s.GetVersion() & ADDRV2_FORMAT;\n             // The only time we serialize a CAddress object without nTime is in\n             // the initial VERSION messages which contain two CAddress records.\n             // At that point, the serialization version is INIT_PROTO_VERSION.\n             // After the version handshake, serialization version is >=\n             // MIN_PEER_PROTO_VERSION and all ADDR messages are serialized with\n             // nTime.\n-            READWRITE(obj.nTime);\n+            store_time = s.GetVersion() != INIT_PROTO_VERSION;\n         }\n-        if (nVersion & ADDRV2_FORMAT) {\n+\n+        SER_READ(obj, obj.nTime = TIME_INIT);\n+        if (store_time) READWRITE(obj.nTime);\n+        // nServices is serialized as CompactSize in V2; as uint64_t in V1.\n+        if (use_v2) {\n             uint64_t services_tmp;\n             SER_WRITE(obj, services_tmp = obj.nServices);\n             READWRITE(Using<CompactSizeFormatter<false>>(services_tmp));\n             SER_READ(obj, obj.nServices = static_cast<ServiceFlags>(services_tmp));\n         } else {\n             READWRITE(Using<CustomUintFormatter<8>>(obj.nServices));\n         }\n-        READWRITEAS(CService, obj);\n+        // Invoke V1/V2 serializer for CService parent object.\n+        OverrideStream<Stream> os(&s, s.GetType(), use_v2 ? ADDRV2_FORMAT : 0);\n+        SerReadWriteMany(os, ser_action, ReadWriteAsHelper<CService>(obj));\n     }\n \n-    // disk and network only\n+    //! Always included in serialization, except in the network format on INIT_PROTO_VERSION.\n     uint32_t nTime{TIME_INIT};\n-\n+    //! Serialized as uint64_t in V1, and as CompactSize in V2.\n     ServiceFlags nServices{NODE_NONE};\n+\n+    friend bool operator==(const CAddress& a, const CAddress& b)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650438538",
      "id" : 650438538,
      "in_reply_to_id" : 641443508,
      "line" : 453,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQzODUzOA==",
      "original_commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "original_line" : 453,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 114,
      "pull_request_review_id" : 682355424,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-12T21:33:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650438538",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650438792"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650438792"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't know how to drop it. My recent comment has no such an attribute.",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-06-12T21:37:05Z",
      "diff_hunk" : "@@ -358,43 +359,103 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT in the stream version signals that ADDRV2\n+     *  deserialization is permitted, but the actual format is determined by the high bits in the\n+     *  stored version field. For network serialization, the stream version having ADDRV2_FORMAT or\n+     *  not determines the actual format used (as it has no embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{0b00000000'00000111'11111111'11111111};\n+    /** The version number written in disk serialized addresses to indicate V2 serializations.\n+     * It must be exactly 1<<29, as that is the value that historical versions used for this\n+     * (they used their internal ADDRV2_FORMAT flag here). */\n+    static constexpr uint32_t DISK_VERSION_ADDRV2{1 << 29};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static_assert((DISK_VERSION_ADDRV2 & DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_ADDRV2 must not be covered by DISK_VERSION_IGNORE_MASK\");\n+\n public:\n     CAddress() : CService{} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn) : CService{ipIn}, nServices{nServicesIn} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn, uint32_t nTimeIn) : CService{ipIn}, nTime{nTimeIn}, nServices{nServicesIn} {};\n \n     SERIALIZE_METHODS(CAddress, obj)\n     {\n-        SER_READ(obj, obj.nTime = TIME_INIT);\n-        int nVersion = s.GetVersion();\n+        // CAddress has a distinct network serialization and a disk serialization, but it should never\n+        // be hashed (except through CHashWriter in addrdb.cpp, which sets SER_DISK), and it's\n+        // ambiguous what that would mean. Make sure no code relying on that is introduced:\n+        assert(!(s.GetType() & SER_GETHASH));\n+        bool use_v2;\n+        bool store_time;\n         if (s.GetType() & SER_DISK) {\n-            READWRITE(nVersion);\n-        }\n-        if ((s.GetType() & SER_DISK) ||\n-            (nVersion != INIT_PROTO_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            // In the disk serialization format, the encoding (v1 or v2) is determined by a flag version\n+            // that's part of the serialization itself. ADDRV2_FORMAT in the stream version only determines\n+            // whether V2 is chosen/permitted at all.\n+            uint32_t stored_format_version = DISK_VERSION_INIT;\n+            if (s.GetVersion() & ADDRV2_FORMAT) stored_format_version |= DISK_VERSION_ADDRV2;\n+            READWRITE(stored_format_version);\n+            stored_format_version &= ~DISK_VERSION_IGNORE_MASK; // ignore low bits\n+            if (stored_format_version == 0) {\n+                use_v2 = false;\n+            } else if (stored_format_version == DISK_VERSION_ADDRV2 && (s.GetVersion() & ADDRV2_FORMAT)) {\n+                // Only support v2 deserialization if ADDRV2_FORMAT is set.\n+                use_v2 = true;\n+            } else {\n+                throw std::ios_base::failure(\"Unsupported CAddress disk format version\");\n+            }\n+            store_time = true;\n+        } else {\n+            // In the network serialization format, the encoding (v1 or v2) is determined directly by\n+            // the value of ADDRV2_FORMAT in the stream version, as no explicitly encoded version\n+            // exists in the stream.\n+            assert(s.GetType() & SER_NETWORK);\n+            use_v2 = s.GetVersion() & ADDRV2_FORMAT;\n             // The only time we serialize a CAddress object without nTime is in\n             // the initial VERSION messages which contain two CAddress records.\n             // At that point, the serialization version is INIT_PROTO_VERSION.\n             // After the version handshake, serialization version is >=\n             // MIN_PEER_PROTO_VERSION and all ADDR messages are serialized with\n             // nTime.\n-            READWRITE(obj.nTime);\n+            store_time = s.GetVersion() != INIT_PROTO_VERSION;\n         }\n-        if (nVersion & ADDRV2_FORMAT) {\n+\n+        SER_READ(obj, obj.nTime = TIME_INIT);\n+        if (store_time) READWRITE(obj.nTime);\n+        // nServices is serialized as CompactSize in V2; as uint64_t in V1.\n+        if (use_v2) {\n             uint64_t services_tmp;\n             SER_WRITE(obj, services_tmp = obj.nServices);\n             READWRITE(Using<CompactSizeFormatter<false>>(services_tmp));\n             SER_READ(obj, obj.nServices = static_cast<ServiceFlags>(services_tmp));\n         } else {\n             READWRITE(Using<CustomUintFormatter<8>>(obj.nServices));\n         }\n-        READWRITEAS(CService, obj);\n+        // Invoke V1/V2 serializer for CService parent object.\n+        OverrideStream<Stream> os(&s, s.GetType(), use_v2 ? ADDRV2_FORMAT : 0);\n+        SerReadWriteMany(os, ser_action, ReadWriteAsHelper<CService>(obj));\n     }\n \n-    // disk and network only\n+    //! Always included in serialization, except in the network format on INIT_PROTO_VERSION.\n     uint32_t nTime{TIME_INIT};\n-\n+    //! Serialized as uint64_t in V1, and as CompactSize in V2.\n     ServiceFlags nServices{NODE_NONE};\n+\n+    friend bool operator==(const CAddress& a, const CAddress& b)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650438792",
      "id" : 650438792,
      "in_reply_to_id" : 641443508,
      "line" : 453,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQzODc5Mg==",
      "original_commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "original_line" : 453,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 114,
      "pull_request_review_id" : 682355544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-12T21:37:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650438792",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650438901"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650438901"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@jonatack My apologies for assuming it was due to your comment!",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-06-12T21:38:25Z",
      "diff_hunk" : "@@ -358,43 +359,103 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT in the stream version signals that ADDRV2\n+     *  deserialization is permitted, but the actual format is determined by the high bits in the\n+     *  stored version field. For network serialization, the stream version having ADDRV2_FORMAT or\n+     *  not determines the actual format used (as it has no embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{0b00000000'00000111'11111111'11111111};\n+    /** The version number written in disk serialized addresses to indicate V2 serializations.\n+     * It must be exactly 1<<29, as that is the value that historical versions used for this\n+     * (they used their internal ADDRV2_FORMAT flag here). */\n+    static constexpr uint32_t DISK_VERSION_ADDRV2{1 << 29};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static_assert((DISK_VERSION_ADDRV2 & DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_ADDRV2 must not be covered by DISK_VERSION_IGNORE_MASK\");\n+\n public:\n     CAddress() : CService{} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn) : CService{ipIn}, nServices{nServicesIn} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn, uint32_t nTimeIn) : CService{ipIn}, nTime{nTimeIn}, nServices{nServicesIn} {};\n \n     SERIALIZE_METHODS(CAddress, obj)\n     {\n-        SER_READ(obj, obj.nTime = TIME_INIT);\n-        int nVersion = s.GetVersion();\n+        // CAddress has a distinct network serialization and a disk serialization, but it should never\n+        // be hashed (except through CHashWriter in addrdb.cpp, which sets SER_DISK), and it's\n+        // ambiguous what that would mean. Make sure no code relying on that is introduced:\n+        assert(!(s.GetType() & SER_GETHASH));\n+        bool use_v2;\n+        bool store_time;\n         if (s.GetType() & SER_DISK) {\n-            READWRITE(nVersion);\n-        }\n-        if ((s.GetType() & SER_DISK) ||\n-            (nVersion != INIT_PROTO_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            // In the disk serialization format, the encoding (v1 or v2) is determined by a flag version\n+            // that's part of the serialization itself. ADDRV2_FORMAT in the stream version only determines\n+            // whether V2 is chosen/permitted at all.\n+            uint32_t stored_format_version = DISK_VERSION_INIT;\n+            if (s.GetVersion() & ADDRV2_FORMAT) stored_format_version |= DISK_VERSION_ADDRV2;\n+            READWRITE(stored_format_version);\n+            stored_format_version &= ~DISK_VERSION_IGNORE_MASK; // ignore low bits\n+            if (stored_format_version == 0) {\n+                use_v2 = false;\n+            } else if (stored_format_version == DISK_VERSION_ADDRV2 && (s.GetVersion() & ADDRV2_FORMAT)) {\n+                // Only support v2 deserialization if ADDRV2_FORMAT is set.\n+                use_v2 = true;\n+            } else {\n+                throw std::ios_base::failure(\"Unsupported CAddress disk format version\");\n+            }\n+            store_time = true;\n+        } else {\n+            // In the network serialization format, the encoding (v1 or v2) is determined directly by\n+            // the value of ADDRV2_FORMAT in the stream version, as no explicitly encoded version\n+            // exists in the stream.\n+            assert(s.GetType() & SER_NETWORK);\n+            use_v2 = s.GetVersion() & ADDRV2_FORMAT;\n             // The only time we serialize a CAddress object without nTime is in\n             // the initial VERSION messages which contain two CAddress records.\n             // At that point, the serialization version is INIT_PROTO_VERSION.\n             // After the version handshake, serialization version is >=\n             // MIN_PEER_PROTO_VERSION and all ADDR messages are serialized with\n             // nTime.\n-            READWRITE(obj.nTime);\n+            store_time = s.GetVersion() != INIT_PROTO_VERSION;\n         }\n-        if (nVersion & ADDRV2_FORMAT) {\n+\n+        SER_READ(obj, obj.nTime = TIME_INIT);\n+        if (store_time) READWRITE(obj.nTime);\n+        // nServices is serialized as CompactSize in V2; as uint64_t in V1.\n+        if (use_v2) {\n             uint64_t services_tmp;\n             SER_WRITE(obj, services_tmp = obj.nServices);\n             READWRITE(Using<CompactSizeFormatter<false>>(services_tmp));\n             SER_READ(obj, obj.nServices = static_cast<ServiceFlags>(services_tmp));\n         } else {\n             READWRITE(Using<CustomUintFormatter<8>>(obj.nServices));\n         }\n-        READWRITEAS(CService, obj);\n+        // Invoke V1/V2 serializer for CService parent object.\n+        OverrideStream<Stream> os(&s, s.GetType(), use_v2 ? ADDRV2_FORMAT : 0);\n+        SerReadWriteMany(os, ser_action, ReadWriteAsHelper<CService>(obj));\n     }\n \n-    // disk and network only\n+    //! Always included in serialization, except in the network format on INIT_PROTO_VERSION.\n     uint32_t nTime{TIME_INIT};\n-\n+    //! Serialized as uint64_t in V1, and as CompactSize in V2.\n     ServiceFlags nServices{NODE_NONE};\n+\n+    friend bool operator==(const CAddress& a, const CAddress& b)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650438901",
      "id" : 650438901,
      "in_reply_to_id" : 641443508,
      "line" : 453,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQzODkwMQ==",
      "original_commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "original_line" : 453,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 114,
      "pull_request_review_id" : 682355606,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-12T21:38:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650438901",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@hebasto I think you need to leave a new review.",
      "created_at" : "2021-06-12T21:38:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-860114133",
      "id" : 860114133,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20516",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MDExNDEzMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-12T21:38:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860114133",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650439240"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650439240"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It might be because https://github.com/bitcoin/bitcoin/pull/20516#discussion_r532057860 wasn't \"resolved\". This has been my superstition leading me to not use it (that, and the bright red flag).",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-06-12T21:43:06Z",
      "diff_hunk" : "@@ -358,43 +359,103 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT in the stream version signals that ADDRV2\n+     *  deserialization is permitted, but the actual format is determined by the high bits in the\n+     *  stored version field. For network serialization, the stream version having ADDRV2_FORMAT or\n+     *  not determines the actual format used (as it has no embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{0b00000000'00000111'11111111'11111111};\n+    /** The version number written in disk serialized addresses to indicate V2 serializations.\n+     * It must be exactly 1<<29, as that is the value that historical versions used for this\n+     * (they used their internal ADDRV2_FORMAT flag here). */\n+    static constexpr uint32_t DISK_VERSION_ADDRV2{1 << 29};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static_assert((DISK_VERSION_ADDRV2 & DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_ADDRV2 must not be covered by DISK_VERSION_IGNORE_MASK\");\n+\n public:\n     CAddress() : CService{} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn) : CService{ipIn}, nServices{nServicesIn} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn, uint32_t nTimeIn) : CService{ipIn}, nTime{nTimeIn}, nServices{nServicesIn} {};\n \n     SERIALIZE_METHODS(CAddress, obj)\n     {\n-        SER_READ(obj, obj.nTime = TIME_INIT);\n-        int nVersion = s.GetVersion();\n+        // CAddress has a distinct network serialization and a disk serialization, but it should never\n+        // be hashed (except through CHashWriter in addrdb.cpp, which sets SER_DISK), and it's\n+        // ambiguous what that would mean. Make sure no code relying on that is introduced:\n+        assert(!(s.GetType() & SER_GETHASH));\n+        bool use_v2;\n+        bool store_time;\n         if (s.GetType() & SER_DISK) {\n-            READWRITE(nVersion);\n-        }\n-        if ((s.GetType() & SER_DISK) ||\n-            (nVersion != INIT_PROTO_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            // In the disk serialization format, the encoding (v1 or v2) is determined by a flag version\n+            // that's part of the serialization itself. ADDRV2_FORMAT in the stream version only determines\n+            // whether V2 is chosen/permitted at all.\n+            uint32_t stored_format_version = DISK_VERSION_INIT;\n+            if (s.GetVersion() & ADDRV2_FORMAT) stored_format_version |= DISK_VERSION_ADDRV2;\n+            READWRITE(stored_format_version);\n+            stored_format_version &= ~DISK_VERSION_IGNORE_MASK; // ignore low bits\n+            if (stored_format_version == 0) {\n+                use_v2 = false;\n+            } else if (stored_format_version == DISK_VERSION_ADDRV2 && (s.GetVersion() & ADDRV2_FORMAT)) {\n+                // Only support v2 deserialization if ADDRV2_FORMAT is set.\n+                use_v2 = true;\n+            } else {\n+                throw std::ios_base::failure(\"Unsupported CAddress disk format version\");\n+            }\n+            store_time = true;\n+        } else {\n+            // In the network serialization format, the encoding (v1 or v2) is determined directly by\n+            // the value of ADDRV2_FORMAT in the stream version, as no explicitly encoded version\n+            // exists in the stream.\n+            assert(s.GetType() & SER_NETWORK);\n+            use_v2 = s.GetVersion() & ADDRV2_FORMAT;\n             // The only time we serialize a CAddress object without nTime is in\n             // the initial VERSION messages which contain two CAddress records.\n             // At that point, the serialization version is INIT_PROTO_VERSION.\n             // After the version handshake, serialization version is >=\n             // MIN_PEER_PROTO_VERSION and all ADDR messages are serialized with\n             // nTime.\n-            READWRITE(obj.nTime);\n+            store_time = s.GetVersion() != INIT_PROTO_VERSION;\n         }\n-        if (nVersion & ADDRV2_FORMAT) {\n+\n+        SER_READ(obj, obj.nTime = TIME_INIT);\n+        if (store_time) READWRITE(obj.nTime);\n+        // nServices is serialized as CompactSize in V2; as uint64_t in V1.\n+        if (use_v2) {\n             uint64_t services_tmp;\n             SER_WRITE(obj, services_tmp = obj.nServices);\n             READWRITE(Using<CompactSizeFormatter<false>>(services_tmp));\n             SER_READ(obj, obj.nServices = static_cast<ServiceFlags>(services_tmp));\n         } else {\n             READWRITE(Using<CustomUintFormatter<8>>(obj.nServices));\n         }\n-        READWRITEAS(CService, obj);\n+        // Invoke V1/V2 serializer for CService parent object.\n+        OverrideStream<Stream> os(&s, s.GetType(), use_v2 ? ADDRV2_FORMAT : 0);\n+        SerReadWriteMany(os, ser_action, ReadWriteAsHelper<CService>(obj));\n     }\n \n-    // disk and network only\n+    //! Always included in serialization, except in the network format on INIT_PROTO_VERSION.\n     uint32_t nTime{TIME_INIT};\n-\n+    //! Serialized as uint64_t in V1, and as CompactSize in V2.\n     ServiceFlags nServices{NODE_NONE};\n+\n+    friend bool operator==(const CAddress& a, const CAddress& b)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650439240",
      "id" : 650439240,
      "in_reply_to_id" : 641443508,
      "line" : 453,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQzOTI0MA==",
      "original_commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "original_line" : 453,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 114,
      "pull_request_review_id" : 682355801,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-12T21:43:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650439240",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650439728"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650439728"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I don't know how to drop it.\r\n\r\nThe magic GH button is \"Dismiss review\" :)",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-06-12T21:49:52Z",
      "diff_hunk" : "@@ -358,43 +359,103 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT in the stream version signals that ADDRV2\n+     *  deserialization is permitted, but the actual format is determined by the high bits in the\n+     *  stored version field. For network serialization, the stream version having ADDRV2_FORMAT or\n+     *  not determines the actual format used (as it has no embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{0b00000000'00000111'11111111'11111111};\n+    /** The version number written in disk serialized addresses to indicate V2 serializations.\n+     * It must be exactly 1<<29, as that is the value that historical versions used for this\n+     * (they used their internal ADDRV2_FORMAT flag here). */\n+    static constexpr uint32_t DISK_VERSION_ADDRV2{1 << 29};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static_assert((DISK_VERSION_ADDRV2 & DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_ADDRV2 must not be covered by DISK_VERSION_IGNORE_MASK\");\n+\n public:\n     CAddress() : CService{} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn) : CService{ipIn}, nServices{nServicesIn} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn, uint32_t nTimeIn) : CService{ipIn}, nTime{nTimeIn}, nServices{nServicesIn} {};\n \n     SERIALIZE_METHODS(CAddress, obj)\n     {\n-        SER_READ(obj, obj.nTime = TIME_INIT);\n-        int nVersion = s.GetVersion();\n+        // CAddress has a distinct network serialization and a disk serialization, but it should never\n+        // be hashed (except through CHashWriter in addrdb.cpp, which sets SER_DISK), and it's\n+        // ambiguous what that would mean. Make sure no code relying on that is introduced:\n+        assert(!(s.GetType() & SER_GETHASH));\n+        bool use_v2;\n+        bool store_time;\n         if (s.GetType() & SER_DISK) {\n-            READWRITE(nVersion);\n-        }\n-        if ((s.GetType() & SER_DISK) ||\n-            (nVersion != INIT_PROTO_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            // In the disk serialization format, the encoding (v1 or v2) is determined by a flag version\n+            // that's part of the serialization itself. ADDRV2_FORMAT in the stream version only determines\n+            // whether V2 is chosen/permitted at all.\n+            uint32_t stored_format_version = DISK_VERSION_INIT;\n+            if (s.GetVersion() & ADDRV2_FORMAT) stored_format_version |= DISK_VERSION_ADDRV2;\n+            READWRITE(stored_format_version);\n+            stored_format_version &= ~DISK_VERSION_IGNORE_MASK; // ignore low bits\n+            if (stored_format_version == 0) {\n+                use_v2 = false;\n+            } else if (stored_format_version == DISK_VERSION_ADDRV2 && (s.GetVersion() & ADDRV2_FORMAT)) {\n+                // Only support v2 deserialization if ADDRV2_FORMAT is set.\n+                use_v2 = true;\n+            } else {\n+                throw std::ios_base::failure(\"Unsupported CAddress disk format version\");\n+            }\n+            store_time = true;\n+        } else {\n+            // In the network serialization format, the encoding (v1 or v2) is determined directly by\n+            // the value of ADDRV2_FORMAT in the stream version, as no explicitly encoded version\n+            // exists in the stream.\n+            assert(s.GetType() & SER_NETWORK);\n+            use_v2 = s.GetVersion() & ADDRV2_FORMAT;\n             // The only time we serialize a CAddress object without nTime is in\n             // the initial VERSION messages which contain two CAddress records.\n             // At that point, the serialization version is INIT_PROTO_VERSION.\n             // After the version handshake, serialization version is >=\n             // MIN_PEER_PROTO_VERSION and all ADDR messages are serialized with\n             // nTime.\n-            READWRITE(obj.nTime);\n+            store_time = s.GetVersion() != INIT_PROTO_VERSION;\n         }\n-        if (nVersion & ADDRV2_FORMAT) {\n+\n+        SER_READ(obj, obj.nTime = TIME_INIT);\n+        if (store_time) READWRITE(obj.nTime);\n+        // nServices is serialized as CompactSize in V2; as uint64_t in V1.\n+        if (use_v2) {\n             uint64_t services_tmp;\n             SER_WRITE(obj, services_tmp = obj.nServices);\n             READWRITE(Using<CompactSizeFormatter<false>>(services_tmp));\n             SER_READ(obj, obj.nServices = static_cast<ServiceFlags>(services_tmp));\n         } else {\n             READWRITE(Using<CustomUintFormatter<8>>(obj.nServices));\n         }\n-        READWRITEAS(CService, obj);\n+        // Invoke V1/V2 serializer for CService parent object.\n+        OverrideStream<Stream> os(&s, s.GetType(), use_v2 ? ADDRV2_FORMAT : 0);\n+        SerReadWriteMany(os, ser_action, ReadWriteAsHelper<CService>(obj));\n     }\n \n-    // disk and network only\n+    //! Always included in serialization, except in the network format on INIT_PROTO_VERSION.\n     uint32_t nTime{TIME_INIT};\n-\n+    //! Serialized as uint64_t in V1, and as CompactSize in V2.\n     ServiceFlags nServices{NODE_NONE};\n+\n+    friend bool operator==(const CAddress& a, const CAddress& b)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650439728",
      "id" : 650439728,
      "in_reply_to_id" : 641443508,
      "line" : 453,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQzOTcyOA==",
      "original_commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "original_line" : 453,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 114,
      "pull_request_review_id" : 682356046,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-12T21:49:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650439728",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650635548"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650635548"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit:\r\n\r\nThis is the only place (besides two assertions above) where `DISK_VERSION_IGNORE_MASK` is used, and it is inverted. Isn't it more clear:\r\n\r\n```suggestion\r\n            stored_format_version &= DISK_VERSION_MASK; // ignore low bits\r\n```\r\n\r\n?",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-06-14T03:54:11Z",
      "diff_hunk" : "@@ -358,43 +359,103 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT in the stream version signals that ADDRV2\n+     *  deserialization is permitted, but the actual format is determined by the high bits in the\n+     *  stored version field. For network serialization, the stream version having ADDRV2_FORMAT or\n+     *  not determines the actual format used (as it has no embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{0b00000000'00000111'11111111'11111111};\n+    /** The version number written in disk serialized addresses to indicate V2 serializations.\n+     * It must be exactly 1<<29, as that is the value that historical versions used for this\n+     * (they used their internal ADDRV2_FORMAT flag here). */\n+    static constexpr uint32_t DISK_VERSION_ADDRV2{1 << 29};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static_assert((DISK_VERSION_ADDRV2 & DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_ADDRV2 must not be covered by DISK_VERSION_IGNORE_MASK\");\n+\n public:\n     CAddress() : CService{} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn) : CService{ipIn}, nServices{nServicesIn} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn, uint32_t nTimeIn) : CService{ipIn}, nTime{nTimeIn}, nServices{nServicesIn} {};\n \n     SERIALIZE_METHODS(CAddress, obj)\n     {\n-        SER_READ(obj, obj.nTime = TIME_INIT);\n-        int nVersion = s.GetVersion();\n+        // CAddress has a distinct network serialization and a disk serialization, but it should never\n+        // be hashed (except through CHashWriter in addrdb.cpp, which sets SER_DISK), and it's\n+        // ambiguous what that would mean. Make sure no code relying on that is introduced:\n+        assert(!(s.GetType() & SER_GETHASH));\n+        bool use_v2;\n+        bool store_time;\n         if (s.GetType() & SER_DISK) {\n-            READWRITE(nVersion);\n-        }\n-        if ((s.GetType() & SER_DISK) ||\n-            (nVersion != INIT_PROTO_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            // In the disk serialization format, the encoding (v1 or v2) is determined by a flag version\n+            // that's part of the serialization itself. ADDRV2_FORMAT in the stream version only determines\n+            // whether V2 is chosen/permitted at all.\n+            uint32_t stored_format_version = DISK_VERSION_INIT;\n+            if (s.GetVersion() & ADDRV2_FORMAT) stored_format_version |= DISK_VERSION_ADDRV2;\n+            READWRITE(stored_format_version);\n+            stored_format_version &= ~DISK_VERSION_IGNORE_MASK; // ignore low bits",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650635548",
      "id" : 650635548,
      "line" : 407,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDYzNTU0OA==",
      "original_commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "original_line" : 407,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 63,
      "pull_request_review_id" : 682500091,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-14T03:54:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/650635548",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-06-14T19:20:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-860931973",
      "id" : 860931973,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20516",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MDkzMTk3Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-14T19:20:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860931973",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r651343218"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651343218"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Will do if I retouch.",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-06-14T23:30:15Z",
      "diff_hunk" : "@@ -358,43 +359,103 @@ class CAddress : public CService\n {\n     static constexpr uint32_t TIME_INIT{100000000};\n \n+    /** Historically, CAddress disk serialization stored the CLIENT_VERSION, optionally OR'ed with\n+     *  the ADDRV2_FORMAT flag to indicate V2 serialization. The first field has since been\n+     *  disentangled from client versioning, and now instead:\n+     *  - The low bits (masked by DISK_VERSION_IGNORE_MASK) store the fixed value DISK_VERSION_INIT,\n+     *    (in case any code exists that treats it as a client version) but are ignored on\n+     *    deserialization.\n+     *  - The high bits (masked by ~DISK_VERSION_IGNORE_MASK) store actual serialization information.\n+     *    Only 0 or DISK_VERSION_ADDRV2 (equal to the historical ADDRV2_FORMAT) are valid now, and\n+     *    any other value triggers a deserialization failure. Other values can be added later if\n+     *    needed.\n+     *\n+     *  For disk deserialization, ADDRV2_FORMAT in the stream version signals that ADDRV2\n+     *  deserialization is permitted, but the actual format is determined by the high bits in the\n+     *  stored version field. For network serialization, the stream version having ADDRV2_FORMAT or\n+     *  not determines the actual format used (as it has no embedded version number).\n+     */\n+    static constexpr uint32_t DISK_VERSION_INIT{220000};\n+    static constexpr uint32_t DISK_VERSION_IGNORE_MASK{0b00000000'00000111'11111111'11111111};\n+    /** The version number written in disk serialized addresses to indicate V2 serializations.\n+     * It must be exactly 1<<29, as that is the value that historical versions used for this\n+     * (they used their internal ADDRV2_FORMAT flag here). */\n+    static constexpr uint32_t DISK_VERSION_ADDRV2{1 << 29};\n+    static_assert((DISK_VERSION_INIT & ~DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_INIT must be covered by DISK_VERSION_IGNORE_MASK\");\n+    static_assert((DISK_VERSION_ADDRV2 & DISK_VERSION_IGNORE_MASK) == 0, \"DISK_VERSION_ADDRV2 must not be covered by DISK_VERSION_IGNORE_MASK\");\n+\n public:\n     CAddress() : CService{} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn) : CService{ipIn}, nServices{nServicesIn} {};\n     CAddress(CService ipIn, ServiceFlags nServicesIn, uint32_t nTimeIn) : CService{ipIn}, nTime{nTimeIn}, nServices{nServicesIn} {};\n \n     SERIALIZE_METHODS(CAddress, obj)\n     {\n-        SER_READ(obj, obj.nTime = TIME_INIT);\n-        int nVersion = s.GetVersion();\n+        // CAddress has a distinct network serialization and a disk serialization, but it should never\n+        // be hashed (except through CHashWriter in addrdb.cpp, which sets SER_DISK), and it's\n+        // ambiguous what that would mean. Make sure no code relying on that is introduced:\n+        assert(!(s.GetType() & SER_GETHASH));\n+        bool use_v2;\n+        bool store_time;\n         if (s.GetType() & SER_DISK) {\n-            READWRITE(nVersion);\n-        }\n-        if ((s.GetType() & SER_DISK) ||\n-            (nVersion != INIT_PROTO_VERSION && !(s.GetType() & SER_GETHASH))) {\n+            // In the disk serialization format, the encoding (v1 or v2) is determined by a flag version\n+            // that's part of the serialization itself. ADDRV2_FORMAT in the stream version only determines\n+            // whether V2 is chosen/permitted at all.\n+            uint32_t stored_format_version = DISK_VERSION_INIT;\n+            if (s.GetVersion() & ADDRV2_FORMAT) stored_format_version |= DISK_VERSION_ADDRV2;\n+            READWRITE(stored_format_version);\n+            stored_format_version &= ~DISK_VERSION_IGNORE_MASK; // ignore low bits",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r651343218",
      "id" : 651343218,
      "in_reply_to_id" : 650635548,
      "line" : 407,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MTM0MzIxOA==",
      "original_commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "original_line" : 407,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 63,
      "pull_request_review_id" : 683437303,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-14T23:30:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/651343218",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Code review ACK f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-06-17T15:41:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-863350324",
      "id" : 863350324,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20516",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MzM1MDMyNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-17T15:41:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/863350324",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "review ACK f8866e8c324be3322fa507c2ceb1de35d148d0f1 ð\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nreview ACK f8866e8c324be3322fa507c2ceb1de35d148d0f1 ð\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUipdwwAnD4R+92A+ogj6ZHCw+VUa2T+wnnhhGhfQ54cW2Hldl9pS1qTe7zPaNy8\r\nXDn9OzCwU8LHNOWlqZo+e+lRiL09CVW+E7dwwe13ioGrk7wkXw/yO+XfmWNvx/np\r\nX3sOCI8sNq+p1UHVhJLaLtPyuTa3/3/s5Vi157KUjqeBRaQZfTuFXbs6QgWzzjFb\r\nK7KIhN+LINgI0zPmJU2OBrkTvkg+HDNCDW4DWhFFR3AbAdszEKZtYzz9flZIG3X0\r\nLOP/iRBAud+o62YYazGo86iGla7LR9cToVKkOOQdTgPRT5diFmFnHxvRVizobLPb\r\nTfmA9BqB/Ws7wg6h9A6kqAN/B1O9S0uAyPoJhdsTZaQTNt7ouB+q/20jwaVwX61r\r\n0DZ5jhU0VgAkh4II1CH65oYTespndkvDvejjggyK7qFNFfUhKY7zePaMbmUu5eub\r\nNKRkX6EN6GrKqP8dD26yMkPSXov0WjIZ89ebTI8joac8brNmX1TZMe70JYUdhgl/\r\nIFgK8gnv\r\n=Ldtq\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `71c25ee05aade76e5311b5e5ffa61e3c8b280b51a49049dba2025a6d50dfe77b  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e89294010871c25ee05aade76e5311b5e5ffa61e3c8b280b51a49049dba2025a6d50dfe77bf010069790d05dfdb6d150725d6ef6125f1a08fff010251bb4e6c4adb7f527010631225ff3c108f10460d079e3f008ab760f050dcaed630083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff01094bbfe1a9c792bcad8c7f02c86f604b308f10460d079e4f0085ecfb20718f259b00083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010bfce886d7ffa7309e2f62e693d1fecdf08f10460d079e4f0085b498ee923e8d4290083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6df010c110c03beed049c37c17fd9eda42249008f10460d079e4f00894e3697875838f5a0083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
      "created_at" : "2021-06-21T11:37:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-864963537",
      "id" : 864963537,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20516",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2NDk2MzUzNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-21T11:37:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864963537",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r655301458"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655301458"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Copied the fuzz inputs in commit https://github.com/bitcoin-core/qa-assets/commit/836513af1edae5987d8d4051b60d96ac4a5b484a, so that the targets have something nice to start with.",
      "commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "created_at" : "2021-06-21T11:38:47Z",
      "diff_hunk" : "@@ -251,9 +251,37 @@ FUZZ_TARGET_DESERIALIZE(messageheader_deserialize, {\n         DeserializeFromFuzzingInput(buffer, mh);\n         (void)mh.IsCommandValid();\n })\n-FUZZ_TARGET_DESERIALIZE(address_deserialize, {\n+FUZZ_TARGET_DESERIALIZE(address_deserialize_v1_notime, {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20516#discussion_r655301458",
      "id" : 655301458,
      "line" : 254,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTMwMTQ1OA==",
      "original_commit_id" : "f8866e8c324be3322fa507c2ceb1de35d148d0f1",
      "original_line" : 254,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/test/fuzz/deserialize.cpp",
      "position" : 41,
      "pull_request_review_id" : 688323665,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20516",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-21T11:38:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655301458",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
