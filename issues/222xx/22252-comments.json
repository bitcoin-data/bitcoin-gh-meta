[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22261 ([p2p/mempool] Two small fixes to node broadcast logic by jnewbery)\n* #22253 (validation: distinguish between same tx and same-nonwitness-data tx in mempool by glozow)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-06-15T20:27:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22252#issuecomment-861808514",
      "id" : 861808514,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22252",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MTgwODUxNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-16T23:49:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/861808514",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept NACK. At least for now.\r\n\r\nFirstly, package trimming might be handled at the p2p-layer instead of the mempool acceptance one. I believe we have not decided yet on a package-announcement protocol, one of the solution could be something INV(\"utxo:feerate\")-based, which would assume the exact feerate package is evaluated by the receiver (or discarded from fetching is inferior to the best known in-mempool package for this utxo). Another solution could be to announce package_ids or another one could be to announce the raw serie of transaction identifier corresponding to a package.\r\n\r\nSecondly, i don't think this policy complexity is required for a v0.1 package-relay aiming to solve the pre-signed feerate problem for L2s. If the root transaction is already in the mempool, it doesn't offer a benefit for those protocols to reevaluate a later-received proposal. The package can still be bumped as a CPFP, not need to swallow additional complexity on our side.\r\n\r\nThirdly, i think this opens a new pinning vector (though not for LN use-case) in the case of the in-mempool same-txid-different-wtxid's feerate is far-lower than the same-txid-different-wtxid inside the package candidate. E.g Alice might expected to have pre-signed transaction with a feerate of 10 sat/vbyte and a CPFP of 20 sat/vbyte. Malicia has previously broadcast the pre-signed transaction, with a different witness, offering a feerate of 5 sat/vbyte ?",
      "created_at" : "2021-06-16T01:01:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22252#issuecomment-861930852",
      "id" : 861930852,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22252",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MTkzMDg1Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-16T01:06:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/861930852",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. This makes sense for both local package acceptance and for package relay.",
      "created_at" : "2021-06-16T10:08:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22252#issuecomment-862230705",
      "id" : 862230705,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22252",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MjIzMDcwNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-16T10:08:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862230705",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jnewbery \r\n\r\nCan you explain in detail why \"it makes sense\" for package acceptance and package relay ? Especially answering to my third point about introducing a new pinning vector, I'm happy to write a functional test if it helps the discussion :)",
      "created_at" : "2021-06-16T21:27:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22252#issuecomment-862738509",
      "id" : 862738509,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22252",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MjczODUwOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-16T21:34:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862738509",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@ariard \r\n\r\n> i think this opens a new pinning vector (though not for LN use-case) in the case of the in-mempool same-txid-different-wtxid's feerate is far-lower than the same-txid-different-wtxid inside the package candidate.\r\n\r\nThis pinning attack is precisely what this PR aims to [begin to] address - that's why there is a very similar functional test for it in this PR. The only difference is that it's not based on feerates since that is irrelevant at the moment: without package trimming, the entire package would be rejected as a \"conflict\" with the mempool. If/when someone implements replacement of same-txid-different-wtxid transactions (i.e. what you trying to do in #19645), that will be even better and 100% compatible with this. #22253 is attempting to make that work a bit faster.",
      "created_at" : "2021-06-17T10:22:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22252#issuecomment-863120643",
      "id" : 863120643,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22252",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MzEyMDY0Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-17T10:22:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/863120643",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ariard if an RPC client or peer sends a package {A,B}, and your mempool already contains {A}, then we shouldn't reject the package. Similarly your mempool already contains {A'} (where txid(A) = txid(A') but wtxid(A) != wtxid(A')), then we also shouldn't reject the package.\r\n\r\nIf A' is already in the mempool, then its feerate can't make B and more or less viable for mempool acceptance, since the viability of a transaction is based on its _descendant_ feerate. So:\r\n\r\n- if A' has too low a feerate to enter the mempool and {A,B} is later submitted, then {A,B} is processed as a package - no change\r\n- if A' has sufficent feerate to enter the mempool and {A,B} is later submitted, then A is trimmed, {B} is processed individually, and the feerate of A and A' is irrelevant.\r\n\r\n> I'm happy to write a functional test if it helps the discussion :)\r\n\r\nYes please - code speaks more precisely than text. If there's some subtlety that I'm missing, then a concrete example would clarify that.",
      "created_at" : "2021-06-17T10:32:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22252#issuecomment-863126609",
      "id" : 863126609,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22252",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MzEyNjYwOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-17T10:32:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/863126609",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@glozow \r\n\r\n> This pinning attack is precisely what this PR aims to [begin to] address - that's why there is a very similar functional test for it in this PR. The only difference is that it's not based on feerates since that is irrelevant at the moment: without package trimming, the entire package would be rejected as a \"conflict\" with the mempool. If/when someone implements replacement of same-txid-different-wtxid transactions (i.e. what you trying to do in #19645), that will be even better and 100% compatible with this. #22253 is attempting to make that work a bit faster.\r\n\r\nSorry but I don't understand the exact pinning scenario you're aiming to solve ? I would be glad if you can detail it for the sake of discussion clarity and see if we agree on the problem terms. In the context of L2s, or multi-party transactions we have few types of tx-relay jammings to care about. \r\n\r\nOne of them is witness malleability as described [here](https://gist.github.com/ariard/7e509bf2c81ea8049fd0c67978c521af#witness-malleability). Another one is [transaction pinning](https://gist.github.com/ariard/7e509bf2c81ea8049fd0c67978c521af#transaction-pinning). The intentional attempt with #19645 was to start the preliminary work to solve witness malleability by authorizing our mempool to accept wtxid. But ultimately addressing it for singe-tx was relying on a change of our RBF rules, IIRC. What I'm concerned of with this PR, is while attempting to solve witness malleability, it's opening a new vector of transaction pinning, namely downgrading the feerate of a honest package at package evaluation by our `ProcessNewPackage`, if you've an already in-mempool first package component with a lower, malicious feerate.",
      "created_at" : "2021-06-17T18:25:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22252#issuecomment-863465014",
      "id" : 863465014,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22252",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MzQ2NTAxNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-17T18:25:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/863465014",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jnewbery \r\n\r\n>    if A' has sufficent feerate to enter the mempool and {A,B} is later submitted, then A is trimmed, {B} is processed individually, and the feerate of A and A' is irrelevant.\r\n\r\nI think the feerate of A/A' is still relevant as you have to consider the whole package feerate for block inclusion (see `addPackageTxs`), and a lower, malicious A feerate is decreasing the odds of inclusion. Which is one of the purpose of the pinning, not only block mempool acceptance, but also downgrade odds of soon-confimation (an outcome we considered in the past, see discussion about carve-out design : https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html iirc)\r\n\r\n> Yes please - code speaks more precisely than text. If there's some subtlety that I'm missing, then a concrete example would clarify that.\r\n\r\nYep, will do in the coming weeks, when I've time. Otherwise, if my concern is realized, and this change introduces a flaw in our mempool logic, I'll tread this a security issue, as usual, not forgetting to point it was a contentious change w.r.t to our review process.\r\n\r\nI think we have time with such context-rich work (mempool, second-layer implications, an array of attacks scenarios to condisder, ...), so I believe this PR isn't ready at all. Also I think it's relevantess is still function of deciding of a package-announcement p2p mechanism, as ihmo we might achieve at a lower-layer than the mempool. Do you have a sound package relay specification draft available somewhere against which we can evaluate this proposal ?",
      "created_at" : "2021-06-17T18:34:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22252#issuecomment-863470775",
      "id" : 863470775,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22252",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MzQ3MDc3NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-17T18:37:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/863470775",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "John, while digging recently through the archives of #10823, I saw your engagement standing as an example of patience, listening with the potentially affected Bitcoin users, and the implications for their businesses. Genuinely, I think that was a worthy example of how project contributors should consider policy change when the implications are significant and ecosystem-wise.\r\n\r\nI've always been eager of what Optech has done for the ecosystem. This team pouring thousands of hours of work, not only to weekly inform Bitcoin devs/business without reprieve, but also pulling up Bitcoin OSS standards, everytime the opportunity was met, such as the occasion of the Taproot public review. Inspired by this action, I've recently setup a serie of workshops to the awareness of the always-growing Lightning/L2 community. Driven first by a goal of sharing back knowledge around the safety and performance issues they're encountering in the last years about our policy but also to observe if a consensus (or a lack of it) was emerging among L2s users and the wider community about ongoing and future changes of our policy, as they're going to be the first ones impacted in case of bugs or subtle safety issues in our mempool.\r\n\r\nNote, maybe I should have start those workshops as early this serie of works was started with #20833, but at that time I wasn't sure the direction of this work, and which exact problem it was trying to solve,  either laying the ground of hopefully a future [libbstandardness](https://github.com/bitcoin/bitcoin/pull/18797) for Core or laying the ground for package-relay and I did say [so](https://github.com/bitcoin/bitcoin/pull/20833/#pullrequestreview-570114670).\r\n\r\nBuilding on top of this, and hoping to clear miscommunications among us on this serie of work, i explained the problems that L2s are encountering on the base-layer in this new published mail : https://lists.linuxfoundation.org/pipermail/lightning-dev/2021-June/003057.html, on which I hope you'll take time to think about. Until so, I'll maintain my Concept NACK on this PR as I don't think it's grounded enough to pass the bar of our downstream projects expectations.\r\n\r\nWith the always-ongoing growth of the Bitcoin ecosystem, IMO such standards of development, where we carefully listen to our users and if the feedback provided is relevant, delay engineering works in consequence is slowly going to become the norm, even if it takes years to get there. I did appreciate how #21528 sets a step in this direction, where the PR author took considerable time to reach out potentially affected downstream projects to minimize service-disruption.\r\n\r\nW.r.t to my previous comment expressing in-advance safety concerns with this PR, I've poured time in the last months browsing our mempool logics correctness and I'll be glad to not have regressions on this side.\r\n\r\nFinally, I hope in this serie of L2-related works you'll keep standing as the public example you have been for this Bitcoin community in the past years and I always kindly remember the John I used to know at Chaincode, diligently catching up my countless wallet refactos bugs. We're humans after all, and as such we have all good and bad days, an assumption I believe true for any contributors to this project.",
      "created_at" : "2021-06-18T23:24:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22252#issuecomment-864316785",
      "id" : 864316785,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22252",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2NDMxNjc4NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-18T23:40:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864316785",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   }
]
