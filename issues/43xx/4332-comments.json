[
   {
      "author_association" : "MEMBER",
      "body" : "Since you pinged earlier, ACK on the buildsystem changes.\n\nAnd noted as a good example of a lib-refactor working case.\n",
      "created_at" : "2014-06-12T05:25:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-45831377",
      "id" : 45831377,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1ODMxMzc3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/45831377/reactions"
      },
      "updated_at" : "2014-06-12T05:25:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/45831377",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Interesting that pulltester pukes on \"replace_first\", but builds for me.  Will update, along with some more goodies.\n\nEverything submitted builds and tests locally, of course.\n",
      "created_at" : "2014-06-12T05:33:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-45831729",
      "id" : 45831729,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1ODMxNzI5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/45831729/reactions"
      },
      "updated_at" : "2014-06-12T05:33:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/45831729",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jgarzik I'd guess that pull-tester's version of boost doesn't rope in that header as freely.\nsrc/test/script_tests.cpp, uses replace_first as well, and includes:\n\n`#include <boost/algorithm/string/replace.hpp>`\n",
      "created_at" : "2014-06-12T05:56:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-45832757",
      "id" : 45832757,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1ODMyNzU3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/45832757/reactions"
      },
      "updated_at" : "2014-06-12T05:56:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/45832757",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Added JSON output (a la decoderawtransaction).  Notably, this uses a new \"UniValue\" (universal value) class to provide JSON containers and output, at a fraction of the cost of JSON-spirit.\n",
      "created_at" : "2014-06-12T15:26:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-45906496",
      "id" : 45906496,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1OTA2NDk2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/45906496/reactions"
      },
      "updated_at" : "2014-06-12T15:26:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/45906496",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Suggestion: separate commands from options:\n\n./rawtx --flag1 --flag2 [transaction] command1=arg command2=arg\n\nSo -regtest, -testnet, -? remain flags, but the rest are operations to be performed in order on the transaction data.\n",
      "created_at" : "2014-06-12T22:40:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-45957117",
      "id" : 45957117,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1OTU3MTE3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/45957117/reactions"
      },
      "updated_at" : "2014-06-12T22:40:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/45957117",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased.  univalue JSON parser passes the \"vjson\" project's test suite.\n\n@sipa Seems reasonable.\n",
      "created_at" : "2014-06-13T02:40:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-45970502",
      "id" : 45970502,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1OTcwNTAy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/45970502/reactions"
      },
      "updated_at" : "2014-06-13T02:41:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/45970502",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated the command line UI per @sipa suggestion.  That simplified the utility a bit.  Updated OP to reflect new --help output and usage.\n",
      "created_at" : "2014-06-13T19:41:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46051994",
      "id" : 46051994,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2MDUxOTk0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46051994/reactions"
      },
      "updated_at" : "2014-06-13T19:41:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46051994",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r13771025"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13771025"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There is no such thing as a transaction version 2, afaik. Also, use CTransaction::CURRENT_VERSION instead of a hardcoded maximum?\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-06-13T20:49:26Z",
      "diff_hunk" : "@@ -0,0 +1,486 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"core.h\"\n+#include \"ui_interface.h\" // for _(...)\n+#include \"univalue.h\"\n+\n+#include <boost/filesystem/operations.hpp>\n+#include <boost/algorithm/string/classification.hpp>\n+#include <boost/algorithm/string/predicate.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <boost/algorithm/string/replace.hpp>\n+\n+using namespace std;\n+using namespace boost;\n+using namespace boost::algorithm;\n+\n+static bool fCreateBlank;\n+\n+static bool AppInitRawTx(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    ParseParameters(argc, argv);\n+\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n+\n+    fCreateBlank = GetBoolArg(\"-create\", false);\n+\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = _(\"Bitcoin Core rawtx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+            _(\"Usage:\") + \"\\n\" +\n+              \"  rawtx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"  rawtx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Options:\") + \"\\n\";\n+        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n+        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n+        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n+        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n+        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n+        strUsage += \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+\n+        strUsage = _(\"Commands:\") + \"\\n\";\n+        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n+        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n+        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n+        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n+        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n+        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n+        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+        return false;\n+    }\n+    return true;\n+}\n+\n+static CScript\n+ParseScript(string s)\n+{\n+    CScript result;\n+\n+    static map<string, opcodetype> mapOpNames;\n+\n+    if (mapOpNames.size() == 0)\n+    {\n+        for (int op = 0; op <= OP_NOP10; op++)\n+        {\n+            // Allow OP_RESERVED to get into mapOpNames\n+            if (op < OP_NOP && op != OP_RESERVED)\n+                continue;\n+\n+            const char* name = GetOpName((opcodetype)op);\n+            if (strcmp(name, \"OP_UNKNOWN\") == 0)\n+                continue;\n+            string strName(name);\n+            mapOpNames[strName] = (opcodetype)op;\n+            // Convenience: OP_ADD and just ADD are both recognized:\n+            replace_first(strName, \"OP_\", \"\");\n+            mapOpNames[strName] = (opcodetype)op;\n+        }\n+    }\n+\n+    vector<string> words;\n+    split(words, s, is_any_of(\" \\t\\n\"), token_compress_on);\n+\n+    BOOST_FOREACH(string w, words)\n+    {\n+        if (w.size() == 0)\n+        {\n+            // Empty string, ignore. (boost::split given '' will return one word)\n+        }\n+        else if (all(w, is_digit()) ||\n+            (starts_with(w, \"-\") && all(string(w.begin()+1, w.end()), is_digit())))\n+        {\n+            // Number\n+            int64_t n = atoi64(w);\n+            result << n;\n+        }\n+        else if (starts_with(w, \"0x\") && IsHex(string(w.begin()+2, w.end())))\n+        {\n+            // Raw hex data, inserted NOT pushed onto stack:\n+            std::vector<unsigned char> raw = ParseHex(string(w.begin()+2, w.end()));\n+            result.insert(result.end(), raw.begin(), raw.end());\n+        }\n+        else if (w.size() >= 2 && starts_with(w, \"'\") && ends_with(w, \"'\"))\n+        {\n+            // Single-quoted string, pushed as data. NOTE: this is poor-man's\n+            // parsing, spaces/tabs/newlines in single-quoted strings won't work.\n+            std::vector<unsigned char> value(w.begin()+1, w.end()-1);\n+            result << value;\n+        }\n+        else if (mapOpNames.count(w))\n+        {\n+            // opcode, e.g. OP_ADD or ADD:\n+            result << mapOpNames[w];\n+        }\n+        else\n+        {\n+            throw runtime_error(\"script parse error\");\n+        }\n+    }\n+\n+    return result;\n+}\n+\n+static void DecodeHexTx(CTransaction& tx, const string& strHexTx)\n+{\n+    if (!IsHex(strHexTx))\n+        throw runtime_error(\"argument not hex string\");\n+\n+    vector<unsigned char> txData(ParseHex(strHexTx));\n+    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n+    try {\n+        ssData >> tx;\n+    }\n+    catch (std::exception &e) {\n+        throw runtime_error(\"TX decode failed\");\n+    }\n+}\n+\n+static string EncodeHexTx(const CTransaction& tx)\n+{\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << tx;\n+    return HexStr(ssTx.begin(), ssTx.end());\n+}\n+\n+static void MutateTxVersion(CTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newVersion = atoi64(cmdVal);\n+    if (newVersion < 1 || newVersion > 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r13771025",
      "id" : 13771025,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzcxMDI1",
      "original_commit_id" : "6a8fa88c1f7e4bfaeca5a9dfccd4094b1943ce8d",
      "original_line" : null,
      "original_position" : 168,
      "original_start_line" : null,
      "path" : "src/rawtx.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13771025/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13771025",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r13771093"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13771093"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The general idea was CURRENT_VERSION+1, which I probably should have made more explicit, with the thought of perhaps enabling some experimentation.  Maybe that's a dumb idea, and it should never exceed CURRENT_VERSION [without an easy and obvious hack by a programmer].\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-06-13T20:51:28Z",
      "diff_hunk" : "@@ -0,0 +1,486 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"core.h\"\n+#include \"ui_interface.h\" // for _(...)\n+#include \"univalue.h\"\n+\n+#include <boost/filesystem/operations.hpp>\n+#include <boost/algorithm/string/classification.hpp>\n+#include <boost/algorithm/string/predicate.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <boost/algorithm/string/replace.hpp>\n+\n+using namespace std;\n+using namespace boost;\n+using namespace boost::algorithm;\n+\n+static bool fCreateBlank;\n+\n+static bool AppInitRawTx(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    ParseParameters(argc, argv);\n+\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n+\n+    fCreateBlank = GetBoolArg(\"-create\", false);\n+\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = _(\"Bitcoin Core rawtx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+            _(\"Usage:\") + \"\\n\" +\n+              \"  rawtx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"  rawtx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Options:\") + \"\\n\";\n+        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n+        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n+        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n+        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n+        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n+        strUsage += \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+\n+        strUsage = _(\"Commands:\") + \"\\n\";\n+        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n+        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n+        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n+        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n+        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n+        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n+        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+        return false;\n+    }\n+    return true;\n+}\n+\n+static CScript\n+ParseScript(string s)\n+{\n+    CScript result;\n+\n+    static map<string, opcodetype> mapOpNames;\n+\n+    if (mapOpNames.size() == 0)\n+    {\n+        for (int op = 0; op <= OP_NOP10; op++)\n+        {\n+            // Allow OP_RESERVED to get into mapOpNames\n+            if (op < OP_NOP && op != OP_RESERVED)\n+                continue;\n+\n+            const char* name = GetOpName((opcodetype)op);\n+            if (strcmp(name, \"OP_UNKNOWN\") == 0)\n+                continue;\n+            string strName(name);\n+            mapOpNames[strName] = (opcodetype)op;\n+            // Convenience: OP_ADD and just ADD are both recognized:\n+            replace_first(strName, \"OP_\", \"\");\n+            mapOpNames[strName] = (opcodetype)op;\n+        }\n+    }\n+\n+    vector<string> words;\n+    split(words, s, is_any_of(\" \\t\\n\"), token_compress_on);\n+\n+    BOOST_FOREACH(string w, words)\n+    {\n+        if (w.size() == 0)\n+        {\n+            // Empty string, ignore. (boost::split given '' will return one word)\n+        }\n+        else if (all(w, is_digit()) ||\n+            (starts_with(w, \"-\") && all(string(w.begin()+1, w.end()), is_digit())))\n+        {\n+            // Number\n+            int64_t n = atoi64(w);\n+            result << n;\n+        }\n+        else if (starts_with(w, \"0x\") && IsHex(string(w.begin()+2, w.end())))\n+        {\n+            // Raw hex data, inserted NOT pushed onto stack:\n+            std::vector<unsigned char> raw = ParseHex(string(w.begin()+2, w.end()));\n+            result.insert(result.end(), raw.begin(), raw.end());\n+        }\n+        else if (w.size() >= 2 && starts_with(w, \"'\") && ends_with(w, \"'\"))\n+        {\n+            // Single-quoted string, pushed as data. NOTE: this is poor-man's\n+            // parsing, spaces/tabs/newlines in single-quoted strings won't work.\n+            std::vector<unsigned char> value(w.begin()+1, w.end()-1);\n+            result << value;\n+        }\n+        else if (mapOpNames.count(w))\n+        {\n+            // opcode, e.g. OP_ADD or ADD:\n+            result << mapOpNames[w];\n+        }\n+        else\n+        {\n+            throw runtime_error(\"script parse error\");\n+        }\n+    }\n+\n+    return result;\n+}\n+\n+static void DecodeHexTx(CTransaction& tx, const string& strHexTx)\n+{\n+    if (!IsHex(strHexTx))\n+        throw runtime_error(\"argument not hex string\");\n+\n+    vector<unsigned char> txData(ParseHex(strHexTx));\n+    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n+    try {\n+        ssData >> tx;\n+    }\n+    catch (std::exception &e) {\n+        throw runtime_error(\"TX decode failed\");\n+    }\n+}\n+\n+static string EncodeHexTx(const CTransaction& tx)\n+{\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << tx;\n+    return HexStr(ssTx.begin(), ssTx.end());\n+}\n+\n+static void MutateTxVersion(CTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newVersion = atoi64(cmdVal);\n+    if (newVersion < 1 || newVersion > 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r13771093",
      "id" : 13771093,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzcxMDkz",
      "original_commit_id" : "6a8fa88c1f7e4bfaeca5a9dfccd4094b1943ce8d",
      "original_line" : null,
      "original_position" : 168,
      "original_start_line" : null,
      "path" : "src/rawtx.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13771093/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13771093",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r13771095"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13771095"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What makes block 250000 special? Why is it hardcoded?\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-06-13T20:51:30Z",
      "diff_hunk" : "@@ -0,0 +1,486 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"core.h\"\n+#include \"ui_interface.h\" // for _(...)\n+#include \"univalue.h\"\n+\n+#include <boost/filesystem/operations.hpp>\n+#include <boost/algorithm/string/classification.hpp>\n+#include <boost/algorithm/string/predicate.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <boost/algorithm/string/replace.hpp>\n+\n+using namespace std;\n+using namespace boost;\n+using namespace boost::algorithm;\n+\n+static bool fCreateBlank;\n+\n+static bool AppInitRawTx(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    ParseParameters(argc, argv);\n+\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n+\n+    fCreateBlank = GetBoolArg(\"-create\", false);\n+\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = _(\"Bitcoin Core rawtx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+            _(\"Usage:\") + \"\\n\" +\n+              \"  rawtx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"  rawtx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Options:\") + \"\\n\";\n+        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n+        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n+        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n+        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n+        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n+        strUsage += \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+\n+        strUsage = _(\"Commands:\") + \"\\n\";\n+        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n+        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n+        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n+        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n+        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n+        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n+        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+        return false;\n+    }\n+    return true;\n+}\n+\n+static CScript\n+ParseScript(string s)\n+{\n+    CScript result;\n+\n+    static map<string, opcodetype> mapOpNames;\n+\n+    if (mapOpNames.size() == 0)\n+    {\n+        for (int op = 0; op <= OP_NOP10; op++)\n+        {\n+            // Allow OP_RESERVED to get into mapOpNames\n+            if (op < OP_NOP && op != OP_RESERVED)\n+                continue;\n+\n+            const char* name = GetOpName((opcodetype)op);\n+            if (strcmp(name, \"OP_UNKNOWN\") == 0)\n+                continue;\n+            string strName(name);\n+            mapOpNames[strName] = (opcodetype)op;\n+            // Convenience: OP_ADD and just ADD are both recognized:\n+            replace_first(strName, \"OP_\", \"\");\n+            mapOpNames[strName] = (opcodetype)op;\n+        }\n+    }\n+\n+    vector<string> words;\n+    split(words, s, is_any_of(\" \\t\\n\"), token_compress_on);\n+\n+    BOOST_FOREACH(string w, words)\n+    {\n+        if (w.size() == 0)\n+        {\n+            // Empty string, ignore. (boost::split given '' will return one word)\n+        }\n+        else if (all(w, is_digit()) ||\n+            (starts_with(w, \"-\") && all(string(w.begin()+1, w.end()), is_digit())))\n+        {\n+            // Number\n+            int64_t n = atoi64(w);\n+            result << n;\n+        }\n+        else if (starts_with(w, \"0x\") && IsHex(string(w.begin()+2, w.end())))\n+        {\n+            // Raw hex data, inserted NOT pushed onto stack:\n+            std::vector<unsigned char> raw = ParseHex(string(w.begin()+2, w.end()));\n+            result.insert(result.end(), raw.begin(), raw.end());\n+        }\n+        else if (w.size() >= 2 && starts_with(w, \"'\") && ends_with(w, \"'\"))\n+        {\n+            // Single-quoted string, pushed as data. NOTE: this is poor-man's\n+            // parsing, spaces/tabs/newlines in single-quoted strings won't work.\n+            std::vector<unsigned char> value(w.begin()+1, w.end()-1);\n+            result << value;\n+        }\n+        else if (mapOpNames.count(w))\n+        {\n+            // opcode, e.g. OP_ADD or ADD:\n+            result << mapOpNames[w];\n+        }\n+        else\n+        {\n+            throw runtime_error(\"script parse error\");\n+        }\n+    }\n+\n+    return result;\n+}\n+\n+static void DecodeHexTx(CTransaction& tx, const string& strHexTx)\n+{\n+    if (!IsHex(strHexTx))\n+        throw runtime_error(\"argument not hex string\");\n+\n+    vector<unsigned char> txData(ParseHex(strHexTx));\n+    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n+    try {\n+        ssData >> tx;\n+    }\n+    catch (std::exception &e) {\n+        throw runtime_error(\"TX decode failed\");\n+    }\n+}\n+\n+static string EncodeHexTx(const CTransaction& tx)\n+{\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << tx;\n+    return HexStr(ssTx.begin(), ssTx.end());\n+}\n+\n+static void MutateTxVersion(CTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newVersion = atoi64(cmdVal);\n+    if (newVersion < 1 || newVersion > 2)\n+        throw runtime_error(\"Invalid TX version requested\");\n+\n+    tx.nVersion = (int) newVersion;\n+}\n+\n+static void MutateTxLocktime(CTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newLocktime = atoi64(cmdVal);\n+    if (newLocktime < 250000LL || newLocktime > 0xffffffffLL)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r13771095",
      "id" : 13771095,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzcxMDk1",
      "original_commit_id" : "6a8fa88c1f7e4bfaeca5a9dfccd4094b1943ce8d",
      "original_line" : null,
      "original_position" : 177,
      "original_start_line" : null,
      "path" : "src/rawtx.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13771095/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13771095",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r13771166"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13771166"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Absolutely nothing.  It's a sanity check that may want removing.  The thought was to prevent a pointlessly low locktime, but whatever, not important and probably wrong.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-06-13T20:53:47Z",
      "diff_hunk" : "@@ -0,0 +1,486 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"core.h\"\n+#include \"ui_interface.h\" // for _(...)\n+#include \"univalue.h\"\n+\n+#include <boost/filesystem/operations.hpp>\n+#include <boost/algorithm/string/classification.hpp>\n+#include <boost/algorithm/string/predicate.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <boost/algorithm/string/replace.hpp>\n+\n+using namespace std;\n+using namespace boost;\n+using namespace boost::algorithm;\n+\n+static bool fCreateBlank;\n+\n+static bool AppInitRawTx(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    ParseParameters(argc, argv);\n+\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n+\n+    fCreateBlank = GetBoolArg(\"-create\", false);\n+\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = _(\"Bitcoin Core rawtx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+            _(\"Usage:\") + \"\\n\" +\n+              \"  rawtx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"  rawtx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Options:\") + \"\\n\";\n+        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n+        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n+        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n+        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n+        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n+        strUsage += \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+\n+        strUsage = _(\"Commands:\") + \"\\n\";\n+        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n+        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n+        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n+        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n+        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n+        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n+        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+        return false;\n+    }\n+    return true;\n+}\n+\n+static CScript\n+ParseScript(string s)\n+{\n+    CScript result;\n+\n+    static map<string, opcodetype> mapOpNames;\n+\n+    if (mapOpNames.size() == 0)\n+    {\n+        for (int op = 0; op <= OP_NOP10; op++)\n+        {\n+            // Allow OP_RESERVED to get into mapOpNames\n+            if (op < OP_NOP && op != OP_RESERVED)\n+                continue;\n+\n+            const char* name = GetOpName((opcodetype)op);\n+            if (strcmp(name, \"OP_UNKNOWN\") == 0)\n+                continue;\n+            string strName(name);\n+            mapOpNames[strName] = (opcodetype)op;\n+            // Convenience: OP_ADD and just ADD are both recognized:\n+            replace_first(strName, \"OP_\", \"\");\n+            mapOpNames[strName] = (opcodetype)op;\n+        }\n+    }\n+\n+    vector<string> words;\n+    split(words, s, is_any_of(\" \\t\\n\"), token_compress_on);\n+\n+    BOOST_FOREACH(string w, words)\n+    {\n+        if (w.size() == 0)\n+        {\n+            // Empty string, ignore. (boost::split given '' will return one word)\n+        }\n+        else if (all(w, is_digit()) ||\n+            (starts_with(w, \"-\") && all(string(w.begin()+1, w.end()), is_digit())))\n+        {\n+            // Number\n+            int64_t n = atoi64(w);\n+            result << n;\n+        }\n+        else if (starts_with(w, \"0x\") && IsHex(string(w.begin()+2, w.end())))\n+        {\n+            // Raw hex data, inserted NOT pushed onto stack:\n+            std::vector<unsigned char> raw = ParseHex(string(w.begin()+2, w.end()));\n+            result.insert(result.end(), raw.begin(), raw.end());\n+        }\n+        else if (w.size() >= 2 && starts_with(w, \"'\") && ends_with(w, \"'\"))\n+        {\n+            // Single-quoted string, pushed as data. NOTE: this is poor-man's\n+            // parsing, spaces/tabs/newlines in single-quoted strings won't work.\n+            std::vector<unsigned char> value(w.begin()+1, w.end()-1);\n+            result << value;\n+        }\n+        else if (mapOpNames.count(w))\n+        {\n+            // opcode, e.g. OP_ADD or ADD:\n+            result << mapOpNames[w];\n+        }\n+        else\n+        {\n+            throw runtime_error(\"script parse error\");\n+        }\n+    }\n+\n+    return result;\n+}\n+\n+static void DecodeHexTx(CTransaction& tx, const string& strHexTx)\n+{\n+    if (!IsHex(strHexTx))\n+        throw runtime_error(\"argument not hex string\");\n+\n+    vector<unsigned char> txData(ParseHex(strHexTx));\n+    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n+    try {\n+        ssData >> tx;\n+    }\n+    catch (std::exception &e) {\n+        throw runtime_error(\"TX decode failed\");\n+    }\n+}\n+\n+static string EncodeHexTx(const CTransaction& tx)\n+{\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << tx;\n+    return HexStr(ssTx.begin(), ssTx.end());\n+}\n+\n+static void MutateTxVersion(CTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newVersion = atoi64(cmdVal);\n+    if (newVersion < 1 || newVersion > 2)\n+        throw runtime_error(\"Invalid TX version requested\");\n+\n+    tx.nVersion = (int) newVersion;\n+}\n+\n+static void MutateTxLocktime(CTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newLocktime = atoi64(cmdVal);\n+    if (newLocktime < 250000LL || newLocktime > 0xffffffffLL)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r13771166",
      "id" : 13771166,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzcxMTY2",
      "original_commit_id" : "6a8fa88c1f7e4bfaeca5a9dfccd4094b1943ce8d",
      "original_line" : null,
      "original_position" : 177,
      "original_start_line" : null,
      "path" : "src/rawtx.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13771166/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13771166",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r13771168"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13771168"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Suggestion: use (MAX_BLOCK_SIZE / CTxOut()::GetSerializeSize(SER_NETWORK, PROTOCOL_VERSION)) as maximum instead of a hardcoded 100000?\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-06-13T20:53:48Z",
      "diff_hunk" : "@@ -0,0 +1,486 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"core.h\"\n+#include \"ui_interface.h\" // for _(...)\n+#include \"univalue.h\"\n+\n+#include <boost/filesystem/operations.hpp>\n+#include <boost/algorithm/string/classification.hpp>\n+#include <boost/algorithm/string/predicate.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <boost/algorithm/string/replace.hpp>\n+\n+using namespace std;\n+using namespace boost;\n+using namespace boost::algorithm;\n+\n+static bool fCreateBlank;\n+\n+static bool AppInitRawTx(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    ParseParameters(argc, argv);\n+\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n+\n+    fCreateBlank = GetBoolArg(\"-create\", false);\n+\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = _(\"Bitcoin Core rawtx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+            _(\"Usage:\") + \"\\n\" +\n+              \"  rawtx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"  rawtx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Options:\") + \"\\n\";\n+        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n+        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n+        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n+        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n+        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n+        strUsage += \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+\n+        strUsage = _(\"Commands:\") + \"\\n\";\n+        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n+        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n+        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n+        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n+        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n+        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n+        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+        return false;\n+    }\n+    return true;\n+}\n+\n+static CScript\n+ParseScript(string s)\n+{\n+    CScript result;\n+\n+    static map<string, opcodetype> mapOpNames;\n+\n+    if (mapOpNames.size() == 0)\n+    {\n+        for (int op = 0; op <= OP_NOP10; op++)\n+        {\n+            // Allow OP_RESERVED to get into mapOpNames\n+            if (op < OP_NOP && op != OP_RESERVED)\n+                continue;\n+\n+            const char* name = GetOpName((opcodetype)op);\n+            if (strcmp(name, \"OP_UNKNOWN\") == 0)\n+                continue;\n+            string strName(name);\n+            mapOpNames[strName] = (opcodetype)op;\n+            // Convenience: OP_ADD and just ADD are both recognized:\n+            replace_first(strName, \"OP_\", \"\");\n+            mapOpNames[strName] = (opcodetype)op;\n+        }\n+    }\n+\n+    vector<string> words;\n+    split(words, s, is_any_of(\" \\t\\n\"), token_compress_on);\n+\n+    BOOST_FOREACH(string w, words)\n+    {\n+        if (w.size() == 0)\n+        {\n+            // Empty string, ignore. (boost::split given '' will return one word)\n+        }\n+        else if (all(w, is_digit()) ||\n+            (starts_with(w, \"-\") && all(string(w.begin()+1, w.end()), is_digit())))\n+        {\n+            // Number\n+            int64_t n = atoi64(w);\n+            result << n;\n+        }\n+        else if (starts_with(w, \"0x\") && IsHex(string(w.begin()+2, w.end())))\n+        {\n+            // Raw hex data, inserted NOT pushed onto stack:\n+            std::vector<unsigned char> raw = ParseHex(string(w.begin()+2, w.end()));\n+            result.insert(result.end(), raw.begin(), raw.end());\n+        }\n+        else if (w.size() >= 2 && starts_with(w, \"'\") && ends_with(w, \"'\"))\n+        {\n+            // Single-quoted string, pushed as data. NOTE: this is poor-man's\n+            // parsing, spaces/tabs/newlines in single-quoted strings won't work.\n+            std::vector<unsigned char> value(w.begin()+1, w.end()-1);\n+            result << value;\n+        }\n+        else if (mapOpNames.count(w))\n+        {\n+            // opcode, e.g. OP_ADD or ADD:\n+            result << mapOpNames[w];\n+        }\n+        else\n+        {\n+            throw runtime_error(\"script parse error\");\n+        }\n+    }\n+\n+    return result;\n+}\n+\n+static void DecodeHexTx(CTransaction& tx, const string& strHexTx)\n+{\n+    if (!IsHex(strHexTx))\n+        throw runtime_error(\"argument not hex string\");\n+\n+    vector<unsigned char> txData(ParseHex(strHexTx));\n+    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n+    try {\n+        ssData >> tx;\n+    }\n+    catch (std::exception &e) {\n+        throw runtime_error(\"TX decode failed\");\n+    }\n+}\n+\n+static string EncodeHexTx(const CTransaction& tx)\n+{\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << tx;\n+    return HexStr(ssTx.begin(), ssTx.end());\n+}\n+\n+static void MutateTxVersion(CTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newVersion = atoi64(cmdVal);\n+    if (newVersion < 1 || newVersion > 2)\n+        throw runtime_error(\"Invalid TX version requested\");\n+\n+    tx.nVersion = (int) newVersion;\n+}\n+\n+static void MutateTxLocktime(CTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newLocktime = atoi64(cmdVal);\n+    if (newLocktime < 250000LL || newLocktime > 0xffffffffLL)\n+        throw runtime_error(\"Invalid TX locktime requested\");\n+\n+    tx.nLockTime = (unsigned int) newLocktime;\n+}\n+\n+static void MutateTxAddInput(CTransaction& tx, const string& strInput)\n+{\n+    size_t pos = strInput.find(':');\n+    if ((pos == string::npos) ||\n+        (pos == 0) ||\n+        (pos == (strInput.size() - 1)))\n+        throw runtime_error(\"TX input missing separator\");\n+\n+    string strTxid = strInput.substr(0, pos);\n+    if ((strTxid.size() != 64) || !IsHex(strTxid))\n+        throw runtime_error(\"invalid TX input txid\");\n+    uint256 txid(strTxid);\n+\n+    string strVout = strInput.substr(pos + 1, string::npos);\n+    int vout = atoi(strVout);\n+    if ((vout < 0) || (vout > 100000))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r13771168",
      "id" : 13771168,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzcxMTY4",
      "original_commit_id" : "6a8fa88c1f7e4bfaeca5a9dfccd4094b1943ce8d",
      "original_line" : null,
      "original_position" : 198,
      "original_start_line" : null,
      "path" : "src/rawtx.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13771168/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13771168",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r13771381"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13771381"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Transactions with nVersion > CURRENT_VERSION are non-standard anyway, so they wouldn't be relayed by even your own software.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-06-13T20:59:13Z",
      "diff_hunk" : "@@ -0,0 +1,486 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"core.h\"\n+#include \"ui_interface.h\" // for _(...)\n+#include \"univalue.h\"\n+\n+#include <boost/filesystem/operations.hpp>\n+#include <boost/algorithm/string/classification.hpp>\n+#include <boost/algorithm/string/predicate.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <boost/algorithm/string/replace.hpp>\n+\n+using namespace std;\n+using namespace boost;\n+using namespace boost::algorithm;\n+\n+static bool fCreateBlank;\n+\n+static bool AppInitRawTx(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    ParseParameters(argc, argv);\n+\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n+\n+    fCreateBlank = GetBoolArg(\"-create\", false);\n+\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = _(\"Bitcoin Core rawtx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+            _(\"Usage:\") + \"\\n\" +\n+              \"  rawtx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"  rawtx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Options:\") + \"\\n\";\n+        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n+        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n+        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n+        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n+        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n+        strUsage += \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+\n+        strUsage = _(\"Commands:\") + \"\\n\";\n+        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n+        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n+        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n+        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n+        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n+        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n+        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+        return false;\n+    }\n+    return true;\n+}\n+\n+static CScript\n+ParseScript(string s)\n+{\n+    CScript result;\n+\n+    static map<string, opcodetype> mapOpNames;\n+\n+    if (mapOpNames.size() == 0)\n+    {\n+        for (int op = 0; op <= OP_NOP10; op++)\n+        {\n+            // Allow OP_RESERVED to get into mapOpNames\n+            if (op < OP_NOP && op != OP_RESERVED)\n+                continue;\n+\n+            const char* name = GetOpName((opcodetype)op);\n+            if (strcmp(name, \"OP_UNKNOWN\") == 0)\n+                continue;\n+            string strName(name);\n+            mapOpNames[strName] = (opcodetype)op;\n+            // Convenience: OP_ADD and just ADD are both recognized:\n+            replace_first(strName, \"OP_\", \"\");\n+            mapOpNames[strName] = (opcodetype)op;\n+        }\n+    }\n+\n+    vector<string> words;\n+    split(words, s, is_any_of(\" \\t\\n\"), token_compress_on);\n+\n+    BOOST_FOREACH(string w, words)\n+    {\n+        if (w.size() == 0)\n+        {\n+            // Empty string, ignore. (boost::split given '' will return one word)\n+        }\n+        else if (all(w, is_digit()) ||\n+            (starts_with(w, \"-\") && all(string(w.begin()+1, w.end()), is_digit())))\n+        {\n+            // Number\n+            int64_t n = atoi64(w);\n+            result << n;\n+        }\n+        else if (starts_with(w, \"0x\") && IsHex(string(w.begin()+2, w.end())))\n+        {\n+            // Raw hex data, inserted NOT pushed onto stack:\n+            std::vector<unsigned char> raw = ParseHex(string(w.begin()+2, w.end()));\n+            result.insert(result.end(), raw.begin(), raw.end());\n+        }\n+        else if (w.size() >= 2 && starts_with(w, \"'\") && ends_with(w, \"'\"))\n+        {\n+            // Single-quoted string, pushed as data. NOTE: this is poor-man's\n+            // parsing, spaces/tabs/newlines in single-quoted strings won't work.\n+            std::vector<unsigned char> value(w.begin()+1, w.end()-1);\n+            result << value;\n+        }\n+        else if (mapOpNames.count(w))\n+        {\n+            // opcode, e.g. OP_ADD or ADD:\n+            result << mapOpNames[w];\n+        }\n+        else\n+        {\n+            throw runtime_error(\"script parse error\");\n+        }\n+    }\n+\n+    return result;\n+}\n+\n+static void DecodeHexTx(CTransaction& tx, const string& strHexTx)\n+{\n+    if (!IsHex(strHexTx))\n+        throw runtime_error(\"argument not hex string\");\n+\n+    vector<unsigned char> txData(ParseHex(strHexTx));\n+    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n+    try {\n+        ssData >> tx;\n+    }\n+    catch (std::exception &e) {\n+        throw runtime_error(\"TX decode failed\");\n+    }\n+}\n+\n+static string EncodeHexTx(const CTransaction& tx)\n+{\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << tx;\n+    return HexStr(ssTx.begin(), ssTx.end());\n+}\n+\n+static void MutateTxVersion(CTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newVersion = atoi64(cmdVal);\n+    if (newVersion < 1 || newVersion > 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r13771381",
      "id" : 13771381,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEzNzcxMzgx",
      "original_commit_id" : "6a8fa88c1f7e4bfaeca5a9dfccd4094b1943ce8d",
      "original_line" : null,
      "original_position" : 168,
      "original_start_line" : null,
      "path" : "src/rawtx.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13771381/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/13771381",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated to improve guards on user inputs per @sipa, and to add transaction signing. Updated --help output in OP.\n\nrawtx should be functionally equivalent to the RPC raw transaction API, when bitcoind is compiled with --disable-wallet.\n\nThere is some amount of almost-duplicate code, that can be harmonized once the RPC server is switched from JSON-spirit to UniValue.\n",
      "created_at" : "2014-06-14T18:01:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46095032",
      "id" : 46095032,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2MDk1MDMy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46095032/reactions"
      },
      "updated_at" : "2014-06-14T18:02:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46095032",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "PS. Considering renaming util to \"bitcoin-tx\" to match existing binary naming, and be a bit more friendly to the global /usr/bin namespace.\n",
      "created_at" : "2014-06-14T18:03:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46095105",
      "id" : 46095105,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2MDk1MTA1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46095105/reactions"
      },
      "updated_at" : "2014-06-14T18:03:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46095105",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "+1 on renaming\n",
      "created_at" : "2014-06-14T23:13:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46102098",
      "id" : 46102098,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2MTAyMDk4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46102098/reactions"
      },
      "updated_at" : "2014-06-14T23:13:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46102098",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "As a tool this looks useful and can eventually take over the pure-utility subset of the RPC interface.\n\n+1 on renaming. Unless we still intend to rename the executables to bitcoin-core-... or such, but that makes the names long and unwieldy and everyone is used to the current bitcoin-*.\n\nBTW: I've cherry-picked the first commit (as 0cafb63), it seems unrelated to the rest of this pull.\n",
      "created_at" : "2014-06-15T13:08:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46115355",
      "id" : 46115355,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2MTE1MzU1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46115355/reactions"
      },
      "updated_at" : "2014-06-15T13:08:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46115355",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased.  Renamed util to bitcoin-tx.\n",
      "created_at" : "2014-06-15T18:27:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46123470",
      "id" : 46123470,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2MTIzNDcw",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46123470/reactions"
      },
      "updated_at" : "2014-06-15T18:27:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46123470",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Do you plan to add support for signing as well (where you pass in the utxo's being spent, and the private keys)?\n",
      "created_at" : "2014-06-16T10:19:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46162165",
      "id" : 46162165,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2MTYyMTY1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46162165/reactions"
      },
      "updated_at" : "2014-06-16T10:19:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46162165",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa Yes, that is already supported.  Added the \"sign\" command yesterday.\n",
      "created_at" : "2014-06-16T12:17:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46171036",
      "id" : 46171036,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2MTcxMDM2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46171036/reactions"
      },
      "updated_at" : "2014-06-16T12:17:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46171036",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This should be ready for merging, unless we want to add \"remove JSON-SPIRIT\" as a blocker.\n",
      "created_at" : "2014-06-20T22:19:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46732730",
      "id" : 46732730,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2NzMyNzMw",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46732730/reactions"
      },
      "updated_at" : "2014-06-20T22:19:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46732730",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jgarzik I saw that you requested i nitpick the univalue class. Will look over it on Monday if I don't get a chance over the weekend.\n",
      "created_at" : "2014-06-21T02:47:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46742671",
      "id" : 46742671,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2NzQyNjcx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46742671/reactions"
      },
      "updated_at" : "2014-06-21T02:47:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46742671",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "As it is an independent library, I think it would serve modularity (and in any case reduce the number of files in the `src` root) to put the univalue implementation into a subdirectory of src.\n\"remove JSON-SPIRIT\" is not a blocker, I really prefer that in a separate pull request later on.\n",
      "created_at" : "2014-06-21T07:55:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46747371",
      "id" : 46747371,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2NzQ3Mzcx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46747371/reactions"
      },
      "updated_at" : "2014-06-21T10:14:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46747371",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14094601"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14094601"
         }
      },
      "author_association" : "MEMBER",
      "body" : "valStr.insert() should save an allocation/copy?\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-06-23T19:24:15Z",
      "diff_hunk" : "@@ -0,0 +1,609 @@\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"core.h\"\n+#include \"main.h\"         // for MAX_BLOCK_SIZE\n+#include \"keystore.h\"\n+#include \"ui_interface.h\" // for _(...)\n+#include \"univalue.h\"\n+#include \"core_io.h\"\n+\n+#include <stdio.h>\n+#include <boost/assign/list_of.hpp>\n+\n+using namespace std;\n+using namespace boost::assign;\n+\n+static bool fCreateBlank;\n+static map<string,UniValue> registers;\n+\n+static bool AppInitRawTx(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    ParseParameters(argc, argv);\n+\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n+\n+    fCreateBlank = GetBoolArg(\"-create\", false);\n+\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = _(\"Bitcoin Core bitcoin-tx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+            _(\"Usage:\") + \"\\n\" +\n+              \"  bitcoin-tx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"  bitcoin-tx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Options:\") + \"\\n\";\n+        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n+        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n+        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n+        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n+        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n+        strUsage += \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+\n+        strUsage = _(\"Commands:\") + \"\\n\";\n+        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n+        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n+        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n+        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n+        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n+        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n+        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n+        strUsage += \"  sign=SIGHASH-FLAGS     \" + _(\"Add zero or more signatures to transaction\") + \"\\n\";\n+        strUsage += \"      This command requires JSON registers:\\n\";\n+        strUsage += \"      prevtxs=JSON object\\n\";\n+        strUsage += \"      privatekeys=JSON object\\n\";\n+        strUsage += \"      See signrawtransaction docs for format of sighash flags, JSON objects.\\n\";\n+        strUsage += \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Register Commands:\") + \"\\n\";\n+        strUsage += \"  load.NAME=FILE         \" + _(\"Load JSON file FILE into register NAME\") + \"\\n\";\n+        strUsage += \"  NAME=JSON-STRING       \" + _(\"Set register NAME to given JSON-STRING\") + \"\\n\";\n+        strUsage += \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        return false;\n+    }\n+    return true;\n+}\n+\n+static void RegisterSet(const string& key, const string& valStr)\n+{\n+    UniValue val;\n+    if (!val.read(valStr)) {\n+        string strErr = \"Cannot parse JSON for key \" + key;\n+        throw runtime_error(strErr);\n+    }\n+\n+    registers[key] = val;\n+}\n+\n+static void RegisterLoad(const string& key, const string& value)\n+{\n+    FILE *f = fopen(value.c_str(), \"r\");\n+    if (!f) {\n+        string strErr = \"Cannot open file \" + value;\n+        throw runtime_error(strErr);\n+    }\n+\n+    // load file chunks into one big buffer\n+    string valStr;\n+    while ((!feof(f)) && (!ferror(f))) {\n+        char buf[4096];\n+        int bread = fread(buf, 1, sizeof(buf), f);\n+        if (!bread)\n+            break;\n+\n+        string tmpStr(buf, bread);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14094601",
      "id" : 14094601,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDk0NjAx",
      "original_commit_id" : "480ec93fbbd6e1d973c712168397a988c9b41cb2",
      "original_line" : null,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/bitcoin-tx.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14094601/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14094601",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14095023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14095023"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s.find_first_of()\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-06-23T19:30:38Z",
      "diff_hunk" : "@@ -0,0 +1,209 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <ctype.h>\n+#include <sstream>\n+#include \"univalue.h\"\n+\n+using namespace std;\n+\n+void UniValue::clear()\n+{\n+    typ = VNULL;\n+    val.clear();\n+    keys.clear();\n+    values.clear();\n+}\n+\n+bool UniValue::setNull()\n+{\n+    clear();\n+    return true;\n+}\n+\n+bool UniValue::setBool(bool val)\n+{\n+    clear();\n+    typ = (val ? VTRUE : VFALSE);\n+    return true;\n+}\n+\n+static bool validNumStr(const string& s)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14095023",
      "id" : 14095023,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDk1MDIz",
      "original_commit_id" : "480ec93fbbd6e1d973c712168397a988c9b41cb2",
      "original_line" : null,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/univalue.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14095023/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14095023",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14095127"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14095127"
         }
      },
      "author_association" : "MEMBER",
      "body" : "also, anon namespace would be nice.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-06-23T19:32:28Z",
      "diff_hunk" : "@@ -0,0 +1,209 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <ctype.h>\n+#include <sstream>\n+#include \"univalue.h\"\n+\n+using namespace std;\n+\n+void UniValue::clear()\n+{\n+    typ = VNULL;\n+    val.clear();\n+    keys.clear();\n+    values.clear();\n+}\n+\n+bool UniValue::setNull()\n+{\n+    clear();\n+    return true;\n+}\n+\n+bool UniValue::setBool(bool val)\n+{\n+    clear();\n+    typ = (val ? VTRUE : VFALSE);\n+    return true;\n+}\n+\n+static bool validNumStr(const string& s)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14095127",
      "id" : 14095127,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDk1MTI3",
      "original_commit_id" : "480ec93fbbd6e1d973c712168397a988c9b41cb2",
      "original_line" : null,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/univalue.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14095127/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14095127",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14095222"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14095222"
         }
      },
      "author_association" : "MEMBER",
      "body" : "const std::string& val_?\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-06-23T19:33:53Z",
      "diff_hunk" : "@@ -0,0 +1,209 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <ctype.h>\n+#include <sstream>\n+#include \"univalue.h\"\n+\n+using namespace std;\n+\n+void UniValue::clear()\n+{\n+    typ = VNULL;\n+    val.clear();\n+    keys.clear();\n+    values.clear();\n+}\n+\n+bool UniValue::setNull()\n+{\n+    clear();\n+    return true;\n+}\n+\n+bool UniValue::setBool(bool val)\n+{\n+    clear();\n+    typ = (val ? VTRUE : VFALSE);\n+    return true;\n+}\n+\n+static bool validNumStr(const string& s)\n+{\n+    bool seenDec = false;\n+    for (unsigned int i = 0; i < s.size(); i++) {\n+        switch (s[i]) {\n+        case '0':\n+        case '1':\n+        case '2':\n+        case '3':\n+        case '4':\n+        case '5':\n+        case '6':\n+        case '7':\n+        case '8':\n+        case '9':\n+            // do nothing\n+            break;\n+\n+        case '.':\n+            if (seenDec)\n+                return false;\n+            seenDec = true;\n+            break;\n+\n+        default:\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool UniValue::setNumStr(string val_)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14095222",
      "id" : 14095222,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDk1MjIy",
      "original_commit_id" : "480ec93fbbd6e1d973c712168397a988c9b41cb2",
      "original_line" : null,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/univalue.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14095222/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14095222",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14095298"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14095298"
         }
      },
      "author_association" : "MEMBER",
      "body" : "const std::string& val_\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-06-23T19:35:02Z",
      "diff_hunk" : "@@ -0,0 +1,209 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <ctype.h>\n+#include <sstream>\n+#include \"univalue.h\"\n+\n+using namespace std;\n+\n+void UniValue::clear()\n+{\n+    typ = VNULL;\n+    val.clear();\n+    keys.clear();\n+    values.clear();\n+}\n+\n+bool UniValue::setNull()\n+{\n+    clear();\n+    return true;\n+}\n+\n+bool UniValue::setBool(bool val)\n+{\n+    clear();\n+    typ = (val ? VTRUE : VFALSE);\n+    return true;\n+}\n+\n+static bool validNumStr(const string& s)\n+{\n+    bool seenDec = false;\n+    for (unsigned int i = 0; i < s.size(); i++) {\n+        switch (s[i]) {\n+        case '0':\n+        case '1':\n+        case '2':\n+        case '3':\n+        case '4':\n+        case '5':\n+        case '6':\n+        case '7':\n+        case '8':\n+        case '9':\n+            // do nothing\n+            break;\n+\n+        case '.':\n+            if (seenDec)\n+                return false;\n+            seenDec = true;\n+            break;\n+\n+        default:\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool UniValue::setNumStr(string val_)\n+{\n+    if (!validNumStr(val))\n+        return false;\n+\n+    clear();\n+    typ = VNUM;\n+    val = val_;\n+    return true;\n+}\n+\n+bool UniValue::setInt(int64_t val)\n+{\n+    string s;\n+    ostringstream oss;\n+\n+    oss << val;\n+\n+    return setNumStr(oss.str());\n+}\n+\n+bool UniValue::setFloat(double val)\n+{\n+    string s;\n+    ostringstream oss;\n+\n+    oss << val;\n+\n+    return setNumStr(oss.str());\n+}\n+\n+bool UniValue::setStr(string val_)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14095298",
      "id" : 14095298,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDk1Mjk4",
      "original_commit_id" : "480ec93fbbd6e1d973c712168397a988c9b41cb2",
      "original_line" : null,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/univalue.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14095298/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14095298",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14095339"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14095339"
         }
      },
      "author_association" : "MEMBER",
      "body" : "const UniValue&\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-06-23T19:35:54Z",
      "diff_hunk" : "@@ -0,0 +1,209 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <ctype.h>\n+#include <sstream>\n+#include \"univalue.h\"\n+\n+using namespace std;\n+\n+void UniValue::clear()\n+{\n+    typ = VNULL;\n+    val.clear();\n+    keys.clear();\n+    values.clear();\n+}\n+\n+bool UniValue::setNull()\n+{\n+    clear();\n+    return true;\n+}\n+\n+bool UniValue::setBool(bool val)\n+{\n+    clear();\n+    typ = (val ? VTRUE : VFALSE);\n+    return true;\n+}\n+\n+static bool validNumStr(const string& s)\n+{\n+    bool seenDec = false;\n+    for (unsigned int i = 0; i < s.size(); i++) {\n+        switch (s[i]) {\n+        case '0':\n+        case '1':\n+        case '2':\n+        case '3':\n+        case '4':\n+        case '5':\n+        case '6':\n+        case '7':\n+        case '8':\n+        case '9':\n+            // do nothing\n+            break;\n+\n+        case '.':\n+            if (seenDec)\n+                return false;\n+            seenDec = true;\n+            break;\n+\n+        default:\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool UniValue::setNumStr(string val_)\n+{\n+    if (!validNumStr(val))\n+        return false;\n+\n+    clear();\n+    typ = VNUM;\n+    val = val_;\n+    return true;\n+}\n+\n+bool UniValue::setInt(int64_t val)\n+{\n+    string s;\n+    ostringstream oss;\n+\n+    oss << val;\n+\n+    return setNumStr(oss.str());\n+}\n+\n+bool UniValue::setFloat(double val)\n+{\n+    string s;\n+    ostringstream oss;\n+\n+    oss << val;\n+\n+    return setNumStr(oss.str());\n+}\n+\n+bool UniValue::setStr(string val_)\n+{\n+    clear();\n+    typ = VSTR;\n+    val = val_;\n+    return true;\n+}\n+\n+bool UniValue::setArray()\n+{\n+    clear();\n+    typ = VARR;\n+    return true;\n+}\n+\n+bool UniValue::setObject()\n+{\n+    clear();\n+    typ = VOBJ;\n+    return true;\n+}\n+\n+bool UniValue::push(UniValue& val)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14095339",
      "id" : 14095339,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDk1MzM5",
      "original_commit_id" : "480ec93fbbd6e1d973c712168397a988c9b41cb2",
      "original_line" : null,
      "original_position" : 118,
      "original_start_line" : null,
      "path" : "src/univalue.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14095339/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14095339",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14095434"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14095434"
         }
      },
      "author_association" : "MEMBER",
      "body" : "const std::string& key and const val. I won't spam you with any more of these.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-06-23T19:38:05Z",
      "diff_hunk" : "@@ -0,0 +1,209 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <ctype.h>\n+#include <sstream>\n+#include \"univalue.h\"\n+\n+using namespace std;\n+\n+void UniValue::clear()\n+{\n+    typ = VNULL;\n+    val.clear();\n+    keys.clear();\n+    values.clear();\n+}\n+\n+bool UniValue::setNull()\n+{\n+    clear();\n+    return true;\n+}\n+\n+bool UniValue::setBool(bool val)\n+{\n+    clear();\n+    typ = (val ? VTRUE : VFALSE);\n+    return true;\n+}\n+\n+static bool validNumStr(const string& s)\n+{\n+    bool seenDec = false;\n+    for (unsigned int i = 0; i < s.size(); i++) {\n+        switch (s[i]) {\n+        case '0':\n+        case '1':\n+        case '2':\n+        case '3':\n+        case '4':\n+        case '5':\n+        case '6':\n+        case '7':\n+        case '8':\n+        case '9':\n+            // do nothing\n+            break;\n+\n+        case '.':\n+            if (seenDec)\n+                return false;\n+            seenDec = true;\n+            break;\n+\n+        default:\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool UniValue::setNumStr(string val_)\n+{\n+    if (!validNumStr(val))\n+        return false;\n+\n+    clear();\n+    typ = VNUM;\n+    val = val_;\n+    return true;\n+}\n+\n+bool UniValue::setInt(int64_t val)\n+{\n+    string s;\n+    ostringstream oss;\n+\n+    oss << val;\n+\n+    return setNumStr(oss.str());\n+}\n+\n+bool UniValue::setFloat(double val)\n+{\n+    string s;\n+    ostringstream oss;\n+\n+    oss << val;\n+\n+    return setNumStr(oss.str());\n+}\n+\n+bool UniValue::setStr(string val_)\n+{\n+    clear();\n+    typ = VSTR;\n+    val = val_;\n+    return true;\n+}\n+\n+bool UniValue::setArray()\n+{\n+    clear();\n+    typ = VARR;\n+    return true;\n+}\n+\n+bool UniValue::setObject()\n+{\n+    clear();\n+    typ = VOBJ;\n+    return true;\n+}\n+\n+bool UniValue::push(UniValue& val)\n+{\n+    if (typ != VARR)\n+        return false;\n+\n+    values.push_back(val);\n+    return true;\n+}\n+\n+bool UniValue::pushKV(string key, UniValue& val)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14095434",
      "id" : 14095434,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDk1NDM0",
      "original_commit_id" : "480ec93fbbd6e1d973c712168397a988c9b41cb2",
      "original_line" : null,
      "original_position" : 127,
      "original_start_line" : null,
      "path" : "src/univalue.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14095434/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14095434",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14096073"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14096073"
         }
      },
      "author_association" : "MEMBER",
      "body" : ".empty()\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-06-23T19:51:04Z",
      "diff_hunk" : "@@ -0,0 +1,100 @@\n+\n+#include \"core_io.h\"\n+#include \"core.h\"\n+#include \"script.h\"\n+\n+#include <boost/assign/list_of.hpp>\n+#include <boost/algorithm/string/classification.hpp>\n+#include <boost/algorithm/string/predicate.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <boost/algorithm/string/replace.hpp>\n+\n+using namespace std;\n+using namespace boost;\n+using namespace boost::algorithm;\n+\n+CScript ParseScript(std::string s)\n+{\n+    CScript result;\n+\n+    static map<string, opcodetype> mapOpNames;\n+\n+    if (mapOpNames.size() == 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14096073",
      "id" : 14096073,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDk2MDcz",
      "original_commit_id" : "480ec93fbbd6e1d973c712168397a988c9b41cb2",
      "original_line" : null,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/core_read.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14096073/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14096073",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14096128"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14096128"
         }
      },
      "author_association" : "MEMBER",
      "body" : "opcodetype for clarity?\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-06-23T19:52:21Z",
      "diff_hunk" : "@@ -0,0 +1,100 @@\n+\n+#include \"core_io.h\"\n+#include \"core.h\"\n+#include \"script.h\"\n+\n+#include <boost/assign/list_of.hpp>\n+#include <boost/algorithm/string/classification.hpp>\n+#include <boost/algorithm/string/predicate.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <boost/algorithm/string/replace.hpp>\n+\n+using namespace std;\n+using namespace boost;\n+using namespace boost::algorithm;\n+\n+CScript ParseScript(std::string s)\n+{\n+    CScript result;\n+\n+    static map<string, opcodetype> mapOpNames;\n+\n+    if (mapOpNames.size() == 0)\n+    {\n+        for (int op = 0; op <= OP_NOP10; op++)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14096128",
      "id" : 14096128,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDk2MTI4",
      "original_commit_id" : "480ec93fbbd6e1d973c712168397a988c9b41cb2",
      "original_line" : null,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/core_read.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14096128/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14096128",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14096698"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14096698"
         }
      },
      "author_association" : "MEMBER",
      "body" : "... && w.size() >= 2 && IsHex ...\nsanity needed?\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-06-23T20:02:12Z",
      "diff_hunk" : "@@ -0,0 +1,100 @@\n+\n+#include \"core_io.h\"\n+#include \"core.h\"\n+#include \"script.h\"\n+\n+#include <boost/assign/list_of.hpp>\n+#include <boost/algorithm/string/classification.hpp>\n+#include <boost/algorithm/string/predicate.hpp>\n+#include <boost/algorithm/string/split.hpp>\n+#include <boost/algorithm/string/replace.hpp>\n+\n+using namespace std;\n+using namespace boost;\n+using namespace boost::algorithm;\n+\n+CScript ParseScript(std::string s)\n+{\n+    CScript result;\n+\n+    static map<string, opcodetype> mapOpNames;\n+\n+    if (mapOpNames.size() == 0)\n+    {\n+        for (int op = 0; op <= OP_NOP10; op++)\n+        {\n+            // Allow OP_RESERVED to get into mapOpNames\n+            if (op < OP_NOP && op != OP_RESERVED)\n+                continue;\n+\n+            const char* name = GetOpName((opcodetype)op);\n+            if (strcmp(name, \"OP_UNKNOWN\") == 0)\n+                continue;\n+            string strName(name);\n+            mapOpNames[strName] = (opcodetype)op;\n+            // Convenience: OP_ADD and just ADD are both recognized:\n+            replace_first(strName, \"OP_\", \"\");\n+            mapOpNames[strName] = (opcodetype)op;\n+        }\n+    }\n+\n+    vector<string> words;\n+    split(words, s, is_any_of(\" \\t\\n\"), token_compress_on);\n+\n+    BOOST_FOREACH(string w, words)\n+    {\n+        if (w.size() == 0)\n+        {\n+            // Empty string, ignore. (boost::split given '' will return one word)\n+        }\n+        else if (all(w, is_digit()) ||\n+            (starts_with(w, \"-\") && all(string(w.begin()+1, w.end()), is_digit())))\n+        {\n+            // Number\n+            int64_t n = atoi64(w);\n+            result << n;\n+        }\n+        else if (starts_with(w, \"0x\") && IsHex(string(w.begin()+2, w.end())))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14096698",
      "id" : 14096698,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDk2Njk4",
      "original_commit_id" : "480ec93fbbd6e1d973c712168397a988c9b41cb2",
      "original_line" : null,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "src/core_read.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14096698/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14096698",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14098067"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14098067"
         }
      },
      "author_association" : "MEMBER",
      "body" : "why not just use a const iterator here?\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-06-23T20:28:46Z",
      "diff_hunk" : "@@ -0,0 +1,88 @@\n+\n+#include <vector>\n+#include \"core_io.h\"\n+#include \"univalue.h\"\n+#include \"script.h\"\n+#include \"core.h\"\n+#include \"base58.h\"\n+\n+using namespace std;\n+\n+string EncodeHexTx(const CTransaction& tx)\n+{\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << tx;\n+    return HexStr(ssTx.begin(), ssTx.end());\n+}\n+\n+void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n+                        UniValue& out, bool fIncludeHex)\n+{\n+    txnouttype type;\n+    vector<CTxDestination> addresses;\n+    int nRequired;\n+\n+    out.pushKV(\"asm\", scriptPubKey.ToString());\n+    if (fIncludeHex)\n+        out.pushKV(\"hex\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+\n+    if (!ExtractDestinations(scriptPubKey, type, addresses, nRequired))\n+    {\n+        out.pushKV(\"type\", GetTxnOutputType(type));\n+        return;\n+    }\n+\n+    out.pushKV(\"reqSigs\", nRequired);\n+    out.pushKV(\"type\", GetTxnOutputType(type));\n+\n+    UniValue a(UniValue::VARR);\n+    BOOST_FOREACH(const CTxDestination& addr, addresses)\n+        a.push(CBitcoinAddress(addr).ToString());\n+    out.pushKV(\"addresses\", a);\n+}\n+\n+void TxToUniv(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n+{\n+    entry.pushKV(\"txid\", tx.GetHash().GetHex());\n+    entry.pushKV(\"version\", tx.nVersion);\n+    entry.pushKV(\"locktime\", (int64_t)tx.nLockTime);\n+\n+    UniValue vin(UniValue::VARR);\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14098067",
      "id" : 14098067,
      "line" : 52,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDk4MDY3",
      "original_commit_id" : "480ec93fbbd6e1d973c712168397a988c9b41cb2",
      "original_line" : null,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/core_write.cpp",
      "position" : 52,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14098067/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14098067",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14098121"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14098121"
         }
      },
      "author_association" : "MEMBER",
      "body" : "const iterator would make this a good bit easier to read too, imo. std::distance to get the old 'i' value.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-06-23T20:29:52Z",
      "diff_hunk" : "@@ -0,0 +1,88 @@\n+\n+#include <vector>\n+#include \"core_io.h\"\n+#include \"univalue.h\"\n+#include \"script.h\"\n+#include \"core.h\"\n+#include \"base58.h\"\n+\n+using namespace std;\n+\n+string EncodeHexTx(const CTransaction& tx)\n+{\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << tx;\n+    return HexStr(ssTx.begin(), ssTx.end());\n+}\n+\n+void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n+                        UniValue& out, bool fIncludeHex)\n+{\n+    txnouttype type;\n+    vector<CTxDestination> addresses;\n+    int nRequired;\n+\n+    out.pushKV(\"asm\", scriptPubKey.ToString());\n+    if (fIncludeHex)\n+        out.pushKV(\"hex\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+\n+    if (!ExtractDestinations(scriptPubKey, type, addresses, nRequired))\n+    {\n+        out.pushKV(\"type\", GetTxnOutputType(type));\n+        return;\n+    }\n+\n+    out.pushKV(\"reqSigs\", nRequired);\n+    out.pushKV(\"type\", GetTxnOutputType(type));\n+\n+    UniValue a(UniValue::VARR);\n+    BOOST_FOREACH(const CTxDestination& addr, addresses)\n+        a.push(CBitcoinAddress(addr).ToString());\n+    out.pushKV(\"addresses\", a);\n+}\n+\n+void TxToUniv(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n+{\n+    entry.pushKV(\"txid\", tx.GetHash().GetHex());\n+    entry.pushKV(\"version\", tx.nVersion);\n+    entry.pushKV(\"locktime\", (int64_t)tx.nLockTime);\n+\n+    UniValue vin(UniValue::VARR);\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+        UniValue in(UniValue::VOBJ);\n+        if (tx.IsCoinBase())\n+            in.pushKV(\"coinbase\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n+        else {\n+            in.pushKV(\"txid\", txin.prevout.hash.GetHex());\n+            in.pushKV(\"vout\", (int64_t)txin.prevout.n);\n+            UniValue o(UniValue::VOBJ);\n+            o.pushKV(\"asm\", txin.scriptSig.ToString());\n+            o.pushKV(\"hex\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n+            in.pushKV(\"scriptSig\", o);\n+        }\n+        in.pushKV(\"sequence\", (int64_t)txin.nSequence);\n+        vin.push(in);\n+    }\n+    entry.pushKV(\"vin\", vin);\n+\n+    UniValue vout(UniValue::VARR);\n+    for (unsigned int i = 0; i < tx.vout.size(); i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14098121",
      "id" : 14098121,
      "line" : 70,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MDk4MTIx",
      "original_commit_id" : "480ec93fbbd6e1d973c712168397a988c9b41cb2",
      "original_line" : null,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/core_write.cpp",
      "position" : 70,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14098121/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14098121",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased for CMutableTransaction, and promoting code movement commits above others for better reviewing and merging.\n",
      "created_at" : "2014-06-24T03:32:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-46928644",
      "id" : 46928644,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ2OTI4NjQ0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46928644/reactions"
      },
      "updated_at" : "2014-06-24T03:32:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/46928644",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated for @theuni 's feedback.\n\nFor some odd reason, the recent feedback from @sipa cannot be found.  I recall the \"{\" style nits.  I think there was something else too?\n",
      "created_at" : "2014-06-25T15:37:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-47118531",
      "id" : 47118531,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3MTE4NTMx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/47118531/reactions"
      },
      "updated_at" : "2014-06-25T15:37:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/47118531",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased for merge.  Added PR dependency #4415 \n",
      "created_at" : "2014-06-26T01:15:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-47178133",
      "id" : 47178133,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3MTc4MTMz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/47178133/reactions"
      },
      "updated_at" : "2014-06-26T01:15:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/47178133",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This has one remaining FIXME blocking wider whole-tree use of UniValue, but that is not a blocker for merging this PR.\n\nI _think_ all feedback from @theuni and @sipa has been addressed.  I cannot find the @laanwj feedback; @laanwj can you recall your comments?\n",
      "created_at" : "2014-06-29T15:06:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-47457265",
      "id" : 47457265,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NDU3MjY1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/47457265/reactions"
      },
      "updated_at" : "2014-06-29T15:06:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/47457265",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jgarzik I'd like univalue\\* in separate directory inside src, as it is an independent library like crypto and the current json. it doesn't need any of the bitcoin objects.\n",
      "created_at" : "2014-06-29T15:14:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-47457496",
      "id" : 47457496,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NDU3NDk2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/47457496/reactions"
      },
      "updated_at" : "2014-06-29T15:14:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/47457496",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14329984"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14329984"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd rather not see big \"convert the entire internal structure to some map/vector type\" methods. They don't add anything, as the caller (or whoever you're passing the map/vector to) still needs a dependency on UniValue, so they might as well use UniValue's own accessor methods (operator[], ... maybe UniValue needs iterators for the array case).\n\nThe only place where they seem actually used is as a type-check, where is\\* instead of get\\* could be used.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-06-29T15:34:54Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef __UNIVALUE_H__\n+#define __UNIVALUE_H__\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+#include <map>\n+#include <cassert>\n+\n+class UniValue {\n+public:\n+    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n+\n+    UniValue() { typ = VNULL; }\n+    UniValue(UniValue::VType initialType, const std::string& initialStr = \"\") {\n+        typ = initialType;\n+        val = initialStr;\n+    }\n+    UniValue(uint64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(int64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(int val_) {\n+        setInt(val_);\n+    }\n+    UniValue(double val_) {\n+        setFloat(val_);\n+    }\n+    UniValue(const std::string& val_) {\n+        setStr(val_);\n+    }\n+    UniValue(const char *val_) {\n+        std::string s(val_);\n+        setStr(s);\n+    }\n+    ~UniValue() {}\n+\n+    void clear();\n+\n+    bool setNull();\n+    bool setBool(bool val);\n+    bool setNumStr(const std::string& val);\n+    bool setInt(uint64_t val);\n+    bool setInt(int64_t val);\n+    bool setInt(int val) { return setInt((int64_t)val); }\n+    bool setFloat(double val);\n+    bool setStr(const std::string& val);\n+    bool setArray();\n+    bool setObject();\n+\n+    enum VType getType() const { return typ; }\n+    std::string getValStr() const { return val; }\n+    bool empty() const { return (values.size() == 0); }\n+\n+    size_t size() const {\n+        switch (typ) {\n+        case VNULL:\n+            return 0;\n+\n+        case VBOOL:\n+            return 1;\n+\n+        case VOBJ:\n+        case VARR:\n+            return values.size();\n+\n+        case VSTR:\n+        case VNUM:\n+            return val.size();\n+        }\n+\n+        // not reached\n+        return 0;\n+    }\n+\n+    bool getBool() const { return isTrue(); }\n+    bool getArray(std::vector<UniValue>& arr);\n+    bool getObject(std::map<std::string,UniValue>& obj);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r14329984",
      "id" : 14329984,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0MzI5OTg0",
      "original_commit_id" : "2c757a69ab207da740112b9496c87a222b02dbd7",
      "original_line" : null,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/univalue.h",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14329984/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/14329984",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "+1 on moving to a separate source directory.\n",
      "created_at" : "2014-06-29T15:36:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-47458130",
      "id" : 47458130,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NDU4MTMw",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/47458130/reactions"
      },
      "updated_at" : "2014-06-29T15:36:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/47458130",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Univalue moved into separate source directory univalue/\n",
      "created_at" : "2014-07-16T19:01:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-49211220",
      "id" : 49211220,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5MjExMjIw",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49211220/reactions"
      },
      "updated_at" : "2014-07-16T19:01:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49211220",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "nits addressed.\n",
      "created_at" : "2014-07-18T18:30:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-49464397",
      "id" : 49464397,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5NDY0Mzk3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49464397/reactions"
      },
      "updated_at" : "2014-07-18T18:30:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49464397",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15275401"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15275401"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@theuni I don't agree std::distance is better, it's much less known, and has O(N) complexity for any container that's not random access which would be terrible in a loop. It's a pity that C++ doesn't have Python's enumerate() that returns both the object and index.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-23T08:02:02Z",
      "diff_hunk" : "@@ -0,0 +1,88 @@\n+\n+#include <vector>\n+#include \"core_io.h\"\n+#include \"univalue.h\"\n+#include \"script.h\"\n+#include \"core.h\"\n+#include \"base58.h\"\n+\n+using namespace std;\n+\n+string EncodeHexTx(const CTransaction& tx)\n+{\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << tx;\n+    return HexStr(ssTx.begin(), ssTx.end());\n+}\n+\n+void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n+                        UniValue& out, bool fIncludeHex)\n+{\n+    txnouttype type;\n+    vector<CTxDestination> addresses;\n+    int nRequired;\n+\n+    out.pushKV(\"asm\", scriptPubKey.ToString());\n+    if (fIncludeHex)\n+        out.pushKV(\"hex\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+\n+    if (!ExtractDestinations(scriptPubKey, type, addresses, nRequired))\n+    {\n+        out.pushKV(\"type\", GetTxnOutputType(type));\n+        return;\n+    }\n+\n+    out.pushKV(\"reqSigs\", nRequired);\n+    out.pushKV(\"type\", GetTxnOutputType(type));\n+\n+    UniValue a(UniValue::VARR);\n+    BOOST_FOREACH(const CTxDestination& addr, addresses)\n+        a.push(CBitcoinAddress(addr).ToString());\n+    out.pushKV(\"addresses\", a);\n+}\n+\n+void TxToUniv(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n+{\n+    entry.pushKV(\"txid\", tx.GetHash().GetHex());\n+    entry.pushKV(\"version\", tx.nVersion);\n+    entry.pushKV(\"locktime\", (int64_t)tx.nLockTime);\n+\n+    UniValue vin(UniValue::VARR);\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+        UniValue in(UniValue::VOBJ);\n+        if (tx.IsCoinBase())\n+            in.pushKV(\"coinbase\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n+        else {\n+            in.pushKV(\"txid\", txin.prevout.hash.GetHex());\n+            in.pushKV(\"vout\", (int64_t)txin.prevout.n);\n+            UniValue o(UniValue::VOBJ);\n+            o.pushKV(\"asm\", txin.scriptSig.ToString());\n+            o.pushKV(\"hex\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n+            in.pushKV(\"scriptSig\", o);\n+        }\n+        in.pushKV(\"sequence\", (int64_t)txin.nSequence);\n+        vin.push(in);\n+    }\n+    entry.pushKV(\"vin\", vin);\n+\n+    UniValue vout(UniValue::VARR);\n+    for (unsigned int i = 0; i < tx.vout.size(); i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15275401",
      "id" : 15275401,
      "line" : 70,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Mjc1NDAx",
      "original_commit_id" : "480ec93fbbd6e1d973c712168397a988c9b41cb2",
      "original_line" : null,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/core_write.cpp",
      "position" : 70,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15275401/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15275401",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK. I think it's time to merge this. It compiles for Linux, MacOSX and Windows and works in at least Linux and Windows (tested summarily).\n\nWe do need unit tests for univalue, as well as tests invoking the new `bitcoin-tx` utility, but this can be done in a later pull.\n",
      "created_at" : "2014-07-23T10:32:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-49857436",
      "id" : 49857436,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5ODU3NDM2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49857436/reactions"
      },
      "updated_at" : "2014-07-23T10:32:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/49857436",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15297907"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15297907"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@laanwj Sure, it was just a quick suggestion to help with readability.\n\nFor the sake of discussion: this iterator is random access, so it'd be a constant complexity. Imo it's good practice to use iterators when looping through a container and touching each (non-primitive) element. The life-cycle and validity semantics are more clear to the reader, and the const_iterator would make its purpose explicit. I'll agree that std::distance is a bit obscure, so a separate incrementor would've probably been a better suggestion here.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-23T16:18:26Z",
      "diff_hunk" : "@@ -0,0 +1,88 @@\n+\n+#include <vector>\n+#include \"core_io.h\"\n+#include \"univalue.h\"\n+#include \"script.h\"\n+#include \"core.h\"\n+#include \"base58.h\"\n+\n+using namespace std;\n+\n+string EncodeHexTx(const CTransaction& tx)\n+{\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << tx;\n+    return HexStr(ssTx.begin(), ssTx.end());\n+}\n+\n+void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n+                        UniValue& out, bool fIncludeHex)\n+{\n+    txnouttype type;\n+    vector<CTxDestination> addresses;\n+    int nRequired;\n+\n+    out.pushKV(\"asm\", scriptPubKey.ToString());\n+    if (fIncludeHex)\n+        out.pushKV(\"hex\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+\n+    if (!ExtractDestinations(scriptPubKey, type, addresses, nRequired))\n+    {\n+        out.pushKV(\"type\", GetTxnOutputType(type));\n+        return;\n+    }\n+\n+    out.pushKV(\"reqSigs\", nRequired);\n+    out.pushKV(\"type\", GetTxnOutputType(type));\n+\n+    UniValue a(UniValue::VARR);\n+    BOOST_FOREACH(const CTxDestination& addr, addresses)\n+        a.push(CBitcoinAddress(addr).ToString());\n+    out.pushKV(\"addresses\", a);\n+}\n+\n+void TxToUniv(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n+{\n+    entry.pushKV(\"txid\", tx.GetHash().GetHex());\n+    entry.pushKV(\"version\", tx.nVersion);\n+    entry.pushKV(\"locktime\", (int64_t)tx.nLockTime);\n+\n+    UniValue vin(UniValue::VARR);\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+        UniValue in(UniValue::VOBJ);\n+        if (tx.IsCoinBase())\n+            in.pushKV(\"coinbase\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n+        else {\n+            in.pushKV(\"txid\", txin.prevout.hash.GetHex());\n+            in.pushKV(\"vout\", (int64_t)txin.prevout.n);\n+            UniValue o(UniValue::VOBJ);\n+            o.pushKV(\"asm\", txin.scriptSig.ToString());\n+            o.pushKV(\"hex\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n+            in.pushKV(\"scriptSig\", o);\n+        }\n+        in.pushKV(\"sequence\", (int64_t)txin.nSequence);\n+        vin.push(in);\n+    }\n+    entry.pushKV(\"vin\", vin);\n+\n+    UniValue vout(UniValue::VARR);\n+    for (unsigned int i = 0; i < tx.vout.size(); i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15297907",
      "id" : 15297907,
      "line" : 70,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1Mjk3OTA3",
      "original_commit_id" : "480ec93fbbd6e1d973c712168397a988c9b41cb2",
      "original_line" : null,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/core_write.cpp",
      "position" : 70,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15297907/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15297907",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sipa, @theuni, can we have a last ACK here?\n",
      "created_at" : "2014-07-25T09:08:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50125527",
      "id" : 50125527,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMTI1NTI3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50125527/reactions"
      },
      "updated_at" : "2014-07-25T09:08:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50125527",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15403704"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15403704"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The config includes shouldn't be needed, since univalue doesn't include bitcoin-config.h.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-25T14:38:20Z",
      "diff_hunk" : "@@ -177,6 +182,14 @@ crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/sha1.h \\\n   crypto/ripemd160.h\n \n+# univalue JSON library\n+univalue_libbitcoin_univalue_a_CPPFLAGS = $(BITCOIN_CONFIG_INCLUDES)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15403704",
      "id" : 15403704,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDAzNzA0",
      "original_commit_id" : "bbf0b9c9b27666828bf5ab4243e0a10c01b168cf",
      "original_line" : null,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/Makefile.am",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15403704/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15403704",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Build-side ACK after addressing that last note. The rest of my comments were just nits, so nothing to worry about.\n\nSide-note: Great job adding univalue as a dependency-less lib!\n",
      "created_at" : "2014-07-25T14:40:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50158617",
      "id" : 50158617,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMTU4NjE3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50158617/reactions"
      },
      "updated_at" : "2014-07-25T14:40:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50158617",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15404329"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15404329"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Just tested to be 100% sure, removing it is fine.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-25T14:49:24Z",
      "diff_hunk" : "@@ -177,6 +182,14 @@ crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/sha1.h \\\n   crypto/ripemd160.h\n \n+# univalue JSON library\n+univalue_libbitcoin_univalue_a_CPPFLAGS = $(BITCOIN_CONFIG_INCLUDES)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15404329",
      "id" : 15404329,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDA0MzI5",
      "original_commit_id" : "bbf0b9c9b27666828bf5ab4243e0a10c01b168cf",
      "original_line" : null,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/Makefile.am",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15404329/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15404329",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated for @theuni comment.\n",
      "created_at" : "2014-07-26T16:24:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50238971",
      "id" : 50238971,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMjM4OTcx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50238971/reactions"
      },
      "updated_at" : "2014-07-26T16:24:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50238971",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439831"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439831"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What are 'registers' in this context?\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-27T15:26:10Z",
      "diff_hunk" : "@@ -0,0 +1,580 @@\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"core.h\"\n+#include \"main.h\"         // for MAX_BLOCK_SIZE\n+#include \"keystore.h\"\n+#include \"ui_interface.h\" // for _(...)\n+#include \"univalue/univalue.h\"\n+#include \"core_io.h\"\n+\n+#include <stdio.h>\n+#include <boost/assign/list_of.hpp>\n+\n+using namespace std;\n+using namespace boost::assign;\n+\n+static bool fCreateBlank;\n+static map<string,UniValue> registers;\n+CClientUIInterface uiInterface;\n+\n+static bool AppInitRawTx(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    ParseParameters(argc, argv);\n+\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n+\n+    fCreateBlank = GetBoolArg(\"-create\", false);\n+\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = _(\"Bitcoin Core bitcoin-tx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+            _(\"Usage:\") + \"\\n\" +\n+              \"  bitcoin-tx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"  bitcoin-tx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Options:\") + \"\\n\";\n+        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n+        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n+        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n+        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n+        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n+        strUsage += \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+\n+        strUsage = _(\"Commands:\") + \"\\n\";\n+        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n+        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n+        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n+        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n+        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n+        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n+        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n+        strUsage += \"  sign=SIGHASH-FLAGS     \" + _(\"Add zero or more signatures to transaction\") + \"\\n\";\n+        strUsage += \"      This command requires JSON registers:\\n\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439831",
      "id" : 15439831,
      "line" : 70,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDM5ODMx",
      "original_commit_id" : "c84972a67e278eea4a42951203d35ca7e25b65da",
      "original_line" : null,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/bitcoin-tx.cpp",
      "position" : 70,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439831/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439831",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439841"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439841"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "A (string key=JSON value) pair, whose name and JSON object are settable from the command line.\n\nIt is used to provide named parameters to some of the more complicated commands.\n\nYou can load register contents (the JSON value) from a file, or command line argv[] string.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-27T15:28:31Z",
      "diff_hunk" : "@@ -0,0 +1,580 @@\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"core.h\"\n+#include \"main.h\"         // for MAX_BLOCK_SIZE\n+#include \"keystore.h\"\n+#include \"ui_interface.h\" // for _(...)\n+#include \"univalue/univalue.h\"\n+#include \"core_io.h\"\n+\n+#include <stdio.h>\n+#include <boost/assign/list_of.hpp>\n+\n+using namespace std;\n+using namespace boost::assign;\n+\n+static bool fCreateBlank;\n+static map<string,UniValue> registers;\n+CClientUIInterface uiInterface;\n+\n+static bool AppInitRawTx(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    ParseParameters(argc, argv);\n+\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n+\n+    fCreateBlank = GetBoolArg(\"-create\", false);\n+\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = _(\"Bitcoin Core bitcoin-tx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+            _(\"Usage:\") + \"\\n\" +\n+              \"  bitcoin-tx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"  bitcoin-tx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Options:\") + \"\\n\";\n+        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n+        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n+        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n+        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n+        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n+        strUsage += \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+\n+        strUsage = _(\"Commands:\") + \"\\n\";\n+        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n+        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n+        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n+        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n+        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n+        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n+        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n+        strUsage += \"  sign=SIGHASH-FLAGS     \" + _(\"Add zero or more signatures to transaction\") + \"\\n\";\n+        strUsage += \"      This command requires JSON registers:\\n\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439841",
      "id" : 15439841,
      "line" : 70,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDM5ODQx",
      "original_commit_id" : "c84972a67e278eea4a42951203d35ca7e25b65da",
      "original_line" : null,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/bitcoin-tx.cpp",
      "position" : 70,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439841/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439841",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439852"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439852"
         }
      },
      "author_association" : "MEMBER",
      "body" : "VALUE:SCRIPT, I presume?\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-27T15:30:24Z",
      "diff_hunk" : "@@ -0,0 +1,580 @@\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"core.h\"\n+#include \"main.h\"         // for MAX_BLOCK_SIZE\n+#include \"keystore.h\"\n+#include \"ui_interface.h\" // for _(...)\n+#include \"univalue/univalue.h\"\n+#include \"core_io.h\"\n+\n+#include <stdio.h>\n+#include <boost/assign/list_of.hpp>\n+\n+using namespace std;\n+using namespace boost::assign;\n+\n+static bool fCreateBlank;\n+static map<string,UniValue> registers;\n+CClientUIInterface uiInterface;\n+\n+static bool AppInitRawTx(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    ParseParameters(argc, argv);\n+\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n+\n+    fCreateBlank = GetBoolArg(\"-create\", false);\n+\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = _(\"Bitcoin Core bitcoin-tx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+            _(\"Usage:\") + \"\\n\" +\n+              \"  bitcoin-tx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"  bitcoin-tx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Options:\") + \"\\n\";\n+        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n+        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n+        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n+        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n+        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n+        strUsage += \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+\n+        strUsage = _(\"Commands:\") + \"\\n\";\n+        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n+        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n+        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n+        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n+        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n+        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n+        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n+        strUsage += \"  sign=SIGHASH-FLAGS     \" + _(\"Add zero or more signatures to transaction\") + \"\\n\";\n+        strUsage += \"      This command requires JSON registers:\\n\";\n+        strUsage += \"      prevtxs=JSON object\\n\";\n+        strUsage += \"      privatekeys=JSON object\\n\";\n+        strUsage += \"      See signrawtransaction docs for format of sighash flags, JSON objects.\\n\";\n+        strUsage += \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Register Commands:\") + \"\\n\";\n+        strUsage += \"  load.NAME=FILE         \" + _(\"Load JSON file FILE into register NAME\") + \"\\n\";\n+        strUsage += \"  NAME=JSON-STRING       \" + _(\"Set register NAME to given JSON-STRING\") + \"\\n\";\n+        strUsage += \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        return false;\n+    }\n+    return true;\n+}\n+\n+static void RegisterSet(const string& key, const string& valStr)\n+{\n+    UniValue val;\n+    if (!val.read(valStr)) {\n+        string strErr = \"Cannot parse JSON for key \" + key;\n+        throw runtime_error(strErr);\n+    }\n+\n+    registers[key] = val;\n+}\n+\n+static void RegisterLoad(const string& key, const string& value)\n+{\n+    FILE *f = fopen(value.c_str(), \"r\");\n+    if (!f) {\n+        string strErr = \"Cannot open file \" + value;\n+        throw runtime_error(strErr);\n+    }\n+\n+    // load file chunks into one big buffer\n+    string valStr;\n+    while ((!feof(f)) && (!ferror(f))) {\n+        char buf[4096];\n+        int bread = fread(buf, 1, sizeof(buf), f);\n+        if (bread <= 0)\n+            break;\n+\n+        valStr.insert(valStr.size(), buf, bread);\n+    }\n+\n+    if (ferror(f)) {\n+        string strErr = \"Error reading file \" + value;\n+        throw runtime_error(strErr);\n+    }\n+\n+    fclose(f);\n+\n+    // evaluate as JSON buffer register\n+    RegisterSet(key, valStr);\n+}\n+\n+static void MutateTxVersion(CMutableTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newVersion = atoi64(cmdVal);\n+    if (newVersion < 1 || newVersion > CTransaction::CURRENT_VERSION)\n+        throw runtime_error(\"Invalid TX version requested\");\n+\n+    tx.nVersion = (int) newVersion;\n+}\n+\n+static void MutateTxLocktime(CMutableTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newLocktime = atoi64(cmdVal);\n+    if (newLocktime < 0LL || newLocktime > 0xffffffffLL)\n+        throw runtime_error(\"Invalid TX locktime requested\");\n+\n+    tx.nLockTime = (unsigned int) newLocktime;\n+}\n+\n+static void MutateTxAddInput(CMutableTransaction& tx, const string& strInput)\n+{\n+    // separate TXID:VOUT in string\n+    size_t pos = strInput.find(':');\n+    if ((pos == string::npos) ||\n+        (pos == 0) ||\n+        (pos == (strInput.size() - 1)))\n+        throw runtime_error(\"TX input missing separator\");\n+\n+    // extract and validate TXID\n+    string strTxid = strInput.substr(0, pos);\n+    if ((strTxid.size() != 64) || !IsHex(strTxid))\n+        throw runtime_error(\"invalid TX input txid\");\n+    uint256 txid(strTxid);\n+\n+    static const unsigned int minTxOutSz = 9;\n+    static const unsigned int maxVout = MAX_BLOCK_SIZE / minTxOutSz;\n+\n+    // extract and validate vout\n+    string strVout = strInput.substr(pos + 1, string::npos);\n+    int vout = atoi(strVout);\n+    if ((vout < 0) || (vout > (int)maxVout))\n+        throw runtime_error(\"invalid TX input vout\");\n+\n+    // append to transaction input list\n+    CTxIn txin(txid, vout);\n+    tx.vin.push_back(txin);\n+}\n+\n+static void MutateTxAddOutAddr(CMutableTransaction& tx, const string& strInput)\n+{\n+    // separate VALUE:ADDRESS in string\n+    size_t pos = strInput.find(':');\n+    if ((pos == string::npos) ||\n+        (pos == 0) ||\n+        (pos == (strInput.size() - 1)))\n+        throw runtime_error(\"TX output missing separator\");\n+\n+    // extract and validate VALUE\n+    string strValue = strInput.substr(0, pos);\n+    int64_t value;\n+    if (!ParseMoney(strValue, value))\n+        throw runtime_error(\"invalid TX output value\");\n+\n+    // extract and validate ADDRESS\n+    string strAddr = strInput.substr(pos + 1, string::npos);\n+    CBitcoinAddress addr(strAddr);\n+    if (!addr.IsValid())\n+        throw runtime_error(\"invalid TX output address\");\n+\n+    // build standard output script via SetDestination()\n+    CScript scriptPubKey;\n+    scriptPubKey.SetDestination(addr.Get());\n+\n+    // construct TxOut, append to transaction output list\n+    CTxOut txout(value, scriptPubKey);\n+    tx.vout.push_back(txout);\n+}\n+\n+static void MutateTxAddOutScript(CMutableTransaction& tx, const string& strInput)\n+{\n+    // separate VALUE:ADDRESS in string",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439852",
      "id" : 15439852,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDM5ODUy",
      "original_commit_id" : "c84972a67e278eea4a42951203d35ca7e25b65da",
      "original_line" : null,
      "original_position" : 208,
      "original_start_line" : null,
      "path" : "src/bitcoin-tx.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439852/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439852",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439860"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439860"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Never mind!\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-27T15:32:26Z",
      "diff_hunk" : "@@ -0,0 +1,580 @@\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"core.h\"\n+#include \"main.h\"         // for MAX_BLOCK_SIZE\n+#include \"keystore.h\"\n+#include \"ui_interface.h\" // for _(...)\n+#include \"univalue/univalue.h\"\n+#include \"core_io.h\"\n+\n+#include <stdio.h>\n+#include <boost/assign/list_of.hpp>\n+\n+using namespace std;\n+using namespace boost::assign;\n+\n+static bool fCreateBlank;\n+static map<string,UniValue> registers;\n+CClientUIInterface uiInterface;\n+\n+static bool AppInitRawTx(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    ParseParameters(argc, argv);\n+\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n+\n+    fCreateBlank = GetBoolArg(\"-create\", false);\n+\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = _(\"Bitcoin Core bitcoin-tx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+            _(\"Usage:\") + \"\\n\" +\n+              \"  bitcoin-tx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"  bitcoin-tx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Options:\") + \"\\n\";\n+        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n+        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n+        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n+        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n+        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n+        strUsage += \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+\n+        strUsage = _(\"Commands:\") + \"\\n\";\n+        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n+        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n+        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n+        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n+        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n+        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n+        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n+        strUsage += \"  sign=SIGHASH-FLAGS     \" + _(\"Add zero or more signatures to transaction\") + \"\\n\";\n+        strUsage += \"      This command requires JSON registers:\\n\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439860",
      "id" : 15439860,
      "line" : 70,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDM5ODYw",
      "original_commit_id" : "c84972a67e278eea4a42951203d35ca7e25b65da",
      "original_line" : null,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/bitcoin-tx.cpp",
      "position" : 70,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439860/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439860",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439861"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439861"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Suggest other syntax: load=file:FILE. \"file:X\" is never valid JSON anyway.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-27T15:33:34Z",
      "diff_hunk" : "@@ -0,0 +1,580 @@\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"core.h\"\n+#include \"main.h\"         // for MAX_BLOCK_SIZE\n+#include \"keystore.h\"\n+#include \"ui_interface.h\" // for _(...)\n+#include \"univalue/univalue.h\"\n+#include \"core_io.h\"\n+\n+#include <stdio.h>\n+#include <boost/assign/list_of.hpp>\n+\n+using namespace std;\n+using namespace boost::assign;\n+\n+static bool fCreateBlank;\n+static map<string,UniValue> registers;\n+CClientUIInterface uiInterface;\n+\n+static bool AppInitRawTx(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    ParseParameters(argc, argv);\n+\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n+\n+    fCreateBlank = GetBoolArg(\"-create\", false);\n+\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = _(\"Bitcoin Core bitcoin-tx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+            _(\"Usage:\") + \"\\n\" +\n+              \"  bitcoin-tx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"  bitcoin-tx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Options:\") + \"\\n\";\n+        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n+        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n+        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n+        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n+        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n+        strUsage += \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+\n+        strUsage = _(\"Commands:\") + \"\\n\";\n+        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n+        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n+        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n+        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n+        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n+        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n+        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n+        strUsage += \"  sign=SIGHASH-FLAGS     \" + _(\"Add zero or more signatures to transaction\") + \"\\n\";\n+        strUsage += \"      This command requires JSON registers:\\n\";\n+        strUsage += \"      prevtxs=JSON object\\n\";\n+        strUsage += \"      privatekeys=JSON object\\n\";\n+        strUsage += \"      See signrawtransaction docs for format of sighash flags, JSON objects.\\n\";\n+        strUsage += \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Register Commands:\") + \"\\n\";\n+        strUsage += \"  load.NAME=FILE         \" + _(\"Load JSON file FILE into register NAME\") + \"\\n\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439861",
      "id" : 15439861,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDM5ODYx",
      "original_commit_id" : "c84972a67e278eea4a42951203d35ca7e25b65da",
      "original_line" : null,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/bitcoin-tx.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439861/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439861",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439880"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439880"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If you pass that uint256 by reference, you can drop the #include \"uint256.h\" and turn it into a forward declaration.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-27T15:36:29Z",
      "diff_hunk" : "@@ -0,0 +1,23 @@\n+#ifndef __BITCOIN_CORE_IO_H__\n+#define __BITCOIN_CORE_IO_H__\n+\n+#include <string>\n+#include \"uint256.h\"\n+\n+class CScript;\n+class CTransaction;\n+class UniValue;\n+\n+// core_read.cpp\n+extern CScript ParseScript(std::string s);\n+extern bool DecodeHexTx(CTransaction& tx, const std::string& strHexTx);\n+extern uint256 ParseHashUV(const UniValue& v, const std::string& strName);\n+extern std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName);\n+\n+// core_write.cpp\n+extern std::string EncodeHexTx(const CTransaction& tx);\n+extern void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n+                        UniValue& out, bool fIncludeHex);\n+extern void TxToUniv(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439880",
      "id" : 15439880,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDM5ODgw",
      "original_commit_id" : "c84972a67e278eea4a42951203d35ca7e25b65da",
      "original_line" : null,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/core_io.h",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439880/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439880",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439903"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439903"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why do you need to copy the entire internal map? You can use prevTxs[previdx] directly as a map (with its operator[]).\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-27T15:39:48Z",
      "diff_hunk" : "@@ -0,0 +1,580 @@\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"core.h\"\n+#include \"main.h\"         // for MAX_BLOCK_SIZE\n+#include \"keystore.h\"\n+#include \"ui_interface.h\" // for _(...)\n+#include \"univalue/univalue.h\"\n+#include \"core_io.h\"\n+\n+#include <stdio.h>\n+#include <boost/assign/list_of.hpp>\n+\n+using namespace std;\n+using namespace boost::assign;\n+\n+static bool fCreateBlank;\n+static map<string,UniValue> registers;\n+CClientUIInterface uiInterface;\n+\n+static bool AppInitRawTx(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    ParseParameters(argc, argv);\n+\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n+\n+    fCreateBlank = GetBoolArg(\"-create\", false);\n+\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = _(\"Bitcoin Core bitcoin-tx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+            _(\"Usage:\") + \"\\n\" +\n+              \"  bitcoin-tx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"  bitcoin-tx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Options:\") + \"\\n\";\n+        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n+        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n+        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n+        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n+        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n+        strUsage += \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+\n+        strUsage = _(\"Commands:\") + \"\\n\";\n+        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n+        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n+        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n+        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n+        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n+        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n+        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n+        strUsage += \"  sign=SIGHASH-FLAGS     \" + _(\"Add zero or more signatures to transaction\") + \"\\n\";\n+        strUsage += \"      This command requires JSON registers:\\n\";\n+        strUsage += \"      prevtxs=JSON object\\n\";\n+        strUsage += \"      privatekeys=JSON object\\n\";\n+        strUsage += \"      See signrawtransaction docs for format of sighash flags, JSON objects.\\n\";\n+        strUsage += \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Register Commands:\") + \"\\n\";\n+        strUsage += \"  load.NAME=FILE         \" + _(\"Load JSON file FILE into register NAME\") + \"\\n\";\n+        strUsage += \"  NAME=JSON-STRING       \" + _(\"Set register NAME to given JSON-STRING\") + \"\\n\";\n+        strUsage += \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        return false;\n+    }\n+    return true;\n+}\n+\n+static void RegisterSet(const string& key, const string& valStr)\n+{\n+    UniValue val;\n+    if (!val.read(valStr)) {\n+        string strErr = \"Cannot parse JSON for key \" + key;\n+        throw runtime_error(strErr);\n+    }\n+\n+    registers[key] = val;\n+}\n+\n+static void RegisterLoad(const string& key, const string& value)\n+{\n+    FILE *f = fopen(value.c_str(), \"r\");\n+    if (!f) {\n+        string strErr = \"Cannot open file \" + value;\n+        throw runtime_error(strErr);\n+    }\n+\n+    // load file chunks into one big buffer\n+    string valStr;\n+    while ((!feof(f)) && (!ferror(f))) {\n+        char buf[4096];\n+        int bread = fread(buf, 1, sizeof(buf), f);\n+        if (bread <= 0)\n+            break;\n+\n+        valStr.insert(valStr.size(), buf, bread);\n+    }\n+\n+    if (ferror(f)) {\n+        string strErr = \"Error reading file \" + value;\n+        throw runtime_error(strErr);\n+    }\n+\n+    fclose(f);\n+\n+    // evaluate as JSON buffer register\n+    RegisterSet(key, valStr);\n+}\n+\n+static void MutateTxVersion(CMutableTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newVersion = atoi64(cmdVal);\n+    if (newVersion < 1 || newVersion > CTransaction::CURRENT_VERSION)\n+        throw runtime_error(\"Invalid TX version requested\");\n+\n+    tx.nVersion = (int) newVersion;\n+}\n+\n+static void MutateTxLocktime(CMutableTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newLocktime = atoi64(cmdVal);\n+    if (newLocktime < 0LL || newLocktime > 0xffffffffLL)\n+        throw runtime_error(\"Invalid TX locktime requested\");\n+\n+    tx.nLockTime = (unsigned int) newLocktime;\n+}\n+\n+static void MutateTxAddInput(CMutableTransaction& tx, const string& strInput)\n+{\n+    // separate TXID:VOUT in string\n+    size_t pos = strInput.find(':');\n+    if ((pos == string::npos) ||\n+        (pos == 0) ||\n+        (pos == (strInput.size() - 1)))\n+        throw runtime_error(\"TX input missing separator\");\n+\n+    // extract and validate TXID\n+    string strTxid = strInput.substr(0, pos);\n+    if ((strTxid.size() != 64) || !IsHex(strTxid))\n+        throw runtime_error(\"invalid TX input txid\");\n+    uint256 txid(strTxid);\n+\n+    static const unsigned int minTxOutSz = 9;\n+    static const unsigned int maxVout = MAX_BLOCK_SIZE / minTxOutSz;\n+\n+    // extract and validate vout\n+    string strVout = strInput.substr(pos + 1, string::npos);\n+    int vout = atoi(strVout);\n+    if ((vout < 0) || (vout > (int)maxVout))\n+        throw runtime_error(\"invalid TX input vout\");\n+\n+    // append to transaction input list\n+    CTxIn txin(txid, vout);\n+    tx.vin.push_back(txin);\n+}\n+\n+static void MutateTxAddOutAddr(CMutableTransaction& tx, const string& strInput)\n+{\n+    // separate VALUE:ADDRESS in string\n+    size_t pos = strInput.find(':');\n+    if ((pos == string::npos) ||\n+        (pos == 0) ||\n+        (pos == (strInput.size() - 1)))\n+        throw runtime_error(\"TX output missing separator\");\n+\n+    // extract and validate VALUE\n+    string strValue = strInput.substr(0, pos);\n+    int64_t value;\n+    if (!ParseMoney(strValue, value))\n+        throw runtime_error(\"invalid TX output value\");\n+\n+    // extract and validate ADDRESS\n+    string strAddr = strInput.substr(pos + 1, string::npos);\n+    CBitcoinAddress addr(strAddr);\n+    if (!addr.IsValid())\n+        throw runtime_error(\"invalid TX output address\");\n+\n+    // build standard output script via SetDestination()\n+    CScript scriptPubKey;\n+    scriptPubKey.SetDestination(addr.Get());\n+\n+    // construct TxOut, append to transaction output list\n+    CTxOut txout(value, scriptPubKey);\n+    tx.vout.push_back(txout);\n+}\n+\n+static void MutateTxAddOutScript(CMutableTransaction& tx, const string& strInput)\n+{\n+    // separate VALUE:ADDRESS in string\n+    size_t pos = strInput.find(':');\n+    if ((pos == string::npos) ||\n+        (pos == 0) ||\n+        (pos == (strInput.size() - 1)))\n+        throw runtime_error(\"TX output missing separator\");\n+\n+    // extract and validate VALUE\n+    string strValue = strInput.substr(0, pos);\n+    int64_t value;\n+    if (!ParseMoney(strValue, value))\n+        throw runtime_error(\"invalid TX output value\");\n+\n+    // extract and validate script\n+    string strScript = strInput.substr(pos + 1, string::npos);\n+    CScript scriptPubKey = ParseScript(strScript); // throws on err\n+\n+    // construct TxOut, append to transaction output list\n+    CTxOut txout(value, scriptPubKey);\n+    tx.vout.push_back(txout);\n+}\n+\n+static void MutateTxDelInput(CMutableTransaction& tx, const string& strInIdx)\n+{\n+    // parse requested deletion index\n+    int inIdx = atoi(strInIdx);\n+    if (inIdx < 0 || inIdx >= (int)tx.vin.size()) {\n+        string strErr = \"Invalid TX input index '\" + strInIdx + \"'\";\n+        throw runtime_error(strErr.c_str());\n+    }\n+\n+    // delete input from transaction\n+    tx.vin.erase(tx.vin.begin() + inIdx);\n+}\n+\n+static void MutateTxDelOutput(CMutableTransaction& tx, const string& strOutIdx)\n+{\n+    // parse requested deletion index\n+    int outIdx = atoi(strOutIdx);\n+    if (outIdx < 0 || outIdx >= (int)tx.vout.size()) {\n+        string strErr = \"Invalid TX output index '\" + strOutIdx + \"'\";\n+        throw runtime_error(strErr.c_str());\n+    }\n+\n+    // delete output from transaction\n+    tx.vout.erase(tx.vout.begin() + outIdx);\n+}\n+\n+static const unsigned int N_SIGHASH_OPTS = 6;\n+static const struct {\n+    const char *flagStr;\n+    int flags;\n+} sighashOptions[N_SIGHASH_OPTS] = {\n+    \"ALL\", SIGHASH_ALL,\n+    \"NONE\", SIGHASH_NONE,\n+    \"SINGLE\", SIGHASH_SINGLE,\n+    \"ALL|ANYONECANPAY\", SIGHASH_ALL|SIGHASH_ANYONECANPAY,\n+    \"NONE|ANYONECANPAY\", SIGHASH_NONE|SIGHASH_ANYONECANPAY,\n+    \"SINGLE|ANYONECANPAY\", SIGHASH_SINGLE|SIGHASH_ANYONECANPAY,\n+};\n+\n+static bool findSighashFlags(int& flags, const string& flagStr)\n+{\n+    flags = 0;\n+\n+    for (unsigned int i = 0; i < N_SIGHASH_OPTS; i++) {\n+        if (flagStr == sighashOptions[i].flagStr) {\n+            flags = sighashOptions[i].flags;\n+            return true;\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+uint256 ParseHashUO(map<string,UniValue>& o, string strKey)\n+{\n+    if (!o.count(strKey))\n+        return 0;\n+    return ParseHashUV(o[strKey], strKey);\n+}\n+\n+vector<unsigned char> ParseHexUO(map<string,UniValue>& o, string strKey)\n+{\n+    if (!o.count(strKey)) {\n+        vector<unsigned char> emptyVec;\n+        return emptyVec;\n+    }\n+    return ParseHexUV(o[strKey], strKey);\n+}\n+\n+static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n+{\n+    int nHashType = SIGHASH_ALL;\n+\n+    if (flagStr.size() > 0)\n+        if (!findSighashFlags(nHashType, flagStr))\n+            throw runtime_error(\"unknown sighash flag/sign option\");\n+\n+    vector<CTransaction> txVariants;\n+    txVariants.push_back(tx);\n+\n+    // mergedTx will end up with all the signatures; it\n+    // starts as a clone of the raw tx:\n+    CMutableTransaction mergedTx(txVariants[0]);\n+    bool fComplete = true;\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(viewDummy);\n+\n+    if (!registers.count(\"privatekeys\"))\n+        throw runtime_error(\"privatekeys register variable must be set.\");\n+    bool fGivenKeys = false;\n+    CBasicKeyStore tempKeystore;\n+    UniValue keysObj = registers[\"privatekeys\"];\n+    fGivenKeys = true;\n+\n+    vector<UniValue> keys;\n+    if (!keysObj.getArray(keys))\n+        throw runtime_error(\"privatekeys not an array\");\n+    for (unsigned int kidx = 0; kidx < keys.size(); kidx++) {\n+        if (!keys[kidx].isStr())\n+            throw runtime_error(\"privatekey not a string\");\n+        CBitcoinSecret vchSecret;\n+        bool fGood = vchSecret.SetString(keys[kidx].getValStr());\n+        if (!fGood)\n+            throw runtime_error(\"privatekey not valid\");\n+\n+        CKey key = vchSecret.GetKey();\n+        tempKeystore.AddKey(key);\n+    }\n+\n+    // Add previous txouts given in the RPC call:\n+    if (!registers.count(\"prevtxs\"))\n+        throw runtime_error(\"prevtxs register variable must be set.\");\n+    UniValue prevtxsObj = registers[\"privatekeys\"];\n+    {\n+        vector<UniValue> prevTxs;\n+        if (!prevtxsObj.getArray(prevTxs))\n+            throw runtime_error(\"prevtxs not an array\");\n+\n+        for (unsigned int previdx = 0; previdx < prevTxs.size(); previdx++) {\n+            map<string,UniValue> prevOut;\n+            if (!prevTxs[previdx].getObject(prevOut))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439903",
      "id" : 15439903,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDM5OTAz",
      "original_commit_id" : "c84972a67e278eea4a42951203d35ca7e25b65da",
      "original_line" : null,
      "original_position" : 350,
      "original_start_line" : null,
      "path" : "src/bitcoin-tx.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439903/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439903",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439912"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439912"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I mean: NAME=file:FILE.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-27T15:41:41Z",
      "diff_hunk" : "@@ -0,0 +1,580 @@\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"core.h\"\n+#include \"main.h\"         // for MAX_BLOCK_SIZE\n+#include \"keystore.h\"\n+#include \"ui_interface.h\" // for _(...)\n+#include \"univalue/univalue.h\"\n+#include \"core_io.h\"\n+\n+#include <stdio.h>\n+#include <boost/assign/list_of.hpp>\n+\n+using namespace std;\n+using namespace boost::assign;\n+\n+static bool fCreateBlank;\n+static map<string,UniValue> registers;\n+CClientUIInterface uiInterface;\n+\n+static bool AppInitRawTx(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    ParseParameters(argc, argv);\n+\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n+\n+    fCreateBlank = GetBoolArg(\"-create\", false);\n+\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = _(\"Bitcoin Core bitcoin-tx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+            _(\"Usage:\") + \"\\n\" +\n+              \"  bitcoin-tx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"  bitcoin-tx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Options:\") + \"\\n\";\n+        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n+        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n+        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n+        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n+        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n+        strUsage += \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+\n+        strUsage = _(\"Commands:\") + \"\\n\";\n+        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n+        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n+        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n+        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n+        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n+        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n+        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n+        strUsage += \"  sign=SIGHASH-FLAGS     \" + _(\"Add zero or more signatures to transaction\") + \"\\n\";\n+        strUsage += \"      This command requires JSON registers:\\n\";\n+        strUsage += \"      prevtxs=JSON object\\n\";\n+        strUsage += \"      privatekeys=JSON object\\n\";\n+        strUsage += \"      See signrawtransaction docs for format of sighash flags, JSON objects.\\n\";\n+        strUsage += \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Register Commands:\") + \"\\n\";\n+        strUsage += \"  load.NAME=FILE         \" + _(\"Load JSON file FILE into register NAME\") + \"\\n\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439912",
      "id" : 15439912,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDM5OTEy",
      "original_commit_id" : "c84972a67e278eea4a42951203d35ca7e25b65da",
      "original_line" : null,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/bitcoin-tx.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439912/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439912",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439982"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439982"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You can use keysObj directly here without copying to keys.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-27T15:54:35Z",
      "diff_hunk" : "@@ -0,0 +1,580 @@\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"core.h\"\n+#include \"main.h\"         // for MAX_BLOCK_SIZE\n+#include \"keystore.h\"\n+#include \"ui_interface.h\" // for _(...)\n+#include \"univalue/univalue.h\"\n+#include \"core_io.h\"\n+\n+#include <stdio.h>\n+#include <boost/assign/list_of.hpp>\n+\n+using namespace std;\n+using namespace boost::assign;\n+\n+static bool fCreateBlank;\n+static map<string,UniValue> registers;\n+CClientUIInterface uiInterface;\n+\n+static bool AppInitRawTx(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    ParseParameters(argc, argv);\n+\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n+\n+    fCreateBlank = GetBoolArg(\"-create\", false);\n+\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = _(\"Bitcoin Core bitcoin-tx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+            _(\"Usage:\") + \"\\n\" +\n+              \"  bitcoin-tx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"  bitcoin-tx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Options:\") + \"\\n\";\n+        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n+        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n+        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n+        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n+        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n+        strUsage += \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+\n+        strUsage = _(\"Commands:\") + \"\\n\";\n+        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n+        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n+        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n+        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n+        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n+        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n+        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n+        strUsage += \"  sign=SIGHASH-FLAGS     \" + _(\"Add zero or more signatures to transaction\") + \"\\n\";\n+        strUsage += \"      This command requires JSON registers:\\n\";\n+        strUsage += \"      prevtxs=JSON object\\n\";\n+        strUsage += \"      privatekeys=JSON object\\n\";\n+        strUsage += \"      See signrawtransaction docs for format of sighash flags, JSON objects.\\n\";\n+        strUsage += \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Register Commands:\") + \"\\n\";\n+        strUsage += \"  load.NAME=FILE         \" + _(\"Load JSON file FILE into register NAME\") + \"\\n\";\n+        strUsage += \"  NAME=JSON-STRING       \" + _(\"Set register NAME to given JSON-STRING\") + \"\\n\";\n+        strUsage += \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        return false;\n+    }\n+    return true;\n+}\n+\n+static void RegisterSet(const string& key, const string& valStr)\n+{\n+    UniValue val;\n+    if (!val.read(valStr)) {\n+        string strErr = \"Cannot parse JSON for key \" + key;\n+        throw runtime_error(strErr);\n+    }\n+\n+    registers[key] = val;\n+}\n+\n+static void RegisterLoad(const string& key, const string& value)\n+{\n+    FILE *f = fopen(value.c_str(), \"r\");\n+    if (!f) {\n+        string strErr = \"Cannot open file \" + value;\n+        throw runtime_error(strErr);\n+    }\n+\n+    // load file chunks into one big buffer\n+    string valStr;\n+    while ((!feof(f)) && (!ferror(f))) {\n+        char buf[4096];\n+        int bread = fread(buf, 1, sizeof(buf), f);\n+        if (bread <= 0)\n+            break;\n+\n+        valStr.insert(valStr.size(), buf, bread);\n+    }\n+\n+    if (ferror(f)) {\n+        string strErr = \"Error reading file \" + value;\n+        throw runtime_error(strErr);\n+    }\n+\n+    fclose(f);\n+\n+    // evaluate as JSON buffer register\n+    RegisterSet(key, valStr);\n+}\n+\n+static void MutateTxVersion(CMutableTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newVersion = atoi64(cmdVal);\n+    if (newVersion < 1 || newVersion > CTransaction::CURRENT_VERSION)\n+        throw runtime_error(\"Invalid TX version requested\");\n+\n+    tx.nVersion = (int) newVersion;\n+}\n+\n+static void MutateTxLocktime(CMutableTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newLocktime = atoi64(cmdVal);\n+    if (newLocktime < 0LL || newLocktime > 0xffffffffLL)\n+        throw runtime_error(\"Invalid TX locktime requested\");\n+\n+    tx.nLockTime = (unsigned int) newLocktime;\n+}\n+\n+static void MutateTxAddInput(CMutableTransaction& tx, const string& strInput)\n+{\n+    // separate TXID:VOUT in string\n+    size_t pos = strInput.find(':');\n+    if ((pos == string::npos) ||\n+        (pos == 0) ||\n+        (pos == (strInput.size() - 1)))\n+        throw runtime_error(\"TX input missing separator\");\n+\n+    // extract and validate TXID\n+    string strTxid = strInput.substr(0, pos);\n+    if ((strTxid.size() != 64) || !IsHex(strTxid))\n+        throw runtime_error(\"invalid TX input txid\");\n+    uint256 txid(strTxid);\n+\n+    static const unsigned int minTxOutSz = 9;\n+    static const unsigned int maxVout = MAX_BLOCK_SIZE / minTxOutSz;\n+\n+    // extract and validate vout\n+    string strVout = strInput.substr(pos + 1, string::npos);\n+    int vout = atoi(strVout);\n+    if ((vout < 0) || (vout > (int)maxVout))\n+        throw runtime_error(\"invalid TX input vout\");\n+\n+    // append to transaction input list\n+    CTxIn txin(txid, vout);\n+    tx.vin.push_back(txin);\n+}\n+\n+static void MutateTxAddOutAddr(CMutableTransaction& tx, const string& strInput)\n+{\n+    // separate VALUE:ADDRESS in string\n+    size_t pos = strInput.find(':');\n+    if ((pos == string::npos) ||\n+        (pos == 0) ||\n+        (pos == (strInput.size() - 1)))\n+        throw runtime_error(\"TX output missing separator\");\n+\n+    // extract and validate VALUE\n+    string strValue = strInput.substr(0, pos);\n+    int64_t value;\n+    if (!ParseMoney(strValue, value))\n+        throw runtime_error(\"invalid TX output value\");\n+\n+    // extract and validate ADDRESS\n+    string strAddr = strInput.substr(pos + 1, string::npos);\n+    CBitcoinAddress addr(strAddr);\n+    if (!addr.IsValid())\n+        throw runtime_error(\"invalid TX output address\");\n+\n+    // build standard output script via SetDestination()\n+    CScript scriptPubKey;\n+    scriptPubKey.SetDestination(addr.Get());\n+\n+    // construct TxOut, append to transaction output list\n+    CTxOut txout(value, scriptPubKey);\n+    tx.vout.push_back(txout);\n+}\n+\n+static void MutateTxAddOutScript(CMutableTransaction& tx, const string& strInput)\n+{\n+    // separate VALUE:ADDRESS in string\n+    size_t pos = strInput.find(':');\n+    if ((pos == string::npos) ||\n+        (pos == 0) ||\n+        (pos == (strInput.size() - 1)))\n+        throw runtime_error(\"TX output missing separator\");\n+\n+    // extract and validate VALUE\n+    string strValue = strInput.substr(0, pos);\n+    int64_t value;\n+    if (!ParseMoney(strValue, value))\n+        throw runtime_error(\"invalid TX output value\");\n+\n+    // extract and validate script\n+    string strScript = strInput.substr(pos + 1, string::npos);\n+    CScript scriptPubKey = ParseScript(strScript); // throws on err\n+\n+    // construct TxOut, append to transaction output list\n+    CTxOut txout(value, scriptPubKey);\n+    tx.vout.push_back(txout);\n+}\n+\n+static void MutateTxDelInput(CMutableTransaction& tx, const string& strInIdx)\n+{\n+    // parse requested deletion index\n+    int inIdx = atoi(strInIdx);\n+    if (inIdx < 0 || inIdx >= (int)tx.vin.size()) {\n+        string strErr = \"Invalid TX input index '\" + strInIdx + \"'\";\n+        throw runtime_error(strErr.c_str());\n+    }\n+\n+    // delete input from transaction\n+    tx.vin.erase(tx.vin.begin() + inIdx);\n+}\n+\n+static void MutateTxDelOutput(CMutableTransaction& tx, const string& strOutIdx)\n+{\n+    // parse requested deletion index\n+    int outIdx = atoi(strOutIdx);\n+    if (outIdx < 0 || outIdx >= (int)tx.vout.size()) {\n+        string strErr = \"Invalid TX output index '\" + strOutIdx + \"'\";\n+        throw runtime_error(strErr.c_str());\n+    }\n+\n+    // delete output from transaction\n+    tx.vout.erase(tx.vout.begin() + outIdx);\n+}\n+\n+static const unsigned int N_SIGHASH_OPTS = 6;\n+static const struct {\n+    const char *flagStr;\n+    int flags;\n+} sighashOptions[N_SIGHASH_OPTS] = {\n+    \"ALL\", SIGHASH_ALL,\n+    \"NONE\", SIGHASH_NONE,\n+    \"SINGLE\", SIGHASH_SINGLE,\n+    \"ALL|ANYONECANPAY\", SIGHASH_ALL|SIGHASH_ANYONECANPAY,\n+    \"NONE|ANYONECANPAY\", SIGHASH_NONE|SIGHASH_ANYONECANPAY,\n+    \"SINGLE|ANYONECANPAY\", SIGHASH_SINGLE|SIGHASH_ANYONECANPAY,\n+};\n+\n+static bool findSighashFlags(int& flags, const string& flagStr)\n+{\n+    flags = 0;\n+\n+    for (unsigned int i = 0; i < N_SIGHASH_OPTS; i++) {\n+        if (flagStr == sighashOptions[i].flagStr) {\n+            flags = sighashOptions[i].flags;\n+            return true;\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+uint256 ParseHashUO(map<string,UniValue>& o, string strKey)\n+{\n+    if (!o.count(strKey))\n+        return 0;\n+    return ParseHashUV(o[strKey], strKey);\n+}\n+\n+vector<unsigned char> ParseHexUO(map<string,UniValue>& o, string strKey)\n+{\n+    if (!o.count(strKey)) {\n+        vector<unsigned char> emptyVec;\n+        return emptyVec;\n+    }\n+    return ParseHexUV(o[strKey], strKey);\n+}\n+\n+static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n+{\n+    int nHashType = SIGHASH_ALL;\n+\n+    if (flagStr.size() > 0)\n+        if (!findSighashFlags(nHashType, flagStr))\n+            throw runtime_error(\"unknown sighash flag/sign option\");\n+\n+    vector<CTransaction> txVariants;\n+    txVariants.push_back(tx);\n+\n+    // mergedTx will end up with all the signatures; it\n+    // starts as a clone of the raw tx:\n+    CMutableTransaction mergedTx(txVariants[0]);\n+    bool fComplete = true;\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(viewDummy);\n+\n+    if (!registers.count(\"privatekeys\"))\n+        throw runtime_error(\"privatekeys register variable must be set.\");\n+    bool fGivenKeys = false;\n+    CBasicKeyStore tempKeystore;\n+    UniValue keysObj = registers[\"privatekeys\"];\n+    fGivenKeys = true;\n+\n+    vector<UniValue> keys;\n+    if (!keysObj.getArray(keys))\n+        throw runtime_error(\"privatekeys not an array\");\n+    for (unsigned int kidx = 0; kidx < keys.size(); kidx++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439982",
      "id" : 15439982,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDM5OTgy",
      "original_commit_id" : "c84972a67e278eea4a42951203d35ca7e25b65da",
      "original_line" : null,
      "original_position" : 327,
      "original_start_line" : null,
      "path" : "src/bitcoin-tx.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439982/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439982",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439984"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439984"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same here: no need to copy.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-27T15:55:06Z",
      "diff_hunk" : "@@ -0,0 +1,580 @@\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"core.h\"\n+#include \"main.h\"         // for MAX_BLOCK_SIZE\n+#include \"keystore.h\"\n+#include \"ui_interface.h\" // for _(...)\n+#include \"univalue/univalue.h\"\n+#include \"core_io.h\"\n+\n+#include <stdio.h>\n+#include <boost/assign/list_of.hpp>\n+\n+using namespace std;\n+using namespace boost::assign;\n+\n+static bool fCreateBlank;\n+static map<string,UniValue> registers;\n+CClientUIInterface uiInterface;\n+\n+static bool AppInitRawTx(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    ParseParameters(argc, argv);\n+\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n+\n+    fCreateBlank = GetBoolArg(\"-create\", false);\n+\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = _(\"Bitcoin Core bitcoin-tx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+            _(\"Usage:\") + \"\\n\" +\n+              \"  bitcoin-tx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"  bitcoin-tx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Options:\") + \"\\n\";\n+        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n+        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n+        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n+        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n+        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n+        strUsage += \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+\n+        strUsage = _(\"Commands:\") + \"\\n\";\n+        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n+        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n+        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n+        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n+        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n+        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n+        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n+        strUsage += \"  sign=SIGHASH-FLAGS     \" + _(\"Add zero or more signatures to transaction\") + \"\\n\";\n+        strUsage += \"      This command requires JSON registers:\\n\";\n+        strUsage += \"      prevtxs=JSON object\\n\";\n+        strUsage += \"      privatekeys=JSON object\\n\";\n+        strUsage += \"      See signrawtransaction docs for format of sighash flags, JSON objects.\\n\";\n+        strUsage += \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Register Commands:\") + \"\\n\";\n+        strUsage += \"  load.NAME=FILE         \" + _(\"Load JSON file FILE into register NAME\") + \"\\n\";\n+        strUsage += \"  NAME=JSON-STRING       \" + _(\"Set register NAME to given JSON-STRING\") + \"\\n\";\n+        strUsage += \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        return false;\n+    }\n+    return true;\n+}\n+\n+static void RegisterSet(const string& key, const string& valStr)\n+{\n+    UniValue val;\n+    if (!val.read(valStr)) {\n+        string strErr = \"Cannot parse JSON for key \" + key;\n+        throw runtime_error(strErr);\n+    }\n+\n+    registers[key] = val;\n+}\n+\n+static void RegisterLoad(const string& key, const string& value)\n+{\n+    FILE *f = fopen(value.c_str(), \"r\");\n+    if (!f) {\n+        string strErr = \"Cannot open file \" + value;\n+        throw runtime_error(strErr);\n+    }\n+\n+    // load file chunks into one big buffer\n+    string valStr;\n+    while ((!feof(f)) && (!ferror(f))) {\n+        char buf[4096];\n+        int bread = fread(buf, 1, sizeof(buf), f);\n+        if (bread <= 0)\n+            break;\n+\n+        valStr.insert(valStr.size(), buf, bread);\n+    }\n+\n+    if (ferror(f)) {\n+        string strErr = \"Error reading file \" + value;\n+        throw runtime_error(strErr);\n+    }\n+\n+    fclose(f);\n+\n+    // evaluate as JSON buffer register\n+    RegisterSet(key, valStr);\n+}\n+\n+static void MutateTxVersion(CMutableTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newVersion = atoi64(cmdVal);\n+    if (newVersion < 1 || newVersion > CTransaction::CURRENT_VERSION)\n+        throw runtime_error(\"Invalid TX version requested\");\n+\n+    tx.nVersion = (int) newVersion;\n+}\n+\n+static void MutateTxLocktime(CMutableTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newLocktime = atoi64(cmdVal);\n+    if (newLocktime < 0LL || newLocktime > 0xffffffffLL)\n+        throw runtime_error(\"Invalid TX locktime requested\");\n+\n+    tx.nLockTime = (unsigned int) newLocktime;\n+}\n+\n+static void MutateTxAddInput(CMutableTransaction& tx, const string& strInput)\n+{\n+    // separate TXID:VOUT in string\n+    size_t pos = strInput.find(':');\n+    if ((pos == string::npos) ||\n+        (pos == 0) ||\n+        (pos == (strInput.size() - 1)))\n+        throw runtime_error(\"TX input missing separator\");\n+\n+    // extract and validate TXID\n+    string strTxid = strInput.substr(0, pos);\n+    if ((strTxid.size() != 64) || !IsHex(strTxid))\n+        throw runtime_error(\"invalid TX input txid\");\n+    uint256 txid(strTxid);\n+\n+    static const unsigned int minTxOutSz = 9;\n+    static const unsigned int maxVout = MAX_BLOCK_SIZE / minTxOutSz;\n+\n+    // extract and validate vout\n+    string strVout = strInput.substr(pos + 1, string::npos);\n+    int vout = atoi(strVout);\n+    if ((vout < 0) || (vout > (int)maxVout))\n+        throw runtime_error(\"invalid TX input vout\");\n+\n+    // append to transaction input list\n+    CTxIn txin(txid, vout);\n+    tx.vin.push_back(txin);\n+}\n+\n+static void MutateTxAddOutAddr(CMutableTransaction& tx, const string& strInput)\n+{\n+    // separate VALUE:ADDRESS in string\n+    size_t pos = strInput.find(':');\n+    if ((pos == string::npos) ||\n+        (pos == 0) ||\n+        (pos == (strInput.size() - 1)))\n+        throw runtime_error(\"TX output missing separator\");\n+\n+    // extract and validate VALUE\n+    string strValue = strInput.substr(0, pos);\n+    int64_t value;\n+    if (!ParseMoney(strValue, value))\n+        throw runtime_error(\"invalid TX output value\");\n+\n+    // extract and validate ADDRESS\n+    string strAddr = strInput.substr(pos + 1, string::npos);\n+    CBitcoinAddress addr(strAddr);\n+    if (!addr.IsValid())\n+        throw runtime_error(\"invalid TX output address\");\n+\n+    // build standard output script via SetDestination()\n+    CScript scriptPubKey;\n+    scriptPubKey.SetDestination(addr.Get());\n+\n+    // construct TxOut, append to transaction output list\n+    CTxOut txout(value, scriptPubKey);\n+    tx.vout.push_back(txout);\n+}\n+\n+static void MutateTxAddOutScript(CMutableTransaction& tx, const string& strInput)\n+{\n+    // separate VALUE:ADDRESS in string\n+    size_t pos = strInput.find(':');\n+    if ((pos == string::npos) ||\n+        (pos == 0) ||\n+        (pos == (strInput.size() - 1)))\n+        throw runtime_error(\"TX output missing separator\");\n+\n+    // extract and validate VALUE\n+    string strValue = strInput.substr(0, pos);\n+    int64_t value;\n+    if (!ParseMoney(strValue, value))\n+        throw runtime_error(\"invalid TX output value\");\n+\n+    // extract and validate script\n+    string strScript = strInput.substr(pos + 1, string::npos);\n+    CScript scriptPubKey = ParseScript(strScript); // throws on err\n+\n+    // construct TxOut, append to transaction output list\n+    CTxOut txout(value, scriptPubKey);\n+    tx.vout.push_back(txout);\n+}\n+\n+static void MutateTxDelInput(CMutableTransaction& tx, const string& strInIdx)\n+{\n+    // parse requested deletion index\n+    int inIdx = atoi(strInIdx);\n+    if (inIdx < 0 || inIdx >= (int)tx.vin.size()) {\n+        string strErr = \"Invalid TX input index '\" + strInIdx + \"'\";\n+        throw runtime_error(strErr.c_str());\n+    }\n+\n+    // delete input from transaction\n+    tx.vin.erase(tx.vin.begin() + inIdx);\n+}\n+\n+static void MutateTxDelOutput(CMutableTransaction& tx, const string& strOutIdx)\n+{\n+    // parse requested deletion index\n+    int outIdx = atoi(strOutIdx);\n+    if (outIdx < 0 || outIdx >= (int)tx.vout.size()) {\n+        string strErr = \"Invalid TX output index '\" + strOutIdx + \"'\";\n+        throw runtime_error(strErr.c_str());\n+    }\n+\n+    // delete output from transaction\n+    tx.vout.erase(tx.vout.begin() + outIdx);\n+}\n+\n+static const unsigned int N_SIGHASH_OPTS = 6;\n+static const struct {\n+    const char *flagStr;\n+    int flags;\n+} sighashOptions[N_SIGHASH_OPTS] = {\n+    \"ALL\", SIGHASH_ALL,\n+    \"NONE\", SIGHASH_NONE,\n+    \"SINGLE\", SIGHASH_SINGLE,\n+    \"ALL|ANYONECANPAY\", SIGHASH_ALL|SIGHASH_ANYONECANPAY,\n+    \"NONE|ANYONECANPAY\", SIGHASH_NONE|SIGHASH_ANYONECANPAY,\n+    \"SINGLE|ANYONECANPAY\", SIGHASH_SINGLE|SIGHASH_ANYONECANPAY,\n+};\n+\n+static bool findSighashFlags(int& flags, const string& flagStr)\n+{\n+    flags = 0;\n+\n+    for (unsigned int i = 0; i < N_SIGHASH_OPTS; i++) {\n+        if (flagStr == sighashOptions[i].flagStr) {\n+            flags = sighashOptions[i].flags;\n+            return true;\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+uint256 ParseHashUO(map<string,UniValue>& o, string strKey)\n+{\n+    if (!o.count(strKey))\n+        return 0;\n+    return ParseHashUV(o[strKey], strKey);\n+}\n+\n+vector<unsigned char> ParseHexUO(map<string,UniValue>& o, string strKey)\n+{\n+    if (!o.count(strKey)) {\n+        vector<unsigned char> emptyVec;\n+        return emptyVec;\n+    }\n+    return ParseHexUV(o[strKey], strKey);\n+}\n+\n+static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n+{\n+    int nHashType = SIGHASH_ALL;\n+\n+    if (flagStr.size() > 0)\n+        if (!findSighashFlags(nHashType, flagStr))\n+            throw runtime_error(\"unknown sighash flag/sign option\");\n+\n+    vector<CTransaction> txVariants;\n+    txVariants.push_back(tx);\n+\n+    // mergedTx will end up with all the signatures; it\n+    // starts as a clone of the raw tx:\n+    CMutableTransaction mergedTx(txVariants[0]);\n+    bool fComplete = true;\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(viewDummy);\n+\n+    if (!registers.count(\"privatekeys\"))\n+        throw runtime_error(\"privatekeys register variable must be set.\");\n+    bool fGivenKeys = false;\n+    CBasicKeyStore tempKeystore;\n+    UniValue keysObj = registers[\"privatekeys\"];\n+    fGivenKeys = true;\n+\n+    vector<UniValue> keys;\n+    if (!keysObj.getArray(keys))\n+        throw runtime_error(\"privatekeys not an array\");\n+    for (unsigned int kidx = 0; kidx < keys.size(); kidx++) {\n+        if (!keys[kidx].isStr())\n+            throw runtime_error(\"privatekey not a string\");\n+        CBitcoinSecret vchSecret;\n+        bool fGood = vchSecret.SetString(keys[kidx].getValStr());\n+        if (!fGood)\n+            throw runtime_error(\"privatekey not valid\");\n+\n+        CKey key = vchSecret.GetKey();\n+        tempKeystore.AddKey(key);\n+    }\n+\n+    // Add previous txouts given in the RPC call:\n+    if (!registers.count(\"prevtxs\"))\n+        throw runtime_error(\"prevtxs register variable must be set.\");\n+    UniValue prevtxsObj = registers[\"privatekeys\"];\n+    {\n+        vector<UniValue> prevTxs;\n+        if (!prevtxsObj.getArray(prevTxs))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15439984",
      "id" : 15439984,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDM5OTg0",
      "original_commit_id" : "c84972a67e278eea4a42951203d35ca7e25b65da",
      "original_line" : null,
      "original_position" : 345,
      "original_start_line" : null,
      "path" : "src/bitcoin-tx.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439984/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15439984",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15440001"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15440001"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This method has a very ambiguous meaning, being totally different for objects/arrays and strings/numbers. Do you use it anywhere for anything but checking emptyness? Perhaps just a bool empty() const method instead?\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-27T15:57:52Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef __UNIVALUE_H__\n+#define __UNIVALUE_H__\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+#include <map>\n+#include <cassert>\n+\n+class UniValue {\n+public:\n+    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n+\n+    UniValue() { typ = VNULL; }\n+    UniValue(UniValue::VType initialType, const std::string& initialStr = \"\") {\n+        typ = initialType;\n+        val = initialStr;\n+    }\n+    UniValue(uint64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(int64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(int val_) {\n+        setInt(val_);\n+    }\n+    UniValue(double val_) {\n+        setFloat(val_);\n+    }\n+    UniValue(const std::string& val_) {\n+        setStr(val_);\n+    }\n+    UniValue(const char *val_) {\n+        std::string s(val_);\n+        setStr(s);\n+    }\n+    ~UniValue() {}\n+\n+    void clear();\n+\n+    bool setNull();\n+    bool setBool(bool val);\n+    bool setNumStr(const std::string& val);\n+    bool setInt(uint64_t val);\n+    bool setInt(int64_t val);\n+    bool setInt(int val) { return setInt((int64_t)val); }\n+    bool setFloat(double val);\n+    bool setStr(const std::string& val);\n+    bool setArray();\n+    bool setObject();\n+\n+    enum VType getType() const { return typ; }\n+    std::string getValStr() const { return val; }\n+    bool empty() const { return (values.size() == 0); }\n+\n+    size_t size() const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15440001",
      "id" : 15440001,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQwMDAx",
      "original_commit_id" : "c84972a67e278eea4a42951203d35ca7e25b65da",
      "original_line" : null,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/univalue/univalue.h",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15440001/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15440001",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15440014"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15440014"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It would be more efficient to return a const UniValue& reference (yes, I want to avoid copying entire structures).\n\nIf you want the returned reference to remain valid under array addition, you'll need a std::vector of UniValue\\* rather than std::vector of UniValue to back the array implementation.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-27T16:00:30Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef __UNIVALUE_H__\n+#define __UNIVALUE_H__\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+#include <map>\n+#include <cassert>\n+\n+class UniValue {\n+public:\n+    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n+\n+    UniValue() { typ = VNULL; }\n+    UniValue(UniValue::VType initialType, const std::string& initialStr = \"\") {\n+        typ = initialType;\n+        val = initialStr;\n+    }\n+    UniValue(uint64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(int64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(int val_) {\n+        setInt(val_);\n+    }\n+    UniValue(double val_) {\n+        setFloat(val_);\n+    }\n+    UniValue(const std::string& val_) {\n+        setStr(val_);\n+    }\n+    UniValue(const char *val_) {\n+        std::string s(val_);\n+        setStr(s);\n+    }\n+    ~UniValue() {}\n+\n+    void clear();\n+\n+    bool setNull();\n+    bool setBool(bool val);\n+    bool setNumStr(const std::string& val);\n+    bool setInt(uint64_t val);\n+    bool setInt(int64_t val);\n+    bool setInt(int val) { return setInt((int64_t)val); }\n+    bool setFloat(double val);\n+    bool setStr(const std::string& val);\n+    bool setArray();\n+    bool setObject();\n+\n+    enum VType getType() const { return typ; }\n+    std::string getValStr() const { return val; }\n+    bool empty() const { return (values.size() == 0); }\n+\n+    size_t size() const {\n+        switch (typ) {\n+        case VNULL:\n+            return 0;\n+\n+        case VBOOL:\n+            return 1;\n+\n+        case VOBJ:\n+        case VARR:\n+            return values.size();\n+\n+        case VSTR:\n+        case VNUM:\n+            return val.size();\n+        }\n+\n+        // not reached\n+        return 0;\n+    }\n+\n+    bool getBool() const { return isTrue(); }\n+    bool getArray(std::vector<UniValue>& arr);\n+    bool getObject(std::map<std::string,UniValue>& obj);\n+    bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes);\n+    UniValue operator[](const std::string& key) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15440014",
      "id" : 15440014,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQwMDE0",
      "original_commit_id" : "c84972a67e278eea4a42951203d35ca7e25b65da",
      "original_line" : null,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/univalue/univalue.h",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15440014/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15440014",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15440027"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15440027"
         }
      },
      "author_association" : "MEMBER",
      "body" : "After IRC discussion: propose: set=NAME:VALUE and load=NAME:FILE.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-27T16:02:10Z",
      "diff_hunk" : "@@ -0,0 +1,580 @@\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"core.h\"\n+#include \"main.h\"         // for MAX_BLOCK_SIZE\n+#include \"keystore.h\"\n+#include \"ui_interface.h\" // for _(...)\n+#include \"univalue/univalue.h\"\n+#include \"core_io.h\"\n+\n+#include <stdio.h>\n+#include <boost/assign/list_of.hpp>\n+\n+using namespace std;\n+using namespace boost::assign;\n+\n+static bool fCreateBlank;\n+static map<string,UniValue> registers;\n+CClientUIInterface uiInterface;\n+\n+static bool AppInitRawTx(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    ParseParameters(argc, argv);\n+\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n+\n+    fCreateBlank = GetBoolArg(\"-create\", false);\n+\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = _(\"Bitcoin Core bitcoin-tx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+            _(\"Usage:\") + \"\\n\" +\n+              \"  bitcoin-tx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"  bitcoin-tx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Options:\") + \"\\n\";\n+        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n+        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n+        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n+        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n+        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n+        strUsage += \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+\n+        strUsage = _(\"Commands:\") + \"\\n\";\n+        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n+        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n+        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n+        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n+        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n+        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n+        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n+        strUsage += \"  sign=SIGHASH-FLAGS     \" + _(\"Add zero or more signatures to transaction\") + \"\\n\";\n+        strUsage += \"      This command requires JSON registers:\\n\";\n+        strUsage += \"      prevtxs=JSON object\\n\";\n+        strUsage += \"      privatekeys=JSON object\\n\";\n+        strUsage += \"      See signrawtransaction docs for format of sighash flags, JSON objects.\\n\";\n+        strUsage += \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Register Commands:\") + \"\\n\";\n+        strUsage += \"  load.NAME=FILE         \" + _(\"Load JSON file FILE into register NAME\") + \"\\n\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15440027",
      "id" : 15440027,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQwMDI3",
      "original_commit_id" : "c84972a67e278eea4a42951203d35ca7e25b65da",
      "original_line" : null,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "src/bitcoin-tx.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15440027/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15440027",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15440106"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15440106"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps redeemscripts can go into a register too?\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-27T16:21:43Z",
      "diff_hunk" : "@@ -0,0 +1,580 @@\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"core.h\"\n+#include \"main.h\"         // for MAX_BLOCK_SIZE\n+#include \"keystore.h\"\n+#include \"ui_interface.h\" // for _(...)\n+#include \"univalue/univalue.h\"\n+#include \"core_io.h\"\n+\n+#include <stdio.h>\n+#include <boost/assign/list_of.hpp>\n+\n+using namespace std;\n+using namespace boost::assign;\n+\n+static bool fCreateBlank;\n+static map<string,UniValue> registers;\n+CClientUIInterface uiInterface;\n+\n+static bool AppInitRawTx(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    ParseParameters(argc, argv);\n+\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n+\n+    fCreateBlank = GetBoolArg(\"-create\", false);\n+\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n+    {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = _(\"Bitcoin Core bitcoin-tx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+            _(\"Usage:\") + \"\\n\" +\n+              \"  bitcoin-tx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"  bitcoin-tx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Options:\") + \"\\n\";\n+        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n+        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n+        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n+        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n+        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n+        strUsage += \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+\n+        strUsage = _(\"Commands:\") + \"\\n\";\n+        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n+        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n+        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n+        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n+        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n+        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n+        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n+        strUsage += \"  sign=SIGHASH-FLAGS     \" + _(\"Add zero or more signatures to transaction\") + \"\\n\";\n+        strUsage += \"      This command requires JSON registers:\\n\";\n+        strUsage += \"      prevtxs=JSON object\\n\";\n+        strUsage += \"      privatekeys=JSON object\\n\";\n+        strUsage += \"      See signrawtransaction docs for format of sighash flags, JSON objects.\\n\";\n+        strUsage += \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Register Commands:\") + \"\\n\";\n+        strUsage += \"  load.NAME=FILE         \" + _(\"Load JSON file FILE into register NAME\") + \"\\n\";\n+        strUsage += \"  NAME=JSON-STRING       \" + _(\"Set register NAME to given JSON-STRING\") + \"\\n\";\n+        strUsage += \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        return false;\n+    }\n+    return true;\n+}\n+\n+static void RegisterSet(const string& key, const string& valStr)\n+{\n+    UniValue val;\n+    if (!val.read(valStr)) {\n+        string strErr = \"Cannot parse JSON for key \" + key;\n+        throw runtime_error(strErr);\n+    }\n+\n+    registers[key] = val;\n+}\n+\n+static void RegisterLoad(const string& key, const string& value)\n+{\n+    FILE *f = fopen(value.c_str(), \"r\");\n+    if (!f) {\n+        string strErr = \"Cannot open file \" + value;\n+        throw runtime_error(strErr);\n+    }\n+\n+    // load file chunks into one big buffer\n+    string valStr;\n+    while ((!feof(f)) && (!ferror(f))) {\n+        char buf[4096];\n+        int bread = fread(buf, 1, sizeof(buf), f);\n+        if (bread <= 0)\n+            break;\n+\n+        valStr.insert(valStr.size(), buf, bread);\n+    }\n+\n+    if (ferror(f)) {\n+        string strErr = \"Error reading file \" + value;\n+        throw runtime_error(strErr);\n+    }\n+\n+    fclose(f);\n+\n+    // evaluate as JSON buffer register\n+    RegisterSet(key, valStr);\n+}\n+\n+static void MutateTxVersion(CMutableTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newVersion = atoi64(cmdVal);\n+    if (newVersion < 1 || newVersion > CTransaction::CURRENT_VERSION)\n+        throw runtime_error(\"Invalid TX version requested\");\n+\n+    tx.nVersion = (int) newVersion;\n+}\n+\n+static void MutateTxLocktime(CMutableTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newLocktime = atoi64(cmdVal);\n+    if (newLocktime < 0LL || newLocktime > 0xffffffffLL)\n+        throw runtime_error(\"Invalid TX locktime requested\");\n+\n+    tx.nLockTime = (unsigned int) newLocktime;\n+}\n+\n+static void MutateTxAddInput(CMutableTransaction& tx, const string& strInput)\n+{\n+    // separate TXID:VOUT in string\n+    size_t pos = strInput.find(':');\n+    if ((pos == string::npos) ||\n+        (pos == 0) ||\n+        (pos == (strInput.size() - 1)))\n+        throw runtime_error(\"TX input missing separator\");\n+\n+    // extract and validate TXID\n+    string strTxid = strInput.substr(0, pos);\n+    if ((strTxid.size() != 64) || !IsHex(strTxid))\n+        throw runtime_error(\"invalid TX input txid\");\n+    uint256 txid(strTxid);\n+\n+    static const unsigned int minTxOutSz = 9;\n+    static const unsigned int maxVout = MAX_BLOCK_SIZE / minTxOutSz;\n+\n+    // extract and validate vout\n+    string strVout = strInput.substr(pos + 1, string::npos);\n+    int vout = atoi(strVout);\n+    if ((vout < 0) || (vout > (int)maxVout))\n+        throw runtime_error(\"invalid TX input vout\");\n+\n+    // append to transaction input list\n+    CTxIn txin(txid, vout);\n+    tx.vin.push_back(txin);\n+}\n+\n+static void MutateTxAddOutAddr(CMutableTransaction& tx, const string& strInput)\n+{\n+    // separate VALUE:ADDRESS in string\n+    size_t pos = strInput.find(':');\n+    if ((pos == string::npos) ||\n+        (pos == 0) ||\n+        (pos == (strInput.size() - 1)))\n+        throw runtime_error(\"TX output missing separator\");\n+\n+    // extract and validate VALUE\n+    string strValue = strInput.substr(0, pos);\n+    int64_t value;\n+    if (!ParseMoney(strValue, value))\n+        throw runtime_error(\"invalid TX output value\");\n+\n+    // extract and validate ADDRESS\n+    string strAddr = strInput.substr(pos + 1, string::npos);\n+    CBitcoinAddress addr(strAddr);\n+    if (!addr.IsValid())\n+        throw runtime_error(\"invalid TX output address\");\n+\n+    // build standard output script via SetDestination()\n+    CScript scriptPubKey;\n+    scriptPubKey.SetDestination(addr.Get());\n+\n+    // construct TxOut, append to transaction output list\n+    CTxOut txout(value, scriptPubKey);\n+    tx.vout.push_back(txout);\n+}\n+\n+static void MutateTxAddOutScript(CMutableTransaction& tx, const string& strInput)\n+{\n+    // separate VALUE:ADDRESS in string\n+    size_t pos = strInput.find(':');\n+    if ((pos == string::npos) ||\n+        (pos == 0) ||\n+        (pos == (strInput.size() - 1)))\n+        throw runtime_error(\"TX output missing separator\");\n+\n+    // extract and validate VALUE\n+    string strValue = strInput.substr(0, pos);\n+    int64_t value;\n+    if (!ParseMoney(strValue, value))\n+        throw runtime_error(\"invalid TX output value\");\n+\n+    // extract and validate script\n+    string strScript = strInput.substr(pos + 1, string::npos);\n+    CScript scriptPubKey = ParseScript(strScript); // throws on err\n+\n+    // construct TxOut, append to transaction output list\n+    CTxOut txout(value, scriptPubKey);\n+    tx.vout.push_back(txout);\n+}\n+\n+static void MutateTxDelInput(CMutableTransaction& tx, const string& strInIdx)\n+{\n+    // parse requested deletion index\n+    int inIdx = atoi(strInIdx);\n+    if (inIdx < 0 || inIdx >= (int)tx.vin.size()) {\n+        string strErr = \"Invalid TX input index '\" + strInIdx + \"'\";\n+        throw runtime_error(strErr.c_str());\n+    }\n+\n+    // delete input from transaction\n+    tx.vin.erase(tx.vin.begin() + inIdx);\n+}\n+\n+static void MutateTxDelOutput(CMutableTransaction& tx, const string& strOutIdx)\n+{\n+    // parse requested deletion index\n+    int outIdx = atoi(strOutIdx);\n+    if (outIdx < 0 || outIdx >= (int)tx.vout.size()) {\n+        string strErr = \"Invalid TX output index '\" + strOutIdx + \"'\";\n+        throw runtime_error(strErr.c_str());\n+    }\n+\n+    // delete output from transaction\n+    tx.vout.erase(tx.vout.begin() + outIdx);\n+}\n+\n+static const unsigned int N_SIGHASH_OPTS = 6;\n+static const struct {\n+    const char *flagStr;\n+    int flags;\n+} sighashOptions[N_SIGHASH_OPTS] = {\n+    \"ALL\", SIGHASH_ALL,\n+    \"NONE\", SIGHASH_NONE,\n+    \"SINGLE\", SIGHASH_SINGLE,\n+    \"ALL|ANYONECANPAY\", SIGHASH_ALL|SIGHASH_ANYONECANPAY,\n+    \"NONE|ANYONECANPAY\", SIGHASH_NONE|SIGHASH_ANYONECANPAY,\n+    \"SINGLE|ANYONECANPAY\", SIGHASH_SINGLE|SIGHASH_ANYONECANPAY,\n+};\n+\n+static bool findSighashFlags(int& flags, const string& flagStr)\n+{\n+    flags = 0;\n+\n+    for (unsigned int i = 0; i < N_SIGHASH_OPTS; i++) {\n+        if (flagStr == sighashOptions[i].flagStr) {\n+            flags = sighashOptions[i].flags;\n+            return true;\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+uint256 ParseHashUO(map<string,UniValue>& o, string strKey)\n+{\n+    if (!o.count(strKey))\n+        return 0;\n+    return ParseHashUV(o[strKey], strKey);\n+}\n+\n+vector<unsigned char> ParseHexUO(map<string,UniValue>& o, string strKey)\n+{\n+    if (!o.count(strKey)) {\n+        vector<unsigned char> emptyVec;\n+        return emptyVec;\n+    }\n+    return ParseHexUV(o[strKey], strKey);\n+}\n+\n+static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n+{\n+    int nHashType = SIGHASH_ALL;\n+\n+    if (flagStr.size() > 0)\n+        if (!findSighashFlags(nHashType, flagStr))\n+            throw runtime_error(\"unknown sighash flag/sign option\");\n+\n+    vector<CTransaction> txVariants;\n+    txVariants.push_back(tx);\n+\n+    // mergedTx will end up with all the signatures; it\n+    // starts as a clone of the raw tx:\n+    CMutableTransaction mergedTx(txVariants[0]);\n+    bool fComplete = true;\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(viewDummy);\n+\n+    if (!registers.count(\"privatekeys\"))\n+        throw runtime_error(\"privatekeys register variable must be set.\");\n+    bool fGivenKeys = false;\n+    CBasicKeyStore tempKeystore;\n+    UniValue keysObj = registers[\"privatekeys\"];\n+    fGivenKeys = true;\n+\n+    vector<UniValue> keys;\n+    if (!keysObj.getArray(keys))\n+        throw runtime_error(\"privatekeys not an array\");\n+    for (unsigned int kidx = 0; kidx < keys.size(); kidx++) {\n+        if (!keys[kidx].isStr())\n+            throw runtime_error(\"privatekey not a string\");\n+        CBitcoinSecret vchSecret;\n+        bool fGood = vchSecret.SetString(keys[kidx].getValStr());\n+        if (!fGood)\n+            throw runtime_error(\"privatekey not valid\");\n+\n+        CKey key = vchSecret.GetKey();\n+        tempKeystore.AddKey(key);\n+    }\n+\n+    // Add previous txouts given in the RPC call:\n+    if (!registers.count(\"prevtxs\"))\n+        throw runtime_error(\"prevtxs register variable must be set.\");\n+    UniValue prevtxsObj = registers[\"privatekeys\"];\n+    {\n+        vector<UniValue> prevTxs;\n+        if (!prevtxsObj.getArray(prevTxs))\n+            throw runtime_error(\"prevtxs not an array\");\n+\n+        for (unsigned int previdx = 0; previdx < prevTxs.size(); previdx++) {\n+            map<string,UniValue> prevOut;\n+            if (!prevTxs[previdx].getObject(prevOut))\n+                throw runtime_error(\"expected prevtxs internal object\");\n+\n+            map<string,UniValue::VType> types = map_list_of(\"txid\", UniValue::VSTR)(\"vout\",UniValue::VNUM)(\"scriptPubKey\",UniValue::VSTR);\n+            if (!prevTxs[previdx].checkObject(types))\n+                throw runtime_error(\"prevtxs internal object typecheck fail\");\n+\n+            uint256 txid = ParseHashUO(prevOut, \"txid\");\n+\n+            int nOut = atoi(prevOut[\"vout\"].getValStr());\n+            if (nOut < 0)\n+                throw runtime_error(\"vout must be positive\");\n+\n+            vector<unsigned char> pkData(ParseHexUO(prevOut, \"scriptPubKey\"));\n+            CScript scriptPubKey(pkData.begin(), pkData.end());\n+\n+            CCoins coins;\n+            if (view.GetCoins(txid, coins)) {\n+                if (coins.IsAvailable(nOut) && coins.vout[nOut].scriptPubKey != scriptPubKey) {\n+                    string err(\"Previous output scriptPubKey mismatch:\\n\");\n+                    err = err + coins.vout[nOut].scriptPubKey.ToString() + \"\\nvs:\\n\"+\n+                        scriptPubKey.ToString();\n+                    throw runtime_error(err);\n+                }\n+                // what todo if txid is known, but the actual output isn't?\n+            }\n+            if ((unsigned int)nOut >= coins.vout.size())\n+                coins.vout.resize(nOut+1);\n+            coins.vout[nOut].scriptPubKey = scriptPubKey;\n+            coins.vout[nOut].nValue = 0; // we don't know the actual output value\n+            view.SetCoins(txid, coins);\n+\n+            // if redeemScript given and not using the local wallet (private keys\n+            // given), add redeemScript to the tempKeystore so it can be signed:\n+            if (fGivenKeys && scriptPubKey.IsPayToScriptHash() &&",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15440106",
      "id" : 15440106,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQwMTA2",
      "original_commit_id" : "c84972a67e278eea4a42951203d35ca7e25b65da",
      "original_line" : null,
      "original_position" : 384,
      "original_start_line" : null,
      "path" : "src/bitcoin-tx.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15440106/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15440106",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15440291"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15440291"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, it is used to examine string size and also to examine array | values array size for further iteration.\n\nAgree that ambiguity is an issue.  The scope could be narrowed to arrays+objects, and renamed to arraySize() or somesuch.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-27T17:07:06Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef __UNIVALUE_H__\n+#define __UNIVALUE_H__\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+#include <map>\n+#include <cassert>\n+\n+class UniValue {\n+public:\n+    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n+\n+    UniValue() { typ = VNULL; }\n+    UniValue(UniValue::VType initialType, const std::string& initialStr = \"\") {\n+        typ = initialType;\n+        val = initialStr;\n+    }\n+    UniValue(uint64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(int64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(int val_) {\n+        setInt(val_);\n+    }\n+    UniValue(double val_) {\n+        setFloat(val_);\n+    }\n+    UniValue(const std::string& val_) {\n+        setStr(val_);\n+    }\n+    UniValue(const char *val_) {\n+        std::string s(val_);\n+        setStr(s);\n+    }\n+    ~UniValue() {}\n+\n+    void clear();\n+\n+    bool setNull();\n+    bool setBool(bool val);\n+    bool setNumStr(const std::string& val);\n+    bool setInt(uint64_t val);\n+    bool setInt(int64_t val);\n+    bool setInt(int val) { return setInt((int64_t)val); }\n+    bool setFloat(double val);\n+    bool setStr(const std::string& val);\n+    bool setArray();\n+    bool setObject();\n+\n+    enum VType getType() const { return typ; }\n+    std::string getValStr() const { return val; }\n+    bool empty() const { return (values.size() == 0); }\n+\n+    size_t size() const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15440291",
      "id" : 15440291,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQwMjkx",
      "original_commit_id" : "c84972a67e278eea4a42951203d35ca7e25b65da",
      "original_line" : null,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/univalue/univalue.h",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15440291/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15440291",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15440883"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15440883"
         }
      },
      "author_association" : "MEMBER",
      "body" : ".size() and .count() perhaps?\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-27T18:53:43Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef __UNIVALUE_H__\n+#define __UNIVALUE_H__\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+#include <map>\n+#include <cassert>\n+\n+class UniValue {\n+public:\n+    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n+\n+    UniValue() { typ = VNULL; }\n+    UniValue(UniValue::VType initialType, const std::string& initialStr = \"\") {\n+        typ = initialType;\n+        val = initialStr;\n+    }\n+    UniValue(uint64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(int64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(int val_) {\n+        setInt(val_);\n+    }\n+    UniValue(double val_) {\n+        setFloat(val_);\n+    }\n+    UniValue(const std::string& val_) {\n+        setStr(val_);\n+    }\n+    UniValue(const char *val_) {\n+        std::string s(val_);\n+        setStr(s);\n+    }\n+    ~UniValue() {}\n+\n+    void clear();\n+\n+    bool setNull();\n+    bool setBool(bool val);\n+    bool setNumStr(const std::string& val);\n+    bool setInt(uint64_t val);\n+    bool setInt(int64_t val);\n+    bool setInt(int val) { return setInt((int64_t)val); }\n+    bool setFloat(double val);\n+    bool setStr(const std::string& val);\n+    bool setArray();\n+    bool setObject();\n+\n+    enum VType getType() const { return typ; }\n+    std::string getValStr() const { return val; }\n+    bool empty() const { return (values.size() == 0); }\n+\n+    size_t size() const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15440883",
      "id" : 15440883,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQwODgz",
      "original_commit_id" : "c84972a67e278eea4a42951203d35ca7e25b65da",
      "original_line" : null,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/univalue/univalue.h",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15440883/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15440883",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15441765"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15441765"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "A fair point, though I am deferring this until later.  ToTxUnix() is a line-by-line translation of TxToJSON() logic, and matching that becomes useful for later unification.\n\nIf you wanted to submit a PR fixing TxToJSON(), that would helpful.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-27T21:23:22Z",
      "diff_hunk" : "@@ -0,0 +1,88 @@\n+\n+#include <vector>\n+#include \"core_io.h\"\n+#include \"univalue.h\"\n+#include \"script.h\"\n+#include \"core.h\"\n+#include \"base58.h\"\n+\n+using namespace std;\n+\n+string EncodeHexTx(const CTransaction& tx)\n+{\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << tx;\n+    return HexStr(ssTx.begin(), ssTx.end());\n+}\n+\n+void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n+                        UniValue& out, bool fIncludeHex)\n+{\n+    txnouttype type;\n+    vector<CTxDestination> addresses;\n+    int nRequired;\n+\n+    out.pushKV(\"asm\", scriptPubKey.ToString());\n+    if (fIncludeHex)\n+        out.pushKV(\"hex\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+\n+    if (!ExtractDestinations(scriptPubKey, type, addresses, nRequired))\n+    {\n+        out.pushKV(\"type\", GetTxnOutputType(type));\n+        return;\n+    }\n+\n+    out.pushKV(\"reqSigs\", nRequired);\n+    out.pushKV(\"type\", GetTxnOutputType(type));\n+\n+    UniValue a(UniValue::VARR);\n+    BOOST_FOREACH(const CTxDestination& addr, addresses)\n+        a.push(CBitcoinAddress(addr).ToString());\n+    out.pushKV(\"addresses\", a);\n+}\n+\n+void TxToUniv(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n+{\n+    entry.pushKV(\"txid\", tx.GetHash().GetHex());\n+    entry.pushKV(\"version\", tx.nVersion);\n+    entry.pushKV(\"locktime\", (int64_t)tx.nLockTime);\n+\n+    UniValue vin(UniValue::VARR);\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15441765",
      "id" : 15441765,
      "line" : 52,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQxNzY1",
      "original_commit_id" : "480ec93fbbd6e1d973c712168397a988c9b41cb2",
      "original_line" : null,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/core_write.cpp",
      "position" : 52,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15441765/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15441765",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15441877"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15441877"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Agree it is more efficient, though at the moment it is a convention to return a null object to indicate failure, rather than throwing an exception or something else.  That seems a useful convention as any cascading, second order failures are more likely to fail-safe.\n\nWould need to clean up that convention, to turn this thing into a reference.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-27T21:41:13Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef __UNIVALUE_H__\n+#define __UNIVALUE_H__\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+#include <map>\n+#include <cassert>\n+\n+class UniValue {\n+public:\n+    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n+\n+    UniValue() { typ = VNULL; }\n+    UniValue(UniValue::VType initialType, const std::string& initialStr = \"\") {\n+        typ = initialType;\n+        val = initialStr;\n+    }\n+    UniValue(uint64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(int64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(int val_) {\n+        setInt(val_);\n+    }\n+    UniValue(double val_) {\n+        setFloat(val_);\n+    }\n+    UniValue(const std::string& val_) {\n+        setStr(val_);\n+    }\n+    UniValue(const char *val_) {\n+        std::string s(val_);\n+        setStr(s);\n+    }\n+    ~UniValue() {}\n+\n+    void clear();\n+\n+    bool setNull();\n+    bool setBool(bool val);\n+    bool setNumStr(const std::string& val);\n+    bool setInt(uint64_t val);\n+    bool setInt(int64_t val);\n+    bool setInt(int val) { return setInt((int64_t)val); }\n+    bool setFloat(double val);\n+    bool setStr(const std::string& val);\n+    bool setArray();\n+    bool setObject();\n+\n+    enum VType getType() const { return typ; }\n+    std::string getValStr() const { return val; }\n+    bool empty() const { return (values.size() == 0); }\n+\n+    size_t size() const {\n+        switch (typ) {\n+        case VNULL:\n+            return 0;\n+\n+        case VBOOL:\n+            return 1;\n+\n+        case VOBJ:\n+        case VARR:\n+            return values.size();\n+\n+        case VSTR:\n+        case VNUM:\n+            return val.size();\n+        }\n+\n+        // not reached\n+        return 0;\n+    }\n+\n+    bool getBool() const { return isTrue(); }\n+    bool getArray(std::vector<UniValue>& arr);\n+    bool getObject(std::map<std::string,UniValue>& obj);\n+    bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes);\n+    UniValue operator[](const std::string& key) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15441877",
      "id" : 15441877,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQxODc3",
      "original_commit_id" : "c84972a67e278eea4a42951203d35ca7e25b65da",
      "original_line" : null,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/univalue/univalue.h",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15441877/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15441877",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa all concerns should be addressed/responded-to\n",
      "created_at" : "2014-07-27T21:43:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50286842",
      "id" : 50286842,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMjg2ODQy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50286842/reactions"
      },
      "updated_at" : "2014-07-27T21:43:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50286842",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "You're still returning a full copy in operator[] :)\n",
      "created_at" : "2014-07-27T23:21:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50289338",
      "id" : 50289338,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMjg5MzM4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50289338/reactions"
      },
      "updated_at" : "2014-07-27T23:21:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50289338",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15442571"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15442571"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No you don't need to. You can have one static const UniValue() object, and return a reference to that in case of invalid/nonexting argument.\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-27T23:22:50Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef __UNIVALUE_H__\n+#define __UNIVALUE_H__\n+\n+#include <stdint.h>\n+#include <string>\n+#include <vector>\n+#include <map>\n+#include <cassert>\n+\n+class UniValue {\n+public:\n+    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n+\n+    UniValue() { typ = VNULL; }\n+    UniValue(UniValue::VType initialType, const std::string& initialStr = \"\") {\n+        typ = initialType;\n+        val = initialStr;\n+    }\n+    UniValue(uint64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(int64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(int val_) {\n+        setInt(val_);\n+    }\n+    UniValue(double val_) {\n+        setFloat(val_);\n+    }\n+    UniValue(const std::string& val_) {\n+        setStr(val_);\n+    }\n+    UniValue(const char *val_) {\n+        std::string s(val_);\n+        setStr(s);\n+    }\n+    ~UniValue() {}\n+\n+    void clear();\n+\n+    bool setNull();\n+    bool setBool(bool val);\n+    bool setNumStr(const std::string& val);\n+    bool setInt(uint64_t val);\n+    bool setInt(int64_t val);\n+    bool setInt(int val) { return setInt((int64_t)val); }\n+    bool setFloat(double val);\n+    bool setStr(const std::string& val);\n+    bool setArray();\n+    bool setObject();\n+\n+    enum VType getType() const { return typ; }\n+    std::string getValStr() const { return val; }\n+    bool empty() const { return (values.size() == 0); }\n+\n+    size_t size() const {\n+        switch (typ) {\n+        case VNULL:\n+            return 0;\n+\n+        case VBOOL:\n+            return 1;\n+\n+        case VOBJ:\n+        case VARR:\n+            return values.size();\n+\n+        case VSTR:\n+        case VNUM:\n+            return val.size();\n+        }\n+\n+        // not reached\n+        return 0;\n+    }\n+\n+    bool getBool() const { return isTrue(); }\n+    bool getArray(std::vector<UniValue>& arr);\n+    bool getObject(std::map<std::string,UniValue>& obj);\n+    bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes);\n+    UniValue operator[](const std::string& key) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15442571",
      "id" : 15442571,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQyNTcx",
      "original_commit_id" : "c84972a67e278eea4a42951203d35ca7e25b65da",
      "original_line" : null,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/univalue/univalue.h",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15442571/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15442571",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "\"or responded to\"  the operator[] returns a null UniValue which is used usefully in several places in the API.\n\nI agree RE full copy, but fixing requires rethinking the entire class's error handling strategy.\n",
      "created_at" : "2014-07-27T23:24:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50289407",
      "id" : 50289407,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMjg5NDA3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50289407/reactions"
      },
      "updated_at" : "2014-07-27T23:24:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50289407",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Sorry, I missed that comment. I hate github's per-line commenting.\n\nSee my reply there.\n",
      "created_at" : "2014-07-27T23:26:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50289447",
      "id" : 50289447,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMjg5NDQ3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50289447/reactions"
      },
      "updated_at" : "2014-07-27T23:26:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50289447",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It seems you're ignoring DecodeHexTx's return value, and bitcoin-tx accepts incorrectly encoded transactions (and turns the, into... something).\n",
      "created_at" : "2014-07-27T23:49:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50290056",
      "id" : 50290056,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMjkwMDU2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50290056/reactions"
      },
      "updated_at" : "2014-07-27T23:49:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50290056",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15442817"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15442817"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This comment doesn't really apply here :)\n",
      "commit_id" : "cbe39a38526a6c17619d02cc697b80ebfd57203b",
      "created_at" : "2014-07-27T23:51:37Z",
      "diff_hunk" : "@@ -0,0 +1,596 @@\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"base58.h\"\n+#include \"util.h\"\n+#include \"core.h\"\n+#include \"main.h\"         // for MAX_BLOCK_SIZE\n+#include \"keystore.h\"\n+#include \"ui_interface.h\" // for _(...)\n+#include \"univalue/univalue.h\"\n+#include \"core_io.h\"\n+\n+#include <stdio.h>\n+#include <boost/assign/list_of.hpp>\n+\n+using namespace std;\n+using namespace boost::assign;\n+\n+static bool fCreateBlank;\n+static map<string,UniValue> registers;\n+CClientUIInterface uiInterface;\n+\n+static bool AppInitRawTx(int argc, char* argv[])\n+{\n+    //\n+    // Parameters\n+    //\n+    ParseParameters(argc, argv);\n+\n+    // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n+\n+    fCreateBlank = GetBoolArg(\"-create\", false);\n+\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"-help\"))\n+    {\n+        // First part of help message is specific to this utility\n+        std::string strUsage = _(\"Bitcoin Core bitcoin-tx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +\n+            _(\"Usage:\") + \"\\n\" +\n+              \"  bitcoin-tx [options] <hex-tx> [commands]  \" + _(\"Update hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"  bitcoin-tx [options] -create [commands]   \" + _(\"Create hex-encoded bitcoin transaction\") + \"\\n\" +\n+              \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Options:\") + \"\\n\";\n+        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n+        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n+        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n+        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n+        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n+        strUsage += \"\\n\";\n+\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+\n+        strUsage = _(\"Commands:\") + \"\\n\";\n+        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n+        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n+        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n+        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n+        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n+        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n+        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n+        strUsage += \"  sign=SIGHASH-FLAGS     \" + _(\"Add zero or more signatures to transaction\") + \"\\n\";\n+        strUsage += \"      This command requires JSON registers:\\n\";\n+        strUsage += \"      prevtxs=JSON object\\n\";\n+        strUsage += \"      privatekeys=JSON object\\n\";\n+        strUsage += \"      See signrawtransaction docs for format of sighash flags, JSON objects.\\n\";\n+        strUsage += \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        strUsage = _(\"Register Commands:\") + \"\\n\";\n+        strUsage += \"  load=NAME:FILENAME     \" + _(\"Load JSON file FILENAME into register NAME\") + \"\\n\";\n+        strUsage += \"  set=NAME:JSON-STRING   \" + _(\"Set register NAME to given JSON-STRING\") + \"\\n\";\n+        strUsage += \"\\n\";\n+        fprintf(stdout, \"%s\", strUsage.c_str());\n+\n+        return false;\n+    }\n+    return true;\n+}\n+\n+static void RegisterSetJson(const string& key, const string& rawJson)\n+{\n+    UniValue val;\n+    if (!val.read(rawJson)) {\n+        string strErr = \"Cannot parse JSON for key \" + key;\n+        throw runtime_error(strErr);\n+    }\n+\n+    registers[key] = val;\n+}\n+\n+static void RegisterSet(const string& strInput)\n+{\n+    // separate NAME:VALUE in string\n+    size_t pos = strInput.find(':');\n+    if ((pos == string::npos) ||\n+        (pos == 0) ||\n+        (pos == (strInput.size() - 1)))\n+        throw runtime_error(\"Register input requires NAME:VALUE\");\n+\n+    string key = strInput.substr(0, pos);\n+    string valStr = strInput.substr(pos + 1, string::npos);\n+\n+    RegisterSetJson(key, valStr);\n+}\n+\n+static void RegisterLoad(const string& strInput)\n+{\n+    // separate NAME:FILENAME in string\n+    size_t pos = strInput.find(':');\n+    if ((pos == string::npos) ||\n+        (pos == 0) ||\n+        (pos == (strInput.size() - 1)))\n+        throw runtime_error(\"Register load requires NAME:FILENAME\");\n+\n+    string key = strInput.substr(0, pos);\n+    string filename = strInput.substr(pos + 1, string::npos);\n+\n+    FILE *f = fopen(filename.c_str(), \"r\");\n+    if (!f) {\n+        string strErr = \"Cannot open file \" + filename;\n+        throw runtime_error(strErr);\n+    }\n+\n+    // load file chunks into one big buffer\n+    string valStr;\n+    while ((!feof(f)) && (!ferror(f))) {\n+        char buf[4096];\n+        int bread = fread(buf, 1, sizeof(buf), f);\n+        if (bread <= 0)\n+            break;\n+\n+        valStr.insert(valStr.size(), buf, bread);\n+    }\n+\n+    if (ferror(f)) {\n+        string strErr = \"Error reading file \" + filename;\n+        throw runtime_error(strErr);\n+    }\n+\n+    fclose(f);\n+\n+    // evaluate as JSON buffer register\n+    RegisterSetJson(key, valStr);\n+}\n+\n+static void MutateTxVersion(CMutableTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newVersion = atoi64(cmdVal);\n+    if (newVersion < 1 || newVersion > CTransaction::CURRENT_VERSION)\n+        throw runtime_error(\"Invalid TX version requested\");\n+\n+    tx.nVersion = (int) newVersion;\n+}\n+\n+static void MutateTxLocktime(CMutableTransaction& tx, const string& cmdVal)\n+{\n+    int64_t newLocktime = atoi64(cmdVal);\n+    if (newLocktime < 0LL || newLocktime > 0xffffffffLL)\n+        throw runtime_error(\"Invalid TX locktime requested\");\n+\n+    tx.nLockTime = (unsigned int) newLocktime;\n+}\n+\n+static void MutateTxAddInput(CMutableTransaction& tx, const string& strInput)\n+{\n+    // separate TXID:VOUT in string\n+    size_t pos = strInput.find(':');\n+    if ((pos == string::npos) ||\n+        (pos == 0) ||\n+        (pos == (strInput.size() - 1)))\n+        throw runtime_error(\"TX input missing separator\");\n+\n+    // extract and validate TXID\n+    string strTxid = strInput.substr(0, pos);\n+    if ((strTxid.size() != 64) || !IsHex(strTxid))\n+        throw runtime_error(\"invalid TX input txid\");\n+    uint256 txid(strTxid);\n+\n+    static const unsigned int minTxOutSz = 9;\n+    static const unsigned int maxVout = MAX_BLOCK_SIZE / minTxOutSz;\n+\n+    // extract and validate vout\n+    string strVout = strInput.substr(pos + 1, string::npos);\n+    int vout = atoi(strVout);\n+    if ((vout < 0) || (vout > (int)maxVout))\n+        throw runtime_error(\"invalid TX input vout\");\n+\n+    // append to transaction input list\n+    CTxIn txin(txid, vout);\n+    tx.vin.push_back(txin);\n+}\n+\n+static void MutateTxAddOutAddr(CMutableTransaction& tx, const string& strInput)\n+{\n+    // separate VALUE:ADDRESS in string\n+    size_t pos = strInput.find(':');\n+    if ((pos == string::npos) ||\n+        (pos == 0) ||\n+        (pos == (strInput.size() - 1)))\n+        throw runtime_error(\"TX output missing separator\");\n+\n+    // extract and validate VALUE\n+    string strValue = strInput.substr(0, pos);\n+    int64_t value;\n+    if (!ParseMoney(strValue, value))\n+        throw runtime_error(\"invalid TX output value\");\n+\n+    // extract and validate ADDRESS\n+    string strAddr = strInput.substr(pos + 1, string::npos);\n+    CBitcoinAddress addr(strAddr);\n+    if (!addr.IsValid())\n+        throw runtime_error(\"invalid TX output address\");\n+\n+    // build standard output script via SetDestination()\n+    CScript scriptPubKey;\n+    scriptPubKey.SetDestination(addr.Get());\n+\n+    // construct TxOut, append to transaction output list\n+    CTxOut txout(value, scriptPubKey);\n+    tx.vout.push_back(txout);\n+}\n+\n+static void MutateTxAddOutScript(CMutableTransaction& tx, const string& strInput)\n+{\n+    // separate VALUE:SCRIPT in string\n+    size_t pos = strInput.find(':');\n+    if ((pos == string::npos) ||\n+        (pos == 0) ||\n+        (pos == (strInput.size() - 1)))\n+        throw runtime_error(\"TX output missing separator\");\n+\n+    // extract and validate VALUE\n+    string strValue = strInput.substr(0, pos);\n+    int64_t value;\n+    if (!ParseMoney(strValue, value))\n+        throw runtime_error(\"invalid TX output value\");\n+\n+    // extract and validate script\n+    string strScript = strInput.substr(pos + 1, string::npos);\n+    CScript scriptPubKey = ParseScript(strScript); // throws on err\n+\n+    // construct TxOut, append to transaction output list\n+    CTxOut txout(value, scriptPubKey);\n+    tx.vout.push_back(txout);\n+}\n+\n+static void MutateTxDelInput(CMutableTransaction& tx, const string& strInIdx)\n+{\n+    // parse requested deletion index\n+    int inIdx = atoi(strInIdx);\n+    if (inIdx < 0 || inIdx >= (int)tx.vin.size()) {\n+        string strErr = \"Invalid TX input index '\" + strInIdx + \"'\";\n+        throw runtime_error(strErr.c_str());\n+    }\n+\n+    // delete input from transaction\n+    tx.vin.erase(tx.vin.begin() + inIdx);\n+}\n+\n+static void MutateTxDelOutput(CMutableTransaction& tx, const string& strOutIdx)\n+{\n+    // parse requested deletion index\n+    int outIdx = atoi(strOutIdx);\n+    if (outIdx < 0 || outIdx >= (int)tx.vout.size()) {\n+        string strErr = \"Invalid TX output index '\" + strOutIdx + \"'\";\n+        throw runtime_error(strErr.c_str());\n+    }\n+\n+    // delete output from transaction\n+    tx.vout.erase(tx.vout.begin() + outIdx);\n+}\n+\n+static const unsigned int N_SIGHASH_OPTS = 6;\n+static const struct {\n+    const char *flagStr;\n+    int flags;\n+} sighashOptions[N_SIGHASH_OPTS] = {\n+    \"ALL\", SIGHASH_ALL,\n+    \"NONE\", SIGHASH_NONE,\n+    \"SINGLE\", SIGHASH_SINGLE,\n+    \"ALL|ANYONECANPAY\", SIGHASH_ALL|SIGHASH_ANYONECANPAY,\n+    \"NONE|ANYONECANPAY\", SIGHASH_NONE|SIGHASH_ANYONECANPAY,\n+    \"SINGLE|ANYONECANPAY\", SIGHASH_SINGLE|SIGHASH_ANYONECANPAY,\n+};\n+\n+static bool findSighashFlags(int& flags, const string& flagStr)\n+{\n+    flags = 0;\n+\n+    for (unsigned int i = 0; i < N_SIGHASH_OPTS; i++) {\n+        if (flagStr == sighashOptions[i].flagStr) {\n+            flags = sighashOptions[i].flags;\n+            return true;\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+uint256 ParseHashUO(map<string,UniValue>& o, string strKey)\n+{\n+    if (!o.count(strKey))\n+        return 0;\n+    return ParseHashUV(o[strKey], strKey);\n+}\n+\n+vector<unsigned char> ParseHexUO(map<string,UniValue>& o, string strKey)\n+{\n+    if (!o.count(strKey)) {\n+        vector<unsigned char> emptyVec;\n+        return emptyVec;\n+    }\n+    return ParseHexUV(o[strKey], strKey);\n+}\n+\n+static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n+{\n+    int nHashType = SIGHASH_ALL;\n+\n+    if (flagStr.size() > 0)\n+        if (!findSighashFlags(nHashType, flagStr))\n+            throw runtime_error(\"unknown sighash flag/sign option\");\n+\n+    vector<CTransaction> txVariants;\n+    txVariants.push_back(tx);\n+\n+    // mergedTx will end up with all the signatures; it\n+    // starts as a clone of the raw tx:\n+    CMutableTransaction mergedTx(txVariants[0]);\n+    bool fComplete = true;\n+    CCoinsView viewDummy;\n+    CCoinsViewCache view(viewDummy);\n+\n+    if (!registers.count(\"privatekeys\"))\n+        throw runtime_error(\"privatekeys register variable must be set.\");\n+    bool fGivenKeys = false;\n+    CBasicKeyStore tempKeystore;\n+    UniValue keysObj = registers[\"privatekeys\"];\n+    fGivenKeys = true;\n+\n+    for (unsigned int kidx = 0; kidx < keysObj.count(); kidx++) {\n+        if (!keysObj[kidx].isStr())\n+            throw runtime_error(\"privatekey not a string\");\n+        CBitcoinSecret vchSecret;\n+        bool fGood = vchSecret.SetString(keysObj[kidx].getValStr());\n+        if (!fGood)\n+            throw runtime_error(\"privatekey not valid\");\n+\n+        CKey key = vchSecret.GetKey();\n+        tempKeystore.AddKey(key);\n+    }\n+\n+    // Add previous txouts given in the RPC call:\n+    if (!registers.count(\"prevtxs\"))\n+        throw runtime_error(\"prevtxs register variable must be set.\");\n+    UniValue prevtxsObj = registers[\"privatekeys\"];\n+    {\n+        for (unsigned int previdx = 0; previdx < prevtxsObj.count(); previdx++) {\n+            UniValue prevOut = prevtxsObj[previdx];\n+            if (!prevOut.isObject())\n+                throw runtime_error(\"expected prevtxs internal object\");\n+\n+            map<string,UniValue::VType> types = map_list_of(\"txid\", UniValue::VSTR)(\"vout\",UniValue::VNUM)(\"scriptPubKey\",UniValue::VSTR);\n+            if (!prevOut.checkObject(types))\n+                throw runtime_error(\"prevtxs internal object typecheck fail\");\n+\n+            uint256 txid = ParseHashUV(prevOut, \"txid\");\n+\n+            int nOut = atoi(prevOut[\"vout\"].getValStr());\n+            if (nOut < 0)\n+                throw runtime_error(\"vout must be positive\");\n+\n+            vector<unsigned char> pkData(ParseHexUV(prevOut, \"scriptPubKey\"));\n+            CScript scriptPubKey(pkData.begin(), pkData.end());\n+\n+            CCoins coins;\n+            if (view.GetCoins(txid, coins)) {\n+                if (coins.IsAvailable(nOut) && coins.vout[nOut].scriptPubKey != scriptPubKey) {\n+                    string err(\"Previous output scriptPubKey mismatch:\\n\");\n+                    err = err + coins.vout[nOut].scriptPubKey.ToString() + \"\\nvs:\\n\"+\n+                        scriptPubKey.ToString();\n+                    throw runtime_error(err);\n+                }\n+                // what todo if txid is known, but the actual output isn't?\n+            }\n+            if ((unsigned int)nOut >= coins.vout.size())\n+                coins.vout.resize(nOut+1);\n+            coins.vout[nOut].scriptPubKey = scriptPubKey;\n+            coins.vout[nOut].nValue = 0; // we don't know the actual output value\n+            view.SetCoins(txid, coins);\n+\n+            // if redeemScript given and not using the local wallet (private keys",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#discussion_r15442817",
      "id" : 15442817,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1NDQyODE3",
      "original_commit_id" : "d362e9e2d050e6f6b01a08e5471fff4fb2ab0746",
      "original_line" : null,
      "original_position" : 400,
      "original_start_line" : null,
      "path" : "src/bitcoin-tx.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4332",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15442817/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-07-29T15:17:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/15442817",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Mildly tested ACK (but please add at least some warning for invalidly encoded transactions).\n",
      "created_at" : "2014-07-28T00:00:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50290300",
      "id" : 50290300,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMjkwMzAw",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50290300/reactions"
      },
      "updated_at" : "2014-07-28T00:01:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50290300",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "All feedback addressed.\n",
      "created_at" : "2014-07-28T04:24:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50299179",
      "id" : 50299179,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMjk5MTc5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50299179/reactions"
      },
      "updated_at" : "2014-07-28T04:24:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50299179",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK.\n\nPS: the getArray and getObject methods are unused now. Care to remove them?\n",
      "created_at" : "2014-07-28T13:56:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50341052",
      "id" : 50341052,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMzQxMDUy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50341052/reactions"
      },
      "updated_at" : "2014-07-28T13:56:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50341052",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa I'll promise not to forget your request to delete them.  :)  They are used in the off-github \"convert tree to univalue\" branch.  I need to update that to make them go away.\n",
      "created_at" : "2014-07-28T14:22:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50344513",
      "id" : 50344513,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwMzQ0NTEz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50344513/reactions"
      },
      "updated_at" : "2014-07-28T14:22:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50344513",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "There's --enable-daemon, --enable-cli, --enable-gui and --enable-tests. No --enable-txtool?\n",
      "created_at" : "2014-07-28T21:38:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50405723",
      "id" : 50405723,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNDA1NzIz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50405723/reactions"
      },
      "updated_at" : "2014-07-28T21:38:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50405723",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa A fair question.  @laanwj or @theuni asked same on IRC.  Most distros build everything then pick out what they need.  Many projects do not bother with --enable-just-this-one-tool, or find that such configure script features have a user count approaching 1.\n\nIt is needless complexity.  I would prefer to (a) not add --enable-txtool unless a user really needs it, and (b) consider removing the --enable-just-this-one-tool commands.\n\nThe main user build choice vis a vis build time & libs is GUI or not.  Everything else quickly reaches a point of diminishing returns.\n",
      "created_at" : "2014-07-28T21:57:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50408076",
      "id" : 50408076,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNDA4MDc2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50408076/reactions"
      },
      "updated_at" : "2014-07-28T21:57:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50408076",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "BTW; I suppose it should be discouraged to pass private keys on the command line. However, the only alternative at the moment is reading them from a 'register' file. How to handle this securely, maybe an option to read an object from stdin?\n",
      "created_at" : "2014-07-29T07:39:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50444973",
      "id" : 50444973,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNDQ0OTcz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50444973/reactions"
      },
      "updated_at" : "2014-07-29T07:39:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50444973",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Eh, at least keep the option to enable/disable building the GUI! I'm also quite sure that some people have come to rely on options for enabling/disabling the other executables so if it's not too much trouble I'd prefer to keep them.\n",
      "created_at" : "2014-07-29T07:44:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50445323",
      "id" : 50445323,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNDQ1MzIz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50445323/reactions"
      },
      "updated_at" : "2014-07-29T12:25:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50445323",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Squash some commits? :)\n",
      "created_at" : "2014-07-29T12:20:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50468572",
      "id" : 50468572,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNDY4NTcy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50468572/reactions"
      },
      "updated_at" : "2014-07-29T12:20:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50468572",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased and commits collapsed.\n",
      "created_at" : "2014-07-29T15:18:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50490796",
      "id" : 50490796,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNDkwNzk2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50490796/reactions"
      },
      "updated_at" : "2014-07-29T15:18:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50490796",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=4",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "node_id" : "MDQ6VXNlcjQ5NDQxMQ==",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4332_cbe39a38526a6c17619d02cc697b80ebfd57203b/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.\n",
      "created_at" : "2014-07-29T15:34:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4332#issuecomment-50493399",
      "id" : 50493399,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4332",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNDkzMzk5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50493399/reactions"
      },
      "updated_at" : "2014-07-29T15:34:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/50493399",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2110907?v=4",
         "events_url" : "https://api.github.com/users/BitcoinPullTester/events{/privacy}",
         "followers_url" : "https://api.github.com/users/BitcoinPullTester/followers",
         "following_url" : "https://api.github.com/users/BitcoinPullTester/following{/other_user}",
         "gists_url" : "https://api.github.com/users/BitcoinPullTester/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/BitcoinPullTester",
         "id" : 2110907,
         "login" : "BitcoinPullTester",
         "node_id" : "MDQ6VXNlcjIxMTA5MDc=",
         "organizations_url" : "https://api.github.com/users/BitcoinPullTester/orgs",
         "received_events_url" : "https://api.github.com/users/BitcoinPullTester/received_events",
         "repos_url" : "https://api.github.com/users/BitcoinPullTester/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/BitcoinPullTester/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/BitcoinPullTester/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/BitcoinPullTester"
      }
   }
]
