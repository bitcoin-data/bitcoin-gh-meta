[
   {
      "author_association" : "MEMBER",
      "body" : "One example where it would have been possible to keep the format, by making the fuzz code more complicated was commit fa0f4157098ea68169ced44730986d0ed2c3a5aa. I chose to invalidate the seeds instead.",
      "created_at" : "2021-01-03T09:11:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20837#issuecomment-753588680",
      "id" : 753588680,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20837",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzU4ODY4MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-03T09:11:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753588680",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> It would be nonsensical to hold back on changing Bitcoin Core code (e.g. validation code) to not invalidate fuzz inputs.\r\n\r\nAgreed. I have been wondering about what aspirational goal we should be aiming for in the future. An informal fuzzing \"team\" that would monitor when existing seeds are invalidated through changes to Core code. Or all long term contributors updating fuzz seeds when they invalidate them through opening a PR. At least in the short term the latter doesn't seem viable. A number of long term contributors are missing basic understanding of fuzzing currently.\r\n\r\nThe fuzz seeds are cheap to produce unless they have been carefully chosen. If there has been a lot of thought expended in choosing particular seeds this should be documented somewhere so that when invalidated they can be easily replaced. At the moment there doesn't seem to be much documentation on the thought process behind seeds in the [seed corpus](https://github.com/bitcoin-core/qa-assets/tree/master/fuzz_seed_corpus).",
      "created_at" : "2021-01-03T12:03:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20837#issuecomment-753606787",
      "id" : 753606787,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20837",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzYwNjc4Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-03T12:03:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753606787",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> A number of long term contributors are missing basic understanding of fuzzing currently.\r\n\r\nRunning the fuzzers should be straightforward: https://github.com/bitcoin/bitcoin/blob/master/doc/fuzzing.md . Also, the concept of fuzzing isn't really that hard. However, the Bitcoin Core code base isn't \"optimized\" for fuzzing (e.g. globals, background threads, non-mockable disk access, net processing dealing also with deserialization ...), so working on fuzzers for Bitcoin Core sometimes becomes tricky. For general guidelines on writing fuzzers, you can take a look at https://github.com/google/fuzzing/blob/master/docs/intro-to-fuzzing.md\r\n\r\n> The fuzz seeds are cheap to produce unless they have been carefully chosen.\r\n\r\nCorrect. I think we should aim to write fuzzers that can explore the search space from scratch in a reasonable amount of time. Like mentioned before, this isn't the case for all Bitcoin Core fuzz targets. There are plenty of hashes, checksums, signatures, POW checks, serialization specifics ... etc that make it harder to find good fuzz inputs. Code coverage reports help in finding weak spots, and then specifically crafted seeds (either manually or extracted from real world data like the block files or socket buffers) can help to increase coverage.\r\n\r\nIt is a pity if those seeds get lost due to invalidation, and I think our best bet is to rely on the fuzz engine to translate them for us if it is possible. For exmaple the breakage caused by commit fa0f415 should be fixable with some trivial bit flips or similar.",
      "created_at" : "2021-01-03T12:45:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20837#issuecomment-753611775",
      "id" : 753611775,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20837",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzYxMTc3NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-03T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753611775",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "100% agree on continuous fuzz-testing to update the qa-assets corpus with it, and improving the code so fuzzing inputs are simpler for the fuzzer to generate.\r\n\r\nBut I still think we should make modest efforts to minimise corpus invalidation though -- mostly just so that adding/removing cases doesn't automatically invalidate the test's corpus (ie, replace disappearing tests with a no-op; if a case is selected that's above the number of cases we have, don't modulo it, just do a no-op). Switching to that approach does invalidate current cases, but not any worse than adding a case already does, I think; and it seems pretty maintainable to me?\r\n\r\nNote that renumbering cases means that a case that has k iterations through the loop needs each of its k choices to be fuzzed to from the old to the new values to remain equivalent, which isn't a big deal, but I don't think it's entirely trivial? Mostly just seems unnecessarily wasteful to me.",
      "created_at" : "2021-01-04T00:47:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20837#issuecomment-753704607",
      "id" : 753704607,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20837",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzcwNDYwNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-04T00:47:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753704607",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> mostly just so that adding/removing cases doesn't automatically invalidate the test's corpus\r\n\r\nThis is only one specific case where invalidation can be avoided somewhat trivially. And it doesn't even help in all cases. E.g. commit fa0f415 wouldn't be fixed by just that. Starting to accommodate some cases of seed invalidation opens the door to accommodate all or most of them. And then our fuzzing code will just explode to an unmaintainable mess. For example, how would you deal with removal/insertion of serialized values into the fuzz input format? See commit faaa4f2b6af4ce249fc4809a030240afa45b1a33, which removes a serialized 32 bit value.",
      "created_at" : "2021-01-04T08:22:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20837#issuecomment-753831188",
      "id" : 753831188,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20837",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzgzMTE4OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-04T08:22:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753831188",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> This is only one specific case where invalidation can be avoided somewhat trivially.\r\n\r\nYeah, I'm only suggesting avoiding it when it can be avoided somewhat trivially.\r\n\r\n> For example, how would you deal with ...\r\n\r\nIf we wanted something to seriously minimise invalidation, I think we'd need to approach fuzz input like an upgradable file format -- perhaps something like an initial extensible header controlling setup, followed by a sequence of type-length-value blocks controlling how the test should continue. Something like that *might* be worth exploring -- it might make it easier to write tests, not just avoid invalidating things; but it's not especially easy, and even then, I do think we'd still want to invalidate cases every now and then to avoid accumulating cruft indefinitely.",
      "created_at" : "2021-01-05T00:01:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20837#issuecomment-754298784",
      "id" : 754298784,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20837",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NDI5ODc4NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-05T00:01:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754298784",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> followed by a sequence of type-length-value blocks controlling how the test should continue\r\n\r\nFuzz engines can't typically deal with TLVs (see https://github.com/google/fuzzing/blob/master/docs/split-inputs.md#type-length-value ). So we''d probably have to use the `LLVMFuzzerCustomMutator`, which again comes with downsides. The most important one likely that our fuzz targets are no longer fuzz engine agnostic.\r\n\r\n> we'd still want to invalidate cases every now and then to avoid accumulating cruft indefinitely.\r\n\r\nThis is just asking for more code churn. Every format change will be accompanied by two code changes and without a clear guideline, leaves room for bikeshedding.\r\nMaybe if there was a `TODO FUZZ_CLEANUP_22_0` comment, the cleanups could be done in a single swipe, but I'd still be sceptical.",
      "created_at" : "2021-01-05T09:04:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20837#issuecomment-754505318",
      "id" : 754505318,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20837",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NDUwNTMxOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-05T09:04:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754505318",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Like I said, I'm only suggesting avoiding invalidation when it's basically trivial. Don't really want to get bogged down in hypotheticals...\r\n\r\nI think it'd probably be good to automatically generate fuzzer data for:\r\n\r\n - master\r\n - release branches\r\n - open PRs\r\n\r\nAt present, if a PR invalidates part of the corpus (or just introduces a new fuzzer) and the author doesn't update qa-assets themselves, that PR's fuzzing will only be useful after its merged, rather than in CI, which seems less than great? Maybe detectable by code-coverage stats going down, but not sure that's easy to notice currently?\r\n\r\nMaybe just having different corpuses for each of those, and merging/minimising them when a PR gets merged into master would work?",
      "created_at" : "2021-01-13T03:41:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20837#issuecomment-759184399",
      "id" : 759184399,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20837",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1OTE4NDM5OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-13T03:41:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/759184399",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Like I said, I'm only suggesting avoiding invalidation when it's basically trivial. Don't really want to get bogged down in hypotheticals...\r\n\r\nFair enough. Though, those trivial cases should be rare enough to not yield any benefit given the overhead to having to remember when and how to invalidate them at a later point in time. Except for `script_flags` and `process_messages`, all remaining 150 fuzz targets can reach the current coverage with just minutes of CPU time. (Citation/Benchmark needed)\r\n\r\n> At present, if a PR invalidates ...\r\n\r\nSounds like a good idea. I was thinking about passing -max_total_time to the fuzz engine even when run in ci-mode, but all fuzz targets take a different time, so it would be nicer if there was a -additional_fuzz_time_after_init option. The generated corpus would be lost as soon as the ci box cycles, but that doesn't hurt because the coverage will quickly be re-generated by our fuzz farms once the pull is merged.\r\n\r\nMaybe it is good enough to just set `-max_total_time=30` and thus skip generation if the existing seeds take longer than that to read.",
      "created_at" : "2021-01-13T17:15:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20837#issuecomment-759593636",
      "id" : 759593636,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20837",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1OTU5MzYzNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-13T17:19:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/759593636",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "As suggested by @MarcoFalke in #20828 the following comment I wrote in https://github.com/bitcoin/bitcoin/pull/20828#issuecomment-759634453 about avoiding unnecessary invalidation might be of interest in this thread:\r\n\r\n---\r\n\r\nWhen using the `switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, N))` idiom it is worth noting that every time `N` is increased by one to accommodate for a new `case` all existing seeds are invalidated.\r\n\r\nExample (all using the same fixed seed input in the form of a finite scream `AAAAAAAAAAAAAAAAAAAAAAAAA`):\r\n\r\n```\r\nFuzzedDataProvider{buffer.data(), buffer.size()}.ConsumeIntegralInRange<int>(0, 1) == 1\r\nFuzzedDataProvider{buffer.data(), buffer.size()}.ConsumeIntegralInRange<int>(0, 2) == 2\r\nFuzzedDataProvider{buffer.data(), buffer.size()}.ConsumeIntegralInRange<int>(0, 3) == 1\r\nFuzzedDataProvider{buffer.data(), buffer.size()}.ConsumeIntegralInRange<int>(0, 4) == 0\r\nFuzzedDataProvider{buffer.data(), buffer.size()}.ConsumeIntegralInRange<int>(0, 5) == 5\r\nFuzzedDataProvider{buffer.data(), buffer.size()}.ConsumeIntegralInRange<int>(0, 6) == 2\r\nFuzzedDataProvider{buffer.data(), buffer.size()}.ConsumeIntegralInRange<int>(0, 7) == 1\r\nFuzzedDataProvider{buffer.data(), buffer.size()}.ConsumeIntegralInRange<int>(0, 8) == 2\r\nFuzzedDataProvider{buffer.data(), buffer.size()}.ConsumeIntegralInRange<int>(0, 9) == 5\r\nFuzzedDataProvider{buffer.data(), buffer.size()}.ConsumeIntegralInRange<int>(0, 10) == 10\r\nFuzzedDataProvider{buffer.data(), buffer.size()}.ConsumeIntegralInRange<int>(0, 11) == 5\r\n```\r\n\r\nOne trick that can be used to tackle this is to choose from a larger range such as `[0, 32]` even if we only have say 12 `case`:s (`[0, 11]`). The non-matching numbers `[12, 32]` will simply be \"ignored\" by the coverage-guided fuzzer.\r\n\r\nThat way we'll only have to invalidate existing seeds when we've exhausted the entire range `[0, 32]` with matching `case`:s. Then we can bump to `[0, 64]`, and so on.\r\n\r\nIn other words: instead of invalidating every time we add a new `case` we'll be invalidating every some-power-of-2:th time we add a new `case` :)",
      "created_at" : "2021-01-13T18:38:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20837#issuecomment-759641081",
      "id" : 759641081,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20837",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1OTY0MTA4MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-13T18:39:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/759641081",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> all remaining 150 fuzz targets can reach the current coverage with just minutes of CPU time.\r\n\r\nI'm not sure whether that's awesome or a sign our fuzzing doesn't go deep enough :)",
      "created_at" : "2021-01-14T07:06:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20837#issuecomment-759972933",
      "id" : 759972933,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20837",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1OTk3MjkzMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-14T07:06:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/759972933",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Whoever is going to invalidate the banman seeds should at least apply this patch:\r\n\r\n```diff\r\ndiff --git a/src/test/fuzz/banman.cpp b/src/test/fuzz/banman.cpp\r\nindex e703fa39c1..23b2de288a 100644\r\n--- a/src/test/fuzz/banman.cpp\r\n+++ b/src/test/fuzz/banman.cpp\r\n@@ -51,7 +51,6 @@ FUZZ_TARGET_INIT(banman, initialize_banman)\r\n                 [&] {\r\n                     ban_man.ClearBanned();\r\n                 },\r\n-                [] {},\r\n                 [&] {\r\n                     ban_man.IsBanned(ConsumeNetAddr(fuzzed_data_provider));\r\n                 },\r\n@@ -71,7 +70,6 @@ FUZZ_TARGET_INIT(banman, initialize_banman)\r\n                 [&] {\r\n                     ban_man.DumpBanlist();\r\n                 },\r\n-                [] {},\r\n                 [&] {\r\n                     ban_man.Discourage(ConsumeNetAddr(fuzzed_data_provider));\r\n                 });\r\n",
      "created_at" : "2021-01-14T10:12:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20837#issuecomment-760097060",
      "id" : 760097060,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20837",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2MDA5NzA2MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-14T10:12:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760097060",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > all remaining 150 fuzz targets can reach the current coverage with just minutes of CPU time.\r\n> \r\n> I'm not sure whether that's awesome or a sign our fuzzing doesn't go deep enough :)\r\n\r\nFor reference, with targets having increased in complexity (`rpc`, `bannman`, ...) this is no longer true.",
      "created_at" : "2021-07-31T08:15:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20837#issuecomment-890310126",
      "id" : 890310126,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20837",
      "node_id" : "IC_kwDOABII5841EQ3u",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-31T08:15:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/890310126",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> In other words: instead of invalidating every time we add a new case we'll be invalidating every some-power-of-2:th time we add a new case :)\r\n\r\n\r\nI looked into something like this, but concluded it was not worth it. While it is cheap to implement, adding new cases is rarer than removing existing cases. And removing existing cases would still break the inputs with this method, just like before.",
      "created_at" : "2021-08-25T09:33:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20837#issuecomment-905339960",
      "id" : 905339960,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20837",
      "node_id" : "IC_kwDOABII58419mQ4",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-25T09:33:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/905339960",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Closing for now, but please let us know if there is a practical solution",
      "created_at" : "2022-03-29T15:41:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20837#issuecomment-1082038992",
      "id" : 1082038992,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20837",
      "node_id" : "IC_kwDOABII585AfprQ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1082038992/reactions"
      },
      "updated_at" : "2022-03-29T15:41:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1082038992",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
