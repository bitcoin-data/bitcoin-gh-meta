[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20833 (rpc/validation: enable packages through testmempoolaccept by glozow)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-01-03T11:28:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-753602797",
      "id" : 753602797,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzYwMjc5Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-08T07:33:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753602797",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK. Great PR description, really informative. \r\n\r\nIs there anything in particular you'd recommend a reviewer do to assure themselves that removing this code doesn't cause any problems beyond the usual building, running tests etc?",
      "created_at" : "2021-01-03T13:51:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-753620266",
      "id" : 753620266,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzYyMDI2Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-03T13:51:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753620266",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r551031030"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/551031030"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I assumed this was protecting against corruption of the utxo set on disk, but that doesn't seem to be the case. `coin` will be from disk as well.",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-03T17:13:08Z",
      "diff_hunk" : "@@ -404,43 +404,6 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n-// Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n-// were somehow broken and returning the wrong scriptPubKeys\n-static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n-    AssertLockHeld(cs_main);\n-\n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n-    // to enforce that mempool doesn't change between when we check the view\n-    // and when we actually call through to CheckInputScripts\n-    LOCK(pool.cs);\n-\n-    assert(!tx.IsCoinBase());\n-    for (const CTxIn& txin : tx.vin) {\n-        const Coin& coin = view.AccessCoin(txin.prevout);\n-\n-        // AcceptToMemoryPoolWorker has already checked that the coins are\n-        // available, so this shouldn't fail. If the inputs are not available\n-        // here then return false.\n-        if (coin.IsSpent()) return false;\n-\n-        // Check equivalence for available inputs.\n-        const CTransactionRef& txFrom = pool.get(txin.prevout.hash);\n-        if (txFrom) {\n-            assert(txFrom->GetHash() == txin.prevout.hash);\n-            assert(txFrom->vout.size() > txin.prevout.n);\n-            assert(txFrom->vout[txin.prevout.n] == coin.out);\n-        } else {\n-            const Coin& coinFromDisk = ::ChainstateActive().CoinsTip().AccessCoin(txin.prevout);\n-            assert(!coinFromDisk.IsSpent());\n-            assert(coinFromDisk.out == coin.out);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r551031030",
      "id" : 551031030,
      "line" : 436,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAzMTAzMA==",
      "original_commit_id" : "bf995d8267019c0ecec8651186ffadb008121a6e",
      "original_line" : 436,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 51,
      "pull_request_review_id" : 560712203,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-12T10:28:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/551031030",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@michaelfolkson good question. You could go line-by-line in the function and verify that what I said in the description is true, i.e. that each one is done earlier in ATMP. And then you can also look at what `cs_main` and `pool.cs` guarantee wrt consistency so you can say \"yeah, this wouldn't change.\" Might be fun to trace the coinsview through ATMP with some logs. If you prefer writing code, you can try to break it, e.g. with a [functional test](https://github.com/bitcoin/bitcoin/pull/20833/files#diff-2757e99ad43064441a6401f5002232a6a311d92d16b49df66f51d427ce448a68R86) with badly formed/similar but conflicting Coins. ",
      "created_at" : "2021-01-03T18:48:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-753660173",
      "id" : 753660173,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzY2MDE3Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-03T18:48:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753660173",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r551917492"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/551917492"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is that true? `AccessCoin()` doesn't necessarily hit the disk. It could be pulling the coin from the cache.",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-05T13:01:14Z",
      "diff_hunk" : "@@ -404,43 +404,6 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n-// Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n-// were somehow broken and returning the wrong scriptPubKeys\n-static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n-    AssertLockHeld(cs_main);\n-\n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n-    // to enforce that mempool doesn't change between when we check the view\n-    // and when we actually call through to CheckInputScripts\n-    LOCK(pool.cs);\n-\n-    assert(!tx.IsCoinBase());\n-    for (const CTxIn& txin : tx.vin) {\n-        const Coin& coin = view.AccessCoin(txin.prevout);\n-\n-        // AcceptToMemoryPoolWorker has already checked that the coins are\n-        // available, so this shouldn't fail. If the inputs are not available\n-        // here then return false.\n-        if (coin.IsSpent()) return false;\n-\n-        // Check equivalence for available inputs.\n-        const CTransactionRef& txFrom = pool.get(txin.prevout.hash);\n-        if (txFrom) {\n-            assert(txFrom->GetHash() == txin.prevout.hash);\n-            assert(txFrom->vout.size() > txin.prevout.n);\n-            assert(txFrom->vout[txin.prevout.n] == coin.out);\n-        } else {\n-            const Coin& coinFromDisk = ::ChainstateActive().CoinsTip().AccessCoin(txin.prevout);\n-            assert(!coinFromDisk.IsSpent());\n-            assert(coinFromDisk.out == coin.out);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r551917492",
      "id" : 551917492,
      "in_reply_to_id" : 551031030,
      "line" : 436,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNzQ5Mg==",
      "original_commit_id" : "bf995d8267019c0ecec8651186ffadb008121a6e",
      "original_line" : 436,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 51,
      "pull_request_review_id" : 561768425,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-12T10:28:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/551917492",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This code was added in commit https://github.com/bitcoin/bitcoin/commit/b014668e27b496bd6ad30985294f3d6971311910, specifically in response to this review comment: https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-295316813.\r\n\r\nThe code was added here: https://github.com/bitcoin/bitcoin/pull/10192#event-1049081888 before the change to per-txout db and later rebased: https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-306359178.\r\n\r\nI believe the reasoning is as follows:\r\n\r\n- if there's a bug in CCoinsViewMempool (e.g. returning the wrong coin when looking up by txid), then the script cache could cache an incorrect outcome for script validation. That is then used as an input to validating a block, meaning that CCoinsViewMempool has become part of consensus.\r\n- therefore, explicitly check that the hash of scriptPubKey returned by CCoinsViewMempool for this outpoint is correct. Either:\r\n  - fetch the entire transaction from the mempool via `pool.get()` and check that the hash is committing to the scriptPubKey; or\r\n  - lookup the coin in the UTXO set (pcoinsTip) and check that the scriptPubKey matches. Despite the name `coinFromDisk`, I believe that the coin could be fetched either from disk or the in-memory pcoinsTip cache. pcoinsTip is already part of consensus, so if it's returning bad data, then we're already in trouble.\r\n\r\nI'm not sure we really need this. We could move these checks to immediately after the coins are fetched from CCoinsViewMempool. At that point we're basically adding duplicate code to ensure that there isn't a bug in CCoinsViewMempool, which itself is only a few lines of code. We may as well just move CCoinsViewMempool into validation.cpp as suggested in the original PR by @sdaftuar:\r\n\r\n> as per offline discussion, perhaps just move CCoinsViewMemPool into validation.cpp to make it clear it's part of consensus, and sanity check the results from the mempool.\r\n\r\nAnother interesting thing to note is that at the time this was introduced, the mempool lock was not held for the duration of ATMP (e.g. it'd be released after this block: https://github.com/bitcoin/bitcoin/blob/b014668e27b496bd6ad30985294f3d6971311910/src/validation.cpp#L528-L572). That was added later in #12368. I don't think it actually changes anything for the purposes of ATMP (since cs_main was held for the duration), but it does make expectations clearer.",
      "created_at" : "2021-01-05T14:00:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-754652998",
      "id" : 754652998,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NDY1Mjk5OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-05T14:00:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754652998",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'm pretty skeptical of this change.  I think the OP downplays the consensus risk if a bug is introduced in the CCoinsViewMempool or the mempool (which CCoinsViewMempool relies on).\r\n\r\nI also took a quick look at #20833, and it seems to make that code much higher risk if we would be turning CCoinsViewMempool into something consensus critical and then make a bunch of changes to it.  Is there a method for implementing #20833 that does not require this?\r\n\r\n(I was going to suggest looking at what I proposed in #16401, which faced the same issue, but now I suspect there may be a ~~consensus~~ bug there as well -- yikes.  EDIT: Looked into this a bit more, I believe #16401 had a bug relating to packages of transactions that conflict with themselves, because the duplicate inputs check only occurs on a per-transaction basis, so when processing a package we need to check for duplicate inputs across the whole package.  But that seems like an easy fix (and #20833 seems to address this exact issue already), so now I think that the structure/usage of CCoinsViewMempool and CIFMAC implemented there may work after all?)",
      "created_at" : "2021-01-05T15:31:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-754708905",
      "id" : 754708905,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NDcwODkwNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-05T17:52:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754708905",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552148046"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552148046"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Everything after \", and it cannot have pruned ...\" can be removed. There's no such thing as pruned coins cache entries since per-txout db.",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-05T19:32:12Z",
      "diff_hunk" : "@@ -167,6 +167,24 @@ namespace {\n     std::set<int> setDirtyFileInfo;\n } // anon namespace\n \n+CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n+\n+bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n+    // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n+    // transactions. First checking the underlying cache risks returning a pruned entry instead.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552148046",
      "id" : 552148046,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE0ODA0Ng==",
      "original_commit_id" : "747ae56cf7ffe3f7df570e02db36bb5953b9fa53",
      "original_line" : 175,
      "original_position" : 9,
      "original_start_line" : 174,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562072263,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-12T10:28:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552148046",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jnewbery @sdaftuar Thanks for your input and for digging into things! I agree that a bug here would be awful as we could potentially cache incorrect script checks, affecting consensus. I think these lines from CIFMAC are a nice sanity check:\r\n``` c\r\n        const CTransactionRef& txFrom = m_pool.get(txin.prevout.hash);\r\n        if (txFrom) {\r\n            assert(txFrom->GetHash() == txin.prevout.hash);\r\n            assert(txFrom->vout.size() > txin.prevout.n);\r\n            assert(txFrom->vout[txin.prevout.n] == coin.out);\r\n        } else {\r\n            const Coin& coinFromDisk = ::ChainstateActive().CoinsTip().AccessCoin(txin.prevout);\r\n            assert(!coinFromDisk.IsSpent());\r\n            assert(coinFromDisk.out == coin.out);\r\n        }\r\n```\r\n\r\nThe main issues are with them being so late in ATMP.\r\n> > as per offline discussion, perhaps just move CCoinsViewMemPool into validation.cpp to make it clear it's part of consensus, and sanity check the results from the mempool.\r\n\r\n> We could move these checks to immediately after the coins are fetched from CCoinsViewMempool.\r\n\r\nI've moved `CCoinsViewMemPool` to validation and moved the sanity checks to `PreChecks` (instead of removing them), right after we get the coins. Now that we hold the lock throughout ATMP, I hope it's clear we don't need to do these exact same checks again later.\r\n> I believe #16401 had a bug relating to packages of transactions that conflict with themselves, because the duplicate inputs check only occurs on a per-transaction basis, so when processing a package we need to check for duplicate inputs across the whole package. But that seems like an easy fix (and #20833 seems to address this exact issue already)\r\n\r\nYes exactly, this cleanup came up while I was trying to figure out conflicting transactions. I did a light rebase of #20833 on top of this and [this condition](https://github.com/glozow/bitcoin/commit/df88ce2761d3b9ff16949864c3f710b3ad5761ee#) needs to be added, but otherwise it still works.\r\n\r\n\r\n\r\n",
      "created_at" : "2021-01-05T19:33:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-754851634",
      "id" : 754851634,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NDg1MTYzNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-05T19:33:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754851634",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552150626"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552150626"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Oh true. I do fix this in #20833... should I do it here instead?",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-05T19:37:12Z",
      "diff_hunk" : "@@ -167,6 +167,24 @@ namespace {\n     std::set<int> setDirtyFileInfo;\n } // anon namespace\n \n+CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n+\n+bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n+    // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n+    // transactions. First checking the underlying cache risks returning a pruned entry instead.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552150626",
      "id" : 552150626,
      "in_reply_to_id" : 552148046,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE1MDYyNg==",
      "original_commit_id" : "747ae56cf7ffe3f7df570e02db36bb5953b9fa53",
      "original_line" : 175,
      "original_position" : 9,
      "original_start_line" : 174,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562075598,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-12T10:28:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552150626",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552166146"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552166146"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Up to you. I only mention it here because you're touching this code, but if you want to keep this move-only, then that's fine as well.",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-05T20:07:47Z",
      "diff_hunk" : "@@ -167,6 +167,24 @@ namespace {\n     std::set<int> setDirtyFileInfo;\n } // anon namespace\n \n+CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n+\n+bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n+    // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n+    // transactions. First checking the underlying cache risks returning a pruned entry instead.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552166146",
      "id" : 552166146,
      "in_reply_to_id" : 552148046,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE2NjE0Ng==",
      "original_commit_id" : "747ae56cf7ffe3f7df570e02db36bb5953b9fa53",
      "original_line" : 175,
      "original_position" : 9,
      "original_start_line" : 174,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562095545,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-12T10:28:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552166146",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I am not sure if this message is for me ,However I wont touch anything\nuntil you return a pruned entry.\n\n\nOn Tue, Jan 5, 2021 at 3:10 PM John Newbery <notifications@github.com>\nwrote:\n\n> *@jnewbery* commented on this pull request.\n> ------------------------------\n>\n> In src/validation.cpp\n> <https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552166146>:\n>\n> > +    // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n> +    // transactions. First checking the underlying cache risks returning a pruned entry instead.\n>\n> Up to you. I only mention it here because you're touching this code, but\n> if you want to keep this move-only, then that's fine as well.\n>\n> â\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552166146>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AJ3ZHMOQG7YAFUBPVIQQI5TSYNW2BANCNFSM4VRU5IHQ>\n> .\n>\n",
      "created_at" : "2021-01-05T20:49:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-754890832",
      "id" : 754890832,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NDg5MDgzMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-05T20:49:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754890832",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/41391025?v=4",
         "events_url" : "https://api.github.com/users/sheffine/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sheffine/followers",
         "following_url" : "https://api.github.com/users/sheffine/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sheffine/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sheffine",
         "id" : 41391025,
         "login" : "sheffine",
         "node_id" : "MDQ6VXNlcjQxMzkxMDI1",
         "organizations_url" : "https://api.github.com/users/sheffine/orgs",
         "received_events_url" : "https://api.github.com/users/sheffine/received_events",
         "repos_url" : "https://api.github.com/users/sheffine/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sheffine/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sheffine/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sheffine"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552403127"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552403127"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in which case `coin` would also be from the cache, no?",
      "commit_id" : "747ae56cf7ffe3f7df570e02db36bb5953b9fa53",
      "created_at" : "2021-01-06T07:01:53Z",
      "diff_hunk" : "@@ -404,43 +404,6 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n-// Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n-// were somehow broken and returning the wrong scriptPubKeys\n-static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n-    AssertLockHeld(cs_main);\n-\n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n-    // to enforce that mempool doesn't change between when we check the view\n-    // and when we actually call through to CheckInputScripts\n-    LOCK(pool.cs);\n-\n-    assert(!tx.IsCoinBase());\n-    for (const CTxIn& txin : tx.vin) {\n-        const Coin& coin = view.AccessCoin(txin.prevout);\n-\n-        // AcceptToMemoryPoolWorker has already checked that the coins are\n-        // available, so this shouldn't fail. If the inputs are not available\n-        // here then return false.\n-        if (coin.IsSpent()) return false;\n-\n-        // Check equivalence for available inputs.\n-        const CTransactionRef& txFrom = pool.get(txin.prevout.hash);\n-        if (txFrom) {\n-            assert(txFrom->GetHash() == txin.prevout.hash);\n-            assert(txFrom->vout.size() > txin.prevout.n);\n-            assert(txFrom->vout[txin.prevout.n] == coin.out);\n-        } else {\n-            const Coin& coinFromDisk = ::ChainstateActive().CoinsTip().AccessCoin(txin.prevout);\n-            assert(!coinFromDisk.IsSpent());\n-            assert(coinFromDisk.out == coin.out);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552403127",
      "id" : 552403127,
      "in_reply_to_id" : 551031030,
      "line" : 436,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQwMzEyNw==",
      "original_commit_id" : "bf995d8267019c0ecec8651186ffadb008121a6e",
      "original_line" : 436,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 58,
      "pull_request_review_id" : 562364827,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-06T07:01:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552403127",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I like the way this is going. CCoinsViewMempool should live in validation.cpp and be considered consensus critical since script caching was introduced. Making that clear by reflecting it in the code structure, rather than working around it by double checking the results returned from CCoinsViewCache seems like an improvement.\r\n\r\nAs far as I'm aware, CTxMemPool is not consensus critical, since any bugs in there would not cause us to incorrectly validate a block. Making the boundary between consensus-critical and non-consensus-critical code clearer is a good goal and fits with the current direction of the project (eg see #20158).\r\n\r\nIt'd be nice to eventually have ChainstateActive expose a GetCoin() method that returns a coin from the UTXO set or mempool so that callers (rpc, rest, etc) don't need to concern themselves with locking cs_main/mempool.cs and setting the coins view. After that happens, CCoinsViewMempool can exist just in validation.cpp and not be exposed in the header.",
      "created_at" : "2021-01-06T12:09:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-755263880",
      "id" : 755263880,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NTI2Mzg4MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-06T12:09:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/755263880",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552628862"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552628862"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Could explain a bit more what this sanity check is doing? Maybe a oneline summary of https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-754652998 ?",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-06T13:49:14Z",
      "diff_hunk" : "@@ -658,6 +639,19 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n             // Otherwise assume this might be an orphan tx for which we just haven't seen parents yet\n             return state.Invalid(TxValidationResult::TX_MISSING_INPUTS, \"bad-txns-inputs-missingorspent\");\n         }\n+        // Sanity check each input.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552628862",
      "id" : 552628862,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjYyODg2Mg==",
      "original_commit_id" : "747ae56cf7ffe3f7df570e02db36bb5953b9fa53",
      "original_line" : 642,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562719983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-12T10:28:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552628862",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept NACK.  I think the current structure of using CIFMAC to encapsulate the consensus requirements of the script cache is better than spreading the checks out across validation, where it is less clear why these checks exist and what they protect against.  Moreover, I don't believe this change is necessary (or desired) for #20833, as I commented here: https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552684985",
      "created_at" : "2021-01-06T14:59:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-755348055",
      "id" : 755348055,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NTM0ODA1NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-06T14:59:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/755348055",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552984141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552984141"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Made big effort to improve the documentation :D ",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-06T22:05:19Z",
      "diff_hunk" : "@@ -658,6 +639,19 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n             // Otherwise assume this might be an orphan tx for which we just haven't seen parents yet\n             return state.Invalid(TxValidationResult::TX_MISSING_INPUTS, \"bad-txns-inputs-missingorspent\");\n         }\n+        // Sanity check each input.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552984141",
      "id" : 552984141,
      "in_reply_to_id" : 552628862,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4NDE0MQ==",
      "original_commit_id" : "747ae56cf7ffe3f7df570e02db36bb5953b9fa53",
      "original_line" : 642,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 563068702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-12T10:28:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552984141",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sdaftuar Thanks for your thorough review - I'm no longer removing CIFMAC. I think the lock annotations are still helpful, though, and in general would like to update the documentation to clarify what this function does.",
      "created_at" : "2021-01-06T22:09:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-755743904",
      "id" : 755743904,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NTc0MzkwNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-06T22:09:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/755743904",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK for updating locks and docs",
      "created_at" : "2021-01-07T07:50:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-755948612",
      "id" : 755948612,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NTk0ODYxMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-07T07:50:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/755948612",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r553233548"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553233548"
         }
      },
      "author_association" : "MEMBER",
      "body" : "While you're touching these lines, feel free to:\r\n\r\n- make the comment a doxygen comment\r\n- add some wrapping/alignment to make the signature more readable\r\n- move the opening brace to a new line to follow project code style\r\n\r\n```diff\r\n-// Checks to avoid mempool polluting consensus critical paths since cached\r\n-// signature and script validity results will be reused if we validate this\r\n-// transaction again during block validation.\r\n-static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\r\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs) {\r\n+/**\r\n+ * Checks to avoid mempool polluting consensus critical paths since cached\r\n+ * signature and script validity results will be reused if we validate this\r\n+ * transaction again during block validation.\r\n+ * */\r\n+static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state,\r\n+                                           const CCoinsViewCache& view, const CTxMemPool& pool,\r\n+                                           unsigned int flags, PrecomputedTransactionData& txdata)\r\n+    EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs)\r\n+{\r\n```",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-07T10:13:59Z",
      "diff_hunk" : "@@ -404,36 +404,35 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n-// Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n-// were somehow broken and returning the wrong scriptPubKeys\n+// Checks to avoid mempool polluting consensus critical paths since cached\n+// signature and script validity results will be reused if we validate this\n+// transaction again during block validation.\n static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r553233548",
      "id" : 553233548,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzIzMzU0OA==",
      "original_commit_id" : "89da5ed578b4839c426151960594bd4a9bf6d4f7",
      "original_line" : 411,
      "original_position" : 11,
      "original_start_line" : 407,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 563364893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-12T10:28:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553233548",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> It's not clear to me why we want CheckInputsFromMempoolAndCache() to be a separate function from ConsensusScriptChecks(). It means that the documentation is split out over three places - the ConsensusScriptChecks() declaration (\"Re-run the script checks, using consensus flags, and try to cache the result in the scriptcache...\"), the ConsensusScriptChecks() function body (\"Check again against the current block tip's script verification flags to cache our script execution flags. This is, of course, useless...\") and the CheckInputsFromMempoolAndCache() function comment (\"Checks to avoid mempool polluting consensus critical paths ...\"). It would be much clearer if the code from CheckInputsFromMempoolAndCache() was brought into ConsensusScriptChecks() and fully documented in one place.\r\n\r\nNote that `ConsensusScriptChecks` really exists for two reasons: it's a safeguard against policy script checks somehow not being a superset of consensus script checks (a software bug that could lead to invalid blocks being produced), and it conveniently hooks into caching script validation success to serve as a huge optimization for block validation.  If this is unclear, then the documentation should be improved.\r\n\r\n> Maybe there's a reason that the code is structured this way and the intent is to call CheckInputsFromMempoolAndCache() from more than one place. If not, then I think a future PR could consolidate them. In any case, this PR is an improvement and stands on its own.\r\n\r\nSomewhere we should draw a line between mempool validation and block validation; our philosophy has long been to not allow mistakes during mempool validation to cause block validation errors, because we have had historical bugs that have cropped up over the years that could have either caused consensus splits or invalid blocks to be mined. (One example that I recall is #6077, which could have broken consensus;  I heard stories that prior to my time working on this project, there were prior bugs that allowed invalid transactions in the mempool, which is the motivation for `TestBlockValidity` to be called before returning block candidates to miners.)\r\n\r\nScript caching of course is a huge performance win, justifying a desire to have mempool validation interact with block validation.  So an important part of how we use mempool validation to speed up block validation is designing a system that is robust to differences in mempool vs block validation (the script cache design itself tries to address many of these concerns, in comparison with prior attempts to cache validation success).  And in particular, finding a way to draw the line between mempool and block validation so that any future bugs introduced in mempool validation would not result in a consensus split is also very important.\r\n\r\nDrawing this line at CIFMAC seems to have held up pretty well.  At the least, mempool logic was refactored in preparation for package validation back in #16400 (which is when `MemPoolAccept::ConsensusScriptChecks` was introduced, after CIFMAC's introduction) and is being modified again a bit in #20833, yet CIFMAC doesn't need to be touched to accommodate the feature (and indeed seems mostly untouched since first introduced in 2017).  I think that is a positive sign that we've drawn a reasonably good boundary, as it seems to allow for improvements in one side of the code without touching consensus.\r\n\r\nSo while we could move this consensus critical function into the `MemPoolAccept::ConsensusScriptChecks()` function and eliminate a function call, I think doing so would blur the line rather than clarify it (for instance, CIFMAC doesn't need access to the `MemPoolAccept` state), and would make it more likely that we introduce consensus breaking bugs around the script cache in the future when code relating to mempool acceptance is modified again.  At the least, it would raise the review burden for any future PR that would touch mempool acceptance / `ConsensusScriptChecks` and which otherwise wouldn't need to touch CIFMAC, in its current form.  I think this would be a bad idea.\r\n\r\nAt a higher level: I really think that we should have a very high bar for refactoring or otherwise changing consensus-critical code -- which CIFMAC most certainly is (as the interface to the script cache), and this PR didn't seem to acknowledge when first opened.  Sometimes we'll have to modify consensus critical code to fix a bug or implement a feature, and we'll take that review burden and effort when necessary, but when unnecessary I think the cost/benefit of changing consensus code tilts strongly towards not making changes.\r\n\r\nAs for the current version of this PR: @glozow thank you for taking the feedback!  At first glance it looks much better to me as just doc changes and lock annotations -- will take a closer look.",
      "created_at" : "2021-01-07T16:13:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-756214982",
      "id" : 756214982,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NjIxNDk4Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-07T16:13:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/756214982",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r554095702"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554095702"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Now that we have `Assume()` (#20255), that might be a good choice to use here?  It seems to me that we don't need to crash if this assumption is violated (as the old code handled this case and returned false, so we could just continue to do that) -- but adding the `Assume()` will mean we do get the crash in debug builds, which I think is what we're looking for.",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-08T17:44:22Z",
      "diff_hunk" : "@@ -407,22 +407,17 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n // Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n // were somehow broken and returning the wrong scriptPubKeys\n static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs) {\n     AssertLockHeld(cs_main);\n-\n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n-    // to enforce that mempool doesn't change between when we check the view\n-    // and when we actually call through to CheckInputScripts\n-    LOCK(pool.cs);\n+    AssertLockHeld(pool.cs);\n \n     assert(!tx.IsCoinBase());\n     for (const CTxIn& txin : tx.vin) {\n         const Coin& coin = view.AccessCoin(txin.prevout);\n \n-        // AcceptToMemoryPoolWorker has already checked that the coins are\n-        // available, so this shouldn't fail. If the inputs are not available\n-        // here then return false.\n-        if (coin.IsSpent()) return false;\n+        // This coin was checked in PreChecks and MemPoolAccept\n+        // has been holding cs_main since then.\n+        assert(!coin.IsSpent());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r554095702",
      "id" : 554095702,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA5NTcwMg==",
      "original_commit_id" : "08af8056ced62a01a7f2a810068b55ceca380951",
      "original_line" : 420,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 564457904,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-12T10:28:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554095702",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r554098803"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554098803"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Interestingly, `PolicyScriptChecks` doesn't itself need the mempool, so on its face this seems slightly strange.  I can understand that the semantics may be easiest to reason about if we try to enforce that cs_main and the mempool.cs locks are held throughout mempool acceptance, so no objection to that idea conceptually. But it's not clear to me if there's some better idiom to express this?  As it is, if the caller unlocked the mempool in between calls to these internal functions and then relocked before making the next call, the annotations would not catch that, but I think our understanding is that we want to prevent that from happening.\r\n\r\nAnyway, if we go down this route, is it worth adding these lock annotations to the `CheckFeeRate` helper function inside `MemPoolTest` as well?  I think that's the only one that would be left un-annotated, otherwise.",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-08T17:50:26Z",
      "diff_hunk" : "@@ -502,13 +497,13 @@ class MemPoolAccept\n \n     // Run the script checks using our policy flags. As this can be slow, we should\n     // only invoke this on transactions that have otherwise passed policy checks.\n-    bool PolicyScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool PolicyScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r554098803",
      "id" : 554098803,
      "line" : 510,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA5ODgwMw==",
      "original_commit_id" : "08af8056ced62a01a7f2a810068b55ceca380951",
      "original_line" : 510,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 63,
      "pull_request_review_id" : 564457904,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-12T10:28:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554098803",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r554204027"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554204027"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done!",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-08T21:38:25Z",
      "diff_hunk" : "@@ -404,36 +404,35 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n-// Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n-// were somehow broken and returning the wrong scriptPubKeys\n+// Checks to avoid mempool polluting consensus critical paths since cached\n+// signature and script validity results will be reused if we validate this\n+// transaction again during block validation.\n static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r554204027",
      "id" : 554204027,
      "in_reply_to_id" : 553233548,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDIwNDAyNw==",
      "original_commit_id" : "89da5ed578b4839c426151960594bd4a9bf6d4f7",
      "original_line" : 411,
      "original_position" : 11,
      "original_start_line" : 407,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 564598259,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-12T10:28:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554204027",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r554204208"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554204208"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah, I wasn't aware of that! Yes I think that's better.",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-08T21:38:54Z",
      "diff_hunk" : "@@ -407,22 +407,17 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n // Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n // were somehow broken and returning the wrong scriptPubKeys\n static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs) {\n     AssertLockHeld(cs_main);\n-\n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n-    // to enforce that mempool doesn't change between when we check the view\n-    // and when we actually call through to CheckInputScripts\n-    LOCK(pool.cs);\n+    AssertLockHeld(pool.cs);\n \n     assert(!tx.IsCoinBase());\n     for (const CTxIn& txin : tx.vin) {\n         const Coin& coin = view.AccessCoin(txin.prevout);\n \n-        // AcceptToMemoryPoolWorker has already checked that the coins are\n-        // available, so this shouldn't fail. If the inputs are not available\n-        // here then return false.\n-        if (coin.IsSpent()) return false;\n+        // This coin was checked in PreChecks and MemPoolAccept\n+        // has been holding cs_main since then.\n+        assert(!coin.IsSpent());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r554204208",
      "id" : 554204208,
      "in_reply_to_id" : 554095702,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDIwNDIwOA==",
      "original_commit_id" : "08af8056ced62a01a7f2a810068b55ceca380951",
      "original_line" : 420,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 564598515,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-12T10:28:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554204208",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r554204752"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554204752"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I've added annotations to `CheckFeeRate` for now.\r\n\r\nIn my mind, I think of `MemPoolAccept` class as one \"validation session\" on top of current Tip and mempool, so would want to assert that it holds `cs_main, pool.cs` for the entirety of `AcceptSingleTransaction`. Don't know how to do that though ð not familiar",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-08T21:40:23Z",
      "diff_hunk" : "@@ -502,13 +497,13 @@ class MemPoolAccept\n \n     // Run the script checks using our policy flags. As this can be slow, we should\n     // only invoke this on transactions that have otherwise passed policy checks.\n-    bool PolicyScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool PolicyScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r554204752",
      "id" : 554204752,
      "in_reply_to_id" : 554098803,
      "line" : 510,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDIwNDc1Mg==",
      "original_commit_id" : "08af8056ced62a01a7f2a810068b55ceca380951",
      "original_line" : 510,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 63,
      "pull_request_review_id" : 564599247,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-12T10:28:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554204752",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r555047780"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555047780"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I believe we need to leave in the old line that returned false if this test fails (after this `Assume()` call); this check is a no-op in non-debug builds, so we'd want to return false if the check were to fail.",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-11T13:32:09Z",
      "diff_hunk" : "@@ -407,22 +407,17 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n // Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n // were somehow broken and returning the wrong scriptPubKeys\n static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs) {\n     AssertLockHeld(cs_main);\n-\n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n-    // to enforce that mempool doesn't change between when we check the view\n-    // and when we actually call through to CheckInputScripts\n-    LOCK(pool.cs);\n+    AssertLockHeld(pool.cs);\n \n     assert(!tx.IsCoinBase());\n     for (const CTxIn& txin : tx.vin) {\n         const Coin& coin = view.AccessCoin(txin.prevout);\n \n-        // AcceptToMemoryPoolWorker has already checked that the coins are\n-        // available, so this shouldn't fail. If the inputs are not available\n-        // here then return false.\n-        if (coin.IsSpent()) return false;\n+        // This coin was checked in PreChecks and MemPoolAccept\n+        // has been holding cs_main since then.\n+        Assume(!coin.IsSpent());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r555047780",
      "id" : 555047780,
      "line" : 426,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0Nzc4MA==",
      "original_commit_id" : "3c62820e4bde90cbd2967b1b1c79da4450ecdea0",
      "original_line" : 426,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 35,
      "pull_request_review_id" : 565354791,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-12T10:28:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555047780",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r555728891"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555728891"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "oops! fixed",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-12T12:18:25Z",
      "diff_hunk" : "@@ -407,22 +407,17 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n // Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n // were somehow broken and returning the wrong scriptPubKeys\n static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs) {\n     AssertLockHeld(cs_main);\n-\n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n-    // to enforce that mempool doesn't change between when we check the view\n-    // and when we actually call through to CheckInputScripts\n-    LOCK(pool.cs);\n+    AssertLockHeld(pool.cs);\n \n     assert(!tx.IsCoinBase());\n     for (const CTxIn& txin : tx.vin) {\n         const Coin& coin = view.AccessCoin(txin.prevout);\n \n-        // AcceptToMemoryPoolWorker has already checked that the coins are\n-        // available, so this shouldn't fail. If the inputs are not available\n-        // here then return false.\n-        if (coin.IsSpent()) return false;\n+        // This coin was checked in PreChecks and MemPoolAccept\n+        // has been holding cs_main since then.\n+        Assume(!coin.IsSpent());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r555728891",
      "id" : 555728891,
      "in_reply_to_id" : 555047780,
      "line" : 426,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTcyODg5MQ==",
      "original_commit_id" : "3c62820e4bde90cbd2967b1b1c79da4450ecdea0",
      "original_line" : 426,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 35,
      "pull_request_review_id" : 566213222,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-12T12:18:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555728891",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r555950398"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555950398"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The non-static functions need EXCLUSIVE_LOCKS_REQUIRED in any header files which include them as well - EXCLUSIVE_LOCKS_REQUIRED will be ignored by call-sites if its only set in the definitions and not all declarations.",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-12T17:31:42Z",
      "diff_hunk" : "@@ -502,13 +497,13 @@ class MemPoolAccept\n \n     // Run the script checks using our policy flags. As this can be slow, we should\n     // only invoke this on transactions that have otherwise passed policy checks.\n-    bool PolicyScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool PolicyScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r555950398",
      "id" : 555950398,
      "in_reply_to_id" : 554098803,
      "line" : 510,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk1MDM5OA==",
      "original_commit_id" : "08af8056ced62a01a7f2a810068b55ceca380951",
      "original_line" : 510,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 63,
      "pull_request_review_id" : 566508505,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-12T17:31:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/555950398",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 2f463f57e3a9797236142a525703359a98fe19ea\r\n\r\n",
      "created_at" : "2021-01-12T17:32:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-758818799",
      "id" : 758818799,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1ODgxODc5OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-12T17:32:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/758818799",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\nðµï¸ @sipa has been requested to review this pull request as specified in the REVIEWERS file.",
      "created_at" : "2021-01-13T11:45:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-759396249",
      "id" : 759396249,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1OTM5NjI0OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-13T11:45:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/759396249",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r556569993"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556569993"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit \" lock annotations for MemPoolAccept functions \":\r\n\r\nThe assumption was that even though cs_main was locked the whole time, but the mempool lock wasn't (guaranteed to), so previously this was a \"weak check\" (return)? If so: Now that the mempool lock is taken (on top of cs_main) the whole time, there is no way this could fail. So it could make sense to change to `Assert`?\r\n\r\nAlso, the policy check did the assertion already, so it seems confusing to check the same with a weaker Assume.",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-13T14:43:04Z",
      "diff_hunk" : "@@ -407,21 +407,17 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n // Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n // were somehow broken and returning the wrong scriptPubKeys\n static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs) {\n     AssertLockHeld(cs_main);\n-\n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n-    // to enforce that mempool doesn't change between when we check the view\n-    // and when we actually call through to CheckInputScripts\n-    LOCK(pool.cs);\n+    AssertLockHeld(pool.cs);\n \n     assert(!tx.IsCoinBase());\n     for (const CTxIn& txin : tx.vin) {\n         const Coin& coin = view.AccessCoin(txin.prevout);\n \n-        // AcceptToMemoryPoolWorker has already checked that the coins are\n-        // available, so this shouldn't fail. If the inputs are not available\n-        // here then return false.\n+        // This coin was checked in PreChecks and MemPoolAccept\n+        // has been holding cs_main since then.\n+        Assume(!coin.IsSpent());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r556569993",
      "id" : 556569993,
      "line" : 426,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU2OTk5Mw==",
      "original_commit_id" : "85cc6bed64dc17e3b091af9e14bc2f4d4e9bcaf1",
      "original_line" : 420,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 35,
      "pull_request_review_id" : 567288830,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-13T15:01:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556569993",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r556572552"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556572552"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit \" [doc] for CheckInputsFromMempoolAndCache \":\r\n\r\nCould make sense to refer to `g_scriptExecutionCache` to clarify this has nothing to do with the schnorr-cache and ecdsa-cache?",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-13T14:46:22Z",
      "diff_hunk" : "@@ -404,10 +404,16 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n-// Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n-// were somehow broken and returning the wrong scriptPubKeys\n-static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs) {\n+/**\n+* Checks to avoid mempool polluting consensus critical paths since cached\n+* signature and script validity results will be reused if we validate this\n+* transaction again during block validation.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r556572552",
      "id" : 556572552,
      "line" : 410,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3MjU1Mg==",
      "original_commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "original_line" : 410,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 11,
      "pull_request_review_id" : 567288830,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-13T16:33:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556572552",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r556578022"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556578022"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit \" lock annotations for MemPoolAccept functions \":\r\n\r\n`ChainstateActive` is deprecated, so to make @dongcarl 's life easier it might be best to not add new references to it\r\n\r\n```suggestion\r\n        // it is available in our current active UTXO set,\r\n```",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-13T14:53:21Z",
      "diff_hunk" : "@@ -404,36 +404,41 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n-// Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n-// were somehow broken and returning the wrong scriptPubKeys\n-static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+/**\n+* Checks to avoid mempool polluting consensus critical paths since cached\n+* signature and script validity results will be reused if we validate this\n+* transaction again during block validation.\n+* */\n+static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state,\n+                const CCoinsViewCache& view, const CTxMemPool& pool,\n+                unsigned int flags, PrecomputedTransactionData& txdata)\n+                EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs)\n+{\n     AssertLockHeld(cs_main);\n-\n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n-    // to enforce that mempool doesn't change between when we check the view\n-    // and when we actually call through to CheckInputScripts\n-    LOCK(pool.cs);\n+    AssertLockHeld(pool.cs);\n \n     assert(!tx.IsCoinBase());\n     for (const CTxIn& txin : tx.vin) {\n         const Coin& coin = view.AccessCoin(txin.prevout);\n \n-        // AcceptToMemoryPoolWorker has already checked that the coins are\n-        // available, so this shouldn't fail. If the inputs are not available\n-        // here then return false.\n+        // This coin was checked in PreChecks and MemPoolAccept\n+        // has been holding cs_main since then.\n+        Assume(!coin.IsSpent());\n         if (coin.IsSpent()) return false;\n \n-        // Check equivalence for available inputs.\n+        // If the Coin is available, there are 2 possibilities:\n+        // it is available in our current ChainstateActive UTXO set,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r556578022",
      "id" : 556578022,
      "line" : 430,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU3ODAyMg==",
      "original_commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "original_line" : 430,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 40,
      "pull_request_review_id" : 567288830,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-13T15:01:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556578022",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r556639381"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556639381"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I had `Assert` and changed to `Assume` based on @sdaftuar's [comment](https://github.com/bitcoin/bitcoin/pull/20834#discussion_r554095702) ð \r\n\r\n> we don't need to crash if this assumption is violated (as the old code handled this case and returned false, so we could just continue to do that) -- but adding the Assume() will mean we do get the crash in debug builds, which I think is what we're looking for.",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-13T16:01:57Z",
      "diff_hunk" : "@@ -407,21 +407,17 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n // Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n // were somehow broken and returning the wrong scriptPubKeys\n static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs) {\n     AssertLockHeld(cs_main);\n-\n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n-    // to enforce that mempool doesn't change between when we check the view\n-    // and when we actually call through to CheckInputScripts\n-    LOCK(pool.cs);\n+    AssertLockHeld(pool.cs);\n \n     assert(!tx.IsCoinBase());\n     for (const CTxIn& txin : tx.vin) {\n         const Coin& coin = view.AccessCoin(txin.prevout);\n \n-        // AcceptToMemoryPoolWorker has already checked that the coins are\n-        // available, so this shouldn't fail. If the inputs are not available\n-        // here then return false.\n+        // This coin was checked in PreChecks and MemPoolAccept\n+        // has been holding cs_main since then.\n+        Assume(!coin.IsSpent());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r556639381",
      "id" : 556639381,
      "in_reply_to_id" : 556569993,
      "line" : 426,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjYzOTM4MQ==",
      "original_commit_id" : "85cc6bed64dc17e3b091af9e14bc2f4d4e9bcaf1",
      "original_line" : 420,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 35,
      "pull_request_review_id" : 567375276,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-13T16:01:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556639381",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r556654093"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556654093"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Just a nit. It seems a bit odd to assume the `Assert` here could fail and should be an `Assume` instead. Then, at the same time assume that the other asserts (before and after this one) checking the exact same thing won't hit. Seems more consistent to have all three be `Assert`, or even remove this one completely and rely on the others.",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-13T16:21:39Z",
      "diff_hunk" : "@@ -407,21 +407,17 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n // Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n // were somehow broken and returning the wrong scriptPubKeys\n static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs) {\n     AssertLockHeld(cs_main);\n-\n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n-    // to enforce that mempool doesn't change between when we check the view\n-    // and when we actually call through to CheckInputScripts\n-    LOCK(pool.cs);\n+    AssertLockHeld(pool.cs);\n \n     assert(!tx.IsCoinBase());\n     for (const CTxIn& txin : tx.vin) {\n         const Coin& coin = view.AccessCoin(txin.prevout);\n \n-        // AcceptToMemoryPoolWorker has already checked that the coins are\n-        // available, so this shouldn't fail. If the inputs are not available\n-        // here then return false.\n+        // This coin was checked in PreChecks and MemPoolAccept\n+        // has been holding cs_main since then.\n+        Assume(!coin.IsSpent());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r556654093",
      "id" : 556654093,
      "in_reply_to_id" : 556569993,
      "line" : 426,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY1NDA5Mw==",
      "original_commit_id" : "85cc6bed64dc17e3b091af9e14bc2f4d4e9bcaf1",
      "original_line" : 420,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 35,
      "pull_request_review_id" : 567394856,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-13T16:21:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556654093",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-13T16:56:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-759582149",
      "id" : 759582149,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1OTU4MjE0OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-13T16:56:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/759582149",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r556744669"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556744669"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If we thought the Assume could fail, we would fix the code, not add an Assume.  I think it's a question of what do you want the software to do if we are all somehow wrong in our reasoning.  In my view, crashing -- which could be a network-wide event -- should be avoided if the software is otherwise able to recover, and since that seems to be the case here, I don't know why we would change the code to crash.  It just makes this change needlessly risky, even if it's low-probability.\r\n\r\nI think that there are other uses of assert in our codebase that I'd probably disagree with too, which is why I don't find it convincing if the argument is that some other assert would already trigger.\r\n\r\nI agree that this is a nit either way and if it had already been written with an assert, I wouldn't be likely to open a PR suggesting that we change it. But I would personally prefer to avoid ACKing a change that is later found to cause a network-wide crash when fed the wrong data over the wire, simply because of an oversight during the review process!",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-13T18:35:56Z",
      "diff_hunk" : "@@ -407,21 +407,17 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n // Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n // were somehow broken and returning the wrong scriptPubKeys\n static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs) {\n     AssertLockHeld(cs_main);\n-\n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n-    // to enforce that mempool doesn't change between when we check the view\n-    // and when we actually call through to CheckInputScripts\n-    LOCK(pool.cs);\n+    AssertLockHeld(pool.cs);\n \n     assert(!tx.IsCoinBase());\n     for (const CTxIn& txin : tx.vin) {\n         const Coin& coin = view.AccessCoin(txin.prevout);\n \n-        // AcceptToMemoryPoolWorker has already checked that the coins are\n-        // available, so this shouldn't fail. If the inputs are not available\n-        // here then return false.\n+        // This coin was checked in PreChecks and MemPoolAccept\n+        // has been holding cs_main since then.\n+        Assume(!coin.IsSpent());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r556744669",
      "id" : 556744669,
      "in_reply_to_id" : 556569993,
      "line" : 426,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njc0NDY2OQ==",
      "original_commit_id" : "85cc6bed64dc17e3b091af9e14bc2f4d4e9bcaf1",
      "original_line" : 420,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 35,
      "pull_request_review_id" : 567511337,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-13T18:35:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556744669",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r557121090"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557121090"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks, makes sense",
      "commit_id" : "2f463f57e3a9797236142a525703359a98fe19ea",
      "created_at" : "2021-01-14T07:45:07Z",
      "diff_hunk" : "@@ -407,21 +407,17 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n // Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n // were somehow broken and returning the wrong scriptPubKeys\n static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs) {\n     AssertLockHeld(cs_main);\n-\n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n-    // to enforce that mempool doesn't change between when we check the view\n-    // and when we actually call through to CheckInputScripts\n-    LOCK(pool.cs);\n+    AssertLockHeld(pool.cs);\n \n     assert(!tx.IsCoinBase());\n     for (const CTxIn& txin : tx.vin) {\n         const Coin& coin = view.AccessCoin(txin.prevout);\n \n-        // AcceptToMemoryPoolWorker has already checked that the coins are\n-        // available, so this shouldn't fail. If the inputs are not available\n-        // here then return false.\n+        // This coin was checked in PreChecks and MemPoolAccept\n+        // has been holding cs_main since then.\n+        Assume(!coin.IsSpent());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r557121090",
      "id" : 557121090,
      "in_reply_to_id" : 556569993,
      "line" : 426,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzEyMTA5MA==",
      "original_commit_id" : "85cc6bed64dc17e3b091af9e14bc2f4d4e9bcaf1",
      "original_line" : 420,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 35,
      "pull_request_review_id" : 567979095,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-14T07:45:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557121090",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
