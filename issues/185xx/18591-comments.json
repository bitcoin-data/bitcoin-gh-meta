[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18591#discussion_r407031965"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18591"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407031965"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Given it's been removed in the `ax_cxx_compile_stdcxx.m4` macro update, the `[nodefault]` argument should be removed here and below.",
      "commit_id" : "c31cbe7cfefc18123eb85ffb2ce509748435efde",
      "created_at" : "2020-04-11T07:48:15Z",
      "diff_hunk" : "@@ -61,8 +61,20 @@ case $host in\n      lt_cv_deplibs_check_method=\"pass_all\"\n   ;;\n esac\n-dnl Require C++11 compiler (no GNU extensions)\n-AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory], [nodefault])\n+\n+AC_ARG_ENABLE([c++17],\n+  [AS_HELP_STRING([--enable-c++17],\n+  [enable compilation in c++17 mode (disabled by default)])],\n+  [use_cxx17=$enableval],\n+  [use_cxx17=no])\n+\n+dnl Require C++11 or C++17 compiler (no GNU extensions)\n+if test \"x$use_cxx17\" = xyes; then\n+  AX_CXX_COMPILE_STDCXX([17], [noext], [mandatory], [nodefault])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18591#discussion_r407031965",
      "id" : 407031965,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTk2NQ==",
      "original_commit_id" : "48313a3e9aa5f7e8aac3919300b09c5763c9430d",
      "original_line" : 73,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 391745346,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18591",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-11T18:30:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407031965",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Is this just to ensure continued C++17 compatibility of the codebase going forward?",
      "created_at" : "2020-04-11T07:53:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18591#issuecomment-612359504",
      "id" : 612359504,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18591",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxMjM1OTUwNA==",
      "updated_at" : "2020-04-11T07:53:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612359504",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@fanquake No, just the first step. See the plan in https://github.com/bitcoin/bitcoin/issues/16684.",
      "created_at" : "2020-04-11T08:02:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18591#issuecomment-612361362",
      "id" : 612361362,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18591",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxMjM2MTM2Mg==",
      "updated_at" : "2020-04-11T08:02:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612361362",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> No, just the first step. See the plan in #16684.\r\n\r\nI mean, is the point of the CI addition just to ensure that after the last C++17 incompatibility is fixed (https://github.com/bitcoin/bitcoin/pull/18591/commits/10b4f256d4ab891e23977b1d3610a5b758f7bcb1), that there are no trivial regressions? I understand that this can't do much else.",
      "created_at" : "2020-04-11T08:07:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18591#issuecomment-612362366",
      "id" : 612362366,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18591",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxMjM2MjM2Ng==",
      "updated_at" : "2020-04-11T08:07:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612362366",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Yeah, to demonstrate that it works, and to start introducing support in our build system.",
      "created_at" : "2020-04-11T09:01:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18591#issuecomment-612371731",
      "id" : 612371731,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18591",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxMjM3MTczMQ==",
      "updated_at" : "2020-04-11T09:01:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612371731",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18591#discussion_r407039980"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18591"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407039980"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "c31cbe7cfefc18123eb85ffb2ce509748435efde",
      "created_at" : "2020-04-11T09:15:51Z",
      "diff_hunk" : "@@ -61,8 +61,20 @@ case $host in\n      lt_cv_deplibs_check_method=\"pass_all\"\n   ;;\n esac\n-dnl Require C++11 compiler (no GNU extensions)\n-AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory], [nodefault])\n+\n+AC_ARG_ENABLE([c++17],\n+  [AS_HELP_STRING([--enable-c++17],\n+  [enable compilation in c++17 mode (disabled by default)])],\n+  [use_cxx17=$enableval],\n+  [use_cxx17=no])\n+\n+dnl Require C++11 or C++17 compiler (no GNU extensions)\n+if test \"x$use_cxx17\" = xyes; then\n+  AX_CXX_COMPILE_STDCXX([17], [noext], [mandatory], [nodefault])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18591#discussion_r407039980",
      "id" : 407039980,
      "in_reply_to_id" : 407031965,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzOTk4MA==",
      "original_commit_id" : "48313a3e9aa5f7e8aac3919300b09c5763c9430d",
      "original_line" : 73,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : null,
      "pull_request_review_id" : 391750552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18591",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-11T18:30:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407039980",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18591#discussion_r407045664"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18591"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407045664"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Our releases are built with bionic, and I think there are no plans to drop support for bionic in 0.22.0. So this should probably run on bionic?",
      "commit_id" : "c31cbe7cfefc18123eb85ffb2ce509748435efde",
      "created_at" : "2020-04-11T10:17:02Z",
      "diff_hunk" : "@@ -148,6 +148,11 @@ jobs:\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_native_valgrind.sh\"\n \n+    - stage: test\n+      name: 'x86_64 Linux  [GOAL: install]  [focal]  [no depends, only system libs, c++17]'",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18591#discussion_r407045664",
      "id" : 407045664,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NTY2NA==",
      "original_commit_id" : "5c57d82ace7f3f812434f25c268943fd405b547f",
      "original_line" : 152,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : ".travis.yml",
      "position" : null,
      "pull_request_review_id" : 391754292,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18591",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-11T18:30:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407045664",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18088 (build: ensure we aren't using GNU extensions by fanquake)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-04-11T12:38:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18591#issuecomment-612411852",
      "id" : 612411852,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18591",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxMjQxMTg1Mg==",
      "updated_at" : "2020-04-11T12:38:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612411852",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18591#discussion_r407108791"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18591"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407108791"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done. Travis passes.",
      "commit_id" : "c31cbe7cfefc18123eb85ffb2ce509748435efde",
      "created_at" : "2020-04-11T20:42:27Z",
      "diff_hunk" : "@@ -148,6 +148,11 @@ jobs:\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_native_valgrind.sh\"\n \n+    - stage: test\n+      name: 'x86_64 Linux  [GOAL: install]  [focal]  [no depends, only system libs, c++17]'",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18591#discussion_r407108791",
      "id" : 407108791,
      "in_reply_to_id" : 407045664,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwODc5MQ==",
      "original_commit_id" : "5c57d82ace7f3f812434f25c268943fd405b547f",
      "original_line" : 152,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : ".travis.yml",
      "position" : null,
      "pull_request_review_id" : 391799162,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18591",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-11T20:42:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407108791",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.",
      "created_at" : "2020-04-11T21:11:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18591#issuecomment-612514472",
      "id" : 612514472,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18591",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxMjUxNDQ3Mg==",
      "updated_at" : "2020-04-11T21:11:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612514472",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK\r\n\r\nFor ease review this is the same implicit conversion impl that libc++ has: https://github.com/llvm-mirror/libcxx/blob/b857e811b34ae637ce49bbca19ae5bae26a9c4e8/include/span#L229",
      "created_at" : "2020-04-13T09:19:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18591#issuecomment-612823710",
      "id" : 612823710,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18591",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxMjgyMzcxMA==",
      "updated_at" : "2020-04-13T09:19:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612823710",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\nAsserting that we compile and pass tests also with a C++17 mode build is valuable.",
      "created_at" : "2020-04-13T17:15:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18591#issuecomment-612995733",
      "id" : 612995733,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18591",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxMjk5NTczMw==",
      "updated_at" : "2020-04-13T17:15:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/612995733",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, thanks for adding.",
      "created_at" : "2020-04-16T17:47:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18591#issuecomment-614799147",
      "id" : 614799147,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18591",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNDc5OTE0Nw==",
      "updated_at" : "2020-04-16T17:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614799147",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "tACK c31cbe7cfefc18123eb85ffb2ce509748435efde\r\n\r\nChecked that with and without `--enable-c++17` it compiles(including Qt and everything) and tests pass.\r\nChecked with `make -n` that without the flag it still passes `-std=c++11` and with it it passes `-std=c++17`.\r\nChecked that with the span changes reverted it still works on c++11 but fails on c++17 with:\r\n<details>\r\n\r\n```\r\ntest/util_tests.cpp: In member function âvoid util_tests::test_spanparsing::test_method()â:                                                                                                                                                                                                                                                                                                  \r\ntest/util_tests.cpp:1832:24: error: no match for âoperator=â (operand types are âSpan<const char>â and âSpan<char>â)                                                                                                                                                                                                                                                                         \r\n 1832 |     sp = MakeSpan(input);                                                                                                                                                                                                                                                                                                                                                            \r\n      |                        ^                                                                                                                                                                                                                                                                                                                                                             \r\nIn file included from ./serialize.h:25,                                                                                                                                                                                                                                                                                                                                                      \r\n                 from ./hash.h:13,                                                                                                                                                                                                                                                                                                                                                           \r\n                 from test/util_tests.cpp:8:                                                                                                                                                                                                                                                                                                                                                 \r\n./span.h:18:7: note: candidate: âconstexpr Span<const char>& Span<const char>::operator=(const Span<const char>&)â                                                                                                                                                                                                                                                                           \r\n   18 | class Span                                                                                                                                                                                                                                                                                                                                                                           \r\n      |       ^~~~                                                                                                                                                                                                                                                                                                                                                                           \r\n./span.h:18:7: note:   no known conversion for argument 1 from âSpan<char>â to âconst Span<const char>&â                                                                                                                                                                                                                                                                                     \r\n./span.h:18:7: note: candidate: âconstexpr Span<const char>& Span<const char>::operator=(Span<const char>&&)â                                                                                                                                                                                                                                                                                \r\n./span.h:18:7: note:   no known conversion for argument 1 from âSpan<char>â to âSpan<const char>&&â                                                                                                                                                                                                                                                                                          \r\ntest/util_tests.cpp:1857:24: error: no match for âoperator=â (operand types are âSpan<const char>â and âSpan<char>â)                                                                                                                                                                                                                                                                         \r\n 1857 |     sp = MakeSpan(input);                                                                                                                                                                                                                                                                                                                                                            \r\n      |                        ^                                                                                                                                                                                                                                                                                                                                                             \r\nIn file included from ./serialize.h:25,                                                                                                                                                                                                                                                                                                                                                      \r\n                 from ./hash.h:13,                                                                                                                                                                                                                                                                                                                                                           \r\n                 from test/util_tests.cpp:8:                                                                                                                                                                                                                                                                                                                                                 \r\n./span.h:18:7: note: candidate: âconstexpr Span<const char>& Span<const char>::operator=(const Span<const char>&)â                                                                                                                                                                                                                                                                           \r\n   18 | class Span                                                                                                                                                                                                                                                                                                                                                                           \r\n      |       ^~~~                                                                                                                                                                                                                                                                                                                                                                           \r\n./span.h:18:7: note:   no known conversion for argument 1 from âSpan<char>â to âconst Span<const char>&â\r\n./span.h:18:7: note: candidate: âconstexpr Span<const char>& Span<const char>::operator=(Span<const char>&&)â\r\n./span.h:18:7: note:   no known conversion for argument 1 from âSpan<char>â to âSpan<const char>&&â\r\ntest/util_tests.cpp:1880:24: error: no match for âoperator=â (operand types are âSpan<const char>â and âSpan<char>â)\r\n 1880 |     sp = MakeSpan(input);\r\n      |                        ^\r\nIn file included from ./serialize.h:25,\r\n                 from ./hash.h:13,\r\n                 from test/util_tests.cpp:8:\r\n./span.h:18:7: note: candidate: âconstexpr Span<const char>& Span<const char>::operator=(const Span<const char>&)â\r\n   18 | class Span\r\n      |       ^~~~\r\n./span.h:18:7: note:   no known conversion for argument 1 from âSpan<char>â to âconst Span<const char>&â\r\n./span.h:18:7: note: candidate: âconstexpr Span<const char>& Span<const char>::operator=(Span<const char>&&)â\r\n./span.h:18:7: note:   no known conversion for argument 1 from âSpan<char>â to âSpan<const char>&&â\r\ntest/util_tests.cpp:1886:24: error: no match for âoperator=â (operand types are âSpan<const char>â and âSpan<char>â)\r\n 1886 |     sp = MakeSpan(input);\r\n      |                        ^\r\nIn file included from ./serialize.h:25,\r\n                 from ./hash.h:13,\r\n                 from test/util_tests.cpp:8:\r\n./span.h:18:7: note: candidate: âconstexpr Span<const char>& Span<const char>::operator=(const Span<const char>&)â\r\n   18 | class Span\r\n      |       ^~~~\r\n./span.h:18:7: note:   no known conversion for argument 1 from âSpan<char>â to âconst Span<const char>&â\r\n./span.h:18:7: note: candidate: âconstexpr Span<const char>& Span<const char>::operator=(Span<const char>&&)â\r\n./span.h:18:7: note:   no known conversion for argument 1 from âSpan<char>â to âSpan<const char>&&â\r\ntest/util_tests.cpp:1892:24: error: no match for âoperator=â (operand types are âSpan<const char>â and âSpan<char>â)\r\n 1892 |     sp = MakeSpan(input);\r\n      |                        ^\r\nIn file included from ./serialize.h:25,\r\n                 from ./hash.h:13,\r\n                 from test/util_tests.cpp:8:\r\n./span.h:18:7: note: candidate: âconstexpr Span<const char>& Span<const char>::operator=(const Span<const char>&)â\r\n   18 | class Span\r\n      |       ^~~~\r\n./span.h:18:7: note:   no known conversion for argument 1 from âSpan<char>â to âconst Span<const char>&â\r\n./span.h:18:7: note: candidate: âconstexpr Span<const char>& Span<const char>::operator=(Span<const char>&&)â\r\n./span.h:18:7: note:   no known conversion for argument 1 from âSpan<char>â to âSpan<const char>&&â\r\ntest/util_tests.cpp:1898:24: error: no match for âoperator=â (operand types are âSpan<const char>â and âSpan<char>â)\r\n 1898 |     sp = MakeSpan(input);\r\n      |                        ^\r\nIn file included from ./serialize.h:25,\r\n                 from ./hash.h:13,\r\n                 from test/util_tests.cpp:8:\r\n./span.h:18:7: note: candidate: âconstexpr Span<const char>& Span<const char>::operator=(const Span<const char>&)â\r\n   18 | class Span\r\n      |       ^~~~\r\n./span.h:18:7: note:   no known conversion for argument 1 from âSpan<char>â to âconst Span<const char>&â\r\n./span.h:18:7: note: candidate: âconstexpr Span<const char>& Span<const char>::operator=(Span<const char>&&)â\r\n./span.h:18:7: note:   no known conversion for argument 1 from âSpan<char>â to âSpan<const char>&&â\r\ntest/util_tests.cpp:1904:24: error: no match for âoperator=â (operand types are âSpan<const char>â and âSpan<char>â)\r\n 1904 |     sp = MakeSpan(input);\r\n      |                        ^\r\nIn file included from ./serialize.h:25,\r\n                 from ./hash.h:13,\r\n                 from test/util_tests.cpp:8:\r\n./span.h:18:7: note: candidate: âconstexpr Span<const char>& Span<const char>::operator=(const Span<const char>&)â\r\n   18 | class Span\r\n      |       ^~~~\r\n./span.h:18:7: note:   no known conversion for argument 1 from âSpan<char>â to âconst Span<const char>&â\r\n./span.h:18:7: note: candidate: âconstexpr Span<const char>& Span<const char>::operator=(Span<const char>&&)â\r\n./span.h:18:7: note:   no known conversion for argument 1 from âSpan<char>â to âSpan<const char>&&â\r\ntest/util_tests.cpp:1913:29: error: invalid initialization of reference of type âconst Span<const char>&â from expression of type âSpan<char>â\r\n 1913 |     results = Split(MakeSpan(input), 'x');\r\n      |                     ~~~~~~~~^~~~~~~\r\nIn file included from test/util_tests.cpp:20:\r\n./util/spanparsing.h:46:61: note: in passing argument 1 of âstd::vector<Span<const char> > spanparsing::Split(const Span<const char>&, char)â\r\n   46 | std::vector<Span<const char>> Split(const Span<const char>& sp, char sep);\r\n      |                                     ~~~~~~~~~~~~~~~~~~~~~~~~^~\r\ntest/util_tests.cpp:1921:29: error: invalid initialization of reference of type âconst Span<const char>&â from expression of type âSpan<char>â\r\n 1921 |     results = Split(MakeSpan(input), '-');\r\n      |                     ~~~~~~~~^~~~~~~\r\nIn file included from test/util_tests.cpp:20:\r\n./util/spanparsing.h:46:61: note: in passing argument 1 of âstd::vector<Span<const char> > spanparsing::Split(const Span<const char>&, char)â\r\n   46 | std::vector<Span<const char>> Split(const Span<const char>& sp, char sep);\r\n      |                                     ~~~~~~~~~~~~~~~~~~~~~~~~^~\r\ntest/util_tests.cpp:1926:29: error: invalid initialization of reference of type âconst Span<const char>&â from expression of type âSpan<char>â\r\n 1926 |     results = Split(MakeSpan(input), '#');\r\n      |                     ~~~~~~~~^~~~~~~\r\nIn file included from test/util_tests.cpp:20:\r\n./util/spanparsing.h:46:61: note: in passing argument 1 of âstd::vector<Span<const char> > spanparsing::Split(const Span<const char>&, char)â\r\n   46 | std::vector<Span<const char>> Split(const Span<const char>& sp, char sep);\r\n      |                                     ~~~~~~~~~~~~~~~~~~~~~~~~^~\r\ntest/util_tests.cpp:1933:29: error: invalid initialization of reference of type âconst Span<const char>&â from expression of type âSpan<char>â\r\n 1933 |     results = Split(MakeSpan(input), '*');\r\n      |                     ~~~~~~~~^~~~~~~\r\nIn file included from test/util_tests.cpp:20:\r\n./util/spanparsing.h:46:61: note: in passing argument 1 of âstd::vector<Span<const char> > spanparsing::Split(const Span<const char>&, char)â\r\n   46 | std::vector<Span<const char>> Split(const Span<const char>& sp, char sep);\r\n```\r\n\r\n</details>",
      "created_at" : "2020-04-23T10:11:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18591#issuecomment-618313137",
      "id" : 618313137,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18591",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxODMxMzEzNw==",
      "updated_at" : "2020-04-23T10:11:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/618313137",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tested ACK c31cbe7cfefc18123eb85ffb2ce509748435efde",
      "created_at" : "2020-04-26T18:13:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18591#issuecomment-619598569",
      "id" : 619598569,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18591",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxOTU5ODU2OQ==",
      "updated_at" : "2020-04-26T18:13:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619598569",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
