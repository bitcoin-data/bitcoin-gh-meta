[
   {
      "author_association" : "MEMBER",
      "body" : "The fuzz tests are not shipped on our website, nor are they run as part of `make check`. The existing unit test runs in a few milliseconds. So I'd slightly prefer to keep the unit tests for end users on odd compilers/platforms, which would otherwise be left standing in the rain. If you are worries about code duplication of the `prevector_tester` class, you may put it in `./src/test/util/`, which is a library available to all tests.\r\n\r\nConcept ACK on the new fuzzing harness.",
      "created_at" : "2020-04-05T00:29:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18529#issuecomment-609109271",
      "id" : 609109271,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18529",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwOTEwOTI3MQ==",
      "updated_at" : "2020-04-05T00:29:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609109271",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18529#discussion_r403599550"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18529"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403599550"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could this be combined with `case 3` and generalized?\r\n```suggestion\r\n            int del = prov.ConsumeIntegralInRange<int>(1, test.size());\r\n```",
      "commit_id" : "b1d24d1d031a2b2ce67bf846bafa1c3a499b7553",
      "created_at" : "2020-04-05T00:35:01Z",
      "diff_hunk" : "@@ -0,0 +1,268 @@\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+\n+#include <vector>\n+#include <prevector.h>\n+\n+#include <reverse_iterator.h>\n+#include <serialize.h>\n+#include <streams.h>\n+\n+namespace {\n+\n+template<unsigned int N, typename T>\n+class prevector_tester {\n+    typedef std::vector<T> realtype;\n+    realtype real_vector;\n+    realtype real_vector_alt;\n+\n+    typedef prevector<N, T> pretype;\n+    pretype pre_vector;\n+    pretype pre_vector_alt;\n+\n+    typedef typename pretype::size_type Size;\n+\n+public:\n+    void test() {\n+        const pretype& const_pre_vector = pre_vector;\n+        assert(real_vector.size() == pre_vector.size());\n+        assert(real_vector.empty() == pre_vector.empty());\n+        for (Size s = 0; s < real_vector.size(); s++) {\n+             assert(real_vector[s] == pre_vector[s]);\n+             assert(&(pre_vector[s]) == &(pre_vector.begin()[s]));\n+             assert(&(pre_vector[s]) == &*(pre_vector.begin() + s));\n+             assert(&(pre_vector[s]) == &*((pre_vector.end() + s) - real_vector.size()));\n+        }\n+        // assert(realtype(pre_vector) == real_vector);\n+        assert(pretype(real_vector.begin(), real_vector.end()) == pre_vector);\n+        assert(pretype(pre_vector.begin(), pre_vector.end()) == pre_vector);\n+        size_t pos = 0;\n+        for (const T& v : pre_vector) {\n+             assert(v == real_vector[pos++]);\n+        }\n+        for (const T& v : reverse_iterate(pre_vector)) {\n+             assert(v == real_vector[--pos]);\n+        }\n+        for (const T& v : const_pre_vector) {\n+             assert(v == real_vector[pos++]);\n+        }\n+        for (const T& v : reverse_iterate(const_pre_vector)) {\n+             assert(v == real_vector[--pos]);\n+        }\n+        CDataStream ss1(SER_DISK, 0);\n+        CDataStream ss2(SER_DISK, 0);\n+        ss1 << real_vector;\n+        ss2 << pre_vector;\n+        assert(ss1.size() == ss2.size());\n+        for (Size s = 0; s < ss1.size(); s++) {\n+            assert(ss1[s] == ss2[s]);\n+        }\n+    }\n+\n+    void resize(Size s) {\n+        real_vector.resize(s);\n+        assert(real_vector.size() == s);\n+        pre_vector.resize(s);\n+        assert(pre_vector.size() == s);\n+    }\n+\n+    void reserve(Size s) {\n+        real_vector.reserve(s);\n+        assert(real_vector.capacity() >= s);\n+        pre_vector.reserve(s);\n+        assert(pre_vector.capacity() >= s);\n+    }\n+\n+    void insert(Size position, const T& value) {\n+        real_vector.insert(real_vector.begin() + position, value);\n+        pre_vector.insert(pre_vector.begin() + position, value);\n+    }\n+\n+    void insert(Size position, Size count, const T& value) {\n+        real_vector.insert(real_vector.begin() + position, count, value);\n+        pre_vector.insert(pre_vector.begin() + position, count, value);\n+    }\n+\n+    template<typename I>\n+    void insert_range(Size position, I first, I last) {\n+        real_vector.insert(real_vector.begin() + position, first, last);\n+        pre_vector.insert(pre_vector.begin() + position, first, last);\n+    }\n+\n+    void erase(Size position) {\n+        real_vector.erase(real_vector.begin() + position);\n+        pre_vector.erase(pre_vector.begin() + position);\n+    }\n+\n+    void erase(Size first, Size last) {\n+        real_vector.erase(real_vector.begin() + first, real_vector.begin() + last);\n+        pre_vector.erase(pre_vector.begin() + first, pre_vector.begin() + last);\n+    }\n+\n+    void update(Size pos, const T& value) {\n+        real_vector[pos] = value;\n+        pre_vector[pos] = value;\n+    }\n+\n+    void push_back(const T& value) {\n+        real_vector.push_back(value);\n+        pre_vector.push_back(value);\n+    }\n+\n+    void pop_back() {\n+        real_vector.pop_back();\n+        pre_vector.pop_back();\n+    }\n+\n+    void clear() {\n+        real_vector.clear();\n+        pre_vector.clear();\n+    }\n+\n+    void assign(Size n, const T& value) {\n+        real_vector.assign(n, value);\n+        pre_vector.assign(n, value);\n+    }\n+\n+    Size size() const {\n+        return real_vector.size();\n+    }\n+\n+    Size capacity() const {\n+        return pre_vector.capacity();\n+    }\n+\n+    void shrink_to_fit() {\n+        pre_vector.shrink_to_fit();\n+    }\n+\n+    void swap() {\n+        real_vector.swap(real_vector_alt);\n+        pre_vector.swap(pre_vector_alt);\n+    }\n+\n+    void move() {\n+        real_vector = std::move(real_vector_alt);\n+        real_vector_alt.clear();\n+        pre_vector = std::move(pre_vector_alt);\n+        pre_vector_alt.clear();\n+    }\n+\n+    void copy() {\n+        real_vector = real_vector_alt;\n+        pre_vector = pre_vector_alt;\n+    }\n+\n+    void resize_uninitialized(realtype values) {\n+        size_t r = values.size();\n+        size_t s = real_vector.size() / 2;\n+        if (real_vector.capacity() < s + r) {\n+            real_vector.reserve(s + r);\n+        }\n+        real_vector.resize(s);\n+        pre_vector.resize_uninitialized(s);\n+        for (auto v : values) {\n+            real_vector.push_back(v);\n+        }\n+        auto p = pre_vector.size();\n+        pre_vector.resize_uninitialized(p + r);\n+        for (auto v : values) {\n+            pre_vector[p] = v;\n+            ++p;\n+        }\n+    }\n+};\n+\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider prov(buffer.data(), buffer.size());\n+    prevector_tester<8, int> test;\n+\n+    while (prov.remaining_bytes()) {\n+        switch (prov.ConsumeIntegralInRange<int>(0, 15 + 3 * (test.size() > 0))) {\n+        case 0:\n+            test.insert(prov.ConsumeIntegralInRange<size_t>(0, test.size()), prov.ConsumeIntegral<int>());\n+            break;\n+        case 16:\n+            test.erase(prov.ConsumeIntegralInRange<size_t>(0, test.size() - 1));\n+            break;\n+        case 1:\n+            test.resize(std::max(0, std::min(30, (int)test.size() + prov.ConsumeIntegralInRange<int>(0, 4) - 2)));\n+            break;\n+        case 2:\n+            test.insert(prov.ConsumeIntegralInRange<size_t>(0, test.size()), 1 + prov.ConsumeBool(), prov.ConsumeIntegral<int>());\n+            break;\n+        case 3: {\n+            int del = std::min<int>(test.size(), 1 + prov.ConsumeBool());\n+            int beg = prov.ConsumeIntegralInRange<int>(0, test.size() - del);\n+            test.erase(beg, beg + del);\n+            break;\n+        }\n+        case 4:\n+            test.push_back(prov.ConsumeIntegral<int>());\n+            break;\n+        case 17:\n+            test.pop_back();\n+            break;\n+        case 5: {\n+            int values[4];\n+            int num = 1 + prov.ConsumeIntegralInRange<int>(0, 3);\n+            for (int k = 0; k < num; ++k) {\n+                values[k] = prov.ConsumeIntegral<int>();\n+            }\n+            test.insert_range(prov.ConsumeIntegralInRange<size_t>(0, test.size()), values, values + num);\n+            break;\n+        }\n+        case 6: {\n+            int del = std::min<int>(test.size(), 1 + prov.ConsumeIntegralInRange<int>(0, 3));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18529#discussion_r403599550",
      "id" : 403599550,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU5OTU1MA==",
      "original_commit_id" : "a8c3f233a143d80bd59dc51c23fbf78d5bb14f6c",
      "original_line" : 223,
      "original_position" : 223,
      "original_start_line" : null,
      "path" : "src/test/fuzz/prevector.cpp",
      "position" : null,
      "pull_request_review_id" : 387770462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18529",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-06T22:01:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403599550",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18529#discussion_r403599745"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18529"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403599745"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can the test method be made read-only? If yes, I think `case 15` can be removed?\r\n\r\n```suggestion\r\n    void test() const {\r\n```",
      "commit_id" : "b1d24d1d031a2b2ce67bf846bafa1c3a499b7553",
      "created_at" : "2020-04-05T00:35:36Z",
      "diff_hunk" : "@@ -0,0 +1,268 @@\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+\n+#include <vector>\n+#include <prevector.h>\n+\n+#include <reverse_iterator.h>\n+#include <serialize.h>\n+#include <streams.h>\n+\n+namespace {\n+\n+template<unsigned int N, typename T>\n+class prevector_tester {\n+    typedef std::vector<T> realtype;\n+    realtype real_vector;\n+    realtype real_vector_alt;\n+\n+    typedef prevector<N, T> pretype;\n+    pretype pre_vector;\n+    pretype pre_vector_alt;\n+\n+    typedef typename pretype::size_type Size;\n+\n+public:\n+    void test() {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18529#discussion_r403599745",
      "id" : 403599745,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU5OTc0NQ==",
      "original_commit_id" : "a8c3f233a143d80bd59dc51c23fbf78d5bb14f6c",
      "original_line" : 30,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/test/fuzz/prevector.cpp",
      "position" : null,
      "pull_request_review_id" : 387770462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18529",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-06T22:01:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403599745",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18529#discussion_r403602307"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18529"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403602307"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think the assert-side-effects linter complains about this, so you might have two options:\r\n\r\n* Disable the linter for the fuzz tests\r\n* Remove the side effect\r\n\r\n```\r\nAssertions should not have side effects:\r\n\r\nsrc/test/fuzz/prevector.cpp:             assert(v == real_vector[pos++]);\r\n\r\nsrc/test/fuzz/prevector.cpp:             assert(v == real_vector[--pos]);\r\n\r\nsrc/test/fuzz/prevector.cpp:             assert(v == real_vector[pos++]);\r\n\r\nsrc/test/fuzz/prevector.cpp:             assert(v == real_vector[--pos]);\r\n\r\n^---- failure generated from test/lint/lint-assertions.sh",
      "commit_id" : "b1d24d1d031a2b2ce67bf846bafa1c3a499b7553",
      "created_at" : "2020-04-05T00:41:58Z",
      "diff_hunk" : "@@ -0,0 +1,268 @@\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+\n+#include <vector>\n+#include <prevector.h>\n+\n+#include <reverse_iterator.h>\n+#include <serialize.h>\n+#include <streams.h>\n+\n+namespace {\n+\n+template<unsigned int N, typename T>\n+class prevector_tester {\n+    typedef std::vector<T> realtype;\n+    realtype real_vector;\n+    realtype real_vector_alt;\n+\n+    typedef prevector<N, T> pretype;\n+    pretype pre_vector;\n+    pretype pre_vector_alt;\n+\n+    typedef typename pretype::size_type Size;\n+\n+public:\n+    void test() {\n+        const pretype& const_pre_vector = pre_vector;\n+        assert(real_vector.size() == pre_vector.size());\n+        assert(real_vector.empty() == pre_vector.empty());\n+        for (Size s = 0; s < real_vector.size(); s++) {\n+             assert(real_vector[s] == pre_vector[s]);\n+             assert(&(pre_vector[s]) == &(pre_vector.begin()[s]));\n+             assert(&(pre_vector[s]) == &*(pre_vector.begin() + s));\n+             assert(&(pre_vector[s]) == &*((pre_vector.end() + s) - real_vector.size()));\n+        }\n+        // assert(realtype(pre_vector) == real_vector);\n+        assert(pretype(real_vector.begin(), real_vector.end()) == pre_vector);\n+        assert(pretype(pre_vector.begin(), pre_vector.end()) == pre_vector);\n+        size_t pos = 0;\n+        for (const T& v : pre_vector) {\n+             assert(v == real_vector[pos++]);\n+        }\n+        for (const T& v : reverse_iterate(pre_vector)) {\n+             assert(v == real_vector[--pos]);\n+        }\n+        for (const T& v : const_pre_vector) {\n+             assert(v == real_vector[pos++]);\n+        }\n+        for (const T& v : reverse_iterate(const_pre_vector)) {\n+             assert(v == real_vector[--pos]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18529#discussion_r403602307",
      "id" : 403602307,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYwMjMwNw==",
      "original_commit_id" : "a8c3f233a143d80bd59dc51c23fbf78d5bb14f6c",
      "original_line" : 54,
      "original_position" : 54,
      "original_start_line" : null,
      "path" : "src/test/fuzz/prevector.cpp",
      "position" : null,
      "pull_request_review_id" : 387770855,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18529",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-06T22:01:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403602307",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18529#discussion_r403639840"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18529"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403639840"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Needs rebase, sorry\r\n\r\n```suggestion\r\ntest_fuzz_prevector_SOURCES = test/fuzz/prevector.cpp\r\n```",
      "commit_id" : "b1d24d1d031a2b2ce67bf846bafa1c3a499b7553",
      "created_at" : "2020-04-05T02:36:16Z",
      "diff_hunk" : "@@ -623,6 +623,12 @@ test_fuzz_parse_univalue_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_parse_univalue_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_parse_univalue_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_univalue.cpp\n \n+test_fuzz_prevector_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_prevector_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_prevector_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_prevector_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_prevector_SOURCES = $(FUZZ_SUITE) test/fuzz/prevector.cpp",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18529#discussion_r403639840",
      "id" : 403639840,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzOTg0MA==",
      "original_commit_id" : "a8c3f233a143d80bd59dc51c23fbf78d5bb14f6c",
      "original_line" : 630,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/Makefile.test.include",
      "position" : null,
      "pull_request_review_id" : 387775956,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18529",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-06T22:01:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/403639840",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18529#discussion_r404415137"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18529"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404415137"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Indeed, done (and the del range can start at 0 even).",
      "commit_id" : "b1d24d1d031a2b2ce67bf846bafa1c3a499b7553",
      "created_at" : "2020-04-06T22:01:37Z",
      "diff_hunk" : "@@ -0,0 +1,268 @@\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+\n+#include <vector>\n+#include <prevector.h>\n+\n+#include <reverse_iterator.h>\n+#include <serialize.h>\n+#include <streams.h>\n+\n+namespace {\n+\n+template<unsigned int N, typename T>\n+class prevector_tester {\n+    typedef std::vector<T> realtype;\n+    realtype real_vector;\n+    realtype real_vector_alt;\n+\n+    typedef prevector<N, T> pretype;\n+    pretype pre_vector;\n+    pretype pre_vector_alt;\n+\n+    typedef typename pretype::size_type Size;\n+\n+public:\n+    void test() {\n+        const pretype& const_pre_vector = pre_vector;\n+        assert(real_vector.size() == pre_vector.size());\n+        assert(real_vector.empty() == pre_vector.empty());\n+        for (Size s = 0; s < real_vector.size(); s++) {\n+             assert(real_vector[s] == pre_vector[s]);\n+             assert(&(pre_vector[s]) == &(pre_vector.begin()[s]));\n+             assert(&(pre_vector[s]) == &*(pre_vector.begin() + s));\n+             assert(&(pre_vector[s]) == &*((pre_vector.end() + s) - real_vector.size()));\n+        }\n+        // assert(realtype(pre_vector) == real_vector);\n+        assert(pretype(real_vector.begin(), real_vector.end()) == pre_vector);\n+        assert(pretype(pre_vector.begin(), pre_vector.end()) == pre_vector);\n+        size_t pos = 0;\n+        for (const T& v : pre_vector) {\n+             assert(v == real_vector[pos++]);\n+        }\n+        for (const T& v : reverse_iterate(pre_vector)) {\n+             assert(v == real_vector[--pos]);\n+        }\n+        for (const T& v : const_pre_vector) {\n+             assert(v == real_vector[pos++]);\n+        }\n+        for (const T& v : reverse_iterate(const_pre_vector)) {\n+             assert(v == real_vector[--pos]);\n+        }\n+        CDataStream ss1(SER_DISK, 0);\n+        CDataStream ss2(SER_DISK, 0);\n+        ss1 << real_vector;\n+        ss2 << pre_vector;\n+        assert(ss1.size() == ss2.size());\n+        for (Size s = 0; s < ss1.size(); s++) {\n+            assert(ss1[s] == ss2[s]);\n+        }\n+    }\n+\n+    void resize(Size s) {\n+        real_vector.resize(s);\n+        assert(real_vector.size() == s);\n+        pre_vector.resize(s);\n+        assert(pre_vector.size() == s);\n+    }\n+\n+    void reserve(Size s) {\n+        real_vector.reserve(s);\n+        assert(real_vector.capacity() >= s);\n+        pre_vector.reserve(s);\n+        assert(pre_vector.capacity() >= s);\n+    }\n+\n+    void insert(Size position, const T& value) {\n+        real_vector.insert(real_vector.begin() + position, value);\n+        pre_vector.insert(pre_vector.begin() + position, value);\n+    }\n+\n+    void insert(Size position, Size count, const T& value) {\n+        real_vector.insert(real_vector.begin() + position, count, value);\n+        pre_vector.insert(pre_vector.begin() + position, count, value);\n+    }\n+\n+    template<typename I>\n+    void insert_range(Size position, I first, I last) {\n+        real_vector.insert(real_vector.begin() + position, first, last);\n+        pre_vector.insert(pre_vector.begin() + position, first, last);\n+    }\n+\n+    void erase(Size position) {\n+        real_vector.erase(real_vector.begin() + position);\n+        pre_vector.erase(pre_vector.begin() + position);\n+    }\n+\n+    void erase(Size first, Size last) {\n+        real_vector.erase(real_vector.begin() + first, real_vector.begin() + last);\n+        pre_vector.erase(pre_vector.begin() + first, pre_vector.begin() + last);\n+    }\n+\n+    void update(Size pos, const T& value) {\n+        real_vector[pos] = value;\n+        pre_vector[pos] = value;\n+    }\n+\n+    void push_back(const T& value) {\n+        real_vector.push_back(value);\n+        pre_vector.push_back(value);\n+    }\n+\n+    void pop_back() {\n+        real_vector.pop_back();\n+        pre_vector.pop_back();\n+    }\n+\n+    void clear() {\n+        real_vector.clear();\n+        pre_vector.clear();\n+    }\n+\n+    void assign(Size n, const T& value) {\n+        real_vector.assign(n, value);\n+        pre_vector.assign(n, value);\n+    }\n+\n+    Size size() const {\n+        return real_vector.size();\n+    }\n+\n+    Size capacity() const {\n+        return pre_vector.capacity();\n+    }\n+\n+    void shrink_to_fit() {\n+        pre_vector.shrink_to_fit();\n+    }\n+\n+    void swap() {\n+        real_vector.swap(real_vector_alt);\n+        pre_vector.swap(pre_vector_alt);\n+    }\n+\n+    void move() {\n+        real_vector = std::move(real_vector_alt);\n+        real_vector_alt.clear();\n+        pre_vector = std::move(pre_vector_alt);\n+        pre_vector_alt.clear();\n+    }\n+\n+    void copy() {\n+        real_vector = real_vector_alt;\n+        pre_vector = pre_vector_alt;\n+    }\n+\n+    void resize_uninitialized(realtype values) {\n+        size_t r = values.size();\n+        size_t s = real_vector.size() / 2;\n+        if (real_vector.capacity() < s + r) {\n+            real_vector.reserve(s + r);\n+        }\n+        real_vector.resize(s);\n+        pre_vector.resize_uninitialized(s);\n+        for (auto v : values) {\n+            real_vector.push_back(v);\n+        }\n+        auto p = pre_vector.size();\n+        pre_vector.resize_uninitialized(p + r);\n+        for (auto v : values) {\n+            pre_vector[p] = v;\n+            ++p;\n+        }\n+    }\n+};\n+\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider prov(buffer.data(), buffer.size());\n+    prevector_tester<8, int> test;\n+\n+    while (prov.remaining_bytes()) {\n+        switch (prov.ConsumeIntegralInRange<int>(0, 15 + 3 * (test.size() > 0))) {\n+        case 0:\n+            test.insert(prov.ConsumeIntegralInRange<size_t>(0, test.size()), prov.ConsumeIntegral<int>());\n+            break;\n+        case 16:\n+            test.erase(prov.ConsumeIntegralInRange<size_t>(0, test.size() - 1));\n+            break;\n+        case 1:\n+            test.resize(std::max(0, std::min(30, (int)test.size() + prov.ConsumeIntegralInRange<int>(0, 4) - 2)));\n+            break;\n+        case 2:\n+            test.insert(prov.ConsumeIntegralInRange<size_t>(0, test.size()), 1 + prov.ConsumeBool(), prov.ConsumeIntegral<int>());\n+            break;\n+        case 3: {\n+            int del = std::min<int>(test.size(), 1 + prov.ConsumeBool());\n+            int beg = prov.ConsumeIntegralInRange<int>(0, test.size() - del);\n+            test.erase(beg, beg + del);\n+            break;\n+        }\n+        case 4:\n+            test.push_back(prov.ConsumeIntegral<int>());\n+            break;\n+        case 17:\n+            test.pop_back();\n+            break;\n+        case 5: {\n+            int values[4];\n+            int num = 1 + prov.ConsumeIntegralInRange<int>(0, 3);\n+            for (int k = 0; k < num; ++k) {\n+                values[k] = prov.ConsumeIntegral<int>();\n+            }\n+            test.insert_range(prov.ConsumeIntegralInRange<size_t>(0, test.size()), values, values + num);\n+            break;\n+        }\n+        case 6: {\n+            int del = std::min<int>(test.size(), 1 + prov.ConsumeIntegralInRange<int>(0, 3));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18529#discussion_r404415137",
      "id" : 404415137,
      "in_reply_to_id" : 403599550,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNTEzNw==",
      "original_commit_id" : "a8c3f233a143d80bd59dc51c23fbf78d5bb14f6c",
      "original_line" : 223,
      "original_position" : 223,
      "original_start_line" : null,
      "path" : "src/test/fuzz/prevector.cpp",
      "position" : null,
      "pull_request_review_id" : 388649526,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18529",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-06T22:01:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404415137",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18529#discussion_r404415565"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18529"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404415565"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Right, my thinking was that the fuzzer should be allowed to find intermediate failures too, but I think that's pointless. A shorter fuzzer input (which runs test once at the end) would accomplish the same.\r\n\r\nDone.",
      "commit_id" : "b1d24d1d031a2b2ce67bf846bafa1c3a499b7553",
      "created_at" : "2020-04-06T22:02:38Z",
      "diff_hunk" : "@@ -0,0 +1,268 @@\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+\n+#include <vector>\n+#include <prevector.h>\n+\n+#include <reverse_iterator.h>\n+#include <serialize.h>\n+#include <streams.h>\n+\n+namespace {\n+\n+template<unsigned int N, typename T>\n+class prevector_tester {\n+    typedef std::vector<T> realtype;\n+    realtype real_vector;\n+    realtype real_vector_alt;\n+\n+    typedef prevector<N, T> pretype;\n+    pretype pre_vector;\n+    pretype pre_vector_alt;\n+\n+    typedef typename pretype::size_type Size;\n+\n+public:\n+    void test() {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18529#discussion_r404415565",
      "id" : 404415565,
      "in_reply_to_id" : 403599745,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNTU2NQ==",
      "original_commit_id" : "a8c3f233a143d80bd59dc51c23fbf78d5bb14f6c",
      "original_line" : 30,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/test/fuzz/prevector.cpp",
      "position" : null,
      "pull_request_review_id" : 388650038,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18529",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-06T22:02:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404415565",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18529#discussion_r404415680"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18529"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404415680"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed by removing the side effect.",
      "commit_id" : "b1d24d1d031a2b2ce67bf846bafa1c3a499b7553",
      "created_at" : "2020-04-06T22:02:52Z",
      "diff_hunk" : "@@ -0,0 +1,268 @@\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+\n+#include <vector>\n+#include <prevector.h>\n+\n+#include <reverse_iterator.h>\n+#include <serialize.h>\n+#include <streams.h>\n+\n+namespace {\n+\n+template<unsigned int N, typename T>\n+class prevector_tester {\n+    typedef std::vector<T> realtype;\n+    realtype real_vector;\n+    realtype real_vector_alt;\n+\n+    typedef prevector<N, T> pretype;\n+    pretype pre_vector;\n+    pretype pre_vector_alt;\n+\n+    typedef typename pretype::size_type Size;\n+\n+public:\n+    void test() {\n+        const pretype& const_pre_vector = pre_vector;\n+        assert(real_vector.size() == pre_vector.size());\n+        assert(real_vector.empty() == pre_vector.empty());\n+        for (Size s = 0; s < real_vector.size(); s++) {\n+             assert(real_vector[s] == pre_vector[s]);\n+             assert(&(pre_vector[s]) == &(pre_vector.begin()[s]));\n+             assert(&(pre_vector[s]) == &*(pre_vector.begin() + s));\n+             assert(&(pre_vector[s]) == &*((pre_vector.end() + s) - real_vector.size()));\n+        }\n+        // assert(realtype(pre_vector) == real_vector);\n+        assert(pretype(real_vector.begin(), real_vector.end()) == pre_vector);\n+        assert(pretype(pre_vector.begin(), pre_vector.end()) == pre_vector);\n+        size_t pos = 0;\n+        for (const T& v : pre_vector) {\n+             assert(v == real_vector[pos++]);\n+        }\n+        for (const T& v : reverse_iterate(pre_vector)) {\n+             assert(v == real_vector[--pos]);\n+        }\n+        for (const T& v : const_pre_vector) {\n+             assert(v == real_vector[pos++]);\n+        }\n+        for (const T& v : reverse_iterate(const_pre_vector)) {\n+             assert(v == real_vector[--pos]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18529#discussion_r404415680",
      "id" : 404415680,
      "in_reply_to_id" : 403602307,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNTY4MA==",
      "original_commit_id" : "a8c3f233a143d80bd59dc51c23fbf78d5bb14f6c",
      "original_line" : 54,
      "original_position" : 54,
      "original_start_line" : null,
      "path" : "src/test/fuzz/prevector.cpp",
      "position" : null,
      "pull_request_review_id" : 388650160,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18529",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-06T22:02:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404415680",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18529#discussion_r404415727"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18529"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404415727"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No worries, done.",
      "commit_id" : "b1d24d1d031a2b2ce67bf846bafa1c3a499b7553",
      "created_at" : "2020-04-06T22:03:00Z",
      "diff_hunk" : "@@ -623,6 +623,12 @@ test_fuzz_parse_univalue_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_parse_univalue_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_parse_univalue_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_univalue.cpp\n \n+test_fuzz_prevector_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_prevector_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_prevector_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_prevector_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_prevector_SOURCES = $(FUZZ_SUITE) test/fuzz/prevector.cpp",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18529#discussion_r404415727",
      "id" : 404415727,
      "in_reply_to_id" : 403639840,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNTcyNw==",
      "original_commit_id" : "a8c3f233a143d80bd59dc51c23fbf78d5bb14f6c",
      "original_line" : 630,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/Makefile.test.include",
      "position" : null,
      "pull_request_review_id" : 388650230,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18529",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-06T22:03:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/404415727",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke Rebased, addressed your comments, and removed removal of the existing unit test (I've duplicated instead of creating a common shared class, as I expect the two to diverge - the existing test is much more suited as an approach for fuzzing, while we may want a few static cases instead as unit tests).",
      "created_at" : "2020-04-06T22:07:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18529#issuecomment-610062445",
      "id" : 610062445,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18529",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxMDA2MjQ0NQ==",
      "updated_at" : "2020-04-06T22:07:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/610062445",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK b1d24d1d031a2b2ce67bf846bafa1c3a499b7553 ð¬\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK b1d24d1d031a2b2ce67bf846bafa1c3a499b7553 ð¬\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjr+Qv/Xzpe1YkQG9BnrvlnlXx+mop66tdFHH3YXUWm8vaz9MPrQx3aWk1AW0xP\r\nm8PcmwXxne6sl7ohdn4GKcM5LT1qbczArzQ409CRvyXsUOVXouuH0O2mVRxao2WE\r\nge+MivCWX9TUlieUBnXlb7Aa9BKprE8RlrCcpEPZ2mXtv/gtzjuzrt98kCJGOjRb\r\npN7cuwQegAXhWnEeZjzGW9WFzORN9aBQGWd9AxQT5ARt5zU2FPrDtRfNGLkIj0tF\r\n0qCzmocq79NeMhugnSBGJMps66uGLjceUEd1jxntJUmjMJW/9LvNUS2IjjCu2GLW\r\naoogrsLtJGgAr/W/FOvvbFF5prgFEKhmtHPGcOIBEafbXHoS0AfVxlOOMekEijMF\r\nYmTOs8mb2hOEa9K5tsFi1S5eCYZnH7ZIUF1fqzyiExbnLhuPKecgy1K0lLiOud1c\r\nD+dk5L+9PU6u6X12QBl/w+j3b9kt8X+Cjse+UrZhiOWtBsicl/BKVxg45yzaH2BT\r\npHj6SgM2\r\n=BYOH\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n\r\n\r\n</details>\r\n",
      "created_at" : "2020-04-09T18:55:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18529#issuecomment-611696791",
      "id" : 611696791,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18529",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxMTY5Njc5MQ==",
      "updated_at" : "2020-04-09T18:55:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/611696791",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18529#discussion_r671121780"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18529"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/671121780"
         }
      },
      "author_association" : "MEMBER",
      "body" : "post-merge question: Is there a reason to limit the number of elements inserted in this case to `1` or `2`?",
      "commit_id" : "b1d24d1d031a2b2ce67bf846bafa1c3a499b7553",
      "created_at" : "2021-07-16T09:56:51Z",
      "diff_hunk" : "@@ -0,0 +1,263 @@\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+\n+#include <vector>\n+#include <prevector.h>\n+\n+#include <reverse_iterator.h>\n+#include <serialize.h>\n+#include <streams.h>\n+\n+namespace {\n+\n+template<unsigned int N, typename T>\n+class prevector_tester {\n+    typedef std::vector<T> realtype;\n+    realtype real_vector;\n+    realtype real_vector_alt;\n+\n+    typedef prevector<N, T> pretype;\n+    pretype pre_vector;\n+    pretype pre_vector_alt;\n+\n+    typedef typename pretype::size_type Size;\n+\n+public:\n+    void test() const {\n+        const pretype& const_pre_vector = pre_vector;\n+        assert(real_vector.size() == pre_vector.size());\n+        assert(real_vector.empty() == pre_vector.empty());\n+        for (Size s = 0; s < real_vector.size(); s++) {\n+             assert(real_vector[s] == pre_vector[s]);\n+             assert(&(pre_vector[s]) == &(pre_vector.begin()[s]));\n+             assert(&(pre_vector[s]) == &*(pre_vector.begin() + s));\n+             assert(&(pre_vector[s]) == &*((pre_vector.end() + s) - real_vector.size()));\n+        }\n+        // assert(realtype(pre_vector) == real_vector);\n+        assert(pretype(real_vector.begin(), real_vector.end()) == pre_vector);\n+        assert(pretype(pre_vector.begin(), pre_vector.end()) == pre_vector);\n+        size_t pos = 0;\n+        for (const T& v : pre_vector) {\n+             assert(v == real_vector[pos]);\n+             ++pos;\n+        }\n+        for (const T& v : reverse_iterate(pre_vector)) {\n+             --pos;\n+             assert(v == real_vector[pos]);\n+        }\n+        for (const T& v : const_pre_vector) {\n+             assert(v == real_vector[pos]);\n+             ++pos;\n+        }\n+        for (const T& v : reverse_iterate(const_pre_vector)) {\n+             --pos;\n+             assert(v == real_vector[pos]);\n+        }\n+        CDataStream ss1(SER_DISK, 0);\n+        CDataStream ss2(SER_DISK, 0);\n+        ss1 << real_vector;\n+        ss2 << pre_vector;\n+        assert(ss1.size() == ss2.size());\n+        for (Size s = 0; s < ss1.size(); s++) {\n+            assert(ss1[s] == ss2[s]);\n+        }\n+    }\n+\n+    void resize(Size s) {\n+        real_vector.resize(s);\n+        assert(real_vector.size() == s);\n+        pre_vector.resize(s);\n+        assert(pre_vector.size() == s);\n+    }\n+\n+    void reserve(Size s) {\n+        real_vector.reserve(s);\n+        assert(real_vector.capacity() >= s);\n+        pre_vector.reserve(s);\n+        assert(pre_vector.capacity() >= s);\n+    }\n+\n+    void insert(Size position, const T& value) {\n+        real_vector.insert(real_vector.begin() + position, value);\n+        pre_vector.insert(pre_vector.begin() + position, value);\n+    }\n+\n+    void insert(Size position, Size count, const T& value) {\n+        real_vector.insert(real_vector.begin() + position, count, value);\n+        pre_vector.insert(pre_vector.begin() + position, count, value);\n+    }\n+\n+    template<typename I>\n+    void insert_range(Size position, I first, I last) {\n+        real_vector.insert(real_vector.begin() + position, first, last);\n+        pre_vector.insert(pre_vector.begin() + position, first, last);\n+    }\n+\n+    void erase(Size position) {\n+        real_vector.erase(real_vector.begin() + position);\n+        pre_vector.erase(pre_vector.begin() + position);\n+    }\n+\n+    void erase(Size first, Size last) {\n+        real_vector.erase(real_vector.begin() + first, real_vector.begin() + last);\n+        pre_vector.erase(pre_vector.begin() + first, pre_vector.begin() + last);\n+    }\n+\n+    void update(Size pos, const T& value) {\n+        real_vector[pos] = value;\n+        pre_vector[pos] = value;\n+    }\n+\n+    void push_back(const T& value) {\n+        real_vector.push_back(value);\n+        pre_vector.push_back(value);\n+    }\n+\n+    void pop_back() {\n+        real_vector.pop_back();\n+        pre_vector.pop_back();\n+    }\n+\n+    void clear() {\n+        real_vector.clear();\n+        pre_vector.clear();\n+    }\n+\n+    void assign(Size n, const T& value) {\n+        real_vector.assign(n, value);\n+        pre_vector.assign(n, value);\n+    }\n+\n+    Size size() const {\n+        return real_vector.size();\n+    }\n+\n+    Size capacity() const {\n+        return pre_vector.capacity();\n+    }\n+\n+    void shrink_to_fit() {\n+        pre_vector.shrink_to_fit();\n+    }\n+\n+    void swap() {\n+        real_vector.swap(real_vector_alt);\n+        pre_vector.swap(pre_vector_alt);\n+    }\n+\n+    void move() {\n+        real_vector = std::move(real_vector_alt);\n+        real_vector_alt.clear();\n+        pre_vector = std::move(pre_vector_alt);\n+        pre_vector_alt.clear();\n+    }\n+\n+    void copy() {\n+        real_vector = real_vector_alt;\n+        pre_vector = pre_vector_alt;\n+    }\n+\n+    void resize_uninitialized(realtype values) {\n+        size_t r = values.size();\n+        size_t s = real_vector.size() / 2;\n+        if (real_vector.capacity() < s + r) {\n+            real_vector.reserve(s + r);\n+        }\n+        real_vector.resize(s);\n+        pre_vector.resize_uninitialized(s);\n+        for (auto v : values) {\n+            real_vector.push_back(v);\n+        }\n+        auto p = pre_vector.size();\n+        pre_vector.resize_uninitialized(p + r);\n+        for (auto v : values) {\n+            pre_vector[p] = v;\n+            ++p;\n+        }\n+    }\n+};\n+\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider prov(buffer.data(), buffer.size());\n+    prevector_tester<8, int> test;\n+\n+    while (prov.remaining_bytes()) {\n+        switch (prov.ConsumeIntegralInRange<int>(0, 13 + 3 * (test.size() > 0))) {\n+        case 0:\n+            test.insert(prov.ConsumeIntegralInRange<size_t>(0, test.size()), prov.ConsumeIntegral<int>());\n+            break;\n+        case 1:\n+            test.resize(std::max(0, std::min(30, (int)test.size() + prov.ConsumeIntegralInRange<int>(0, 4) - 2)));\n+            break;\n+        case 2:\n+            test.insert(prov.ConsumeIntegralInRange<size_t>(0, test.size()), 1 + prov.ConsumeBool(), prov.ConsumeIntegral<int>());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18529#discussion_r671121780",
      "id" : 671121780,
      "line" : 200,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MTEyMTc4MA==",
      "original_commit_id" : "b1d24d1d031a2b2ce67bf846bafa1c3a499b7553",
      "original_line" : 200,
      "original_position" : 200,
      "original_start_line" : null,
      "path" : "src/test/fuzz/prevector.cpp",
      "position" : 200,
      "pull_request_review_id" : 708205694,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18529",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-16T09:56:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/671121780",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
