{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "ElementsProject/secp256k1-zkp#131 adds MuSig2 support to secp256k1-zkp, which is an experimental fork of [secp256k1](https://github.com/bitcoin-core/secp256k1). I think it would be useful to have a (series of) draft pr(s) implementing support for this in Bitcoin Core. If only to make it easier to actually test MuSig2.\r\n\r\nMuSig2 paper: \"MuSig2: Simple Two-Round Schnorr Multi-Signatures\" (https://eprint.iacr.org/2020/1261)\r\n\r\nTo simplify things a bit, I'm assuming a things for now:\r\n1. The Bitcoin Core wallet coordinates setup and also takes the initiative for proposing a new transaction\r\n2. Two communication rounds are needed for signing ([no storing nonces in advance](https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-947898104)) \r\n3. ~Only key path spending (for script path spending we probably want miniscript support first anyway)~ (probably not an issue)\r\n4. Our wallet has private keys (after setup we import the musig descriptor and mark that as active)\r\n\r\nOne challenge is how to include secp256k1-zkp (I suppose a proof of concept PR can just swap out the git subtree).\r\n\r\n**Wallet setup**\r\n\r\nWe obtain an xpub with origin info from ourselves and the other signers. Perhaps at the [BIP 87](https://github.com/bitcoin/bips/blob/master/bip-0087.mediawiki) derivation of `m/87'/0'/0'`.\r\n\r\nTodo:\r\n- [ ] #22341\r\n- [ ] ...\r\n\r\nPass them into `secp256k1_musig_pubkey_agg`. Apparently it's possible to aggregate an xpub in one go, instead of calling this function on each and every derived key. But there's some caveats, perhaps @jonasnick can clarify:\r\n* This results in a new xpub, which can be used just fine by a watch-only wallet (which doesn't need to know MuSig2 was involved); but\r\n* agg(xpubA, xpubB)/* != agg(xpubA/*, xpubB/*)\r\n* what about the chain codes?\r\n* do we need to track xpub and/or origin info for the other signers? (this seems practical in any case when dealing with a dumb external signer)\r\n\r\nTodo:\r\n- [ ] RPC or bitcoin-util / bitcoin-wallet command that takes xpub(s), etc and does this\r\n   - since we have to call libsecp functions, a Python script doesn't seem like the right approach\r\n   - the result could be a fresh (public key) descriptor, that is either automatically or manually imported in the wallet\r\n- [ ] add musig2 descriptor (which tracks our own xpub at minimum, as well as the aggregated xpub or/and the other xpubs)\r\n\r\n**Round one nonces**\r\n\r\nOne nice aspect of MuSig2 is that the nonces required for round 1 can:\r\n1. be generated in advance\r\n2. be regenerated if a signer loses them\r\n3. support only 1 cosigner if that's easier\r\n\r\nSo it's tempting to collect a bunch of nonces during the setup. However this is very non-trivial, so let's not for now... https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-947898104\r\n\r\nInstead, we generate our nonce and request one from each participant. Probably the most practical way is to create a PSBT, put our first nonce in it, pass it to the next signer who reads ours and adds theirs. We then get the PSBT back from the last signer.\r\n\r\n- [ ] add PSBT fields\r\n\r\n**Round two: signing**\r\n\r\nPerform step 1 and 2 of [signing process](https://github.com/jonasnick/secp256k1-zkp/blob/musig2/src/modules/musig/musig.md#signing) on the nonces we have.\r\n\r\nGenerate our round 2 nonce with `secp256k1_musig_nonce_gen ` (step 4) and add those to the PSBT\r\n\r\nPass the PSBT to the other signer(s):\r\n1. if there's only 1 co-signer they can generate their nonce and `secp256k1_musig_partial_sign` in one go, and give us the result\r\n2. if there's 2+ co-signers???\r\n\r\nAdd our partial signature:\r\n\r\n- [ ] `secp256k1_musig_partial_sign` (by `walletprocesspsbt`?)\r\n\r\nGenerate full signature:\r\n\r\n- [ ] have one or more of PSBT method(s) do `secp256k1_musig_partial_sig_agg` (does not need wallet)  \r\n\r\nProfit.\r\n\r\n**Updates**\r\n2021-10-20 18:48 UTC: forget about pre committing nonces for round 1, instead use two signing rounds: https://github.com/bitcoin/bitcoin/issues/23326#issuecomment-947898104",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 2,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326/comments",
   "created_at" : "2021-10-20T16:20:01Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/23326",
   "id" : 1031598650,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "I_kwDOABII5849fPI6",
   "number" : 23326,
   "performed_via_github_app" : null,
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 1,
      "laugh" : 0,
      "rocket" : 2,
      "total_count" : 3,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326/timeline",
   "title" : "MuSig2 support",
   "updated_at" : "2021-10-20T18:56:43Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23326",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
      "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
      "followers_url" : "https://api.github.com/users/Sjors/followers",
      "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/Sjors",
      "id" : 10217,
      "login" : "Sjors",
      "node_id" : "MDQ6VXNlcjEwMjE3",
      "organizations_url" : "https://api.github.com/users/Sjors/orgs",
      "received_events_url" : "https://api.github.com/users/Sjors/received_events",
      "repos_url" : "https://api.github.com/users/Sjors/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/Sjors"
   }
}
