[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738380554"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738380554"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No need to reorder `coins_to_uncache, test_accept` to `test_accept, coins_to_uncache` here. It makes your static ctors inconsistent in their argument ordering.",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T13:17:49Z",
      "diff_hunk" : "@@ -1019,9 +1092,7 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\n                                                       EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    MemPoolAccept::ATMPArgs args { chainparams, nAcceptTime, bypass_limits, coins_to_uncache,\n-                                   test_accept, /* m_allow_bip125_replacement */ true };\n-\n+    auto args = MemPoolAccept::ATMPArgs::SingleAccept(chainparams, nAcceptTime, bypass_limits, test_accept, coins_to_uncache);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738380554",
      "id" : 738380554,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sAssK",
      "original_commit_id" : "f7d8be9b4bd8215a1a6261e0925c4bb7554b99ac",
      "original_line" : 1095,
      "original_position" : 498,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 791853253,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738380554/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T14:44:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738380554",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738385962"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738385962"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This comment is a little bit stranded now that the `txdata` variable has been removed. Perhaps just remove the first sentence?",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T13:23:41Z",
      "diff_hunk" : "@@ -919,30 +996,30 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n-    Workspace ws(ptx);\n+    Workspace ws(ptx, m_limit_descendants, m_limit_descendant_size);\n \n     if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n+    if (m_rbf && !ReplacementChecks(ws)) return MempoolAcceptResult::Failure(ws.m_state);\n+\n     // Only compute the precomputed transaction data if we need to verify",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738385962",
      "id" : 738385962,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sAuAq",
      "original_commit_id" : "f7d8be9b4bd8215a1a6261e0925c4bb7554b99ac",
      "original_line" : 1005,
      "original_position" : 421,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 791853253,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738385962/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T14:44:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738385962",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738399598"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738399598"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        if (ws.m_vsize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\r\n```\r\n```suggestion\r\n        if (ws.m_vsize > EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\r\n```",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T13:38:04Z",
      "diff_hunk" : "@@ -760,60 +811,90 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // to be secure by simply only having two immediately-spendable\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+        if (ws.m_vsize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738399598",
      "id" : 738399598,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sAxVu",
      "original_commit_id" : "f7d8be9b4bd8215a1a6261e0925c4bb7554b99ac",
      "original_line" : 814,
      "original_position" : 216,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 791853253,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738399598/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T14:44:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738399598",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738409406"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738409406"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: the `tx_` is a bit redundant here. This is a member of the `Workspace` object which is a collection of data relating to a single candidate transaction.",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T13:48:08Z",
      "diff_hunk" : "@@ -484,6 +519,15 @@ class MemPoolAccept\n         const CTransactionRef& m_ptx;\n         const uint256& m_hash;\n         TxValidationState m_state;\n+        /** A temporary cache containing serialized transaction data for signature verification.\n+         * Reused across PolicyScriptChecks and ConsensusScriptChecks. */\n+        PrecomputedTransactionData m_precomputed_txdata;\n+\n+        // Descendant limits passed in to CalculateMemPoolAncestors() for this transaction.\n+        // These may be modified while evaluating a transaction (eg to account for in-mempool\n+        // conflicts; see the comment in PreChecks).\n+        size_t m_tx_limit_descendants;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738409406",
      "id" : 738409406,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sAzu-",
      "original_commit_id" : "f7d8be9b4bd8215a1a6261e0925c4bb7554b99ac",
      "original_line" : 529,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 791853253,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738409406/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T14:44:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738409406",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738458528"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738458528"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is there any performance penalty in doing this lookup twice? I suspect it's not too bad since each of the lookups are into a boost::multi_index::hashed_unique map, which has an amortized complexity of O(1) (https://www.boost.org/doc/libs/1_56_0/libs/multi_index/doc/reference/hash_indices.html#lookup).\r\n\r\nEven so, it seems a shame to have to query the mempool twice for the same data. Could this set be stored in the `Workspace` object to avoid the second lookup?",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T14:35:00Z",
      "diff_hunk" : "@@ -760,60 +811,90 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // to be secure by simply only having two immediately-spendable\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+        if (ws.m_vsize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n+            !m_pool.CalculateMemPoolAncestors(*entry, ws.m_ancestors, /* limitancestors */ 2,\n+                m_limit_ancestor_size, ws.m_tx_limit_descendants + 1,\n+                ws.m_tx_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", errString);\n         }\n     }\n \n     // A transaction that spends outputs that would be replaced by it is invalid. Now\n     // that we have the set of all ancestors we can detect this\n-    // pathological case by making sure setConflicts and setAncestors don't\n+    // pathological case by making sure ws.m_conflicts and ws.m_ancestors don't\n     // intersect.\n-    if (const auto err_string{EntriesAndTxidsDisjoint(setAncestors, setConflicts, hash)}) {\n+    if (const auto err_string{EntriesAndTxidsDisjoint(ws.m_ancestors, ws.m_conflicts, hash)}) {\n         // We classify this as a consensus error because a transaction depending on something it\n         // conflicts with would be inconsistent.\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n+    m_rbf = !ws.m_conflicts.empty();\n+    return true;\n+}\n \n-    if (!setConflicts.empty()) {\n-        CFeeRate newFeeRate(nModifiedFees, nSize);\n-        // It's possible that the replacement pays more fees than its direct conflicts but not more\n-        // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n-        // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n-        // more economically rational to mine. Before we go digging through the mempool for all\n-        // transactions that would need to be removed (direct conflicts and all descendants), check\n-        // that the replacement transaction pays more than its direct conflicts.\n-        if (const auto err_string{PaysMoreThanConflicts(setIterConflicting, newFeeRate, hash)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n-        }\n+bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n \n-        // Calculate all conflicting entries and enforce BIP125 Rule #5.\n-        if (const auto err_string{GetEntriesForConflicts(tx, m_pool, setIterConflicting, allConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"too many potential replacements\", *err_string);\n-        }\n-        // Enforce BIP125 Rule #2.\n-        if (const auto err_string{HasNoNewUnconfirmed(tx, m_pool, setIterConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"replacement-adds-unconfirmed\", *err_string);\n-        }\n+    const CTransaction& tx = *ws.m_ptx;\n+    const uint256& hash = ws.m_hash;\n+    TxValidationState& state = ws.m_state;\n+    const CTxMemPool::setEntries setIterConflicting = m_pool.GetIterSet(ws.m_conflicts);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738458528",
      "id" : 738458528,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sA_ug",
      "original_commit_id" : "f7d8be9b4bd8215a1a6261e0925c4bb7554b99ac",
      "original_line" : 844,
      "original_position" : 269,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 791853253,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738458528/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T14:44:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738458528",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738498714"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738498714"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T15:15:58Z",
      "diff_hunk" : "@@ -1019,9 +1092,7 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\n                                                       EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    MemPoolAccept::ATMPArgs args { chainparams, nAcceptTime, bypass_limits, coins_to_uncache,\n-                                   test_accept, /* m_allow_bip125_replacement */ true };\n-\n+    auto args = MemPoolAccept::ATMPArgs::SingleAccept(chainparams, nAcceptTime, bypass_limits, test_accept, coins_to_uncache);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738498714",
      "id" : 738498714,
      "in_reply_to_id" : 738380554,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sBJia",
      "original_commit_id" : "f7d8be9b4bd8215a1a6261e0925c4bb7554b99ac",
      "original_line" : 1095,
      "original_position" : 498,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 792020775,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738498714/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T15:15:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738498714",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738498871"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738498871"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Removed first sentence",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T15:16:08Z",
      "diff_hunk" : "@@ -919,30 +996,30 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n-    Workspace ws(ptx);\n+    Workspace ws(ptx, m_limit_descendants, m_limit_descendant_size);\n \n     if (!PreChecks(args, ws)) return MempoolAcceptResult::Failure(ws.m_state);\n \n+    if (m_rbf && !ReplacementChecks(ws)) return MempoolAcceptResult::Failure(ws.m_state);\n+\n     // Only compute the precomputed transaction data if we need to verify",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738498871",
      "id" : 738498871,
      "in_reply_to_id" : 738385962,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sBJk3",
      "original_commit_id" : "f7d8be9b4bd8215a1a6261e0925c4bb7554b99ac",
      "original_line" : 1005,
      "original_position" : 421,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 792020982,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738498871/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T15:16:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738498871",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738499125"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738499125"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T15:16:24Z",
      "diff_hunk" : "@@ -760,60 +811,90 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // to be secure by simply only having two immediately-spendable\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+        if (ws.m_vsize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738499125",
      "id" : 738499125,
      "in_reply_to_id" : 738399598,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sBJo1",
      "original_commit_id" : "f7d8be9b4bd8215a1a6261e0925c4bb7554b99ac",
      "original_line" : 814,
      "original_position" : 216,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 792021313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738499125/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T15:16:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738499125",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738499521"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738499521"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hok, took out the `tx_`",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T15:16:49Z",
      "diff_hunk" : "@@ -484,6 +519,15 @@ class MemPoolAccept\n         const CTransactionRef& m_ptx;\n         const uint256& m_hash;\n         TxValidationState m_state;\n+        /** A temporary cache containing serialized transaction data for signature verification.\n+         * Reused across PolicyScriptChecks and ConsensusScriptChecks. */\n+        PrecomputedTransactionData m_precomputed_txdata;\n+\n+        // Descendant limits passed in to CalculateMemPoolAncestors() for this transaction.\n+        // These may be modified while evaluating a transaction (eg to account for in-mempool\n+        // conflicts; see the comment in PreChecks).\n+        size_t m_tx_limit_descendants;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738499521",
      "id" : 738499521,
      "in_reply_to_id" : 738409406,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sBJvB",
      "original_commit_id" : "f7d8be9b4bd8215a1a6261e0925c4bb7554b99ac",
      "original_line" : 529,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 792021856,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738499521/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T15:16:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738499521",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738499868"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738499868"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "added a `m_iters_conflicting` to the `workspace` struct",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T15:17:11Z",
      "diff_hunk" : "@@ -760,60 +811,90 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // to be secure by simply only having two immediately-spendable\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+        if (ws.m_vsize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n+            !m_pool.CalculateMemPoolAncestors(*entry, ws.m_ancestors, /* limitancestors */ 2,\n+                m_limit_ancestor_size, ws.m_tx_limit_descendants + 1,\n+                ws.m_tx_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", errString);\n         }\n     }\n \n     // A transaction that spends outputs that would be replaced by it is invalid. Now\n     // that we have the set of all ancestors we can detect this\n-    // pathological case by making sure setConflicts and setAncestors don't\n+    // pathological case by making sure ws.m_conflicts and ws.m_ancestors don't\n     // intersect.\n-    if (const auto err_string{EntriesAndTxidsDisjoint(setAncestors, setConflicts, hash)}) {\n+    if (const auto err_string{EntriesAndTxidsDisjoint(ws.m_ancestors, ws.m_conflicts, hash)}) {\n         // We classify this as a consensus error because a transaction depending on something it\n         // conflicts with would be inconsistent.\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n+    m_rbf = !ws.m_conflicts.empty();\n+    return true;\n+}\n \n-    if (!setConflicts.empty()) {\n-        CFeeRate newFeeRate(nModifiedFees, nSize);\n-        // It's possible that the replacement pays more fees than its direct conflicts but not more\n-        // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n-        // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n-        // more economically rational to mine. Before we go digging through the mempool for all\n-        // transactions that would need to be removed (direct conflicts and all descendants), check\n-        // that the replacement transaction pays more than its direct conflicts.\n-        if (const auto err_string{PaysMoreThanConflicts(setIterConflicting, newFeeRate, hash)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n-        }\n+bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n \n-        // Calculate all conflicting entries and enforce BIP125 Rule #5.\n-        if (const auto err_string{GetEntriesForConflicts(tx, m_pool, setIterConflicting, allConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"too many potential replacements\", *err_string);\n-        }\n-        // Enforce BIP125 Rule #2.\n-        if (const auto err_string{HasNoNewUnconfirmed(tx, m_pool, setIterConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"replacement-adds-unconfirmed\", *err_string);\n-        }\n+    const CTransaction& tx = *ws.m_ptx;\n+    const uint256& hash = ws.m_hash;\n+    TxValidationState& state = ws.m_state;\n+    const CTxMemPool::setEntries setIterConflicting = m_pool.GetIterSet(ws.m_conflicts);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738499868",
      "id" : 738499868,
      "in_reply_to_id" : 738458528,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sBJ0c",
      "original_commit_id" : "f7d8be9b4bd8215a1a6261e0925c4bb7554b99ac",
      "original_line" : 844,
      "original_position" : 269,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 792022334,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738499868/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T15:17:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738499868",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for the review @jnewbery, took your suggestions",
      "created_at" : "2021-10-28T15:17:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#issuecomment-953947619",
      "id" : 953947619,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23381",
      "node_id" : "IC_kwDOABII58443BXj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/953947619/reactions"
      },
      "updated_at" : "2021-10-28T15:17:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/953947619",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738537426"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738537426"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: you could also comment the `m_all_conflicting` member below to emphasize that it contains the conflicts with all descendants. And perhaps rename the members to `m_direct_conflicts` and `m_all_conflicts` to highlight that difference.\r\n\r\nAlso, the `m_conflicts` member above is only used in `PreChecks()`, so could be a local variable in that function rather than a member of `Workspace`.\r\n\r\nPerhaps it makes sense to clean all of that up in the _[validation] cache iterators to mempool conflicts_ commit?",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-28T15:59:11Z",
      "diff_hunk" : "@@ -467,13 +496,21 @@ class MemPoolAccept\n     // All the intermediate state that gets passed between the various levels\n     // of checking a given transaction.\n     struct Workspace {\n-        explicit Workspace(const CTransactionRef& ptx) : m_ptx(ptx), m_hash(ptx->GetHash()) {}\n+        explicit Workspace(const CTransactionRef& ptx, size_t limit_descendants, size_t limit_descendant_size) :\n+            m_ptx(ptx), m_hash(ptx->GetHash()),\n+            m_limit_descendants{limit_descendants},\n+            m_limit_descendant_size{limit_descendant_size} {}\n         std::set<uint256> m_conflicts;\n+        /** Iterators to mempool entries that this transaction directly conflicts with. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r738537426",
      "id" : 738537426,
      "line" : 504,
      "node_id" : "PRRC_kwDOABII584sBS_S",
      "original_commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "original_line" : 504,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 48,
      "pull_request_review_id" : 792074604,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738537426/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-28T15:59:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738537426",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23465](https://github.com/bitcoin/bitcoin/pull/23465) (Remove CChainParams and CTxMemPool params from ATMP by lsilva01)\n* [#23448](https://github.com/bitcoin/bitcoin/pull/23448) (refactor, consensus: remove calls to global `Params()` in validation layer by lsilva01)\n* [#23437](https://github.com/bitcoin/bitcoin/pull/23437) (refactor, mempool: remove AcceptToMemoryPoolWithTime by lsilva01)\n* [#23121](https://github.com/bitcoin/bitcoin/pull/23121) ([policy] check ancestor feerate in RBF, remove BIP125 Rule2 by glozow)\n* [#22981](https://github.com/bitcoin/bitcoin/pull/22981) (doc: Fix incorrect C++ named args by MarcoFalke)\n* [#22674](https://github.com/bitcoin/bitcoin/pull/22674) (validation: mempool validation and submission for packages of 1 child + parents by glozow)\n* [#22097](https://github.com/bitcoin/bitcoin/pull/22097) (validation: Move package acceptance size limit from KvB to WU by ariard)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-10-28T18:37:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#issuecomment-954101804",
      "id" : 954101804,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23381",
      "node_id" : "IC_kwDOABII58443nAs",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/954101804/reactions"
      },
      "updated_at" : "2021-11-08T06:19:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/954101804",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r739138737"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/739138737"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This parameter isn't used in this PR or #22674. I suggest leaving it out until it's used in #22290 (and I think there, you can just pass the vector of `Workspace`s and not the vector of `CTransactionRef`s, since the `Workspace`s contain the `CTransactionRef`s)",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-10-29T11:01:52Z",
      "diff_hunk" : "@@ -760,60 +813,88 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // to be secure by simply only having two immediately-spendable\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+        if (ws.m_vsize > EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n+            !m_pool.CalculateMemPoolAncestors(*entry, ws.m_ancestors, /* limitancestors */ 2,\n+                m_limit_ancestor_size, ws.m_limit_descendants + 1,\n+                ws.m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", errString);\n         }\n     }\n \n     // A transaction that spends outputs that would be replaced by it is invalid. Now\n     // that we have the set of all ancestors we can detect this\n-    // pathological case by making sure setConflicts and setAncestors don't\n+    // pathological case by making sure ws.m_conflicts and ws.m_ancestors don't\n     // intersect.\n-    if (const auto err_string{EntriesAndTxidsDisjoint(setAncestors, setConflicts, hash)}) {\n+    if (const auto err_string{EntriesAndTxidsDisjoint(ws.m_ancestors, ws.m_conflicts, hash)}) {\n         // We classify this as a consensus error because a transaction depending on something it\n         // conflicts with would be inconsistent.\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n+    m_rbf = !ws.m_conflicts.empty();\n+    return true;\n+}\n \n-    if (!setConflicts.empty()) {\n-        CFeeRate newFeeRate(nModifiedFees, nSize);\n-        // It's possible that the replacement pays more fees than its direct conflicts but not more\n-        // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n-        // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n-        // more economically rational to mine. Before we go digging through the mempool for all\n-        // transactions that would need to be removed (direct conflicts and all descendants), check\n-        // that the replacement transaction pays more than its direct conflicts.\n-        if (const auto err_string{PaysMoreThanConflicts(setIterConflicting, newFeeRate, hash)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n-        }\n+bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n \n-        // Calculate all conflicting entries and enforce BIP125 Rule #5.\n-        if (const auto err_string{GetEntriesForConflicts(tx, m_pool, setIterConflicting, allConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"too many potential replacements\", *err_string);\n-        }\n-        // Enforce BIP125 Rule #2.\n-        if (const auto err_string{HasNoNewUnconfirmed(tx, m_pool, setIterConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"replacement-adds-unconfirmed\", *err_string);\n-        }\n+    const CTransaction& tx = *ws.m_ptx;\n+    const uint256& hash = ws.m_hash;\n+    TxValidationState& state = ws.m_state;\n \n-        // Check if it's economically rational to mine this transaction rather than the ones it\n-        // replaces and pays for its own relay fees. Enforce BIP125 Rules #3 and #4.\n-        for (CTxMemPool::txiter it : allConflicting) {\n-            nConflictingFees += it->GetModifiedFee();\n-            nConflictingSize += it->GetTxSize();\n-        }\n-        if (const auto err_string{PaysForRBF(nConflictingFees, nModifiedFees, nSize, ::incrementalRelayFee, hash)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n-        }\n+    CFeeRate newFeeRate(ws.m_modified_fees, ws.m_vsize);\n+    // It's possible that the replacement pays more fees than its direct conflicts but not more\n+    // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n+    // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n+    // more economically rational to mine. Before we go digging through the mempool for all\n+    // transactions that would need to be removed (direct conflicts and all descendants), check\n+    // that the replacement transaction pays more than its direct conflicts.\n+    if (const auto err_string{PaysMoreThanConflicts(ws.m_iters_conflicting, newFeeRate, hash)}) {\n+        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n+    }\n+\n+    // Calculate all conflicting entries and enforce BIP125 Rule #5.\n+    if (const auto err_string{GetEntriesForConflicts(tx, m_pool, ws.m_iters_conflicting, ws.m_all_conflicting)}) {\n+        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n+                             \"too many potential replacements\", *err_string);\n+    }\n+    // Enforce BIP125 Rule #2.\n+    if (const auto err_string{HasNoNewUnconfirmed(tx, m_pool, ws.m_iters_conflicting)}) {\n+        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n+                             \"replacement-adds-unconfirmed\", *err_string);\n+    }\n+    // Check if it's economically rational to mine this transaction rather than the ones it\n+    // replaces and pays for its own relay fees. Enforce BIP125 Rules #3 and #4.\n+    for (CTxMemPool::txiter it : ws.m_all_conflicting) {\n+        ws.m_conflicting_fees += it->GetModifiedFee();\n+        ws.m_conflicting_size += it->GetTxSize();\n+    }\n+    if (const auto err_string{PaysForRBF(ws.m_conflicting_fees, ws.m_modified_fees, ws.m_vsize,\n+                                         ::incrementalRelayFee, hash)}) {\n+        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n     }\n     return true;\n }\n \n-bool MemPoolAccept::PolicyScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata)\n+bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txns,\n+                                         std::vector<Workspace>& workspaces,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r739138737",
      "id" : 739138737,
      "line" : 882,
      "node_id" : "PRRC_kwDOABII584sDlyx",
      "original_commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "original_line" : 882,
      "original_position" : 322,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 322,
      "pull_request_review_id" : 792904885,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/739138737/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-29T11:01:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/739138737",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r740643940"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/740643940"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If you can backport the renaming to `m_tx_limit_descendants` from #22674, I think that's good for review clarity. \r\n\r\nThat said, I still don't get why introducing a new pair of descendant limits at the `Workspace`-level, _in addition_ of the one already present in `MemPoolAccept`. AFAICT, the intermediate state, as modified in consequence to account for carve-out relaxation in `PreChecks` isn't re-used inside the other mempool checks helpers (`PolicyScriptChecks`, `Finalize`, ...). Or is the rational about a future use, even ulterior to #22674 ?",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-11-02T00:35:21Z",
      "diff_hunk" : "@@ -484,6 +521,15 @@ class MemPoolAccept\n         const CTransactionRef& m_ptx;\n         const uint256& m_hash;\n         TxValidationState m_state;\n+        /** A temporary cache containing serialized transaction data for signature verification.\n+         * Reused across PolicyScriptChecks and ConsensusScriptChecks. */\n+        PrecomputedTransactionData m_precomputed_txdata;\n+\n+        // Descendant limits passed in to CalculateMemPoolAncestors() for this transaction.\n+        // These may be modified while evaluating a transaction (eg to account for in-mempool\n+        // conflicts; see the comment in PreChecks).\n+        size_t m_limit_descendants;\n+        size_t m_limit_descendant_size;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r740643940",
      "id" : 740643940,
      "line" : 532,
      "node_id" : "PRRC_kwDOABII584sJVRk",
      "original_commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "original_line" : 532,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 73,
      "pull_request_review_id" : 794784809,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/740643940/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-02T01:00:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/740643940",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r740646512"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/740646512"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe good timing to rename `m_hash` to `m_txid_hash` or anything else to break ambiguity in prevision of wtxid acceptance.",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-11-02T00:43:42Z",
      "diff_hunk" : "@@ -760,60 +813,88 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // to be secure by simply only having two immediately-spendable\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+        if (ws.m_vsize > EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n+            !m_pool.CalculateMemPoolAncestors(*entry, ws.m_ancestors, /* limitancestors */ 2,\n+                m_limit_ancestor_size, ws.m_limit_descendants + 1,\n+                ws.m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", errString);\n         }\n     }\n \n     // A transaction that spends outputs that would be replaced by it is invalid. Now\n     // that we have the set of all ancestors we can detect this\n-    // pathological case by making sure setConflicts and setAncestors don't\n+    // pathological case by making sure ws.m_conflicts and ws.m_ancestors don't\n     // intersect.\n-    if (const auto err_string{EntriesAndTxidsDisjoint(setAncestors, setConflicts, hash)}) {\n+    if (const auto err_string{EntriesAndTxidsDisjoint(ws.m_ancestors, ws.m_conflicts, hash)}) {\n         // We classify this as a consensus error because a transaction depending on something it\n         // conflicts with would be inconsistent.\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n+    m_rbf = !ws.m_conflicts.empty();\n+    return true;\n+}\n \n-    if (!setConflicts.empty()) {\n-        CFeeRate newFeeRate(nModifiedFees, nSize);\n-        // It's possible that the replacement pays more fees than its direct conflicts but not more\n-        // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n-        // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n-        // more economically rational to mine. Before we go digging through the mempool for all\n-        // transactions that would need to be removed (direct conflicts and all descendants), check\n-        // that the replacement transaction pays more than its direct conflicts.\n-        if (const auto err_string{PaysMoreThanConflicts(setIterConflicting, newFeeRate, hash)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n-        }\n+bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n \n-        // Calculate all conflicting entries and enforce BIP125 Rule #5.\n-        if (const auto err_string{GetEntriesForConflicts(tx, m_pool, setIterConflicting, allConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"too many potential replacements\", *err_string);\n-        }\n-        // Enforce BIP125 Rule #2.\n-        if (const auto err_string{HasNoNewUnconfirmed(tx, m_pool, setIterConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"replacement-adds-unconfirmed\", *err_string);\n-        }\n+    const CTransaction& tx = *ws.m_ptx;\n+    const uint256& hash = ws.m_hash;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r740646512",
      "id" : 740646512,
      "line" : 844,
      "node_id" : "PRRC_kwDOABII584sJV5w",
      "original_commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "original_line" : 844,
      "original_position" : 274,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 274,
      "pull_request_review_id" : 794784809,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/740646512/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-02T01:00:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/740646512",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r740648931"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/740648931"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: This comment could be replicated, at least in substance in `m_modified_fees` member declaration in `Workspace`. Naming could be also clearer to indicate the source of the modification itself, like `m_priority_fees`",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-11-02T00:51:49Z",
      "diff_hunk" : "@@ -680,9 +732,9 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     int64_t nSigOpsCost = GetTransactionSigOpCost(tx, m_view, STANDARD_SCRIPT_VERIFY_FLAGS);\n \n-    // nModifiedFees includes any fee deltas from PrioritiseTransaction\n-    nModifiedFees = ws.m_base_fees;\n-    m_pool.ApplyDelta(hash, nModifiedFees);\n+    // ws.m_modified_fees includes any fee deltas from PrioritiseTransaction",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r740648931",
      "id" : 740648931,
      "line" : 735,
      "node_id" : "PRRC_kwDOABII584sJWfj",
      "original_commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "original_line" : 735,
      "original_position" : 163,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 163,
      "pull_request_review_id" : 794784809,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/740648931/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-02T01:00:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/740648931",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r740651256"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/740651256"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note the comment above `PreChecks` also mention evaluation package limits. I think both of statements are true, though they don't refer to the same set of package limits. IIRC the first ones in `PreChecks` are the in-mempool package limits while the second ones concern atomically accepted package, which is stricter under the union rule. \r\n\r\nI think we can improve documentation to establish clearly that we have two set of package limits to consider.",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-11-02T01:00:03Z",
      "diff_hunk" : "@@ -492,15 +538,23 @@ class MemPoolAccept\n     // only tests that are fast should be done here (to avoid CPU DoS).\n     bool PreChecks(ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n+    // Run checks for mempool replace-by-fee.\n+    bool ReplacementChecks(Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+\n+    // Enforce package mempool ancestor/descendant limits.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r740651256",
      "id" : 740651256,
      "line" : 544,
      "node_id" : "PRRC_kwDOABII584sJXD4",
      "original_commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "original_line" : 544,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 84,
      "pull_request_review_id" : 794784809,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/740651256/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-02T01:00:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/740651256",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r741099846"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/741099846"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "You're right that it's not necessary yet in #22674 - I apologize, as the cut off for splitting it out of #22290 was a little bit arbitrary, so there are a few not-yet-relevant-until-later refactors in this PR.\r\n\r\nTo explain the problem: when we add package RBF, we don't want to increase the `MemPoolAccept::m_limit_descendants` here: https://github.com/bitcoin/bitcoin/blob/04670ef81ea2300fcba4e1a492c4c6b0e0752848/src/validation.cpp#L765\r\nFor example, if we had a package of 5 parents and 1 child, and each of the parents had exactly 1 conflict, this would cause us to increase the descendant limit 5 times. That would be incorrectly inflating the limit.",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-11-02T14:16:09Z",
      "diff_hunk" : "@@ -484,6 +521,15 @@ class MemPoolAccept\n         const CTransactionRef& m_ptx;\n         const uint256& m_hash;\n         TxValidationState m_state;\n+        /** A temporary cache containing serialized transaction data for signature verification.\n+         * Reused across PolicyScriptChecks and ConsensusScriptChecks. */\n+        PrecomputedTransactionData m_precomputed_txdata;\n+\n+        // Descendant limits passed in to CalculateMemPoolAncestors() for this transaction.\n+        // These may be modified while evaluating a transaction (eg to account for in-mempool\n+        // conflicts; see the comment in PreChecks).\n+        size_t m_limit_descendants;\n+        size_t m_limit_descendant_size;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r741099846",
      "id" : 741099846,
      "in_reply_to_id" : 740643940,
      "line" : 532,
      "node_id" : "PRRC_kwDOABII584sLElG",
      "original_commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "original_line" : 532,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 73,
      "pull_request_review_id" : 795410828,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/741099846/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-02T14:16:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/741099846",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r741101014"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/741101014"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good point, though I would prefer to just remove `m_hash` from `Workspace` entirely. The hashes are already cached in the `CTransaction` object, so we can just call `ptx->GetHash()` and `ptx->GetWitnessHash()` directly.",
      "commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "created_at" : "2021-11-02T14:17:20Z",
      "diff_hunk" : "@@ -760,60 +813,88 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // to be secure by simply only having two immediately-spendable\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+        if (ws.m_vsize > EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n+            !m_pool.CalculateMemPoolAncestors(*entry, ws.m_ancestors, /* limitancestors */ 2,\n+                m_limit_ancestor_size, ws.m_limit_descendants + 1,\n+                ws.m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", errString);\n         }\n     }\n \n     // A transaction that spends outputs that would be replaced by it is invalid. Now\n     // that we have the set of all ancestors we can detect this\n-    // pathological case by making sure setConflicts and setAncestors don't\n+    // pathological case by making sure ws.m_conflicts and ws.m_ancestors don't\n     // intersect.\n-    if (const auto err_string{EntriesAndTxidsDisjoint(setAncestors, setConflicts, hash)}) {\n+    if (const auto err_string{EntriesAndTxidsDisjoint(ws.m_ancestors, ws.m_conflicts, hash)}) {\n         // We classify this as a consensus error because a transaction depending on something it\n         // conflicts with would be inconsistent.\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n+    m_rbf = !ws.m_conflicts.empty();\n+    return true;\n+}\n \n-    if (!setConflicts.empty()) {\n-        CFeeRate newFeeRate(nModifiedFees, nSize);\n-        // It's possible that the replacement pays more fees than its direct conflicts but not more\n-        // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n-        // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n-        // more economically rational to mine. Before we go digging through the mempool for all\n-        // transactions that would need to be removed (direct conflicts and all descendants), check\n-        // that the replacement transaction pays more than its direct conflicts.\n-        if (const auto err_string{PaysMoreThanConflicts(setIterConflicting, newFeeRate, hash)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n-        }\n+bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n \n-        // Calculate all conflicting entries and enforce BIP125 Rule #5.\n-        if (const auto err_string{GetEntriesForConflicts(tx, m_pool, setIterConflicting, allConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"too many potential replacements\", *err_string);\n-        }\n-        // Enforce BIP125 Rule #2.\n-        if (const auto err_string{HasNoNewUnconfirmed(tx, m_pool, setIterConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"replacement-adds-unconfirmed\", *err_string);\n-        }\n+    const CTransaction& tx = *ws.m_ptx;\n+    const uint256& hash = ws.m_hash;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r741101014",
      "id" : 741101014,
      "in_reply_to_id" : 740646512,
      "line" : 844,
      "node_id" : "PRRC_kwDOABII584sLE3W",
      "original_commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "original_line" : 844,
      "original_position" : 274,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 274,
      "pull_request_review_id" : 795415620,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/741101014/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-02T14:17:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/741101014",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r743012051"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743012051"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Removed the commit from this PR - will add later when needed in package RBF",
      "commit_id" : "7b8c8bf254a562f3d5602e1a4d4a2ba129f8ed62",
      "created_at" : "2021-11-04T16:33:44Z",
      "diff_hunk" : "@@ -484,6 +521,15 @@ class MemPoolAccept\n         const CTransactionRef& m_ptx;\n         const uint256& m_hash;\n         TxValidationState m_state;\n+        /** A temporary cache containing serialized transaction data for signature verification.\n+         * Reused across PolicyScriptChecks and ConsensusScriptChecks. */\n+        PrecomputedTransactionData m_precomputed_txdata;\n+\n+        // Descendant limits passed in to CalculateMemPoolAncestors() for this transaction.\n+        // These may be modified while evaluating a transaction (eg to account for in-mempool\n+        // conflicts; see the comment in PreChecks).\n+        size_t m_limit_descendants;\n+        size_t m_limit_descendant_size;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r743012051",
      "id" : 743012051,
      "in_reply_to_id" : 740643940,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sSXbT",
      "original_commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "original_line" : 532,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 797985815,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743012051/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-04T16:33:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743012051",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r743012329"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743012329"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added a commit to document the `Workspace` members",
      "commit_id" : "7b8c8bf254a562f3d5602e1a4d4a2ba129f8ed62",
      "created_at" : "2021-11-04T16:33:59Z",
      "diff_hunk" : "@@ -467,13 +496,21 @@ class MemPoolAccept\n     // All the intermediate state that gets passed between the various levels\n     // of checking a given transaction.\n     struct Workspace {\n-        explicit Workspace(const CTransactionRef& ptx) : m_ptx(ptx), m_hash(ptx->GetHash()) {}\n+        explicit Workspace(const CTransactionRef& ptx, size_t limit_descendants, size_t limit_descendant_size) :\n+            m_ptx(ptx), m_hash(ptx->GetHash()),\n+            m_limit_descendants{limit_descendants},\n+            m_limit_descendant_size{limit_descendant_size} {}\n         std::set<uint256> m_conflicts;\n+        /** Iterators to mempool entries that this transaction directly conflicts with. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r743012329",
      "id" : 743012329,
      "in_reply_to_id" : 738537426,
      "line" : 502,
      "node_id" : "PRRC_kwDOABII584sSXfp",
      "original_commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "original_line" : 502,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 44,
      "pull_request_review_id" : 797986136,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743012329/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-04T16:33:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743012329",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r743012683"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743012683"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Removed from this PR",
      "commit_id" : "7b8c8bf254a562f3d5602e1a4d4a2ba129f8ed62",
      "created_at" : "2021-11-04T16:34:24Z",
      "diff_hunk" : "@@ -760,60 +813,88 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // to be secure by simply only having two immediately-spendable\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+        if (ws.m_vsize > EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n+            !m_pool.CalculateMemPoolAncestors(*entry, ws.m_ancestors, /* limitancestors */ 2,\n+                m_limit_ancestor_size, ws.m_limit_descendants + 1,\n+                ws.m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", errString);\n         }\n     }\n \n     // A transaction that spends outputs that would be replaced by it is invalid. Now\n     // that we have the set of all ancestors we can detect this\n-    // pathological case by making sure setConflicts and setAncestors don't\n+    // pathological case by making sure ws.m_conflicts and ws.m_ancestors don't\n     // intersect.\n-    if (const auto err_string{EntriesAndTxidsDisjoint(setAncestors, setConflicts, hash)}) {\n+    if (const auto err_string{EntriesAndTxidsDisjoint(ws.m_ancestors, ws.m_conflicts, hash)}) {\n         // We classify this as a consensus error because a transaction depending on something it\n         // conflicts with would be inconsistent.\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n+    m_rbf = !ws.m_conflicts.empty();\n+    return true;\n+}\n \n-    if (!setConflicts.empty()) {\n-        CFeeRate newFeeRate(nModifiedFees, nSize);\n-        // It's possible that the replacement pays more fees than its direct conflicts but not more\n-        // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n-        // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n-        // more economically rational to mine. Before we go digging through the mempool for all\n-        // transactions that would need to be removed (direct conflicts and all descendants), check\n-        // that the replacement transaction pays more than its direct conflicts.\n-        if (const auto err_string{PaysMoreThanConflicts(setIterConflicting, newFeeRate, hash)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n-        }\n+bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n \n-        // Calculate all conflicting entries and enforce BIP125 Rule #5.\n-        if (const auto err_string{GetEntriesForConflicts(tx, m_pool, setIterConflicting, allConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"too many potential replacements\", *err_string);\n-        }\n-        // Enforce BIP125 Rule #2.\n-        if (const auto err_string{HasNoNewUnconfirmed(tx, m_pool, setIterConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"replacement-adds-unconfirmed\", *err_string);\n-        }\n+    const CTransaction& tx = *ws.m_ptx;\n+    const uint256& hash = ws.m_hash;\n+    TxValidationState& state = ws.m_state;\n \n-        // Check if it's economically rational to mine this transaction rather than the ones it\n-        // replaces and pays for its own relay fees. Enforce BIP125 Rules #3 and #4.\n-        for (CTxMemPool::txiter it : allConflicting) {\n-            nConflictingFees += it->GetModifiedFee();\n-            nConflictingSize += it->GetTxSize();\n-        }\n-        if (const auto err_string{PaysForRBF(nConflictingFees, nModifiedFees, nSize, ::incrementalRelayFee, hash)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n-        }\n+    CFeeRate newFeeRate(ws.m_modified_fees, ws.m_vsize);\n+    // It's possible that the replacement pays more fees than its direct conflicts but not more\n+    // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n+    // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n+    // more economically rational to mine. Before we go digging through the mempool for all\n+    // transactions that would need to be removed (direct conflicts and all descendants), check\n+    // that the replacement transaction pays more than its direct conflicts.\n+    if (const auto err_string{PaysMoreThanConflicts(ws.m_iters_conflicting, newFeeRate, hash)}) {\n+        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n+    }\n+\n+    // Calculate all conflicting entries and enforce BIP125 Rule #5.\n+    if (const auto err_string{GetEntriesForConflicts(tx, m_pool, ws.m_iters_conflicting, ws.m_all_conflicting)}) {\n+        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n+                             \"too many potential replacements\", *err_string);\n+    }\n+    // Enforce BIP125 Rule #2.\n+    if (const auto err_string{HasNoNewUnconfirmed(tx, m_pool, ws.m_iters_conflicting)}) {\n+        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n+                             \"replacement-adds-unconfirmed\", *err_string);\n+    }\n+    // Check if it's economically rational to mine this transaction rather than the ones it\n+    // replaces and pays for its own relay fees. Enforce BIP125 Rules #3 and #4.\n+    for (CTxMemPool::txiter it : ws.m_all_conflicting) {\n+        ws.m_conflicting_fees += it->GetModifiedFee();\n+        ws.m_conflicting_size += it->GetTxSize();\n+    }\n+    if (const auto err_string{PaysForRBF(ws.m_conflicting_fees, ws.m_modified_fees, ws.m_vsize,\n+                                         ::incrementalRelayFee, hash)}) {\n+        return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n     }\n     return true;\n }\n \n-bool MemPoolAccept::PolicyScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata)\n+bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txns,\n+                                         std::vector<Workspace>& workspaces,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r743012683",
      "id" : 743012683,
      "in_reply_to_id" : 739138737,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sSXlL",
      "original_commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "original_line" : 882,
      "original_position" : 322,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 797986656,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743012683/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-04T16:34:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743012683",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r743013476"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743013476"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added comment to `m_modified_fees` ð ",
      "commit_id" : "7b8c8bf254a562f3d5602e1a4d4a2ba129f8ed62",
      "created_at" : "2021-11-04T16:35:13Z",
      "diff_hunk" : "@@ -680,9 +732,9 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     int64_t nSigOpsCost = GetTransactionSigOpCost(tx, m_view, STANDARD_SCRIPT_VERIFY_FLAGS);\n \n-    // nModifiedFees includes any fee deltas from PrioritiseTransaction\n-    nModifiedFees = ws.m_base_fees;\n-    m_pool.ApplyDelta(hash, nModifiedFees);\n+    // ws.m_modified_fees includes any fee deltas from PrioritiseTransaction",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r743013476",
      "id" : 743013476,
      "in_reply_to_id" : 740648931,
      "line" : 737,
      "node_id" : "PRRC_kwDOABII584sSXxk",
      "original_commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "original_line" : 737,
      "original_position" : 163,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 156,
      "pull_request_review_id" : 797987658,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743013476/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-04T16:35:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743013476",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r743121401"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743121401"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Edited the comment to clarify that there's individual and package ancestor/desc limits",
      "commit_id" : "14cd7bf793547fa5143acece564482271f5c30bc",
      "created_at" : "2021-11-04T18:56:58Z",
      "diff_hunk" : "@@ -492,15 +538,23 @@ class MemPoolAccept\n     // only tests that are fast should be done here (to avoid CPU DoS).\n     bool PreChecks(ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n+    // Run checks for mempool replace-by-fee.\n+    bool ReplacementChecks(Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+\n+    // Enforce package mempool ancestor/descendant limits.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r743121401",
      "id" : 743121401,
      "in_reply_to_id" : 740651256,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sSyH5",
      "original_commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "original_line" : 547,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 798148018,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743121401/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-04T18:56:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/743121401",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for the reviews @ariard and @jnewbery, took suggestions",
      "created_at" : "2021-11-05T19:50:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#issuecomment-962174813",
      "id" : 962174813,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23381",
      "node_id" : "IC_kwDOABII5845WZ9d",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/962174813/reactions"
      },
      "updated_at" : "2021-11-05T19:50:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/962174813",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r745202366"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745202366"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes that direction is even better!",
      "commit_id" : "14cd7bf793547fa5143acece564482271f5c30bc",
      "created_at" : "2021-11-09T00:44:28Z",
      "diff_hunk" : "@@ -760,60 +813,88 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // to be secure by simply only having two immediately-spendable\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+        if (ws.m_vsize > EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n+            !m_pool.CalculateMemPoolAncestors(*entry, ws.m_ancestors, /* limitancestors */ 2,\n+                m_limit_ancestor_size, ws.m_limit_descendants + 1,\n+                ws.m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", errString);\n         }\n     }\n \n     // A transaction that spends outputs that would be replaced by it is invalid. Now\n     // that we have the set of all ancestors we can detect this\n-    // pathological case by making sure setConflicts and setAncestors don't\n+    // pathological case by making sure ws.m_conflicts and ws.m_ancestors don't\n     // intersect.\n-    if (const auto err_string{EntriesAndTxidsDisjoint(setAncestors, setConflicts, hash)}) {\n+    if (const auto err_string{EntriesAndTxidsDisjoint(ws.m_ancestors, ws.m_conflicts, hash)}) {\n         // We classify this as a consensus error because a transaction depending on something it\n         // conflicts with would be inconsistent.\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n+    m_rbf = !ws.m_conflicts.empty();\n+    return true;\n+}\n \n-    if (!setConflicts.empty()) {\n-        CFeeRate newFeeRate(nModifiedFees, nSize);\n-        // It's possible that the replacement pays more fees than its direct conflicts but not more\n-        // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n-        // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n-        // more economically rational to mine. Before we go digging through the mempool for all\n-        // transactions that would need to be removed (direct conflicts and all descendants), check\n-        // that the replacement transaction pays more than its direct conflicts.\n-        if (const auto err_string{PaysMoreThanConflicts(setIterConflicting, newFeeRate, hash)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n-        }\n+bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n \n-        // Calculate all conflicting entries and enforce BIP125 Rule #5.\n-        if (const auto err_string{GetEntriesForConflicts(tx, m_pool, setIterConflicting, allConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"too many potential replacements\", *err_string);\n-        }\n-        // Enforce BIP125 Rule #2.\n-        if (const auto err_string{HasNoNewUnconfirmed(tx, m_pool, setIterConflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"replacement-adds-unconfirmed\", *err_string);\n-        }\n+    const CTransaction& tx = *ws.m_ptx;\n+    const uint256& hash = ws.m_hash;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r745202366",
      "id" : 745202366,
      "in_reply_to_id" : 740646512,
      "line" : 843,
      "node_id" : "PRRC_kwDOABII584sauK-",
      "original_commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "original_line" : 843,
      "original_position" : 274,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 262,
      "pull_request_review_id" : 800743417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745202366/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-09T00:54:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745202366",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r745210795"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745210795"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> To explain the problem: when we add package RBF, we don't want to increase the > MemPoolAccept::m_limit_descendants here:\r\n>\r\n> bitcoin/src/validation.cpp\r\n> \r\n> Line 765 in 04670ef\r\n> m_limit_descendants += 1; \r\n>\r\n> For example, if we had a package of 5 parents and 1 child, and each of the parents had exactly 1 > conflict, this would cause us to increase the descendant limit 5 times. That would be incorrectly inflating the limit.\r\n\r\nThanks for the explanation, now I wonder if the carve-out relaxation makes really sense with package RBF. If your counterparty has broadcast a junk branch on the parent transaction and you're RBF'ing one of your output with a package n>2, the one-more-carve-out-child relaxation won't work, I think ?\r\n\r\nThough I would say let's defer the conversation for a future PR when package RBF is effectively introduced. ",
      "commit_id" : "14cd7bf793547fa5143acece564482271f5c30bc",
      "created_at" : "2021-11-09T01:06:43Z",
      "diff_hunk" : "@@ -484,6 +521,15 @@ class MemPoolAccept\n         const CTransactionRef& m_ptx;\n         const uint256& m_hash;\n         TxValidationState m_state;\n+        /** A temporary cache containing serialized transaction data for signature verification.\n+         * Reused across PolicyScriptChecks and ConsensusScriptChecks. */\n+        PrecomputedTransactionData m_precomputed_txdata;\n+\n+        // Descendant limits passed in to CalculateMemPoolAncestors() for this transaction.\n+        // These may be modified while evaluating a transaction (eg to account for in-mempool\n+        // conflicts; see the comment in PreChecks).\n+        size_t m_limit_descendants;\n+        size_t m_limit_descendant_size;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r745210795",
      "id" : 745210795,
      "in_reply_to_id" : 740643940,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584sawOr",
      "original_commit_id" : "4d262e060e714042d747c4f0b2e0398234893d34",
      "original_line" : 532,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 800753505,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745210795/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-09T01:07:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745210795",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Code Review ACK 14cd7bf\r\n\r\nChanges since last review have been removing of `Workspace`-level descendant limits, introducing of fd92b0c39,  stripping off the `setAncestors` alias, improving `PackageMempoolChecks`'s comment, drying up `PackageMempoolChecks` from its `Workspace` parameter.",
      "created_at" : "2021-11-09T01:55:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#issuecomment-963741194",
      "id" : 963741194,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23381",
      "node_id" : "IC_kwDOABII5845cYYK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/963741194/reactions"
      },
      "updated_at" : "2021-11-09T01:55:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/963741194",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Code review ACK 14cd7bf793547fa5143acece564482271f5c30bc",
      "created_at" : "2021-11-09T11:44:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#issuecomment-964073867",
      "id" : 964073867,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23381",
      "node_id" : "IC_kwDOABII5845dpmL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/964073867/reactions"
      },
      "updated_at" : "2021-11-09T11:44:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/964073867",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think this might be RFM now since it's a simple refactor.\r\n\r\nPerhaps @t-bast also wants to review this? It's basically the same commits from #22674 that you've already reviewed.",
      "created_at" : "2021-11-09T11:47:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#issuecomment-964076982",
      "id" : 964076982,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23381",
      "node_id" : "IC_kwDOABII5845dqW2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/964076982/reactions"
      },
      "updated_at" : "2021-11-09T11:47:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/964076982",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Code review ACK 14cd7bf793547fa5143acece564482271f5c30bc, thanks for adding documentation and clarifying the code\r\n",
      "created_at" : "2021-11-09T15:46:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#issuecomment-964275979",
      "id" : 964275979,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23381",
      "node_id" : "IC_kwDOABII5845ea8L",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/964275979/reactions"
      },
      "updated_at" : "2021-11-09T15:46:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/964275979",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r745864415"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745864415"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would it make sense to add `Assume/Assert(ws.m_rbf);`?",
      "commit_id" : "14cd7bf793547fa5143acece564482271f5c30bc",
      "created_at" : "2021-11-09T17:47:56Z",
      "diff_hunk" : "@@ -823,43 +831,67 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     m_rbf = !ws.m_conflicts.empty();\n-    if (m_rbf) {\n-        CFeeRate newFeeRate(ws.m_modified_fees, ws.m_vsize);\n-        // It's possible that the replacement pays more fees than its direct conflicts but not more\n-        // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n-        // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n-        // more economically rational to mine. Before we go digging through the mempool for all\n-        // transactions that would need to be removed (direct conflicts and all descendants), check\n-        // that the replacement transaction pays more than its direct conflicts.\n-        if (const auto err_string{PaysMoreThanConflicts(ws.m_iters_conflicting, newFeeRate, hash)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n-        }\n+    return true;\n+}\n \n-        // Calculate all conflicting entries and enforce BIP125 Rule #5.\n-        if (const auto err_string{GetEntriesForConflicts(tx, m_pool, ws.m_iters_conflicting, ws.m_all_conflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"too many potential replacements\", *err_string);\n-        }\n-        // Enforce BIP125 Rule #2.\n-        if (const auto err_string{HasNoNewUnconfirmed(tx, m_pool, ws.m_iters_conflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"replacement-adds-unconfirmed\", *err_string);\n-        }\n+bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n+{\n+    AssertLockHeld(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r745864415",
      "id" : 745864415,
      "line" : 839,
      "node_id" : "PRRC_kwDOABII584sdPzf",
      "original_commit_id" : "c9b1439ca9ab691f4672d2cbf33d9381f2985466",
      "original_line" : 839,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 248,
      "pull_request_review_id" : 801621846,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745864415/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-09T17:47:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745864415",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r745903647"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745903647"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Sure, there's no harm in adding one. If safety is a concern, note that this is a no-op if `m_iters_conflicting` is empty:`PaysMoreThanConflicts`, `GetEntriesForConflicts`, `HasNoNewUnconfirmed`, and `PaysForRBF` should all simply return `std::nullopt` if they're called with empty or 0 inputs. So if we accidentally called this function with `m_rbf` false or no conflicts, it would be some small wasted effort, but we should be okay.",
      "commit_id" : "14cd7bf793547fa5143acece564482271f5c30bc",
      "created_at" : "2021-11-09T18:40:10Z",
      "diff_hunk" : "@@ -823,43 +831,67 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     m_rbf = !ws.m_conflicts.empty();\n-    if (m_rbf) {\n-        CFeeRate newFeeRate(ws.m_modified_fees, ws.m_vsize);\n-        // It's possible that the replacement pays more fees than its direct conflicts but not more\n-        // than all conflicts (i.e. the direct conflicts have high-fee descendants). However, if the\n-        // replacement doesn't pay more fees than its direct conflicts, then we can be sure it's not\n-        // more economically rational to mine. Before we go digging through the mempool for all\n-        // transactions that would need to be removed (direct conflicts and all descendants), check\n-        // that the replacement transaction pays more than its direct conflicts.\n-        if (const auto err_string{PaysMoreThanConflicts(ws.m_iters_conflicting, newFeeRate, hash)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"insufficient fee\", *err_string);\n-        }\n+    return true;\n+}\n \n-        // Calculate all conflicting entries and enforce BIP125 Rule #5.\n-        if (const auto err_string{GetEntriesForConflicts(tx, m_pool, ws.m_iters_conflicting, ws.m_all_conflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"too many potential replacements\", *err_string);\n-        }\n-        // Enforce BIP125 Rule #2.\n-        if (const auto err_string{HasNoNewUnconfirmed(tx, m_pool, ws.m_iters_conflicting)}) {\n-            return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY,\n-                                 \"replacement-adds-unconfirmed\", *err_string);\n-        }\n+bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n+{\n+    AssertLockHeld(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23381#discussion_r745903647",
      "id" : 745903647,
      "in_reply_to_id" : 745864415,
      "line" : 839,
      "node_id" : "PRRC_kwDOABII584sdZYf",
      "original_commit_id" : "c9b1439ca9ab691f4672d2cbf33d9381f2985466",
      "original_line" : 839,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 248,
      "pull_request_review_id" : 801689777,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23381",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745903647/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-09T18:40:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745903647",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   }
]
