[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17160881"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17160881"
         }
      },
      "author_association" : "NONE",
      "body" : "This looks weird, is it missing an indentation below or some brackets?\n",
      "commit_id" : "eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
      "created_at" : "2014-09-05T08:06:29Z",
      "diff_hunk" : "@@ -2330,6 +2330,7 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n         nHeight = pindexPrev->nHeight+1;\n \n         // Check proof of work\n+        if (!Params().SkipProofOfWorkCheck())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17160881",
      "id" : 17160881,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTYwODgx",
      "original_commit_id" : "357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
      "original_line" : null,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17160881/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-09-09T16:31:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17160881",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=4",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "node_id" : "MDQ6VXNlcjE0MTk2NDk=",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164307"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164307"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would be good to s/Reg/Unit/ here to keep things distinct. Regtest is for programs that drive the app externally over the wire, unit tests is for, well, unit tests.\n",
      "commit_id" : "eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
      "created_at" : "2014-09-05T09:47:23Z",
      "diff_hunk" : "@@ -214,8 +214,50 @@ class CRegTestParams : public CTestNetParams {\n };\n static CRegTestParams regTestParams;\n \n+//\n+// Regression test",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164307",
      "id" : 17164307,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTY0MzA3",
      "original_commit_id" : "357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
      "original_line" : null,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164307/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-09-09T16:31:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164307",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164341"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164341"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Or just fold it into the expression with &&\n",
      "commit_id" : "eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
      "created_at" : "2014-09-05T09:48:16Z",
      "diff_hunk" : "@@ -2330,6 +2330,7 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n         nHeight = pindexPrev->nHeight+1;\n \n         // Check proof of work\n+        if (!Params().SkipProofOfWorkCheck())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164341",
      "id" : 17164341,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTY0MzQx",
      "original_commit_id" : "357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
      "original_line" : null,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164341/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-09-09T16:31:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164341",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164396"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164396"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Indentation. Also watch for whitespace around function parameter lists and so on. You might want to call the variable \"diffValue\" as \"dif\" is not a common way to abbreviate a word like difficulty.\n",
      "commit_id" : "eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
      "created_at" : "2014-09-05T09:50:05Z",
      "diff_hunk" : "@@ -0,0 +1,232 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+// Tests the majority rule which states that after 1000 v2 blocks no v1 block can go\n+BOOST_AUTO_TEST_SUITE(blockv2_tests)\n+\n+static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+\n+static void SetEmptyBlock(CBlock * pblock)\n+{\n+        pblock->nVersion = 2;\n+        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->nNonce = 0;\n+}\n+        \n+static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int difValue)\n+{\n+        SetEmptyBlock(pblock);\n+\n+        // Add the coinbase\n+        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+        \n+        if (addHeight) \n+            txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+difValue) << 0);\n+            else",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164396",
      "id" : 17164396,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTY0Mzk2",
      "original_commit_id" : "357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
      "original_line" : null,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/test/blockv2_tests.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164396/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-09-09T16:31:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164396",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164424"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164424"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "s/RegTest/Unittest/\n\nIndentation is wrong.\n",
      "commit_id" : "eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
      "created_at" : "2014-09-05T09:51:02Z",
      "diff_hunk" : "@@ -0,0 +1,232 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+// Tests the majority rule which states that after 1000 v2 blocks no v1 block can go\n+BOOST_AUTO_TEST_SUITE(blockv2_tests)\n+\n+static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+\n+static void SetEmptyBlock(CBlock * pblock)\n+{\n+        pblock->nVersion = 2;\n+        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->nNonce = 0;\n+}\n+        \n+static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int difValue)\n+{\n+        SetEmptyBlock(pblock);\n+\n+        // Add the coinbase\n+        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+        \n+        if (addHeight) \n+            txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+difValue) << 0);\n+            else\n+            txCoinbase.vin[0].scriptSig = (CScript() << difValue << 0); // At least size 2, this is a protocol spec\n+            \n+        txCoinbase.vout[0].scriptPubKey = CScript();\n+        pblock->vtx[0] = CTransaction(txCoinbase);\n+        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+}\n+\n+void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n+{\n+    if ((chainActive.Height()+1) % Params().SubsidyHalvingInterval() == 0)\n+        {\n+            // The RegTest network has a low subsidy halving interval (150) so ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164424",
      "id" : 17164424,
      "line" : 46,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTY0NDI0",
      "original_commit_id" : "357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
      "original_line" : null,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/test/blockv2_tests.cpp",
      "position" : 46,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164424/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-09-09T16:31:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164424",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164473"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164473"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'd feel better when things like this are scoped_ptr<>. Raw pointers in C++ are too easy to mess up.\n",
      "commit_id" : "eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
      "created_at" : "2014-09-05T09:52:14Z",
      "diff_hunk" : "@@ -0,0 +1,232 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+// Tests the majority rule which states that after 1000 v2 blocks no v1 block can go\n+BOOST_AUTO_TEST_SUITE(blockv2_tests)\n+\n+static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+\n+static void SetEmptyBlock(CBlock * pblock)\n+{\n+        pblock->nVersion = 2;\n+        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->nNonce = 0;\n+}\n+        \n+static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int difValue)\n+{\n+        SetEmptyBlock(pblock);\n+\n+        // Add the coinbase\n+        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+        \n+        if (addHeight) \n+            txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+difValue) << 0);\n+            else\n+            txCoinbase.vin[0].scriptSig = (CScript() << difValue << 0); // At least size 2, this is a protocol spec\n+            \n+        txCoinbase.vout[0].scriptPubKey = CScript();\n+        pblock->vtx[0] = CTransaction(txCoinbase);\n+        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+}\n+\n+void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n+{\n+    if ((chainActive.Height()+1) % Params().SubsidyHalvingInterval() == 0)\n+        {\n+            // The RegTest network has a low subsidy halving interval (150) so \n+            // we must recompute the coinbase subsidy if we reach the boundary.\n+\n+            // preserve parent hash\n+            uint256 prevParent = pblock->hashPrevBlock;\n+            delete pblocktemplate;\n+            pblocktemplate = CreateNewBlock(scriptPubKey);   \n+            pblock = &pblocktemplate->block; // pointer for convenience\n+            pblock->hashPrevBlock = prevParent;\n+        }\n+}\n+\n+void Blockv2test()\n+{\n+    assert(Params().NetworkID() == CBaseChainParams::UNITTEST); \n+    ModifiableParams()->setSkipProofOfWorkCheck(true);\n+    \n+    // We don't know the state of the block-chain here: it depends on which other tests are run before this test.\n+    // See https://github.com/bitcoin/bitcoin/pull/4688 for a patch that allows the re-creation of the block-chain\n+    // for each testcase that requires it.\n+\n+    // If miner_tests.cpp is run before, the chain will be 100 blocks long, and all of them will be v1\n+\n+    \n+    LogPrintf(\"Blockv2test testcase starts\\n\"); \n+        \n+    CBlockTemplate *pblocktemplate;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164473",
      "id" : 17164473,
      "line" : 90,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTY0NDcz",
      "original_commit_id" : "357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
      "original_line" : null,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/test/blockv2_tests.cpp",
      "position" : 90,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164473/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-09-09T16:31:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164473",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164535"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164535"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This line confuses me. You're setting hashPrevBlock to the hash of the containing block, no? Or that's what it looks like. I don't see where the blocks parent is being modified.\n",
      "commit_id" : "eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
      "created_at" : "2014-09-05T09:53:41Z",
      "diff_hunk" : "@@ -0,0 +1,232 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+// Tests the majority rule which states that after 1000 v2 blocks no v1 block can go\n+BOOST_AUTO_TEST_SUITE(blockv2_tests)\n+\n+static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+\n+static void SetEmptyBlock(CBlock * pblock)\n+{\n+        pblock->nVersion = 2;\n+        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->nNonce = 0;\n+}\n+        \n+static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int difValue)\n+{\n+        SetEmptyBlock(pblock);\n+\n+        // Add the coinbase\n+        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+        \n+        if (addHeight) \n+            txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+difValue) << 0);\n+            else\n+            txCoinbase.vin[0].scriptSig = (CScript() << difValue << 0); // At least size 2, this is a protocol spec\n+            \n+        txCoinbase.vout[0].scriptPubKey = CScript();\n+        pblock->vtx[0] = CTransaction(txCoinbase);\n+        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+}\n+\n+void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n+{\n+    if ((chainActive.Height()+1) % Params().SubsidyHalvingInterval() == 0)\n+        {\n+            // The RegTest network has a low subsidy halving interval (150) so \n+            // we must recompute the coinbase subsidy if we reach the boundary.\n+\n+            // preserve parent hash\n+            uint256 prevParent = pblock->hashPrevBlock;\n+            delete pblocktemplate;\n+            pblocktemplate = CreateNewBlock(scriptPubKey);   \n+            pblock = &pblocktemplate->block; // pointer for convenience\n+            pblock->hashPrevBlock = prevParent;\n+        }\n+}\n+\n+void Blockv2test()\n+{\n+    assert(Params().NetworkID() == CBaseChainParams::UNITTEST); \n+    ModifiableParams()->setSkipProofOfWorkCheck(true);\n+    \n+    // We don't know the state of the block-chain here: it depends on which other tests are run before this test.\n+    // See https://github.com/bitcoin/bitcoin/pull/4688 for a patch that allows the re-creation of the block-chain\n+    // for each testcase that requires it.\n+\n+    // If miner_tests.cpp is run before, the chain will be 100 blocks long, and all of them will be v1\n+\n+    \n+    LogPrintf(\"Blockv2test testcase starts\\n\"); \n+        \n+    CBlockTemplate *pblocktemplate;\n+    CScript script;\n+    uint256 hash;\n+    int PreviousHeight;\n+\n+    \n+    LOCK(cs_main);\n+        \n+    \n+    // Simple block creation, nothing special yet.\n+    pblocktemplate = CreateNewBlock(scriptPubKey);   \n+    CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+   \n+    LogPrintf(\"Blockv2test block v1 add begin\\n\");  \n+    // First create a block v1, check that it is accepted. The block has an invalid height\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000);\n+    pblock->nVersion = 1;\n+    CValidationState state1;\n+    PreviousHeight = chainActive.Height();\n+    BOOST_CHECK(ProcessBlock(state1, NULL, pblock));\n+    BOOST_CHECK(state1.IsValid());\n+    BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\t\n+    pblock->hashPrevBlock = pblock->GetHash(); // update parent",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164535",
      "id" : 17164535,
      "line" : 113,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTY0NTM1",
      "original_commit_id" : "357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
      "original_line" : null,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "src/test/blockv2_tests.cpp",
      "position" : 113,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164535/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-09-09T16:31:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164535",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164582"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164582"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It might make sense to refactor this \"add a block, did it work\" logic into a function.\n",
      "commit_id" : "eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
      "created_at" : "2014-09-05T09:54:39Z",
      "diff_hunk" : "@@ -0,0 +1,232 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+// Tests the majority rule which states that after 1000 v2 blocks no v1 block can go\n+BOOST_AUTO_TEST_SUITE(blockv2_tests)\n+\n+static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+\n+static void SetEmptyBlock(CBlock * pblock)\n+{\n+        pblock->nVersion = 2;\n+        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->nNonce = 0;\n+}\n+        \n+static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int difValue)\n+{\n+        SetEmptyBlock(pblock);\n+\n+        // Add the coinbase\n+        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+        \n+        if (addHeight) \n+            txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+difValue) << 0);\n+            else\n+            txCoinbase.vin[0].scriptSig = (CScript() << difValue << 0); // At least size 2, this is a protocol spec\n+            \n+        txCoinbase.vout[0].scriptPubKey = CScript();\n+        pblock->vtx[0] = CTransaction(txCoinbase);\n+        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+}\n+\n+void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n+{\n+    if ((chainActive.Height()+1) % Params().SubsidyHalvingInterval() == 0)\n+        {\n+            // The RegTest network has a low subsidy halving interval (150) so \n+            // we must recompute the coinbase subsidy if we reach the boundary.\n+\n+            // preserve parent hash\n+            uint256 prevParent = pblock->hashPrevBlock;\n+            delete pblocktemplate;\n+            pblocktemplate = CreateNewBlock(scriptPubKey);   \n+            pblock = &pblocktemplate->block; // pointer for convenience\n+            pblock->hashPrevBlock = prevParent;\n+        }\n+}\n+\n+void Blockv2test()\n+{\n+    assert(Params().NetworkID() == CBaseChainParams::UNITTEST); \n+    ModifiableParams()->setSkipProofOfWorkCheck(true);\n+    \n+    // We don't know the state of the block-chain here: it depends on which other tests are run before this test.\n+    // See https://github.com/bitcoin/bitcoin/pull/4688 for a patch that allows the re-creation of the block-chain\n+    // for each testcase that requires it.\n+\n+    // If miner_tests.cpp is run before, the chain will be 100 blocks long, and all of them will be v1\n+\n+    \n+    LogPrintf(\"Blockv2test testcase starts\\n\"); \n+        \n+    CBlockTemplate *pblocktemplate;\n+    CScript script;\n+    uint256 hash;\n+    int PreviousHeight;\n+\n+    \n+    LOCK(cs_main);\n+        \n+    \n+    // Simple block creation, nothing special yet.\n+    pblocktemplate = CreateNewBlock(scriptPubKey);   \n+    CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+   \n+    LogPrintf(\"Blockv2test block v1 add begin\\n\");  \n+    // First create a block v1, check that it is accepted. The block has an invalid height\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000);\n+    pblock->nVersion = 1;\n+    CValidationState state1;\n+    PreviousHeight = chainActive.Height();\n+    BOOST_CHECK(ProcessBlock(state1, NULL, pblock));\n+    BOOST_CHECK(state1.IsValid());\n+    BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\t\n+    pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    \n+    \n+    // Now create exactly 1000 blocks v2\n+    \n+    // First check that the supermajority threshold is exactly 1000 blocks\n+    BOOST_CHECK(Params().ToCheckBlockUpgradeMajority()==1000);  // \n+    BOOST_CHECK(Params().EnforceBlockUpgradeMajority()==750);\n+    BOOST_CHECK(Params().RejectBlockOutdatedMajority()==950);\n+    \n+    // Over the last 1000 blocks, 750 blocks must be v2 to switch to v2-only mode.\n+    // Here we're testing only the last 750, not any subset.\n+    \n+    LogPrintf(\"Blockv2test BIP30 repetition begin\\n\");  \n+\n+    // First, if we try to add a block v2 with the same coinbase tx, we should get\n+    // \"bad-txns-BIP30\" because the coinbase tx has the same hash as the previous.\n+    // Unluckily, even if ConnectBlock returns a \"bad-txns-BIP30\", ActivateBestChainStep clears\n+    // the state, so we get true here and the \"bad-txns-BIP30\" reason is lost.\n+    // We verify instead that the chain height has not been incremented.\n+    \n+    CValidationState state7;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164582",
      "id" : 17164582,
      "line" : 141,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTY0NTgy",
      "original_commit_id" : "357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
      "original_line" : null,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/test/blockv2_tests.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164582/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-09-09T16:31:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164582",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164596"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164596"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This \"reason got lost\" thing sounds like a bug. Is it? No worries about fixing it in this patch if so, I'm just interested.\n",
      "commit_id" : "eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
      "created_at" : "2014-09-05T09:55:09Z",
      "diff_hunk" : "@@ -0,0 +1,232 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+// Tests the majority rule which states that after 1000 v2 blocks no v1 block can go\n+BOOST_AUTO_TEST_SUITE(blockv2_tests)\n+\n+static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+\n+static void SetEmptyBlock(CBlock * pblock)\n+{\n+        pblock->nVersion = 2;\n+        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->nNonce = 0;\n+}\n+        \n+static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int difValue)\n+{\n+        SetEmptyBlock(pblock);\n+\n+        // Add the coinbase\n+        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+        \n+        if (addHeight) \n+            txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+difValue) << 0);\n+            else\n+            txCoinbase.vin[0].scriptSig = (CScript() << difValue << 0); // At least size 2, this is a protocol spec\n+            \n+        txCoinbase.vout[0].scriptPubKey = CScript();\n+        pblock->vtx[0] = CTransaction(txCoinbase);\n+        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+}\n+\n+void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n+{\n+    if ((chainActive.Height()+1) % Params().SubsidyHalvingInterval() == 0)\n+        {\n+            // The RegTest network has a low subsidy halving interval (150) so \n+            // we must recompute the coinbase subsidy if we reach the boundary.\n+\n+            // preserve parent hash\n+            uint256 prevParent = pblock->hashPrevBlock;\n+            delete pblocktemplate;\n+            pblocktemplate = CreateNewBlock(scriptPubKey);   \n+            pblock = &pblocktemplate->block; // pointer for convenience\n+            pblock->hashPrevBlock = prevParent;\n+        }\n+}\n+\n+void Blockv2test()\n+{\n+    assert(Params().NetworkID() == CBaseChainParams::UNITTEST); \n+    ModifiableParams()->setSkipProofOfWorkCheck(true);\n+    \n+    // We don't know the state of the block-chain here: it depends on which other tests are run before this test.\n+    // See https://github.com/bitcoin/bitcoin/pull/4688 for a patch that allows the re-creation of the block-chain\n+    // for each testcase that requires it.\n+\n+    // If miner_tests.cpp is run before, the chain will be 100 blocks long, and all of them will be v1\n+\n+    \n+    LogPrintf(\"Blockv2test testcase starts\\n\"); \n+        \n+    CBlockTemplate *pblocktemplate;\n+    CScript script;\n+    uint256 hash;\n+    int PreviousHeight;\n+\n+    \n+    LOCK(cs_main);\n+        \n+    \n+    // Simple block creation, nothing special yet.\n+    pblocktemplate = CreateNewBlock(scriptPubKey);   \n+    CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+   \n+    LogPrintf(\"Blockv2test block v1 add begin\\n\");  \n+    // First create a block v1, check that it is accepted. The block has an invalid height\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000);\n+    pblock->nVersion = 1;\n+    CValidationState state1;\n+    PreviousHeight = chainActive.Height();\n+    BOOST_CHECK(ProcessBlock(state1, NULL, pblock));\n+    BOOST_CHECK(state1.IsValid());\n+    BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\t\n+    pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    \n+    \n+    // Now create exactly 1000 blocks v2\n+    \n+    // First check that the supermajority threshold is exactly 1000 blocks\n+    BOOST_CHECK(Params().ToCheckBlockUpgradeMajority()==1000);  // \n+    BOOST_CHECK(Params().EnforceBlockUpgradeMajority()==750);\n+    BOOST_CHECK(Params().RejectBlockOutdatedMajority()==950);\n+    \n+    // Over the last 1000 blocks, 750 blocks must be v2 to switch to v2-only mode.\n+    // Here we're testing only the last 750, not any subset.\n+    \n+    LogPrintf(\"Blockv2test BIP30 repetition begin\\n\");  \n+\n+    // First, if we try to add a block v2 with the same coinbase tx, we should get\n+    // \"bad-txns-BIP30\" because the coinbase tx has the same hash as the previous.\n+    // Unluckily, even if ConnectBlock returns a \"bad-txns-BIP30\", ActivateBestChainStep clears\n+    // the state, so we get true here and the \"bad-txns-BIP30\" reason is lost.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164596",
      "id" : 17164596,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTY0NTk2",
      "original_commit_id" : "357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
      "original_line" : null,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/test/blockv2_tests.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164596/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-09-09T16:31:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164596",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164636"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164636"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "s/were/where/\n",
      "commit_id" : "eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
      "created_at" : "2014-09-05T09:56:13Z",
      "diff_hunk" : "@@ -0,0 +1,232 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+// Tests the majority rule which states that after 1000 v2 blocks no v1 block can go\n+BOOST_AUTO_TEST_SUITE(blockv2_tests)\n+\n+static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+\n+static void SetEmptyBlock(CBlock * pblock)\n+{\n+        pblock->nVersion = 2;\n+        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->nNonce = 0;\n+}\n+        \n+static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int difValue)\n+{\n+        SetEmptyBlock(pblock);\n+\n+        // Add the coinbase\n+        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+        \n+        if (addHeight) \n+            txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+difValue) << 0);\n+            else\n+            txCoinbase.vin[0].scriptSig = (CScript() << difValue << 0); // At least size 2, this is a protocol spec\n+            \n+        txCoinbase.vout[0].scriptPubKey = CScript();\n+        pblock->vtx[0] = CTransaction(txCoinbase);\n+        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+}\n+\n+void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n+{\n+    if ((chainActive.Height()+1) % Params().SubsidyHalvingInterval() == 0)\n+        {\n+            // The RegTest network has a low subsidy halving interval (150) so \n+            // we must recompute the coinbase subsidy if we reach the boundary.\n+\n+            // preserve parent hash\n+            uint256 prevParent = pblock->hashPrevBlock;\n+            delete pblocktemplate;\n+            pblocktemplate = CreateNewBlock(scriptPubKey);   \n+            pblock = &pblocktemplate->block; // pointer for convenience\n+            pblock->hashPrevBlock = prevParent;\n+        }\n+}\n+\n+void Blockv2test()\n+{\n+    assert(Params().NetworkID() == CBaseChainParams::UNITTEST); \n+    ModifiableParams()->setSkipProofOfWorkCheck(true);\n+    \n+    // We don't know the state of the block-chain here: it depends on which other tests are run before this test.\n+    // See https://github.com/bitcoin/bitcoin/pull/4688 for a patch that allows the re-creation of the block-chain\n+    // for each testcase that requires it.\n+\n+    // If miner_tests.cpp is run before, the chain will be 100 blocks long, and all of them will be v1\n+\n+    \n+    LogPrintf(\"Blockv2test testcase starts\\n\"); \n+        \n+    CBlockTemplate *pblocktemplate;\n+    CScript script;\n+    uint256 hash;\n+    int PreviousHeight;\n+\n+    \n+    LOCK(cs_main);\n+        \n+    \n+    // Simple block creation, nothing special yet.\n+    pblocktemplate = CreateNewBlock(scriptPubKey);   \n+    CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+   \n+    LogPrintf(\"Blockv2test block v1 add begin\\n\");  \n+    // First create a block v1, check that it is accepted. The block has an invalid height\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000);\n+    pblock->nVersion = 1;\n+    CValidationState state1;\n+    PreviousHeight = chainActive.Height();\n+    BOOST_CHECK(ProcessBlock(state1, NULL, pblock));\n+    BOOST_CHECK(state1.IsValid());\n+    BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\t\n+    pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    \n+    \n+    // Now create exactly 1000 blocks v2\n+    \n+    // First check that the supermajority threshold is exactly 1000 blocks\n+    BOOST_CHECK(Params().ToCheckBlockUpgradeMajority()==1000);  // \n+    BOOST_CHECK(Params().EnforceBlockUpgradeMajority()==750);\n+    BOOST_CHECK(Params().RejectBlockOutdatedMajority()==950);\n+    \n+    // Over the last 1000 blocks, 750 blocks must be v2 to switch to v2-only mode.\n+    // Here we're testing only the last 750, not any subset.\n+    \n+    LogPrintf(\"Blockv2test BIP30 repetition begin\\n\");  \n+\n+    // First, if we try to add a block v2 with the same coinbase tx, we should get\n+    // \"bad-txns-BIP30\" because the coinbase tx has the same hash as the previous.\n+    // Unluckily, even if ConnectBlock returns a \"bad-txns-BIP30\", ActivateBestChainStep clears\n+    // the state, so we get true here and the \"bad-txns-BIP30\" reason is lost.\n+    // We verify instead that the chain height has not been incremented.\n+    \n+    CValidationState state7;\n+    PreviousHeight = chainActive.Height();\n+    CheckSubsidyHalving(pblocktemplate,pblock);\t\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000); //\n+    pblock->nVersion = 2;\n+    BOOST_CHECK(ProcessBlock(state7, NULL, pblock)); // should we care about the return value?\n+    BOOST_CHECK(state7.IsValid());\n+    BOOST_CHECK(PreviousHeight == chainActive.Height()); // we check the block has not been added.\n+    \n+    LogPrintf(\"Blockv2test 750 v2 blocks  begin\\n\");    \n+    for (int i=0;i<750;i++) \n+    {\n+        \n+        LogPrintf(\"Blockv2test block %d begin\\n\",i);    \n+\n+        CheckSubsidyHalving(pblocktemplate,pblock);\t\n+       \n+        // We add a value to the height to make is NOT equal to the actual height.\n+        SetBlockDefaultAttributesAndHeight(pblock,true,1000); // blocks version 2 without height are allowed! for only 750 blocks\n+        pblock->nVersion = 2;\n+        CValidationState state;\n+                    \n+        PreviousHeight = chainActive.Height();\n+        BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n+        BOOST_CHECK(state.IsValid());\n+        BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+        pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    }\n+\n+    LogPrintf(\"Blockv2test v2 without height rejected begin\\n\"); \n+    \n+    // Now we try to add a block v2, with an invalid height and it should be rejected. We use 2000 because is not in the range [1000..1750].\n+    CheckSubsidyHalving(pblocktemplate,pblock);\t\n+    SetBlockDefaultAttributesAndHeight(pblock,true,2000); // \n+    pblock->nVersion = 2;\n+    CValidationState state0;\n+    BOOST_CHECK(ProcessBlock(state0, NULL, pblock)==false);\n+    BOOST_CHECK(!state0.IsValid());\n+    BOOST_CHECK(state0.GetRejectReason()==\"bad-cb-height\"); \n+    // Do not update parent since block has failed\n+    \n+    LogPrintf(\"Blockv2test v2 with height accepted begin\\n\");    \n+    \n+    \n+    // Now we add a block with height, must be ok.\n+    for (int i=0;i<200;i++) \n+    {\n+        \n+        LogPrintf(\"Blockv2test v2block %d begin\\n\",i);      \n+        CheckSubsidyHalving(pblocktemplate,pblock);\n+        SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+        pblock->nVersion = 2;\n+        CValidationState state;\n+        PreviousHeight = chainActive.Height();\n+        BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n+        BOOST_CHECK(state.IsValid());\n+        BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+\n+        pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    }\n+\n+    \n+    LogPrintf(\"Blockv2test block v1 rejected\\n\");   \n+    // Now we add 200 additional blocks, until we get 950 (the threshold were v1 blocks are not accepted anymore)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164636",
      "id" : 17164636,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTY0NjM2",
      "original_commit_id" : "357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
      "original_line" : null,
      "original_position" : 177,
      "original_start_line" : null,
      "path" : "src/test/blockv2_tests.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164636/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-09-09T16:31:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164636",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164653"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164653"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Also looks like this comment should be attached to the block above, I think. You're not adding 200 blocks at this point, that was just done.\n",
      "commit_id" : "eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
      "created_at" : "2014-09-05T09:56:43Z",
      "diff_hunk" : "@@ -0,0 +1,232 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+// Tests the majority rule which states that after 1000 v2 blocks no v1 block can go\n+BOOST_AUTO_TEST_SUITE(blockv2_tests)\n+\n+static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+\n+static void SetEmptyBlock(CBlock * pblock)\n+{\n+        pblock->nVersion = 2;\n+        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->nNonce = 0;\n+}\n+        \n+static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int difValue)\n+{\n+        SetEmptyBlock(pblock);\n+\n+        // Add the coinbase\n+        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+        \n+        if (addHeight) \n+            txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+difValue) << 0);\n+            else\n+            txCoinbase.vin[0].scriptSig = (CScript() << difValue << 0); // At least size 2, this is a protocol spec\n+            \n+        txCoinbase.vout[0].scriptPubKey = CScript();\n+        pblock->vtx[0] = CTransaction(txCoinbase);\n+        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+}\n+\n+void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n+{\n+    if ((chainActive.Height()+1) % Params().SubsidyHalvingInterval() == 0)\n+        {\n+            // The RegTest network has a low subsidy halving interval (150) so \n+            // we must recompute the coinbase subsidy if we reach the boundary.\n+\n+            // preserve parent hash\n+            uint256 prevParent = pblock->hashPrevBlock;\n+            delete pblocktemplate;\n+            pblocktemplate = CreateNewBlock(scriptPubKey);   \n+            pblock = &pblocktemplate->block; // pointer for convenience\n+            pblock->hashPrevBlock = prevParent;\n+        }\n+}\n+\n+void Blockv2test()\n+{\n+    assert(Params().NetworkID() == CBaseChainParams::UNITTEST); \n+    ModifiableParams()->setSkipProofOfWorkCheck(true);\n+    \n+    // We don't know the state of the block-chain here: it depends on which other tests are run before this test.\n+    // See https://github.com/bitcoin/bitcoin/pull/4688 for a patch that allows the re-creation of the block-chain\n+    // for each testcase that requires it.\n+\n+    // If miner_tests.cpp is run before, the chain will be 100 blocks long, and all of them will be v1\n+\n+    \n+    LogPrintf(\"Blockv2test testcase starts\\n\"); \n+        \n+    CBlockTemplate *pblocktemplate;\n+    CScript script;\n+    uint256 hash;\n+    int PreviousHeight;\n+\n+    \n+    LOCK(cs_main);\n+        \n+    \n+    // Simple block creation, nothing special yet.\n+    pblocktemplate = CreateNewBlock(scriptPubKey);   \n+    CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+   \n+    LogPrintf(\"Blockv2test block v1 add begin\\n\");  \n+    // First create a block v1, check that it is accepted. The block has an invalid height\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000);\n+    pblock->nVersion = 1;\n+    CValidationState state1;\n+    PreviousHeight = chainActive.Height();\n+    BOOST_CHECK(ProcessBlock(state1, NULL, pblock));\n+    BOOST_CHECK(state1.IsValid());\n+    BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\t\n+    pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    \n+    \n+    // Now create exactly 1000 blocks v2\n+    \n+    // First check that the supermajority threshold is exactly 1000 blocks\n+    BOOST_CHECK(Params().ToCheckBlockUpgradeMajority()==1000);  // \n+    BOOST_CHECK(Params().EnforceBlockUpgradeMajority()==750);\n+    BOOST_CHECK(Params().RejectBlockOutdatedMajority()==950);\n+    \n+    // Over the last 1000 blocks, 750 blocks must be v2 to switch to v2-only mode.\n+    // Here we're testing only the last 750, not any subset.\n+    \n+    LogPrintf(\"Blockv2test BIP30 repetition begin\\n\");  \n+\n+    // First, if we try to add a block v2 with the same coinbase tx, we should get\n+    // \"bad-txns-BIP30\" because the coinbase tx has the same hash as the previous.\n+    // Unluckily, even if ConnectBlock returns a \"bad-txns-BIP30\", ActivateBestChainStep clears\n+    // the state, so we get true here and the \"bad-txns-BIP30\" reason is lost.\n+    // We verify instead that the chain height has not been incremented.\n+    \n+    CValidationState state7;\n+    PreviousHeight = chainActive.Height();\n+    CheckSubsidyHalving(pblocktemplate,pblock);\t\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000); //\n+    pblock->nVersion = 2;\n+    BOOST_CHECK(ProcessBlock(state7, NULL, pblock)); // should we care about the return value?\n+    BOOST_CHECK(state7.IsValid());\n+    BOOST_CHECK(PreviousHeight == chainActive.Height()); // we check the block has not been added.\n+    \n+    LogPrintf(\"Blockv2test 750 v2 blocks  begin\\n\");    \n+    for (int i=0;i<750;i++) \n+    {\n+        \n+        LogPrintf(\"Blockv2test block %d begin\\n\",i);    \n+\n+        CheckSubsidyHalving(pblocktemplate,pblock);\t\n+       \n+        // We add a value to the height to make is NOT equal to the actual height.\n+        SetBlockDefaultAttributesAndHeight(pblock,true,1000); // blocks version 2 without height are allowed! for only 750 blocks\n+        pblock->nVersion = 2;\n+        CValidationState state;\n+                    \n+        PreviousHeight = chainActive.Height();\n+        BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n+        BOOST_CHECK(state.IsValid());\n+        BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+        pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    }\n+\n+    LogPrintf(\"Blockv2test v2 without height rejected begin\\n\"); \n+    \n+    // Now we try to add a block v2, with an invalid height and it should be rejected. We use 2000 because is not in the range [1000..1750].\n+    CheckSubsidyHalving(pblocktemplate,pblock);\t\n+    SetBlockDefaultAttributesAndHeight(pblock,true,2000); // \n+    pblock->nVersion = 2;\n+    CValidationState state0;\n+    BOOST_CHECK(ProcessBlock(state0, NULL, pblock)==false);\n+    BOOST_CHECK(!state0.IsValid());\n+    BOOST_CHECK(state0.GetRejectReason()==\"bad-cb-height\"); \n+    // Do not update parent since block has failed\n+    \n+    LogPrintf(\"Blockv2test v2 with height accepted begin\\n\");    \n+    \n+    \n+    // Now we add a block with height, must be ok.\n+    for (int i=0;i<200;i++) \n+    {\n+        \n+        LogPrintf(\"Blockv2test v2block %d begin\\n\",i);      \n+        CheckSubsidyHalving(pblocktemplate,pblock);\n+        SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+        pblock->nVersion = 2;\n+        CValidationState state;\n+        PreviousHeight = chainActive.Height();\n+        BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n+        BOOST_CHECK(state.IsValid());\n+        BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+\n+        pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    }\n+\n+    \n+    LogPrintf(\"Blockv2test block v1 rejected\\n\");   \n+    // Now we add 200 additional blocks, until we get 950 (the threshold were v1 blocks are not accepted anymore)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164653",
      "id" : 17164653,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTY0NjUz",
      "original_commit_id" : "357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
      "original_line" : null,
      "original_position" : 177,
      "original_start_line" : null,
      "path" : "src/test/blockv2_tests.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164653/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-09-09T16:31:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164653",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164670"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164670"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could these be in separate unit tests?\n",
      "commit_id" : "eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
      "created_at" : "2014-09-05T09:57:18Z",
      "diff_hunk" : "@@ -0,0 +1,232 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+// Tests the majority rule which states that after 1000 v2 blocks no v1 block can go\n+BOOST_AUTO_TEST_SUITE(blockv2_tests)\n+\n+static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+\n+static void SetEmptyBlock(CBlock * pblock)\n+{\n+        pblock->nVersion = 2;\n+        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->nNonce = 0;\n+}\n+        \n+static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int difValue)\n+{\n+        SetEmptyBlock(pblock);\n+\n+        // Add the coinbase\n+        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+        \n+        if (addHeight) \n+            txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+difValue) << 0);\n+            else\n+            txCoinbase.vin[0].scriptSig = (CScript() << difValue << 0); // At least size 2, this is a protocol spec\n+            \n+        txCoinbase.vout[0].scriptPubKey = CScript();\n+        pblock->vtx[0] = CTransaction(txCoinbase);\n+        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+}\n+\n+void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n+{\n+    if ((chainActive.Height()+1) % Params().SubsidyHalvingInterval() == 0)\n+        {\n+            // The RegTest network has a low subsidy halving interval (150) so \n+            // we must recompute the coinbase subsidy if we reach the boundary.\n+\n+            // preserve parent hash\n+            uint256 prevParent = pblock->hashPrevBlock;\n+            delete pblocktemplate;\n+            pblocktemplate = CreateNewBlock(scriptPubKey);   \n+            pblock = &pblocktemplate->block; // pointer for convenience\n+            pblock->hashPrevBlock = prevParent;\n+        }\n+}\n+\n+void Blockv2test()\n+{\n+    assert(Params().NetworkID() == CBaseChainParams::UNITTEST); \n+    ModifiableParams()->setSkipProofOfWorkCheck(true);\n+    \n+    // We don't know the state of the block-chain here: it depends on which other tests are run before this test.\n+    // See https://github.com/bitcoin/bitcoin/pull/4688 for a patch that allows the re-creation of the block-chain\n+    // for each testcase that requires it.\n+\n+    // If miner_tests.cpp is run before, the chain will be 100 blocks long, and all of them will be v1\n+\n+    \n+    LogPrintf(\"Blockv2test testcase starts\\n\"); \n+        \n+    CBlockTemplate *pblocktemplate;\n+    CScript script;\n+    uint256 hash;\n+    int PreviousHeight;\n+\n+    \n+    LOCK(cs_main);\n+        \n+    \n+    // Simple block creation, nothing special yet.\n+    pblocktemplate = CreateNewBlock(scriptPubKey);   \n+    CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+   \n+    LogPrintf(\"Blockv2test block v1 add begin\\n\");  \n+    // First create a block v1, check that it is accepted. The block has an invalid height\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000);\n+    pblock->nVersion = 1;\n+    CValidationState state1;\n+    PreviousHeight = chainActive.Height();\n+    BOOST_CHECK(ProcessBlock(state1, NULL, pblock));\n+    BOOST_CHECK(state1.IsValid());\n+    BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\t\n+    pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    \n+    \n+    // Now create exactly 1000 blocks v2\n+    \n+    // First check that the supermajority threshold is exactly 1000 blocks\n+    BOOST_CHECK(Params().ToCheckBlockUpgradeMajority()==1000);  // \n+    BOOST_CHECK(Params().EnforceBlockUpgradeMajority()==750);\n+    BOOST_CHECK(Params().RejectBlockOutdatedMajority()==950);\n+    \n+    // Over the last 1000 blocks, 750 blocks must be v2 to switch to v2-only mode.\n+    // Here we're testing only the last 750, not any subset.\n+    \n+    LogPrintf(\"Blockv2test BIP30 repetition begin\\n\");  \n+\n+    // First, if we try to add a block v2 with the same coinbase tx, we should get\n+    // \"bad-txns-BIP30\" because the coinbase tx has the same hash as the previous.\n+    // Unluckily, even if ConnectBlock returns a \"bad-txns-BIP30\", ActivateBestChainStep clears\n+    // the state, so we get true here and the \"bad-txns-BIP30\" reason is lost.\n+    // We verify instead that the chain height has not been incremented.\n+    \n+    CValidationState state7;\n+    PreviousHeight = chainActive.Height();\n+    CheckSubsidyHalving(pblocktemplate,pblock);\t\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000); //\n+    pblock->nVersion = 2;\n+    BOOST_CHECK(ProcessBlock(state7, NULL, pblock)); // should we care about the return value?\n+    BOOST_CHECK(state7.IsValid());\n+    BOOST_CHECK(PreviousHeight == chainActive.Height()); // we check the block has not been added.\n+    \n+    LogPrintf(\"Blockv2test 750 v2 blocks  begin\\n\");    \n+    for (int i=0;i<750;i++) \n+    {\n+        \n+        LogPrintf(\"Blockv2test block %d begin\\n\",i);    \n+\n+        CheckSubsidyHalving(pblocktemplate,pblock);\t\n+       \n+        // We add a value to the height to make is NOT equal to the actual height.\n+        SetBlockDefaultAttributesAndHeight(pblock,true,1000); // blocks version 2 without height are allowed! for only 750 blocks\n+        pblock->nVersion = 2;\n+        CValidationState state;\n+                    \n+        PreviousHeight = chainActive.Height();\n+        BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n+        BOOST_CHECK(state.IsValid());\n+        BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+        pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    }\n+\n+    LogPrintf(\"Blockv2test v2 without height rejected begin\\n\"); \n+    \n+    // Now we try to add a block v2, with an invalid height and it should be rejected. We use 2000 because is not in the range [1000..1750].\n+    CheckSubsidyHalving(pblocktemplate,pblock);\t\n+    SetBlockDefaultAttributesAndHeight(pblock,true,2000); // \n+    pblock->nVersion = 2;\n+    CValidationState state0;\n+    BOOST_CHECK(ProcessBlock(state0, NULL, pblock)==false);\n+    BOOST_CHECK(!state0.IsValid());\n+    BOOST_CHECK(state0.GetRejectReason()==\"bad-cb-height\"); \n+    // Do not update parent since block has failed\n+    \n+    LogPrintf(\"Blockv2test v2 with height accepted begin\\n\");    \n+    \n+    \n+    // Now we add a block with height, must be ok.\n+    for (int i=0;i<200;i++) \n+    {\n+        \n+        LogPrintf(\"Blockv2test v2block %d begin\\n\",i);      \n+        CheckSubsidyHalving(pblocktemplate,pblock);\n+        SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+        pblock->nVersion = 2;\n+        CValidationState state;\n+        PreviousHeight = chainActive.Height();\n+        BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n+        BOOST_CHECK(state.IsValid());\n+        BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+\n+        pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    }\n+\n+    \n+    LogPrintf(\"Blockv2test block v1 rejected\\n\");   \n+    // Now we add 200 additional blocks, until we get 950 (the threshold were v1 blocks are not accepted anymore)\n+    // Now we try to add a block v1, it should be rejected, even if it hash the height field\n+    CheckSubsidyHalving(pblocktemplate,pblock);\t\n+    SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+    pblock->nVersion = 1;\n+    CValidationState state2;\n+    BOOST_CHECK(ProcessBlock(state2, NULL, pblock)==false);\n+    BOOST_CHECK(!state2.IsValid());\n+    BOOST_CHECK(state2.GetRejectReason()==\"bad-version\");\n+    // Do not update parent since block has failed\n+    \n+    \n+    \n+    // Some other missing tests, added here as bonus...",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164670",
      "id" : 17164670,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTY0Njcw",
      "original_commit_id" : "357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
      "original_line" : null,
      "original_position" : 190,
      "original_start_line" : null,
      "path" : "src/test/blockv2_tests.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164670/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-09-09T16:31:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164670",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Looking good! Most of my comments are minor style points. :+1: \n",
      "created_at" : "2014-09-05T09:57:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#issuecomment-54606011",
      "id" : 54606011,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4845",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NjA2MDEx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/54606011/reactions"
      },
      "updated_at" : "2014-09-05T09:57:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/54606011",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164774"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164774"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is weird and surprising, but it's just copied from miner_tests.cpp.\n",
      "commit_id" : "eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
      "created_at" : "2014-09-05T09:59:59Z",
      "diff_hunk" : "@@ -0,0 +1,232 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+// Tests the majority rule which states that after 1000 v2 blocks no v1 block can go\n+BOOST_AUTO_TEST_SUITE(blockv2_tests)\n+\n+static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+\n+static void SetEmptyBlock(CBlock * pblock)\n+{\n+        pblock->nVersion = 2;\n+        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->nNonce = 0;\n+}\n+        \n+static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int difValue)\n+{\n+        SetEmptyBlock(pblock);\n+\n+        // Add the coinbase\n+        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+        \n+        if (addHeight) \n+            txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+difValue) << 0);\n+            else\n+            txCoinbase.vin[0].scriptSig = (CScript() << difValue << 0); // At least size 2, this is a protocol spec\n+            \n+        txCoinbase.vout[0].scriptPubKey = CScript();\n+        pblock->vtx[0] = CTransaction(txCoinbase);\n+        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+}\n+\n+void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n+{\n+    if ((chainActive.Height()+1) % Params().SubsidyHalvingInterval() == 0)\n+        {\n+            // The RegTest network has a low subsidy halving interval (150) so \n+            // we must recompute the coinbase subsidy if we reach the boundary.\n+\n+            // preserve parent hash\n+            uint256 prevParent = pblock->hashPrevBlock;\n+            delete pblocktemplate;\n+            pblocktemplate = CreateNewBlock(scriptPubKey);   \n+            pblock = &pblocktemplate->block; // pointer for convenience\n+            pblock->hashPrevBlock = prevParent;\n+        }\n+}\n+\n+void Blockv2test()\n+{\n+    assert(Params().NetworkID() == CBaseChainParams::UNITTEST); \n+    ModifiableParams()->setSkipProofOfWorkCheck(true);\n+    \n+    // We don't know the state of the block-chain here: it depends on which other tests are run before this test.\n+    // See https://github.com/bitcoin/bitcoin/pull/4688 for a patch that allows the re-creation of the block-chain\n+    // for each testcase that requires it.\n+\n+    // If miner_tests.cpp is run before, the chain will be 100 blocks long, and all of them will be v1\n+\n+    \n+    LogPrintf(\"Blockv2test testcase starts\\n\"); \n+        \n+    CBlockTemplate *pblocktemplate;\n+    CScript script;\n+    uint256 hash;\n+    int PreviousHeight;\n+\n+    \n+    LOCK(cs_main);\n+        \n+    \n+    // Simple block creation, nothing special yet.\n+    pblocktemplate = CreateNewBlock(scriptPubKey);   \n+    CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+   \n+    LogPrintf(\"Blockv2test block v1 add begin\\n\");  \n+    // First create a block v1, check that it is accepted. The block has an invalid height\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000);\n+    pblock->nVersion = 1;\n+    CValidationState state1;\n+    PreviousHeight = chainActive.Height();\n+    BOOST_CHECK(ProcessBlock(state1, NULL, pblock));\n+    BOOST_CHECK(state1.IsValid());\n+    BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\t\n+    pblock->hashPrevBlock = pblock->GetHash(); // update parent",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164774",
      "id" : 17164774,
      "line" : 113,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTY0Nzc0",
      "original_commit_id" : "357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
      "original_line" : null,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "src/test/blockv2_tests.cpp",
      "position" : 113,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164774/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-09-09T16:31:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164774",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164883"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164883"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No, it's not a bug. Receiving a single block can cause zero or multiple blocks to be connected, and ActivateBestChain's responsibility is just switching the best block whatsoever.\n\nFeedback about failures causes a reject message to be sent to the peer from which we received the actual block (not necessarily the same as from whom we got the block that caused the reorg), for which we remember the peerid. It would be useful to generalize this mechanism to have generic callbacks available about block validation (for example for BIP23 rejection reasons), which could also be used here.\n",
      "commit_id" : "eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
      "created_at" : "2014-09-05T10:02:52Z",
      "diff_hunk" : "@@ -0,0 +1,232 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+// Tests the majority rule which states that after 1000 v2 blocks no v1 block can go\n+BOOST_AUTO_TEST_SUITE(blockv2_tests)\n+\n+static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+\n+static void SetEmptyBlock(CBlock * pblock)\n+{\n+        pblock->nVersion = 2;\n+        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->nNonce = 0;\n+}\n+        \n+static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int difValue)\n+{\n+        SetEmptyBlock(pblock);\n+\n+        // Add the coinbase\n+        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+        \n+        if (addHeight) \n+            txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+difValue) << 0);\n+            else\n+            txCoinbase.vin[0].scriptSig = (CScript() << difValue << 0); // At least size 2, this is a protocol spec\n+            \n+        txCoinbase.vout[0].scriptPubKey = CScript();\n+        pblock->vtx[0] = CTransaction(txCoinbase);\n+        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+}\n+\n+void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n+{\n+    if ((chainActive.Height()+1) % Params().SubsidyHalvingInterval() == 0)\n+        {\n+            // The RegTest network has a low subsidy halving interval (150) so \n+            // we must recompute the coinbase subsidy if we reach the boundary.\n+\n+            // preserve parent hash\n+            uint256 prevParent = pblock->hashPrevBlock;\n+            delete pblocktemplate;\n+            pblocktemplate = CreateNewBlock(scriptPubKey);   \n+            pblock = &pblocktemplate->block; // pointer for convenience\n+            pblock->hashPrevBlock = prevParent;\n+        }\n+}\n+\n+void Blockv2test()\n+{\n+    assert(Params().NetworkID() == CBaseChainParams::UNITTEST); \n+    ModifiableParams()->setSkipProofOfWorkCheck(true);\n+    \n+    // We don't know the state of the block-chain here: it depends on which other tests are run before this test.\n+    // See https://github.com/bitcoin/bitcoin/pull/4688 for a patch that allows the re-creation of the block-chain\n+    // for each testcase that requires it.\n+\n+    // If miner_tests.cpp is run before, the chain will be 100 blocks long, and all of them will be v1\n+\n+    \n+    LogPrintf(\"Blockv2test testcase starts\\n\"); \n+        \n+    CBlockTemplate *pblocktemplate;\n+    CScript script;\n+    uint256 hash;\n+    int PreviousHeight;\n+\n+    \n+    LOCK(cs_main);\n+        \n+    \n+    // Simple block creation, nothing special yet.\n+    pblocktemplate = CreateNewBlock(scriptPubKey);   \n+    CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+   \n+    LogPrintf(\"Blockv2test block v1 add begin\\n\");  \n+    // First create a block v1, check that it is accepted. The block has an invalid height\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000);\n+    pblock->nVersion = 1;\n+    CValidationState state1;\n+    PreviousHeight = chainActive.Height();\n+    BOOST_CHECK(ProcessBlock(state1, NULL, pblock));\n+    BOOST_CHECK(state1.IsValid());\n+    BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\t\n+    pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    \n+    \n+    // Now create exactly 1000 blocks v2\n+    \n+    // First check that the supermajority threshold is exactly 1000 blocks\n+    BOOST_CHECK(Params().ToCheckBlockUpgradeMajority()==1000);  // \n+    BOOST_CHECK(Params().EnforceBlockUpgradeMajority()==750);\n+    BOOST_CHECK(Params().RejectBlockOutdatedMajority()==950);\n+    \n+    // Over the last 1000 blocks, 750 blocks must be v2 to switch to v2-only mode.\n+    // Here we're testing only the last 750, not any subset.\n+    \n+    LogPrintf(\"Blockv2test BIP30 repetition begin\\n\");  \n+\n+    // First, if we try to add a block v2 with the same coinbase tx, we should get\n+    // \"bad-txns-BIP30\" because the coinbase tx has the same hash as the previous.\n+    // Unluckily, even if ConnectBlock returns a \"bad-txns-BIP30\", ActivateBestChainStep clears\n+    // the state, so we get true here and the \"bad-txns-BIP30\" reason is lost.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17164883",
      "id" : 17164883,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTY0ODgz",
      "original_commit_id" : "357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
      "original_line" : null,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/test/blockv2_tests.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164883/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-09-09T16:31:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17164883",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17170397"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17170397"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It's missing indentation below.\nBut this is on purpose: I want critical consensus code not even look as modified so everyone can evaluate security at eyesight.\n",
      "commit_id" : "eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
      "created_at" : "2014-09-05T12:50:38Z",
      "diff_hunk" : "@@ -2330,6 +2330,7 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n         nHeight = pindexPrev->nHeight+1;\n \n         // Check proof of work\n+        if (!Params().SkipProofOfWorkCheck())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17170397",
      "id" : 17170397,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTcwMzk3",
      "original_commit_id" : "357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
      "original_line" : null,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17170397/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-09-09T16:31:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17170397",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1752347?v=4",
         "events_url" : "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
         "followers_url" : "https://api.github.com/users/SergioDemianLerner/followers",
         "following_url" : "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
         "gists_url" : "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/SergioDemianLerner",
         "id" : 1752347,
         "login" : "SergioDemianLerner",
         "node_id" : "MDQ6VXNlcjE3NTIzNDc=",
         "organizations_url" : "https://api.github.com/users/SergioDemianLerner/orgs",
         "received_events_url" : "https://api.github.com/users/SergioDemianLerner/received_events",
         "repos_url" : "https://api.github.com/users/SergioDemianLerner/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/SergioDemianLerner/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/SergioDemianLerner"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17170489"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17170489"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "difValue is a difference from the current block height, not for difficulty. I can rename it to heightDifference.\n",
      "commit_id" : "eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
      "created_at" : "2014-09-05T12:53:08Z",
      "diff_hunk" : "@@ -0,0 +1,232 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+// Tests the majority rule which states that after 1000 v2 blocks no v1 block can go\n+BOOST_AUTO_TEST_SUITE(blockv2_tests)\n+\n+static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+\n+static void SetEmptyBlock(CBlock * pblock)\n+{\n+        pblock->nVersion = 2;\n+        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->nNonce = 0;\n+}\n+        \n+static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int difValue)\n+{\n+        SetEmptyBlock(pblock);\n+\n+        // Add the coinbase\n+        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+        \n+        if (addHeight) \n+            txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+difValue) << 0);\n+            else",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17170489",
      "id" : 17170489,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTcwNDg5",
      "original_commit_id" : "357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
      "original_line" : null,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/test/blockv2_tests.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17170489/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-09-09T16:31:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17170489",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1752347?v=4",
         "events_url" : "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
         "followers_url" : "https://api.github.com/users/SergioDemianLerner/followers",
         "following_url" : "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
         "gists_url" : "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/SergioDemianLerner",
         "id" : 1752347,
         "login" : "SergioDemianLerner",
         "node_id" : "MDQ6VXNlcjE3NTIzNDc=",
         "organizations_url" : "https://api.github.com/users/SergioDemianLerner/orgs",
         "received_events_url" : "https://api.github.com/users/SergioDemianLerner/received_events",
         "repos_url" : "https://api.github.com/users/SergioDemianLerner/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/SergioDemianLerner/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/SergioDemianLerner"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17170842"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17170842"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, but since they create v2 blocks, they can only be run after the previous v2 majority tests. So there is a hidden dependence.\n",
      "commit_id" : "eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
      "created_at" : "2014-09-05T13:02:30Z",
      "diff_hunk" : "@@ -0,0 +1,232 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+// Tests the majority rule which states that after 1000 v2 blocks no v1 block can go\n+BOOST_AUTO_TEST_SUITE(blockv2_tests)\n+\n+static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+\n+static void SetEmptyBlock(CBlock * pblock)\n+{\n+        pblock->nVersion = 2;\n+        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->nNonce = 0;\n+}\n+        \n+static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int difValue)\n+{\n+        SetEmptyBlock(pblock);\n+\n+        // Add the coinbase\n+        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+        \n+        if (addHeight) \n+            txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+difValue) << 0);\n+            else\n+            txCoinbase.vin[0].scriptSig = (CScript() << difValue << 0); // At least size 2, this is a protocol spec\n+            \n+        txCoinbase.vout[0].scriptPubKey = CScript();\n+        pblock->vtx[0] = CTransaction(txCoinbase);\n+        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+}\n+\n+void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n+{\n+    if ((chainActive.Height()+1) % Params().SubsidyHalvingInterval() == 0)\n+        {\n+            // The RegTest network has a low subsidy halving interval (150) so \n+            // we must recompute the coinbase subsidy if we reach the boundary.\n+\n+            // preserve parent hash\n+            uint256 prevParent = pblock->hashPrevBlock;\n+            delete pblocktemplate;\n+            pblocktemplate = CreateNewBlock(scriptPubKey);   \n+            pblock = &pblocktemplate->block; // pointer for convenience\n+            pblock->hashPrevBlock = prevParent;\n+        }\n+}\n+\n+void Blockv2test()\n+{\n+    assert(Params().NetworkID() == CBaseChainParams::UNITTEST); \n+    ModifiableParams()->setSkipProofOfWorkCheck(true);\n+    \n+    // We don't know the state of the block-chain here: it depends on which other tests are run before this test.\n+    // See https://github.com/bitcoin/bitcoin/pull/4688 for a patch that allows the re-creation of the block-chain\n+    // for each testcase that requires it.\n+\n+    // If miner_tests.cpp is run before, the chain will be 100 blocks long, and all of them will be v1\n+\n+    \n+    LogPrintf(\"Blockv2test testcase starts\\n\"); \n+        \n+    CBlockTemplate *pblocktemplate;\n+    CScript script;\n+    uint256 hash;\n+    int PreviousHeight;\n+\n+    \n+    LOCK(cs_main);\n+        \n+    \n+    // Simple block creation, nothing special yet.\n+    pblocktemplate = CreateNewBlock(scriptPubKey);   \n+    CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+   \n+    LogPrintf(\"Blockv2test block v1 add begin\\n\");  \n+    // First create a block v1, check that it is accepted. The block has an invalid height\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000);\n+    pblock->nVersion = 1;\n+    CValidationState state1;\n+    PreviousHeight = chainActive.Height();\n+    BOOST_CHECK(ProcessBlock(state1, NULL, pblock));\n+    BOOST_CHECK(state1.IsValid());\n+    BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\t\n+    pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    \n+    \n+    // Now create exactly 1000 blocks v2\n+    \n+    // First check that the supermajority threshold is exactly 1000 blocks\n+    BOOST_CHECK(Params().ToCheckBlockUpgradeMajority()==1000);  // \n+    BOOST_CHECK(Params().EnforceBlockUpgradeMajority()==750);\n+    BOOST_CHECK(Params().RejectBlockOutdatedMajority()==950);\n+    \n+    // Over the last 1000 blocks, 750 blocks must be v2 to switch to v2-only mode.\n+    // Here we're testing only the last 750, not any subset.\n+    \n+    LogPrintf(\"Blockv2test BIP30 repetition begin\\n\");  \n+\n+    // First, if we try to add a block v2 with the same coinbase tx, we should get\n+    // \"bad-txns-BIP30\" because the coinbase tx has the same hash as the previous.\n+    // Unluckily, even if ConnectBlock returns a \"bad-txns-BIP30\", ActivateBestChainStep clears\n+    // the state, so we get true here and the \"bad-txns-BIP30\" reason is lost.\n+    // We verify instead that the chain height has not been incremented.\n+    \n+    CValidationState state7;\n+    PreviousHeight = chainActive.Height();\n+    CheckSubsidyHalving(pblocktemplate,pblock);\t\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000); //\n+    pblock->nVersion = 2;\n+    BOOST_CHECK(ProcessBlock(state7, NULL, pblock)); // should we care about the return value?\n+    BOOST_CHECK(state7.IsValid());\n+    BOOST_CHECK(PreviousHeight == chainActive.Height()); // we check the block has not been added.\n+    \n+    LogPrintf(\"Blockv2test 750 v2 blocks  begin\\n\");    \n+    for (int i=0;i<750;i++) \n+    {\n+        \n+        LogPrintf(\"Blockv2test block %d begin\\n\",i);    \n+\n+        CheckSubsidyHalving(pblocktemplate,pblock);\t\n+       \n+        // We add a value to the height to make is NOT equal to the actual height.\n+        SetBlockDefaultAttributesAndHeight(pblock,true,1000); // blocks version 2 without height are allowed! for only 750 blocks\n+        pblock->nVersion = 2;\n+        CValidationState state;\n+                    \n+        PreviousHeight = chainActive.Height();\n+        BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n+        BOOST_CHECK(state.IsValid());\n+        BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+        pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    }\n+\n+    LogPrintf(\"Blockv2test v2 without height rejected begin\\n\"); \n+    \n+    // Now we try to add a block v2, with an invalid height and it should be rejected. We use 2000 because is not in the range [1000..1750].\n+    CheckSubsidyHalving(pblocktemplate,pblock);\t\n+    SetBlockDefaultAttributesAndHeight(pblock,true,2000); // \n+    pblock->nVersion = 2;\n+    CValidationState state0;\n+    BOOST_CHECK(ProcessBlock(state0, NULL, pblock)==false);\n+    BOOST_CHECK(!state0.IsValid());\n+    BOOST_CHECK(state0.GetRejectReason()==\"bad-cb-height\"); \n+    // Do not update parent since block has failed\n+    \n+    LogPrintf(\"Blockv2test v2 with height accepted begin\\n\");    \n+    \n+    \n+    // Now we add a block with height, must be ok.\n+    for (int i=0;i<200;i++) \n+    {\n+        \n+        LogPrintf(\"Blockv2test v2block %d begin\\n\",i);      \n+        CheckSubsidyHalving(pblocktemplate,pblock);\n+        SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+        pblock->nVersion = 2;\n+        CValidationState state;\n+        PreviousHeight = chainActive.Height();\n+        BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n+        BOOST_CHECK(state.IsValid());\n+        BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+\n+        pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    }\n+\n+    \n+    LogPrintf(\"Blockv2test block v1 rejected\\n\");   \n+    // Now we add 200 additional blocks, until we get 950 (the threshold were v1 blocks are not accepted anymore)\n+    // Now we try to add a block v1, it should be rejected, even if it hash the height field\n+    CheckSubsidyHalving(pblocktemplate,pblock);\t\n+    SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+    pblock->nVersion = 1;\n+    CValidationState state2;\n+    BOOST_CHECK(ProcessBlock(state2, NULL, pblock)==false);\n+    BOOST_CHECK(!state2.IsValid());\n+    BOOST_CHECK(state2.GetRejectReason()==\"bad-version\");\n+    // Do not update parent since block has failed\n+    \n+    \n+    \n+    // Some other missing tests, added here as bonus...",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17170842",
      "id" : 17170842,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3MTcwODQy",
      "original_commit_id" : "357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
      "original_line" : null,
      "original_position" : 190,
      "original_start_line" : null,
      "path" : "src/test/blockv2_tests.cpp",
      "position" : null,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17170842/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-09-09T16:31:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17170842",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1752347?v=4",
         "events_url" : "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
         "followers_url" : "https://api.github.com/users/SergioDemianLerner/followers",
         "following_url" : "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
         "gists_url" : "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/SergioDemianLerner",
         "id" : 1752347,
         "login" : "SergioDemianLerner",
         "node_id" : "MDQ6VXNlcjE3NTIzNDc=",
         "organizations_url" : "https://api.github.com/users/SergioDemianLerner/orgs",
         "received_events_url" : "https://api.github.com/users/SergioDemianLerner/received_events",
         "repos_url" : "https://api.github.com/users/SergioDemianLerner/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/SergioDemianLerner/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/SergioDemianLerner"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/p4845_eda4aa19d3cafc1644f5c28c687741a6c255b9a6/ for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester)\n2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time\n3. It does not build on either Linux i386 or Win32 (via MinGW cross compile)\n4. The test suite fails on either Linux i386 or Win32\n5. The block test-cases failed (lookup the first bNN identifier which failed in https://github.com/TheBlueMatt/test-scripts/blob/master/FullBlockTestGenerator.java)\n\nIf you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.\n\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.\n",
      "created_at" : "2014-09-09T16:40:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#issuecomment-54999007",
      "id" : 54999007,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4845",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0OTk5MDA3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/54999007/reactions"
      },
      "updated_at" : "2014-09-09T16:40:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/54999007",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2110907?v=4",
         "events_url" : "https://api.github.com/users/BitcoinPullTester/events{/privacy}",
         "followers_url" : "https://api.github.com/users/BitcoinPullTester/followers",
         "following_url" : "https://api.github.com/users/BitcoinPullTester/following{/other_user}",
         "gists_url" : "https://api.github.com/users/BitcoinPullTester/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/BitcoinPullTester",
         "id" : 2110907,
         "login" : "BitcoinPullTester",
         "node_id" : "MDQ6VXNlcjIxMTA5MDc=",
         "organizations_url" : "https://api.github.com/users/BitcoinPullTester/orgs",
         "received_events_url" : "https://api.github.com/users/BitcoinPullTester/received_events",
         "repos_url" : "https://api.github.com/users/BitcoinPullTester/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/BitcoinPullTester/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/BitcoinPullTester/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/BitcoinPullTester"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Great, thanks! I didn't try running the tests myself but the code looks good to me.\n",
      "created_at" : "2014-09-09T18:31:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#issuecomment-55013118",
      "id" : 55013118,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4845",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MDEzMTE4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/55013118/reactions"
      },
      "updated_at" : "2014-09-09T18:31:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/55013118",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/971089?v=4",
         "events_url" : "https://api.github.com/users/mikehearn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mikehearn/followers",
         "following_url" : "https://api.github.com/users/mikehearn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mikehearn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mikehearn",
         "id" : 971089,
         "login" : "mikehearn",
         "node_id" : "MDQ6VXNlcjk3MTA4OQ==",
         "organizations_url" : "https://api.github.com/users/mikehearn/orgs",
         "received_events_url" : "https://api.github.com/users/mikehearn/received_events",
         "repos_url" : "https://api.github.com/users/mikehearn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mikehearn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mikehearn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mikehearn"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I would like to know if there is a plan to add this patch to master or a reason not to. I have another patch waiting with more test cases that requires this patch to work! Thanks.\n",
      "created_at" : "2014-09-10T21:54:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#issuecomment-55189148",
      "id" : 55189148,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4845",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MTg5MTQ4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/55189148/reactions"
      },
      "updated_at" : "2014-09-10T21:54:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/55189148",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1752347?v=4",
         "events_url" : "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
         "followers_url" : "https://api.github.com/users/SergioDemianLerner/followers",
         "following_url" : "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
         "gists_url" : "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/SergioDemianLerner",
         "id" : 1752347,
         "login" : "SergioDemianLerner",
         "node_id" : "MDQ6VXNlcjE3NTIzNDc=",
         "organizations_url" : "https://api.github.com/users/SergioDemianLerner/orgs",
         "received_events_url" : "https://api.github.com/users/SergioDemianLerner/received_events",
         "repos_url" : "https://api.github.com/users/SergioDemianLerner/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/SergioDemianLerner/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/SergioDemianLerner"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17395663"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17395663"
         }
      },
      "author_association" : "MEMBER",
      "body" : "+1\n",
      "commit_id" : "eda4aa19d3cafc1644f5c28c687741a6c255b9a6",
      "created_at" : "2014-09-10T23:19:09Z",
      "diff_hunk" : "@@ -0,0 +1,232 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+// Tests the majority rule which states that after 1000 v2 blocks no v1 block can go\n+BOOST_AUTO_TEST_SUITE(blockv2_tests)\n+\n+static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+\n+static void SetEmptyBlock(CBlock * pblock)\n+{\n+        pblock->nVersion = 2;\n+        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->nNonce = 0;\n+}\n+        \n+static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int difValue)\n+{\n+        SetEmptyBlock(pblock);\n+\n+        // Add the coinbase\n+        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+        \n+        if (addHeight) \n+            txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+difValue) << 0);\n+            else\n+            txCoinbase.vin[0].scriptSig = (CScript() << difValue << 0); // At least size 2, this is a protocol spec\n+            \n+        txCoinbase.vout[0].scriptPubKey = CScript();\n+        pblock->vtx[0] = CTransaction(txCoinbase);\n+        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+}\n+\n+void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n+{\n+    if ((chainActive.Height()+1) % Params().SubsidyHalvingInterval() == 0)\n+        {\n+            // The RegTest network has a low subsidy halving interval (150) so \n+            // we must recompute the coinbase subsidy if we reach the boundary.\n+\n+            // preserve parent hash\n+            uint256 prevParent = pblock->hashPrevBlock;\n+            delete pblocktemplate;\n+            pblocktemplate = CreateNewBlock(scriptPubKey);   \n+            pblock = &pblocktemplate->block; // pointer for convenience\n+            pblock->hashPrevBlock = prevParent;\n+        }\n+}\n+\n+void Blockv2test()\n+{\n+    assert(Params().NetworkID() == CBaseChainParams::UNITTEST); \n+    ModifiableParams()->setSkipProofOfWorkCheck(true);\n+    \n+    // We don't know the state of the block-chain here: it depends on which other tests are run before this test.\n+    // See https://github.com/bitcoin/bitcoin/pull/4688 for a patch that allows the re-creation of the block-chain\n+    // for each testcase that requires it.\n+\n+    // If miner_tests.cpp is run before, the chain will be 100 blocks long, and all of them will be v1\n+\n+    \n+    LogPrintf(\"Blockv2test testcase starts\\n\"); \n+        \n+    CBlockTemplate *pblocktemplate;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#discussion_r17395663",
      "id" : 17395663,
      "line" : 90,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Mzk1NjYz",
      "original_commit_id" : "357c35cb47a2aa6ceae6c87a8386bb1ea186f6d5",
      "original_line" : null,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/test/blockv2_tests.cpp",
      "position" : 90,
      "pull_request_review_id" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4845",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17395663/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2014-09-10T23:19:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/17395663",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I haven't reviewed all code, but the changes to the existing core code and tests do seem safe to me.\n",
      "created_at" : "2014-09-10T23:20:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#issuecomment-55199096",
      "id" : 55199096,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4845",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MTk5MDk2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/55199096/reactions"
      },
      "updated_at" : "2014-09-10T23:20:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/55199096",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Had to be rebased for the clang code formatting change, as well as some other (base)chainparams changes.\nRebased version here: https://github.com/laanwj/bitcoin/tree/2014_09_unittest_master\n",
      "created_at" : "2014-09-29T11:05:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#issuecomment-57145753",
      "id" : 57145753,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4845",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MTQ1NzUz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/57145753/reactions"
      },
      "updated_at" : "2014-09-29T11:05:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/57145753",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'm not too happy about a virtual being introduced into CChainParams. Can we avoid this?\n\n```\nvirtual bool SkipProofOfWorkCheck() const { return false; }\n```\n\nEdit: yes we can, see 4705902\n",
      "created_at" : "2014-09-29T11:08:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#issuecomment-57146007",
      "id" : 57146007,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4845",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MTQ2MDA3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/57146007/reactions"
      },
      "updated_at" : "2014-09-29T11:16:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/57146007",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK - will merge after you've sanity-checked my rebased version.\n",
      "created_at" : "2014-09-29T11:20:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#issuecomment-57146969",
      "id" : 57146969,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4845",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MTQ2OTY5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/57146969/reactions"
      },
      "updated_at" : "2014-09-29T11:20:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/57146969",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Oops - this was marked by Travis as ok, but is failing the windows tests now after I tried to merge.\n\nSee\n- https://travis-ci.org/bitcoin/bitcoin/jobs/36845581\n- https://travis-ci.org/bitcoin/bitcoin/jobs/36845582\n\nLots of:\n\n```\ntest/miner_tests.cpp(82): error in \"CreateNewBlock_validity\": check ProcessBlock(state, __null, pblock) failed\ntest/miner_tests.cpp(83): error in \"CreateNewBlock_validity\": check state.IsValid() failed\ntest/miner_tests.cpp(82): error in \"CreateNewBlock_validity\": check ProcessBlock(state, __null, pblock) failed\ntest/miner_tests.cpp(83): error in \"CreateNewBlock_validity\": check state.IsValid() failed\ntest/miner_tests.cpp(82): error in \"CreateNewBlock_validity\": check ProcessBlock(state, __null, pblock) failed\ntest/miner_tests.cpp(83): error in \"CreateNewBlock_validity\": check state.IsValid() failed\ntest/miner_tests.cpp(82): error in \"CreateNewBlock_validity\": check ProcessBlock(state, __null, pblock) failed\ntest/miner_tests.cpp(83): error in \"CreateNewBlock_validity\": check state.IsValid() failed\n```\n\nSee #5030.\n",
      "created_at" : "2014-10-02T08:33:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#issuecomment-57598338",
      "id" : 57598338,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4845",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3NTk4MzM4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/57598338/reactions"
      },
      "updated_at" : "2014-10-02T10:13:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/57598338",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@laanwj I asked TheBlueMatt before about this problem. I could not replicate the problem, but It think that in some platforms the order in which the test cases are executed is different. Ohh, you already discovered this in  #5030\n",
      "created_at" : "2014-10-02T14:06:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#issuecomment-57634438",
      "id" : 57634438,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4845",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3NjM0NDM4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/57634438/reactions"
      },
      "updated_at" : "2014-10-02T14:06:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/57634438",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1752347?v=4",
         "events_url" : "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
         "followers_url" : "https://api.github.com/users/SergioDemianLerner/followers",
         "following_url" : "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
         "gists_url" : "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/SergioDemianLerner",
         "id" : 1752347,
         "login" : "SergioDemianLerner",
         "node_id" : "MDQ6VXNlcjE3NTIzNDc=",
         "organizations_url" : "https://api.github.com/users/SergioDemianLerner/orgs",
         "received_events_url" : "https://api.github.com/users/SergioDemianLerner/received_events",
         "repos_url" : "https://api.github.com/users/SergioDemianLerner/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/SergioDemianLerner/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/SergioDemianLerner"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Closing this. The modifiable parameters part has been merged (see #5030). The blocksv2 test case that relies on being executed in a specific order w/ miner_tests has not, as that's not acceptable (as it makes the test framework non-deterministic, and makes it impossible to run testcases separately). Please find a different solution for that.\n",
      "created_at" : "2014-10-08T07:11:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4845#issuecomment-58318987",
      "id" : 58318987,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4845",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4MzE4OTg3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/58318987/reactions"
      },
      "updated_at" : "2014-10-08T07:11:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/58318987",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
