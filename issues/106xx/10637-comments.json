[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123062378"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123062378"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Have you filtered utxo_pool to exclude utxo's that have a net-neg value? Otherwise you're underestimating the lookahead here. To get an accurate figure for what you may still collect downtree, you should only add `utxo.txout.nValue >=0`",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-06-20T18:46:04Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123062378",
      "id" : 123062378,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 45231552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123062378",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123067487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123067487"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "AFAICT utxo_pool has : 4, 3, 2, & 1. Since you're exploring randomly selecting 5 then has two possible solutions: 4+1, 3+2.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-06-20T19:05:57Z",
      "diff_hunk" : "@@ -0,0 +1,554 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5\n+\n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n+\n+typedef std::set<CInputCoin> CoinSet;\n+\n+static std::vector<COutput> vCoins;\n+static const CWallet testWallet;\n+static CAmount balance = 0;\n+\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace_back(wtx.get(), nInput);\n+}\n+\n+static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace(wtx.get(), nInput);\n+}\n+\n+\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+{\n+    balance += nValue;\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    if (fIsFromMe) {\n+        // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n+        // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n+        tx.vin.resize(1);\n+    }\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    if (fIsFromMe)\n+    {\n+        wtx->fDebitCached = true;\n+        wtx->nDebitCached = 1;\n+    }\n+    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    vCoins.push_back(output);\n+    wtxn.emplace_back(std::move(wtx));\n+}\n+\n+static void empty_wallet(void)\n+{\n+    vCoins.clear();\n+    wtxn.clear();\n+    balance = 0;\n+}\n+\n+static bool equal_sets(CoinSet a, CoinSet b)\n+{\n+    std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n+    return ret.first == a.end() && ret.second == b.end();\n+}\n+\n+static long make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n+{\n+    utxo_pool.clear();\n+    long target = 0;\n+    for (int i = 0; i < utxos; ++i) {\n+        target += (long)1 << (utxos+i);\n+        add_coin((long)1 << (utxos+i), 2*i, utxo_pool);\n+        add_coin(((long)1 << (utxos+i)) + ((long)1 << (utxos-1-i)), 2*i + 1, utxo_pool);\n+    }\n+    return target;\n+}\n+\n+// Branch and bound coin selection tests\n+BOOST_AUTO_TEST_CASE(bnb_search_test)\n+{\n+\n+    LOCK(testWallet.cs_wallet);\n+\n+    // Setup \n+    std::vector<CInputCoin> utxo_pool;\n+    CoinSet selection;\n+    CoinSet actual_selection;\n+    CAmount value_ret = 0;\n+    \n+    /////////////////////////\n+    // Known Outcome tests //\n+    /////////////////////////\n+    BOOST_TEST_MESSAGE(\"Testing known outcomes\");\n+\n+    // Empty utxo pool\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    selection.clear();\n+    \n+    // Add 1, 2, and 3, utxos\n+    add_coin(1 * CENT, 1, utxo_pool);    \n+    add_coin(2 * CENT, 2, utxo_pool);\n+    add_coin(3 * CENT, 3, utxo_pool);\n+    add_coin(4 * CENT, 4, utxo_pool);\n+    \n+    // Select 1 Cent\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 2 Cent\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 2 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 5 Cent\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123067487",
      "id" : 123067487,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 144,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 45231552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123067487",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123068150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123068150"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Under above assumptions, there is two solutions here as well: 5+4+1, or 5+3+2.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-06-20T19:08:54Z",
      "diff_hunk" : "@@ -0,0 +1,554 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5\n+\n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n+\n+typedef std::set<CInputCoin> CoinSet;\n+\n+static std::vector<COutput> vCoins;\n+static const CWallet testWallet;\n+static CAmount balance = 0;\n+\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace_back(wtx.get(), nInput);\n+}\n+\n+static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace(wtx.get(), nInput);\n+}\n+\n+\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+{\n+    balance += nValue;\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    if (fIsFromMe) {\n+        // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n+        // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n+        tx.vin.resize(1);\n+    }\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    if (fIsFromMe)\n+    {\n+        wtx->fDebitCached = true;\n+        wtx->nDebitCached = 1;\n+    }\n+    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    vCoins.push_back(output);\n+    wtxn.emplace_back(std::move(wtx));\n+}\n+\n+static void empty_wallet(void)\n+{\n+    vCoins.clear();\n+    wtxn.clear();\n+    balance = 0;\n+}\n+\n+static bool equal_sets(CoinSet a, CoinSet b)\n+{\n+    std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n+    return ret.first == a.end() && ret.second == b.end();\n+}\n+\n+static long make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n+{\n+    utxo_pool.clear();\n+    long target = 0;\n+    for (int i = 0; i < utxos; ++i) {\n+        target += (long)1 << (utxos+i);\n+        add_coin((long)1 << (utxos+i), 2*i, utxo_pool);\n+        add_coin(((long)1 << (utxos+i)) + ((long)1 << (utxos-1-i)), 2*i + 1, utxo_pool);\n+    }\n+    return target;\n+}\n+\n+// Branch and bound coin selection tests\n+BOOST_AUTO_TEST_CASE(bnb_search_test)\n+{\n+\n+    LOCK(testWallet.cs_wallet);\n+\n+    // Setup \n+    std::vector<CInputCoin> utxo_pool;\n+    CoinSet selection;\n+    CoinSet actual_selection;\n+    CAmount value_ret = 0;\n+    \n+    /////////////////////////\n+    // Known Outcome tests //\n+    /////////////////////////\n+    BOOST_TEST_MESSAGE(\"Testing known outcomes\");\n+\n+    // Empty utxo pool\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    selection.clear();\n+    \n+    // Add 1, 2, and 3, utxos\n+    add_coin(1 * CENT, 1, utxo_pool);    \n+    add_coin(2 * CENT, 2, utxo_pool);\n+    add_coin(3 * CENT, 3, utxo_pool);\n+    add_coin(4 * CENT, 4, utxo_pool);\n+    \n+    // Select 1 Cent\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 2 Cent\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 2 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 5 Cent\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 5 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 11 Cent, not possible\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 11 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 10 Cent\n+    add_coin(5 * CENT, 5, utxo_pool);\n+    add_coin(5 * CENT, 5, actual_selection);\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123068150",
      "id" : 123068150,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 159,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 45231552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123068150",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123069730"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123069730"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It seems to me that you're also collecting coins that have a net-negative here. This will cause your lookahead to be underestimated, unless you cater to that case when calculating the remainder.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-06-20T19:16:06Z",
      "diff_hunk" : "@@ -2252,86 +2233,25 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n             continue;\n \n         int i = output.i;\n-\n-        CInputCoin coin = CInputCoin(pcoin, i);\n-\n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n-        }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n-        {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n-\n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n-\n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n-\n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n-            }\n-\n-        if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n-            LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n-            for (unsigned int i = 0; i < vValue.size(); i++) {\n-                if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n-                }\n-            }\n-            LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));\n-        }\n+        CInputCoin coin(pcoin, i);\n+        coin.txout.nValue -= (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123069730",
      "id" : 123069730,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 224,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 45231552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123069730",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123071057"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123071057"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I would perhaps add a test that checks what happens if the utxo_pool includes a UTXO that is more costly to spend than its own value. As far as I can tell, this would currently reduce your lookahead and may cause a premature search failure.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-06-20T19:22:13Z",
      "diff_hunk" : "@@ -0,0 +1,554 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5\n+\n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n+\n+typedef std::set<CInputCoin> CoinSet;\n+\n+static std::vector<COutput> vCoins;\n+static const CWallet testWallet;\n+static CAmount balance = 0;\n+\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace_back(wtx.get(), nInput);\n+}\n+\n+static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace(wtx.get(), nInput);\n+}\n+\n+\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+{\n+    balance += nValue;\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    if (fIsFromMe) {\n+        // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n+        // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n+        tx.vin.resize(1);\n+    }\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    if (fIsFromMe)\n+    {\n+        wtx->fDebitCached = true;\n+        wtx->nDebitCached = 1;\n+    }\n+    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    vCoins.push_back(output);\n+    wtxn.emplace_back(std::move(wtx));\n+}\n+\n+static void empty_wallet(void)\n+{\n+    vCoins.clear();\n+    wtxn.clear();\n+    balance = 0;\n+}\n+\n+static bool equal_sets(CoinSet a, CoinSet b)\n+{\n+    std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n+    return ret.first == a.end() && ret.second == b.end();\n+}\n+\n+static long make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n+{\n+    utxo_pool.clear();\n+    long target = 0;\n+    for (int i = 0; i < utxos; ++i) {\n+        target += (long)1 << (utxos+i);\n+        add_coin((long)1 << (utxos+i), 2*i, utxo_pool);\n+        add_coin(((long)1 << (utxos+i)) + ((long)1 << (utxos-1-i)), 2*i + 1, utxo_pool);\n+    }\n+    return target;\n+}\n+\n+// Branch and bound coin selection tests\n+BOOST_AUTO_TEST_CASE(bnb_search_test)\n+{\n+\n+    LOCK(testWallet.cs_wallet);\n+\n+    // Setup \n+    std::vector<CInputCoin> utxo_pool;\n+    CoinSet selection;\n+    CoinSet actual_selection;\n+    CAmount value_ret = 0;\n+    \n+    /////////////////////////",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123071057",
      "id" : 123071057,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 113,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 45231552,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123071057",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123071898"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123071898"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@gmaxwell has concerns that Core wallet is only doing semi-sane utxo handling by spending these. With exact match + sane backoff algorithm this concern may be alleviated?",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-06-20T19:25:39Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123071898",
      "id" : 123071898,
      "in_reply_to_id" : 123062378,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 45241765,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123071898",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123072635"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123072635"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It is forced to be include first in these tests so the solution is deterministic.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-06-20T19:28:50Z",
      "diff_hunk" : "@@ -0,0 +1,554 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5\n+\n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n+\n+typedef std::set<CInputCoin> CoinSet;\n+\n+static std::vector<COutput> vCoins;\n+static const CWallet testWallet;\n+static CAmount balance = 0;\n+\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace_back(wtx.get(), nInput);\n+}\n+\n+static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace(wtx.get(), nInput);\n+}\n+\n+\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+{\n+    balance += nValue;\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    if (fIsFromMe) {\n+        // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n+        // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n+        tx.vin.resize(1);\n+    }\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    if (fIsFromMe)\n+    {\n+        wtx->fDebitCached = true;\n+        wtx->nDebitCached = 1;\n+    }\n+    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    vCoins.push_back(output);\n+    wtxn.emplace_back(std::move(wtx));\n+}\n+\n+static void empty_wallet(void)\n+{\n+    vCoins.clear();\n+    wtxn.clear();\n+    balance = 0;\n+}\n+\n+static bool equal_sets(CoinSet a, CoinSet b)\n+{\n+    std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n+    return ret.first == a.end() && ret.second == b.end();\n+}\n+\n+static long make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n+{\n+    utxo_pool.clear();\n+    long target = 0;\n+    for (int i = 0; i < utxos; ++i) {\n+        target += (long)1 << (utxos+i);\n+        add_coin((long)1 << (utxos+i), 2*i, utxo_pool);\n+        add_coin(((long)1 << (utxos+i)) + ((long)1 << (utxos-1-i)), 2*i + 1, utxo_pool);\n+    }\n+    return target;\n+}\n+\n+// Branch and bound coin selection tests\n+BOOST_AUTO_TEST_CASE(bnb_search_test)\n+{\n+\n+    LOCK(testWallet.cs_wallet);\n+\n+    // Setup \n+    std::vector<CInputCoin> utxo_pool;\n+    CoinSet selection;\n+    CoinSet actual_selection;\n+    CAmount value_ret = 0;\n+    \n+    /////////////////////////\n+    // Known Outcome tests //\n+    /////////////////////////\n+    BOOST_TEST_MESSAGE(\"Testing known outcomes\");\n+\n+    // Empty utxo pool\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    selection.clear();\n+    \n+    // Add 1, 2, and 3, utxos\n+    add_coin(1 * CENT, 1, utxo_pool);    \n+    add_coin(2 * CENT, 2, utxo_pool);\n+    add_coin(3 * CENT, 3, utxo_pool);\n+    add_coin(4 * CENT, 4, utxo_pool);\n+    \n+    // Select 1 Cent\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 2 Cent\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 2 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 5 Cent\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123072635",
      "id" : 123072635,
      "in_reply_to_id" : 123067487,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 144,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 45242560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123072635",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123072655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123072655"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It is forced to be include first in these tests so the solution is deterministic.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-06-20T19:28:56Z",
      "diff_hunk" : "@@ -0,0 +1,554 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5\n+\n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n+\n+typedef std::set<CInputCoin> CoinSet;\n+\n+static std::vector<COutput> vCoins;\n+static const CWallet testWallet;\n+static CAmount balance = 0;\n+\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace_back(wtx.get(), nInput);\n+}\n+\n+static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace(wtx.get(), nInput);\n+}\n+\n+\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+{\n+    balance += nValue;\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    if (fIsFromMe) {\n+        // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n+        // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n+        tx.vin.resize(1);\n+    }\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    if (fIsFromMe)\n+    {\n+        wtx->fDebitCached = true;\n+        wtx->nDebitCached = 1;\n+    }\n+    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    vCoins.push_back(output);\n+    wtxn.emplace_back(std::move(wtx));\n+}\n+\n+static void empty_wallet(void)\n+{\n+    vCoins.clear();\n+    wtxn.clear();\n+    balance = 0;\n+}\n+\n+static bool equal_sets(CoinSet a, CoinSet b)\n+{\n+    std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n+    return ret.first == a.end() && ret.second == b.end();\n+}\n+\n+static long make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n+{\n+    utxo_pool.clear();\n+    long target = 0;\n+    for (int i = 0; i < utxos; ++i) {\n+        target += (long)1 << (utxos+i);\n+        add_coin((long)1 << (utxos+i), 2*i, utxo_pool);\n+        add_coin(((long)1 << (utxos+i)) + ((long)1 << (utxos-1-i)), 2*i + 1, utxo_pool);\n+    }\n+    return target;\n+}\n+\n+// Branch and bound coin selection tests\n+BOOST_AUTO_TEST_CASE(bnb_search_test)\n+{\n+\n+    LOCK(testWallet.cs_wallet);\n+\n+    // Setup \n+    std::vector<CInputCoin> utxo_pool;\n+    CoinSet selection;\n+    CoinSet actual_selection;\n+    CAmount value_ret = 0;\n+    \n+    /////////////////////////\n+    // Known Outcome tests //\n+    /////////////////////////\n+    BOOST_TEST_MESSAGE(\"Testing known outcomes\");\n+\n+    // Empty utxo pool\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    selection.clear();\n+    \n+    // Add 1, 2, and 3, utxos\n+    add_coin(1 * CENT, 1, utxo_pool);    \n+    add_coin(2 * CENT, 2, utxo_pool);\n+    add_coin(3 * CENT, 3, utxo_pool);\n+    add_coin(4 * CENT, 4, utxo_pool);\n+    \n+    // Select 1 Cent\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 2 Cent\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 2 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 5 Cent\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 5 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 11 Cent, not possible\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 11 * CENT, 0.5 * CENT, selection, value_ret, nullptr));\n+    actual_selection.clear();\n+    selection.clear();\n+    \n+    // Select 10 Cent\n+    add_coin(5 * CENT, 5, utxo_pool);\n+    add_coin(5 * CENT, 5, actual_selection);\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123072655",
      "id" : 123072655,
      "in_reply_to_id" : 123068150,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 159,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 45242584,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123072655",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123073108"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123073108"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Indeed, that may be a problem. I will add that in as it is still good to have additional checks here even if done elsewhere.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-06-20T19:31:06Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123073108",
      "id" : 123073108,
      "in_reply_to_id" : 123062378,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 45243137,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123073108",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "Have you tested the effect of random exploration vs largest first exploration? \r\n\r\n* Either way, BranchAndBound already guarantees that the global utxo set doesn't grow (for one output transactions) due to saving the change output.\r\n* LFE guarantees the creation of a minimal input set, and purposefully finds a possible solution. This should minimize the input set size variance. In my simulations BranchAndBound with LFE already caused a smaller average UTXO footprint than legacy Core selection.\r\n* Random Exploration could find a larger input set by skipping a key UTXO higher up in the tree. This could lead to the selection of a larger number of inputs, or in an edge case could even cause tries to be exhausted before a solution is found. This may increase input set variance, or could perhaps even exhaust small UTXOs too quickly for BnB to often find a viable solution.\r\n\r\nI am not sure there is a significant privacy benefit for Random Exploration as for either selection method an attacker would already need to know about another eligible input that would achieve an exact match when switched out for one of the input set.\r\n\r\nWhat benefit do you expect from using Random Exploration?",
      "created_at" : "2017-06-20T19:46:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309868437",
      "id" : 309868437,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T20:28:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309868437",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/4060799?v=3",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123077157"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123077157"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't have much of a concern here about the 0/negative effective value inputs: Failing to select negative effective value inputs for an exact match won't lead to a UTXO count inflation, because changeless transactions are by definition strictly UTXO reducing.\r\n",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-06-20T19:49:19Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123077157",
      "id" : 123077157,
      "in_reply_to_id" : 123062378,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 45247440,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123077157",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123077607"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123077607"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@instagibbs: I'm not completely opposed to spending net-negative UTXO, my concern here is primarily that it actually may cause the lookahead to be underestimated causing valid solutions not to be found.\r\n\r\nI realize now that the knapsack algorithm would also not select uneconomic UTXO anymore, as if it had selected enough value before it reached them it would have already returned the set, and if it actually starts exploring them, cannot add more value in the first place.\r\n\r\nAdvocatus Diaboli: Would it be that terrible though, if UTXO were only considered when they actually have a net positive value? During times of low fees, they'd be used both during BnB and knapsack, during times of high fees, they wouldn't bloat the blocks and lose their owner money.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-06-20T19:51:04Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123077607",
      "id" : 123077607,
      "in_reply_to_id" : 123062378,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 45247917,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123077607",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123079426"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123079426"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I am not so concerned, was making sure concerns are brought up.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-06-20T19:58:50Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123079426",
      "id" : 123079426,
      "in_reply_to_id" : 123062378,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 45249806,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123079426",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "@Xekyo I was thinking that Random Exploration would be better for privacy but I see that it probably wouldn't help. If you think it would be better to change to LFE, I can certainly do that.",
      "created_at" : "2017-06-20T20:25:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309880678",
      "id" : 309880678,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T20:25:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309880678",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "@achow101: I don't know how strong the effect is, but I'd expect Random Exploration to increase the required computational effort.",
      "created_at" : "2017-06-20T20:33:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309882818",
      "id" : 309882818,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T20:33:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309882818",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/4060799?v=3",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "body" : "Noting that this PR has fairly heavy overlap with https://github.com/bitcoin/bitcoin/pull/10360 . \r\n\r\nFrom chatting with @achow101 the intention of this PR is to touch as little as possible while still getting BranchNBound coin selection.\r\n\r\nTo make this successful it should really only be run on first iteration of the loop in CreateTransaction, when `nFeeRet == 0` and only use effective value for the BnB coin selection step, rather than the knapsack as well. Once `nFeeRet` becomes more than zero, interactions start to get strange without a more complete overhaul like #10360.",
      "created_at" : "2017-06-20T20:52:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309887884",
      "id" : 309887884,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T20:52:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309887884",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "This PR I believe will still create just-over-dust change outputs when BnB finds an exact match. Whenever we are allowing BnB matches(first iteration) we should not make change outputs less than the exact match slack value.",
      "created_at" : "2017-06-20T20:59:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309889805",
      "id" : 309889805,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T20:59:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309889805",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123094400"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123094400"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This assumes that the input will be spent at a feerate at least as high as the current. This was a valid assumption in my thesis, as I was using a fixed fee rate. I'm not sure whether this a valid assumption for realnet transaction selection, as we've literally seen fees between 8-540 sat/byte in the past two weeks. We might want to consider discounting the cost of the input slightly.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-06-20T21:01:02Z",
      "diff_hunk" : "@@ -2252,86 +2233,25 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n             continue;\n \n         int i = output.i;\n-\n-        CInputCoin coin = CInputCoin(pcoin, i);\n-\n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n-        }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n-        {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n-\n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n-\n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n-\n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n-            }\n-\n-        if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n-            LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n-            for (unsigned int i = 0; i < vValue.size(); i++) {\n-                if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n-                }\n-            }\n-            LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));\n-        }\n+        CInputCoin coin(pcoin, i);\n+        coin.txout.nValue -= (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+        vValue.push_back(coin);\n+    }\n+    if (!use_only_knapsack) {\n+        // Calculate cost of change\n+        // TODO: In the future, we should use the change output actually made for the transaction and calculate the cost\n+        // requred to spend it.\n+        CAmount cost_of_change = effective_fee.GetFee(148+34); // 148 bytes for the input, 34 bytes for making the output",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123094400",
      "id" : 123094400,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 231,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 45266285,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123094400",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123094567"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123094567"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Depends on user time preferences. Could be an option that is set for those who regularly consolidate.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-06-20T21:01:42Z",
      "diff_hunk" : "@@ -2252,86 +2233,25 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n             continue;\n \n         int i = output.i;\n-\n-        CInputCoin coin = CInputCoin(pcoin, i);\n-\n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n-        }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n-        {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n-\n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n-\n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n-\n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n-            }\n-\n-        if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n-            LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n-            for (unsigned int i = 0; i < vValue.size(); i++) {\n-                if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n-                }\n-            }\n-            LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));\n-        }\n+        CInputCoin coin(pcoin, i);\n+        coin.txout.nValue -= (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+        vValue.push_back(coin);\n+    }\n+    if (!use_only_knapsack) {\n+        // Calculate cost of change\n+        // TODO: In the future, we should use the change output actually made for the transaction and calculate the cost\n+        // requred to spend it.\n+        CAmount cost_of_change = effective_fee.GetFee(148+34); // 148 bytes for the input, 34 bytes for making the output",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123094567",
      "id" : 123094567,
      "in_reply_to_id" : 123094400,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 231,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 45266472,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123094567",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "@instagibbs: In fact, BnB is designed to only work when creating a transaction without a change output. If we were creating a change in the first place, the extensive search pattern would be unnecessarily wasteful.",
      "created_at" : "2017-06-20T21:04:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309891073",
      "id" : 309891073,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T21:04:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309891073",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/4060799?v=3",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "body" : "To append onto my previous comments, any effective value match attempt should account for the fees just obtained by `SelectCoins`. Currently it completely ignores the newly-obtained fees, keeping the previous loop's value, and then asks if `nFeeRet >= nFeeRequired` to break from the loop(which currently is 0 on the first go-around).",
      "created_at" : "2017-06-20T21:15:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309893923",
      "id" : 309893923,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-20T21:15:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309893923",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123122385"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123122385"
         }
      },
      "author_association" : "MEMBER",
      "body" : "For now I think it is fine to use the current feerate.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-06-20T23:33:02Z",
      "diff_hunk" : "@@ -2252,86 +2233,25 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n             continue;\n \n         int i = output.i;\n-\n-        CInputCoin coin = CInputCoin(pcoin, i);\n-\n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n-        }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n-        {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n-\n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n-\n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n-\n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n-            }\n-\n-        if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n-            LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n-            for (unsigned int i = 0; i < vValue.size(); i++) {\n-                if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n-                }\n-            }\n-            LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));\n-        }\n+        CInputCoin coin(pcoin, i);\n+        coin.txout.nValue -= (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+        vValue.push_back(coin);\n+    }\n+    if (!use_only_knapsack) {\n+        // Calculate cost of change\n+        // TODO: In the future, we should use the change output actually made for the transaction and calculate the cost\n+        // requred to spend it.\n+        CAmount cost_of_change = effective_fee.GetFee(148+34); // 148 bytes for the input, 34 bytes for making the output",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123122385",
      "id" : 123122385,
      "in_reply_to_id" : 123094400,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 231,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 45295730,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123122385",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "I have made the BnB selector to be only run on the first pass of the coin selection loop. It is now set so that effective value is only used for the BnB selector and not the knapsack one. I have also added the negative effective value check and test just as a belt-and-suspenders thing. I also made BnB use Largest First Exploration instead of Random Exploration.",
      "created_at" : "2017-06-21T00:32:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-309929166",
      "id" : 309929166,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-21T00:32:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/309929166",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123372860"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123372860"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Here's a unexpected behavior in my algorithm: if there is a number of input combinations whose `value_ret` all exceed the target_value when `tries == 0` is passed, tries can go into the negative.\r\n\r\nThe tries check should be moved to the top of the checks.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-06-21T21:38:01Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (tries <= 0) { // Too many tries, exit",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123372860",
      "id" : 123372860,
      "original_commit_id" : "1f4b03a33f8a747ce61f16104c5b6c0163acb704",
      "original_position" : 58,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 45570354,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123372860",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123385119"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123385119"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-06-21T22:49:17Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (tries <= 0) { // Too many tries, exit",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123385119",
      "id" : 123385119,
      "in_reply_to_id" : 123372860,
      "original_commit_id" : "1f4b03a33f8a747ce61f16104c5b6c0163acb704",
      "original_position" : 58,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 45583440,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123385119",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "Perhaps generically, we should never create change if the amount is less than the cost of creating + spending it (regardless of whether BnB was used to find the inputs or not)?",
      "created_at" : "2017-06-21T23:26:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-310232689",
      "id" : 310232689,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-21T23:26:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310232689",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@sipa one question is if we should allow the wallet to consider consolidation-level prices for that change. Perhaps the user is in a hurry now, but would consider spending that change at a much slower pace.\r\n\r\nMaybe for a first pass only consider the selected feerate, then Future Work allow a parameter which has more aggressive change protection given longer timescales.",
      "created_at" : "2017-06-22T14:05:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-310390449",
      "id" : 310390449,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-22T14:05:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310390449",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "@instagibbs Yes, I agree; we should use long-eatimates for the spend part of change rather than the actual feerate the user is willing to pay now. Perhaps we can make it more conservative without doing that by using a factor 2 or 3 reduction?",
      "created_at" : "2017-06-22T16:26:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-310431952",
      "id" : 310431952,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-22T16:26:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310431952",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123592418"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123592418"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@xekyo we should assume that it would be terrible unless someone can show that it will not cause another massive UTXO bloat event... but thats offtopic here, as I don't think anyone has this concern with exact matches.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-06-22T18:45:22Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123592418",
      "id" : 123592418,
      "in_reply_to_id" : 123062378,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 45811882,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123592418",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123594171"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123594171"
         }
      },
      "author_association" : "MEMBER",
      "body" : "not correct for segwit.    If this code ends up being changed to follow pieter's suggestion of dividing the rate by two or three it should be bounded by the min relay fee. (I'm not super fond of that suggestion).",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-06-22T18:53:42Z",
      "diff_hunk" : "@@ -2179,159 +2210,69 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n-{\n-    std::vector<char> vfIncluded;\n-\n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n-\n-    FastRandomContext insecure_rand;\n-\n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount& fee_ret, const CFeeRate effective_fee, bool only_knapsack) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n     std::vector<CInputCoin> vValue;\n-    CAmount nTotalLower = 0;\n-\n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n-\n-    for (const COutput &output : vCoins)\n-    {\n-        if (!output.fSpendable)\n-            continue;\n-\n-        const CWalletTx *pcoin = output.tx;\n-\n-        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n-            continue;\n+    if (!only_knapsack) {\n+        // Calculate cost of change\n+        // TODO: In the future, we should use the change output actually made for the transaction and calculate the cost\n+        // requred to spend it.\n+        CAmount cost_of_change = effective_fee.GetFee(148+34); // 148 bytes for the input, 34 bytes for making the output",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123594171",
      "id" : 123594171,
      "original_commit_id" : "12aa63abf1f8b4a2740b24055ca483c42a08f27a",
      "original_position" : 154,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 45814017,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123594171",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "@sipa @achow101  it would be very very easy in the current PR to ask for another estimate for the change, I think ~two loc addition, and minor addition to the selectcoins arguments to pass down a second fee.  I think this would be much more desirable than a fixed division.  Future work could do things like make that second confirmation target configurable. ",
      "created_at" : "2017-06-22T18:57:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-310471041",
      "id" : 310471041,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-22T18:57:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310471041",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123598122"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123598122"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Using nFeeRet to signal BNB usage is ugly.  I think you shouldn't pass in nFeeRet at all, but have some explicit signal (e.g. boolean return) for BNB usage and if its set; after select coins set nFeeRet to nChange and use the same signal to bypass this branch.\r\n\r\nI also think this condition is slightly incorrect but benign in the current code, lets say our configured feerate were zero: now BNB could find a solution and leave nFeeRet==0.  (though nChange would currently be zero too, so it would be harmless but seems to me like the kind of thing to be brittle in future changes)",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-06-22T19:11:00Z",
      "diff_hunk" : "@@ -2562,7 +2562,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 }\n \n                 const CAmount nChange = nValueIn - nValueToSelect;\n-                if (nChange > 0)\n+                if (nChange > 0 && (!first_pass || nFeeRet == 0)) // nFeeRet is only 0 on the first pass if BnB was not used. ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r123598122",
      "id" : 123598122,
      "original_commit_id" : "12aa63abf1f8b4a2740b24055ca483c42a08f27a",
      "original_position" : 5,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 45818469,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/123598122",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "Travis failure seems to be unrelated",
      "created_at" : "2017-06-23T17:32:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-310726989",
      "id" : 310726989,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-06-23T17:32:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310726989",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125161070"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125161070"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The utxos with negative effective values are filtered anyway in `wallet/wallet.cpp`, which is the only place (except for tests) from where `SelectCoinsBnB` is called.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-07-01T11:50:14Z",
      "diff_hunk" : "@@ -0,0 +1,271 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, FastRandomContext* rand)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125161070",
      "id" : 125161070,
      "in_reply_to_id" : 123062378,
      "original_commit_id" : "0246f1f79fdcc4f99fa83d2c0c9fe58291abd34a",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 47529103,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125161070",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "body" : "just fyi, I have used your code as a reference for this code\r\n\r\nhttps://github.com/bitcoinjs/coinselect/pull/13",
      "created_at" : "2017-07-02T02:46:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312467396",
      "id" : 312467396,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-02T02:46:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312467396",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/104945?v=3",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "I have to say, I don't understand the target size; maybe there is a bug there.\r\n\r\nIn wallet.cpp, in `CWallet::CreateTransaction`, you create `nValue`, which seems to be the sum of all the outputs. Because the BnB is used only at the first pass, `nFeeRet` is 0 and `nValueToSelect` is just the sum of all the outputs.\r\n\r\nThis is then used as the exact target in the BnB algorithm.\r\n\r\nHowever, you should add the cost of the outputs + the small cost of the tx overhead into the target (done here for the simple case on 1 output - https://github.com/Xekyo/CoinSelectionSimulator/blob/master/src/main/scala/one/murch/bitcoin/coinselection/StackEfficientTailRecursiveBnB.scala#L28 )\r\n\r\nMaybe it's done somewhere, but I don't see it.",
      "created_at" : "2017-07-02T20:14:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312514358",
      "id" : 312514358,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-02T20:14:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312514358",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/104945?v=3",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "@runn1ng BnB uses effective values for the inputs so the fee is accounted for when coins are selected. The effective values are calculated in `SelectCoinsMinConf` ",
      "created_at" : "2017-07-02T20:22:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312514781",
      "id" : 312514781,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-02T21:25:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312514781",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "That eff. value accounts for the *inputs* of the new transaction, but not for the *outputs* (plus the overhead of the tx itself, but that is only about 10 bytes).\r\n\r\nIn `SelectCoinsMinConf`, you already have the target, which does not account for that.",
      "created_at" : "2017-07-02T20:27:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312515053",
      "id" : 312515053,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-02T20:29:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312515053",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/104945?v=3",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "Ah, yes. That is a bug. Thanks for finding that!",
      "created_at" : "2017-07-02T21:26:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312517972",
      "id" : 312517972,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-02T21:26:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312517972",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3782274?v=3",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125308899"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125308899"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it may be better to directly check on serialized size of an output based on that pubkey",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-07-03T15:00:44Z",
      "diff_hunk" : "@@ -2517,6 +2532,9 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                             fFirst = false;\n                             txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n                         }\n+                    } else if (first_pass){\n+                        // On the first pass BnB selector, include the fee cost for outputs\n+                        output_fees +=  nFeeRateNeeded.GetFee(recipient.scriptPubKey.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125308899",
      "id" : 125308899,
      "original_commit_id" : "407133d206446eba42d9cc6350ba6af90c40d551",
      "original_position" : 29,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 47686510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125308899",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125310974"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125310974"
         }
      },
      "author_association" : "MEMBER",
      "body" : "just set it when declaring the variable two lines above and make it const",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-07-03T15:09:58Z",
      "diff_hunk" : "@@ -2179,159 +2210,73 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n-{\n-    std::vector<char> vfIncluded;\n-\n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n-\n-    FastRandomContext insecure_rand;\n-\n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount& fee_ret, const CFeeRate effective_fee, bool& used_bnb, bool only_knapsack, int change_size) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n     std::vector<CInputCoin> vValue;\n-    CAmount nTotalLower = 0;\n-\n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n-\n-    for (const COutput &output : vCoins)\n-    {\n-        if (!output.fSpendable)\n-            continue;\n-\n-        const CWalletTx *pcoin = output.tx;\n-\n-        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n-            continue;\n+    if (!only_knapsack) {\n+        // Get the fee rate to use for the change fee rate\n+        CFeeRate change_feerate;\n+        FeeCalculation feeCalc;\n+        change_feerate = GetMinimumFeeRate(1008, ::mempool, ::feeEstimator, &feeCalc);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125310974",
      "id" : 125310974,
      "original_commit_id" : "407133d206446eba42d9cc6350ba6af90c40d551",
      "original_position" : 154,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 47686510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125310974",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125312450"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125312450"
         }
      },
      "author_association" : "MEMBER",
      "body" : "right now it only uses one or the other, so `!only_knapsack` means `used_bnb`. I assume this interface is future-looking to where we may try multiple strategies?",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-07-03T15:16:39Z",
      "diff_hunk" : "@@ -2179,159 +2210,73 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n-{\n-    std::vector<char> vfIncluded;\n-\n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n-\n-    FastRandomContext insecure_rand;\n-\n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount& fee_ret, const CFeeRate effective_fee, bool& used_bnb, bool only_knapsack, int change_size) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125312450",
      "id" : 125312450,
      "original_commit_id" : "407133d206446eba42d9cc6350ba6af90c40d551",
      "original_position" : 129,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 47686510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125312450",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125313640"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125313640"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Since we're moving it already, there's no reason to not just move this block outside the loop, right? See: https://github.com/bitcoin/bitcoin/pull/10360/files#diff-b2bb174788c7409b671c46ccc86034bdR2476",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-07-03T15:22:17Z",
      "diff_hunk" : "@@ -2556,7 +2503,22 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 CAmount nValueToSelect = nValue;\n                 if (nSubtractFeeFromAmount == 0)\n                     nValueToSelect += nFeeRet;\n+\n+                // Get the fee rate to use effective values in coin selection",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125313640",
      "id" : 125313640,
      "original_commit_id" : "407133d206446eba42d9cc6350ba6af90c40d551",
      "original_position" : 326,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 47686510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125313640",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125316002"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125316002"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this should be `used_bnb`? Kind of unclear what the difference is currently.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-07-03T15:33:39Z",
      "diff_hunk" : "@@ -2587,18 +2552,33 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     }\n                     txNew.vout.push_back(txout);\n                 }\n+                if (first_pass) {\n+                    nValueToSelect += output_fees;\n+                }\n \n                 // Choose coins to use\n                 CAmount nValueIn = 0;\n                 setCoins.clear();\n-                if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coinControl))\n+                bool used_bnb = false;\n+                if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, nFeeRet, nFeeRateNeeded, used_bnb, coinControl, !first_pass))\n                 {\n-                    strFailReason = _(\"Insufficient funds\");\n-                    return false;\n+                    // On the first pass and SelectCoins fails, that means the BnB selector failed to find\n+                    // a suitable set. In this case, only run the knapsack selector for all further iterations\n+                    if (first_pass) {\n+                        first_pass = false;\n+                        continue;\n+                    }\n+                    else {\n+                        strFailReason = _(\"Insufficient funds\");\n+                        return false;\n+                    }\n+                }\n+                if (first_pass) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125316002",
      "id" : 125316002,
      "original_commit_id" : "407133d206446eba42d9cc6350ba6af90c40d551",
      "original_position" : 382,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 47686510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125316002",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125324281"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125324281"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Add a comment saying this triggers BnB to be the only type tried when true",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-07-03T16:20:38Z",
      "diff_hunk" : "@@ -2544,6 +2490,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n             AvailableCoins(vAvailableCoins, true, coinControl);\n \n             nFeeRet = 0;\n+            bool first_pass = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125324281",
      "id" : 125324281,
      "original_commit_id" : "407133d206446eba42d9cc6350ba6af90c40d551",
      "original_position" : 317,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 47686510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125324281",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125332737"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125332737"
         }
      },
      "author_association" : "MEMBER",
      "body" : "if we're going to change it later to something without a default/dynamic value, maybe just get rid of the default arg and pass it each time.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-07-03T17:24:48Z",
      "diff_hunk" : "@@ -837,7 +850,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * completion the coin set and corresponding actual target value is\n      * assembled\n      */\n-    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, uint64_t nMaxAncestors, std::vector<COutput> vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const;\n+     // TODO: Change the hard coded change_size when we aren't only using P2PKH change outputs",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125332737",
      "id" : 125332737,
      "original_commit_id" : "407133d206446eba42d9cc6350ba6af90c40d551",
      "original_position" : 57,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 47686510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125332737",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125332843"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125332843"
         }
      },
      "author_association" : "MEMBER",
      "body" : "perhaps note it doesn't have the maxtxfee check inside it, making it slightly asymmetrical to the total fee one.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-07-03T17:25:34Z",
      "diff_hunk" : "@@ -962,11 +976,23 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      */\n     static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc = nullptr, bool ignoreGlobalPayTxFee = false);\n     /**\n+     * Estimate the minimum fee rate considering user set parameters\n+     * and the required fee",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125332843",
      "id" : 125332843,
      "original_commit_id" : "407133d206446eba42d9cc6350ba6af90c40d551",
      "original_position" : 67,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 47686510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125332843",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125336958"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125336958"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The idea behind this was to have BnB be just strictly on top of the current behavior, and separating it like this makes that possible. The first time through the loop uses BnB, but then every time after that uses only the current selector. The loop behavior also stays the same since `nFeeRet` will remain 0 if the BnB fails.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-07-03T17:58:29Z",
      "diff_hunk" : "@@ -2179,159 +2210,73 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n-{\n-    std::vector<char> vfIncluded;\n-\n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n-\n-    FastRandomContext insecure_rand;\n-\n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount& fee_ret, const CFeeRate effective_fee, bool& used_bnb, bool only_knapsack, int change_size) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r125336958",
      "id" : 125336958,
      "in_reply_to_id" : 125312450,
      "original_commit_id" : "407133d206446eba42d9cc6350ba6af90c40d551",
      "original_position" : 129,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 47717275,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/125336958",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "@achow101 for some reason, when I do simulations either on @Xekyo set (in scala) or on bitcoinjs randomly generated data (with the algo rewritten into javascript), the total fees are actually *lower* when I make the target lower (that is, when I do not include the output cost in the target). So maybe tightening the target rejects more transactions and then the fallbacks somehow make better results.\r\n\r\nI will investigate more when I have the time and write results here https://github.com/Xekyo/CoinSelectionSimulator/issues/5",
      "created_at" : "2017-07-03T22:22:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-312743097",
      "id" : 312743097,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-03T22:22:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312743097",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/104945?v=3",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "@runn1ng if you wouldn't mind, I'd like to know what the difference in rate of change creation for each of those experiments as well.",
      "created_at" : "2017-07-06T17:40:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-313467518",
      "id" : 313467518,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-06T17:40:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313467518",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "> [Ã¢ÂÂ¦]the total fees are actually lower when I make the target lower (that is, when I do not include the output cost in the target).\r\n\r\n@runn1ng: Um wait. \"Target\" is the amount to be selected. We are talking about the \"cost of change\" parameter that gives the leniency window for the exact match, right? Also, do you mean \"input cost\" instead of \"output cost\"?\r\n\r\nIt would be lovely if you could post your experiment's results somewhere, so we all have the same dataset to discuss.",
      "created_at" : "2017-07-06T20:21:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-313508338",
      "id" : 313508338,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-06T20:22:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313508338",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/4060799?v=3",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "body" : "@Xekyo The problem with your experiment is that it's non-deterministic... but maybe I could put there some pre-set random seed",
      "created_at" : "2017-07-11T16:18:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-314496532",
      "id" : 314496532,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-11T16:18:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/314496532",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/104945?v=3",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "edit: ignore the graphs, see comment below\r\n\r\n~~~I am not sure if I should discuss the experiments here, or on murch's repo PRs :)~~~\r\n\r\n~~~Anyway. I tried changing the cost of change on your scala code, as I wrote here - https://github.com/Xekyo/CoinSelectionSimulator/pull/8 . Now I tried values from 0 to 100 as percent, and this is the result (note that left axis doesn't start at 0)~~~\r\n\r\n![chart](https://user-images.githubusercontent.com/104945/28156350-aae80dca-67b2-11e7-810e-61eb70867996.png)\r\n\r\n[google spreadsheet link](https://docs.google.com/spreadsheets/d/1ePfoi08uV_QU48Q68aAu6apB-BG9DwM52JRgxNgSWPk/edit?usp=sharing)\r\n\r\n~~~x axis is how much percent of the current cost of change is used; y axis is total cost on the big honeypot data set.~~~\r\n\r\n~~~On the small random test cases there is no difference (what matters more there is the fallback, but that's for another experiment).~~~\r\n\r\n~~~Note that there was a [typo](https://github.com/Xekyo/CoinSelectionSimulator/pull/4/files) in the original experiments for the paper, which makes the cost of change \"factor\" 83%~~~",
      "created_at" : "2017-07-13T08:13:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315005597",
      "id" : 315005597,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-17T22:44:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315005597",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "edit: ignore the graphs, see comment below\r\n\r\n~~~There is still the danger of overfitting to this one case though~~~\r\n\r\n~~~If you I try the same at the bitcoinjs example - [defined here](https://github.com/bitcoinjs/coinselect/blob/master/stats/index.js#L9) - small random examples with relatively few utxos - the graph looks completely different, and very dependent on what is a \"backup plan\" in the case of not found match~~~\r\n\r\n![chart 1](https://user-images.githubusercontent.com/104945/28161722-d7710484-67c4-11e7-84cd-09f86393622c.png)\r\n\r\n[google sheet](https://docs.google.com/spreadsheets/d/1zUen5aiKfDwRIRkOg-QJgAE0uEn-_OsrSUQwJm2xWDs/edit?usp=sharing)\r\n\r\n~~~\"rand\" is random, \"min\" is sorting the utxos from the biggest to the lowest and starting from the biggest. (Both are total cost.) I am not sure what \"min\" strategy does on the big data.~~~\r\n\r\n~~~(Just for interest, when I tried 100-200%, the graph goes up again, but not that quickly)~~~",
      "created_at" : "2017-07-13T10:18:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315036928",
      "id" : 315036928,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-17T22:45:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315036928",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "edit: ignore the graphs, see comment below\r\n\r\n~~~When I added bnb+min to the moneypot example, I got this result (x is still percentage of money cost)~~~\r\n\r\n![chart 2](https://user-images.githubusercontent.com/104945/28207255-47c33440-6889-11e7-9e50-dcfcc444c81e.png)\r\n\r\n~~~Again, it's always better to take the \"minimal\" strategy (that is, to sort utxos by value size descending, and then take from the start until it's enough).~~~\r\n\r\n~~~If you want to replicate this experiment - note that it takes, for reasons I don't understand, terribly long time, and you will have to parallelize the simulation - luckily, that's trivial with scala paralel collections - see the commits at https://github.com/runn1ng/CoinSelectionSimulator/tree/exp_multi~~~\r\n\r\n~~~I would like to hear @Xekyo opinions :)~~~\r\n\r\n~~~Also I would like to try this PR strategy, that is, to take the current core strategy as a backup.... but that is too complicated (especially in the javascript code), so I won't do it.~~~",
      "created_at" : "2017-07-14T09:44:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315318545",
      "id" : 315318545,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-17T22:46:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315318545",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "@runn1ng would you be able to try the strategy with Core's current selector as fallback? The easiest way to do that would be to add/modify the test cases for coin selection.",
      "created_at" : "2017-07-14T19:53:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315452075",
      "id" : 315452075,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-14T19:53:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315452075",
      "user" : {
         "avatar_url" : "https://avatars7.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "body" : "@runn1ng: re random data: I'd surmise that BnB doesn't perform well on small datasets as there are too few possible combinations. That could easily cause the fallback algorithm to dominate.\r\n\r\nre moneypot:\r\nWhat I do find confusing is that your total cost is so much higher than my result with Branch and Bound + Single Random Draw of 58,940,772.30. Were you still running with fixed fees of 10000 satoshi/kB?\r\n\r\nI haven't comprehensively tested all possible fallback algorithms, it is possible that Largest First selection as a fallback to BnB is more efficient as it doesn't take away as many small utxo that can be used to create combinations.\r\n\r\nDo I understand correctly that you calculated \"cost of change\" and then took a percentage of that, or is this percentage only on the cost of the input? If you did the former, it appears that using just the cost of an additional output as \"cost of change\" leads to a minimum, considering that 34 bytes is 18.7% of what I proposed as \"cost of change\" with output+input.",
      "created_at" : "2017-07-14T21:52:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315476847",
      "id" : 315476847,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-14T21:53:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315476847",
      "user" : {
         "avatar_url" : "https://avatars4.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "body" : "> What I do find confusing is that your total cost is so much higher than my result with Branch and Bound + Single Random Draw of 58,940,772.30. Were you still running with fixed fees of 10000 satoshi/kB?\r\n\r\nThat is weird indeed.\r\n\r\nI am running code from your repo. To be sure I reverted all my local changes and I still get 72506973.\r\n\r\nWhen I made the correction here https://github.com/Xekyo/CoinSelectionSimulator/pull/9 , I get total cost 70858076\r\n\r\nI use only `StackEfficientTailRecursiveBnB`, should I try the other BnBs? edit: well, they get stack overflow, so I won't. :D ",
      "created_at" : "2017-07-15T03:29:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315506256",
      "id" : 315506256,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-15T03:36:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315506256",
      "user" : {
         "avatar_url" : "https://avatars6.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "I am running the code through `sbt run` in the main directory. I look just at the `total cost` in the resulting csv.",
      "created_at" : "2017-07-15T03:31:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315506306",
      "id" : 315506306,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-15T03:33:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315506306",
      "user" : {
         "avatar_url" : "https://avatars6.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "I get totally different numbers than in your paper with the other scenarios too. The numbers don't correspond to neither of the three tables, unfortunately.\r\n\r\nedit: oooh, that's because I am running \"MoneyPot After LF\", which was the default scenario, but it's actually with additional UTXOs from a previous run. The actual scenario from the paper (the first one) is TestCaseMoneyPotEmpty, right.",
      "created_at" : "2017-07-15T03:45:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315506901",
      "id" : 315506901,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-15T03:57:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315506901",
      "user" : {
         "avatar_url" : "https://avatars6.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "Yes correct. The Moneypot after LF, is running the MoneyPot scenario starting with the resulting UTXO pool of running it with Largest First selection before.",
      "created_at" : "2017-07-15T04:34:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315509097",
      "id" : 315509097,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-15T04:34:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315509097",
      "user" : {
         "avatar_url" : "https://avatars4.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "body" : "I found out that the [two](https://github.com/Xekyo/CoinSelectionSimulator) [repos](https://github.com/bitcoinjs/coinselect) for coinselect simulation returned different results for the same strategy, so I painstakingly went through both of them and found where they differ... and put tons of of PRs to both, so they now both return the same results with the same fees + setup\r\n\r\nThe differences in simulations were:\r\n* how they deal with insufficient funds (and how they detect it)\r\n* what is minimum change\r\n* what are the sizes of \"defaut\" input/output\r\n* some small bugs\r\n\r\n...and those added to significant differences. Anyway, when I fixed all the issues, those are the results/graphs I get:\r\n\r\nthis is for the moneypot scenario, with the fees 10 sat/bitcoin\r\n\r\n![chart 3](https://user-images.githubusercontent.com/104945/28293394-434c8272-6b54-11e7-86c9-1a1b9b36afee.png)\r\n[google sheet](https://docs.google.com/spreadsheets/d/1ePfoi08uV_QU48Q68aAu6apB-BG9DwM52JRgxNgSWPk/edit?usp=sharing)\r\n\r\nthis is for the moneypot scenario, when I increase the fee to 200 sat/bitcoin (but I left the values, so more utxos become unspendable)\r\n\r\n![chart 6](https://user-images.githubusercontent.com/104945/28293860-a802573a-6b56-11e7-9ee5-7b3f6bbe18fd.png)\r\n[google sheet](https://docs.google.com/spreadsheets/d/1qtjK_RJ7Zj3LduJB9_q1gf8LnbGpgp4gA_Sy_1UYLUo/edit?usp=sharing)\r\n\r\nIn both, rand is slightly better. I am not sure what happened, if it's because the scenario is different (without the large UTXO set) or because of the subtle differences in benchmarking. The shape is similar though.\r\n\r\nThis is the scenario of small randomly generated wallets\r\n\r\n![chart 5](https://user-images.githubusercontent.com/104945/28293569-0b1c9ba2-6b55-11e7-9201-a9f3c4884b44.png)\r\n[google sheet](https://docs.google.com/spreadsheets/d/1zUen5aiKfDwRIRkOg-QJgAE0uEn-_OsrSUQwJm2xWDs/edit?usp=sharing)\r\n\r\nBnB+LF performs better, optimum about 50% cost of change.\r\n\r\nSo, different strategies/parameters are better at different scenarios. Again, there is danger of overfitting on one scenario - plus there might be some more subtle bugs in the benchmark code... in my wallet code, I will probably just use BnB+LF with 50% of cost and call it a day :)\r\n\r\nI haven't shown this in graphs, but having BnB is always better than not having it. :)\r\n\r\nIf you want to repeat the tests, my forks of the repos are here [1](https://github.com/runn1ng/CoinSelectionSimulator/tree/final_run) [2](https://github.com/runn1ng/coinselect/tree/final_run)",
      "created_at" : "2017-07-17T23:27:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315914004",
      "id" : 315914004,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-17T23:27:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315914004",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "@Xekyo \r\n\r\n> Do I understand correctly that you calculated \"cost of change\" and then took a percentage of that, or is this percentage only on the cost of the input? If you did the former, it appears that using just the cost of an additional output as \"cost of change\" leads to a minimum, considering that 34 bytes is 18.7% of what I proposed as \"cost of change\" with output+input.\r\n\r\nHm, that doesn't seem to be the case, the minimum is not 18%, but 30% to 50% on these two scenarios.",
      "created_at" : "2017-07-17T23:29:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315914248",
      "id" : 315914248,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-17T23:29:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315914248",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "@runn1ng is there a plausible explanation why not accounting for the full cost of the change is cheaper overall?",
      "created_at" : "2017-07-17T23:50:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315917437",
      "id" : 315917437,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-17T23:50:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315917437",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "@achow101 \r\n\r\n> @runn1ng would you be able to try the strategy with Core's current selector as fallback? The easiest way to do that would be to add/modify the test cases for coin selection.\r\n\r\nHm, I already spent too much time on this... :/ I will see if I have time to look into the bitcoin coin selection tests and how to add benchmarks there, but not promising anything.",
      "created_at" : "2017-07-18T00:00:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315918964",
      "id" : 315918964,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-18T00:00:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315918964",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "@instagibbs \r\n\r\nI think - and that's a speculation - that it's because the target is \"tighter\", so the BnB will reject more \"lose\" matches and will continue searching until it finds better match. So less fee is spent then, even when some matches are rejected that didn't have to be (and those spend more on fees).\r\n\r\nBtw. An interesting thing I just noticed - in the \"small random\" example, there is not that many BnB matches in the first place! Around 30 (out of 10.000 transactions). It still has an effect on the result...",
      "created_at" : "2017-07-18T00:14:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-315921036",
      "id" : 315921036,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-07-18T00:15:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/315921036",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128056631"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128056631"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This line never fires.\r\n\r\nIt never happens, that an utxo is at the same time in an exclusion branch (which is what `.second` does) and is also selected (what `.first` does). Which makes sense; you never at the same time select and not select an utxo :)\r\n\r\nWith all my simulations, this line never seems to fire (when I rewrote this to JS).\r\n\r\nSo the other line after `if` can also be deleted.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-07-18T18:25:12Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+        \n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128056631",
      "id" : 128056631,
      "original_commit_id" : "71e9d683be87ee81e90bb0aac6c52c6705fb4266",
      "original_position" : 89,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 50700769,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128056631",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128058314"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128058314"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I also think that `.second` is not needed at all; all the information necessary is in the `first` and depth; the only situation where `.first != !(.second)` is after we backtrack here, but the information in `.second` is useless anyway (since we will change it anyway before we backtrack to it again).",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-07-18T18:31:50Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+        \n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128058314",
      "id" : 128058314,
      "in_reply_to_id" : 128056631,
      "original_commit_id" : "71e9d683be87ee81e90bb0aac6c52c6705fb4266",
      "original_position" : 89,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 50702606,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128058314",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128059347"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128059347"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Right. That appears to be a relic of when this randomly selected which branch to try first before I changed it to always try including first.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-07-18T18:36:18Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+        \n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128059347",
      "id" : 128059347,
      "in_reply_to_id" : 128056631,
      "original_commit_id" : "71e9d683be87ee81e90bb0aac6c52c6705fb4266",
      "original_position" : 89,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 50703778,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128059347",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128078130"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128078130"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is never true here. `done` is never true when `backtrack` is true. ([Istanbul](https://istanbul.js.org/) caught that :))",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-07-18T19:53:40Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+        \n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;\n+                }\n+                selection.at(depth).first = false;\n+                selection.at(depth).second = false;\n+                remaining += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    return false;\n+                }\n+            }\n+            \n+            if (!done) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128078130",
      "id" : 128078130,
      "original_commit_id" : "71e9d683be87ee81e90bb0aac6c52c6705fb4266",
      "original_position" : 103,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 50724096,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128078130",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128078564"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128078564"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I mean `done` is never true and this block always happens",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-07-18T19:55:34Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+        \n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;\n+                }\n+                selection.at(depth).first = false;\n+                selection.at(depth).second = false;\n+                remaining += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    return false;\n+                }\n+            }\n+            \n+            if (!done) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128078564",
      "id" : 128078564,
      "in_reply_to_id" : 128078130,
      "original_commit_id" : "71e9d683be87ee81e90bb0aac6c52c6705fb4266",
      "original_position" : 103,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 50724559,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128078564",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128087609"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128087609"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This block doesn't happen when `backtrack` is false and `done` is true which happens when a solution is found.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-07-18T20:34:02Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+        \n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;\n+                }\n+                selection.at(depth).first = false;\n+                selection.at(depth).second = false;\n+                remaining += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    return false;\n+                }\n+            }\n+            \n+            if (!done) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128087609",
      "id" : 128087609,
      "in_reply_to_id" : 128078130,
      "original_commit_id" : "71e9d683be87ee81e90bb0aac6c52c6705fb4266",
      "original_position" : 103,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 50734851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128087609",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128088235"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128088235"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in that case, the `while` cycle terminates before that",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-07-18T20:36:44Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+        \n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;\n+                }\n+                selection.at(depth).first = false;\n+                selection.at(depth).second = false;\n+                remaining += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    return false;\n+                }\n+            }\n+            \n+            if (!done) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128088235",
      "id" : 128088235,
      "in_reply_to_id" : 128078130,
      "original_commit_id" : "71e9d683be87ee81e90bb0aac6c52c6705fb4266",
      "original_position" : 103,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 50735619,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128088235",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128088778"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128088778"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In the `if` at the start of the `while` cycle, either `backtrack` or `done` is set, never both. We got here only when `backtrack == true`, so `done` cannot be true.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-07-18T20:38:58Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+        \n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;\n+                }\n+                selection.at(depth).first = false;\n+                selection.at(depth).second = false;\n+                remaining += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    return false;\n+                }\n+            }\n+            \n+            if (!done) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r128088778",
      "id" : 128088778,
      "in_reply_to_id" : 128078130,
      "original_commit_id" : "71e9d683be87ee81e90bb0aac6c52c6705fb4266",
      "original_position" : 103,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 50736254,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/128088778",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "body" : "@achow101 frankly, the \"old\" (current) core code seems to complex to me, because it introduces state, I don't understand it enough to make the simulation with the current core code as a backup",
      "created_at" : "2017-08-10T12:11:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-321533571",
      "id" : 321533571,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-08-10T12:11:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/321533571",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "body" : "I have squashed a few commits and rebased this. I'll work on this some more after the 0.15.0 release.",
      "created_at" : "2017-08-17T23:00:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-323216732",
      "id" : 323216732,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-08-17T23:00:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/323216732",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I have squashed this even more (by getting a diff and re-committing) and hopefully made each commit a more logical chunk of code.\r\n\r\nI have also changed this to use the discard fee rate for the change fee rate. The cost of change is also now calculated with the fee rate for making an output being the effective fee rate (fee rate being used) and the fee rate for spending the change being the discard fee rate.\r\n\r\nThe original commits are available in a separate branch here: https://github.com/achow101/bitcoin/tree/bnb-coin-select-orig (just in case I screwed something up).",
      "created_at" : "2017-09-06T21:28:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-327617533",
      "id" : 327617533,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-09-06T21:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/327617533",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'm not sure what the travis failure here was so I restarted that build.",
      "created_at" : "2017-09-18T15:45:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-330265119",
      "id" : 330265119,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-09-18T15:45:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/330265119",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@achow101 Travis failure is due to some weird behavior of travis to merge in latest master, but keep the yaml or config from the past (maybe when the pull was created).\r\n\r\nYou might be able to fix it by force pushing the last commit (`EDITOR=true git commit --amend && git push origin bnb-coin -f`) or just rebase on master. ",
      "created_at" : "2017-09-18T19:22:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-330329194",
      "id" : 330329194,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-09-18T19:23:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/330329194",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139522490"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139522490"
         }
      },
      "author_association" : "MEMBER",
      "body" : "just `empty()` seems more straight forward",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-18T19:51:55Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139522490",
      "id" : 139522490,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 31,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139522490",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139522887"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139522887"
         }
      },
      "author_association" : "MEMBER",
      "body" : "define \"remaining\", or drop the comment",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-18T19:53:48Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate remaining",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139522887",
      "id" : 139522887,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 45,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139522887",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139522984"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139522984"
         }
      },
      "author_association" : "MEMBER",
      "body" : "to find what?",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-18T19:54:15Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+\n+    // Depth first search to find",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139522984",
      "id" : 139522984,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 51,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139522984",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139523092"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139523092"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`remaining_tries`?",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-18T19:54:47Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139523092",
      "id" : 139523092,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 36,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139523092",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139523467"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139523467"
         }
      },
      "author_association" : "MEMBER",
      "body" : "define what second branch means?",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-18T19:56:24Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139523467",
      "id" : 139523467,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 37,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139523467",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139530044"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139530044"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ACK on @runn1ng 's comment. Impossible to be \"done\" and require backtracking.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-18T20:23:32Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+        \n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;\n+                }\n+                selection.at(depth).first = false;\n+                selection.at(depth).second = false;\n+                remaining += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    return false;\n+                }\n+            }\n+            \n+            if (!done) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139530044",
      "id" : 139530044,
      "in_reply_to_id" : 128078130,
      "original_commit_id" : "71e9d683be87ee81e90bb0aac6c52c6705fb4266",
      "original_position" : 103,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139530044",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139532186"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139532186"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`nOut` or something better please",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-18T20:32:23Z",
      "diff_hunk" : "@@ -453,6 +453,9 @@ class CWalletTx : public CMerkleTx\n     CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const;\n     CAmount GetChange() const;\n \n+    // Get the marginal bytes if spending the specified output from this transaction\n+    int GetSpendSize(unsigned int i) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139532186",
      "id" : 139532186,
      "original_commit_id" : "feeb3cab3ec78f33deedf6b8cd7aae32a0c9424b",
      "original_position" : 5,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139532186",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139532452"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139532452"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Some asymmetry now with SC and SCMC, the former having one \"change size\" parameter, the other two. `change_output_size` to match.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-18T20:33:29Z",
      "diff_hunk" : "@@ -2254,164 +2293,73 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n-{\n-    std::vector<char> vfIncluded;\n-\n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n-\n-    FastRandomContext insecure_rand;\n-\n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors,\n+    std::vector<COutput> vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount& fee_ret, const CFeeRate effective_fee,\n+    bool use_bnb, int change_output_size, int change_spend_size) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n     std::vector<CInputCoin> vValue;\n-    CAmount nTotalLower = 0;\n-\n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n+    if (use_bnb) {\n \n-    for (const COutput &output : vCoins)\n-    {\n-        if (!output.fSpendable)\n-            continue;\n+        // Calculate cost of change\n+        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(change_spend_size) + effective_fee.GetFee(change_output_size);\n \n-        const CWalletTx *pcoin = output.tx;\n+        // Filter by the min conf specs and add to vValue and calculate effective value\n+        std::vector<CAmount> fee_vec; // To keep track of the fees for each input\n+        for (const COutput &output : vCoins)\n+        {\n+            if (!output.fSpendable)\n+                continue;\n \n-        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n-            continue;\n+            const CWalletTx *pcoin = output.tx;\n \n-        if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n-            continue;\n-\n-        int i = output.i;\n+            if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n+                continue;\n \n-        CInputCoin coin = CInputCoin(pcoin, i);\n+            if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n+                continue;\n \n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n+            int i = output.i;\n+            CInputCoin coin(pcoin, i);\n+            coin.txout.nValue -= (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+            // Only include outputs that are not negative effective value (i.e. not dust)\n+            if (coin.txout.nValue > 0) {\n+                vValue.push_back(coin);\n+                fee_vec.push_back(output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+            }\n         }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n+        return SelectCoinsBnB(vValue, nTargetValue, cost_of_change, setCoinsRet, nValueRet, fee_vec, fee_ret);\n+    } else {\n+        // Filter by the min conf specs and add to vValue\n+        for (const COutput &output : vCoins)\n         {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n+            if (!output.fSpendable)\n+                continue;\n \n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n+            const CWalletTx *pcoin = output.tx;\n \n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n+            if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n+                continue;\n \n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n-            }\n+            if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n+                continue;\n \n-        if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n-            LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n-            for (unsigned int i = 0; i < vValue.size(); i++) {\n-                if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n-                }\n-            }\n-            LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));\n+            int i = output.i;\n+            CInputCoin coin(pcoin, i);\n+            vValue.push_back(coin);\n         }\n+        return KnapsackSolver(vValue, nTargetValue, setCoinsRet, nValueRet);\n     }\n-\n-    return true;\n }\n \n-bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const\n+bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount& fee_ret, const CFeeRate effective_fee, const CCoinControl& coin_control, bool use_bnb, int change_size) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139532452",
      "id" : 139532452,
      "original_commit_id" : "feeb3cab3ec78f33deedf6b8cd7aae32a0c9424b",
      "original_position" : 250,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139532452",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139532715"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139532715"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this is getting more important now with segwit, and the fact that we have two related optional arguments",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-18T20:34:31Z",
      "diff_hunk" : "@@ -837,7 +850,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * completion the coin set and corresponding actual target value is\n      * assembled\n      */\n-    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, uint64_t nMaxAncestors, std::vector<COutput> vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const;\n+     // TODO: Change the hard coded change_size when we aren't only using P2PKH change outputs",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139532715",
      "id" : 139532715,
      "in_reply_to_id" : 125332737,
      "original_commit_id" : "407133d206446eba42d9cc6350ba6af90c40d551",
      "original_position" : 57,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139532715",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139532795"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139532795"
         }
      },
      "author_association" : "MEMBER",
      "body" : "priority is removed; revisit?",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-18T20:34:51Z",
      "diff_hunk" : "@@ -1195,4 +1210,12 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins\n     return true;\n }\n \n+// Calculate the size of the transaction assuming all signatures are max size\n+// Use DummySignatureCreator, which inserts 72 byte signatures everywhere.\n+// TODO: re-use this in CWallet::CreateTransaction (right now\n+// CreateTransaction uses the constructed dummy-signed tx to do a priority\n+// calculation, but we should be able to refactor after priority is removed).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139532795",
      "id" : 139532795,
      "original_commit_id" : "feeb3cab3ec78f33deedf6b8cd7aae32a0c9424b",
      "original_position" : 64,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139532795",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139535695"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139535695"
         }
      },
      "author_association" : "MEMBER",
      "body" : "parens around the value being subtracted would be nice ",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-18T20:46:50Z",
      "diff_hunk" : "@@ -48,20 +49,33 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n         remaining += utxo.txout.nValue;\n     }\n \n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n     // Depth first search to find\n     while (!done)\n     {\n         if (tries <= 0) { // Too many tries, exit\n-            return false;\n+            break;\n         } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n             backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n         } else if (value_ret >= target_value) { // Selected value is within range\n-            done = true;\n+            curr_waste += value_ret - target_value;\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= value_ret - target_value;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139535695",
      "id" : 139535695,
      "original_commit_id" : "31914f0697cab365ea7351edf9d7b58719965b6e",
      "original_position" : 36,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139535695",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139535771"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139535771"
         }
      },
      "author_association" : "MEMBER",
      "body" : "parens around the value being subtracted would be nice",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-18T20:47:06Z",
      "diff_hunk" : "@@ -48,20 +49,33 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n         remaining += utxo.txout.nValue;\n     }\n \n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n     // Depth first search to find\n     while (!done)\n     {\n         if (tries <= 0) { // Too many tries, exit\n-            return false;\n+            break;\n         } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n             backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n         } else if (value_ret >= target_value) { // Selected value is within range\n-            done = true;\n+            curr_waste += value_ret - target_value;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139535771",
      "id" : 139535771,
      "original_commit_id" : "31914f0697cab365ea7351edf9d7b58719965b6e",
      "original_position" : 31,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63466937,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139535771",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139539124"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139539124"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Also, note that this value is the \"excess\" being added and removed later, in contrast to the input-selection waste (wonder if we can find a good name for this cost)",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-18T21:00:28Z",
      "diff_hunk" : "@@ -48,20 +49,33 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n         remaining += utxo.txout.nValue;\n     }\n \n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n     // Depth first search to find\n     while (!done)\n     {\n         if (tries <= 0) { // Too many tries, exit\n-            return false;\n+            break;\n         } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n             backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n         } else if (value_ret >= target_value) { // Selected value is within range\n-            done = true;\n+            curr_waste += value_ret - target_value;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139539124",
      "id" : 139539124,
      "original_commit_id" : "31914f0697cab365ea7351edf9d7b58719965b6e",
      "original_position" : 31,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63486517,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139539124",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139541172"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139541172"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit, can you rename it `input_fee_vec`",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-18T21:09:04Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139541172",
      "id" : 139541172,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 26,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63488818,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139541172",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139580709"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139580709"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You wrote it (I took it from one of your commits); revisit it for me :D",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-19T01:43:40Z",
      "diff_hunk" : "@@ -1195,4 +1210,12 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins\n     return true;\n }\n \n+// Calculate the size of the transaction assuming all signatures are max size\n+// Use DummySignatureCreator, which inserts 72 byte signatures everywhere.\n+// TODO: re-use this in CWallet::CreateTransaction (right now\n+// CreateTransaction uses the constructed dummy-signed tx to do a priority\n+// calculation, but we should be able to refactor after priority is removed).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139580709",
      "id" : 139580709,
      "in_reply_to_id" : 139532795,
      "original_commit_id" : "feeb3cab3ec78f33deedf6b8cd7aae32a0c9424b",
      "original_position" : 64,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 63532461,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139580709",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581043"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581043"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-19T01:47:04Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581043",
      "id" : 139581043,
      "in_reply_to_id" : 139522490,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 31,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63532825,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581043",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581052"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581052"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done here and elsewhere",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-19T01:47:12Z",
      "diff_hunk" : "@@ -48,20 +49,33 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n         remaining += utxo.txout.nValue;\n     }\n \n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n     // Depth first search to find\n     while (!done)\n     {\n         if (tries <= 0) { // Too many tries, exit\n-            return false;\n+            break;\n         } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n             backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n         } else if (value_ret >= target_value) { // Selected value is within range\n-            done = true;\n+            curr_waste += value_ret - target_value;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581052",
      "id" : 139581052,
      "in_reply_to_id" : 139535771,
      "original_commit_id" : "31914f0697cab365ea7351edf9d7b58719965b6e",
      "original_position" : 31,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63532837,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581052",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581060"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581060"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-19T01:47:17Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581060",
      "id" : 139581060,
      "in_reply_to_id" : 139523092,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 36,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63532848,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581060",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581074"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581074"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-19T01:47:24Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581074",
      "id" : 139581074,
      "in_reply_to_id" : 139523467,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 37,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63532862,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581074",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581091"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581091"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done; renamed to `lookahead`",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-19T01:47:35Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate remaining",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581091",
      "id" : 139581091,
      "in_reply_to_id" : 139522887,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 45,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63532878,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581091",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581104"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581104"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-19T01:47:40Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+\n+    // Depth first search to find",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581104",
      "id" : 139581104,
      "in_reply_to_id" : 139522984,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 51,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63532891,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581104",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581116"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581116"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-19T01:47:46Z",
      "diff_hunk" : "@@ -453,6 +453,9 @@ class CWalletTx : public CMerkleTx\n     CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const;\n     CAmount GetChange() const;\n \n+    // Get the marginal bytes if spending the specified output from this transaction\n+    int GetSpendSize(unsigned int i) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581116",
      "id" : 139581116,
      "in_reply_to_id" : 139532186,
      "original_commit_id" : "feeb3cab3ec78f33deedf6b8cd7aae32a0c9424b",
      "original_position" : 5,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 63532903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581116",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581138"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581138"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-19T01:47:58Z",
      "diff_hunk" : "@@ -2254,164 +2293,73 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n-{\n-    std::vector<char> vfIncluded;\n-\n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n-\n-    FastRandomContext insecure_rand;\n-\n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors,\n+    std::vector<COutput> vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount& fee_ret, const CFeeRate effective_fee,\n+    bool use_bnb, int change_output_size, int change_spend_size) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n     std::vector<CInputCoin> vValue;\n-    CAmount nTotalLower = 0;\n-\n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n+    if (use_bnb) {\n \n-    for (const COutput &output : vCoins)\n-    {\n-        if (!output.fSpendable)\n-            continue;\n+        // Calculate cost of change\n+        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(change_spend_size) + effective_fee.GetFee(change_output_size);\n \n-        const CWalletTx *pcoin = output.tx;\n+        // Filter by the min conf specs and add to vValue and calculate effective value\n+        std::vector<CAmount> fee_vec; // To keep track of the fees for each input\n+        for (const COutput &output : vCoins)\n+        {\n+            if (!output.fSpendable)\n+                continue;\n \n-        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n-            continue;\n+            const CWalletTx *pcoin = output.tx;\n \n-        if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n-            continue;\n-\n-        int i = output.i;\n+            if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n+                continue;\n \n-        CInputCoin coin = CInputCoin(pcoin, i);\n+            if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n+                continue;\n \n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n+            int i = output.i;\n+            CInputCoin coin(pcoin, i);\n+            coin.txout.nValue -= (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+            // Only include outputs that are not negative effective value (i.e. not dust)\n+            if (coin.txout.nValue > 0) {\n+                vValue.push_back(coin);\n+                fee_vec.push_back(output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+            }\n         }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n+        return SelectCoinsBnB(vValue, nTargetValue, cost_of_change, setCoinsRet, nValueRet, fee_vec, fee_ret);\n+    } else {\n+        // Filter by the min conf specs and add to vValue\n+        for (const COutput &output : vCoins)\n         {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n+            if (!output.fSpendable)\n+                continue;\n \n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n+            const CWalletTx *pcoin = output.tx;\n \n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n+            if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n+                continue;\n \n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n-            }\n+            if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n+                continue;\n \n-        if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n-            LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n-            for (unsigned int i = 0; i < vValue.size(); i++) {\n-                if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n-                }\n-            }\n-            LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));\n+            int i = output.i;\n+            CInputCoin coin(pcoin, i);\n+            vValue.push_back(coin);\n         }\n+        return KnapsackSolver(vValue, nTargetValue, setCoinsRet, nValueRet);\n     }\n-\n-    return true;\n }\n \n-bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const\n+bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount& fee_ret, const CFeeRate effective_fee, const CCoinControl& coin_control, bool use_bnb, int change_size) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581138",
      "id" : 139581138,
      "in_reply_to_id" : 139532452,
      "original_commit_id" : "feeb3cab3ec78f33deedf6b8cd7aae32a0c9424b",
      "original_position" : 250,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 63532927,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581138",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581141"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-19T01:48:03Z",
      "diff_hunk" : "@@ -48,20 +49,33 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n         remaining += utxo.txout.nValue;\n     }\n \n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n     // Depth first search to find\n     while (!done)\n     {\n         if (tries <= 0) { // Too many tries, exit\n-            return false;\n+            break;\n         } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n             backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n         } else if (value_ret >= target_value) { // Selected value is within range\n-            done = true;\n+            curr_waste += value_ret - target_value;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581141",
      "id" : 139581141,
      "in_reply_to_id" : 139539124,
      "original_commit_id" : "31914f0697cab365ea7351edf9d7b58719965b6e",
      "original_position" : 31,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63532930,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581141",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581152"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581152"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-19T01:48:07Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r139581152",
      "id" : 139581152,
      "in_reply_to_id" : 139541172,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 26,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 63532940,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/139581152",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased and addressed @instagibbs's comments",
      "created_at" : "2017-09-19T01:49:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-330404321",
      "id" : 330404321,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-09-19T01:49:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/330404321",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@achow101 I cannot find it in the comments anymore, but you asked me for the simulation data some time ago\r\n\r\nI tried the simulation on two targets.\r\n\r\nFirst scenario (moneypot scenario) is I think from here (note - large file; one line is one income/expense)\r\nhttps://github.com/Xekyo/CoinSelectionSimulator/tree/master/src/main/resources/scenarios\r\n\r\nSecond is randomly generated from here \r\nhttps://github.com/bitcoinjs/coinselect/blob/master/stats/index.js\r\n\r\nIt would probably be better if you run the c++ core code directly though; my simulations were on the javascript + scala code",
      "created_at" : "2017-09-27T12:57:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-332511894",
      "id" : 332511894,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-09-27T12:57:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/332511894",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r141999992"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141999992"
         }
      },
      "author_association" : "NONE",
      "body" : "<quoting-Rehash class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Port Townsend Terminal<br><br>1301 Water St, Port Townsend, WA 98368<br>+1 206-464-6400 <a href=\"https://t.co/3LEHrXpu7y\">https://t.co/3LEHrXpu7y</a></p>&mdash; ahrlo jan ebio (@irieBrain) <a href=\"https://twitter.com/irieBrain/status/913990767797985280?ref_src=twsrc%5Etfw\">September 30, 2017</a></blockquote> <script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>",
      "commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "created_at" : "2017-09-30T06:59:14Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r141999992",
      "id" : 141999992,
      "in_reply_to_id" : 139522490,
      "original_commit_id" : "88ca71517883fca317ae4b0ccbf86050850ba6ae",
      "original_position" : 31,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66306875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2017-09-30T06:59:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/141999992",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/8288478?v=4",
         "events_url" : "https://api.github.com/users/irieGhost/events{/privacy}",
         "followers_url" : "https://api.github.com/users/irieGhost/followers",
         "following_url" : "https://api.github.com/users/irieGhost/following{/other_user}",
         "gists_url" : "https://api.github.com/users/irieGhost/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/irieGhost",
         "id" : 8288478,
         "login" : "irieGhost",
         "organizations_url" : "https://api.github.com/users/irieGhost/orgs",
         "received_events_url" : "https://api.github.com/users/irieGhost/received_events",
         "repos_url" : "https://api.github.com/users/irieGhost/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/irieGhost/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/irieGhost/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/irieGhost"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I am looking at this commit\r\n\r\nhttps://github.com/achow101/bitcoin/commit/0fb73ae532aab061d3df0be54579b6d40c1e93ff\r\n\r\nI have to say, I don't understand, why are long term fees used in the waste calculation and what exactly does this mean\r\n\r\n```\r\nCCoinControl temp;\r\ntemp.m_confirm_target = 1008;\r\nCFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);\r\n```\r\n\r\nlong_term_feerate will be some very small fee that guarantees send in 1008 blocks, right? Why is that used in the waste calculation?",
      "created_at" : "2017-09-30T22:15:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-333339484",
      "id" : 333339484,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-09-30T22:15:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/333339484",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Pieter pointed out that the algorithm doesn't necessarily find the best solution when it discovers the first solution. However, it was then at first not clear how to make the trade-off between making the input set smaller or reducing the excess in the selection.\r\n\r\nThe idea is that during high fee rates, it might be beneficial to the user if a smaller input count is preferred in exchange for a higher excess, while at low fee rates, a higher input count might be acceptable to achieve a smaller excess.\r\n\r\nWe came up with the waste metric to combine both of these dimensions:\r\n\r\n    waste = excess + #inputs * (feeRate - longterm feeRate)\r\n\r\nwhere `excess` is the amount that we overshoot the selection target, and the second term derives from how much more expensive it is to spend the inputs right now than we expect in the longterm.\r\n\r\nThe algorithm now doesn't stop on the first solution, but continues to search for a solution with a lower waste metric (using that as another bound) until either it has searched all possibilities or runs into the maximum allowed tries.",
      "created_at" : "2017-09-30T22:40:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-333340700",
      "id" : 333340700,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-09-30T22:42:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/333340700",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142017311"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142017311"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I believe this must be:\r\n\r\n`curr_waste > best_waste && (fee_vec[depth] - long_term_fee_vec[depth]) > 0`\r\n\r\nOtherwise, you'd be prematurely stopping when a transaction is created with fees below the long-term fee estimate.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-09-30T23:27:29Z",
      "diff_hunk" : "@@ -48,20 +49,33 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n         remaining += utxo.txout.nValue;\n     }\n \n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n     // Depth first search to find\n     while (!done)\n     {\n         if (tries <= 0) { // Too many tries, exit\n-            return false;\n+            break;\n         } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n             backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142017311",
      "id" : 142017311,
      "original_commit_id" : "0fb73ae532aab061d3df0be54579b6d40c1e93ff",
      "original_position" : 27,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66324547,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142017311",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142040853"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142040853"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe I misunderstand what `long_term_fee` is, but how can it be lower than long term fee estimate? I thought that long term fee looks for confirmation target 1008, thus all smart fee estimates will be only bigger than the long term estimate...",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-10-01T21:15:23Z",
      "diff_hunk" : "@@ -48,20 +49,33 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n         remaining += utxo.txout.nValue;\n     }\n \n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n     // Depth first search to find\n     while (!done)\n     {\n         if (tries <= 0) { // Too many tries, exit\n-            return false;\n+            break;\n         } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n             backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142040853",
      "id" : 142040853,
      "in_reply_to_id" : 142017311,
      "original_commit_id" : "0fb73ae532aab061d3df0be54579b6d40c1e93ff",
      "original_position" : 27,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66347309,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142040853",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142192418"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142192418"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Coin selection function for Branch and Bound coin selection algo\"\r\n\r\nMaybe drop this and use `descending` instead of sorting in ascending order and reversing.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-10-02T16:45:29Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142192418",
      "id" : 142192418,
      "original_commit_id" : "2ca869b0fa0bb79ff545f77996c9a604998abb6c",
      "original_position" : 17,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66518090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142192418",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142195624"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142195624"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Note for reviewers: This function is not new, just moved from wallet.cpp.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-10-02T16:57:57Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+\n+    // Depth first search to find\n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+\n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;\n+                }\n+                selection.at(depth).first = false;\n+                selection.at(depth).second = false;\n+                remaining += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    return false;\n+                }\n+            }\n+\n+            if (!done) {\n+                // Now traverse the second branch of the utxo we have arrived at.\n+                selection.at(depth).second = true;\n+\n+                // These were always included first, try excluding now\n+                selection.at(depth).first = false;\n+                value_ret -= utxo_pool.at(depth).txout.nValue;\n+                ++depth;\n+            }\n+        }\n+        --tries;\n+    }\n+\n+    // Set output set\n+    for (unsigned int i = 0; i < selection.size(); ++i) {\n+        if (selection.at(i).first) {\n+            out_set.insert(utxo_pool.at(i));\n+            fee_ret += fee_vec.at(i);\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142195624",
      "id" : 142195624,
      "original_commit_id" : "2ca869b0fa0bb79ff545f77996c9a604998abb6c",
      "original_position" : 127,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 167,
      "pull_request_review_id" : 66518090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142195624",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142215029"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142215029"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Here and throughout the PR, probably would be better to pass CInputCoin by const reference to avoid copying the struct. Probably want `for (const CInputCoin& utxo : utxo_pool)` instead of `for (CInputCoin utxo : utxo_pool)` as well.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-10-02T18:16:55Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142215029",
      "id" : 142215029,
      "original_commit_id" : "2ca869b0fa0bb79ff545f77996c9a604998abb6c",
      "original_position" : 11,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66518090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142215029",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142216891"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142216891"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Don't you need to update `input_fee_vec` and `long_term_fee_vec` during the sort? Maybe it would be simpler to make `input_fee` and `long_term_fee` new fields in `CInputCoin`.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-10-02T18:24:26Z",
      "diff_hunk" : "@@ -0,0 +1,287 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set,\n+    CAmount& value_ret, std::vector<CAmount>& input_fee_vec, std::vector<CAmount>& long_term_fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing exclusion branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142216891",
      "id" : 142216891,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 44,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66518090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142216891",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142217676"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142217676"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could declare depth as size_t to avoid cast.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-10-02T18:27:33Z",
      "diff_hunk" : "@@ -0,0 +1,287 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set,\n+    CAmount& value_ret, std::vector<CAmount>& input_fee_vec, std::vector<CAmount>& long_term_fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing exclusion branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead: total value of the UTXO pool minus whatever has been chosen\n+    CAmount lookahead = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            curr_waste += (value_ret - target_value); // This is the excess value which is added to the waste for the below comparison\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_ret - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142217676",
      "id" : 142217676,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 74,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66518090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142217676",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142217987"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142217987"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could use .at() consistently instead of .at() and []",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-10-02T18:28:44Z",
      "diff_hunk" : "@@ -0,0 +1,287 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set,\n+    CAmount& value_ret, std::vector<CAmount>& input_fee_vec, std::vector<CAmount>& long_term_fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing exclusion branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead: total value of the UTXO pool minus whatever has been chosen\n+    CAmount lookahead = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            curr_waste += (value_ret - target_value); // This is the excess value which is added to the waste for the below comparison\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_ret - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + lookahead < target_value) { // Cannot possibly reach target with the amount remaining in the lookahead\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                break;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+\n+            // Remove this utxo from the lookahead utxo amount\n+            lookahead -= utxo_pool.at(depth).txout.nValue;\n+            // Increase waste\n+            curr_waste += input_fee_vec[depth] - long_term_fee_vec[depth];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142217987",
      "id" : 142217987,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 89,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66518090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142217987",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142220571"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142220571"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Should just implement original `GetMinimumFee` & `GetRequiredFee` functions in terms of these new feerate functions. Not good to duplicate so much code.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-10-02T18:38:48Z",
      "diff_hunk" : "@@ -76,6 +76,62 @@ CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, c\n     return fee_needed;\n }\n \n+CFeeRate GetRequiredFeeRate()\n+{\n+    return std::max(CWallet::minTxFee, ::minRelayTxFee);\n+}\n+\n+CFeeRate GetMinimumFeeRate(const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142220571",
      "id" : 142220571,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 9,
      "path" : "src/wallet/fees.cpp",
      "position" : 19,
      "pull_request_review_id" : 66518090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142220571",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142222080"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142222080"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Note for reviewers: Again this code is mostly not new. It's moved from the previous `SelectCoinsMinConf` implementation in wallet.cpp",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-10-02T18:44:34Z",
      "diff_hunk" : "@@ -0,0 +1,287 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set,\n+    CAmount& value_ret, std::vector<CAmount>& input_fee_vec, std::vector<CAmount>& long_term_fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing exclusion branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead: total value of the UTXO pool minus whatever has been chosen\n+    CAmount lookahead = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            curr_waste += (value_ret - target_value); // This is the excess value which is added to the waste for the below comparison\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_ret - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + lookahead < target_value) { // Cannot possibly reach target with the amount remaining in the lookahead\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                break;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+\n+            // Remove this utxo from the lookahead utxo amount\n+            lookahead -= utxo_pool.at(depth).txout.nValue;\n+            // Increase waste\n+            curr_waste += input_fee_vec[depth] - long_term_fee_vec[depth];\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;\n+                    curr_waste -= input_fee_vec[depth] - long_term_fee_vec[depth];\n+                }\n+                selection.at(depth).first = false;\n+                selection.at(depth).second = false;\n+                lookahead += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    done = true;\n+                    break;\n+                }\n+            }\n+\n+            if (!done) {\n+                // Now traverse the second branch of the utxo we have arrived at.\n+                selection.at(depth).second = true;\n+\n+                // These were always included first, try excluding now\n+                selection.at(depth).first = false;\n+                value_ret -= utxo_pool.at(depth).txout.nValue;\n+                curr_waste -= input_fee_vec[depth] - long_term_fee_vec[depth];\n+                ++depth;\n+            }\n+        }\n+        --remaining_tries;\n+    }\n+\n+    // Check for solution\n+    if (best_selection.empty()) {\n+        return false;\n+    }\n+\n+    // Set output set\n+    value_ret = 0;\n+    for (unsigned int i = 0; i < best_selection.size(); ++i) {\n+        if (best_selection.at(i).first) {\n+            out_set.insert(utxo_pool.at(i));\n+            fee_ret += input_fee_vec.at(i);\n+            value_ret += utxo_pool.at(i).txout.nValue;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n+                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n+{\n+    std::vector<char> vfIncluded;\n+\n+    vfBest.assign(vValue.size(), true);\n+    nBest = nTotalLower;\n+\n+    FastRandomContext insecure_rand;\n+\n+    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n+    {\n+        vfIncluded.assign(vValue.size(), false);\n+        CAmount nTotal = 0;\n+        bool fReachedTarget = false;\n+        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n+        {\n+            for (unsigned int i = 0; i < vValue.size(); i++)\n+            {\n+                //The solver here uses a randomized algorithm,\n+                //the randomness serves no real security purpose but is just\n+                //needed to prevent degenerate behavior and it is important\n+                //that the rng is fast. We do not use a constant random sequence,\n+                //because there may be some privacy improvement by making\n+                //the selection random.\n+                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n+                {\n+                    nTotal += vValue[i].txout.nValue;\n+                    vfIncluded[i] = true;\n+                    if (nTotal >= nTargetValue)\n+                    {\n+                        fReachedTarget = true;\n+                        if (nTotal < nBest)\n+                        {\n+                            nBest = nTotal;\n+                            vfBest = vfIncluded;\n+                        }\n+                        nTotal -= vValue[i].txout.nValue;\n+                        vfIncluded[i] = false;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+bool KnapsackSolver(std::vector<CInputCoin>& utxo_pool, const CAmount& nTargetValue, std::set<CInputCoin>& out_set, CAmount& value_ret)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142222080",
      "id" : 142222080,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 199,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66518090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142222080",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142222627"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142222627"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This could use a comment saying what the arguments are and what bnb stands for, with maybe a sentence or two describing the algorithm, too.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-10-02T18:46:38Z",
      "diff_hunk" : "@@ -0,0 +1,19 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COINSELECTION_H\n+#define BITCOIN_COINSELECTION_H\n+\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"wallet/wallet.h\"\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142222627",
      "id" : 142222627,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 13,
      "path" : "src/wallet/coinselection.h",
      "position" : null,
      "pull_request_review_id" : 66518090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142222627",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142227108"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142227108"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`GetMinimumFee` has `maxTxFee` logic that this doesn't, so the wrapper would have to include that.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-10-02T19:04:35Z",
      "diff_hunk" : "@@ -76,6 +76,62 @@ CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, c\n     return fee_needed;\n }\n \n+CFeeRate GetRequiredFeeRate()\n+{\n+    return std::max(CWallet::minTxFee, ::minRelayTxFee);\n+}\n+\n+CFeeRate GetMinimumFeeRate(const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142227108",
      "id" : 142227108,
      "in_reply_to_id" : 142220571,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 9,
      "path" : "src/wallet/fees.cpp",
      "position" : 19,
      "pull_request_review_id" : 66558448,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142227108",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142241789"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142241789"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@Xekyo I agree with @runn1ng. I don't see how the long term fee can be less than the current fee.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-10-02T20:10:37Z",
      "diff_hunk" : "@@ -48,20 +49,33 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n         remaining += utxo.txout.nValue;\n     }\n \n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n     // Depth first search to find\n     while (!done)\n     {\n         if (tries <= 0) { // Too many tries, exit\n-            return false;\n+            break;\n         } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n             backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142241789",
      "id" : 142241789,
      "in_reply_to_id" : 142017311,
      "original_commit_id" : "0fb73ae532aab061d3df0be54579b6d40c1e93ff",
      "original_position" : 27,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66575803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142241789",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I tried my javascript simulations with the additional code (the waste comparation) and it actually had slightly worse results (higher total cost)\r\n\r\nBUT it might be some bug in the simulation, I don't have that much time for experimenting right now",
      "created_at" : "2017-10-02T22:27:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-333683003",
      "id" : 333683003,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-10-02T22:27:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/333683003",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Some simulation that actually test the resulting total fees on a given scenario - similar to @Xekyo repo - but on actual bitcoin binary - would be probably nice. So the testing would be on this code and not on re-implementations.\r\n\r\nI am thinking how hard would that be on regtest, with the current python qa testing framework.",
      "created_at" : "2017-10-02T22:31:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-333683867",
      "id" : 333683867,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-10-02T22:31:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/333683867",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298179"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298179"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-10-03T01:58:58Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298179",
      "id" : 142298179,
      "in_reply_to_id" : 142215029,
      "original_commit_id" : "2ca869b0fa0bb79ff545f77996c9a604998abb6c",
      "original_position" : 11,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66638784,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298179",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298191"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298191"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-10-03T01:59:05Z",
      "diff_hunk" : "@@ -0,0 +1,261 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298191",
      "id" : 142298191,
      "in_reply_to_id" : 142192418,
      "original_commit_id" : "2ca869b0fa0bb79ff545f77996c9a604998abb6c",
      "original_position" : 17,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66638797,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298191",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298243"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298243"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, I do... I took your suggestion and added fields to `CInputCoin` for that coin's `fee` and `long_term_fee` values.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-10-03T01:59:42Z",
      "diff_hunk" : "@@ -0,0 +1,287 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set,\n+    CAmount& value_ret, std::vector<CAmount>& input_fee_vec, std::vector<CAmount>& long_term_fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing exclusion branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298243",
      "id" : 142298243,
      "in_reply_to_id" : 142216891,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 44,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66638841,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298243",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298276"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298276"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`depth` can be negative, so I don't think I an do that. It is only negative when all branches in the tree are exhausted.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-10-03T02:00:02Z",
      "diff_hunk" : "@@ -0,0 +1,287 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set,\n+    CAmount& value_ret, std::vector<CAmount>& input_fee_vec, std::vector<CAmount>& long_term_fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing exclusion branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead: total value of the UTXO pool minus whatever has been chosen\n+    CAmount lookahead = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            curr_waste += (value_ret - target_value); // This is the excess value which is added to the waste for the below comparison\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_ret - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298276",
      "id" : 142298276,
      "in_reply_to_id" : 142217676,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 74,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66638875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298276",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298342"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298342"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-10-03T02:00:38Z",
      "diff_hunk" : "@@ -0,0 +1,287 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set,\n+    CAmount& value_ret, std::vector<CAmount>& input_fee_vec, std::vector<CAmount>& long_term_fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing exclusion branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead: total value of the UTXO pool minus whatever has been chosen\n+    CAmount lookahead = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            curr_waste += (value_ret - target_value); // This is the excess value which is added to the waste for the below comparison\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_ret - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + lookahead < target_value) { // Cannot possibly reach target with the amount remaining in the lookahead\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                break;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+\n+            // Remove this utxo from the lookahead utxo amount\n+            lookahead -= utxo_pool.at(depth).txout.nValue;\n+            // Increase waste\n+            curr_waste += input_fee_vec[depth] - long_term_fee_vec[depth];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298342",
      "id" : 142298342,
      "in_reply_to_id" : 142217987,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 89,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 66638938,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298342",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298376"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298376"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I have added a very long comment describing what this does and the arguments of the function.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2017-10-03T02:00:58Z",
      "diff_hunk" : "@@ -0,0 +1,19 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COINSELECTION_H\n+#define BITCOIN_COINSELECTION_H\n+\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"wallet/wallet.h\"\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r142298376",
      "id" : 142298376,
      "in_reply_to_id" : 142222627,
      "original_commit_id" : "abf526092a41f227a5f6fe6d150bd969a1a6e856",
      "original_position" : 13,
      "path" : "src/wallet/coinselection.h",
      "position" : null,
      "pull_request_review_id" : 66638973,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/142298376",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased this.\r\n\r\nI'll try to fix up some of the fee estimation things wrt segwit.\r\n\r\n@runn1ng  I'll see if I can do any sort of simulation stuff.",
      "created_at" : "2017-11-30T17:08:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-348254949",
      "id" : 348254949,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-11-30T17:08:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348254949",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@achow101 I will see what I can do",
      "created_at" : "2017-11-30T19:08:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-348289112",
      "id" : 348289112,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-11-30T19:08:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/348289112",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/runn1ng/events{/privacy}",
         "followers_url" : "https://api.github.com/users/runn1ng/followers",
         "following_url" : "https://api.github.com/users/runn1ng/following{/other_user}",
         "gists_url" : "https://api.github.com/users/runn1ng/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/runn1ng",
         "id" : 104945,
         "login" : "runn1ng",
         "organizations_url" : "https://api.github.com/users/runn1ng/orgs",
         "received_events_url" : "https://api.github.com/users/runn1ng/received_events",
         "repos_url" : "https://api.github.com/users/runn1ng/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/runn1ng/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/runn1ng/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/runn1ng"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I have rebased this and added a new commit that uses an actual prototype change output and gets its size and spend size instead of hardcoding constants.\r\n\r\nI finally have the time to work on simulations for this and will be doing so over the next few weeks.\r\n\r\n@karel-3d What are the axes of the simulation graphs that you posted earlier?",
      "created_at" : "2017-12-20T06:39:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-352978556",
      "id" : 352978556,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2017-12-20T06:39:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/352978556",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "See https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-370539486 for updated results\r\n\r\n***\r\n\r\nI figured out how to run simulations with this. https://github.com/achow101/bitcoin/tree/bnb-simulate contains the modifications and script that I am using to simulate the behavior. It uses the test framework to setup 2 nodes. One node will then mine a bunch of blocks and send money to the other node as the scenarios specify. Then the other node will spend from those UTXOs as the scenario specifies. At the end, a bunch of data is printed out.\r\n\r\nAll of this is done in `test/functional/simulate-coinselection.py`. Modify that file as necessary if you wan to run simulations.\r\n\r\nThere is also a modification there to print to the debug.log about whether BnB was used or not. To calculate the BnB usage, grep through the debug.log file. This will require running the simulation with `--nocleanup` so that the datadir is not removed after it completes.\r\n\r\nI simulated BnB and compared that to the current coin selection behavior (cherry-picked the above commit and removed the printing to debug.log part). I used set the following parameters: `-dustrelayfee=0 -paytxfee=0.00001000`. Setting the dust relay fee to 0 is to allow the dust UTXOs to be added. The transaction fee rate was set to be a fixed 1 sat/byte.\r\n\r\nThe data from the above simulation is as follows:\r\n\r\n | type | parameters | final value | mean #UTXO | final #UTXO | #received | #spent | #changes created | min change | max change | mean change | stDev of change | total fees | average fees | fees to spend remaining UTXO | total cost | min input set | max input set | mean size of input set | stdev of input set size | BnB usage\r\n | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\r\n | BnB+Core | -dustrelayfee=0 -paytxfee=0.00001000 | 55.87655934 | 26.98596647546917637328078853897750377655029296875 | 32 | 6097 | 17925 | 11860 | 0.00001974 | 10.29131674 | 0.30048583 | 0.75408013 | -0.03577980 | -0.0000030168465 | -0.00004736000000000000734363958532213700891588814556598663330078125 | Ã¢ÂÂ0.03582716 | 1 | 24 | 1.511382799325463821560333599336445331573486328125 | 1.178462287842233724433071984094567596912384033203125 | 325/11860\r\n | Core | -dustrelayfee=0 -paytxfee=0.00001000 | 55.87654898 | 28.122459208108256945024550077505409717559814453125 | 25 | 6097 | 17932 | 11860 | 0.00011634 | 10.30079774 | 0.30304566 | 0.71006768 | -0.03579016 | -0.0000030177201 | -0.00003700000000000000489018547877861919914721511304378509521484375 | Ã¢ÂÂ0.03582716 | 1 | 20 | 1.5119730185497470831279542835545726120471954345703125 | 1.2052006592284258967850973931490443646907806396484375 | N/A\r\n\r\nThe results from this aren't very impressive, and that's likely because the BnB algorithm was used for a very small percentage of the coin selections, less than 3%. I will be doing more simulations with different parameters and the other datasets.",
      "created_at" : "2017-12-21T20:37:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-353452113",
      "id" : 353452113,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-05T19:45:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/353452113",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "See https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-370539486 for updated results\r\n\r\n***\r\n\r\nAnother simulation with the same dataset but with a fee of 10 sat/byte instead of 1.\r\n\r\n| type | parameters | final value | mean #UTXO | final #UTXO | #received | #spent | #changes created | min change | max change | mean change | stDev of change | total fees | average fees | fees to spend remaining UTXO | total cost | min input set | max input set | mean size of input set | stdev of input set size | BnB usage |\r\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\r\n| BnB+Core | -dustrelayfee=0 -paytxfee=0.00010000 | 55.55449734 | 26.089714317536337517822175868786871433258056640625 | 28 | 6097 | 17928 | 11859 | 0.00005561 | 10.29687740 | 0.30032770 | 0.71982810 | -0.35784180 | -0.000030172159 | -0.0000414400000000000030375528481396685265281121246516704559326171875 | -0.35788324 | 1 | 22 | 1.5116357504215851559337124854209832847118377685546875 | 1.19698986751473679390755933127366006374359130859375 | 644/11860 |\r\n| Core | -dustrelayfee=0 -paytxfee=0.00010000 | 55.55436354 | 29.10074065823912548012231127358973026275634765625 | 20 | 6097 | 17937 | 11860 | 0.00024407 | 10.06245446 | 0.30415764 | 0.71372324 | -0.35797560 | -0.000030183440 | -0.000029600000000000001201642951809134274299140088260173797607421875 | -0.35800520 | 1 | 38 | 1.5123946037099493810984540687059052288532257080078125 | 1.2489705008609279790476875859894789755344390869140625 | N/A |\r\n\r\nThe difference here is a bit more pronounced, but I'm not quite sure how to interpret this result. @Xekyo, can you comment?\r\n\r\nOne other thing I noticed is that, with these large datasets and trying to go through them as fast as possible, BnB does take a noticeably longer, but I think that is expected behavior. I don't expect that to actually have that much of an impact in practice.",
      "created_at" : "2017-12-22T03:07:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-353511687",
      "id" : 353511687,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-05T19:45:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/353511687",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "See https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-370539486 for updated results\r\n\r\n***\r\n\r\nI've done several more simulations. I did simulations at 4 feerates, 1 sat/byte, 10 sat/byte, 100 sat/byte and 500 sat/byte for the 3 moneypot scenarios provided at https://github.com/Xekyo/CoinSelectionSimulator/tree/master/src/main/resources/scenarios.\r\n\r\n### Results\r\n\r\n#### Derived-1L-2O scenario\r\n\r\n| type | parameters | final value | mean #UTXO | final #UTXO | #received | #spent | #changes created | min change | max change | mean change | stDev of change | total fees | average fees | fees to spend remaining UTXO | total cost | min input set | max input set | mean size of input set | stdev of input set size | BnB usage |\r\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\r\n| BnB+Core | -dustrelayfee=0 -paytxfee=0.00001000 | 55.87655934 | 26.98596647546917637328078853897750377655029296875 | 32 | 6097 | 17925 | 11860 | 0.00001974 | 10.29131674 | 0.30048583 | 0.75408013 | -0.03577980 | -0.0000030168465 | -0.00004736000000000000734363958532213700891588814556598663330078125 | Ã¢ÂÂ0.03582716 | 1 | 24 | 1.511382799325463821560333599336445331573486328125 | 1.178462287842233724433071984094567596912384033203125 | 325/11860\r\n| Core | -dustrelayfee=0 -paytxfee=0.00001000 | 55.87654898 | 28.122459208108256945024550077505409717559814453125 | 25 | 6097 | 17932 | 11860 | 0.00011634 | 10.30079774 | 0.30304566 | 0.71006768 | -0.03579016 | -0.0000030177201 | -0.00003700000000000000489018547877861919914721511304378509521484375 | Ã¢ÂÂ0.03582716 | 1 | 20 | 1.5119730185497470831279542835545726120471954345703125 | 1.2052006592284258967850973931490443646907806396484375 | N/A\r\n| BnB+Core | -dustrelayfee=0 -paytxfee=0.00010000 | 55.55449734 | 26.089714317536337517822175868786871433258056640625 | 28 | 6097 | 17928 | 11859 | 0.00005561 | 10.29687740 | 0.30032770 | 0.71982810 | -0.35784180 | -0.000030172159 | -0.0000414400000000000030375528481396685265281121246516704559326171875 | -0.35788324 | 1 | 22 | 1.5116357504215851559337124854209832847118377685546875 | 1.19698986751473679390755933127366006374359130859375 | 644/11860 |\r\n| Core | -dustrelayfee=0 -paytxfee=0.00010000 | 55.55436354 | 29.10074065823912548012231127358973026275634765625 | 20 | 6097 | 17937 | 11860 | 0.00024407 | 10.06245446 | 0.30415764 | 0.71372324 | -0.35797560 | -0.000030183440 | -0.000029600000000000001201642951809134274299140088260173797607421875 | -0.35800520 | 1 | 38 | 1.5123946037099493810984540687059052288532257080078125 | 1.2489705008609279790476875859894789755344390869140625 | N/A |\r\n| BnB+Core | -dustrelayfee=0 -paytxfee=0.00100000 | 52.33302714 | 26.04159937628779886154006817378103733062744140625 | 23 | 6097 | 17934 | 11860 | 0.00011400 | 10.30047400 | 0.28552710 | 0.67883573 | -3.5793120 | -0.00030179696 | -0.0000340399999999999993490103211701836016800370998680591583251953125 | -3.5793460 | 1 | 24 | 1.512141652613828046725075182621367275714874267578125 | 1.195222366665799285101456916891038417816162109375 | 941/11860 |\r\n| Core | -dustrelayfee=0 -paytxfee=0.00100000 | 52.33243514 | 27.071559837389319369549411931075155735015869140625 | 19 | 6097 | 17938 | 11860 | 0.00010535 | 10.28757400 | 0.30504525 | 0.74629238 | -3.5799040 | -0.00030184688 | -0.0000281200000000000018191871620221178318388410843908786773681640625 | -3.5799321 | 1 | 28 | 1.51247892074198997391931698075495660305023193359375 | 1.2096651387256158738381373041193000972270965576171875 | N/A |\r\n| BnB+Core| -dustrelayfee=0 -paytxfee=0.00500000 | 38.01520914 | 24.4216739989976048263997654430568218231201171875 | 21 | 6097 | 17935 | 11859 | 0.00014570 | 10.29057000 | 0.30445610 | 0.71189306 | -17.897130 | -0.0015090329 | -0.0000310800000000000005840987415961507167594390921294689178466796875 | -17.897161 | 1 | 28 | 1.512225969645868417501333169639110565185546875 | 1.22346107662681991001818460063077509403228759765625 | 1616/11860 |\r\n| Core |-dustrelayfee=0 -paytxfee=0.00500000 | 38.01503914 | 25.713816339032131708108863676898181438446044921875 | 22 | 6097 | 17935 | 11860 | 0.00002000 | 10.10057000 | 0.30062341 | 0.74949322 | -17.897300 | -0.0015090472 | -0.0000325600000000000067428181094175698717663181014358997344970703125 | -17.897333 | 1 | 21 | 1.512225969645868417501333169639110565185546875 | 1.1709164727486285340063432158785872161388397216796875 | N/A |\r\n\r\n#### derived-balanced.csv\r\n\r\n| type | parameters | final value | mean #UTXO | final #UTXO | #received | #spent | #changes created | min change | max change | mean change | stDev of change | total fees | average fees | fees to spend remaining UTXO | total cost | min input set | max input set | mean size of input set | stdev of input set size | BnB usage |\r\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\r\n| BnB+Core| -dustrelayfee=0 -paytxfee=0.00001000 | 55.86752542 | 35.59017211274632330741951591335237026214599609375 | 29 | 12194 | 24022 | 11857 | 0.00000215 | 9.71099774 | 0.10588343 | 0.35890007 | -0.04481372 | -0.0000037785599 | -0.0000429200000000000091962722159610876815349911339581012725830078125 | -0.044856640 | 1 | 66 | 2.025463743676222616585391733678989112377166748046875 | 1.88707038897768342167182709090411663055419921875 | 923/11860 |\r\n| Core | -dustrelayfee=0 -paytxfee=0.00001000 | 55.86752212 | 39.19668246445497317154149641282856464385986328125 | 27 | 12194 | 24026 | 11859 | 0.00002149 | 8.74523932 | 0.10870898 | 0.36959846 | -0.04481702 | -0.0000037788381 | -0.000039960000000000003655097058352652084067813120782375335693359375 | -0.044856980 | 1 | 51 | 2.0258010118043845437796335318125784397125244140625 | 1.8630510400609858745468727647676132619380950927734375 | N/A |\r\n| BnB+Core | -dustrelayfee=0 -paytxfee=0.00010000 | 55.46426454 | 35.07499792134364469120555440895259380340576171875 | 28 | 12194 | 24025 | 11859 | 0.00002982 | 8.74521898 | 0.10850152 | 0.36248967 | -0.44807460 | -0.000037780320 | -0.0000414400000000000030375528481396685265281121246516704559326171875 | -0.44811604 | 1 | 35 | 2.025716694772344173003375544794835150241851806640625 | 1.740747319921828850652900655404664576053619384765625 | 1643/11860\r\n| Core | -dustrelayfee=0 -paytxfee=0.00010000 | 55.46419054 | 35.0832294005155063132406212389469146728515625 | 23 | 12194 | 24030 | 11859 | 0.00003200 | 9.91097740 | 0.11858778 | 0.38233123 | -0.44814860 | -0.000037786560 | -0.0000340399999999999993490103211701836016800370998680591583251953125 | -0.44818264 | 1 | 38 | 2.026138279932546470973875329946167767047882080078125 | 1.842291519120082821103778769611380994319915771484375 | N/A\r\n| BnB+Core | -dustrelayfee=0 -paytxfee=0.00100000 | 51.43235175 | 35.5221169036334885049654985778033733367919921875 | 31 | 12194 | 24020 | 11857 | 0.00004084 | 9.27206431 | 0.11038883 | 0.36045124 | -4.4799874 | -0.00037773924 | -0.000045880000000000001184920217500717853909009136259555816650390625 | -4.4800333 | 1 | 38 | 2.025295109612141430943665909580886363983154296875 | 1.7907297866116194118291105041862465441226959228515625 | 2134/11860 |\r\n| Core | -dustrelayfee=0 -paytxfee=0.00100000 | 51.43111514 | 37.87802444499875065275773522444069385528564453125 | 26 | 12194 | 24028 | 11860 | 0.00012800 | 9.70077400 | 0.11358164 | 0.40684568 | -4.4812240 | -0.00037784351 | -0.00003847999999999999749637769053123292906093411147594451904296875 | -4.4812625 | 1 | 33 | 2.02596964586846528533214950584806501865386962890625 | 1.7820345960584622613254168754792772233486175537109375 | N/A\r\n| BnB+Core| -dustrelayfee=0 -paytxfee=0.00500000 | 33.50870001 | 36.51820902968321291837128228507936000823974609375 | 21 | 12194 | 24026 | 11853 | 0.00002322 | 9.98787000 | 0.14353057 | 0.48030423 | -22.403639 | -0.0018890083 | -0.0000310800000000000005840987415961507167594390921294689178466796875 | -22.403670 | 1 | 53 | 2.0258010118043845437796335318125784397125244140625 | 1.91765082261940023045099223963916301727294921875 | 2713/11860\r\n| Core |-dustrelayfee=0 -paytxfee=0.00500000 | 35.10512145 | 40.9802935184800247725434019230306148529052734375 | 21 | 12194 | 24030 | 11857 | 0.00006718 | 8.81134658 | 0.13437727 | 0.44562374 | -22.407218 | -0.0018894694 | -0.0000310800000000000005840987415961507167594390921294689178466796875 | -22.407249 | 1 | 80 | 2.026309132304578763950075881439261138439178466796875 | 1.9456650214443909074901739586493931710720062255859375 | N/A |\r\n\r\n#### moneypot.csv\r\n\r\n| type | parameters | final value | mean #UTXO | final #UTXO | #received | #spent | #changes created | min change | max change | mean change | stDev of change | total fees | average fees | fees to spend remaining UTXO | total cost | min input set | max input set | mean size of input set | stdev of input set size | BnB usage |\r\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\r\n| BnB+Core | -dustrelayfee=0 -paytxfee=0.00001000 | 55.84951848 | 153.250165526373876900834147818386554718017578125 | 47 | 24388 | 36196 | 11855 | 0.00000262 | 4.99989478 | 0.045543204 | 0.21246908 | -0.06282066 | -0.0000052968516 | -0.00006956000000000000485674001016178635836695320904254913330078125 | -0.062890220 | 1 | 188 | 3.051939291736931014753508861758746206760406494140625 | 3.731750776560500693079802658758126199245452880859375 | 2627/11860 |\r\n| Core | -dustrelayfee=0 -paytxfee=0.00001000 | 55.84950297 | 208.239654601633191077780793420970439910888671875 | 49 | 24388 | 36190 | 11851 | 0.00000275 | 8.80499774 | 0.052897153 | 0.26685217 | -0.06283617 | -0.0000052981594 | -0.000072520000000000003621651589735819243287551216781139373779296875 | -0.062908690 | 1 | 400 | 3.051433389544687901917541239527054131031036376953125 | 5.65198237497643418691950500942766666412353515625 | N/A |\r\n| BnB+Core | -dustrelayfee=0 -paytxfee=0.00010000 | 55.28410854 | 147.34928823659237195897730998694896697998046875 | 37 | 24388 | 36195 | 11844 | 0.00002542 | 5.64857740 | 0.047474642 | 0.20586621 | -0.62823060 | -0.000052970540 | -0.0000547600000000000042559185342572192212173831649124622344970703125 | -0.62828536 | 1 | 182 | 3.051854974704890199888041024678386747837066650390625 | 3.549240546499367265909086199826560914516448974609375 | 3713/11860 |\r\n| Core | -dustrelayfee=0 -paytxfee=0.00010000 | 55.28405942 | 106.5413815934672214780221111141145229339599609375 | 43 | 24388 | 36197 | 11852 | 0.00002260 | 9.20997740 | 0.055779091 | 0.26602465 | -0.62827972 | -0.000052974681 | -0.00006364000000000000732691685101372058852575719356536865234375 | -0.62834336 | 1 | 92 | 3.0520236087689713855297668487764894962310791015625 | 3.277647281760728059651910371030680835247039794921875 | N/A |\r\n| BnB+Core | -dustrelayfee=0 -paytxfee=0.00100000 | 49.63267114 | 92.6900518649304814289280329830944538116455078125 | 34 | 24388 | 36186 | 11832 | 0.00002600 | 5.64837400 | 0.053024521 | 0.21690243 | -6.2796680 | -0.00052948297 | -0.000050320000000000006108551164896169893836486153304576873779296875 | -6.2797183 | 1 | 94 | 3.0510961214165259747232994413934648036956787109375 | 3.337635756349500493200821438222192227840423583984375 | 4111/11860 |\r\n| Core | -dustrelayfee=0 -paytxfee=0.00100000 | 49.63307290 | 146.35864047671594789790106005966663360595703125 | 50 | 24388 | 36180 | 11842 | 0.00002325 | 9.50585100 | 0.069900583 | 0.29034538 | -6.2792663 | -0.00052944910 | -0.0000740000000000000097803709575572383982944302260875701904296875 | -6.2793403 | 1 | 286 | 3.050590219224283305976541669224388897418975830078125 | 4.2989677473115310846196734928525984287261962890625 | N/A |\r\n| BnB+Core| -dustrelayfee=0 -paytxfee=0.00500000 | 25.79221870 | 86.052558973651542828520177863538265228271484375 | 22 | 24388 | 36168 | 11802 | 0.00005563 | 8.78387000 | 0.092277784 | 0.36701418 | -31.364976 | -0.0026452708 | -0.0000325600000000000067428181094175698717663181014358997344970703125 | -31.365009 | 1 | 155 | 3.0503500042169182648876812891103327274322509765625 | 3.72297890817267340679563858429901301860809326171875 | 4752/11860 |\r\n| Core |-dustrelayfee=0 -paytxfee=0.00500000 | 28.75267541 | 109.5738998482549249047224293462932109832763671875 | 31 | 24388 | 36179 | 11822 | 0.00002650 | 9.99457000 | 0.090254682 | 0.36953598 | -31.391428 | -0.0026475017 | -0.000045880000000000001184920217500717853909009136259555816650390625 | -31.391474 | 1 | 119 | 3.05127772623766535531331101083196699619293212890625 | 3.444553377559158580112352865398861467838287353515625 | N/A |",
      "created_at" : "2017-12-26T16:56:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-353989346",
      "id" : 353989346,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-05T19:45:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/353989346",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased",
      "created_at" : "2018-01-11T19:45:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-357039741",
      "id" : 357039741,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-01-11T19:45:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/357039741",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@achow101 the axes are - X is how \"tight\" the target is - by which I mean, I took the cost of change and I multiplied it by a factor. So I took cost of change just X% of the cost in the original algorithm.\r\n\r\nY is total cost from Murch thesis (what is spent + what it costs to spend the resulting utxos).\r\n\r\nBtw. I wrote @Xekyo  it would be nice to make a BIP with this algorithm, so we don't have to write \"Murch algorithm\" and have the algorithm specified as a BIP. (There are already BIPs that don't describe the protocol, just wallet behaviour.)",
      "created_at" : "2018-01-16T13:06:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-357953604",
      "id" : 357953604,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-01-16T13:06:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/357953604",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "See https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-370539486 for updated results\r\n\r\n***\r\n\r\nI have done some more simulations, this time with a variable fee rate. The fee data I am using is pulled from https://bitcoinfees.info/. The fee files are available [here](https://gist.github.com/achow101/44d9e58333d8919e8ad0f6fc7e63d183).\r\n\r\nThere are two fee things, one of them has each fee rate repeated 8 times in a row, the other cycles through the list 8 times.\r\n\r\nResults:\r\n\r\n#### Derived-1L-2O scenario\r\n\r\n| type | parameters | final value | mean #UTXO | final #UTXO | #received | #spent | #changes created | min change | max change | mean change | stDev of change | total fees | average fees | fees to spend remaining UTXO | total cost | min input set | max input set | mean size of input set | stdev of input set size | BnB usage |\r\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\r\n| BnB+Core Repeated Fees | -dustrelayfee=0 | 55.88712998 | 27.311299214790889067216994590125977993011474609375 | 28 | 6097 | 17927 | 11858 | 0.00019834 | 10.26679834 | 0.29848546 | 0.70127884 | -0.02520916 | -0.0000021255616 | -0.0000414400000000000030375528481396685265281121246516704559326171875 | -0.025250600 | 0 | 24 | 1.5115514333895447851574544984032399952411651611328125 | 1.201771518003559524601087105111218988895416259765625 | 344/11860 |\r\n| Core Repeated Fees | -dustrelayfee=0 | 55.88712329 | 27.506097900540179779227401013486087322235107421875 | 22 | 6097 | 17935 | 11860 | 0.00001005 | 10.30069834 | 0.29223202 | 0.72740965 | -0.02521585 | -0.0000021261256 | -0.0000325600000000000067428181094175698717663181014358997344970703125 | -0.025248410 | 1 | 21 | 1.512225969645868417501333169639110565185546875 | 1.2032374476285958575516588098253123462200164794921875 | N/A |\r\n| BnB+Core Cyclic Fees | -dustrelayfee=0 |55.88712420 | 25.80497855989307964819090557284653186798095703125 | 23 | 6097 | 17934 | 11860 | 0.00001491 | 10.29169834 | 0.30822553 | 0.72970119 | -0.02521494 | -0.0000021260489 | -0.0000340399999999999993490103211701836016800370998680591583251953125 | -0.025248980 | 1 | 24 | 1.512141652613828046725075182621367275714874267578125 | 1.1820983771402058248867206202703528106212615966796875 | 199/11860 |\r\n| Core Cyclic Fees | -dustrelayfee=0 | 55.88712420 | 26.8401737483989535348882782272994518280029296875 | 23 | 6097 | 17934 | 11860 | 0.00002034 | 10.30069834 | 0.28121957 | 0.65214921 | -0.02521494 | -0.0000021260489 | -0.0000340399999999999993490103211701836016800370998680591583251953125 | -0.025248980 | 1 | 21 | 1.512141652613828046725075182621367275714874267578125 | 1.1730758242556362791475521589745767414569854736328125 | N/A |\r\n\r\n#### derived-balanced.csv\r\n\r\n| type | parameters | final value | mean #UTXO | final #UTXO | #received | #spent | #changes created | min change | max change | mean change | stDev of change | total fees | average fees | fees to spend remaining UTXO | total cost | min input set | max input set | mean size of input set | stdev of input set size | BnB usage |\r\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\r\n| BnB+Core Repeated Fees | -dustrelayfee=0 | 55.88157487 | 35.741664588010308989396435208618640899658203125 | 30 | 12194 | 24023 | 11859 | 0.00000275 | 9.98089834 | 0.10155991 | 0.34103056 | -0.03076427 | -0.0000025939519 | -0.0000444000000000000018024644277137014114487101323902606964111328125 | -0.030808670 | 1 | 34 | 2.02554806070826298736164972069673240184783935546875 | 1.7797442458699201939253953241859562695026397705078125 | 794/11860 |\r\n| Core Repeated Fees | -dustrelayfee=0 | 55.88158139 | 37.7370915440259437900749617256224155426025390625 | 29 | 12194 | 24025 | 11860 | 0.00030847 | 9.96073034 | 0.10688567 | 0.34970815 | -0.03075775 | -0.0000025934022 | -0.0000429200000000000091962722159610876815349911339581012725830078125 | -0.030800670 | 1 | 32 | 2.025716694772344173003375544794835150241851806640625 | 1.7385175900032934226402403510292060673236846923828125 | N/A |\r\n| BnB+Core Cyclic Fees | -dustrelayfee=0 | 55.88157262 | 36.30227820736676136448295437730848789215087890625 | 27 | 12194 | 24024 | 11857 | 0.00001834 | 9.30095665 | 0.10794268 | 0.37209381 | -0.03076652 | -0.0000025941417 | -0.000039960000000000003655097058352652084067813120782375335693359375 | -0.030806480 | 0 | 35 | 2.025632377740303358137907707714475691318511962890625 | 1.7570214448414578356505444389767944812774658203125 | 833/11860 |\r\n| Core Cyclic Fees | -dustrelayfee=0 | 55.88158048 | 36.26091294587178737174326670356094837188720703125 | 28 | 12194 | 24026 | 11860 | 0.00006546 | 9.91069834 | 0.12069723 | 0.41430597 | -0.03075866 | -0.0000025934789 | -0.0000414400000000000030375528481396685265281121246516704559326171875 | -0.030800100 | 1 | 44 | 2.0258010118043845437796335318125784397125244140625 | 1.8367955156429862650924178524292074143886566162109375 | N/A |\r\n\r\n#### moneypot.csv\r\n\r\n| type | parameters | final value | mean #UTXO | final #UTXO | #received | #spent | #changes created | min change | max change | mean change | stDev of change | total fees | average fees | fees to spend remaining UTXO | total cost | min input set | max input set | mean size of input set | stdev of input set size | BnB usage |\r\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\r\n| BnB+Core Repeated Fees | -dustrelayfee=0 | 55.87052207 | 225.20704590598103322918177582323551177978515625 | 57 | 24388 | 36177 | 11846 | 0.00000241 | 7.99999834 | 0.044079288 | 0.20855531 | -0.04181707 | -0.0000035258912 | -0.000084359999999999998681297908031950782969943247735500335693359375 | -0.041901430 | 1 | 382 | 3.050337268128161749558557858108542859554290771484375 | 5.099606130292382744073620415292680263519287109375 | 2280/11860 |\r\n| Core Repeated Fees | -dustrelayfee=0 | 55.87047548 | 208.39872544692121891785063780844211578369140625 | 29 | 24388 | 36214 | 11855 | 0.00001333 | 7.99999834 | 0.055334876 | 0.25061846 | -0.04186366 | -0.0000035298196 | -0.0000429200000000000091962722159610876815349911339581012725830078125 | -0.041906580 | 1 | 668 | 3.053456998313659465082992028328590095043182373046875 | 7.0470460073749308094193111173808574676513671875 | N/A |\r\n| BnB+Core Cyclic Fees | -dustrelayfee=0 | 55.87051115 | 178.7087563451776759393396787345409393310546875 | 45 | 24388 | 36189 | 11846 | 0.00000241 | 5.51999834 | 0.043100286 | 0.20021529 | -0.04182799 | -0.0000035268120 | -0.000066600000000000006091828430587753473446355201303958892822265625 | -0.041894590 | 1 | 451 | 3.05134907251264753114128325250931084156036376953125 | 5.24464904178873769780011571128852665424346923828125 | 2295/11860 |\r\n| Core Cyclic Fees | -dustrelayfee=0 | 55.87049772 | 218.065603619510028465811046771705150604248046875 | 49 | 24388 | 36197 | 11858 | 0.00000184 | 9.20999834 | 0.046778658 | 0.22037920 | -0.04184142 | -0.0000035279444 | -0.000072520000000000003621651589735819243287551216781139373779296875 | -0.041913940 | 1 | 338 | 3.0520236087689713855297668487764894962310791015625 | 5.70017745838109579636920898337848484516143798828125 |  N/A |",
      "created_at" : "2018-01-22T18:13:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-359514676",
      "id" : 359514676,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-05T19:45:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/359514676",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "So apparently there was a bug that was allowing change to still be made even with BnB. The latest commit should fix this, and I think that will significantly change the simulation results.",
      "created_at" : "2018-01-26T03:16:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-360673104",
      "id" : 360673104,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-01-26T03:16:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/360673104",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "There is a mismatch here with the \"#changes created\" and \"BnB usage\". Every time you use BnB, there should no change be created.\r\nI would suspect that the \"excess\" from BnB is not being dropped to the benefits of the fees, but instead put into a change output?\r\n\r\nEdit: oh, saw your comment upon send. Good, curious about new results!",
      "created_at" : "2018-01-26T19:21:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-360879383",
      "id" : 360879383,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-01-26T19:23:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/360879383",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "See https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-370539486 for updated results\r\n\r\n***\r\n\r\nHere are the new simulation results with all of the bugs fixed hopefully:\r\n\r\n| Fees file | Simulation File | final value | total sent | total deposited | mean #UTXO | final #UTXO | #received | #spent | #payments sent |#changes created | min change | max change | mean change | stDev of change | total fees | average fees | fees to spend remaining UTXO | total cost | min input set | max input set | mean size of input set | stdev of input set size  | BnB Usage |\r\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---| --- | --- |\r\n| fees-bitcoinfees-info-repeats.csv | derived-1I-2O.csv | 55.88713405 | -2484.3994 | 2540.3143409799973 | 19.85849529431419568936689756810665130615234375 | 17 | 6097 | 17913 | 11860 | 11833 | 0.00997809 | 4.15153434 | 0.10399897 | 0.28233767 | -0.02520509 | -0.0000021252184 | -0.0000251600000000000030542755824480849469182430766522884368896484375 | -0.025230250 | 1 | 24 | 1.510370994940978039977608204935677349567413330078125 | 1.0410142316722097444170458402368240058422088623046875  | 27/11860 |\r\n| fees-bitcoinfees-info-repeats.csv | derived-balanced.csv | 55.88171750 | -2484.3994 | 2540.3143409799864 | 27.267855658102600813208482577465474605560302734375 | 21 | 12194 | 23840 | 11860 | 11667 | 0.00221449 | 5.69999834 | 0.056819638 | 0.19930147 | -0.03062164 | -0.0000025819258 | -0.0000310800000000000005840987415961507167594390921294689178466796875 | -0.030652720 | 1 | 84 | 2.010118043844856483559624393819831311702728271484375 | 1.8262218049879537229429615763365291059017181396484375  | 193/11860 |\r\n| fees-bitcoinfees-info-repeats.csv | moneypot.csv | 55.87130774 | -2484.3994 | 2540.314340979981 | 131.06436217170602276382851414382457733154296875 | 33 | 24388 | 35121 | 11860 | 10766 | 0.00005428 | 4.69999834 | 0.036069275 | 0.13266262 | -0.04103140 | -0.0000034596459 | -0.00004883999999999999994983179707475073882960714399814605712890625 | -0.041080240 | 1 | 279 | 2.96129848229342318433054970228113234043121337890625 | 4.20967084360116938768214822630397975444793701171875 | 1094/11860 |\r\n| fees-bitcoinfees-info-cycle.csv | derived-1I-2O.csv | 55.88713391 | -2484.3994 | 2540.3143409799973 | 22.934844350392605605293283588252961635589599609375 | 19 | 6097 | 17909 | 11860 | 11831 | 0.00998908 | 9.14499834 | 0.10465966 | 0.28952080 | -0.02520523 | -0.0000021252302 | -0.0000281200000000000018191871620221178318388410843908786773681640625 | -0.025233350 | 0 | 27 | 1.5100337268128161127833664068020880222320556640625 | 1.05932493680624073562057674280367791652679443359375 | 28/11860 |\r\n| fees-bitcoinfees-info-cycle.csv | derived-balanced.csv | 55.88173059 | -2484.3994 | 2540.3143409799864 | 28.776419722291510794320856803096830844879150390625 | 20 | 12194 | 23831 | 11860 | 11657 | 0.00223019 | 5.69999834 | 0.056200963 | 0.19728515 | -0.03060855 | -0.0000025808221 | -0.000029600000000000001201642951809134274299140088260173797607421875 | -0.030638150 | 1 | 45 | 2.00935919055649225839488281053490936756134033203125 | 1.7222609388141678632422326700179837644100189208984375 | 203/11860 |\r\n| fees-bitcoinfees-info-cycle.csv | moneypot.csv | 55.87119478 | -2484.3994 | 2540.314340979981 | 64.370503200176557356826378963887691497802734375 | 29 | 24388 | 35312 | 11860 | 10953 | 0.00015309 | 4.69999834 | 0.035168758 | 0.12918029 | -0.04114436 | -0.0000034691703 | -0.0000429200000000000091962722159610876815349911339581012725830078125 | -0.041187280 | 1 | 92 | 2.977403035413153542521058625425212085247039794921875 | 2.898949450951935347120524966157972812652587890625 | 907/11860",
      "created_at" : "2018-02-04T17:27:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-362923835",
      "id" : 362923835,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-05T19:45:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/362923835",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@achow101 can you label the rows?",
      "created_at" : "2018-02-05T14:16:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-363096756",
      "id" : 363096756,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-02-05T14:16:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/363096756",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@instagibbs They're all BnB simulations. I moved the fees file and simulations file fields to the left (they were on the right side originally).",
      "created_at" : "2018-02-05T15:36:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-363121199",
      "id" : 363121199,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-02-05T15:36:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/363121199",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@achow101: Row 4 has \"min input set\" of 0, but a transaction must have at least one input.\r\nWhy do you think did the BnB usage almost halve? Are you using the solution of the RandomSelector if it has a lower waste metric? Otherwise, I'd expect the BnB usage to increase with higher fees since the target window for a solution without a change output increases.\r\n\r\nThe minChange of 0.00005428 also seems oddly low. Did the wallet balance dip to zero in your simulation?\r\n\r\n-----\r\n\r\nI've had another idea for an optimization of the exploration: We see a lot of unspent values duplicated at round figures (e.g. 0.1 BTC, 10,000 sats). When exploring the combination tree, we should never allow a second branch to place the same value in the same position.\r\n\r\nE.g. before, when you would have the unspent set of one UTXO with 1,000,000 and 100 UTXO with  100,000, and are looking for a target of 1,150,000,\r\nyou'd explore:\r\n1,000,000\r\n/     \\\r\n      100,000(A)\r\n       /   \\\r\n     0   100,000(B) -----> ÃÂ£=1,200,000 --> too much, cut branch\r\n       \\\r\n      100,000(C) -----> ÃÂ£=1,200,000 --> too much, cut branch\r\nÃ¢ÂÂ¦\r\nand once you've tried all 99 other 100 with 100,000(A), you'd try the remaining 98 100,000s with 100,000(B) and so forth.\r\n\r\n\r\nIf we don't allow expanding a branch that has the same value at the same position this becomes:\r\n\r\n1,000,000\r\n/     \\\r\n|     100,000(A)\r\n|      /   \\\r\n|    0   100,000(B) -----> ÃÂ£=1,200,000 --> too much, cut branch\r\n|      \\\r\n|     100,000(C-CV) -----> don't expand, already considered 100,000 in combo with this 0th and 1st\r\n|\r\n100,000(B-CV) ----->  don't expand, already considered 100,000 in combo with this 0th\r\nDone, no solution.\r\n\r\nIn practice this could be implemented by remembering the value of the last item that we backtracked from and requiring that any new UTXO we consider for that position is at least one satoshi smaller.",
      "created_at" : "2018-02-15T00:08:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-365787138",
      "id" : 365787138,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-02-15T00:20:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365787138",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Row 4 has \"min input set\" of 0, but a transaction must have at least one input.\r\n\r\nThat's strange. I'll rerun that simulation.\r\n\r\n> Why do you think did the BnB usage almost halve?\r\n\r\nI think that's a consequence of the bug I fixed. The BnB usage in the previous simulations was the number of times that BnB was hit, but BnB wasn't actually used for the actual coin selection; the normal normal coin selector was used. So some inputs weren't actually consumed, and additional change outputs were created which would then allow for more hits with BnB as there are more UTXOs.\r\n\r\n> Are you using the solution of the RandomSelector if it has a lower waste metric\r\n\r\nNo, the random selector is not implemented yet.\r\n\r\n> The minChange of 0.00005428 also seems oddly low. Did the wallet balance dip to zero in your simulation?\r\n\r\nI believe it did. Such low values of min change do line up with the min change values for the normal coin selector though.\r\n\r\n> When exploring the combination tree, we should never allow a second branch to place the same value in the same position.\r\n\r\nWe still need to take into account the waste though; two outputs with the same effective value could still have different waste values which may make one output more desireable than another even with the same values. When we backtrack, we aren't always cutting off a branch; we could have backtracked in order to find something else with a lower waste value.",
      "created_at" : "2018-02-15T03:04:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-365813560",
      "id" : 365813560,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-02-15T03:04:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365813560",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "See https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-370539486 for updated results\r\n\r\n***\r\n\r\n@Xekyo These are the new results for that one simulation. I think that was just a spurious error:\r\n\r\n| Fees file | Simulation File | final value | total sent | total deposited | mean #UTXO | final #UTXO | #received | #spent | #payments sent |#changes created | min change | max change | mean change | stDev of change | total fees | average fees | fees to spend remaining UTXO | total cost | min input set | max input set | mean size of input set | stdev of input set size  | BnB Usage |\r\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---| --- | --- |\r\n| fees-bitcoinfees-info-cycle.csv | derived-1I-2O.csv | 55.88713708 | -2484.3994 | 2540.3143409799973 | 20.622487052402963314534645178355276584625244140625 | 19 | 6097 | 17905 | 11860 | 11827 | 0.00999239 | 9.14499834 | 0.10454406 | 0.29314873 | -0.02520206 | -0.0000021249629 | -0.0000281200000000000018191871620221178318388410843908786773681640625 | -0.025230180 | 1 | 27 | 1.5096964586846544076337295336998067796230316162109375 | 1.0713591908561592713766685847076587378978729248046875 | 33/11860 |",
      "created_at" : "2018-02-15T18:56:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-366026194",
      "id" : 366026194,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-05T19:45:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/366026194",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "All of the valid results for varying fee rate simulations, but readable\r\n\r\n| Type | Fees file | Simulation File | final value | mean #UTXO | final #UTXO | #received | #spent | #changes created | min change | max change | mean change | stDev of change | total fees | average fees | total cost | min input set | max input set | mean size of input set | stdev of input set size | BnB Usage |\r\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | ---| --- | --- |\r\n| BnB+Core | fees-bitcoinfees-info-repeats.csv | derived-1I-2O.csv | 55.88713405 | 19.86 | 17 | 6097 | 17913 | 11833 | 0.00997809 | 4.15153434 | 0.10399897 | 0.28233767 | -0.02520509 | -0.00000213 | -0.02523025 | 1 | 24 | 1.51 | 1.04 | 27/11860 |\r\n| Core | fees-bitcoinfees-info-repeats.csv | derived-1I-2O.csv | 55.88712329 | 27.51 | 22 | 6097 | 17935 | 11860 | 0.00001005 | 10.30069834 | 0.29223202 | 0.72740965 | -0.02521585 | -0.00000213 | -0.02524841 | 1 | 21 | 1.51 | 1.20 | N/A |\r\n| BnB+Core | fees-bitcoinfees-info-cycle.csv | derived-1I-2O.csv | 55.88713391 | 22.93 | 19 | 6097 | 17909 | 11831 | 0.00998908 | 9.14499834 | 0.10465966 | 0.28952080 | -0.02520523 | -0.00000213 | -0.02523335 | 0 | 27 | 1.51 | 1.05 | 28/11860 |\r\n| Core | fees-bitcoinfees-info-cycle.csv | derived-1I-2O.csv | 55.88712420 | 26.84 | 23 | 6097 | 17934 | 11860 | 0.00002034 | 10.30069834 | 0.28121957 | 0.65214921 | -0.02521494 | -0.00000213 | -0.02524898 | 1 | 21 | 1.51 | 1.17 | N/A |\r\n| BnB+Core | fees-bitcoinfees-info-repeats.csv | derived-balanced.csv | 55.88171750 | 27.27 | 21 | 12194 | 23840 | 11667 | 0.00221449 | 5.69999834 | 0.056819638 | 0.19930147 | -0.03062164 | -0.00000258 | -0.03065272 | 1 | 84 | 2.01 | 1.83 | 193/11860 |\r\n| Core | fees-bitcoinfees-info-repeats.csv | derived-balanced.csv | 55.88158139 | 37.74 | 29 | 12194 | 24025 | 11860 | 0.00030847 | 9.96073034 | 0.10688567 | 0.34970815 | -0.03075775 | -0.00000259 | -0.03080067 | 1 | 32 | 2.03 | 1.74 | N/A |\r\n| BnB+Core | fees-bitcoinfees-info-cycle.csv | derived-balanced.csv | 55.88173059 | 28.78 | 20 | 12194 | 23831 | 11657 | 0.00223019 | 5.69999834 | 0.056200963 | 0.19728515 | -0.03060855 | -0.00000258 | -0.03063815 | 1 | 45 | 2.01 | 1.72 | 203/11860 |\r\n| Core | fees-bitcoinfees-info-cycle.csv | derived-balanced.csv | 55.88158048 | 36.26 | 28 | 12194 | 24026 | 11860 | 0.00006546 | 9.91069834 | 0.12069723 | 0.41430597 | -0.03075866 | -0.00000259 | -0.03080010 | 1 | 44 | 2.026 | 1.84 | N/A |\r\n| BnB+Core | fees-bitcoinfees-info-repeats.csv | moneypot.csv | 55.87130774 | 131.06 | 33 | 24388 | 35121 | 10766 | 0.00005428 | 4.69999834 | 0.036069275 | 0.13266262 | -0.04103140 | -0.00000346 | -0.04108024 | 1 | 279 | 2.96 | 4.20 | 1094/11860 |\r\n| Core | fees-bitcoinfees-info-repeats.csv | moneypot.csv | 55.87047548 | 208.40 | 29 | 24388 | 36214 | 11855 | 0.00001333 | 7.99999834 | 0.055334876 | 0.25061846 | -0.04186366 | -0.00000353 | -0.04190658 | 1 | 668 | 3.05 | 7.05 | N/A |\r\n| BnB+Core | fees-bitcoinfees-info-cycle.csv | moneypot.csv | 55.87119478 | 64.37 | 29 | 24388 | 35312 | 10953 | 0.00015309 | 4.69999834 | 0.035168758 | 0.12918029 | -0.04114436 | -0.00000347 | -0.04118728 | 1 | 92 | 2.98 | 2.90 | 907/11860 |\r\n| Core | fees-bitcoinfees-info-cycle.csv | moneypot.csv | 55.87049772 | 218.06 | 49 | 24388 | 36197 | 11858 | 0.00000184 | 9.20999834 | 0.046778658 | 0.22037920 | -0.04184142 | -0.00000353 | -0.04191394 | 1 | 338 | 3.05 | 5.70 |  N/A |\r\n",
      "created_at" : "2018-03-05T19:43:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-370539486",
      "id" : 370539486,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-05T19:43:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/370539486",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> We still need to take into account the waste though; two outputs with the same effective value could still have different waste values which may make one output more desireable than another even with the same values. When we backtrack, we aren't always cutting off a branch; we could have backtracked in order to find something else with a lower waste value.\r\n\r\nOkay: We should not allow two outputs with the same effective value and same waste. I guess that would mean that we should potentially sort the UTXO for BnB by effective value first and then by waste.",
      "created_at" : "2018-03-05T20:42:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-370557819",
      "id" : 370557819,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-05T20:42:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/370557819",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172323411"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172323411"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Just curious, why 2012-2016?",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-05T20:49:07Z",
      "diff_hunk" : "@@ -0,0 +1,300 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172323411",
      "id" : 172323411,
      "original_commit_id" : "6d4586d130176afa800ff23354d4ff05076ba39e",
      "original_position" : 1,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101321534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172323411",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172323879"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172323879"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "We may need to additionally sort by waste here.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-05T20:50:43Z",
      "diff_hunk" : "@@ -0,0 +1,300 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172323879",
      "id" : 172323879,
      "original_commit_id" : "6d4586d130176afa800ff23354d4ff05076ba39e",
      "original_position" : 13,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101321534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172323879",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172326972"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172326972"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "\"within the current threshold\" -> within the target range?",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-05T21:01:59Z",
      "diff_hunk" : "@@ -0,0 +1,300 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the current threshold. If it is over the threshold, we try excluding",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172326972",
      "id" : 172326972,
      "original_commit_id" : "6d4586d130176afa800ff23354d4ff05076ba39e",
      "original_position" : 22,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101321534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172326972",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172329752"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172329752"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: descending order *by what metric* ;)",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-05T21:12:31Z",
      "diff_hunk" : "@@ -0,0 +1,300 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the current threshold. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172329752",
      "id" : 172329752,
      "original_commit_id" : "6d4586d130176afa800ff23354d4ff05076ba39e",
      "original_position" : 36,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101321534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172329752",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172345389"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172345389"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Do we have a test that checks whether this behaves correctly for fee rates below the longterm expected fee rate? (I seem to remember that we discussed that before, and we came to the conclusion that it is correct, but if we had a test I'd be more comfortable.)",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-05T22:07:37Z",
      "diff_hunk" : "@@ -0,0 +1,300 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the current threshold. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing exclusion branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172345389",
      "id" : 172345389,
      "original_commit_id" : "c2e2db1806bbae3a2fb3c55ec0ebacb5c70fe0d3",
      "original_position" : 84,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101321534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172345389",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172347860"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172347860"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why are you recalculating value_ret, when you've been tracking it above before?",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-05T22:16:33Z",
      "diff_hunk" : "@@ -0,0 +1,300 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the current threshold. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing exclusion branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            curr_waste += (value_ret - target_value); // This is the excess value which is added to the waste for the below comparison\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_ret - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + lookahead < target_value) { // Cannot possibly reach target with the amount remaining in the lookahead\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                break;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+\n+            // Remove this utxo from the lookahead utxo amount\n+            lookahead -= utxo_pool.at(depth).txout.nValue;\n+            // Increase waste\n+            curr_waste += (utxo_pool.at(depth).fee - utxo_pool.at(depth).long_term_fee);\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                selection.at(depth).first = false;\n+                selection.at(depth).second = false;\n+                lookahead += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    done = true;\n+                    break;\n+                }\n+            }\n+\n+            if (!done) {\n+                // Now traverse the second branch of the utxo we have arrived at.\n+                selection.at(depth).second = true;\n+\n+                // These were always included first, try excluding now\n+                selection.at(depth).first = false;\n+                value_ret -= utxo_pool.at(depth).txout.nValue;\n+                curr_waste -= (utxo_pool.at(depth).fee - utxo_pool.at(depth).long_term_fee);\n+                ++depth;\n+            }\n+        }\n+        --remaining_tries;\n+    }\n+\n+    // Check for solution\n+    if (best_selection.empty()) {\n+        return false;\n+    }\n+\n+    // Set output set\n+    value_ret = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172347860",
      "id" : 172347860,
      "original_commit_id" : "c2e2db1806bbae3a2fb3c55ec0ebacb5c70fe0d3",
      "original_position" : 155,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 156,
      "pull_request_review_id" : 101321534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172347860",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172349615"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172349615"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "typo: Aalways\r\n\r\nNote to self, got up to here.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-05T22:23:23Z",
      "diff_hunk" : "@@ -20,6 +20,22 @@ CAmount GetRequiredFee(unsigned int nTxBytes)\n \n \n CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc)\n+{\n+    CAmount fee_needed = GetMinimumFeeRate(coin_control, pool, estimator, feeCalc).GetFee(nTxBytes);\n+    // Aalways obey the maximum",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172349615",
      "id" : 172349615,
      "original_commit_id" : "c2e2db1806bbae3a2fb3c55ec0ebacb5c70fe0d3",
      "original_position" : 6,
      "path" : "src/wallet/fees.cpp",
      "position" : null,
      "pull_request_review_id" : 101321534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172349615",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172355279"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172355279"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why?",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-05T22:45:59Z",
      "diff_hunk" : "@@ -0,0 +1,300 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172355279",
      "id" : 172355279,
      "in_reply_to_id" : 172323879,
      "original_commit_id" : "6d4586d130176afa800ff23354d4ff05076ba39e",
      "original_position" : 13,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101358570,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172355279",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172355917"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172355917"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The `value_ret` above is not necessarily our best set. It is used for tracking our work during the selection so it may not actually be the value for the selection we want to use. It should probably be a different variable.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-05T22:48:55Z",
      "diff_hunk" : "@@ -0,0 +1,300 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the current threshold. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing exclusion branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            curr_waste += (value_ret - target_value); // This is the excess value which is added to the waste for the below comparison\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_ret - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + lookahead < target_value) { // Cannot possibly reach target with the amount remaining in the lookahead\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                break;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+\n+            // Remove this utxo from the lookahead utxo amount\n+            lookahead -= utxo_pool.at(depth).txout.nValue;\n+            // Increase waste\n+            curr_waste += (utxo_pool.at(depth).fee - utxo_pool.at(depth).long_term_fee);\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                selection.at(depth).first = false;\n+                selection.at(depth).second = false;\n+                lookahead += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    done = true;\n+                    break;\n+                }\n+            }\n+\n+            if (!done) {\n+                // Now traverse the second branch of the utxo we have arrived at.\n+                selection.at(depth).second = true;\n+\n+                // These were always included first, try excluding now\n+                selection.at(depth).first = false;\n+                value_ret -= utxo_pool.at(depth).txout.nValue;\n+                curr_waste -= (utxo_pool.at(depth).fee - utxo_pool.at(depth).long_term_fee);\n+                ++depth;\n+            }\n+        }\n+        --remaining_tries;\n+    }\n+\n+    // Check for solution\n+    if (best_selection.empty()) {\n+        return false;\n+    }\n+\n+    // Set output set\n+    value_ret = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172355917",
      "id" : 172355917,
      "in_reply_to_id" : 172347860,
      "original_commit_id" : "c2e2db1806bbae3a2fb3c55ec0ebacb5c70fe0d3",
      "original_position" : 155,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 156,
      "pull_request_review_id" : 101359368,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172355917",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172356271"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172356271"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-05T22:50:33Z",
      "diff_hunk" : "@@ -20,6 +20,22 @@ CAmount GetRequiredFee(unsigned int nTxBytes)\n \n \n CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc)\n+{\n+    CAmount fee_needed = GetMinimumFeeRate(coin_control, pool, estimator, feeCalc).GetFee(nTxBytes);\n+    // Aalways obey the maximum",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172356271",
      "id" : 172356271,
      "in_reply_to_id" : 172349615,
      "original_commit_id" : "c2e2db1806bbae3a2fb3c55ec0ebacb5c70fe0d3",
      "original_position" : 6,
      "path" : "src/wallet/fees.cpp",
      "position" : null,
      "pull_request_review_id" : 101359792,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172356271",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172356288"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172356288"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-05T22:50:38Z",
      "diff_hunk" : "@@ -0,0 +1,300 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the current threshold. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172356288",
      "id" : 172356288,
      "in_reply_to_id" : 172329752,
      "original_commit_id" : "6d4586d130176afa800ff23354d4ff05076ba39e",
      "original_position" : 36,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101359816,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172356288",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172356311"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172356311"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-05T22:50:44Z",
      "diff_hunk" : "@@ -0,0 +1,300 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the current threshold. If it is over the threshold, we try excluding",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172356311",
      "id" : 172356311,
      "in_reply_to_id" : 172326972,
      "original_commit_id" : "6d4586d130176afa800ff23354d4ff05076ba39e",
      "original_position" : 22,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101359842,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172356311",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172356341"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172356341"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changed to 2017",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-05T22:50:54Z",
      "diff_hunk" : "@@ -0,0 +1,300 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172356341",
      "id" : 172356341,
      "in_reply_to_id" : 172323411,
      "original_commit_id" : "6d4586d130176afa800ff23354d4ff05076ba39e",
      "original_position" : 1,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101359884,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172356341",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172568830"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172568830"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah, let's make it two different variables with clear names.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T16:08:41Z",
      "diff_hunk" : "@@ -0,0 +1,300 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the current threshold. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing exclusion branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<std::pair<bool, bool>> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (curr_waste > best_waste) { // Don't select things which we know will be more wasteful\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            curr_waste += (value_ret - target_value); // This is the excess value which is added to the waste for the below comparison\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_ret - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + lookahead < target_value) { // Cannot possibly reach target with the amount remaining in the lookahead\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                break;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+\n+            // Remove this utxo from the lookahead utxo amount\n+            lookahead -= utxo_pool.at(depth).txout.nValue;\n+            // Increase waste\n+            curr_waste += (utxo_pool.at(depth).fee - utxo_pool.at(depth).long_term_fee);\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                selection.at(depth).first = false;\n+                selection.at(depth).second = false;\n+                lookahead += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    done = true;\n+                    break;\n+                }\n+            }\n+\n+            if (!done) {\n+                // Now traverse the second branch of the utxo we have arrived at.\n+                selection.at(depth).second = true;\n+\n+                // These were always included first, try excluding now\n+                selection.at(depth).first = false;\n+                value_ret -= utxo_pool.at(depth).txout.nValue;\n+                curr_waste -= (utxo_pool.at(depth).fee - utxo_pool.at(depth).long_term_fee);\n+                ++depth;\n+            }\n+        }\n+        --remaining_tries;\n+    }\n+\n+    // Check for solution\n+    if (best_selection.empty()) {\n+        return false;\n+    }\n+\n+    // Set output set\n+    value_ret = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172568830",
      "id" : 172568830,
      "in_reply_to_id" : 172347860,
      "original_commit_id" : "c2e2db1806bbae3a2fb3c55ec0ebacb5c70fe0d3",
      "original_position" : 155,
      "path" : "src/wallet/coinselection.cpp",
      "position" : 156,
      "pull_request_review_id" : 101607314,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172568830",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172609876"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172609876"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Withdrawn after personal conversation.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T18:13:55Z",
      "diff_hunk" : "@@ -0,0 +1,300 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172609876",
      "id" : 172609876,
      "in_reply_to_id" : 172323879,
      "original_commit_id" : "6d4586d130176afa800ff23354d4ff05076ba39e",
      "original_position" : 13,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101656547,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172609876",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172626559"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172626559"
         }
      },
      "author_association" : "MEMBER",
      "body" : "waste is a tie-breaker or a short-circuit. Shouldn't need it.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T19:08:59Z",
      "diff_hunk" : "@@ -0,0 +1,300 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172626559",
      "id" : 172626559,
      "in_reply_to_id" : 172323879,
      "original_commit_id" : "6d4586d130176afa800ff23354d4ff05076ba39e",
      "original_position" : 13,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101676264,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172626559",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172627337"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172627337"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this should be a constant",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T19:11:43Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172627337",
      "id" : 172627337,
      "original_commit_id" : "859160cfdb834878b0a9fdddcc6622b14aeb4c7d",
      "original_position" : 56,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101676264,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172627337",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172628072"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172628072"
         }
      },
      "author_association" : "MEMBER",
      "body" : "just say effective value again to clear up ambiguity.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T19:14:27Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by value and the CInputCoins' values are their effective values.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172628072",
      "id" : 172628072,
      "original_commit_id" : "859160cfdb834878b0a9fdddcc6622b14aeb4c7d",
      "original_position" : 37,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101676264,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172628072",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172639370"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172639370"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This should just be a check after calculating the original value. Has no additional checking power here.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T19:52:27Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        } else if (value_track + lookahead < target_value) { // Cannot possibly reach target with the amount remaining in the lookahead.\n+            // This also catches if we are at a leaf node and still have not met the target value\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172639370",
      "id" : 172639370,
      "original_commit_id" : "859160cfdb834878b0a9fdddcc6622b14aeb4c7d",
      "original_position" : 83,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101676264,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172639370",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172641358"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172641358"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It can't be a constant because it is being decremented.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T19:59:27Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172641358",
      "id" : 172641358,
      "in_reply_to_id" : 172627337,
      "original_commit_id" : "859160cfdb834878b0a9fdddcc6622b14aeb4c7d",
      "original_position" : 56,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101694043,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172641358",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172642198"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172642198"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T20:02:35Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by value and the CInputCoins' values are their effective values.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172642198",
      "id" : 172642198,
      "in_reply_to_id" : 172628072,
      "original_commit_id" : "859160cfdb834878b0a9fdddcc6622b14aeb4c7d",
      "original_position" : 37,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101695095,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172642198",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172642410"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172642410"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I meant static constant, but meh",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T20:03:19Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172642410",
      "id" : 172642410,
      "in_reply_to_id" : 172627337,
      "original_commit_id" : "859160cfdb834878b0a9fdddcc6622b14aeb4c7d",
      "original_position" : 56,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101695333,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172642410",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172642422"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172642422"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed. Also compacted the next 2 `else if`s with this one to make one large `else if` with `or`.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T20:03:21Z",
      "diff_hunk" : "@@ -0,0 +1,175 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        } else if (value_track + lookahead < target_value) { // Cannot possibly reach target with the amount remaining in the lookahead.\n+            // This also catches if we are at a leaf node and still have not met the target value\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172642422",
      "id" : 172642422,
      "in_reply_to_id" : 172639370,
      "original_commit_id" : "859160cfdb834878b0a9fdddcc6622b14aeb4c7d",
      "original_position" : 83,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101695348,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172642422",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172648187"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172648187"
         }
      },
      "author_association" : "MEMBER",
      "body" : "duplicate of prior line",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T20:24:14Z",
      "diff_hunk" : "@@ -0,0 +1,174 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+    if (lookahead < target_value) {\n+        return false;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        // Failure mode\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        }\n+        // Conditions for starting a backtrack\n+        else if ( value_track + lookahead < target_value || // Cannot possibly reach target with the amount remaining in the lookahead.\n+                    value_track > target_value + cost_of_change || // Selected value is out of range, go back and try other branch\n+                    (curr_waste > best_waste && (utxo_pool.at(0).fee - utxo_pool.at(0).long_term_fee) > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n+            backtrack = true;\n+        } else if (value_track >= target_value) { // Selected value is within range\n+            curr_waste += (value_track - target_value); // This is the excess value which is added to the waste for the below comparison\n+            // Adding another UTXO after this check could bring the waste down if the long term fee is higher than the current fee.\n+            // However we are not going to explore that because this optimization for the waste is only done when we have hit our target\n+            // value. Adding any more UTXOs will be just burning the UTXO; it will go entirely to fees. Thus we aren't going to\n+            // explore any more UTXOs to avoid burning money like that.\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_track - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        }\n+\n+        // Backtracking, moving backwards\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (!selection.at(depth)) {\n+                selection.at(depth) = false;\n+                selection.at(depth) = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172648187",
      "id" : 172648187,
      "original_commit_id" : "235da3d4ec31e343e8805b13e9a1fa7b03b5e068",
      "original_position" : 113,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101702149,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172648187",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172649722"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172649722"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agree on removing this unnecessary check",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T20:30:15Z",
      "diff_hunk" : "@@ -0,0 +1,262 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(CInputCoin a, CInputCoin b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+struct CompareValueOnly\n+{\n+    bool operator()(const CInputCoin& t1,\n+                    const CInputCoin& t2) const\n+    {\n+        return t1.txout.nValue < t2.txout.nValue;\n+    }\n+};\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, std::vector<CAmount>& fee_vec, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    value_ret = 0;\n+\n+    if (utxo_pool.size() <=0) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int tries = 100000;\n+    std::vector<std::pair<bool, bool>> selection; // First bool: select the utxo at this index; Second bool: traversing second branch of this utxo\n+    selection.assign(utxo_pool.size(), std::pair<bool, bool>(false, false));\n+    bool done = false;\n+    bool backtrack = false;\n+    \n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+    \n+    // Calculate remaining\n+    CAmount remaining = 0;\n+    for (CInputCoin utxo : utxo_pool) {\n+        remaining += utxo.txout.nValue;\n+    }\n+    \n+    // Depth first search to find \n+    while (!done)\n+    {\n+        if (tries <= 0) { // Too many tries, exit\n+            return false;\n+        } else if (value_ret > target_value + cost_of_change) { // Selected value is out of range, go back and try other branch\n+            backtrack = true;\n+        } else if (value_ret >= target_value) { // Selected value is within range\n+            done = true;\n+        } else if (depth >= (int)utxo_pool.size()) { // Reached a leaf node, no solution here\n+            backtrack = true;\n+        } else if (value_ret + remaining < target_value) { // Cannot possibly reach target with amount remaining\n+            if (depth == 0) { // At the first utxo, no possible selections, so exit\n+                return false;\n+            } else {\n+                backtrack = true;\n+            }\n+        } else { // Continue down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);\n+        \n+            // Remove this utxo from the remaining utxo amount\n+            remaining -= utxo_pool.at(depth).txout.nValue;\n+            // Inclusion branch first (Largest First Exploration)\n+            selection.at(depth).first = true;\n+            value_ret += utxo_pool.at(depth).txout.nValue;\n+            ++depth;\n+        }\n+\n+        // Step back to the previous utxo and try the other branch\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (selection.at(depth).second) {\n+                // Reset this utxo's selection\n+                if (selection.at(depth).first) {\n+                    value_ret -= utxo_pool.at(depth).txout.nValue;\n+                }\n+                selection.at(depth).first = false;\n+                selection.at(depth).second = false;\n+                remaining += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    return false;\n+                }\n+            }\n+            \n+            if (!done) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172649722",
      "id" : 172649722,
      "in_reply_to_id" : 128078130,
      "original_commit_id" : "71e9d683be87ee81e90bb0aac6c52c6705fb4266",
      "original_position" : 103,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101702149,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172649722",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172650304"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172650304"
         }
      },
      "author_association" : "MEMBER",
      "body" : "actually can remove both of these, `selection.at(depth)` is already false.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T20:32:22Z",
      "diff_hunk" : "@@ -0,0 +1,174 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+    if (lookahead < target_value) {\n+        return false;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        // Failure mode\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        }\n+        // Conditions for starting a backtrack\n+        else if ( value_track + lookahead < target_value || // Cannot possibly reach target with the amount remaining in the lookahead.\n+                    value_track > target_value + cost_of_change || // Selected value is out of range, go back and try other branch\n+                    (curr_waste > best_waste && (utxo_pool.at(0).fee - utxo_pool.at(0).long_term_fee) > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n+            backtrack = true;\n+        } else if (value_track >= target_value) { // Selected value is within range\n+            curr_waste += (value_track - target_value); // This is the excess value which is added to the waste for the below comparison\n+            // Adding another UTXO after this check could bring the waste down if the long term fee is higher than the current fee.\n+            // However we are not going to explore that because this optimization for the waste is only done when we have hit our target\n+            // value. Adding any more UTXOs will be just burning the UTXO; it will go entirely to fees. Thus we aren't going to\n+            // explore any more UTXOs to avoid burning money like that.\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_track - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        }\n+\n+        // Backtracking, moving backwards\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (!selection.at(depth)) {\n+                selection.at(depth) = false;\n+                selection.at(depth) = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172650304",
      "id" : 172650304,
      "in_reply_to_id" : 172648187,
      "original_commit_id" : "235da3d4ec31e343e8805b13e9a1fa7b03b5e068",
      "original_position" : 113,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101702149,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172650304",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172651597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172651597"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "duplicate line",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T20:37:05Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+    if (lookahead < target_value) {\n+        return false;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        // Failure mode\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        }\n+        // Conditions for starting a backtrack\n+        else if ( value_track + lookahead < target_value || // Cannot possibly reach target with the amount remaining in the lookahead.\n+                    value_track > target_value + cost_of_change || // Selected value is out of range, go back and try other branch\n+                    (curr_waste > best_waste && (utxo_pool.at(0).fee - utxo_pool.at(0).long_term_fee) > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n+            backtrack = true;\n+        } else if (value_track >= target_value) { // Selected value is within range\n+            curr_waste += (value_track - target_value); // This is the excess value which is added to the waste for the below comparison\n+            // Adding another UTXO after this check could bring the waste down if the long term fee is higher than the current fee.\n+            // However we are not going to explore that because this optimization for the waste is only done when we have hit our target\n+            // value. Adding any more UTXOs will be just burning the UTXO; it will go entirely to fees. Thus we aren't going to\n+            // explore any more UTXOs to avoid burning money like that.\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_track - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        }\n+\n+        // Backtracking, moving backwards\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (!selection.at(depth)) {\n+                selection.at(depth) = false;\n+                selection.at(depth) = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172651597",
      "id" : 172651597,
      "original_commit_id" : "bf280e465946e39effe9acf52330dfb0628f1674",
      "original_position" : 113,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101706205,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172651597",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172652011"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172652011"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not loving the way we track depth, it gets a bit confusing to make sure it stays in bounds.  I don't know if it's possible to hit in practice, but if you are trying to pay 0 total value, then you'll end up here trying to do `selection.at(-1)`.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T20:38:48Z",
      "diff_hunk" : "@@ -0,0 +1,174 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+    if (lookahead < target_value) {\n+        return false;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        // Failure mode\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        }\n+        // Conditions for starting a backtrack\n+        else if ( value_track + lookahead < target_value || // Cannot possibly reach target with the amount remaining in the lookahead.\n+                    value_track > target_value + cost_of_change || // Selected value is out of range, go back and try other branch\n+                    (curr_waste > best_waste && (utxo_pool.at(0).fee - utxo_pool.at(0).long_term_fee) > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n+            backtrack = true;\n+        } else if (value_track >= target_value) { // Selected value is within range\n+            curr_waste += (value_track - target_value); // This is the excess value which is added to the waste for the below comparison\n+            // Adding another UTXO after this check could bring the waste down if the long term fee is higher than the current fee.\n+            // However we are not going to explore that because this optimization for the waste is only done when we have hit our target\n+            // value. Adding any more UTXOs will be just burning the UTXO; it will go entirely to fees. Thus we aren't going to\n+            // explore any more UTXOs to avoid burning money like that.\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_track - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        }\n+\n+        // Backtracking, moving backwards\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (!selection.at(depth)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172652011",
      "id" : 172652011,
      "original_commit_id" : "235da3d4ec31e343e8805b13e9a1fa7b03b5e068",
      "original_position" : 111,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101702149,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172652011",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172652108"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172652108"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I thought you're filtering effective values to be strictly bigger than zero.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T20:39:09Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+    if (lookahead < target_value) {\n+        return false;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        // Failure mode\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        }\n+        // Conditions for starting a backtrack\n+        else if ( value_track + lookahead < target_value || // Cannot possibly reach target with the amount remaining in the lookahead.\n+                    value_track > target_value + cost_of_change || // Selected value is out of range, go back and try other branch\n+                    (curr_waste > best_waste && (utxo_pool.at(0).fee - utxo_pool.at(0).long_term_fee) > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n+            backtrack = true;\n+        } else if (value_track >= target_value) { // Selected value is within range\n+            curr_waste += (value_track - target_value); // This is the excess value which is added to the waste for the below comparison\n+            // Adding another UTXO after this check could bring the waste down if the long term fee is higher than the current fee.\n+            // However we are not going to explore that because this optimization for the waste is only done when we have hit our target\n+            // value. Adding any more UTXOs will be just burning the UTXO; it will go entirely to fees. Thus we aren't going to\n+            // explore any more UTXOs to avoid burning money like that.\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_track - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        }\n+\n+        // Backtracking, moving backwards\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (!selection.at(depth)) {\n+                selection.at(depth) = false;\n+                selection.at(depth) = false;\n+                lookahead += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    done = true;\n+                    break;\n+                }\n+            }\n+\n+            if (!done) {\n+                // These were always included first, try excluding now\n+                selection.at(depth) = false;\n+                value_track -= utxo_pool.at(depth).txout.nValue;\n+                curr_waste -= (utxo_pool.at(depth).fee - utxo_pool.at(depth).long_term_fee);\n+                ++depth;\n+            }\n+        } else { // Moving forwards, continuing down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172652108",
      "id" : 172652108,
      "original_commit_id" : "bf280e465946e39effe9acf52330dfb0628f1674",
      "original_position" : 134,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101706874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172652108",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172655805"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172655805"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree, but we shouldn't have a 0 value target in practice. I could just add a check to make sure that `depth` is greater than 0 before decrementing it.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T20:52:47Z",
      "diff_hunk" : "@@ -0,0 +1,174 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+    if (lookahead < target_value) {\n+        return false;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        // Failure mode\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        }\n+        // Conditions for starting a backtrack\n+        else if ( value_track + lookahead < target_value || // Cannot possibly reach target with the amount remaining in the lookahead.\n+                    value_track > target_value + cost_of_change || // Selected value is out of range, go back and try other branch\n+                    (curr_waste > best_waste && (utxo_pool.at(0).fee - utxo_pool.at(0).long_term_fee) > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n+            backtrack = true;\n+        } else if (value_track >= target_value) { // Selected value is within range\n+            curr_waste += (value_track - target_value); // This is the excess value which is added to the waste for the below comparison\n+            // Adding another UTXO after this check could bring the waste down if the long term fee is higher than the current fee.\n+            // However we are not going to explore that because this optimization for the waste is only done when we have hit our target\n+            // value. Adding any more UTXOs will be just burning the UTXO; it will go entirely to fees. Thus we aren't going to\n+            // explore any more UTXOs to avoid burning money like that.\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_track - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        }\n+\n+        // Backtracking, moving backwards\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (!selection.at(depth)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172655805",
      "id" : 172655805,
      "in_reply_to_id" : 172652011,
      "original_commit_id" : "235da3d4ec31e343e8805b13e9a1fa7b03b5e068",
      "original_position" : 111,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101711211,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172655805",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172655824"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172655824"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T20:52:51Z",
      "diff_hunk" : "@@ -0,0 +1,309 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+    if (lookahead < target_value) {\n+        return false;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        // Failure mode\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        }\n+        // Conditions for starting a backtrack\n+        else if ( value_track + lookahead < target_value || // Cannot possibly reach target with the amount remaining in the lookahead.\n+                    value_track > target_value + cost_of_change || // Selected value is out of range, go back and try other branch\n+                    (curr_waste > best_waste && (utxo_pool.at(0).fee - utxo_pool.at(0).long_term_fee) > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n+            backtrack = true;\n+        } else if (value_track >= target_value) { // Selected value is within range\n+            curr_waste += (value_track - target_value); // This is the excess value which is added to the waste for the below comparison\n+            // Adding another UTXO after this check could bring the waste down if the long term fee is higher than the current fee.\n+            // However we are not going to explore that because this optimization for the waste is only done when we have hit our target\n+            // value. Adding any more UTXOs will be just burning the UTXO; it will go entirely to fees. Thus we aren't going to\n+            // explore any more UTXOs to avoid burning money like that.\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_track - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        }\n+\n+        // Backtracking, moving backwards\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (!selection.at(depth)) {\n+                selection.at(depth) = false;\n+                selection.at(depth) = false;\n+                lookahead += utxo_pool.at(depth).txout.nValue;\n+\n+                // Step back one\n+                --depth;\n+\n+                if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.\n+                    done = true;\n+                    break;\n+                }\n+            }\n+\n+            if (!done) {\n+                // These were always included first, try excluding now\n+                selection.at(depth) = false;\n+                value_track -= utxo_pool.at(depth).txout.nValue;\n+                curr_waste -= (utxo_pool.at(depth).fee - utxo_pool.at(depth).long_term_fee);\n+                ++depth;\n+            }\n+        } else { // Moving forwards, continuing down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).txout.nValue >= 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172655824",
      "id" : 172655824,
      "in_reply_to_id" : 172652108,
      "original_commit_id" : "bf280e465946e39effe9acf52330dfb0628f1674",
      "original_position" : 134,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101711235,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172655824",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172677004"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172677004"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: spacing",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T22:07:59Z",
      "diff_hunk" : "@@ -0,0 +1,172 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+    if (lookahead < target_value) {\n+        return false;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        // Failure mode\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        }\n+        // Conditions for starting a backtrack\n+        else if ( value_track + lookahead < target_value || // Cannot possibly reach target with the amount remaining in the lookahead.\n+                    value_track > target_value + cost_of_change || // Selected value is out of range, go back and try other branch",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172677004",
      "id" : 172677004,
      "original_commit_id" : "d55accd6e5096203f305790335381ddceb56a1d4",
      "original_position" : 88,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101736260,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172677004",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172677957"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172677957"
         }
      },
      "author_association" : "MEMBER",
      "body" : "typo: has not had",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T22:11:22Z",
      "diff_hunk" : "@@ -0,0 +1,172 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+    if (lookahead < target_value) {\n+        return false;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        // Failure mode\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        }\n+        // Conditions for starting a backtrack\n+        else if ( value_track + lookahead < target_value || // Cannot possibly reach target with the amount remaining in the lookahead.\n+                    value_track > target_value + cost_of_change || // Selected value is out of range, go back and try other branch\n+                    (curr_waste > best_waste && (utxo_pool.at(0).fee - utxo_pool.at(0).long_term_fee) > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n+            backtrack = true;\n+        } else if (value_track >= target_value) { // Selected value is within range\n+            curr_waste += (value_track - target_value); // This is the excess value which is added to the waste for the below comparison\n+            // Adding another UTXO after this check could bring the waste down if the long term fee is higher than the current fee.\n+            // However we are not going to explore that because this optimization for the waste is only done when we have hit our target\n+            // value. Adding any more UTXOs will be just burning the UTXO; it will go entirely to fees. Thus we aren't going to\n+            // explore any more UTXOs to avoid burning money like that.\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_track - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        }\n+\n+        // Backtracking, moving backwards\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172677957",
      "id" : 172677957,
      "original_commit_id" : "d55accd6e5096203f305790335381ddceb56a1d4",
      "original_position" : 110,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101736260,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172677957",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172679432"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172679432"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is wrong, we need to look for segwit spends directly, then decrements by 1 virtual byte, since these are witness bytes.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T22:16:47Z",
      "diff_hunk" : "@@ -1536,6 +1536,74 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n+// Helper for producing a bunch of max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    int nIn = 0;\n+    for (const auto& txout : txouts)\n+    {\n+        const CScript& scriptPubKey = txout.scriptPubKey;\n+        SignatureData sigdata;\n+\n+        if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+        {\n+            return false;\n+        } else {\n+            UpdateTransaction(txNew, nIn, sigdata);\n+        }\n+\n+        nIn++;\n+    }\n+    return true;\n+}\n+\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet)\n+{\n+    std::vector<CTxOut> txouts;\n+    // Look up the inputs.  We should have already checked that this transaction\n+    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n+    // wallet, with a valid index into the vout array, and the ability to sign.\n+    for (auto& input : tx.vin) {\n+        const auto mi = pWallet->mapWallet.find(input.prevout.hash);\n+        if (mi == pWallet->mapWallet.end()) {\n+            return -1;\n+        }\n+        assert(input.prevout.n < mi->second.tx->vout.size());\n+        txouts.emplace_back(mi->second.tx->vout[input.prevout.n]);\n+    }\n+    return CalculateMaximumSignedTxSize(tx, pWallet, txouts);\n+}\n+\n+// txouts needs to be in the order of tx.vin\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet, const std::vector<CTxOut> txouts)\n+{\n+    CMutableTransaction txNew(tx);\n+    if (!pWallet->DummySignTx(txNew, txouts)) {\n+        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n+        // implies that we can sign for every input.\n+        return -1;\n+    }\n+    return GetVirtualTransactionSize(txNew);\n+}\n+\n+int GetTxOutSpendSize(const CTxOut& txout, const CWallet* pwallet)\n+{\n+    CMutableTransaction txn;\n+    txn.vin.push_back(CTxIn(COutPoint()));\n+    std::vector<CTxOut> txouts;\n+    txouts.emplace_back(txout);\n+    int totalBytes = CalculateMaximumSignedTxSize(txn, pwallet, txouts);\n+    if (totalBytes == -1) return -1;\n+    int witnessversion = 0;\n+    std::vector<unsigned char> witnessprogram;\n+    // We don't want to multi-count segwit empty vin and flag bytes\n+    if (txout.scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172679432",
      "id" : 172679432,
      "original_commit_id" : "a1b36b1e9e1edd746ea0e3970e503d18d34723ec",
      "original_position" : 66,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 101738962,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172679432",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172679819"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172679819"
         }
      },
      "author_association" : "MEMBER",
      "body" : "yeah we should do something.\r\nmaybe change while loop to:\r\n`while (depth >= 0 && !selection.at(depth)) {`\r\nand then take the `if (depth < 0)` check out of the while loop and put it afterwards, and then it's \r\n```\r\nif (depth < 0) {\r\n    done = true;\r\n}\r\nelse { \r\n...\r\n}\r\n```\r\n\r\nand then you can get rid of the `if (!done)`\r\nand in fact you could actually break instead of setting done=true and get rid of done and have the while loop be a for loop over remaining tries instead\r\n",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T22:18:07Z",
      "diff_hunk" : "@@ -0,0 +1,174 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+    if (lookahead < target_value) {\n+        return false;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        // Failure mode\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        }\n+        // Conditions for starting a backtrack\n+        else if ( value_track + lookahead < target_value || // Cannot possibly reach target with the amount remaining in the lookahead.\n+                    value_track > target_value + cost_of_change || // Selected value is out of range, go back and try other branch\n+                    (curr_waste > best_waste && (utxo_pool.at(0).fee - utxo_pool.at(0).long_term_fee) > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n+            backtrack = true;\n+        } else if (value_track >= target_value) { // Selected value is within range\n+            curr_waste += (value_track - target_value); // This is the excess value which is added to the waste for the below comparison\n+            // Adding another UTXO after this check could bring the waste down if the long term fee is higher than the current fee.\n+            // However we are not going to explore that because this optimization for the waste is only done when we have hit our target\n+            // value. Adding any more UTXOs will be just burning the UTXO; it will go entirely to fees. Thus we aren't going to\n+            // explore any more UTXOs to avoid burning money like that.\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_track - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        }\n+\n+        // Backtracking, moving backwards\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (!selection.at(depth)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172679819",
      "id" : 172679819,
      "in_reply_to_id" : 172652011,
      "original_commit_id" : "235da3d4ec31e343e8805b13e9a1fa7b03b5e068",
      "original_position" : 111,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101736260,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172679819",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172685998"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172685998"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ultra nit: variable name",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T22:43:01Z",
      "diff_hunk" : "@@ -0,0 +1,163 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+static const int remaining_tries = 100000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172685998",
      "id" : 172685998,
      "original_commit_id" : "f41f751f2e3ad69470624a6f55db3c1683712182",
      "original_position" : 46,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101746524,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172685998",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172686204"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172686204"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Comment wrong.  \"Explored all possible solutions\", not \"No solution\"",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-06T22:43:56Z",
      "diff_hunk" : "@@ -0,0 +1,163 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+static const int remaining_tries = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+    if (lookahead < target_value) {\n+        return false;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    for (int i = 0; i < remaining_tries; ++i)\n+    {\n+        // Conditions for starting a backtrack\n+        if ( value_track + lookahead < target_value || // Cannot possibly reach target with the amount remaining in the lookahead.\n+                    value_track > target_value + cost_of_change || // Selected value is out of range, go back and try other branch\n+                    (curr_waste > best_waste && (utxo_pool.at(0).fee - utxo_pool.at(0).long_term_fee) > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n+            backtrack = true;\n+        } else if (value_track >= target_value) { // Selected value is within range\n+            curr_waste += (value_track - target_value); // This is the excess value which is added to the waste for the below comparison\n+            // Adding another UTXO after this check could bring the waste down if the long term fee is higher than the current fee.\n+            // However we are not going to explore that because this optimization for the waste is only done when we have hit our target\n+            // value. Adding any more UTXOs will be just burning the UTXO; it will go entirely to fees. Thus we aren't going to\n+            // explore any more UTXOs to avoid burning money like that.\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_track - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        }\n+\n+        // Backtracking, moving backwards\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (depth >= 0 && !selection.at(depth)) {\n+                // Step back one\n+                lookahead += utxo_pool.at(depth).txout.nValue;\n+                --depth;\n+            }\n+            if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172686204",
      "id" : 172686204,
      "original_commit_id" : "f41f751f2e3ad69470624a6f55db3c1683712182",
      "original_position" : 113,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101746524,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172686204",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172844607"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172844607"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this is redundant with https://github.com/bitcoin/bitcoin/pull/10637/commits/f41f751f2e3ad69470624a6f55db3c1683712182#diff-491a507b32a78f89c3e066deedc98171R72\r\n\r\nperhaps move that check here, to avoid deferencencing an invalid iterator.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T13:43:54Z",
      "diff_hunk" : "@@ -0,0 +1,163 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+static const int remaining_tries = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    if (utxo_pool.empty()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172844607",
      "id" : 172844607,
      "original_commit_id" : "f41f751f2e3ad69470624a6f55db3c1683712182",
      "original_position" : 53,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101930248,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172844607",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172845995"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172845995"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T13:49:12Z",
      "diff_hunk" : "@@ -0,0 +1,172 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+    if (lookahead < target_value) {\n+        return false;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        // Failure mode\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        }\n+        // Conditions for starting a backtrack\n+        else if ( value_track + lookahead < target_value || // Cannot possibly reach target with the amount remaining in the lookahead.\n+                    value_track > target_value + cost_of_change || // Selected value is out of range, go back and try other branch\n+                    (curr_waste > best_waste && (utxo_pool.at(0).fee - utxo_pool.at(0).long_term_fee) > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n+            backtrack = true;\n+        } else if (value_track >= target_value) { // Selected value is within range\n+            curr_waste += (value_track - target_value); // This is the excess value which is added to the waste for the below comparison\n+            // Adding another UTXO after this check could bring the waste down if the long term fee is higher than the current fee.\n+            // However we are not going to explore that because this optimization for the waste is only done when we have hit our target\n+            // value. Adding any more UTXOs will be just burning the UTXO; it will go entirely to fees. Thus we aren't going to\n+            // explore any more UTXOs to avoid burning money like that.\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_track - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        }\n+\n+        // Backtracking, moving backwards\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172845995",
      "id" : 172845995,
      "in_reply_to_id" : 172677957,
      "original_commit_id" : "d55accd6e5096203f305790335381ddceb56a1d4",
      "original_position" : 110,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101931909,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172845995",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172846015"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172846015"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T13:49:15Z",
      "diff_hunk" : "@@ -0,0 +1,172 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    int remaining_tries = 100000;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+    if (lookahead < target_value) {\n+        return false;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    while (!done)\n+    {\n+        // Failure mode\n+        if (remaining_tries <= 0) { // Too many tries, exit\n+            break;\n+        }\n+        // Conditions for starting a backtrack\n+        else if ( value_track + lookahead < target_value || // Cannot possibly reach target with the amount remaining in the lookahead.\n+                    value_track > target_value + cost_of_change || // Selected value is out of range, go back and try other branch",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172846015",
      "id" : 172846015,
      "in_reply_to_id" : 172677004,
      "original_commit_id" : "d55accd6e5096203f305790335381ddceb56a1d4",
      "original_position" : 88,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101931933,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172846015",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172846213"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172846213"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changed",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T13:50:07Z",
      "diff_hunk" : "@@ -0,0 +1,163 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+static const int remaining_tries = 100000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172846213",
      "id" : 172846213,
      "in_reply_to_id" : 172685998,
      "original_commit_id" : "f41f751f2e3ad69470624a6f55db3c1683712182",
      "original_position" : 46,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101932172,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172846213",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172846242"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172846242"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T13:50:12Z",
      "diff_hunk" : "@@ -0,0 +1,163 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount& fee_ret -> This is an output parameter for the value of the transaction fees for the CInputCoins that were selected.\n+ */\n+\n+static const int remaining_tries = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount& fee_ret)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    if (utxo_pool.empty()) {\n+        return false;\n+    }\n+\n+    int depth = 0;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool done = false;\n+    bool backtrack = false;\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.txout.nValue;\n+    }\n+    if (lookahead < target_value) {\n+        return false;\n+    }\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    for (int i = 0; i < remaining_tries; ++i)\n+    {\n+        // Conditions for starting a backtrack\n+        if ( value_track + lookahead < target_value || // Cannot possibly reach target with the amount remaining in the lookahead.\n+                    value_track > target_value + cost_of_change || // Selected value is out of range, go back and try other branch\n+                    (curr_waste > best_waste && (utxo_pool.at(0).fee - utxo_pool.at(0).long_term_fee) > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n+            backtrack = true;\n+        } else if (value_track >= target_value) { // Selected value is within range\n+            curr_waste += (value_track - target_value); // This is the excess value which is added to the waste for the below comparison\n+            // Adding another UTXO after this check could bring the waste down if the long term fee is higher than the current fee.\n+            // However we are not going to explore that because this optimization for the waste is only done when we have hit our target\n+            // value. Adding any more UTXOs will be just burning the UTXO; it will go entirely to fees. Thus we aren't going to\n+            // explore any more UTXOs to avoid burning money like that.\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_track - target_value); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        }\n+\n+        // Backtracking, moving backwards\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which has not has its second branch traversed\n+            while (depth >= 0 && !selection.at(depth)) {\n+                // Step back one\n+                lookahead += utxo_pool.at(depth).txout.nValue;\n+                --depth;\n+            }\n+            if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. No solution, exit.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172846242",
      "id" : 172846242,
      "in_reply_to_id" : 172686204,
      "original_commit_id" : "f41f751f2e3ad69470624a6f55db3c1683712182",
      "original_position" : 113,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101932204,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172846242",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172875038"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172875038"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`bool use_bnb = nSubtractFeeFromAmount == 0`\r\n\r\nthen you can remove the else case later.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T15:17:25Z",
      "diff_hunk" : "@@ -2774,9 +2774,17 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n             size_t change_prototype_size = GetSerializeSize(change_prototype_txout, SER_DISK, 0);\n \n             CFeeRate discard_rate = GetDiscardRate(::feeEstimator);\n+\n+            // Get the fee rate to use effective values in coin selection\n+            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(coin_control, ::mempool, ::feeEstimator, &feeCalc);\n+\n             nFeeRet = 0;\n             bool pick_new_inputs = true;\n             CAmount nValueIn = 0;\n+\n+            // BnB selector is the only selector used when this is true.\n+            // That should only happen on the first pass through the loop.\n+            bool use_bnb = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172875038",
      "id" : 172875038,
      "original_commit_id" : "4eba2d572909e753579e2447b13db75589ef97cf",
      "original_position" : 23,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 101967039,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172875038",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172880111"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172880111"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: Please add spaces around plus in your code.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T15:30:49Z",
      "diff_hunk" : "@@ -57,4 +60,48 @@ static void CoinSelection(benchmark::State& state)\n     }\n }\n \n+typedef std::set<CInputCoin> CoinSet;\n+\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set, const CWallet& wallet)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172880111",
      "id" : 172880111,
      "original_commit_id" : "51952ad62c662ba558a5324db92bf50011849b92",
      "original_position" : 28,
      "path" : "src/bench/coin_selection.cpp",
      "position" : null,
      "pull_request_review_id" : 101972951,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172880111",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172894613"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172894613"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Copy KnapsackSolver coin selection code to coinselection.cpp\" (5e64d67dc2bf4961a7efc7e3e160fd2629072a20)\r\n\r\nIt would be a little easier to confirm there are no unintentional changes in behavior if this commit moved code instead of copying it. Doing this would also make the later \"Have SelectCoinsMinConf and SelectCoins use BnB or Knapsack\" (f93ae0c1d3476bfe7d3460d46179998eeda0cd46) commit simpler.\r\n\r\nAs far as I can see, though, the main change here is dropping the output.fSpendable, output.nDepth, output.tx IsFromMe and TransactionWithinChainLimit checks that were in SelectCoinsMinConf. Other than that, changes made to this code are:\r\n\r\n- renaming setCoinsRet to out_set, nValueRet to value_ret, etc\r\n- sorting coins in descending order instead of sorting then reversing",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T16:09:31Z",
      "diff_hunk" : "@@ -157,3 +157,138 @@ bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_va\n \n     return true;\n }\n+\n+static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n+                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n+{\n+    std::vector<char> vfIncluded;\n+\n+    vfBest.assign(vValue.size(), true);\n+    nBest = nTotalLower;\n+\n+    FastRandomContext insecure_rand;\n+\n+    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n+    {\n+        vfIncluded.assign(vValue.size(), false);\n+        CAmount nTotal = 0;\n+        bool fReachedTarget = false;\n+        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n+        {\n+            for (unsigned int i = 0; i < vValue.size(); i++)\n+            {\n+                //The solver here uses a randomized algorithm,\n+                //the randomness serves no real security purpose but is just\n+                //needed to prevent degenerate behavior and it is important\n+                //that the rng is fast. We do not use a constant random sequence,\n+                //because there may be some privacy improvement by making\n+                //the selection random.\n+                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n+                {\n+                    nTotal += vValue[i].txout.nValue;\n+                    vfIncluded[i] = true;\n+                    if (nTotal >= nTargetValue)\n+                    {\n+                        fReachedTarget = true;\n+                        if (nTotal < nBest)\n+                        {\n+                            nBest = nTotal;\n+                            vfBest = vfIncluded;\n+                        }\n+                        nTotal -= vValue[i].txout.nValue;\n+                        vfIncluded[i] = false;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+bool KnapsackSolver(std::vector<CInputCoin>& utxo_pool, const CAmount& nTargetValue, std::set<CInputCoin>& out_set, CAmount& value_ret)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172894613",
      "id" : 172894613,
      "original_commit_id" : "5e64d67dc2bf4961a7efc7e3e160fd2629072a20",
      "original_position" : 51,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101990204,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172894613",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172899277"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172899277"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'd like to suggest the following for the above description:\r\n\r\n\r\nThis is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first. At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored instead. The search ends after the complete tree has been searched or after a limited number of tries.\r\n\r\nThe search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing the waste metric.  The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\r\n\r\n   waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\r\n\r\nThe algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an omitted predecessor.\r\n\r\nThe Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\r\n\r\nEdit: Cherrypicked first and third of instagibbs changes from below. ;)",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T16:22:42Z",
      "diff_hunk" : "@@ -0,0 +1,293 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172899277",
      "id" : 172899277,
      "original_commit_id" : "51952ad62c662ba558a5324db92bf50011849b92",
      "original_position" : 33,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 101995933,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172899277",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172903837"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172903837"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/unexlored/unexplored/\r\n\r\ns/Further, it is unnecessary to test equivalent combinations./Further, it is unnecessary to test equivalent effective value combinations./\r\n\r\ns/This allows to skip/This allows us to skip/\r\n\r\nACK otherwise",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T16:35:55Z",
      "diff_hunk" : "@@ -0,0 +1,293 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172903837",
      "id" : 172903837,
      "in_reply_to_id" : 172899277,
      "original_commit_id" : "51952ad62c662ba558a5324db92bf50011849b92",
      "original_position" : 33,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102001459,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172903837",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172910342"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172910342"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This comment is sort of outdated. How about:\r\n\r\n> Walk backwards to find the last included UTXO that still needs to have its omission branch traversed.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T16:55:01Z",
      "diff_hunk" : "@@ -0,0 +1,294 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * The paper describing this algorithm is available here: http://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount not_input_fees -> The fees that need to be paid for the stuff that aren't inputs\n+ */\n+\n+static const int TOTAL_TRIES = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    int depth = 0;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool backtrack = false;\n+    CAmount actual_target = not_input_fees + target_value;\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.effective_value;\n+    }\n+    if (lookahead < actual_target) {\n+        return false;\n+    }\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    for (int i = 0; i < TOTAL_TRIES; ++i) {\n+        // Conditions for starting a backtrack\n+        if (value_track + lookahead < actual_target ||                // Cannot possibly reach target with the amount remaining in the lookahead.\n+            value_track > actual_target + cost_of_change ||    // Selected value is out of range, go back and try other branch\n+            (curr_waste > best_waste && (utxo_pool.at(0).fee - utxo_pool.at(0).long_term_fee) > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n+            backtrack = true;\n+        } else if (value_track >= actual_target) {       // Selected value is within range\n+            curr_waste += (value_track - actual_target); // This is the excess value which is added to the waste for the below comparison\n+            // Adding another UTXO after this check could bring the waste down if the long term fee is higher than the current fee.\n+            // However we are not going to explore that because this optimization for the waste is only done when we have hit our target\n+            // value. Adding any more UTXOs will be just burning the UTXO; it will go entirely to fees. Thus we aren't going to\n+            // explore any more UTXOs to avoid burning money like that.\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_track - actual_target); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        }\n+\n+        // Backtracking, moving backwards\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which had not has its second branch traversed",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172910342",
      "id" : 172910342,
      "original_commit_id" : "73cee7900755480bccec436072f2a5c869917139",
      "original_position" : 104,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102009584,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172910342",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172926362"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172926362"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this is not a TODO, if there is no coin selection to be had, you cannot do coin selection.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T17:45:37Z",
      "diff_hunk" : "@@ -2495,13 +2495,16 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n     }\n }\n \n-bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount not_input_fees, const CFeeRate effective_fee, const CCoinControl& coin_control, bool use_bnb, int change_output_size, int change_spend_size) const\n+bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount not_input_fees, const CFeeRate effective_fee, const CCoinControl& coin_control, bool& use_bnb, int change_output_size, int change_spend_size) const\n {\n     std::vector<COutput> vCoins(vAvailableCoins);\n \n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coin_control.HasSelected() && !coin_control.fAllowOtherInputs)\n     {\n+        // For now, don't use BnB if preset inputs are selected. TODO: Enable this later",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172926362",
      "id" : 172926362,
      "original_commit_id" : "9c0c8777c13594e1c328ff6deb9e6e97584ba93a",
      "original_position" : 12,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102028755,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172926362",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "needs rebase",
      "created_at" : "2018-03-07T18:32:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-371237488",
      "id" : 371237488,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-07T18:32:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371237488",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172945621"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172945621"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Using this",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T18:48:03Z",
      "diff_hunk" : "@@ -0,0 +1,293 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.txout.nValue > b.txout.nValue;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172945621",
      "id" : 172945621,
      "in_reply_to_id" : 172899277,
      "original_commit_id" : "51952ad62c662ba558a5324db92bf50011849b92",
      "original_position" : 33,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102050845,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172945621",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172945652"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172945652"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T18:48:08Z",
      "diff_hunk" : "@@ -0,0 +1,294 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Mark Erhardt. It is an exact match algorithm where the exact match\n+ * is a range with the lower bound being the value we want to spend and the upper bound being that value plus the additional cost\n+ * required to create and spend a change output. To do this, the algorithm builds a binary tree where each node is a UTXO and whether\n+ * that UTXO is included or not in the current coin selection. The tree is searched in include-first order. Each UTXO is first included\n+ * and the current selection is evaluated for whether it is within the target range. If it is over the threshold, we try excluding\n+ * the UTXO previously added and the branch of the tree involving its inclusion is then not explored. This process is repeated until\n+ * a solution is found (i.e. selected value falls within the range), the exhaustion limit is reached, or the tree is exhausted and no\n+ * solution was found.\n+ *\n+ * To find the best possible solution, we use a waste metric. The waste metric is defined as the cost to spend the current inputs\n+ * now minus the cost to spend the current inputs later, plus the amount exceeding the target value. We search the tree to find the\n+ * set of UTXOs which falls within our range and minimizes waste.\n+ *\n+ * An additional optimization of this algorithm implemented here is a lookahead value which maintains the total value of the UTXO set\n+ * of all unexplored UTXOs (i.e. UTXOs that have not yet been included or excluded). This allows us to cut a branch if the remaining\n+ * amount is not sufficient to reach our target.\n+ *\n+ * The paper describing this algorithm is available here: http://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount not_input_fees -> The fees that need to be paid for the stuff that aren't inputs\n+ */\n+\n+static const int TOTAL_TRIES = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    int depth = 0;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool backtrack = false;\n+    CAmount actual_target = not_input_fees + target_value;\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.effective_value;\n+    }\n+    if (lookahead < actual_target) {\n+        return false;\n+    }\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    for (int i = 0; i < TOTAL_TRIES; ++i) {\n+        // Conditions for starting a backtrack\n+        if (value_track + lookahead < actual_target ||                // Cannot possibly reach target with the amount remaining in the lookahead.\n+            value_track > actual_target + cost_of_change ||    // Selected value is out of range, go back and try other branch\n+            (curr_waste > best_waste && (utxo_pool.at(0).fee - utxo_pool.at(0).long_term_fee) > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n+            backtrack = true;\n+        } else if (value_track >= actual_target) {       // Selected value is within range\n+            curr_waste += (value_track - actual_target); // This is the excess value which is added to the waste for the below comparison\n+            // Adding another UTXO after this check could bring the waste down if the long term fee is higher than the current fee.\n+            // However we are not going to explore that because this optimization for the waste is only done when we have hit our target\n+            // value. Adding any more UTXOs will be just burning the UTXO; it will go entirely to fees. Thus we aren't going to\n+            // explore any more UTXOs to avoid burning money like that.\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_track - actual_target); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        }\n+\n+        // Backtracking, moving backwards\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the first utxo which had not has its second branch traversed",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172945652",
      "id" : 172945652,
      "in_reply_to_id" : 172910342,
      "original_commit_id" : "73cee7900755480bccec436072f2a5c869917139",
      "original_position" : 104,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102050879,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172945652",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172945685"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172945685"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T18:48:12Z",
      "diff_hunk" : "@@ -2495,13 +2495,16 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n     }\n }\n \n-bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount not_input_fees, const CFeeRate effective_fee, const CCoinControl& coin_control, bool use_bnb, int change_output_size, int change_spend_size) const\n+bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount not_input_fees, const CFeeRate effective_fee, const CCoinControl& coin_control, bool& use_bnb, int change_output_size, int change_spend_size) const\n {\n     std::vector<COutput> vCoins(vAvailableCoins);\n \n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coin_control.HasSelected() && !coin_control.fAllowOtherInputs)\n     {\n+        // For now, don't use BnB if preset inputs are selected. TODO: Enable this later",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172945685",
      "id" : 172945685,
      "in_reply_to_id" : 172926362,
      "original_commit_id" : "9c0c8777c13594e1c328ff6deb9e6e97584ba93a",
      "original_position" : 12,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102050909,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172945685",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased",
      "created_at" : "2018-03-07T18:48:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-371242580",
      "id" : 371242580,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-07T18:48:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371242580",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172986039"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172986039"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: should use size_t",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T21:12:10Z",
      "diff_hunk" : "@@ -0,0 +1,297 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an \n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount not_input_fees -> The fees that need to be paid for the stuff that aren't inputs\n+ */\n+\n+static const int TOTAL_TRIES = 100000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172986039",
      "id" : 172986039,
      "original_commit_id" : "f87a620362ecdfe068f35300b2a409958533c060",
      "original_position" : 51,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102098893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172986039",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172986121"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172986121"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: size_t",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T21:12:28Z",
      "diff_hunk" : "@@ -0,0 +1,297 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an \n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount not_input_fees -> The fees that need to be paid for the stuff that aren't inputs\n+ */\n+\n+static const int TOTAL_TRIES = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    int depth = 0;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool backtrack = false;\n+    CAmount actual_target = not_input_fees + target_value;\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.effective_value;\n+    }\n+    if (lookahead < actual_target) {\n+        return false;\n+    }\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    for (int i = 0; i < TOTAL_TRIES; ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172986121",
      "id" : 172986121,
      "original_commit_id" : "f87a620362ecdfe068f35300b2a409958533c060",
      "original_position" : 82,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102098893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172986121",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172986731"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172986731"
         }
      },
      "author_association" : "MEMBER",
      "body" : "These two lines are equivalent to (but less efficient than):\r\n\r\n```c++\r\nstd::vector<bool> selection(utxo_pool.size());\r\n```",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T21:14:42Z",
      "diff_hunk" : "@@ -0,0 +1,297 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an \n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount not_input_fees -> The fees that need to be paid for the stuff that aren't inputs\n+ */\n+\n+static const int TOTAL_TRIES = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    int depth = 0;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172986731",
      "id" : 172986731,
      "original_commit_id" : "f87a620362ecdfe068f35300b2a409958533c060",
      "original_position" : 60,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102098893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172986731",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172986873"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172986873"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please use doxygen docstring format.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T21:15:14Z",
      "diff_hunk" : "@@ -0,0 +1,297 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an \n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * SelectCoinsBnB Arguments:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172986873",
      "id" : 172986873,
      "original_commit_id" : "f87a620362ecdfe068f35300b2a409958533c060",
      "original_position" : 40,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102098893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172986873",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172987077"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172987077"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"stuff\"?",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T21:15:58Z",
      "diff_hunk" : "@@ -0,0 +1,297 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an \n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount not_input_fees -> The fees that need to be paid for the stuff that aren't inputs",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172987077",
      "id" : 172987077,
      "original_commit_id" : "f87a620362ecdfe068f35300b2a409958533c060",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102098893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172987077",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172987408"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172987408"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This loop can be replaced with:\r\n\r\n```c++\r\nconst CAmount lookahead = std::accumulate(utxo_pool.begin(), utxo_pool.end(), 0);\r\n```",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T21:17:13Z",
      "diff_hunk" : "@@ -0,0 +1,297 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an \n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount not_input_fees -> The fees that need to be paid for the stuff that aren't inputs\n+ */\n+\n+static const int TOTAL_TRIES = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    int depth = 0;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool backtrack = false;\n+    CAmount actual_target = not_input_fees + target_value;\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172987408",
      "id" : 172987408,
      "original_commit_id" : "f87a620362ecdfe068f35300b2a409958533c060",
      "original_position" : 66,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102098893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172987408",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172988243"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172988243"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: size_t",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T21:20:40Z",
      "diff_hunk" : "@@ -0,0 +1,297 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an \n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount not_input_fees -> The fees that need to be paid for the stuff that aren't inputs\n+ */\n+\n+static const int TOTAL_TRIES = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    int depth = 0;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool backtrack = false;\n+    CAmount actual_target = not_input_fees + target_value;\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.effective_value;\n+    }\n+    if (lookahead < actual_target) {\n+        return false;\n+    }\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    for (int i = 0; i < TOTAL_TRIES; ++i) {\n+        // Conditions for starting a backtrack\n+        if (value_track + lookahead < actual_target ||                // Cannot possibly reach target with the amount remaining in the lookahead.\n+            value_track > actual_target + cost_of_change ||    // Selected value is out of range, go back and try other branch\n+            (curr_waste > best_waste && (utxo_pool.at(0).fee - utxo_pool.at(0).long_term_fee) > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n+            backtrack = true;\n+        } else if (value_track >= actual_target) {       // Selected value is within range\n+            curr_waste += (value_track - actual_target); // This is the excess value which is added to the waste for the below comparison\n+            // Adding another UTXO after this check could bring the waste down if the long term fee is higher than the current fee.\n+            // However we are not going to explore that because this optimization for the waste is only done when we have hit our target\n+            // value. Adding any more UTXOs will be just burning the UTXO; it will go entirely to fees. Thus we aren't going to\n+            // explore any more UTXOs to avoid burning money like that.\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_track - actual_target); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        }\n+\n+        // Backtracking, moving backwards\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the last included UTXO that still needs to have its omission branch traversed.\n+            while (depth >= 0 && !selection.at(depth)) {\n+                // Step back one\n+                lookahead += utxo_pool.at(depth).effective_value;\n+                --depth;\n+            }\n+            if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. All solutions searched\n+                break;\n+            }\n+\n+            // These were always included first, try excluding now\n+            selection.at(depth) = false;\n+            value_track -= utxo_pool.at(depth).effective_value;\n+            curr_waste -= (utxo_pool.at(depth).fee - utxo_pool.at(depth).long_term_fee);\n+            ++depth;\n+        } else { // Moving forwards, continuing down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).effective_value > 0);\n+\n+            // Avoid searching a branch if the previous UTXO has the same value and same waste and was excluded. Since the ratio of fee to\n+            // long term fee is the same, we only need to check if one of those values match in order to know that the waste is the same.\n+            if (depth > 0 && !selection.at(depth - 1) &&\n+                utxo_pool.at(depth).effective_value == utxo_pool.at(depth - 1).effective_value &&\n+                utxo_pool.at(depth).fee == utxo_pool.at(depth - 1).fee) {\n+                selection.at(depth) = false;\n+                lookahead -= utxo_pool.at(depth).effective_value;\n+                ++depth;\n+            } else {\n+                // Remove this utxo from the lookahead utxo amount\n+                lookahead -= utxo_pool.at(depth).effective_value;\n+                // Increase waste\n+                curr_waste += (utxo_pool.at(depth).fee - utxo_pool.at(depth).long_term_fee);\n+                // Inclusion branch first (Largest First Exploration)\n+                selection.at(depth) = true;\n+                value_track += utxo_pool.at(depth).effective_value;\n+                ++depth;\n+            }\n+        }\n+    }\n+\n+    // Check for solution\n+    if (best_selection.empty()) {\n+        return false;\n+    }\n+\n+    // Set output set\n+    value_ret = 0;\n+    for (unsigned int i = 0; i < best_selection.size(); ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172988243",
      "id" : 172988243,
      "original_commit_id" : "f87a620362ecdfe068f35300b2a409958533c060",
      "original_position" : 154,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102098893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172988243",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172989213"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172989213"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: end this sentence with a period",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T21:24:11Z",
      "diff_hunk" : "@@ -26,6 +26,18 @@ CAmount GetRequiredFee(unsigned int nTxBytes);\n  */\n CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc);\n \n+/**\n+ * Return the minimum required fee taking into account the\n+ * floating relay fee and user set minimum transaction fee",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172989213",
      "id" : 172989213,
      "original_commit_id" : "f87a620362ecdfe068f35300b2a409958533c060",
      "original_position" : 6,
      "path" : "src/wallet/fees.h",
      "position" : null,
      "pull_request_review_id" : 102098893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172989213",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172989274"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172989274"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: end this sentence with a period",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-07T21:24:24Z",
      "diff_hunk" : "@@ -26,6 +26,18 @@ CAmount GetRequiredFee(unsigned int nTxBytes);\n  */\n CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc);\n \n+/**\n+ * Return the minimum required fee taking into account the\n+ * floating relay fee and user set minimum transaction fee\n+ */\n+CFeeRate GetRequiredFeeRate();\n+\n+/**\n+ * Estimate the minimum fee rate considering user set parameters\n+ * and the required fee",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172989274",
      "id" : 172989274,
      "original_commit_id" : "f87a620362ecdfe068f35300b2a409958533c060",
      "original_position" : 12,
      "path" : "src/wallet/fees.h",
      "position" : 12,
      "pull_request_review_id" : 102098893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172989274",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "linter failing the tests:\r\n\r\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an\r\n^---- failure generated from contrib/devtools/lint-whitespace.sh",
      "created_at" : "2018-03-08T15:14:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-371516771",
      "id" : 371516771,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-08T15:14:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371516771",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173190409"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173190409"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Trainling whitespace causes a travis failure.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T15:23:58Z",
      "diff_hunk" : "@@ -0,0 +1,297 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173190409",
      "id" : 173190409,
      "original_commit_id" : "f87a620362ecdfe068f35300b2a409958533c060",
      "original_position" : 35,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102337741,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173190409",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173237077"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173237077"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Calculate and store the number of bytes required to spend an input\" (dcf6d17c9269dcba1233ca696296ed8cee3ea3bf)\r\n\r\ns/signatures/signature",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T17:49:36Z",
      "diff_hunk" : "@@ -1535,6 +1535,77 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n+// Helper for producing a max-sized low-S signatures (eg 72 bytes)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173237077",
      "id" : 173237077,
      "original_commit_id" : "dcf6d17c9269dcba1233ca696296ed8cee3ea3bf",
      "original_position" : 4,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102393798,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173237077",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173240105"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173240105"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Calculate and store the number of bytes required to spend an input\" (dcf6d17c9269dcba1233ca696296ed8cee3ea3bf)\r\n\r\nCan you add a comment saying when this is condition is expected to happen?",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T18:00:16Z",
      "diff_hunk" : "@@ -1535,6 +1535,77 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n+// Helper for producing a max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    const CScript& scriptPubKey = txout.scriptPubKey;\n+    SignatureData sigdata;\n+\n+    if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+    {\n+        return false;\n+    } else {\n+        UpdateInput(tx_in, sigdata);\n+    }\n+    return true;\n+}\n+\n+// Helper for producing a bunch of max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    int nIn = 0;\n+    for (const auto& txout : txouts)\n+    {\n+        if (!DummySignInput(txNew.vin[nIn], txout)) {\n+            return false;\n+        }\n+\n+        nIn++;\n+    }\n+    return true;\n+}\n+\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet)\n+{\n+    std::vector<CTxOut> txouts;\n+    // Look up the inputs.  We should have already checked that this transaction\n+    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n+    // wallet, with a valid index into the vout array, and the ability to sign.\n+    for (auto& input : tx.vin) {\n+        const auto mi = pWallet->mapWallet.find(input.prevout.hash);\n+        if (mi == pWallet->mapWallet.end()) {\n+            return -1;\n+        }\n+        assert(input.prevout.n < mi->second.tx->vout.size());\n+        txouts.emplace_back(mi->second.tx->vout[input.prevout.n]);\n+    }\n+    return CalculateMaximumSignedTxSize(tx, pWallet, txouts);\n+}\n+\n+// txouts needs to be in the order of tx.vin\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet, const std::vector<CTxOut> txouts)\n+{\n+    CMutableTransaction txNew(tx);\n+    if (!pWallet->DummySignTx(txNew, txouts)) {\n+        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n+        // implies that we can sign for every input.\n+        return -1;\n+    }\n+    return GetVirtualTransactionSize(txNew);\n+}\n+\n+int GetTxOutSpendSize(const CTxOut& txout, const CWallet* pwallet)\n+{\n+    CMutableTransaction txn;\n+    txn.vin.push_back(CTxIn(COutPoint()));\n+    if (!pwallet->DummySignInput(txn.vin[0], txout)) {\n+        return -1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173240105",
      "id" : 173240105,
      "original_commit_id" : "dcf6d17c9269dcba1233ca696296ed8cee3ea3bf",
      "original_position" : 70,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102393798,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173240105",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173247749"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173247749"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Calculate and store the number of bytes required to spend an input\" (dcf6d17c9269dcba1233ca696296ed8cee3ea3bf)\r\n\r\nMaybe add a comment here to explain scriptWitness part, like \"scriptWitness size is added here because witnesses and txins are split up in segwit serialization.\"",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T18:28:12Z",
      "diff_hunk" : "@@ -101,5 +101,9 @@ static inline int64_t GetBlockWeight(const CBlock& block)\n {\n     return ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n }\n+static inline int64_t GetTransationInputWeight(const CTxIn& txin)\n+{\n+    return ::GetSerializeSize(txin, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(txin, SER_NETWORK, PROTOCOL_VERSION) + ::GetSerializeSize(txin.scriptWitness.stack, SER_NETWORK, PROTOCOL_VERSION);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173247749",
      "id" : 173247749,
      "original_commit_id" : "dcf6d17c9269dcba1233ca696296ed8cee3ea3bf",
      "original_position" : 6,
      "path" : "src/consensus/validation.h",
      "position" : null,
      "pull_request_review_id" : 102393798,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173247749",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173249052"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173249052"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Calculate and store the number of bytes required to spend an input\" (dcf6d17c9269dcba1233ca696296ed8cee3ea3bf)\r\n\r\nSomehow `wallet` variables in the old code are getting replaced by `pWallet` variables in the new code (probably a bad rebase).",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T18:32:38Z",
      "diff_hunk" : "@@ -1535,6 +1535,77 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n+// Helper for producing a max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    const CScript& scriptPubKey = txout.scriptPubKey;\n+    SignatureData sigdata;\n+\n+    if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+    {\n+        return false;\n+    } else {\n+        UpdateInput(tx_in, sigdata);\n+    }\n+    return true;\n+}\n+\n+// Helper for producing a bunch of max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    int nIn = 0;\n+    for (const auto& txout : txouts)\n+    {\n+        if (!DummySignInput(txNew.vin[nIn], txout)) {\n+            return false;\n+        }\n+\n+        nIn++;\n+    }\n+    return true;\n+}\n+\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173249052",
      "id" : 173249052,
      "original_commit_id" : "dcf6d17c9269dcba1233ca696296ed8cee3ea3bf",
      "original_position" : 36,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102393798,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173249052",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173251858"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173251858"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Calculate and store the number of bytes required to spend an input\" (dcf6d17c9269dcba1233ca696296ed8cee3ea3bf)\r\n\r\nCould just make this an assert()",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T18:42:42Z",
      "diff_hunk" : "@@ -1535,6 +1535,77 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n+// Helper for producing a max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    const CScript& scriptPubKey = txout.scriptPubKey;\n+    SignatureData sigdata;\n+\n+    if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+    {\n+        return false;\n+    } else {\n+        UpdateInput(tx_in, sigdata);\n+    }\n+    return true;\n+}\n+\n+// Helper for producing a bunch of max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    int nIn = 0;\n+    for (const auto& txout : txouts)\n+    {\n+        if (!DummySignInput(txNew.vin[nIn], txout)) {\n+            return false;\n+        }\n+\n+        nIn++;\n+    }\n+    return true;\n+}\n+\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet)\n+{\n+    std::vector<CTxOut> txouts;\n+    // Look up the inputs.  We should have already checked that this transaction\n+    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n+    // wallet, with a valid index into the vout array, and the ability to sign.\n+    for (auto& input : tx.vin) {\n+        const auto mi = pWallet->mapWallet.find(input.prevout.hash);\n+        if (mi == pWallet->mapWallet.end()) {\n+            return -1;\n+        }\n+        assert(input.prevout.n < mi->second.tx->vout.size());\n+        txouts.emplace_back(mi->second.tx->vout[input.prevout.n]);\n+    }\n+    return CalculateMaximumSignedTxSize(tx, pWallet, txouts);\n+}\n+\n+// txouts needs to be in the order of tx.vin",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173251858",
      "id" : 173251858,
      "original_commit_id" : "dcf6d17c9269dcba1233ca696296ed8cee3ea3bf",
      "original_position" : 53,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102393798,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173251858",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173253078"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173253078"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Calculate and store the number of bytes required to spend an input\" (dcf6d17c9269dcba1233ca696296ed8cee3ea3bf)\r\n\r\nWould be good to add `&` to avoid copying the vector.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T18:46:43Z",
      "diff_hunk" : "@@ -1535,6 +1535,77 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n+// Helper for producing a max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    const CScript& scriptPubKey = txout.scriptPubKey;\n+    SignatureData sigdata;\n+\n+    if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+    {\n+        return false;\n+    } else {\n+        UpdateInput(tx_in, sigdata);\n+    }\n+    return true;\n+}\n+\n+// Helper for producing a bunch of max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    int nIn = 0;\n+    for (const auto& txout : txouts)\n+    {\n+        if (!DummySignInput(txNew.vin[nIn], txout)) {\n+            return false;\n+        }\n+\n+        nIn++;\n+    }\n+    return true;\n+}\n+\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet)\n+{\n+    std::vector<CTxOut> txouts;\n+    // Look up the inputs.  We should have already checked that this transaction\n+    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n+    // wallet, with a valid index into the vout array, and the ability to sign.\n+    for (auto& input : tx.vin) {\n+        const auto mi = pWallet->mapWallet.find(input.prevout.hash);\n+        if (mi == pWallet->mapWallet.end()) {\n+            return -1;\n+        }\n+        assert(input.prevout.n < mi->second.tx->vout.size());\n+        txouts.emplace_back(mi->second.tx->vout[input.prevout.n]);\n+    }\n+    return CalculateMaximumSignedTxSize(tx, pWallet, txouts);\n+}\n+\n+// txouts needs to be in the order of tx.vin\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet, const std::vector<CTxOut> txouts)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173253078",
      "id" : 173253078,
      "original_commit_id" : "dcf6d17c9269dcba1233ca696296ed8cee3ea3bf",
      "original_position" : 54,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102393798,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173253078",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173253840"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173253840"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Calculate and store the number of bytes required to spend an input\" (dcf6d17c9269dcba1233ca696296ed8cee3ea3bf)\r\n\r\nMay want to mention this can be -1.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T18:49:22Z",
      "diff_hunk" : "@@ -527,6 +536,9 @@ class COutput\n     int i;\n     int nDepth;\n \n+    /** Pre-computed estimated size of this output as a fully-signed input in a transaction */\n+    int nInputBytes;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173253840",
      "id" : 173253840,
      "original_commit_id" : "dcf6d17c9269dcba1233ca696296ed8cee3ea3bf",
      "original_position" : 28,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 102393798,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173253840",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173255562"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173255562"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Calculate and store the number of bytes required to spend an input\" (dcf6d17c9269dcba1233ca696296ed8cee3ea3bf)\r\n\r\nWould be good to name `GetTxOutSpendSize` consistently with `CalculateMaximumSignedTxSize()` since they are basically doing the same thing. Maybe `CalculateMaximumSignedInputSize`.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T18:55:35Z",
      "diff_hunk" : "@@ -1535,6 +1535,77 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n+// Helper for producing a max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    const CScript& scriptPubKey = txout.scriptPubKey;\n+    SignatureData sigdata;\n+\n+    if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+    {\n+        return false;\n+    } else {\n+        UpdateInput(tx_in, sigdata);\n+    }\n+    return true;\n+}\n+\n+// Helper for producing a bunch of max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    int nIn = 0;\n+    for (const auto& txout : txouts)\n+    {\n+        if (!DummySignInput(txNew.vin[nIn], txout)) {\n+            return false;\n+        }\n+\n+        nIn++;\n+    }\n+    return true;\n+}\n+\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet)\n+{\n+    std::vector<CTxOut> txouts;\n+    // Look up the inputs.  We should have already checked that this transaction\n+    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n+    // wallet, with a valid index into the vout array, and the ability to sign.\n+    for (auto& input : tx.vin) {\n+        const auto mi = pWallet->mapWallet.find(input.prevout.hash);\n+        if (mi == pWallet->mapWallet.end()) {\n+            return -1;\n+        }\n+        assert(input.prevout.n < mi->second.tx->vout.size());\n+        txouts.emplace_back(mi->second.tx->vout[input.prevout.n]);\n+    }\n+    return CalculateMaximumSignedTxSize(tx, pWallet, txouts);\n+}\n+\n+// txouts needs to be in the order of tx.vin\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet, const std::vector<CTxOut> txouts)\n+{\n+    CMutableTransaction txNew(tx);\n+    if (!pWallet->DummySignTx(txNew, txouts)) {\n+        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n+        // implies that we can sign for every input.\n+        return -1;\n+    }\n+    return GetVirtualTransactionSize(txNew);\n+}\n+\n+int GetTxOutSpendSize(const CTxOut& txout, const CWallet* pwallet)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173255562",
      "id" : 173255562,
      "original_commit_id" : "dcf6d17c9269dcba1233ca696296ed8cee3ea3bf",
      "original_position" : 65,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102393798,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173255562",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173259772"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173259772"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add a GetMinimumFeeRate function which is wrapped by GetMinimumFee\" (b68ce5a0e638c47140f350cbc40f9cfc85fb4c37)\r\n\r\nCould s/fee/fee rate/",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T19:10:00Z",
      "diff_hunk" : "@@ -26,6 +26,18 @@ CAmount GetRequiredFee(unsigned int nTxBytes);\n  */\n CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc);\n \n+/**\n+ * Return the minimum required fee taking into account the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173259772",
      "id" : 173259772,
      "original_commit_id" : "b68ce5a0e638c47140f350cbc40f9cfc85fb4c37",
      "original_position" : 5,
      "path" : "src/wallet/fees.h",
      "position" : null,
      "pull_request_review_id" : 102393798,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173259772",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173265229"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173265229"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Huh?  \r\nThere is still coin selection if you have preset inputs.  Your preset inputs may not be sufficient, it just means use at least these coins.\r\n",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T19:28:33Z",
      "diff_hunk" : "@@ -2495,13 +2495,16 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n     }\n }\n \n-bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount not_input_fees, const CFeeRate effective_fee, const CCoinControl& coin_control, bool use_bnb, int change_output_size, int change_spend_size) const\n+bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount not_input_fees, const CFeeRate effective_fee, const CCoinControl& coin_control, bool& use_bnb, int change_output_size, int change_spend_size) const\n {\n     std::vector<COutput> vCoins(vAvailableCoins);\n \n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coin_control.HasSelected() && !coin_control.fAllowOtherInputs)\n     {\n+        // For now, don't use BnB if preset inputs are selected. TODO: Enable this later",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173265229",
      "id" : 173265229,
      "in_reply_to_id" : 172926362,
      "original_commit_id" : "9c0c8777c13594e1c328ff6deb9e6e97584ba93a",
      "original_position" : 12,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102427254,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173265229",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173267153"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173267153"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@morcos in this case the user has selected to not allow any other inputs?",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T19:35:19Z",
      "diff_hunk" : "@@ -2495,13 +2495,16 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n     }\n }\n \n-bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount not_input_fees, const CFeeRate effective_fee, const CCoinControl& coin_control, bool use_bnb, int change_output_size, int change_spend_size) const\n+bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount not_input_fees, const CFeeRate effective_fee, const CCoinControl& coin_control, bool& use_bnb, int change_output_size, int change_spend_size) const\n {\n     std::vector<COutput> vCoins(vAvailableCoins);\n \n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coin_control.HasSelected() && !coin_control.fAllowOtherInputs)\n     {\n+        // For now, don't use BnB if preset inputs are selected. TODO: Enable this later",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173267153",
      "id" : 173267153,
      "in_reply_to_id" : 172926362,
      "original_commit_id" : "9c0c8777c13594e1c328ff6deb9e6e97584ba93a",
      "original_position" : 12,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102429652,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173267153",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173267300"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173267300"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T19:35:53Z",
      "diff_hunk" : "@@ -0,0 +1,297 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173267300",
      "id" : 173267300,
      "in_reply_to_id" : 173190409,
      "original_commit_id" : "f87a620362ecdfe068f35300b2a409958533c060",
      "original_position" : 35,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102429834,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173267300",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173268738"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173268738"
         }
      },
      "author_association" : "MEMBER",
      "body" : "oops",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T19:40:48Z",
      "diff_hunk" : "@@ -2495,13 +2495,16 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n     }\n }\n \n-bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount not_input_fees, const CFeeRate effective_fee, const CCoinControl& coin_control, bool use_bnb, int change_output_size, int change_spend_size) const\n+bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount not_input_fees, const CFeeRate effective_fee, const CCoinControl& coin_control, bool& use_bnb, int change_output_size, int change_spend_size) const\n {\n     std::vector<COutput> vCoins(vAvailableCoins);\n \n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coin_control.HasSelected() && !coin_control.fAllowOtherInputs)\n     {\n+        // For now, don't use BnB if preset inputs are selected. TODO: Enable this later",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173268738",
      "id" : 173268738,
      "in_reply_to_id" : 172926362,
      "original_commit_id" : "9c0c8777c13594e1c328ff6deb9e6e97584ba93a",
      "original_position" : 12,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102431557,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173268738",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "c1f310c doesn't compile because you changed the arguments to `SelectCoins` but didn't change the call sites until the next two commits.",
      "created_at" : "2018-03-08T20:23:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-371612545",
      "id" : 371612545,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-08T20:23:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371612545",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4360349?v=4",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296242"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296242"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T21:25:57Z",
      "diff_hunk" : "@@ -0,0 +1,297 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an \n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount not_input_fees -> The fees that need to be paid for the stuff that aren't inputs\n+ */\n+\n+static const int TOTAL_TRIES = 100000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296242",
      "id" : 173296242,
      "in_reply_to_id" : 172986039,
      "original_commit_id" : "f87a620362ecdfe068f35300b2a409958533c060",
      "original_position" : 51,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102464891,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296242",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296258"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296258"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T21:26:00Z",
      "diff_hunk" : "@@ -0,0 +1,297 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an \n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount not_input_fees -> The fees that need to be paid for the stuff that aren't inputs\n+ */\n+\n+static const int TOTAL_TRIES = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    int depth = 0;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool backtrack = false;\n+    CAmount actual_target = not_input_fees + target_value;\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.effective_value;\n+    }\n+    if (lookahead < actual_target) {\n+        return false;\n+    }\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    for (int i = 0; i < TOTAL_TRIES; ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296258",
      "id" : 173296258,
      "in_reply_to_id" : 172986121,
      "original_commit_id" : "f87a620362ecdfe068f35300b2a409958533c060",
      "original_position" : 82,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102464911,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296258",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296305"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296305"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T21:26:10Z",
      "diff_hunk" : "@@ -0,0 +1,297 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an \n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount not_input_fees -> The fees that need to be paid for the stuff that aren't inputs\n+ */\n+\n+static const int TOTAL_TRIES = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    int depth = 0;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296305",
      "id" : 173296305,
      "in_reply_to_id" : 172986731,
      "original_commit_id" : "f87a620362ecdfe068f35300b2a409958533c060",
      "original_position" : 60,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102464959,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296305",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296356"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296356"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Made clearer about what stuff is",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T21:26:21Z",
      "diff_hunk" : "@@ -0,0 +1,297 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an \n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount not_input_fees -> The fees that need to be paid for the stuff that aren't inputs",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296356",
      "id" : 173296356,
      "in_reply_to_id" : 172987077,
      "original_commit_id" : "f87a620362ecdfe068f35300b2a409958533c060",
      "original_position" : 48,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102465023,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296356",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296378"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296378"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T21:26:25Z",
      "diff_hunk" : "@@ -0,0 +1,297 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an \n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount not_input_fees -> The fees that need to be paid for the stuff that aren't inputs\n+ */\n+\n+static const int TOTAL_TRIES = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    int depth = 0;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool backtrack = false;\n+    CAmount actual_target = not_input_fees + target_value;\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.effective_value;\n+    }\n+    if (lookahead < actual_target) {\n+        return false;\n+    }\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Best solution\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    for (int i = 0; i < TOTAL_TRIES; ++i) {\n+        // Conditions for starting a backtrack\n+        if (value_track + lookahead < actual_target ||                // Cannot possibly reach target with the amount remaining in the lookahead.\n+            value_track > actual_target + cost_of_change ||    // Selected value is out of range, go back and try other branch\n+            (curr_waste > best_waste && (utxo_pool.at(0).fee - utxo_pool.at(0).long_term_fee) > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n+            backtrack = true;\n+        } else if (value_track >= actual_target) {       // Selected value is within range\n+            curr_waste += (value_track - actual_target); // This is the excess value which is added to the waste for the below comparison\n+            // Adding another UTXO after this check could bring the waste down if the long term fee is higher than the current fee.\n+            // However we are not going to explore that because this optimization for the waste is only done when we have hit our target\n+            // value. Adding any more UTXOs will be just burning the UTXO; it will go entirely to fees. Thus we aren't going to\n+            // explore any more UTXOs to avoid burning money like that.\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(selection.begin(), selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (value_track - actual_target); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        }\n+\n+        // Backtracking, moving backwards\n+        if (backtrack) {\n+            backtrack = false; // Reset\n+            --depth;\n+\n+            // Walk backwards to find the last included UTXO that still needs to have its omission branch traversed.\n+            while (depth >= 0 && !selection.at(depth)) {\n+                // Step back one\n+                lookahead += utxo_pool.at(depth).effective_value;\n+                --depth;\n+            }\n+            if (depth < 0) { // We have walked back to the first utxo and no branch is untraversed. All solutions searched\n+                break;\n+            }\n+\n+            // These were always included first, try excluding now\n+            selection.at(depth) = false;\n+            value_track -= utxo_pool.at(depth).effective_value;\n+            curr_waste -= (utxo_pool.at(depth).fee - utxo_pool.at(depth).long_term_fee);\n+            ++depth;\n+        } else { // Moving forwards, continuing down this branch\n+            // Assert that this utxo is not negative. It should never be negative, effective value calculation should have removed it\n+            assert(utxo_pool.at(depth).effective_value > 0);\n+\n+            // Avoid searching a branch if the previous UTXO has the same value and same waste and was excluded. Since the ratio of fee to\n+            // long term fee is the same, we only need to check if one of those values match in order to know that the waste is the same.\n+            if (depth > 0 && !selection.at(depth - 1) &&\n+                utxo_pool.at(depth).effective_value == utxo_pool.at(depth - 1).effective_value &&\n+                utxo_pool.at(depth).fee == utxo_pool.at(depth - 1).fee) {\n+                selection.at(depth) = false;\n+                lookahead -= utxo_pool.at(depth).effective_value;\n+                ++depth;\n+            } else {\n+                // Remove this utxo from the lookahead utxo amount\n+                lookahead -= utxo_pool.at(depth).effective_value;\n+                // Increase waste\n+                curr_waste += (utxo_pool.at(depth).fee - utxo_pool.at(depth).long_term_fee);\n+                // Inclusion branch first (Largest First Exploration)\n+                selection.at(depth) = true;\n+                value_track += utxo_pool.at(depth).effective_value;\n+                ++depth;\n+            }\n+        }\n+    }\n+\n+    // Check for solution\n+    if (best_selection.empty()) {\n+        return false;\n+    }\n+\n+    // Set output set\n+    value_ret = 0;\n+    for (unsigned int i = 0; i < best_selection.size(); ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296378",
      "id" : 173296378,
      "in_reply_to_id" : 172988243,
      "original_commit_id" : "f87a620362ecdfe068f35300b2a409958533c060",
      "original_position" : 154,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102465054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296378",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296510"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296510"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This doesn't work since utxo_pool contains CInputCoins and not ints",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T21:26:51Z",
      "diff_hunk" : "@@ -0,0 +1,297 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an \n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * SelectCoinsBnB Arguments:\n+ * const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * CAmount not_input_fees -> The fees that need to be paid for the stuff that aren't inputs\n+ */\n+\n+static const int TOTAL_TRIES = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    int depth = 0;\n+    std::vector<bool> selection; // select the utxo at this index\n+    selection.assign(utxo_pool.size(), false);\n+    bool backtrack = false;\n+    CAmount actual_target = not_input_fees + target_value;\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296510",
      "id" : 173296510,
      "in_reply_to_id" : 172987408,
      "original_commit_id" : "f87a620362ecdfe068f35300b2a409958533c060",
      "original_position" : 66,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102465202,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296510",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296545"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296545"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T21:27:00Z",
      "diff_hunk" : "@@ -1535,6 +1535,77 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n+// Helper for producing a max-sized low-S signatures (eg 72 bytes)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296545",
      "id" : 173296545,
      "in_reply_to_id" : 173237077,
      "original_commit_id" : "dcf6d17c9269dcba1233ca696296ed8cee3ea3bf",
      "original_position" : 4,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102465243,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296545",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296570"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296570"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T21:27:05Z",
      "diff_hunk" : "@@ -1535,6 +1535,77 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n+// Helper for producing a max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    const CScript& scriptPubKey = txout.scriptPubKey;\n+    SignatureData sigdata;\n+\n+    if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+    {\n+        return false;\n+    } else {\n+        UpdateInput(tx_in, sigdata);\n+    }\n+    return true;\n+}\n+\n+// Helper for producing a bunch of max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    int nIn = 0;\n+    for (const auto& txout : txouts)\n+    {\n+        if (!DummySignInput(txNew.vin[nIn], txout)) {\n+            return false;\n+        }\n+\n+        nIn++;\n+    }\n+    return true;\n+}\n+\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet)\n+{\n+    std::vector<CTxOut> txouts;\n+    // Look up the inputs.  We should have already checked that this transaction\n+    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n+    // wallet, with a valid index into the vout array, and the ability to sign.\n+    for (auto& input : tx.vin) {\n+        const auto mi = pWallet->mapWallet.find(input.prevout.hash);\n+        if (mi == pWallet->mapWallet.end()) {\n+            return -1;\n+        }\n+        assert(input.prevout.n < mi->second.tx->vout.size());\n+        txouts.emplace_back(mi->second.tx->vout[input.prevout.n]);\n+    }\n+    return CalculateMaximumSignedTxSize(tx, pWallet, txouts);\n+}\n+\n+// txouts needs to be in the order of tx.vin\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet, const std::vector<CTxOut> txouts)\n+{\n+    CMutableTransaction txNew(tx);\n+    if (!pWallet->DummySignTx(txNew, txouts)) {\n+        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n+        // implies that we can sign for every input.\n+        return -1;\n+    }\n+    return GetVirtualTransactionSize(txNew);\n+}\n+\n+int GetTxOutSpendSize(const CTxOut& txout, const CWallet* pwallet)\n+{\n+    CMutableTransaction txn;\n+    txn.vin.push_back(CTxIn(COutPoint()));\n+    if (!pwallet->DummySignInput(txn.vin[0], txout)) {\n+        return -1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296570",
      "id" : 173296570,
      "in_reply_to_id" : 173240105,
      "original_commit_id" : "dcf6d17c9269dcba1233ca696296ed8cee3ea3bf",
      "original_position" : 70,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102465266,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296570",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296596"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296596"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T21:27:10Z",
      "diff_hunk" : "@@ -101,5 +101,9 @@ static inline int64_t GetBlockWeight(const CBlock& block)\n {\n     return ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n }\n+static inline int64_t GetTransationInputWeight(const CTxIn& txin)\n+{\n+    return ::GetSerializeSize(txin, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(txin, SER_NETWORK, PROTOCOL_VERSION) + ::GetSerializeSize(txin.scriptWitness.stack, SER_NETWORK, PROTOCOL_VERSION);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296596",
      "id" : 173296596,
      "in_reply_to_id" : 173247749,
      "original_commit_id" : "dcf6d17c9269dcba1233ca696296ed8cee3ea3bf",
      "original_position" : 6,
      "path" : "src/consensus/validation.h",
      "position" : null,
      "pull_request_review_id" : 102465297,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296596",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296613"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296613"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T21:27:15Z",
      "diff_hunk" : "@@ -1535,6 +1535,77 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n+// Helper for producing a max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    const CScript& scriptPubKey = txout.scriptPubKey;\n+    SignatureData sigdata;\n+\n+    if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+    {\n+        return false;\n+    } else {\n+        UpdateInput(tx_in, sigdata);\n+    }\n+    return true;\n+}\n+\n+// Helper for producing a bunch of max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    int nIn = 0;\n+    for (const auto& txout : txouts)\n+    {\n+        if (!DummySignInput(txNew.vin[nIn], txout)) {\n+            return false;\n+        }\n+\n+        nIn++;\n+    }\n+    return true;\n+}\n+\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296613",
      "id" : 173296613,
      "in_reply_to_id" : 173249052,
      "original_commit_id" : "dcf6d17c9269dcba1233ca696296ed8cee3ea3bf",
      "original_position" : 36,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102465316,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296613",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296699"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296699"
         }
      },
      "author_association" : "MEMBER",
      "body" : "How so?",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T21:27:32Z",
      "diff_hunk" : "@@ -1535,6 +1535,77 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n+// Helper for producing a max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    const CScript& scriptPubKey = txout.scriptPubKey;\n+    SignatureData sigdata;\n+\n+    if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+    {\n+        return false;\n+    } else {\n+        UpdateInput(tx_in, sigdata);\n+    }\n+    return true;\n+}\n+\n+// Helper for producing a bunch of max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    int nIn = 0;\n+    for (const auto& txout : txouts)\n+    {\n+        if (!DummySignInput(txNew.vin[nIn], txout)) {\n+            return false;\n+        }\n+\n+        nIn++;\n+    }\n+    return true;\n+}\n+\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet)\n+{\n+    std::vector<CTxOut> txouts;\n+    // Look up the inputs.  We should have already checked that this transaction\n+    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n+    // wallet, with a valid index into the vout array, and the ability to sign.\n+    for (auto& input : tx.vin) {\n+        const auto mi = pWallet->mapWallet.find(input.prevout.hash);\n+        if (mi == pWallet->mapWallet.end()) {\n+            return -1;\n+        }\n+        assert(input.prevout.n < mi->second.tx->vout.size());\n+        txouts.emplace_back(mi->second.tx->vout[input.prevout.n]);\n+    }\n+    return CalculateMaximumSignedTxSize(tx, pWallet, txouts);\n+}\n+\n+// txouts needs to be in the order of tx.vin",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296699",
      "id" : 173296699,
      "in_reply_to_id" : 173251858,
      "original_commit_id" : "dcf6d17c9269dcba1233ca696296ed8cee3ea3bf",
      "original_position" : 53,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102465406,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296699",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296720"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296720"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T21:27:36Z",
      "diff_hunk" : "@@ -1535,6 +1535,77 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n+// Helper for producing a max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    const CScript& scriptPubKey = txout.scriptPubKey;\n+    SignatureData sigdata;\n+\n+    if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+    {\n+        return false;\n+    } else {\n+        UpdateInput(tx_in, sigdata);\n+    }\n+    return true;\n+}\n+\n+// Helper for producing a bunch of max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    int nIn = 0;\n+    for (const auto& txout : txouts)\n+    {\n+        if (!DummySignInput(txNew.vin[nIn], txout)) {\n+            return false;\n+        }\n+\n+        nIn++;\n+    }\n+    return true;\n+}\n+\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet)\n+{\n+    std::vector<CTxOut> txouts;\n+    // Look up the inputs.  We should have already checked that this transaction\n+    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n+    // wallet, with a valid index into the vout array, and the ability to sign.\n+    for (auto& input : tx.vin) {\n+        const auto mi = pWallet->mapWallet.find(input.prevout.hash);\n+        if (mi == pWallet->mapWallet.end()) {\n+            return -1;\n+        }\n+        assert(input.prevout.n < mi->second.tx->vout.size());\n+        txouts.emplace_back(mi->second.tx->vout[input.prevout.n]);\n+    }\n+    return CalculateMaximumSignedTxSize(tx, pWallet, txouts);\n+}\n+\n+// txouts needs to be in the order of tx.vin\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet, const std::vector<CTxOut> txouts)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296720",
      "id" : 173296720,
      "in_reply_to_id" : 173253078,
      "original_commit_id" : "dcf6d17c9269dcba1233ca696296ed8cee3ea3bf",
      "original_position" : 54,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102465432,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296720",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296735"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296735"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T21:27:41Z",
      "diff_hunk" : "@@ -527,6 +536,9 @@ class COutput\n     int i;\n     int nDepth;\n \n+    /** Pre-computed estimated size of this output as a fully-signed input in a transaction */\n+    int nInputBytes;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296735",
      "id" : 173296735,
      "in_reply_to_id" : 173253840,
      "original_commit_id" : "dcf6d17c9269dcba1233ca696296ed8cee3ea3bf",
      "original_position" : 28,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 102465453,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296735",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296756"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296756"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T21:27:45Z",
      "diff_hunk" : "@@ -1535,6 +1535,77 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n+// Helper for producing a max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    const CScript& scriptPubKey = txout.scriptPubKey;\n+    SignatureData sigdata;\n+\n+    if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+    {\n+        return false;\n+    } else {\n+        UpdateInput(tx_in, sigdata);\n+    }\n+    return true;\n+}\n+\n+// Helper for producing a bunch of max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    int nIn = 0;\n+    for (const auto& txout : txouts)\n+    {\n+        if (!DummySignInput(txNew.vin[nIn], txout)) {\n+            return false;\n+        }\n+\n+        nIn++;\n+    }\n+    return true;\n+}\n+\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet)\n+{\n+    std::vector<CTxOut> txouts;\n+    // Look up the inputs.  We should have already checked that this transaction\n+    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n+    // wallet, with a valid index into the vout array, and the ability to sign.\n+    for (auto& input : tx.vin) {\n+        const auto mi = pWallet->mapWallet.find(input.prevout.hash);\n+        if (mi == pWallet->mapWallet.end()) {\n+            return -1;\n+        }\n+        assert(input.prevout.n < mi->second.tx->vout.size());\n+        txouts.emplace_back(mi->second.tx->vout[input.prevout.n]);\n+    }\n+    return CalculateMaximumSignedTxSize(tx, pWallet, txouts);\n+}\n+\n+// txouts needs to be in the order of tx.vin\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet, const std::vector<CTxOut> txouts)\n+{\n+    CMutableTransaction txNew(tx);\n+    if (!pWallet->DummySignTx(txNew, txouts)) {\n+        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n+        // implies that we can sign for every input.\n+        return -1;\n+    }\n+    return GetVirtualTransactionSize(txNew);\n+}\n+\n+int GetTxOutSpendSize(const CTxOut& txout, const CWallet* pwallet)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296756",
      "id" : 173296756,
      "in_reply_to_id" : 173255562,
      "original_commit_id" : "dcf6d17c9269dcba1233ca696296ed8cee3ea3bf",
      "original_position" : 65,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102465476,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296756",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296777"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296777"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T21:27:50Z",
      "diff_hunk" : "@@ -26,6 +26,18 @@ CAmount GetRequiredFee(unsigned int nTxBytes);\n  */\n CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc);\n \n+/**\n+ * Return the minimum required fee taking into account the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173296777",
      "id" : 173296777,
      "in_reply_to_id" : 173259772,
      "original_commit_id" : "b68ce5a0e638c47140f350cbc40f9cfc85fb4c37",
      "original_position" : 5,
      "path" : "src/wallet/fees.h",
      "position" : null,
      "pull_request_review_id" : 102465506,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173296777",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@morcos \r\n\r\n> c1f310c doesn't compile because you changed the arguments to SelectCoins but didn't change the call sites until the next two commits.\r\n\r\nThat was done in order to make the changes clearer and easier to follow. Otherwise it would be very large commit that is not reviewer friendly IMO.",
      "created_at" : "2018-03-08T21:28:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-371630412",
      "id" : 371630412,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-08T21:28:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371630412",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173297756"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173297756"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done (I think)",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-08T21:31:14Z",
      "diff_hunk" : "@@ -0,0 +1,297 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/coinselection.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an \n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * SelectCoinsBnB Arguments:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173297756",
      "id" : 173297756,
      "in_reply_to_id" : 172986873,
      "original_commit_id" : "f87a620362ecdfe068f35300b2a409958533c060",
      "original_position" : 40,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102466699,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173297756",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173340792"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173340792"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Never mind, misinterpreted \"in the order of.\" I was suggesting you could assert the two vectors were the same size.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-09T01:06:39Z",
      "diff_hunk" : "@@ -1535,6 +1535,77 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n+// Helper for producing a max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    const CScript& scriptPubKey = txout.scriptPubKey;\n+    SignatureData sigdata;\n+\n+    if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+    {\n+        return false;\n+    } else {\n+        UpdateInput(tx_in, sigdata);\n+    }\n+    return true;\n+}\n+\n+// Helper for producing a bunch of max-sized low-S signatures (eg 72 bytes)\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts) const\n+{\n+    // Fill in dummy signatures for fee calculation.\n+    int nIn = 0;\n+    for (const auto& txout : txouts)\n+    {\n+        if (!DummySignInput(txNew.vin[nIn], txout)) {\n+            return false;\n+        }\n+\n+        nIn++;\n+    }\n+    return true;\n+}\n+\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *pWallet)\n+{\n+    std::vector<CTxOut> txouts;\n+    // Look up the inputs.  We should have already checked that this transaction\n+    // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n+    // wallet, with a valid index into the vout array, and the ability to sign.\n+    for (auto& input : tx.vin) {\n+        const auto mi = pWallet->mapWallet.find(input.prevout.hash);\n+        if (mi == pWallet->mapWallet.end()) {\n+            return -1;\n+        }\n+        assert(input.prevout.n < mi->second.tx->vout.size());\n+        txouts.emplace_back(mi->second.tx->vout[input.prevout.n]);\n+    }\n+    return CalculateMaximumSignedTxSize(tx, pWallet, txouts);\n+}\n+\n+// txouts needs to be in the order of tx.vin",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173340792",
      "id" : 173340792,
      "in_reply_to_id" : 173251858,
      "original_commit_id" : "dcf6d17c9269dcba1233ca696296ed8cee3ea3bf",
      "original_position" : 53,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102517362,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173340792",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173479971"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173479971"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Have SelectCoinsMinConf and SelectCoins use BnB or Knapsack\" (44657d0374d7fb25cca5cd098b27a5163f139de6)\r\n\r\nWould be nice to share spendable / depth / fromme / chainlimit checks between bnb and knapsack solvers. Maybe they could be factored out into a coin IsEligible function that both loops could call.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-09T15:25:37Z",
      "diff_hunk" : "@@ -2429,165 +2429,83 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n-{\n-    std::vector<char> vfIncluded;\n-\n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n-\n-    FastRandomContext insecure_rand;\n-\n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors,\n+    std::vector<COutput> vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount not_input_fees, const CFeeRate effective_fee,\n+    bool use_bnb, int change_output_size, int change_spend_size) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n     std::vector<CInputCoin> vValue;\n-    CAmount nTotalLower = 0;\n+    if (use_bnb) {\n \n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n+        // Get long term estimate\n+        FeeCalculation feeCalc;\n+        CCoinControl temp;\n+        temp.m_confirm_target = 1008;\n+        CFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);\n \n-    for (const COutput &output : vCoins)\n-    {\n-        if (!output.fSpendable)\n-            continue;\n+        // Calculate cost of change\n+        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(change_spend_size) + effective_fee.GetFee(change_output_size);\n \n-        const CWalletTx *pcoin = output.tx;\n+        // Filter by the min conf specs and add to vValue and calculate effective value\n+        for (const COutput &output : vCoins)\n+        {\n+            if (!output.fSpendable)\n+                continue;\n \n-        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n-            continue;\n+            const CWalletTx *pcoin = output.tx;\n \n-        if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n-            continue;\n-\n-        int i = output.i;\n+            if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n+                continue;\n \n-        CInputCoin coin = CInputCoin(pcoin, i);\n+            if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n+                continue;\n \n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n+            int i = output.i;\n+            CInputCoin coin(pcoin, i);\n+            coin.effective_value = coin.txout.nValue - (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+            // Only include outputs that are not negative effective value (i.e. not dust)\n+            if (coin.txout.nValue > 0) {\n+                coin.fee = output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes);\n+                coin.long_term_fee = output.nInputBytes < 0 ? 0 : long_term_feerate.GetFee(output.nInputBytes);\n+                vValue.push_back(coin);\n+            }\n         }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n+        return SelectCoinsBnB(vValue, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n+    } else {\n+        // Filter by the min conf specs and add to vValue\n+        for (const COutput &output : vCoins)\n         {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n+            if (!output.fSpendable)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173479971",
      "id" : 173479971,
      "original_commit_id" : "44657d0374d7fb25cca5cd098b27a5163f139de6",
      "original_position" : 149,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102683142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173479971",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173480498"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173480498"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Have SelectCoinsMinConf and SelectCoins use BnB or Knapsack\" (44657d0374d7fb25cca5cd098b27a5163f139de6)\r\n\r\nI'm not sure having `pcoin` and `i` variables actually makes the code easier to read. It would seem simpler to drop these extra variables and just write `output.tx` and `output.i` directly.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-09T15:27:29Z",
      "diff_hunk" : "@@ -2429,165 +2429,83 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n-{\n-    std::vector<char> vfIncluded;\n-\n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n-\n-    FastRandomContext insecure_rand;\n-\n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors,\n+    std::vector<COutput> vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount not_input_fees, const CFeeRate effective_fee,\n+    bool use_bnb, int change_output_size, int change_spend_size) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n     std::vector<CInputCoin> vValue;\n-    CAmount nTotalLower = 0;\n+    if (use_bnb) {\n \n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n+        // Get long term estimate\n+        FeeCalculation feeCalc;\n+        CCoinControl temp;\n+        temp.m_confirm_target = 1008;\n+        CFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);\n \n-    for (const COutput &output : vCoins)\n-    {\n-        if (!output.fSpendable)\n-            continue;\n+        // Calculate cost of change\n+        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(change_spend_size) + effective_fee.GetFee(change_output_size);\n \n-        const CWalletTx *pcoin = output.tx;\n+        // Filter by the min conf specs and add to vValue and calculate effective value\n+        for (const COutput &output : vCoins)\n+        {\n+            if (!output.fSpendable)\n+                continue;\n \n-        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n-            continue;\n+            const CWalletTx *pcoin = output.tx;\n \n-        if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n-            continue;\n-\n-        int i = output.i;\n+            if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n+                continue;\n \n-        CInputCoin coin = CInputCoin(pcoin, i);\n+            if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n+                continue;\n \n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n+            int i = output.i;\n+            CInputCoin coin(pcoin, i);\n+            coin.effective_value = coin.txout.nValue - (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+            // Only include outputs that are not negative effective value (i.e. not dust)\n+            if (coin.txout.nValue > 0) {\n+                coin.fee = output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes);\n+                coin.long_term_fee = output.nInputBytes < 0 ? 0 : long_term_feerate.GetFee(output.nInputBytes);\n+                vValue.push_back(coin);\n+            }\n         }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n+        return SelectCoinsBnB(vValue, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n+    } else {\n+        // Filter by the min conf specs and add to vValue\n+        for (const COutput &output : vCoins)\n         {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n+            if (!output.fSpendable)\n+                continue;\n \n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n+            const CWalletTx *pcoin = output.tx;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173480498",
      "id" : 173480498,
      "original_commit_id" : "44657d0374d7fb25cca5cd098b27a5163f139de6",
      "original_position" : 157,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102683142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173480498",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173488104"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173488104"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Have SelectCoinsMinConf and SelectCoins use BnB or Knapsack\" (44657d0374d7fb25cca5cd098b27a5163f139de6)\r\n\r\nMaybe some of these arguments could be moved to structs, since there are so many values that have to be passed along from CreateTransaction -> SelectCoins -> SelectCoinsMinConf, and SelectCoinsMinConf is pretty rewritten in this commit anyway.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-09T15:52:24Z",
      "diff_hunk" : "@@ -2633,13 +2554,13 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     bool fRejectLongChains = gArgs.GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS);\n \n     bool res = nTargetValue <= nValueFromPresetInputs ||\n-        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 6, 0, vCoins, setCoinsRet, nValueRet) ||\n-        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 1, 0, vCoins, setCoinsRet, nValueRet) ||\n-        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, 2, vCoins, setCoinsRet, nValueRet)) ||\n-        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, std::min((size_t)4, nMaxChainLength/3), vCoins, setCoinsRet, nValueRet)) ||\n-        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, nMaxChainLength/2, vCoins, setCoinsRet, nValueRet)) ||\n-        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, nMaxChainLength, vCoins, setCoinsRet, nValueRet)) ||\n-        (bSpendZeroConfChange && !fRejectLongChains && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, std::numeric_limits<uint64_t>::max(), vCoins, setCoinsRet, nValueRet));\n+        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 6, 0, vCoins, setCoinsRet, nValueRet, not_input_fees, effective_fee, use_bnb, change_output_size, change_spend_size) ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173488104",
      "id" : 173488104,
      "original_commit_id" : "44657d0374d7fb25cca5cd098b27a5163f139de6",
      "original_position" : 259,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102683142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173488104",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> That was done in order to make the changes clearer and easier to follow. Otherwise it would be very large commit that is not reviewer friendly IMO.\r\n\r\nMy suggestion to move code to coinselection.cpp instead of copying it in https://github.com/bitcoin/bitcoin/pull/10637#discussion_r172894613 would make a combined SelectCoins / CreateTransaction commit smaller, and I think would make it easier to see how behavior is changing.\r\n\r\nBut I don't think it's worth spending much effort to restructure commits unless you are expecting to have a number of new reviewers look at this.",
      "created_at" : "2018-03-09T16:07:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-371856726",
      "id" : 371856726,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-09T16:07:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371856726",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173500918"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173500918"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Use BnB in CreateTransaction on the first pass through the loop\" (851f71b84b12581cce933fd066ded98d213295ad)\r\n\r\nThis change and other `nBytes` updates in `CreateTransaction` would seem to make more sense as part of the \"Calculate and store the number of bytes\" commit instead of the \"Use BnB\" commit since they are refactorings that don't change behavior.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-09T16:35:56Z",
      "diff_hunk" : "@@ -2889,20 +2909,12 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     txNew.vin.push_back(CTxIn(coin.outpoint,CScript(),\n                                               nSequence));\n \n-                // Fill in dummy signatures for fee calculation.\n-                if (!DummySignTx(txNew, setCoins)) {\n+                nBytes = CalculateMaximumSignedTxSize(txNew, this);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173500918",
      "id" : 173500918,
      "original_commit_id" : "851f71b84b12581cce933fd066ded98d213295ad",
      "original_position" : 89,
      "path" : "src/wallet/wallet.cpp",
      "position" : 489,
      "pull_request_review_id" : 102707912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173500918",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173502504"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173502504"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Use BnB in CreateTransaction on the first pass through the loop\" (851f71b84b12581cce933fd066ded98d213295ad)\r\n\r\nWould update comment to mention that `SelectCoins` call will change `use_bnb` to false if it was not used, since it's not obvious that `use_bnb` is an input/output parameter. Could also split `use_bnb` into separate input and output parameters like `bnb_used` and `disable_bnb`.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-09T16:41:28Z",
      "diff_hunk" : "@@ -2833,23 +2846,30 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 if (pick_new_inputs) {\n                     nValueIn = 0;\n                     setCoins.clear();\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, &coin_control))\n+                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, not_input_fees, nFeeRateNeeded, coin_control, use_bnb, change_prototype_size, CalculateMaximumSignedInputSize(change_prototype_txout, this)))\n                     {\n-                        strFailReason = _(\"Insufficient funds\");\n-                        return false;\n+                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173502504",
      "id" : 173502504,
      "original_commit_id" : "851f71b84b12581cce933fd066ded98d213295ad",
      "original_position" : 56,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102707912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173502504",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "@achow101 We have a policy that every commit in a pull request must compile and pass tests. This helps with review, if you know you can assume that every incremental change is a fully-functional codebase, and there aren't things you need to understand from future commits to see how things fit together. It also helps with git bisects, making sure that things don't accidentally get broken and unbroken somewhere in a codebase's history, leading you on a goose chase.\r\n\r\nCurrently, none of your commits compile, except the last one. Fixing this would help review greatly.",
      "created_at" : "2018-03-09T16:50:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-371870350",
      "id" : 371870350,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-09T16:53:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371870350",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173505807"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173505807"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Use BnB in CreateTransaction on the first pass through the loop\" (851f71b84b12581cce933fd066ded98d213295ad)\r\n\r\nMight be safer/simpler to always compute `not_input_fees` correctly, instead of it leaving partially set depending on `fSubtractFeeFromAmount` and `use_bnb` values (in cases where it isn't used).\r\n\r\n",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-09T16:52:33Z",
      "diff_hunk" : "@@ -2811,6 +2821,9 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                             fFirst = false;\n                             txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n                         }\n+                    } else if (use_bnb){\n+                        // On the first pass BnB selector, include the fee cost for outputs\n+                        not_input_fees +=  nFeeRateNeeded.GetFee(::GetSerializeSize(txout, SER_NETWORK, PROTOCOL_VERSION));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173505807",
      "id" : 173505807,
      "original_commit_id" : "851f71b84b12581cce933fd066ded98d213295ad",
      "original_position" : 43,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102707912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173505807",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173508518"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173508518"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Have SelectCoinsMinConf and SelectCoins use BnB or Knapsack\" (44657d0374d7fb25cca5cd098b27a5163f139de6)\r\n\r\nSeems like it would be a little simpler for the caller and more consistent as a way of passing params if a `tx_noinputs_size` value were passed instead of `not_input_fees`.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-09T17:02:24Z",
      "diff_hunk" : "@@ -2429,165 +2429,83 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n-{\n-    std::vector<char> vfIncluded;\n-\n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n-\n-    FastRandomContext insecure_rand;\n-\n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors,\n+    std::vector<COutput> vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount not_input_fees, const CFeeRate effective_fee,\n+    bool use_bnb, int change_output_size, int change_spend_size) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n     std::vector<CInputCoin> vValue;\n-    CAmount nTotalLower = 0;\n+    if (use_bnb) {\n \n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n+        // Get long term estimate\n+        FeeCalculation feeCalc;\n+        CCoinControl temp;\n+        temp.m_confirm_target = 1008;\n+        CFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);\n \n-    for (const COutput &output : vCoins)\n-    {\n-        if (!output.fSpendable)\n-            continue;\n+        // Calculate cost of change\n+        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(change_spend_size) + effective_fee.GetFee(change_output_size);\n \n-        const CWalletTx *pcoin = output.tx;\n+        // Filter by the min conf specs and add to vValue and calculate effective value\n+        for (const COutput &output : vCoins)\n+        {\n+            if (!output.fSpendable)\n+                continue;\n \n-        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n-            continue;\n+            const CWalletTx *pcoin = output.tx;\n \n-        if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n-            continue;\n-\n-        int i = output.i;\n+            if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n+                continue;\n \n-        CInputCoin coin = CInputCoin(pcoin, i);\n+            if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n+                continue;\n \n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n+            int i = output.i;\n+            CInputCoin coin(pcoin, i);\n+            coin.effective_value = coin.txout.nValue - (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+            // Only include outputs that are not negative effective value (i.e. not dust)\n+            if (coin.txout.nValue > 0) {\n+                coin.fee = output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes);\n+                coin.long_term_fee = output.nInputBytes < 0 ? 0 : long_term_feerate.GetFee(output.nInputBytes);\n+                vValue.push_back(coin);\n+            }\n         }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n+        return SelectCoinsBnB(vValue, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n+    } else {\n+        // Filter by the min conf specs and add to vValue\n+        for (const COutput &output : vCoins)\n         {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n+            if (!output.fSpendable)\n+                continue;\n \n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n+            const CWalletTx *pcoin = output.tx;\n \n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n+            if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n+                continue;\n \n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n-            }\n+            if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n+                continue;\n \n-        if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n-            LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n-            for (unsigned int i = 0; i < vValue.size(); i++) {\n-                if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n-                }\n-            }\n-            LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));\n+            int i = output.i;\n+            CInputCoin coin(pcoin, i);\n+            vValue.push_back(coin);\n         }\n+        return KnapsackSolver(vValue, nTargetValue, setCoinsRet, nValueRet);\n     }\n-\n-    return true;\n }\n \n-bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const\n+bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount not_input_fees, const CFeeRate effective_fee, const CCoinControl& coin_control, bool& use_bnb, int change_output_size, int change_spend_size) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173508518",
      "id" : 173508518,
      "original_commit_id" : "44657d0374d7fb25cca5cd098b27a5163f139de6",
      "original_position" : 202,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102707912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173508518",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173518456"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173518456"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add coin selection test cases and move the original test cases\" (35794f4fd9ea54e4a77948e67feb08fb5af06959)\r\n\r\nMaybe name this `g_balance` since it's a new variable.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-09T17:43:01Z",
      "diff_hunk" : "@@ -0,0 +1,548 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5\n+\n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n+\n+typedef std::set<CInputCoin> CoinSet;\n+\n+static std::vector<COutput> vCoins;\n+static const CWallet testWallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n+static CAmount balance = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173518456",
      "id" : 173518456,
      "original_commit_id" : "35794f4fd9ea54e4a77948e67feb08fb5af06959",
      "original_position" : 31,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : 31,
      "pull_request_review_id" : 102729321,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173518456",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173538545"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173538545"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add coin selection test cases and move the original test cases\" (35794f4fd9ea54e4a77948e67feb08fb5af06959)\r\n\r\nMaybe delete, looks like leftover example code.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-09T19:03:20Z",
      "diff_hunk" : "@@ -0,0 +1,548 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5\n+\n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n+\n+typedef std::set<CInputCoin> CoinSet;\n+\n+static std::vector<COutput> vCoins;\n+static const CWallet testWallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n+static CAmount balance = 0;\n+\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput + 1);\n+    tx.vout[nInput].nValue = nValue;\n+    set.emplace_back(MakeTransactionRef(tx), nInput);\n+}\n+\n+static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput + 1);\n+    tx.vout[nInput].nValue = nValue;\n+    set.emplace(MakeTransactionRef(tx), nInput);\n+}\n+\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+{\n+    balance += nValue;\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n+    tx.vout.resize(nInput + 1);\n+    tx.vout[nInput].nValue = nValue;\n+    if (fIsFromMe) {\n+        // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n+        // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n+        tx.vin.resize(1);\n+    }\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    if (fIsFromMe)\n+    {\n+        wtx->fDebitCached = true;\n+        wtx->nDebitCached = 1;\n+    }\n+    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    vCoins.push_back(output);\n+    wtxn.emplace_back(std::move(wtx));\n+}\n+\n+static void empty_wallet(void)\n+{\n+    vCoins.clear();\n+    wtxn.clear();\n+    balance = 0;\n+}\n+\n+static bool equal_sets(CoinSet a, CoinSet b)\n+{\n+    std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n+    return ret.first == a.end() && ret.second == b.end();\n+}\n+\n+static CAmount make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n+{\n+    utxo_pool.clear();\n+    CAmount target = 0;\n+    for (int i = 0; i < utxos; ++i) {\n+        target += (CAmount)1 << (utxos+i);\n+        add_coin((CAmount)1 << (utxos+i), 2*i, utxo_pool);\n+        add_coin(((CAmount)1 << (utxos+i)) + ((CAmount)1 << (utxos-1-i)), 2*i + 1, utxo_pool);\n+    }\n+    return target;\n+}\n+\n+// Branch and bound coin selection tests\n+BOOST_AUTO_TEST_CASE(bnb_search_test)\n+{\n+\n+    LOCK(testWallet.cs_wallet);\n+\n+    // Setup\n+    std::vector<CInputCoin> utxo_pool;\n+    CoinSet selection;\n+    CoinSet actual_selection;\n+    CAmount value_ret = 0;\n+    CAmount not_input_fees = 0;\n+\n+    /////////////////////////\n+    // Known Outcome tests //\n+    /////////////////////////\n+    BOOST_TEST_MESSAGE(\"Testing known outcomes\");\n+\n+    // Empty utxo pool\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    selection.clear();\n+\n+    // Add utxos\n+    add_coin(1 * CENT, 1, utxo_pool);\n+    add_coin(2 * CENT, 2, utxo_pool);\n+    add_coin(3 * CENT, 3, utxo_pool);\n+    add_coin(4 * CENT, 4, utxo_pool);\n+\n+    // Select 1 Cent\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+\n+    // Select 2 Cent\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 2 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+\n+    // Select 5 Cent\n+    add_coin(3 * CENT, 3, actual_selection);\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 5 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+\n+    // Select 11 Cent, not possible\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 11 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    actual_selection.clear();\n+    selection.clear();\n+\n+    // Select 10 Cent\n+    add_coin(5 * CENT, 5, utxo_pool);\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(3 * CENT, 3, actual_selection);\n+    add_coin(2 * CENT, 2, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 10 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+\n+    // Negative effective value\n+    // Select 10 Cent but have 1 Cent not be possible because too small\n+    add_coin(5 * CENT, 5, actual_selection);\n+    add_coin(3 * CENT, 3, actual_selection);\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 10 * CENT, 5000, selection, value_ret, not_input_fees));\n+\n+    // Select 0.25 Cent, not possible\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 0.25 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    actual_selection.clear();\n+    selection.clear();\n+\n+    // Iteration exhaustion test\n+    CAmount target = make_hard_case(17, utxo_pool);\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, target, 0, selection, value_ret, not_input_fees)); // Should exhaust\n+    target = make_hard_case(14, utxo_pool);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, target, 0, selection, value_ret, not_input_fees)); // Should not exhaust\n+\n+    // Test same value early bailout optimization\n+    add_coin(7 * CENT, 7, actual_selection);\n+    add_coin(7 * CENT, 7, actual_selection);\n+    add_coin(7 * CENT, 7, actual_selection);\n+    add_coin(7 * CENT, 7, actual_selection);\n+    add_coin(2 * CENT, 7, actual_selection);\n+    add_coin(7 * CENT, 7, utxo_pool);\n+    add_coin(7 * CENT, 7, utxo_pool);\n+    add_coin(7 * CENT, 7, utxo_pool);\n+    add_coin(7 * CENT, 7, utxo_pool);\n+    add_coin(2 * CENT, 7, utxo_pool);\n+    for (int i = 0; i < 50000; ++i) {\n+        add_coin(5 * CENT, 7, utxo_pool);\n+    }\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 30 * CENT, 5000, selection, value_ret, not_input_fees));\n+\n+    ////////////////////\n+    // Behavior tests //\n+    ////////////////////\n+    BOOST_TEST_MESSAGE(\"Testing behavior\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173538545",
      "id" : 173538545,
      "original_commit_id" : "35794f4fd9ea54e4a77948e67feb08fb5af06959",
      "original_position" : 201,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 102729321,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173538545",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173540968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173540968"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Benchmark BnB in the worst case where it exhausts\" (05e5e77b12e79aee915e957f2be85ea3f2cb0e20)\r\n\r\nWould be nice to deduplicate this, maybe by creating a wallet test util file. Or could just note that this is copied from code in coinselector_tests.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-09T19:12:28Z",
      "diff_hunk" : "@@ -59,4 +60,48 @@ static void CoinSelection(benchmark::State& state)\n     }\n }\n \n+typedef std::set<CInputCoin> CoinSet;\n+\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set, const CWallet& wallet)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&wallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace_back(wtx.get(), nInput);\n+}\n+\n+static CAmount make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool, const CWallet& wallet)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173540968",
      "id" : 173540968,
      "original_commit_id" : "05e5e77b12e79aee915e957f2be85ea3f2cb0e20",
      "original_position" : 36,
      "path" : "src/bench/coin_selection.cpp",
      "position" : null,
      "pull_request_review_id" : 102729321,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173540968",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173554768"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173554768"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement Branch and Bound coin selection in a new file\" (fe2ce81f30c288b7caf16ffed3b270272d4b5818)\r\n\r\nThis line should probably be moved, \"best solution\" comment above it doesn't apply to it.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-09T20:07:07Z",
      "diff_hunk" : "@@ -0,0 +1,160 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/coinselection.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an\n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * @param const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * @param const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * @param const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * @param std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * @param CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * @param CAmount not_input_fees -> The fees that need to be paid for the outputs and fixed size overhead (version, locktime, marker and flag)\n+ */\n+\n+static const size_t TOTAL_TRIES = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    int depth = 0;\n+    std::vector<bool> selection(utxo_pool.size()); // select the utxo at this index\n+    bool backtrack = false;\n+    CAmount actual_target = not_input_fees + target_value;\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.effective_value;\n+    }\n+    if (lookahead < actual_target) {\n+        return false;\n+    }\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Best solution\n+    CAmount curr_waste = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173554768",
      "id" : 173554768,
      "original_commit_id" : "fe2ce81f30c288b7caf16ffed3b270272d4b5818",
      "original_position" : 75,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102729321,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173554768",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173555520"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173555520"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement Branch and Bound coin selection in a new file\" (fe2ce81)\r\n\r\nMight be clarifying to add \"curr\" prefix to other variables besides `curr_waste`. E.g. you could rename `value_track` `curr_value`, `selection` `curr_selection`, `lookahead` `curr_available_value`.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-09T20:10:30Z",
      "diff_hunk" : "@@ -0,0 +1,160 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/coinselection.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an\n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * @param const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * @param const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * @param const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * @param std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * @param CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * @param CAmount not_input_fees -> The fees that need to be paid for the outputs and fixed size overhead (version, locktime, marker and flag)\n+ */\n+\n+static const size_t TOTAL_TRIES = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    int depth = 0;\n+    std::vector<bool> selection(utxo_pool.size()); // select the utxo at this index\n+    bool backtrack = false;\n+    CAmount actual_target = not_input_fees + target_value;\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.effective_value;\n+    }\n+    if (lookahead < actual_target) {\n+        return false;\n+    }\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Best solution\n+    CAmount curr_waste = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173555520",
      "id" : 173555520,
      "original_commit_id" : "fe2ce81f30c288b7caf16ffed3b270272d4b5818",
      "original_position" : 75,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102729321,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173555520",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173555838"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173555838"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement Branch and Bound coin selection in a new file\" (fe2ce81f30c288b7caf16ffed3b270272d4b5818)\r\n\r\nSeems like `backtrack` variable should just be declared inside the loop. It looks like it will always be false at the top of every iteration given `if (backtrack) backtrack = false;` below. ",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-09T20:11:47Z",
      "diff_hunk" : "@@ -0,0 +1,160 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/coinselection.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an\n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * @param const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * @param const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * @param const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * @param std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * @param CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * @param CAmount not_input_fees -> The fees that need to be paid for the outputs and fixed size overhead (version, locktime, marker and flag)\n+ */\n+\n+static const size_t TOTAL_TRIES = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    int depth = 0;\n+    std::vector<bool> selection(utxo_pool.size()); // select the utxo at this index\n+    bool backtrack = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173555838",
      "id" : 173555838,
      "original_commit_id" : "fe2ce81f30c288b7caf16ffed3b270272d4b5818",
      "original_position" : 59,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102729321,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173555838",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173578590"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173578590"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement Branch and Bound coin selection in a new file\" (fe2ce81f30c288b7caf16ffed3b270272d4b5818)\r\n\r\nIt might be helpful if there was a comment explaining how `selection` gets updated during the loop. The way the code uses `depth` variable to select coins from beginning and `backtrack` variable to deselect coins from the end is pretty  unusual (or at least is something I never encountered before). For example, if there are three coins, and no optimizations apply, the coin selections that get tested are:\r\n\r\n```\r\n000\r\n100\r\n110\r\n111\r\n110\r\n100\r\n101\r\n100\r\n000\r\n010\r\n011\r\n010\r\n000\r\n001\r\n000\r\n```",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-09T21:56:21Z",
      "diff_hunk" : "@@ -0,0 +1,160 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/coinselection.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an\n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * @param const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * @param const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * @param const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * @param std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * @param CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * @param CAmount not_input_fees -> The fees that need to be paid for the outputs and fixed size overhead (version, locktime, marker and flag)\n+ */\n+\n+static const size_t TOTAL_TRIES = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    int depth = 0;\n+    std::vector<bool> selection(utxo_pool.size()); // select the utxo at this index",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173578590",
      "id" : 173578590,
      "original_commit_id" : "fe2ce81f30c288b7caf16ffed3b270272d4b5818",
      "original_position" : 58,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102729321,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173578590",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've addressed a lot of @ryanofsky's comments.\r\n\r\nI'm going to squash, rebase, and re-commit this in order to make each commit compilable and better organized. The original commits will be saved here: https://github.com/achow101/bitcoin/tree/bnb-orig. The ending diff between what I am going to do and the original should be the same, just reorganized.",
      "created_at" : "2018-03-10T00:58:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-371987401",
      "id" : 371987401,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-10T00:58:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371987401",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606347"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173606347"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-10T01:38:03Z",
      "diff_hunk" : "@@ -2429,165 +2429,83 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n-{\n-    std::vector<char> vfIncluded;\n-\n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n-\n-    FastRandomContext insecure_rand;\n-\n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors,\n+    std::vector<COutput> vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount not_input_fees, const CFeeRate effective_fee,\n+    bool use_bnb, int change_output_size, int change_spend_size) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n     std::vector<CInputCoin> vValue;\n-    CAmount nTotalLower = 0;\n+    if (use_bnb) {\n \n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n+        // Get long term estimate\n+        FeeCalculation feeCalc;\n+        CCoinControl temp;\n+        temp.m_confirm_target = 1008;\n+        CFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);\n \n-    for (const COutput &output : vCoins)\n-    {\n-        if (!output.fSpendable)\n-            continue;\n+        // Calculate cost of change\n+        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(change_spend_size) + effective_fee.GetFee(change_output_size);\n \n-        const CWalletTx *pcoin = output.tx;\n+        // Filter by the min conf specs and add to vValue and calculate effective value\n+        for (const COutput &output : vCoins)\n+        {\n+            if (!output.fSpendable)\n+                continue;\n \n-        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n-            continue;\n+            const CWalletTx *pcoin = output.tx;\n \n-        if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n-            continue;\n-\n-        int i = output.i;\n+            if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n+                continue;\n \n-        CInputCoin coin = CInputCoin(pcoin, i);\n+            if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n+                continue;\n \n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n+            int i = output.i;\n+            CInputCoin coin(pcoin, i);\n+            coin.effective_value = coin.txout.nValue - (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+            // Only include outputs that are not negative effective value (i.e. not dust)\n+            if (coin.txout.nValue > 0) {\n+                coin.fee = output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes);\n+                coin.long_term_fee = output.nInputBytes < 0 ? 0 : long_term_feerate.GetFee(output.nInputBytes);\n+                vValue.push_back(coin);\n+            }\n         }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n+        return SelectCoinsBnB(vValue, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n+    } else {\n+        // Filter by the min conf specs and add to vValue\n+        for (const COutput &output : vCoins)\n         {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n+            if (!output.fSpendable)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606347",
      "id" : 173606347,
      "in_reply_to_id" : 173479971,
      "original_commit_id" : "44657d0374d7fb25cca5cd098b27a5163f139de6",
      "original_position" : 149,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102834475,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173606347",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606358"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173606358"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-10T01:38:08Z",
      "diff_hunk" : "@@ -2429,165 +2429,83 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n-{\n-    std::vector<char> vfIncluded;\n-\n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n-\n-    FastRandomContext insecure_rand;\n-\n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors,\n+    std::vector<COutput> vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount not_input_fees, const CFeeRate effective_fee,\n+    bool use_bnb, int change_output_size, int change_spend_size) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n     std::vector<CInputCoin> vValue;\n-    CAmount nTotalLower = 0;\n+    if (use_bnb) {\n \n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n+        // Get long term estimate\n+        FeeCalculation feeCalc;\n+        CCoinControl temp;\n+        temp.m_confirm_target = 1008;\n+        CFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);\n \n-    for (const COutput &output : vCoins)\n-    {\n-        if (!output.fSpendable)\n-            continue;\n+        // Calculate cost of change\n+        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(change_spend_size) + effective_fee.GetFee(change_output_size);\n \n-        const CWalletTx *pcoin = output.tx;\n+        // Filter by the min conf specs and add to vValue and calculate effective value\n+        for (const COutput &output : vCoins)\n+        {\n+            if (!output.fSpendable)\n+                continue;\n \n-        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n-            continue;\n+            const CWalletTx *pcoin = output.tx;\n \n-        if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n-            continue;\n-\n-        int i = output.i;\n+            if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n+                continue;\n \n-        CInputCoin coin = CInputCoin(pcoin, i);\n+            if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n+                continue;\n \n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n+            int i = output.i;\n+            CInputCoin coin(pcoin, i);\n+            coin.effective_value = coin.txout.nValue - (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+            // Only include outputs that are not negative effective value (i.e. not dust)\n+            if (coin.txout.nValue > 0) {\n+                coin.fee = output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes);\n+                coin.long_term_fee = output.nInputBytes < 0 ? 0 : long_term_feerate.GetFee(output.nInputBytes);\n+                vValue.push_back(coin);\n+            }\n         }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n+        return SelectCoinsBnB(vValue, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n+    } else {\n+        // Filter by the min conf specs and add to vValue\n+        for (const COutput &output : vCoins)\n         {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n+            if (!output.fSpendable)\n+                continue;\n \n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n+            const CWalletTx *pcoin = output.tx;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606358",
      "id" : 173606358,
      "in_reply_to_id" : 173480498,
      "original_commit_id" : "44657d0374d7fb25cca5cd098b27a5163f139de6",
      "original_position" : 157,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102834485,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173606358",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606387"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173606387"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've created two structs, one for the confirmation target and one for additional coin selection parameters.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-10T01:38:42Z",
      "diff_hunk" : "@@ -2633,13 +2554,13 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     bool fRejectLongChains = gArgs.GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS);\n \n     bool res = nTargetValue <= nValueFromPresetInputs ||\n-        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 6, 0, vCoins, setCoinsRet, nValueRet) ||\n-        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 1, 0, vCoins, setCoinsRet, nValueRet) ||\n-        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, 2, vCoins, setCoinsRet, nValueRet)) ||\n-        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, std::min((size_t)4, nMaxChainLength/3), vCoins, setCoinsRet, nValueRet)) ||\n-        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, nMaxChainLength/2, vCoins, setCoinsRet, nValueRet)) ||\n-        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, nMaxChainLength, vCoins, setCoinsRet, nValueRet)) ||\n-        (bSpendZeroConfChange && !fRejectLongChains && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 0, 1, std::numeric_limits<uint64_t>::max(), vCoins, setCoinsRet, nValueRet));\n+        SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, 1, 6, 0, vCoins, setCoinsRet, nValueRet, not_input_fees, effective_fee, use_bnb, change_output_size, change_spend_size) ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606387",
      "id" : 173606387,
      "in_reply_to_id" : 173488104,
      "original_commit_id" : "44657d0374d7fb25cca5cd098b27a5163f139de6",
      "original_position" : 259,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102834526,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173606387",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606396"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173606396"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-10T01:38:55Z",
      "diff_hunk" : "@@ -2833,23 +2846,30 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 if (pick_new_inputs) {\n                     nValueIn = 0;\n                     setCoins.clear();\n-                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, &coin_control))\n+                    if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, not_input_fees, nFeeRateNeeded, coin_control, use_bnb, change_prototype_size, CalculateMaximumSignedInputSize(change_prototype_txout, this)))\n                     {\n-                        strFailReason = _(\"Insufficient funds\");\n-                        return false;\n+                        // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606396",
      "id" : 173606396,
      "in_reply_to_id" : 173502504,
      "original_commit_id" : "851f71b84b12581cce933fd066ded98d213295ad",
      "original_position" : 56,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102834537,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173606396",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606402"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173606402"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-10T01:39:02Z",
      "diff_hunk" : "@@ -2811,6 +2821,9 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                             fFirst = false;\n                             txout.nValue -= nFeeRet % nSubtractFeeFromAmount;\n                         }\n+                    } else if (use_bnb){\n+                        // On the first pass BnB selector, include the fee cost for outputs\n+                        not_input_fees +=  nFeeRateNeeded.GetFee(::GetSerializeSize(txout, SER_NETWORK, PROTOCOL_VERSION));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606402",
      "id" : 173606402,
      "in_reply_to_id" : 173505807,
      "original_commit_id" : "851f71b84b12581cce933fd066ded98d213295ad",
      "original_position" : 43,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102834545,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173606402",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606406"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173606406"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-10T01:39:08Z",
      "diff_hunk" : "@@ -2429,165 +2429,83 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n-{\n-    std::vector<char> vfIncluded;\n-\n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n-\n-    FastRandomContext insecure_rand;\n-\n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors,\n+    std::vector<COutput> vCoins, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount not_input_fees, const CFeeRate effective_fee,\n+    bool use_bnb, int change_output_size, int change_spend_size) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n     std::vector<CInputCoin> vValue;\n-    CAmount nTotalLower = 0;\n+    if (use_bnb) {\n \n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n+        // Get long term estimate\n+        FeeCalculation feeCalc;\n+        CCoinControl temp;\n+        temp.m_confirm_target = 1008;\n+        CFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);\n \n-    for (const COutput &output : vCoins)\n-    {\n-        if (!output.fSpendable)\n-            continue;\n+        // Calculate cost of change\n+        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(change_spend_size) + effective_fee.GetFee(change_output_size);\n \n-        const CWalletTx *pcoin = output.tx;\n+        // Filter by the min conf specs and add to vValue and calculate effective value\n+        for (const COutput &output : vCoins)\n+        {\n+            if (!output.fSpendable)\n+                continue;\n \n-        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n-            continue;\n+            const CWalletTx *pcoin = output.tx;\n \n-        if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n-            continue;\n-\n-        int i = output.i;\n+            if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n+                continue;\n \n-        CInputCoin coin = CInputCoin(pcoin, i);\n+            if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n+                continue;\n \n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n+            int i = output.i;\n+            CInputCoin coin(pcoin, i);\n+            coin.effective_value = coin.txout.nValue - (output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes));\n+            // Only include outputs that are not negative effective value (i.e. not dust)\n+            if (coin.txout.nValue > 0) {\n+                coin.fee = output.nInputBytes < 0 ? 0 : effective_fee.GetFee(output.nInputBytes);\n+                coin.long_term_fee = output.nInputBytes < 0 ? 0 : long_term_feerate.GetFee(output.nInputBytes);\n+                vValue.push_back(coin);\n+            }\n         }\n-    }\n-\n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n+        return SelectCoinsBnB(vValue, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n+    } else {\n+        // Filter by the min conf specs and add to vValue\n+        for (const COutput &output : vCoins)\n         {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n+            if (!output.fSpendable)\n+                continue;\n \n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n+            const CWalletTx *pcoin = output.tx;\n \n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n+            if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n+                continue;\n \n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n-            }\n+            if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n+                continue;\n \n-        if (LogAcceptCategory(BCLog::SELECTCOINS)) {\n-            LogPrint(BCLog::SELECTCOINS, \"SelectCoins() best subset: \");\n-            for (unsigned int i = 0; i < vValue.size(); i++) {\n-                if (vfBest[i]) {\n-                    LogPrint(BCLog::SELECTCOINS, \"%s \", FormatMoney(vValue[i].txout.nValue));\n-                }\n-            }\n-            LogPrint(BCLog::SELECTCOINS, \"total %s\\n\", FormatMoney(nBest));\n+            int i = output.i;\n+            CInputCoin coin(pcoin, i);\n+            vValue.push_back(coin);\n         }\n+        return KnapsackSolver(vValue, nTargetValue, setCoinsRet, nValueRet);\n     }\n-\n-    return true;\n }\n \n-bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const\n+bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CAmount not_input_fees, const CFeeRate effective_fee, const CCoinControl& coin_control, bool& use_bnb, int change_output_size, int change_spend_size) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606406",
      "id" : 173606406,
      "in_reply_to_id" : 173508518,
      "original_commit_id" : "44657d0374d7fb25cca5cd098b27a5163f139de6",
      "original_position" : 202,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 102834550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173606406",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606412"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173606412"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-10T01:39:15Z",
      "diff_hunk" : "@@ -0,0 +1,548 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5\n+\n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n+\n+typedef std::set<CInputCoin> CoinSet;\n+\n+static std::vector<COutput> vCoins;\n+static const CWallet testWallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n+static CAmount balance = 0;\n+\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput + 1);\n+    tx.vout[nInput].nValue = nValue;\n+    set.emplace_back(MakeTransactionRef(tx), nInput);\n+}\n+\n+static void add_coin(const CAmount& nValue, int nInput, CoinSet& set)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput + 1);\n+    tx.vout[nInput].nValue = nValue;\n+    set.emplace(MakeTransactionRef(tx), nInput);\n+}\n+\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+{\n+    balance += nValue;\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n+    tx.vout.resize(nInput + 1);\n+    tx.vout[nInput].nValue = nValue;\n+    if (fIsFromMe) {\n+        // IsFromMe() returns (GetDebit() > 0), and GetDebit() is 0 if vin.empty(),\n+        // so stop vin being empty, and cache a non-zero Debit to fake out IsFromMe()\n+        tx.vin.resize(1);\n+    }\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&testWallet, MakeTransactionRef(std::move(tx))));\n+    if (fIsFromMe)\n+    {\n+        wtx->fDebitCached = true;\n+        wtx->nDebitCached = 1;\n+    }\n+    COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n+    vCoins.push_back(output);\n+    wtxn.emplace_back(std::move(wtx));\n+}\n+\n+static void empty_wallet(void)\n+{\n+    vCoins.clear();\n+    wtxn.clear();\n+    balance = 0;\n+}\n+\n+static bool equal_sets(CoinSet a, CoinSet b)\n+{\n+    std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n+    return ret.first == a.end() && ret.second == b.end();\n+}\n+\n+static CAmount make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n+{\n+    utxo_pool.clear();\n+    CAmount target = 0;\n+    for (int i = 0; i < utxos; ++i) {\n+        target += (CAmount)1 << (utxos+i);\n+        add_coin((CAmount)1 << (utxos+i), 2*i, utxo_pool);\n+        add_coin(((CAmount)1 << (utxos+i)) + ((CAmount)1 << (utxos-1-i)), 2*i + 1, utxo_pool);\n+    }\n+    return target;\n+}\n+\n+// Branch and bound coin selection tests\n+BOOST_AUTO_TEST_CASE(bnb_search_test)\n+{\n+\n+    LOCK(testWallet.cs_wallet);\n+\n+    // Setup\n+    std::vector<CInputCoin> utxo_pool;\n+    CoinSet selection;\n+    CoinSet actual_selection;\n+    CAmount value_ret = 0;\n+    CAmount not_input_fees = 0;\n+\n+    /////////////////////////\n+    // Known Outcome tests //\n+    /////////////////////////\n+    BOOST_TEST_MESSAGE(\"Testing known outcomes\");\n+\n+    // Empty utxo pool\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    selection.clear();\n+\n+    // Add utxos\n+    add_coin(1 * CENT, 1, utxo_pool);\n+    add_coin(2 * CENT, 2, utxo_pool);\n+    add_coin(3 * CENT, 3, utxo_pool);\n+    add_coin(4 * CENT, 4, utxo_pool);\n+\n+    // Select 1 Cent\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 1 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+\n+    // Select 2 Cent\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 2 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+\n+    // Select 5 Cent\n+    add_coin(3 * CENT, 3, actual_selection);\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 5 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+\n+    // Select 11 Cent, not possible\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 11 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    actual_selection.clear();\n+    selection.clear();\n+\n+    // Select 10 Cent\n+    add_coin(5 * CENT, 5, utxo_pool);\n+    add_coin(4 * CENT, 4, actual_selection);\n+    add_coin(3 * CENT, 3, actual_selection);\n+    add_coin(2 * CENT, 2, actual_selection);\n+    add_coin(1 * CENT, 1, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 10 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    actual_selection.clear();\n+    selection.clear();\n+\n+    // Negative effective value\n+    // Select 10 Cent but have 1 Cent not be possible because too small\n+    add_coin(5 * CENT, 5, actual_selection);\n+    add_coin(3 * CENT, 3, actual_selection);\n+    add_coin(2 * CENT, 2, actual_selection);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 10 * CENT, 5000, selection, value_ret, not_input_fees));\n+\n+    // Select 0.25 Cent, not possible\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 0.25 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    actual_selection.clear();\n+    selection.clear();\n+\n+    // Iteration exhaustion test\n+    CAmount target = make_hard_case(17, utxo_pool);\n+    BOOST_CHECK(!SelectCoinsBnB(utxo_pool, target, 0, selection, value_ret, not_input_fees)); // Should exhaust\n+    target = make_hard_case(14, utxo_pool);\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, target, 0, selection, value_ret, not_input_fees)); // Should not exhaust\n+\n+    // Test same value early bailout optimization\n+    add_coin(7 * CENT, 7, actual_selection);\n+    add_coin(7 * CENT, 7, actual_selection);\n+    add_coin(7 * CENT, 7, actual_selection);\n+    add_coin(7 * CENT, 7, actual_selection);\n+    add_coin(2 * CENT, 7, actual_selection);\n+    add_coin(7 * CENT, 7, utxo_pool);\n+    add_coin(7 * CENT, 7, utxo_pool);\n+    add_coin(7 * CENT, 7, utxo_pool);\n+    add_coin(7 * CENT, 7, utxo_pool);\n+    add_coin(2 * CENT, 7, utxo_pool);\n+    for (int i = 0; i < 50000; ++i) {\n+        add_coin(5 * CENT, 7, utxo_pool);\n+    }\n+    BOOST_CHECK(SelectCoinsBnB(utxo_pool, 30 * CENT, 5000, selection, value_ret, not_input_fees));\n+\n+    ////////////////////\n+    // Behavior tests //\n+    ////////////////////\n+    BOOST_TEST_MESSAGE(\"Testing behavior\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606412",
      "id" : 173606412,
      "in_reply_to_id" : 173538545,
      "original_commit_id" : "35794f4fd9ea54e4a77948e67feb08fb5af06959",
      "original_position" : 201,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 102834556,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173606412",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606421"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173606421"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've added a comment.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-10T01:39:26Z",
      "diff_hunk" : "@@ -59,4 +60,48 @@ static void CoinSelection(benchmark::State& state)\n     }\n }\n \n+typedef std::set<CInputCoin> CoinSet;\n+\n+static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set, const CWallet& wallet)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput+1);\n+    tx.vout[nInput].nValue = nValue;\n+    std::unique_ptr<CWalletTx> wtx(new CWalletTx(&wallet, MakeTransactionRef(std::move(tx))));\n+    set.emplace_back(wtx.get(), nInput);\n+}\n+\n+static CAmount make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool, const CWallet& wallet)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606421",
      "id" : 173606421,
      "in_reply_to_id" : 173540968,
      "original_commit_id" : "05e5e77b12e79aee915e957f2be85ea3f2cb0e20",
      "original_position" : 36,
      "path" : "src/bench/coin_selection.cpp",
      "position" : null,
      "pull_request_review_id" : 102834566,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173606421",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606453"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173606453"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unified to be `curr_*`",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-10T01:39:48Z",
      "diff_hunk" : "@@ -0,0 +1,160 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/coinselection.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an\n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * @param const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * @param const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * @param const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * @param std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * @param CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * @param CAmount not_input_fees -> The fees that need to be paid for the outputs and fixed size overhead (version, locktime, marker and flag)\n+ */\n+\n+static const size_t TOTAL_TRIES = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    int depth = 0;\n+    std::vector<bool> selection(utxo_pool.size()); // select the utxo at this index\n+    bool backtrack = false;\n+    CAmount actual_target = not_input_fees + target_value;\n+\n+    // Calculate lookahead\n+    CAmount lookahead = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        lookahead += utxo.effective_value;\n+    }\n+    if (lookahead < actual_target) {\n+        return false;\n+    }\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    // Best solution\n+    CAmount curr_waste = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606453",
      "id" : 173606453,
      "in_reply_to_id" : 173555520,
      "original_commit_id" : "fe2ce81f30c288b7caf16ffed3b270272d4b5818",
      "original_position" : 75,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102834591,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173606453",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606462"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173606462"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-10T01:39:57Z",
      "diff_hunk" : "@@ -0,0 +1,160 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/coinselection.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an\n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * @param const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * @param const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * @param const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * @param std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * @param CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * @param CAmount not_input_fees -> The fees that need to be paid for the outputs and fixed size overhead (version, locktime, marker and flag)\n+ */\n+\n+static const size_t TOTAL_TRIES = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+{\n+    out_set.clear();\n+    CAmount value_track = 0;\n+\n+    int depth = 0;\n+    std::vector<bool> selection(utxo_pool.size()); // select the utxo at this index\n+    bool backtrack = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173606462",
      "id" : 173606462,
      "in_reply_to_id" : 173555838,
      "original_commit_id" : "fe2ce81f30c288b7caf16ffed3b270272d4b5818",
      "original_position" : 59,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102834594,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173606462",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I have gone through and reorganized the commits. Each commit should now be individually compilable. Additionally I have taken @ryanofsky's suggestion of moving the code for the KnapsackSolver instead of copying it. The commits that change SelectCoins, SelectCoinsMinConf, and CreateTransaction to support BnB have been combined into one large-ish commit.\r\n\r\nThe code should be functionally the same as before; the only differences are some variable names and whitespace. The original code can be found in this branch: https://github.com/achow101/bitcoin/tree/bnb-orig. Diff'ing the diffs of the two branches will show the changes that were made.",
      "created_at" : "2018-03-10T06:58:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-372008560",
      "id" : 372008560,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-10T06:58:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/372008560",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625080"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173625080"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: C++ code should prefer `using` rather than `typedef` (not important here, but it's more flexible with templated types). Syntax would be:\r\n\r\n```c++\r\nusing CoinSet = std::set<CInputCoin>;\r\n```",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-10T15:23:03Z",
      "diff_hunk" : "@@ -57,4 +61,47 @@ static void CoinSelection(benchmark::State& state)\n     }\n }\n \n+typedef std::set<CInputCoin> CoinSet;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625080",
      "id" : 173625080,
      "original_commit_id" : "328733eaf0b4dfcca0f58cc1062fe6bd51566281",
      "original_position" : 24,
      "path" : "src/bench/coin_selection.cpp",
      "position" : 25,
      "pull_request_review_id" : 102853812,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173625080",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625122"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173625122"
         }
      },
      "author_association" : "MEMBER",
      "body" : "These long line doc strings don't fit on my screen, even when my browser is maximized :-(",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-10T15:25:04Z",
      "diff_hunk" : "@@ -0,0 +1,294 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/coinselection.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625122",
      "id" : 173625122,
      "original_commit_id" : "328733eaf0b4dfcca0f58cc1062fe6bd51566281",
      "original_position" : 18,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102853812,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173625122",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625178"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173625178"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: The way you have this is consistent with the rest of the Bitcoin code base, but better is:\r\n\r\n```c++\r\nconstexpr size_t TOTAL_TRIES = 100000;\r\n```\r\nDeclaring a global static variable reserves `sizeof(size_t)` space in the `.bss` section, whereas `constexpr` inlines the data.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-10T15:26:59Z",
      "diff_hunk" : "@@ -0,0 +1,294 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/coinselection.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an\n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * @param const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * @param const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * @param const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * @param std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * @param CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * @param CAmount not_input_fees -> The fees that need to be paid for the outputs and fixed size overhead (version, locktime, marker and flag)\n+ */\n+\n+static const size_t TOTAL_TRIES = 100000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625178",
      "id" : 173625178,
      "original_commit_id" : "328733eaf0b4dfcca0f58cc1062fe6bd51566281",
      "original_position" : 50,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 102853812,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173625178",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625288"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173625288"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Consider making these into asserts, as I don't think the callers check for exceptions anyway.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-10T15:31:09Z",
      "diff_hunk" : "@@ -0,0 +1,54 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COINSELECTION_H\n+#define BITCOIN_COINSELECTION_H\n+\n+#include <amount.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+\n+//! target minimum change amount\n+static const CAmount MIN_CHANGE = CENT;\n+//! final minimum change amount after paying for fees\n+static const CAmount MIN_FINAL_CHANGE = MIN_CHANGE/2;\n+\n+class CInputCoin {\n+public:\n+    CInputCoin(const CTransactionRef& tx, unsigned int i)\n+    {\n+        if (!tx)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625288",
      "id" : 173625288,
      "original_commit_id" : "328733eaf0b4dfcca0f58cc1062fe6bd51566281",
      "original_position" : 21,
      "path" : "src/wallet/coinselection.h",
      "position" : 21,
      "pull_request_review_id" : 102853812,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173625288",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625311"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173625311"
         }
      },
      "author_association" : "MEMBER",
      "body" : "same nit regarding typedef vs using",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-10T15:32:09Z",
      "diff_hunk" : "@@ -0,0 +1,548 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5\n+\n+std::vector<std::unique_ptr<CWalletTx>> wtxn;\n+\n+typedef std::set<CInputCoin> CoinSet;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625311",
      "id" : 173625311,
      "original_commit_id" : "328733eaf0b4dfcca0f58cc1062fe6bd51566281",
      "original_position" : 27,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : 27,
      "pull_request_review_id" : 102853812,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173625311",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625442"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173625442"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you explain to me how this works? I don't understand which situation the random shuffle causes the test to fail in.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-10T15:38:02Z",
      "diff_hunk" : "@@ -0,0 +1,548 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625442",
      "id" : 173625442,
      "original_commit_id" : "328733eaf0b4dfcca0f58cc1062fe6bd51566281",
      "original_position" : 23,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : 23,
      "pull_request_review_id" : 102853812,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173625442",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625516"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173625516"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: less boiler plate if you use a delegating ctor",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-10T15:40:44Z",
      "diff_hunk" : "@@ -658,6 +642,26 @@ class CAccountingEntry\n     std::vector<char> _ssExtra;\n };\n \n+struct CoinSelectionParams\n+{\n+    bool use_bnb;\n+    size_t change_output_size;\n+    size_t change_spend_size;\n+    CFeeRate effective_fee;\n+    size_t tx_noinputs_size;\n+\n+    CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee, size_t tx_noinputs_size) : use_bnb(use_bnb), change_output_size(change_output_size), change_spend_size(change_spend_size), effective_fee(effective_fee), tx_noinputs_size(tx_noinputs_size) {}\n+    CoinSelectionParams() : use_bnb(true), change_output_size(0), change_spend_size(0), effective_fee(CFeeRate(0)), tx_noinputs_size(0) {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173625516",
      "id" : 173625516,
      "original_commit_id" : "328733eaf0b4dfcca0f58cc1062fe6bd51566281",
      "original_position" : 116,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 102853812,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173625516",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I will also try to run this locally to test it out.",
      "created_at" : "2018-03-10T15:44:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-372039446",
      "id" : 372039446,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-10T15:44:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/372039446",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The random failure thing is part of the tests for the old coinselection stuff and is unrelated to BnB.",
      "created_at" : "2018-03-10T17:19:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-372046329",
      "id" : 372046329,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-10T17:19:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/372046329",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173840292"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173840292"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Have SelectCoinsMinConf and SelectCoins use BnB or Knapsack and use it\" (34145b6a0237afd0160c9624339f49fd34e524ff)\r\n\r\n`coin_selection_params` can be a const reference instead of a mutable reference here. This would make it clearer values don't change.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T15:34:16Z",
      "diff_hunk" : "@@ -2444,30 +2444,67 @@ bool CWallet::OutputEligibleForSpending(const COutput& output, const CoinEligibi\n }\n \n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibilty_filter, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CoinSelectionParams& coin_selection_params) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173840292",
      "id" : 173840292,
      "original_commit_id" : "34145b6a0237afd0160c9624339f49fd34e524ff",
      "original_position" : 5,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 103095232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173840292",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173844322"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173844322"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Have SelectCoinsMinConf and SelectCoins use BnB or Knapsack and use it\" (34145b6a0237afd0160c9624339f49fd34e524ff)\r\n\r\nMight be worth pulling `use_bnb` parameter out of `coin_selection_params`, because it's the only mutable member, and otherwise this be a const reference.\r\n\r\nI do still think my previous suggestion of splitting `use_bnb` inout param up into separate `disable_bnb` (input) and `used_bnb` (output) params (https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173502504)/ would make the logic most clear, and would obviate the need for the new comment above explaining dual meanings of `use_bnb`.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T15:45:11Z",
      "diff_hunk" : "@@ -2444,30 +2444,67 @@ bool CWallet::OutputEligibleForSpending(const COutput& output, const CoinEligibi\n }\n \n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibilty_filter, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CoinSelectionParams& coin_selection_params) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n     std::vector<CInputCoin> utxo_pool;\n-    for (const COutput &output : vCoins)\n-    {\n-        if (!OutputEligibleForSpending(output, eligibilty_filter))\n-            continue;\n+    if (coin_selection_params.use_bnb) {\n+\n+        // Get long term estimate\n+        FeeCalculation feeCalc;\n+        CCoinControl temp;\n+        temp.m_confirm_target = 1008;\n+        CFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);\n+\n+        // Calculate cost of change\n+        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+\n+        // Filter by the min conf specs and add to utxo_pool and calculate effective value\n+        for (const COutput &output : vCoins)\n+        {\n+            if (!OutputEligibleForSpending(output, eligibilty_filter))\n+                continue;\n+\n+            CInputCoin coin(output.tx->tx, output.i);\n+            coin.effective_value = coin.txout.nValue - (output.nInputBytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(output.nInputBytes));\n+            // Only include outputs that are not negative effective value (i.e. not dust)\n+            if (coin.txout.nValue > 0) {\n+                coin.fee = output.nInputBytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(output.nInputBytes);\n+                coin.long_term_fee = output.nInputBytes < 0 ? 0 : long_term_feerate.GetFee(output.nInputBytes);\n+                utxo_pool.push_back(coin);\n+            }\n+        }\n+        // Calculate the fees for things that aren't inputs\n+        CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+        return SelectCoinsBnB(utxo_pool, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n+    } else {\n+        // Filter by the min conf specs and add to utxo_pool\n+        for (const COutput &output : vCoins)\n+        {\n+            if (!OutputEligibleForSpending(output, eligibilty_filter))\n+                continue;\n \n-        CInputCoin coin = CInputCoin(output.tx->tx, output.i);\n-        utxo_pool.push_back(coin);\n+            CInputCoin coin = CInputCoin(output.tx->tx, output.i);\n+            utxo_pool.push_back(coin);\n+        }\n+        return KnapsackSolver(nTargetValue, utxo_pool, setCoinsRet, nValueRet);\n     }\n-    return KnapsackSolver(nTargetValue, utxo_pool, setCoinsRet, nValueRet);\n }\n \n-bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const\n+// use_bnb is both an input param, and an output param. It indicates that BnB should be\n+// used but also informs the caller whether BnB was used\n+bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173844322",
      "id" : 173844322,
      "original_commit_id" : "34145b6a0237afd0160c9624339f49fd34e524ff",
      "original_position" : 64,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 103095232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173844322",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173856480"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173856480"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement Branch and Bound coin selection in a new file\" (a406c66f1b113e6418eec3b03e0301017478634e)\r\n\r\nCan delete this line, no need to reset since variable goes out of scope.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T16:18:13Z",
      "diff_hunk" : "@@ -0,0 +1,159 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/coinselection.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an\n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * @param const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * @param const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * @param const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * @param std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * @param CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * @param CAmount not_input_fees -> The fees that need to be paid for the outputs and fixed size overhead (version, locktime, marker and flag)\n+ */\n+\n+static const size_t TOTAL_TRIES = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+{\n+    out_set.clear();\n+    CAmount curr_value = 0;\n+\n+    int depth = 0;\n+    std::vector<bool> curr_selection(utxo_pool.size()); // select the utxo at this index\n+    CAmount actual_target = not_input_fees + target_value;\n+\n+    // Calculate curr_available_value\n+    CAmount curr_available_value = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        curr_available_value += utxo.effective_value;\n+    }\n+    if (curr_available_value < actual_target) {\n+        return false;\n+    }\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    for (size_t i = 0; i < TOTAL_TRIES; ++i) {\n+        // Conditions for starting a backtrack\n+        bool backtrack = false;\n+        if (curr_value + curr_available_value < actual_target ||                // Cannot possibly reach target with the amount remaining in the curr_available_value.\n+            curr_value > actual_target + cost_of_change ||    // Selected value is out of range, go back and try other branch\n+            (curr_waste > best_waste && (utxo_pool.at(0).fee - utxo_pool.at(0).long_term_fee) > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n+            backtrack = true;\n+        } else if (curr_value >= actual_target) {       // Selected value is within range\n+            curr_waste += (curr_value - actual_target); // This is the excess value which is added to the waste for the below comparison\n+            // Adding another UTXO after this check could bring the waste down if the long term fee is higher than the current fee.\n+            // However we are not going to explore that because this optimization for the waste is only done when we have hit our target\n+            // value. Adding any more UTXOs will be just burning the UTXO; it will go entirely to fees. Thus we aren't going to\n+            // explore any more UTXOs to avoid burning money like that.\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(curr_selection.begin(), curr_selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (curr_value - actual_target); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        }\n+\n+        // Backtracking, moving backwards\n+        if (backtrack) {\n+            backtrack = false; // Reset",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173856480",
      "id" : 173856480,
      "original_commit_id" : "a406c66f1b113e6418eec3b03e0301017478634e",
      "original_position" : 101,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 103095232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173856480",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173896216"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173896216"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement Branch and Bound coin selection in a new file\" (a406c66f1b113e6418eec3b03e0301017478634e)\r\n\r\nI think it would make the traversal code easier to understand to get rid of `depth` variable and the trailing false entries in the `curr_selection` vector. I implemented this in cf0a82d49112e204112b54d76e661a8e66a28c8b, (fetchable with `git fetch -n https://github.com/ryanofsky/bitcoin pr/nodepth:nodepth`).",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T18:12:22Z",
      "diff_hunk" : "@@ -0,0 +1,159 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/coinselection.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an\n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * @param const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * @param const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * @param const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * @param std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * @param CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * @param CAmount not_input_fees -> The fees that need to be paid for the outputs and fixed size overhead (version, locktime, marker and flag)\n+ */\n+\n+static const size_t TOTAL_TRIES = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+{\n+    out_set.clear();\n+    CAmount curr_value = 0;\n+\n+    int depth = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173896216",
      "id" : 173896216,
      "original_commit_id" : "a406c66f1b113e6418eec3b03e0301017478634e",
      "original_position" : 57,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 103095232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173896216",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173913692"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173913692"
         }
      },
      "author_association" : "MEMBER",
      "body" : "yes please add a comment",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T19:09:08Z",
      "diff_hunk" : "@@ -0,0 +1,548 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173913692",
      "id" : 173913692,
      "in_reply_to_id" : 173625442,
      "original_commit_id" : "328733eaf0b4dfcca0f58cc1062fe6bd51566281",
      "original_position" : 23,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : 23,
      "pull_request_review_id" : 103181408,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173913692",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173914685"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173914685"
         }
      },
      "author_association" : "MEMBER",
      "body" : "micro-nit: positive, not non-negative",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T19:12:50Z",
      "diff_hunk" : "@@ -2444,30 +2444,67 @@ bool CWallet::OutputEligibleForSpending(const COutput& output, const CoinEligibi\n }\n \n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibilty_filter, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CoinSelectionParams& coin_selection_params) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n     std::vector<CInputCoin> utxo_pool;\n-    for (const COutput &output : vCoins)\n-    {\n-        if (!OutputEligibleForSpending(output, eligibilty_filter))\n-            continue;\n+    if (coin_selection_params.use_bnb) {\n+\n+        // Get long term estimate\n+        FeeCalculation feeCalc;\n+        CCoinControl temp;\n+        temp.m_confirm_target = 1008;\n+        CFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);\n+\n+        // Calculate cost of change\n+        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+\n+        // Filter by the min conf specs and add to utxo_pool and calculate effective value\n+        for (const COutput &output : vCoins)\n+        {\n+            if (!OutputEligibleForSpending(output, eligibilty_filter))\n+                continue;\n+\n+            CInputCoin coin(output.tx->tx, output.i);\n+            coin.effective_value = coin.txout.nValue - (output.nInputBytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(output.nInputBytes));\n+            // Only include outputs that are not negative effective value (i.e. not dust)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173914685",
      "id" : 173914685,
      "original_commit_id" : "34145b6a0237afd0160c9624339f49fd34e524ff",
      "original_position" : 34,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 103181408,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173914685",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173915562"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173915562"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this should be `coin.txout.effective_value`.... which likely means there is no test for this. ",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T19:16:06Z",
      "diff_hunk" : "@@ -2444,30 +2444,67 @@ bool CWallet::OutputEligibleForSpending(const COutput& output, const CoinEligibi\n }\n \n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibilty_filter, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CoinSelectionParams& coin_selection_params) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n     std::vector<CInputCoin> utxo_pool;\n-    for (const COutput &output : vCoins)\n-    {\n-        if (!OutputEligibleForSpending(output, eligibilty_filter))\n-            continue;\n+    if (coin_selection_params.use_bnb) {\n+\n+        // Get long term estimate\n+        FeeCalculation feeCalc;\n+        CCoinControl temp;\n+        temp.m_confirm_target = 1008;\n+        CFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);\n+\n+        // Calculate cost of change\n+        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+\n+        // Filter by the min conf specs and add to utxo_pool and calculate effective value\n+        for (const COutput &output : vCoins)\n+        {\n+            if (!OutputEligibleForSpending(output, eligibilty_filter))\n+                continue;\n+\n+            CInputCoin coin(output.tx->tx, output.i);\n+            coin.effective_value = coin.txout.nValue - (output.nInputBytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(output.nInputBytes));\n+            // Only include outputs that are not negative effective value (i.e. not dust)\n+            if (coin.txout.nValue > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173915562",
      "id" : 173915562,
      "original_commit_id" : "34145b6a0237afd0160c9624339f49fd34e524ff",
      "original_position" : 35,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 103181408,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173915562",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173923694"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173923694"
         }
      },
      "author_association" : "MEMBER",
      "body" : "github is seemingly hiding comments, so saying this here again:\r\n\r\n>this should be coin.txout.effective_value.... which likely means there is no test for this.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T19:44:09Z",
      "diff_hunk" : "@@ -2364,171 +2429,88 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n+bool CWallet::OutputEligibleForSpending(const COutput& output, const CoinEligibilityFilter& eligibilty_filter) const\n {\n-    std::vector<char> vfIncluded;\n+    if (!output.fSpendable)\n+        return false;\n \n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n+    if (output.nDepth < (output.tx->IsFromMe(ISMINE_ALL) ? eligibilty_filter.conf_mine : eligibilty_filter.conf_theirs))\n+        return false;\n \n-    FastRandomContext insecure_rand;\n+    if (!mempool.TransactionWithinChainLimit(output.tx->GetHash(), eligibilty_filter.max_ancestors))\n+        return false;\n \n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n+    return true;\n }\n \n-bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibilty_filter, std::vector<COutput> vCoins,\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CoinSelectionParams& coin_selection_params) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n-    std::vector<CInputCoin> vValue;\n-    CAmount nTotalLower = 0;\n-\n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n+    std::vector<CInputCoin> utxo_pool;\n+    if (coin_selection_params.use_bnb) {\n \n-    for (const COutput &output : vCoins)\n-    {\n-        if (!output.fSpendable)\n-            continue;\n-\n-        const CWalletTx *pcoin = output.tx;\n-\n-        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n-            continue;\n-\n-        if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n-            continue;\n+        // Get long term estimate\n+        FeeCalculation feeCalc;\n+        CCoinControl temp;\n+        temp.m_confirm_target = 1008;\n+        CFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);\n \n-        int i = output.i;\n-\n-        CInputCoin coin = CInputCoin(pcoin, i);\n-\n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n-        }\n-    }\n+        // Calculate cost of change\n+        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n+        // Filter by the min conf specs and add to utxo_pool and calculate effective value\n+        for (const COutput &output : vCoins)\n         {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n-\n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n-\n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n+            if (!OutputEligibleForSpending(output, eligibilty_filter))\n+                continue;\n \n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n+            CInputCoin coin(output.tx->tx, output.i);\n+            coin.effective_value = coin.txout.nValue - (output.nInputBytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(output.nInputBytes));\n+            // Only include outputs that are not negative effective value (i.e. not dust)\n+            if (coin.txout.nValue > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173923694",
      "id" : 173923694,
      "original_commit_id" : "328733eaf0b4dfcca0f58cc1062fe6bd51566281",
      "original_position" : 270,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 103192742,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173923694",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173947886"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173947886"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't understand it either. It was there originally, I just moved it.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T21:10:57Z",
      "diff_hunk" : "@@ -0,0 +1,548 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/wallet.h\"\n+#include \"wallet/coinselection.h\"\n+#include \"amount.h\"\n+#include \"primitives/transaction.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/test/wallet_test_fixture.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <random>\n+\n+BOOST_FIXTURE_TEST_SUITE(coin_selection_tests, WalletTestingSetup)\n+\n+// how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n+#define RUN_TESTS 100\n+\n+// some tests fail 1% of the time due to bad luck.\n+// we repeat those tests this many times and only complain if all iterations of the test fail\n+#define RANDOM_REPEATS 5",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173947886",
      "id" : 173947886,
      "in_reply_to_id" : 173625442,
      "original_commit_id" : "328733eaf0b4dfcca0f58cc1062fe6bd51566281",
      "original_position" : 23,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : 23,
      "pull_request_review_id" : 103221048,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173947886",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173948126"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173948126"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I would prefer to continue to use what is currently done in the codebase unless we agreed to change the style.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T21:11:52Z",
      "diff_hunk" : "@@ -57,4 +61,47 @@ static void CoinSelection(benchmark::State& state)\n     }\n }\n \n+typedef std::set<CInputCoin> CoinSet;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173948126",
      "id" : 173948126,
      "in_reply_to_id" : 173625080,
      "original_commit_id" : "328733eaf0b4dfcca0f58cc1062fe6bd51566281",
      "original_position" : 24,
      "path" : "src/bench/coin_selection.cpp",
      "position" : 25,
      "pull_request_review_id" : 103221360,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173948126",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173948217"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173948217"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I would prefer to continue to use what is currently done in the codebase unless we agreed to change the style.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T21:12:10Z",
      "diff_hunk" : "@@ -0,0 +1,294 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/coinselection.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an\n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * @param const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * @param const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * @param const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * @param std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * @param CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * @param CAmount not_input_fees -> The fees that need to be paid for the outputs and fixed size overhead (version, locktime, marker and flag)\n+ */\n+\n+static const size_t TOTAL_TRIES = 100000;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173948217",
      "id" : 173948217,
      "in_reply_to_id" : 173625178,
      "original_commit_id" : "328733eaf0b4dfcca0f58cc1062fe6bd51566281",
      "original_position" : 50,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 103221460,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173948217",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173948656"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173948656"
         }
      },
      "author_association" : "MEMBER",
      "body" : "How does that work?",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T21:13:41Z",
      "diff_hunk" : "@@ -658,6 +642,26 @@ class CAccountingEntry\n     std::vector<char> _ssExtra;\n };\n \n+struct CoinSelectionParams\n+{\n+    bool use_bnb;\n+    size_t change_output_size;\n+    size_t change_spend_size;\n+    CFeeRate effective_fee;\n+    size_t tx_noinputs_size;\n+\n+    CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee, size_t tx_noinputs_size) : use_bnb(use_bnb), change_output_size(change_output_size), change_spend_size(change_spend_size), effective_fee(effective_fee), tx_noinputs_size(tx_noinputs_size) {}\n+    CoinSelectionParams() : use_bnb(true), change_output_size(0), change_spend_size(0), effective_fee(CFeeRate(0)), tx_noinputs_size(0) {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173948656",
      "id" : 173948656,
      "in_reply_to_id" : 173625516,
      "original_commit_id" : "328733eaf0b4dfcca0f58cc1062fe6bd51566281",
      "original_position" : 116,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 103221958,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173948656",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173953720"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173953720"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> How does that work?\r\n\r\nHe was suggesting you write:\r\n\r\n```c++\r\nCoinSelectionParams() : CoinSelectionParams(true, 0, ...) {}\r\n```\r\n\r\nIMO, it would actually be better to use member initialization and write:\r\n\r\n```\r\nbool use_bnb = true;\r\nsize_t change_output_size = 0;\r\n...\r\nCoinSelectionParams(bool use_bnb, size_t change_output_size, ...) ...;\r\nCoinSelectionParams() {}\r\n```\r\n",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T21:32:46Z",
      "diff_hunk" : "@@ -658,6 +642,26 @@ class CAccountingEntry\n     std::vector<char> _ssExtra;\n };\n \n+struct CoinSelectionParams\n+{\n+    bool use_bnb;\n+    size_t change_output_size;\n+    size_t change_spend_size;\n+    CFeeRate effective_fee;\n+    size_t tx_noinputs_size;\n+\n+    CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee, size_t tx_noinputs_size) : use_bnb(use_bnb), change_output_size(change_output_size), change_spend_size(change_spend_size), effective_fee(effective_fee), tx_noinputs_size(tx_noinputs_size) {}\n+    CoinSelectionParams() : use_bnb(true), change_output_size(0), change_spend_size(0), effective_fee(CFeeRate(0)), tx_noinputs_size(0) {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173953720",
      "id" : 173953720,
      "in_reply_to_id" : 173625516,
      "original_commit_id" : "328733eaf0b4dfcca0f58cc1062fe6bd51566281",
      "original_position" : 116,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 103227807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173953720",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173959009"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173959009"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Suggestions for a test for this?",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T21:52:34Z",
      "diff_hunk" : "@@ -2364,171 +2429,88 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n+bool CWallet::OutputEligibleForSpending(const COutput& output, const CoinEligibilityFilter& eligibilty_filter) const\n {\n-    std::vector<char> vfIncluded;\n+    if (!output.fSpendable)\n+        return false;\n \n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n+    if (output.nDepth < (output.tx->IsFromMe(ISMINE_ALL) ? eligibilty_filter.conf_mine : eligibilty_filter.conf_theirs))\n+        return false;\n \n-    FastRandomContext insecure_rand;\n+    if (!mempool.TransactionWithinChainLimit(output.tx->GetHash(), eligibilty_filter.max_ancestors))\n+        return false;\n \n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n+    return true;\n }\n \n-bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibilty_filter, std::vector<COutput> vCoins,\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CoinSelectionParams& coin_selection_params) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n-    std::vector<CInputCoin> vValue;\n-    CAmount nTotalLower = 0;\n-\n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n+    std::vector<CInputCoin> utxo_pool;\n+    if (coin_selection_params.use_bnb) {\n \n-    for (const COutput &output : vCoins)\n-    {\n-        if (!output.fSpendable)\n-            continue;\n-\n-        const CWalletTx *pcoin = output.tx;\n-\n-        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n-            continue;\n-\n-        if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n-            continue;\n+        // Get long term estimate\n+        FeeCalculation feeCalc;\n+        CCoinControl temp;\n+        temp.m_confirm_target = 1008;\n+        CFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);\n \n-        int i = output.i;\n-\n-        CInputCoin coin = CInputCoin(pcoin, i);\n-\n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n-        }\n-    }\n+        // Calculate cost of change\n+        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n+        // Filter by the min conf specs and add to utxo_pool and calculate effective value\n+        for (const COutput &output : vCoins)\n         {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n-\n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n-\n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n+            if (!OutputEligibleForSpending(output, eligibilty_filter))\n+                continue;\n \n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n+            CInputCoin coin(output.tx->tx, output.i);\n+            coin.effective_value = coin.txout.nValue - (output.nInputBytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(output.nInputBytes));\n+            // Only include outputs that are not negative effective value (i.e. not dust)\n+            if (coin.txout.nValue > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173959009",
      "id" : 173959009,
      "in_reply_to_id" : 173923694,
      "original_commit_id" : "328733eaf0b4dfcca0f58cc1062fe6bd51566281",
      "original_position" : 270,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 103233885,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173959009",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173960079"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173960079"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd prefer to keep this move-only",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T21:56:50Z",
      "diff_hunk" : "@@ -0,0 +1,54 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COINSELECTION_H\n+#define BITCOIN_COINSELECTION_H\n+\n+#include <amount.h>\n+#include <primitives/transaction.h>\n+#include <random.h>\n+\n+//! target minimum change amount\n+static const CAmount MIN_CHANGE = CENT;\n+//! final minimum change amount after paying for fees\n+static const CAmount MIN_FINAL_CHANGE = MIN_CHANGE/2;\n+\n+class CInputCoin {\n+public:\n+    CInputCoin(const CTransactionRef& tx, unsigned int i)\n+    {\n+        if (!tx)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173960079",
      "id" : 173960079,
      "in_reply_to_id" : 173625288,
      "original_commit_id" : "328733eaf0b4dfcca0f58cc1062fe6bd51566281",
      "original_position" : 21,
      "path" : "src/wallet/coinselection.h",
      "position" : 21,
      "pull_request_review_id" : 103235106,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173960079",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173972454"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173972454"
         }
      },
      "author_association" : "MEMBER",
      "body" : "SCMC, with use_bnb being true, two outputs which summed together reach the target? If you remove the negative effective value one, it overshoots the window.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T22:56:19Z",
      "diff_hunk" : "@@ -2364,171 +2429,88 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n+bool CWallet::OutputEligibleForSpending(const COutput& output, const CoinEligibilityFilter& eligibilty_filter) const\n {\n-    std::vector<char> vfIncluded;\n+    if (!output.fSpendable)\n+        return false;\n \n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n+    if (output.nDepth < (output.tx->IsFromMe(ISMINE_ALL) ? eligibilty_filter.conf_mine : eligibilty_filter.conf_theirs))\n+        return false;\n \n-    FastRandomContext insecure_rand;\n+    if (!mempool.TransactionWithinChainLimit(output.tx->GetHash(), eligibilty_filter.max_ancestors))\n+        return false;\n \n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n+    return true;\n }\n \n-bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibilty_filter, std::vector<COutput> vCoins,\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CoinSelectionParams& coin_selection_params) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n-    std::vector<CInputCoin> vValue;\n-    CAmount nTotalLower = 0;\n-\n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n+    std::vector<CInputCoin> utxo_pool;\n+    if (coin_selection_params.use_bnb) {\n \n-    for (const COutput &output : vCoins)\n-    {\n-        if (!output.fSpendable)\n-            continue;\n-\n-        const CWalletTx *pcoin = output.tx;\n-\n-        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n-            continue;\n-\n-        if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n-            continue;\n+        // Get long term estimate\n+        FeeCalculation feeCalc;\n+        CCoinControl temp;\n+        temp.m_confirm_target = 1008;\n+        CFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);\n \n-        int i = output.i;\n-\n-        CInputCoin coin = CInputCoin(pcoin, i);\n-\n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n-        }\n-    }\n+        // Calculate cost of change\n+        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n+        // Filter by the min conf specs and add to utxo_pool and calculate effective value\n+        for (const COutput &output : vCoins)\n         {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n-\n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n-\n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n+            if (!OutputEligibleForSpending(output, eligibilty_filter))\n+                continue;\n \n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n+            CInputCoin coin(output.tx->tx, output.i);\n+            coin.effective_value = coin.txout.nValue - (output.nInputBytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(output.nInputBytes));\n+            // Only include outputs that are not negative effective value (i.e. not dust)\n+            if (coin.txout.nValue > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173972454",
      "id" : 173972454,
      "in_reply_to_id" : 173923694,
      "original_commit_id" : "328733eaf0b4dfcca0f58cc1062fe6bd51566281",
      "original_position" : 270,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 103249158,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173972454",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976224"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173976224"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've used @ryanofsky's suggestion",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T23:18:27Z",
      "diff_hunk" : "@@ -658,6 +642,26 @@ class CAccountingEntry\n     std::vector<char> _ssExtra;\n };\n \n+struct CoinSelectionParams\n+{\n+    bool use_bnb;\n+    size_t change_output_size;\n+    size_t change_spend_size;\n+    CFeeRate effective_fee;\n+    size_t tx_noinputs_size;\n+\n+    CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee, size_t tx_noinputs_size) : use_bnb(use_bnb), change_output_size(change_output_size), change_spend_size(change_spend_size), effective_fee(effective_fee), tx_noinputs_size(tx_noinputs_size) {}\n+    CoinSelectionParams() : use_bnb(true), change_output_size(0), change_spend_size(0), effective_fee(CFeeRate(0)), tx_noinputs_size(0) {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976224",
      "id" : 173976224,
      "in_reply_to_id" : 173625516,
      "original_commit_id" : "328733eaf0b4dfcca0f58cc1062fe6bd51566281",
      "original_position" : 116,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 103253462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173976224",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976383"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173976383"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I added a variable and parameter `bnb_used` to be a return parameter that indicates whether bnb was used.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T23:19:17Z",
      "diff_hunk" : "@@ -2444,30 +2444,67 @@ bool CWallet::OutputEligibleForSpending(const COutput& output, const CoinEligibi\n }\n \n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibilty_filter, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CoinSelectionParams& coin_selection_params) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n     std::vector<CInputCoin> utxo_pool;\n-    for (const COutput &output : vCoins)\n-    {\n-        if (!OutputEligibleForSpending(output, eligibilty_filter))\n-            continue;\n+    if (coin_selection_params.use_bnb) {\n+\n+        // Get long term estimate\n+        FeeCalculation feeCalc;\n+        CCoinControl temp;\n+        temp.m_confirm_target = 1008;\n+        CFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);\n+\n+        // Calculate cost of change\n+        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+\n+        // Filter by the min conf specs and add to utxo_pool and calculate effective value\n+        for (const COutput &output : vCoins)\n+        {\n+            if (!OutputEligibleForSpending(output, eligibilty_filter))\n+                continue;\n+\n+            CInputCoin coin(output.tx->tx, output.i);\n+            coin.effective_value = coin.txout.nValue - (output.nInputBytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(output.nInputBytes));\n+            // Only include outputs that are not negative effective value (i.e. not dust)\n+            if (coin.txout.nValue > 0) {\n+                coin.fee = output.nInputBytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(output.nInputBytes);\n+                coin.long_term_fee = output.nInputBytes < 0 ? 0 : long_term_feerate.GetFee(output.nInputBytes);\n+                utxo_pool.push_back(coin);\n+            }\n+        }\n+        // Calculate the fees for things that aren't inputs\n+        CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+        return SelectCoinsBnB(utxo_pool, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n+    } else {\n+        // Filter by the min conf specs and add to utxo_pool\n+        for (const COutput &output : vCoins)\n+        {\n+            if (!OutputEligibleForSpending(output, eligibilty_filter))\n+                continue;\n \n-        CInputCoin coin = CInputCoin(output.tx->tx, output.i);\n-        utxo_pool.push_back(coin);\n+            CInputCoin coin = CInputCoin(output.tx->tx, output.i);\n+            utxo_pool.push_back(coin);\n+        }\n+        return KnapsackSolver(nTargetValue, utxo_pool, setCoinsRet, nValueRet);\n     }\n-    return KnapsackSolver(nTargetValue, utxo_pool, setCoinsRet, nValueRet);\n }\n \n-bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const\n+// use_bnb is both an input param, and an output param. It indicates that BnB should be\n+// used but also informs the caller whether BnB was used\n+bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976383",
      "id" : 173976383,
      "in_reply_to_id" : 173844322,
      "original_commit_id" : "34145b6a0237afd0160c9624339f49fd34e524ff",
      "original_position" : 64,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 103253648,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173976383",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976413"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173976413"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Made const",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T23:19:26Z",
      "diff_hunk" : "@@ -2444,30 +2444,67 @@ bool CWallet::OutputEligibleForSpending(const COutput& output, const CoinEligibi\n }\n \n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibilty_filter, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CoinSelectionParams& coin_selection_params) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976413",
      "id" : 173976413,
      "in_reply_to_id" : 173840292,
      "original_commit_id" : "34145b6a0237afd0160c9624339f49fd34e524ff",
      "original_position" : 5,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 103253676,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173976413",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976446"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173976446"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T23:19:32Z",
      "diff_hunk" : "@@ -0,0 +1,159 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/coinselection.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an\n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * @param const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * @param const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * @param const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * @param std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * @param CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * @param CAmount not_input_fees -> The fees that need to be paid for the outputs and fixed size overhead (version, locktime, marker and flag)\n+ */\n+\n+static const size_t TOTAL_TRIES = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+{\n+    out_set.clear();\n+    CAmount curr_value = 0;\n+\n+    int depth = 0;\n+    std::vector<bool> curr_selection(utxo_pool.size()); // select the utxo at this index\n+    CAmount actual_target = not_input_fees + target_value;\n+\n+    // Calculate curr_available_value\n+    CAmount curr_available_value = 0;\n+    for (const CInputCoin& utxo : utxo_pool) {\n+        curr_available_value += utxo.effective_value;\n+    }\n+    if (curr_available_value < actual_target) {\n+        return false;\n+    }\n+\n+    // Sort the utxo_pool\n+    std::sort(utxo_pool.begin(), utxo_pool.end(), descending);\n+\n+    CAmount curr_waste = 0;\n+    std::vector<bool> best_selection;\n+    CAmount best_waste = MAX_MONEY;\n+\n+    // Depth First search loop for choosing the UTXOs\n+    for (size_t i = 0; i < TOTAL_TRIES; ++i) {\n+        // Conditions for starting a backtrack\n+        bool backtrack = false;\n+        if (curr_value + curr_available_value < actual_target ||                // Cannot possibly reach target with the amount remaining in the curr_available_value.\n+            curr_value > actual_target + cost_of_change ||    // Selected value is out of range, go back and try other branch\n+            (curr_waste > best_waste && (utxo_pool.at(0).fee - utxo_pool.at(0).long_term_fee) > 0)) { // Don't select things which we know will be more wasteful if the waste is increasing\n+            backtrack = true;\n+        } else if (curr_value >= actual_target) {       // Selected value is within range\n+            curr_waste += (curr_value - actual_target); // This is the excess value which is added to the waste for the below comparison\n+            // Adding another UTXO after this check could bring the waste down if the long term fee is higher than the current fee.\n+            // However we are not going to explore that because this optimization for the waste is only done when we have hit our target\n+            // value. Adding any more UTXOs will be just burning the UTXO; it will go entirely to fees. Thus we aren't going to\n+            // explore any more UTXOs to avoid burning money like that.\n+            if (curr_waste <= best_waste) {\n+                best_selection.assign(curr_selection.begin(), curr_selection.end());\n+                best_waste = curr_waste;\n+            }\n+            curr_waste -= (curr_value - actual_target); // Remove the excess value as we will be selecting different coins now\n+            backtrack = true;\n+        }\n+\n+        // Backtracking, moving backwards\n+        if (backtrack) {\n+            backtrack = false; // Reset",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976446",
      "id" : 173976446,
      "in_reply_to_id" : 173856480,
      "original_commit_id" : "a406c66f1b113e6418eec3b03e0301017478634e",
      "original_position" : 101,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 103253701,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173976446",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976513"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173976513"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've used your commit. It will be squashed into a406c66",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T23:19:55Z",
      "diff_hunk" : "@@ -0,0 +1,159 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/coinselection.h>\n+#include <util.h>\n+#include <utilmoneystr.h>\n+\n+// Descending order comparator\n+struct {\n+    bool operator()(const CInputCoin& a, const CInputCoin& b) const\n+    {\n+        return a.effective_value > b.effective_value;\n+    }\n+} descending;\n+\n+/*\n+ * This is the Branch and Bound Coin Selection algorithm designed by Murch. It searches for an input set that can pay for the\n+ * spending target and does not exceed the spending target by more than the cost of creating and spending a change output. The\n+ * algorithm uses a depth-first search on a binary tree. In the binary tree, each node corresponds to the inclusion or the omission\n+ * of a UTXO. UTXOs are sorted by their effective values and the trees is explored deterministically per the inclusion branch first.\n+ * At each node, the algorithm checks whether the selection is within the target range. While the selection has not reached the\n+ * target range, more UTXOs are included. When a selection's value exceeds the target range, the complete subtree deriving from\n+ * this selection can be omitted. At that point, the last included UTXO is deselected and the corresponding omission branch explored\n+ * instead. The search ends after the complete tree has been searched or after a limited number of tries.\n+ *\n+ * The search continues to search for better solutions after one solution has been found. The best solution is chosen by minimizing\n+ * the waste metric. The waste metric is defined as the cost to spend the current inputs at the given fee rate minus the long\n+ * term expected cost to spend the inputs, plus the amount the selection exceeds the spending target:\n+ *\n+ * waste = selectionTotal - target + inputs ÃÂ (currentFeeRate - longTermFeeRate)\n+ *\n+ * The algorithm uses two additional optimizations. A lookahead keeps track of the total value of the unexplored UTXOs. A subtree\n+ * is not explored if the lookahead indicates that the target range cannot be reached. Further, it is unnecessary to test\n+ * equivalent combinations. This allows us to skip testing the inclusion of UTXOs that match the effective value and waste of an\n+ * omitted predecessor.\n+ *\n+ * The Branch and Bound algorithm is described in detail in Murch's Master Thesis: https://murch.one/wp-content/uploads/2016/11/erhardt2016coinselection.pdf\n+ *\n+ * @param const std::vector<CInputCoin>& utxo_pool -> The set of UTXOs that we are choosing from. These UTXOs will be sorted in descending order\n+ *                                             by effective value and the CInputCoins' values are their effective values.\n+ * @param const CAmount& target_value -> This is the value that we want to select. It is the lower bound of the range.\n+ * @param const CAmount& cost_of_change -> This is the cost of creating and spending a change output. This plus target_value is the upper bound\n+ *                                  of the range.\n+ * @param std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins that have been selected.\n+ * @param CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins that were selected.\n+ * @param CAmount not_input_fees -> The fees that need to be paid for the outputs and fixed size overhead (version, locktime, marker and flag)\n+ */\n+\n+static const size_t TOTAL_TRIES = 100000;\n+\n+bool SelectCoinsBnB(std::vector<CInputCoin>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+{\n+    out_set.clear();\n+    CAmount curr_value = 0;\n+\n+    int depth = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976513",
      "id" : 173976513,
      "in_reply_to_id" : 173896216,
      "original_commit_id" : "a406c66f1b113e6418eec3b03e0301017478634e",
      "original_position" : 57,
      "path" : "src/wallet/coinselection.cpp",
      "position" : null,
      "pull_request_review_id" : 103253784,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173976513",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976541"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173976541"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T23:20:03Z",
      "diff_hunk" : "@@ -2444,30 +2444,67 @@ bool CWallet::OutputEligibleForSpending(const COutput& output, const CoinEligibi\n }\n \n bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibilty_filter, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CoinSelectionParams& coin_selection_params) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n     std::vector<CInputCoin> utxo_pool;\n-    for (const COutput &output : vCoins)\n-    {\n-        if (!OutputEligibleForSpending(output, eligibilty_filter))\n-            continue;\n+    if (coin_selection_params.use_bnb) {\n+\n+        // Get long term estimate\n+        FeeCalculation feeCalc;\n+        CCoinControl temp;\n+        temp.m_confirm_target = 1008;\n+        CFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);\n+\n+        // Calculate cost of change\n+        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+\n+        // Filter by the min conf specs and add to utxo_pool and calculate effective value\n+        for (const COutput &output : vCoins)\n+        {\n+            if (!OutputEligibleForSpending(output, eligibilty_filter))\n+                continue;\n+\n+            CInputCoin coin(output.tx->tx, output.i);\n+            coin.effective_value = coin.txout.nValue - (output.nInputBytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(output.nInputBytes));\n+            // Only include outputs that are not negative effective value (i.e. not dust)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976541",
      "id" : 173976541,
      "in_reply_to_id" : 173914685,
      "original_commit_id" : "34145b6a0237afd0160c9624339f49fd34e524ff",
      "original_position" : 34,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 103253815,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173976541",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976584"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173976584"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed. Will add a test next.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-12T23:20:18Z",
      "diff_hunk" : "@@ -2364,171 +2429,88 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n+bool CWallet::OutputEligibleForSpending(const COutput& output, const CoinEligibilityFilter& eligibilty_filter) const\n {\n-    std::vector<char> vfIncluded;\n+    if (!output.fSpendable)\n+        return false;\n \n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n+    if (output.nDepth < (output.tx->IsFromMe(ISMINE_ALL) ? eligibilty_filter.conf_mine : eligibilty_filter.conf_theirs))\n+        return false;\n \n-    FastRandomContext insecure_rand;\n+    if (!mempool.TransactionWithinChainLimit(output.tx->GetHash(), eligibilty_filter.max_ancestors))\n+        return false;\n \n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n+    return true;\n }\n \n-bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibilty_filter, std::vector<COutput> vCoins,\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CoinSelectionParams& coin_selection_params) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n-    std::vector<CInputCoin> vValue;\n-    CAmount nTotalLower = 0;\n-\n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n+    std::vector<CInputCoin> utxo_pool;\n+    if (coin_selection_params.use_bnb) {\n \n-    for (const COutput &output : vCoins)\n-    {\n-        if (!output.fSpendable)\n-            continue;\n-\n-        const CWalletTx *pcoin = output.tx;\n-\n-        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n-            continue;\n-\n-        if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n-            continue;\n+        // Get long term estimate\n+        FeeCalculation feeCalc;\n+        CCoinControl temp;\n+        temp.m_confirm_target = 1008;\n+        CFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);\n \n-        int i = output.i;\n-\n-        CInputCoin coin = CInputCoin(pcoin, i);\n-\n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n-        }\n-    }\n+        // Calculate cost of change\n+        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n+        // Filter by the min conf specs and add to utxo_pool and calculate effective value\n+        for (const COutput &output : vCoins)\n         {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n-\n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n-\n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n+            if (!OutputEligibleForSpending(output, eligibilty_filter))\n+                continue;\n \n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n+            CInputCoin coin(output.tx->tx, output.i);\n+            coin.effective_value = coin.txout.nValue - (output.nInputBytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(output.nInputBytes));\n+            // Only include outputs that are not negative effective value (i.e. not dust)\n+            if (coin.txout.nValue > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173976584",
      "id" : 173976584,
      "in_reply_to_id" : 173923694,
      "original_commit_id" : "328733eaf0b4dfcca0f58cc1062fe6bd51566281",
      "original_position" : 270,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 103253867,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173976584",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173983496"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173983496"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I added a test that runs `SelectCoinsMinConf` with an input with negative effective value. If that input somehow makes it through into `SelectCoinsBnB`, it will trigger an assert causing the test to fail. That should be sufficient to check for this case.",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-13T00:05:32Z",
      "diff_hunk" : "@@ -2364,171 +2429,88 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n     return ptx->vout[n];\n }\n \n-static void ApproximateBestSubset(const std::vector<CInputCoin>& vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n+bool CWallet::OutputEligibleForSpending(const COutput& output, const CoinEligibilityFilter& eligibilty_filter) const\n {\n-    std::vector<char> vfIncluded;\n+    if (!output.fSpendable)\n+        return false;\n \n-    vfBest.assign(vValue.size(), true);\n-    nBest = nTotalLower;\n+    if (output.nDepth < (output.tx->IsFromMe(ISMINE_ALL) ? eligibilty_filter.conf_mine : eligibilty_filter.conf_theirs))\n+        return false;\n \n-    FastRandomContext insecure_rand;\n+    if (!mempool.TransactionWithinChainLimit(output.tx->GetHash(), eligibilty_filter.max_ancestors))\n+        return false;\n \n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n-    {\n-        vfIncluded.assign(vValue.size(), false);\n-        CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.randbool() : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].txout.nValue;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].txout.nValue;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n-        }\n-    }\n+    return true;\n }\n \n-bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMine, const int nConfTheirs, const uint64_t nMaxAncestors, std::vector<COutput> vCoins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibilty_filter, std::vector<COutput> vCoins,\n+                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, CoinSelectionParams& coin_selection_params) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n-    // List of values less than target\n-    boost::optional<CInputCoin> coinLowestLarger;\n-    std::vector<CInputCoin> vValue;\n-    CAmount nTotalLower = 0;\n-\n-    random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n+    std::vector<CInputCoin> utxo_pool;\n+    if (coin_selection_params.use_bnb) {\n \n-    for (const COutput &output : vCoins)\n-    {\n-        if (!output.fSpendable)\n-            continue;\n-\n-        const CWalletTx *pcoin = output.tx;\n-\n-        if (output.nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? nConfMine : nConfTheirs))\n-            continue;\n-\n-        if (!mempool.TransactionWithinChainLimit(pcoin->GetHash(), nMaxAncestors))\n-            continue;\n+        // Get long term estimate\n+        FeeCalculation feeCalc;\n+        CCoinControl temp;\n+        temp.m_confirm_target = 1008;\n+        CFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);\n \n-        int i = output.i;\n-\n-        CInputCoin coin = CInputCoin(pcoin, i);\n-\n-        if (coin.txout.nValue == nTargetValue)\n-        {\n-            setCoinsRet.insert(coin);\n-            nValueRet += coin.txout.nValue;\n-            return true;\n-        }\n-        else if (coin.txout.nValue < nTargetValue + MIN_CHANGE)\n-        {\n-            vValue.push_back(coin);\n-            nTotalLower += coin.txout.nValue;\n-        }\n-        else if (!coinLowestLarger || coin.txout.nValue < coinLowestLarger->txout.nValue)\n-        {\n-            coinLowestLarger = coin;\n-        }\n-    }\n+        // Calculate cost of change\n+        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n-    if (nTotalLower == nTargetValue)\n-    {\n-        for (const auto& input : vValue)\n+        // Filter by the min conf specs and add to utxo_pool and calculate effective value\n+        for (const COutput &output : vCoins)\n         {\n-            setCoinsRet.insert(input);\n-            nValueRet += input.txout.nValue;\n-        }\n-        return true;\n-    }\n-\n-    if (nTotalLower < nTargetValue)\n-    {\n-        if (!coinLowestLarger)\n-            return false;\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-        return true;\n-    }\n-\n-    // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n-    CAmount nBest;\n-\n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n+            if (!OutputEligibleForSpending(output, eligibilty_filter))\n+                continue;\n \n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger->txout.nValue <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.get());\n-        nValueRet += coinLowestLarger->txout.nValue;\n-    }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i]);\n-                nValueRet += vValue[i].txout.nValue;\n+            CInputCoin coin(output.tx->tx, output.i);\n+            coin.effective_value = coin.txout.nValue - (output.nInputBytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(output.nInputBytes));\n+            // Only include outputs that are not negative effective value (i.e. not dust)\n+            if (coin.txout.nValue > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r173983496",
      "id" : 173983496,
      "in_reply_to_id" : 173923694,
      "original_commit_id" : "328733eaf0b4dfcca0f58cc1062fe6bd51566281",
      "original_position" : 270,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 103261509,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173983496",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r174156763"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174156763"
         }
      },
      "author_association" : "MEMBER",
      "body" : "egative",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-13T14:43:23Z",
      "diff_hunk" : "@@ -207,12 +212,17 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     for (int i = 0; i < 100; ++i) {\n         BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 2 * CENT, selection, value_ret, not_input_fees));\n     }\n-}\n \n-CoinEligibilityFilter filter_standard(1, 6, 0);\n-CoinEligibilityFilter filter_confirmed(1, 1, 0);\n-CoinEligibilityFilter filter_standard_extra(6, 6, 0);\n-CoinSelectionParams coin_selection_params(false, 0, 0, CFeeRate(0), 0);\n+    // Make sure that effective value is working in SelectCoinsMinConf when BnB is used\n+    CoinSelectionParams coin_selection_params_bnb(true, 0, 0, CFeeRate(3000), 0);\n+    CoinSet setCoinsRet;\n+    CAmount nValueRet;\n+    bool bnb_used;\n+    empty_wallet();\n+    add_coin(1);\n+    vCoins.at(0).nInputBytes = 40; // Make sure that it has a egative effective value. The next check should assert if this somehow got through. Otherwise it will fail",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r174156763",
      "id" : 174156763,
      "original_commit_id" : "81e11bb029dd5504879114705da1b01c359d738e",
      "original_position" : 29,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 103460387,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174156763",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r174204302"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174204302"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-13T16:47:06Z",
      "diff_hunk" : "@@ -207,12 +212,17 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     for (int i = 0; i < 100; ++i) {\n         BOOST_CHECK(!SelectCoinsBnB(utxo_pool, 1 * CENT, 2 * CENT, selection, value_ret, not_input_fees));\n     }\n-}\n \n-CoinEligibilityFilter filter_standard(1, 6, 0);\n-CoinEligibilityFilter filter_confirmed(1, 1, 0);\n-CoinEligibilityFilter filter_standard_extra(6, 6, 0);\n-CoinSelectionParams coin_selection_params(false, 0, 0, CFeeRate(0), 0);\n+    // Make sure that effective value is working in SelectCoinsMinConf when BnB is used\n+    CoinSelectionParams coin_selection_params_bnb(true, 0, 0, CFeeRate(3000), 0);\n+    CoinSet setCoinsRet;\n+    CAmount nValueRet;\n+    bool bnb_used;\n+    empty_wallet();\n+    add_coin(1);\n+    vCoins.at(0).nInputBytes = 40; // Make sure that it has a egative effective value. The next check should assert if this somehow got through. Otherwise it will fail",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r174204302",
      "id" : 174204302,
      "in_reply_to_id" : 174156763,
      "original_commit_id" : "81e11bb029dd5504879114705da1b01c359d738e",
      "original_position" : 29,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 103517443,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "updated_at" : "2018-03-13T16:47:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/174204302",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Squashed",
      "created_at" : "2018-03-13T16:47:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-372735355",
      "id" : 372735355,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-13T16:47:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/372735355",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK https://github.com/bitcoin/bitcoin/pull/10637/commits/73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2018-03-13T17:30:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-372750561",
      "id" : 372750561,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-13T17:30:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/372750561",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "noice!",
      "created_at" : "2018-03-15T00:22:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-373218747",
      "id" : 373218747,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "updated_at" : "2018-03-15T00:22:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/373218747",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/35275673?v=4",
         "events_url" : "https://api.github.com/users/Beyonderx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Beyonderx/followers",
         "following_url" : "https://api.github.com/users/Beyonderx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Beyonderx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Beyonderx",
         "id" : 35275673,
         "login" : "Beyonderx",
         "organizations_url" : "https://api.github.com/users/Beyonderx/orgs",
         "received_events_url" : "https://api.github.com/users/Beyonderx/received_events",
         "repos_url" : "https://api.github.com/users/Beyonderx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Beyonderx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Beyonderx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Beyonderx"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Oops sorry for the spam (hopefully it will clean up when commits expire) and thank you very much for this!",
      "created_at" : "2020-08-01T00:27:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-667437292",
      "id" : 667437292,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2NzQzNzI5Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-01T00:27:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667437292",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/39387497?v=4",
         "events_url" : "https://api.github.com/users/TheHolyRoger/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheHolyRoger/followers",
         "following_url" : "https://api.github.com/users/TheHolyRoger/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheHolyRoger/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheHolyRoger",
         "id" : 39387497,
         "login" : "TheHolyRoger",
         "node_id" : "MDQ6VXNlcjM5Mzg3NDk3",
         "organizations_url" : "https://api.github.com/users/TheHolyRoger/orgs",
         "received_events_url" : "https://api.github.com/users/TheHolyRoger/received_events",
         "repos_url" : "https://api.github.com/users/TheHolyRoger/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheHolyRoger/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheHolyRoger/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheHolyRoger"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Can anyone tell me how to get my funds out of blockchain and in my wallet",
      "created_at" : "2021-01-02T03:32:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-753425336",
      "id" : 753425336,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzQyNTMzNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-02T03:32:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753425336",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/75904097?v=4",
         "events_url" : "https://api.github.com/users/dondon696o69/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dondon696o69/followers",
         "following_url" : "https://api.github.com/users/dondon696o69/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dondon696o69/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dondon696o69",
         "id" : 75904097,
         "login" : "dondon696o69",
         "node_id" : "MDQ6VXNlcjc1OTA0MDk3",
         "organizations_url" : "https://api.github.com/users/dondon696o69/orgs",
         "received_events_url" : "https://api.github.com/users/dondon696o69/received_events",
         "repos_url" : "https://api.github.com/users/dondon696o69/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dondon696o69/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dondon696o69/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dondon696o69"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Hi @dondon696o69  -- this is Bitcoin Core, the repo for development, it is not the appropriate place for support requests of that nature.\r\n\r\nYou might try asking for help at https://support.blockchain.com/hc/en-us if it was Blockchain.info that you were using for your wallet.",
      "created_at" : "2021-01-02T03:38:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#issuecomment-753425687",
      "id" : 753425687,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/10637",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzQyNTY4Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-02T03:38:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753425687",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r739747407"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/739747407"
         }
      },
      "author_association" : "NONE",
      "body" : "hasil cryptomenghilang",
      "commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "created_at" : "2021-10-31T02:18:06Z",
      "diff_hunk" : "@@ -94,7 +94,8 @@ BITCOIN_TESTS += \\\n   wallet/test/wallet_test_fixture.h \\\n   wallet/test/accounting_tests.cpp \\\n   wallet/test/wallet_tests.cpp \\\n-  wallet/test/crypto_tests.cpp",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/10637#discussion_r739747407",
      "id" : 739747407,
      "line" : 97,
      "node_id" : "PRRC_kwDOABII584sF6ZP",
      "original_commit_id" : "73b5bf2cb40720bb4e4436ea63b5badf3d89ceb9",
      "original_line" : 97,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/Makefile.test.include",
      "position" : 4,
      "pull_request_review_id" : 793661219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/10637",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/739747407/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-31T02:18:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/739747407",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/88456099?v=4",
         "events_url" : "https://api.github.com/users/bell47/events{/privacy}",
         "followers_url" : "https://api.github.com/users/bell47/followers",
         "following_url" : "https://api.github.com/users/bell47/following{/other_user}",
         "gists_url" : "https://api.github.com/users/bell47/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/bell47",
         "id" : 88456099,
         "login" : "bell47",
         "node_id" : "MDQ6VXNlcjg4NDU2MDk5",
         "organizations_url" : "https://api.github.com/users/bell47/orgs",
         "received_events_url" : "https://api.github.com/users/bell47/received_events",
         "repos_url" : "https://api.github.com/users/bell47/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/bell47/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/bell47/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/bell47"
      }
   }
]
