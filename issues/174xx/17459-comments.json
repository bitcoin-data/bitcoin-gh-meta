[
   {
      "author_association" : "MEMBER",
      "body" : "@theStack \r\n\r\nI'm all for removing redundancies in the general case, but in this specific case the redundancy is intentional:\r\n\r\nNote that the inclusion of `assumptions.h` could be removed accidentally from `net_processing.cpp` and `validation.cpp` without breaking the build.\r\n\r\nThus we cannot assume that `assumptions.h` will always be included :)\r\n\r\nI think of it this way:\r\n* Enforcement: The `NDEBUG` checks in `net_processing.cpp` and `validation.cpp` make sure that we enforce this project wide (since at least one of those files likely will be part of all relevant future builds of the project where this should be enforced).\r\n* Documentation: The `NDEBUG` check in `assumptions.h` serves as a documentation of an important assumption we make.\r\n\r\nDoes that make sense? :)",
      "created_at" : "2019-11-13T22:17:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17459#issuecomment-553630409",
      "id" : 553630409,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17459",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MzYzMDQwOQ==",
      "updated_at" : "2019-11-13T22:17:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/553630409",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@practicalswift: Thanks for clarifying!\r\nMy strong assumption was that in _any_ possible build, one of the dozens `.cpp` files which currently include the `compat/assumptions.h` header (which after all says \"compile-time verification\", implying more than merely documentation) would also do so in the future, triggering the error in case `NDEBUG` is set.\r\nAlso it seemed quite fishy to me that the check was even present in two `.cpp` files, not just one. Looking deeper into it, that seems to have historic reasons: introduced originally by gmaxwell with commit 9b59e3bda8c137bff885db5b1f9150346e36e076, the `NDEBUG` check was only present in `main.cpp`. Then later when `main.cpp` was split up into `validation.cpp` and `net_processing.cpp` it got copied over into both files (commits e736772c56a883e2649cc8534dd7857a0718ec56, 76faa3cdfedbd3fc91be4ecfff77fc6dc18134fb by TheBlueMatt; part of PR #9260 with a very entertaining title/description :laughing: ).\r\n\r\nStill feels odd to have the exact same preprocessor construct and error string scattered aorund in three places in the same project, but I get your point.",
      "created_at" : "2019-11-14T00:02:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17459#issuecomment-553661581",
      "id" : 553661581,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17459",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1MzY2MTU4MQ==",
      "updated_at" : "2019-11-14T00:02:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/553661581",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tend toward NACK.\r\nThis code can go when the run-time critical assumptions stop using assertions. Then it is fully safe to define NDEBUG. Until then, belts and suspenders.\r\n(@MarcoFalke is working on this)",
      "created_at" : "2019-11-15T11:46:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17459#issuecomment-554329620",
      "id" : 554329620,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17459",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NDMyOTYyMA==",
      "updated_at" : "2019-11-15T11:46:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554329620",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Yeah, if the goal is to make sure the assert can never be disabled by accident, but also avoid these preprocessor checks, you could cherry-pick something like fa1564326499f69eeb5427262ff0f26070f86146, replace the `std::abort();` with `assert(false)`, and add the preprocessor check to `./src/util/check.h` (a single place).",
      "created_at" : "2019-11-15T17:23:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17459#issuecomment-554450685",
      "id" : 554450685,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17459",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NDQ1MDY4NQ==",
      "updated_at" : "2019-11-15T17:23:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554450685",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Though, I'd say it's not much of a goal in itself. Wouldn't be surprised if the preprocessor is the least CPU intensive part of the C++ compilation process.",
      "created_at" : "2019-11-18T12:30:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17459#issuecomment-554995600",
      "id" : 554995600,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17459",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NDk5NTYwMA==",
      "updated_at" : "2019-11-18T12:30:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554995600",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Closing as something that we can potentially revisit in the future.",
      "created_at" : "2020-01-04T08:57:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17459#issuecomment-570768764",
      "id" : 570768764,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17459",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MDc2ODc2NA==",
      "updated_at" : "2020-01-04T08:57:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/570768764",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   }
]
