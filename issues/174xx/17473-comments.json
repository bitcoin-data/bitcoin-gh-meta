[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17581](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17581.html) (refactor: Remove settings merge reverse precedence code by ryanofsky)\n* [#17580](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17580.html) (refactor: Add ALLOW_LIST flags and enforce usage in CheckArgFlags by ryanofsky)\n* [#17493](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17493.html) (util: Forbid ambiguous multiple assignments in config file by ryanofsky)\n* [#17482](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17482.html) (util: Disallow network-qualified command line options by ryanofsky)\n* [#16673](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16673.html) (Relog configuration args on debug.log rotation by LarryRuane)\n* [#16545](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16545.html) (refactor: Implement missing error checking for ArgsManager flags by ryanofsky)\n* [#16115](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16115.html) (On bitcoind startup, write config args to debug.log by LarryRuane)\n* [#15937](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15937.html) (WIP: Add loadwallet and createwallet load_on_startup options by ryanofsky)\n* [#15936](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15936.html) (WIP: Unify bitcoin-qt and bitcoind persistent settings by ryanofsky)\n* [#15935](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15935.html) (WIP: Add <datadir>/settings.json persistent settings storage by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-11-14T08:58:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17473#issuecomment-553790419",
      "id" : 553790419,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17473",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1Mzc5MDQxOQ==",
      "updated_at" : "2019-12-18T18:48:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/553790419",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r346699409"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/346699409"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit, could be private.",
      "commit_id" : "e9fd366044e271632dc0e4f96e1c14f8e87213ae",
      "created_at" : "2019-11-15T08:02:28Z",
      "diff_hunk" : "@@ -270,6 +270,27 @@ class ArgsManager\n      */\n     std::string GetChainName() const;\n \n+    /**\n+     * Returns true if settings values from the default section should be used,\n+     * depending on the current network and whether the setting is\n+     * network-specific.\n+     */\n+    bool UseDefaultSection(const std::string& arg) const EXCLUSIVE_LOCKS_REQUIRED(cs_args);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r346699409",
      "id" : 346699409,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NjY5OTQwOQ==",
      "original_commit_id" : "9926e06fe9aa258ae06bf2b6e9c7f589f7c8a565",
      "original_position" : 25,
      "path" : "src/util/system.h",
      "position" : null,
      "pull_request_review_id" : 317456600,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473",
      "updated_at" : "2019-12-18T16:59:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/346699409",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Concept ACK. Is [bcf8060](https://github.com/bitcoin/bitcoin/commit/bcf8060557d544fa881be9e74c2e108189010dca) really necessary, not sure the motivation of it.\r\n\r\nAs the commit message says, some of the flags are incorrectly applied and cause tests to fail when type checking is actually implemented in #16545. At first I tried to selectively update the flags instead of using a scripted diff, but as I was iterating on #16545 more of these old tests kept failing and I kept going back and forth on the flags. I think bottom line is these tests were never written to interact with flags, and I have much better dedicated tests for the flags in #16545. I doubt #16545 will be the last PR changing these flags, and I want to avoid old tests becoming a maintenance burden for more flag changes in the future.\r\n\r\nReason for including the commit in this PR instead of delaying it for the future, is that right now the tests are misleading and make it look like unused unimplemented constants could actually have an effect.",
      "created_at" : "2019-11-15T22:35:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17473#issuecomment-554556005",
      "id" : 554556005,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17473",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NDU1NjAwNQ==",
      "updated_at" : "2019-11-15T22:35:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554556005",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r357310919"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357310919"
         }
      },
      "author_association" : "MEMBER",
      "body" : "style nit: use braces for single-line if block",
      "commit_id" : "e9fd366044e271632dc0e4f96e1c14f8e87213ae",
      "created_at" : "2019-12-12T18:49:37Z",
      "diff_hunk" : "@@ -77,19 +80,22 @@ SettingsValue GetSetting(const Settings& settings,\n         // negated values, or at least warn they are ignored.\n         const bool skip_negated_command_line = get_chain_name;\n \n+        if (done) return;\n+\n         // Ignore settings in default config section if requested.\n-        if (ignore_default_section_config && source == Source::CONFIG_FILE_DEFAULT_SECTION && !never_ignore_negated_setting) return;\n+        if (ignore_default_section_config && source == Source::CONFIG_FILE_DEFAULT_SECTION &&\n+            !never_ignore_negated_setting)\n+            return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r357310919",
      "id" : 357310919,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzMxMDkxOQ==",
      "original_commit_id" : "9926e06fe9aa258ae06bf2b6e9c7f589f7c8a565",
      "original_position" : 29,
      "path" : "src/util/settings.cpp",
      "position" : 29,
      "pull_request_review_id" : 331447011,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473",
      "updated_at" : "2019-12-18T16:59:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357310919",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r357315325"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357315325"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Comment is outdated",
      "commit_id" : "e9fd366044e271632dc0e4f96e1c14f8e87213ae",
      "created_at" : "2019-12-12T18:58:52Z",
      "diff_hunk" : "@@ -298,7 +319,7 @@ class ArgsManager\n      * Return Flags for known arg.\n      * Return ArgsManager::NONE for unknown arg.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r357315325",
      "id" : 357315325,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzMxNTMyNQ==",
      "original_commit_id" : "9926e06fe9aa258ae06bf2b6e9c7f589f7c8a565",
      "original_position" : 46,
      "path" : "src/util/system.h",
      "position" : null,
      "pull_request_review_id" : 331447011,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473",
      "updated_at" : "2019-12-18T16:59:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357315325",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r357320689"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357320689"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ð \r\n\r\nSame for `GetSetting()` below",
      "commit_id" : "e9fd366044e271632dc0e4f96e1c14f8e87213ae",
      "created_at" : "2019-12-12T19:10:51Z",
      "diff_hunk" : "@@ -270,6 +270,27 @@ class ArgsManager\n      */\n     std::string GetChainName() const;\n \n+    /**\n+     * Returns true if settings values from the default section should be used,\n+     * depending on the current network and whether the setting is\n+     * network-specific.\n+     */\n+    bool UseDefaultSection(const std::string& arg) const EXCLUSIVE_LOCKS_REQUIRED(cs_args);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r357320689",
      "id" : 357320689,
      "in_reply_to_id" : 346699409,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzMyMDY4OQ==",
      "original_commit_id" : "9926e06fe9aa258ae06bf2b6e9c7f589f7c8a565",
      "original_position" : 25,
      "path" : "src/util/system.h",
      "position" : null,
      "pull_request_review_id" : 331447011,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473",
      "updated_at" : "2019-12-18T16:59:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357320689",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r359051743"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359051743"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/17473#discussion_r357310919\r\n\r\n> style nit: use braces for single-line if block\r\n\r\nThanks, fixed\r\n",
      "commit_id" : "e9fd366044e271632dc0e4f96e1c14f8e87213ae",
      "created_at" : "2019-12-17T22:00:16Z",
      "diff_hunk" : "@@ -77,19 +80,22 @@ SettingsValue GetSetting(const Settings& settings,\n         // negated values, or at least warn they are ignored.\n         const bool skip_negated_command_line = get_chain_name;\n \n+        if (done) return;\n+\n         // Ignore settings in default config section if requested.\n-        if (ignore_default_section_config && source == Source::CONFIG_FILE_DEFAULT_SECTION && !never_ignore_negated_setting) return;\n+        if (ignore_default_section_config && source == Source::CONFIG_FILE_DEFAULT_SECTION &&\n+            !never_ignore_negated_setting)\n+            return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r359051743",
      "id" : 359051743,
      "in_reply_to_id" : 357310919,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTA1MTc0Mw==",
      "original_commit_id" : "9926e06fe9aa258ae06bf2b6e9c7f589f7c8a565",
      "original_position" : 29,
      "path" : "src/util/settings.cpp",
      "position" : 29,
      "pull_request_review_id" : 333609248,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473",
      "updated_at" : "2019-12-18T17:04:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359051743",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r359051803"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359051803"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/17473#discussion_r346699409\r\n\r\n> nit, could be private.\r\n\r\n> Same for `GetSetting()` below\r\n\r\nMade protected, since these are used in tests.",
      "commit_id" : "e9fd366044e271632dc0e4f96e1c14f8e87213ae",
      "created_at" : "2019-12-17T22:00:26Z",
      "diff_hunk" : "@@ -270,6 +270,27 @@ class ArgsManager\n      */\n     std::string GetChainName() const;\n \n+    /**\n+     * Returns true if settings values from the default section should be used,\n+     * depending on the current network and whether the setting is\n+     * network-specific.\n+     */\n+    bool UseDefaultSection(const std::string& arg) const EXCLUSIVE_LOCKS_REQUIRED(cs_args);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r359051803",
      "id" : 359051803,
      "in_reply_to_id" : 346699409,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTA1MTgwMw==",
      "original_commit_id" : "9926e06fe9aa258ae06bf2b6e9c7f589f7c8a565",
      "original_position" : 25,
      "path" : "src/util/system.h",
      "position" : null,
      "pull_request_review_id" : 333609248,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473",
      "updated_at" : "2019-12-18T17:04:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359051803",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r359051910"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359051910"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/17473#discussion_r357315325\r\n\r\n> Comment is outdated\r\n\r\nThanks, fixed\r\n",
      "commit_id" : "e9fd366044e271632dc0e4f96e1c14f8e87213ae",
      "created_at" : "2019-12-17T22:00:37Z",
      "diff_hunk" : "@@ -298,7 +319,7 @@ class ArgsManager\n      * Return Flags for known arg.\n      * Return ArgsManager::NONE for unknown arg.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r359051910",
      "id" : 359051910,
      "in_reply_to_id" : 357315325,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTA1MTkxMA==",
      "original_commit_id" : "9926e06fe9aa258ae06bf2b6e9c7f589f7c8a565",
      "original_position" : 46,
      "path" : "src/util/system.h",
      "position" : null,
      "pull_request_review_id" : 333609248,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473",
      "updated_at" : "2019-12-18T17:04:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359051910",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r359462344"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359462344"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"refactor: Add util_CheckValue test\" (425bb307252cf4dec9b3ef6426e6548b2be7a303)\r\n\r\nNote: this test is extended in 909bcca7971063f42de6d981111c628bf5a0ebfa from #16545 to check other flags besides ALLOW_ANY",
      "commit_id" : "e9fd366044e271632dc0e4f96e1c14f8e87213ae",
      "created_at" : "2019-12-18T17:04:11Z",
      "diff_hunk" : "@@ -189,12 +190,119 @@ struct TestArgsManager : public ArgsManager\n             AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n         }\n     }\n+    using ArgsManager::GetSetting;\n+    using ArgsManager::GetSettingsList;\n     using ArgsManager::ReadConfigStream;\n     using ArgsManager::cs_args;\n     using ArgsManager::m_network;\n     using ArgsManager::m_settings;\n };\n \n+//! Test GetSetting and GetArg type coercion, negation, and default value handling.\n+class CheckValueTest : public TestChain100Setup\n+{\n+public:\n+    struct Expect {\n+        util::SettingsValue setting;\n+        bool default_string = false;\n+        bool default_int = false;\n+        bool default_bool = false;\n+        const char* string_value = nullptr;\n+        Optional<int64_t> int_value;\n+        Optional<bool> bool_value;\n+        Optional<std::vector<std::string>> list_value;\n+        const char* error = nullptr;\n+\n+        Expect(util::SettingsValue s) : setting(std::move(s)) {}\n+        Expect& DefaultString() { default_string = true; return *this; }\n+        Expect& DefaultInt() { default_int = true; return *this; }\n+        Expect& DefaultBool() { default_bool = true; return *this; }\n+        Expect& String(const char* s) { string_value = s; return *this; }\n+        Expect& Int(int64_t i) { int_value = i; return *this; }\n+        Expect& Bool(bool b) { bool_value = b; return *this; }\n+        Expect& List(std::vector<std::string> m) { list_value = std::move(m); return *this; }\n+        Expect& Error(const char* e) { error = e; return *this; }\n+    };\n+\n+    void CheckValue(unsigned int flags, const char* arg, const Expect& expect)\n+    {\n+        TestArgsManager test;\n+        test.SetupArgs({{\"-value\", flags}});\n+        const char* argv[] = {\"ignored\", arg};\n+        std::string error;\n+        bool success = test.ParseParameters(arg ? 2 : 1, (char**)argv, error);\n+\n+        BOOST_CHECK_EQUAL(test.GetSetting(\"-value\").write(), expect.setting.write());\n+        auto settings_list = test.GetSettingsList(\"-value\");\n+        if (expect.setting.isNull() || expect.setting.isFalse()) {\n+            BOOST_CHECK_EQUAL(settings_list.size(), 0);\n+        } else {\n+            BOOST_CHECK_EQUAL(settings_list.size(), 1);\n+            BOOST_CHECK_EQUAL(settings_list[0].write(), expect.setting.write());\n+        }\n+\n+        if (expect.error) {\n+            BOOST_CHECK(!success);\n+            BOOST_CHECK_NE(error.find(expect.error), std::string::npos);\n+        } else {\n+            BOOST_CHECK(success);\n+            BOOST_CHECK_EQUAL(error, \"\");\n+        }\n+\n+        if (expect.default_string) {\n+            BOOST_CHECK_EQUAL(test.GetArg(\"-value\", \"zzzzz\"), \"zzzzz\");\n+        } else if (expect.string_value) {\n+            BOOST_CHECK_EQUAL(test.GetArg(\"-value\", \"zzzzz\"), expect.string_value);\n+        } else {\n+            BOOST_CHECK(!success);\n+        }\n+\n+        if (expect.default_int) {\n+            BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), 99999);\n+        } else if (expect.int_value) {\n+            BOOST_CHECK_EQUAL(test.GetArg(\"-value\", 99999), *expect.int_value);\n+        } else {\n+            BOOST_CHECK(!success);\n+        }\n+\n+        if (expect.default_bool) {\n+            BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), false);\n+            BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), true);\n+        } else if (expect.bool_value) {\n+            BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", false), *expect.bool_value);\n+            BOOST_CHECK_EQUAL(test.GetBoolArg(\"-value\", true), *expect.bool_value);\n+        } else {\n+            BOOST_CHECK(!success);\n+        }\n+\n+        if (expect.list_value) {\n+            auto l = test.GetArgs(\"-value\");\n+            BOOST_CHECK_EQUAL_COLLECTIONS(l.begin(), l.end(), expect.list_value->begin(), expect.list_value->end());\n+        } else {\n+            BOOST_CHECK(!success);\n+        }\n+    }\n+};\n+\n+BOOST_FIXTURE_TEST_CASE(util_CheckValue, CheckValueTest)\n+{\n+    using M = ArgsManager;\n+\n+    CheckValue(M::ALLOW_ANY, nullptr, Expect{{}}.DefaultString().DefaultInt().DefaultBool().List({}));\n+    CheckValue(M::ALLOW_ANY, \"-novalue\", Expect{false}.String(\"0\").Int(0).Bool(false).List({}));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=\", Expect{false}.String(\"0\").Int(0).Bool(false).List({}));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=0\", Expect{true}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=1\", Expect{false}.String(\"0\").Int(0).Bool(false).List({}));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=2\", Expect{false}.String(\"0\").Int(0).Bool(false).List({}));\n+    CheckValue(M::ALLOW_ANY, \"-novalue=abc\", Expect{true}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n+    CheckValue(M::ALLOW_ANY, \"-value\", Expect{\"\"}.String(\"\").Int(0).Bool(true).List({\"\"}));\n+    CheckValue(M::ALLOW_ANY, \"-value=\", Expect{\"\"}.String(\"\").Int(0).Bool(true).List({\"\"}));\n+    CheckValue(M::ALLOW_ANY, \"-value=0\", Expect{\"0\"}.String(\"0\").Int(0).Bool(false).List({\"0\"}));\n+    CheckValue(M::ALLOW_ANY, \"-value=1\", Expect{\"1\"}.String(\"1\").Int(1).Bool(true).List({\"1\"}));\n+    CheckValue(M::ALLOW_ANY, \"-value=2\", Expect{\"2\"}.String(\"2\").Int(2).Bool(true).List({\"2\"}));\n+    CheckValue(M::ALLOW_ANY, \"-value=abc\", Expect{\"abc\"}.String(\"abc\").Int(0).Bool(false).List({\"abc\"}));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r359462344",
      "id" : 359462344,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1OTQ2MjM0NA==",
      "original_commit_id" : "425bb307252cf4dec9b3ef6426e6548b2be7a303",
      "original_position" : 122,
      "path" : "src/test/util_tests.cpp",
      "position" : 122,
      "pull_request_review_id" : 333609248,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473",
      "updated_at" : "2019-12-18T17:04:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/359462344",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Code review ACK e9fd366044e271632dc0e4f96e1c14f8e87213ae",
      "created_at" : "2019-12-19T19:30:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17473#issuecomment-567630095",
      "id" : 567630095,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17473",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NzYzMDA5NQ==",
      "updated_at" : "2019-12-19T19:30:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/567630095",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK e9fd366044 ð\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK e9fd366044 ð\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjBJQwAgNgNoo3sHg6IyTw00ye/IHSr222mR3aGg6NhiAoVziJ7US66yyt/c85I\r\ns6nxdJe/5b4rkmNNID7bAh/VJNYAz4gNgMARcYngShCbQTRADKzeauIY8ZzBZFgm\r\nW+uay6TWLKQM55E7y5jBBYmUFy1D5efmLtKR9wktp22eeMXlJMhLkI40nSfq4Tkt\r\naOSX6K7a5aaIImJs1SShl0nHsqF6z+al2MVuWpBxPZ34Wkn257p6G8BXwX6mNTNH\r\nlxzjuPj6aHuWI496G7zbNBA6IkSGZgBE4/HcPCyYz+i16LzaqyYX/pWwtoRnSjME\r\nBVCeqQEg3JFoNZtWsazzGpsh/Ki29X15jZwz1UrNYIXlf2v4QCC4Cj0CZe9P5QWc\r\n+Ib+OyLoecz3+/WbGBWO6Lv+LKnPpyMjNj7bRNzJHikq6nw1wklbPMnOfxrJNbQv\r\nxNTgZDLj6Z+Wp9TLD1jua7q2ciM+g7v3ADDYIh4UPJnLulAP8ML/pNKb0t1p5gne\r\nL8iVPKtM\r\n=p2lQ\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `31d53ff8d0571f29f549510cc92e83930bbab33e7884245727870371ceabaaad  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e89294010831d53ff8d0571f29f549510cc92e83930bbab33e7884245727870371ceabaaadf010e811694549760425a5138e426fd75ced08fff010487507f70f211dfac0f6a320be448d6108f1045dfbd7e4f008fb93eace897b1c820083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff01074261cfa2d5d6261a074a53de4c5dc0c08f1045dfbd7e4f00897a34145d9bbfdc40083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010cf1e2f2a9d3638caaea0f9af5f1722ff08f1045dfbd7e5f008b1ca87e37edc915b0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6df010d054cc61163b8b926a10822790fb805808f1045dfbd7e4f008e942a2a977be08e30083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
      "created_at" : "2019-12-19T20:05:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17473#issuecomment-567642371",
      "id" : 567642371,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17473",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NzY0MjM3MQ==",
      "updated_at" : "2019-12-19T20:05:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/567642371",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r360386173"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/360386173"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why not \r\n\r\n```diff\r\ndiff --git a/src/test/util_tests.cpp b/src/test/util_tests.cpp\r\nindex 86ea56ff36..f2f8ebd59a 100644\r\n--- a/src/test/util_tests.cpp\r\n+++ b/src/test/util_tests.cpp\r\n@@ -243,7 +243,7 @@ public:\r\n \r\n         if (expect.error) {\r\n             BOOST_CHECK(!success);\r\n-            BOOST_CHECK_NE(error.find(expect.error), std::string::npos);\r\n+            BOOST_CHECK_EQUAL(error, expect.error);\r\n         } else {\r\n             BOOST_CHECK(success);\r\n             BOOST_CHECK_EQUAL(error, \"\");\r\n```\r\n\r\n? I presume later tests require the less strict check?",
      "commit_id" : "e9fd366044e271632dc0e4f96e1c14f8e87213ae",
      "created_at" : "2019-12-20T14:07:12Z",
      "diff_hunk" : "@@ -189,12 +190,119 @@ struct TestArgsManager : public ArgsManager\n             AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n         }\n     }\n+    using ArgsManager::GetSetting;\n+    using ArgsManager::GetSettingsList;\n     using ArgsManager::ReadConfigStream;\n     using ArgsManager::cs_args;\n     using ArgsManager::m_network;\n     using ArgsManager::m_settings;\n };\n \n+//! Test GetSetting and GetArg type coercion, negation, and default value handling.\n+class CheckValueTest : public TestChain100Setup\n+{\n+public:\n+    struct Expect {\n+        util::SettingsValue setting;\n+        bool default_string = false;\n+        bool default_int = false;\n+        bool default_bool = false;\n+        const char* string_value = nullptr;\n+        Optional<int64_t> int_value;\n+        Optional<bool> bool_value;\n+        Optional<std::vector<std::string>> list_value;\n+        const char* error = nullptr;\n+\n+        Expect(util::SettingsValue s) : setting(std::move(s)) {}\n+        Expect& DefaultString() { default_string = true; return *this; }\n+        Expect& DefaultInt() { default_int = true; return *this; }\n+        Expect& DefaultBool() { default_bool = true; return *this; }\n+        Expect& String(const char* s) { string_value = s; return *this; }\n+        Expect& Int(int64_t i) { int_value = i; return *this; }\n+        Expect& Bool(bool b) { bool_value = b; return *this; }\n+        Expect& List(std::vector<std::string> m) { list_value = std::move(m); return *this; }\n+        Expect& Error(const char* e) { error = e; return *this; }\n+    };\n+\n+    void CheckValue(unsigned int flags, const char* arg, const Expect& expect)\n+    {\n+        TestArgsManager test;\n+        test.SetupArgs({{\"-value\", flags}});\n+        const char* argv[] = {\"ignored\", arg};\n+        std::string error;\n+        bool success = test.ParseParameters(arg ? 2 : 1, (char**)argv, error);\n+\n+        BOOST_CHECK_EQUAL(test.GetSetting(\"-value\").write(), expect.setting.write());\n+        auto settings_list = test.GetSettingsList(\"-value\");\n+        if (expect.setting.isNull() || expect.setting.isFalse()) {\n+            BOOST_CHECK_EQUAL(settings_list.size(), 0);\n+        } else {\n+            BOOST_CHECK_EQUAL(settings_list.size(), 1);\n+            BOOST_CHECK_EQUAL(settings_list[0].write(), expect.setting.write());\n+        }\n+\n+        if (expect.error) {\n+            BOOST_CHECK(!success);\n+            BOOST_CHECK_NE(error.find(expect.error), std::string::npos);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r360386173",
      "id" : 360386173,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MDM4NjE3Mw==",
      "original_commit_id" : "e9fd366044e271632dc0e4f96e1c14f8e87213ae",
      "original_position" : 65,
      "path" : "src/test/util_tests.cpp",
      "position" : 65,
      "pull_request_review_id" : 335274996,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473",
      "updated_at" : "2019-12-20T14:07:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/360386173",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r360416558"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/360416558"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think it should be possible to make the change you're suggesting, which would give more helpful debug info if the check fails. This was originally written as part of #16545 which at one point was doing partial checks for error messages, but now I think checks the whole error string.",
      "commit_id" : "e9fd366044e271632dc0e4f96e1c14f8e87213ae",
      "created_at" : "2019-12-20T15:18:03Z",
      "diff_hunk" : "@@ -189,12 +190,119 @@ struct TestArgsManager : public ArgsManager\n             AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n         }\n     }\n+    using ArgsManager::GetSetting;\n+    using ArgsManager::GetSettingsList;\n     using ArgsManager::ReadConfigStream;\n     using ArgsManager::cs_args;\n     using ArgsManager::m_network;\n     using ArgsManager::m_settings;\n };\n \n+//! Test GetSetting and GetArg type coercion, negation, and default value handling.\n+class CheckValueTest : public TestChain100Setup\n+{\n+public:\n+    struct Expect {\n+        util::SettingsValue setting;\n+        bool default_string = false;\n+        bool default_int = false;\n+        bool default_bool = false;\n+        const char* string_value = nullptr;\n+        Optional<int64_t> int_value;\n+        Optional<bool> bool_value;\n+        Optional<std::vector<std::string>> list_value;\n+        const char* error = nullptr;\n+\n+        Expect(util::SettingsValue s) : setting(std::move(s)) {}\n+        Expect& DefaultString() { default_string = true; return *this; }\n+        Expect& DefaultInt() { default_int = true; return *this; }\n+        Expect& DefaultBool() { default_bool = true; return *this; }\n+        Expect& String(const char* s) { string_value = s; return *this; }\n+        Expect& Int(int64_t i) { int_value = i; return *this; }\n+        Expect& Bool(bool b) { bool_value = b; return *this; }\n+        Expect& List(std::vector<std::string> m) { list_value = std::move(m); return *this; }\n+        Expect& Error(const char* e) { error = e; return *this; }\n+    };\n+\n+    void CheckValue(unsigned int flags, const char* arg, const Expect& expect)\n+    {\n+        TestArgsManager test;\n+        test.SetupArgs({{\"-value\", flags}});\n+        const char* argv[] = {\"ignored\", arg};\n+        std::string error;\n+        bool success = test.ParseParameters(arg ? 2 : 1, (char**)argv, error);\n+\n+        BOOST_CHECK_EQUAL(test.GetSetting(\"-value\").write(), expect.setting.write());\n+        auto settings_list = test.GetSettingsList(\"-value\");\n+        if (expect.setting.isNull() || expect.setting.isFalse()) {\n+            BOOST_CHECK_EQUAL(settings_list.size(), 0);\n+        } else {\n+            BOOST_CHECK_EQUAL(settings_list.size(), 1);\n+            BOOST_CHECK_EQUAL(settings_list[0].write(), expect.setting.write());\n+        }\n+\n+        if (expect.error) {\n+            BOOST_CHECK(!success);\n+            BOOST_CHECK_NE(error.find(expect.error), std::string::npos);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r360416558",
      "id" : 360416558,
      "in_reply_to_id" : 360386173,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MDQxNjU1OA==",
      "original_commit_id" : "e9fd366044e271632dc0e4f96e1c14f8e87213ae",
      "original_position" : 65,
      "path" : "src/test/util_tests.cpp",
      "position" : 65,
      "pull_request_review_id" : 335315308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473",
      "updated_at" : "2019-12-20T15:18:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/360416558",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r364445188"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364445188"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Why not [...]? I presume later tests require the less strict check?\r\n\r\nUpdated #16545 to use the suggestion and more strict checks",
      "commit_id" : "e9fd366044e271632dc0e4f96e1c14f8e87213ae",
      "created_at" : "2020-01-08T21:12:07Z",
      "diff_hunk" : "@@ -189,12 +190,119 @@ struct TestArgsManager : public ArgsManager\n             AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n         }\n     }\n+    using ArgsManager::GetSetting;\n+    using ArgsManager::GetSettingsList;\n     using ArgsManager::ReadConfigStream;\n     using ArgsManager::cs_args;\n     using ArgsManager::m_network;\n     using ArgsManager::m_settings;\n };\n \n+//! Test GetSetting and GetArg type coercion, negation, and default value handling.\n+class CheckValueTest : public TestChain100Setup\n+{\n+public:\n+    struct Expect {\n+        util::SettingsValue setting;\n+        bool default_string = false;\n+        bool default_int = false;\n+        bool default_bool = false;\n+        const char* string_value = nullptr;\n+        Optional<int64_t> int_value;\n+        Optional<bool> bool_value;\n+        Optional<std::vector<std::string>> list_value;\n+        const char* error = nullptr;\n+\n+        Expect(util::SettingsValue s) : setting(std::move(s)) {}\n+        Expect& DefaultString() { default_string = true; return *this; }\n+        Expect& DefaultInt() { default_int = true; return *this; }\n+        Expect& DefaultBool() { default_bool = true; return *this; }\n+        Expect& String(const char* s) { string_value = s; return *this; }\n+        Expect& Int(int64_t i) { int_value = i; return *this; }\n+        Expect& Bool(bool b) { bool_value = b; return *this; }\n+        Expect& List(std::vector<std::string> m) { list_value = std::move(m); return *this; }\n+        Expect& Error(const char* e) { error = e; return *this; }\n+    };\n+\n+    void CheckValue(unsigned int flags, const char* arg, const Expect& expect)\n+    {\n+        TestArgsManager test;\n+        test.SetupArgs({{\"-value\", flags}});\n+        const char* argv[] = {\"ignored\", arg};\n+        std::string error;\n+        bool success = test.ParseParameters(arg ? 2 : 1, (char**)argv, error);\n+\n+        BOOST_CHECK_EQUAL(test.GetSetting(\"-value\").write(), expect.setting.write());\n+        auto settings_list = test.GetSettingsList(\"-value\");\n+        if (expect.setting.isNull() || expect.setting.isFalse()) {\n+            BOOST_CHECK_EQUAL(settings_list.size(), 0);\n+        } else {\n+            BOOST_CHECK_EQUAL(settings_list.size(), 1);\n+            BOOST_CHECK_EQUAL(settings_list[0].write(), expect.setting.write());\n+        }\n+\n+        if (expect.error) {\n+            BOOST_CHECK(!success);\n+            BOOST_CHECK_NE(error.find(expect.error), std::string::npos);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17473#discussion_r364445188",
      "id" : 364445188,
      "in_reply_to_id" : 360386173,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQ0NTE4OA==",
      "original_commit_id" : "e9fd366044e271632dc0e4f96e1c14f8e87213ae",
      "original_position" : 65,
      "path" : "src/test/util_tests.cpp",
      "position" : 65,
      "pull_request_review_id" : 340147680,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17473",
      "updated_at" : "2020-01-08T21:12:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364445188",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
