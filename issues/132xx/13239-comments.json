[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "It could be helpful to review using `git diff --color-moved=dimmed_zebra --minimal`",
      "created_at" : "2018-05-15T20:12:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13239#issuecomment-389297982",
      "id" : 389297982,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13239",
      "updated_at" : "2018-05-18T18:44:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/389297982",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK d53c3a6.",
      "created_at" : "2018-05-16T12:29:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13239#issuecomment-389501054",
      "id" : 389501054,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13239",
      "updated_at" : "2018-05-16T12:29:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/389501054",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased",
      "created_at" : "2018-05-16T20:10:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13239#issuecomment-389649579",
      "id" : 389649579,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13239",
      "updated_at" : "2018-05-16T20:10:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/389649579",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK ff9e94a65f990905abc48aafae2d5ff0cb61778b\r\n\r\n`--color-moved=dimmed_zebra` is very useful, I didn't know about that option.",
      "created_at" : "2018-05-18T20:33:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13239#issuecomment-390324378",
      "id" : 390324378,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13239",
      "updated_at" : "2018-05-18T20:33:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/390324378",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa Agreed! Was just added: https://blog.github.com/2018-04-05-git-217-released/\r\n\r\nLearned about it from @ajtowns here: https://github.com/bitcoin/bitcoin/pull/13021#issuecomment-382947671",
      "created_at" : "2018-05-18T20:41:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13239#issuecomment-390326457",
      "id" : 390326457,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13239",
      "updated_at" : "2018-05-18T20:45:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/390326457",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "NodeFullyConnected is not a templated method, so I don't see why it needs to be fully-defined. (Using it in a templated method should be fine, no? Also note that this previously compiled without issues.)",
      "created_at" : "2018-05-18T21:22:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13239#issuecomment-390335884",
      "id" : 390335884,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13239",
      "updated_at" : "2018-05-18T21:22:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/390335884",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@MarcoFalke here's the build failure from #13235. Is there another approach you recommend?\r\n\r\n```\r\nlibtool: link: /usr/bin/ccache arm-linux-gnueabihf-g++ -std=c++11 -Wstack-protector -fstack-protector-all -fPIE -pipe -O2 -fvisibility=hidden -Wl,--exclude-libs -Wl,ALL -pthread -Wl,-z -Wl,relro -Wl,-z -Wl,now -pie -o bench/bench_bitcoin bench/bench_bench_bitcoin-bench_bitcoin.o bench/bench_bench_bitcoin-bench.o bench/bench_bench_bitcoin-checkblock.o bench/bench_bench_bitcoin-checkqueue.o bench/bench_bench_bitcoin-Examples.o bench/bench_bench_bitcoin-rollingbloom.o bench/bench_bench_bitcoin-crypto_hash.o bench/bench_bench_bitcoin-ccoins_caching.o bench/bench_bench_bitcoin-mempool_eviction.o bench/bench_bench_bitcoin-verify_script.o bench/bench_bench_bitcoin-base58.o bench/bench_bench_bitcoin-lockedpool.o bench/bench_bench_bitcoin-prevector.o bench/bench_bench_bitcoin-coin_selection.o  -L/home/travis/build/bitcoin/bitcoin/depends/arm-linux-gnueabihf/share/../lib libbitcoin_server.a libbitcoin_wallet.a libbitcoin_common.a libbitcoin_util.a libbitcoin_consensus.a crypto/libbitcoin_crypto.a leveldb/libleveldb.a leveldb/libleveldb_sse42.a leveldb/libmemenv.a secp256k1/.libs/libsecp256k1.a univalue/.libs/libunivalue.a libbitcoin_zmq.a -L/home/travis/build/bitcoin/bitcoin/depends/arm-linux-gnueabihf/lib /home/travis/build/bitcoin/bitcoin/depends/arm-linux-gnueabihf/lib/libzmq.a -lpthread -ldl -lboost_system-mt -lboost_filesystem-mt -lboost_program_options-mt -lboost_thread-mt -lboost_chrono-mt -ldb_cxx-4.8 -lssl -lcrypto -ldl -lcrypto -ldl -lminiupnpc /home/travis/build/bitcoin/bitcoin/depends/arm-linux-gnueabihf/lib/libevent_pthreads.a /home/travis/build/bitcoin/bitcoin/depends/arm-linux-gnueabihf/lib/libevent.a -lrt -pthread\r\nlibbitcoin_wallet.a(libbitcoin_wallet_a-wallet.o): In function `CWalletTx::RelayWalletTransaction(CConnman*)':\r\nwallet.cpp:(.text+0x5cea): undefined reference to `CConnman::NodeFullyConnected(CNode const*)'\r\ncollect2: error: ld returned 1 exit status\r\n```\r\nhttps://travis-ci.org/bitcoin/bitcoin/jobs/379011082\r\n\r\nNote `CConnman::NodeFullyConnected` is defined in net.cpp, which is available in `libbitcoin_server.a`, which is present.",
      "created_at" : "2018-05-18T21:47:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13239#issuecomment-390341413",
      "id" : 390341413,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13239",
      "updated_at" : "2018-05-18T22:37:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/390341413",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I spent a bit of time going down the path of adding the net.cpp sources to libbitcoin_wallet.a, but this ended up seeming like the more narrow fix, because the other approach kept wanting to pull more of the project into the wallet lib. I could see an argument for factoring the CConnman dependency out of CWallet.",
      "created_at" : "2018-05-18T21:49:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13239#issuecomment-390341863",
      "id" : 390341863,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13239",
      "updated_at" : "2018-05-18T21:55:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/390341863",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2018-05-24T07:15:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13239#issuecomment-391613616",
      "id" : 391613616,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13239",
      "updated_at" : "2018-05-24T07:15:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/391613616",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13239#discussion_r190604335"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13239"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/190604335"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Conman is not \"information about a peer\"",
      "commit_id" : "118948996d40c9bd872cf44342a9e72b70c21055",
      "created_at" : "2018-05-24T14:20:13Z",
      "diff_hunk" : "@@ -109,754 +148,710 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n-class NetEventsInterface;\n-class CConnman\n-{\n+class CNetMessage {\n+private:\n+    mutable CHash256 hasher;\n+    mutable uint256 data_hash;\n public:\n+    bool in_data;                   // parsing header (false) or data (true)\n \n-    enum NumConnections {\n-        CONNECTIONS_NONE = 0,\n-        CONNECTIONS_IN = (1U << 0),\n-        CONNECTIONS_OUT = (1U << 1),\n-        CONNECTIONS_ALL = (CONNECTIONS_IN | CONNECTIONS_OUT),\n-    };\n-\n-    struct Options\n-    {\n-        ServiceFlags nLocalServices = NODE_NONE;\n-        int nMaxConnections = 0;\n-        int nMaxOutbound = 0;\n-        int nMaxAddnode = 0;\n-        int nMaxFeeler = 0;\n-        int nBestHeight = 0;\n-        CClientUIInterface* uiInterface = nullptr;\n-        NetEventsInterface* m_msgproc = nullptr;\n-        unsigned int nSendBufferMaxSize = 0;\n-        unsigned int nReceiveFloodSize = 0;\n-        uint64_t nMaxOutboundTimeframe = 0;\n-        uint64_t nMaxOutboundLimit = 0;\n-        std::vector<std::string> vSeedNodes;\n-        std::vector<CSubNet> vWhitelistedRange;\n-        std::vector<CService> vBinds, vWhiteBinds;\n-        bool m_use_addrman_outgoing = true;\n-        std::vector<std::string> m_specified_outgoing;\n-        std::vector<std::string> m_added_nodes;\n-    };\n-\n-    void Init(const Options& connOptions) {\n-        nLocalServices = connOptions.nLocalServices;\n-        nMaxConnections = connOptions.nMaxConnections;\n-        nMaxOutbound = std::min(connOptions.nMaxOutbound, connOptions.nMaxConnections);\n-        nMaxAddnode = connOptions.nMaxAddnode;\n-        nMaxFeeler = connOptions.nMaxFeeler;\n-        nBestHeight = connOptions.nBestHeight;\n-        clientInterface = connOptions.uiInterface;\n-        m_msgproc = connOptions.m_msgproc;\n-        nSendBufferMaxSize = connOptions.nSendBufferMaxSize;\n-        nReceiveFloodSize = connOptions.nReceiveFloodSize;\n-        {\n-            LOCK(cs_totalBytesSent);\n-            nMaxOutboundTimeframe = connOptions.nMaxOutboundTimeframe;\n-            nMaxOutboundLimit = connOptions.nMaxOutboundLimit;\n-        }\n-        vWhitelistedRange = connOptions.vWhitelistedRange;\n-        {\n-            LOCK(cs_vAddedNodes);\n-            vAddedNodes = connOptions.m_added_nodes;\n-        }\n-    }\n-\n-    CConnman(uint64_t seed0, uint64_t seed1);\n-    ~CConnman();\n-    bool Start(CScheduler& scheduler, const Options& options);\n-    void Stop();\n-    void Interrupt();\n-    bool GetNetworkActive() const { return fNetworkActive; };\n-    void SetNetworkActive(bool active);\n-    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool manual_connection = false);\n-    bool CheckIncomingNonce(uint64_t nonce);\n+    CDataStream hdrbuf;             // partially received header\n+    CMessageHeader hdr;             // complete header\n+    unsigned int nHdrPos;\n \n-    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);\n+    CDataStream vRecv;              // received message data\n+    unsigned int nDataPos;\n \n-    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg);\n+    int64_t nTime;                  // time (in microseconds) of message receipt.\n \n-    template<typename Callable>\n-    void ForEachNode(Callable&& func)\n-    {\n-        LOCK(cs_vNodes);\n-        for (auto&& node : vNodes) {\n-            if (NodeFullyConnected(node))\n-                func(node);\n-        }\n-    };\n+    CNetMessage(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn), vRecv(nTypeIn, nVersionIn) {\n+        hdrbuf.resize(24);\n+        in_data = false;\n+        nHdrPos = 0;\n+        nDataPos = 0;\n+        nTime = 0;\n+    }\n \n-    template<typename Callable>\n-    void ForEachNode(Callable&& func) const\n+    bool complete() const\n     {\n-        LOCK(cs_vNodes);\n-        for (auto&& node : vNodes) {\n-            if (NodeFullyConnected(node))\n-                func(node);\n-        }\n-    };\n+        if (!in_data)\n+            return false;\n+        return (hdr.nMessageSize == nDataPos);\n+    }\n \n-    template<typename Callable, typename CallableAfter>\n-    void ForEachNodeThen(Callable&& pre, CallableAfter&& post)\n-    {\n-        LOCK(cs_vNodes);\n-        for (auto&& node : vNodes) {\n-            if (NodeFullyConnected(node))\n-                pre(node);\n-        }\n-        post();\n-    };\n+    const uint256& GetMessageHash() const;\n \n-    template<typename Callable, typename CallableAfter>\n-    void ForEachNodeThen(Callable&& pre, CallableAfter&& post) const\n+    void SetVersion(int nVersionIn)\n     {\n-        LOCK(cs_vNodes);\n-        for (auto&& node : vNodes) {\n-            if (NodeFullyConnected(node))\n-                pre(node);\n-        }\n-        post();\n-    };\n-\n-    // Addrman functions\n-    size_t GetAddressCount() const;\n-    void SetServices(const CService &addr, ServiceFlags nServices);\n-    void MarkAddressGood(const CAddress& addr);\n-    void AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n-    std::vector<CAddress> GetAddresses();\n-\n-    // Denial-of-service detection/prevention\n-    // The idea is to detect peers that are behaving\n-    // badly and disconnect/ban them, but do it in a\n-    // one-coding-mistake-won't-shatter-the-entire-network\n-    // way.\n-    // IMPORTANT:  There should be nothing I can give a\n-    // node that it will forward on that will make that\n-    // node's peers drop it. If there is, an attacker\n-    // can isolate a node and/or try to split the network.\n-    // Dropping a node for sending stuff that is invalid\n-    // now but might be valid in a later version is also\n-    // dangerous, because it can cause a network split\n-    // between nodes running old code and nodes running\n-    // new code.\n-    void Ban(const CNetAddr& netAddr, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n-    void Ban(const CSubNet& subNet, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n-    void ClearBanned(); // needed for unit testing\n-    bool IsBanned(CNetAddr ip);\n-    bool IsBanned(CSubNet subnet);\n-    bool Unban(const CNetAddr &ip);\n-    bool Unban(const CSubNet &ip);\n-    void GetBanned(banmap_t &banmap);\n-    void SetBanned(const banmap_t &banmap);\n-\n-    // This allows temporarily exceeding nMaxOutbound, with the goal of finding\n-    // a peer that is better than all our current peers.\n-    void SetTryNewOutboundPeer(bool flag);\n-    bool GetTryNewOutboundPeer();\n-\n-    // Return the number of outbound peers we have in excess of our target (eg,\n-    // if we previously called SetTryNewOutboundPeer(true), and have since set\n-    // to false, we may have extra peers that we wish to disconnect). This may\n-    // return a value less than (num_outbound_connections - num_outbound_slots)\n-    // in cases where some outbound connections are not yet fully connected, or\n-    // not yet fully disconnected.\n-    int GetExtraOutboundCount();\n+        hdrbuf.SetVersion(nVersionIn);\n+        vRecv.SetVersion(nVersionIn);\n+    }\n \n-    bool AddNode(const std::string& node);\n-    bool RemoveAddedNode(const std::string& node);\n-    std::vector<AddedNodeInfo> GetAddedNodeInfo();\n+    int readHeader(const char *pch, unsigned int nBytes);\n+    int readData(const char *pch, unsigned int nBytes);\n+};\n \n-    size_t GetNodeCount(NumConnections num);\n-    void GetNodeStats(std::vector<CNodeStats>& vstats);\n-    bool DisconnectNode(const std::string& node);\n-    bool DisconnectNode(NodeId id);\n+/** Information about a peer */\n+class CConnman;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13239#discussion_r190604335",
      "id" : 190604335,
      "original_commit_id" : "e2db96e7ac17adfc70ea78d27b58f378114338fd",
      "original_position" : 258,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 123015224,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13239",
      "updated_at" : "2018-05-24T22:06:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/190604335",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed comment location in e2db96e, and squashed the latter two commits.",
      "created_at" : "2018-05-24T22:07:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13239#issuecomment-391881116",
      "id" : 391881116,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13239",
      "updated_at" : "2018-05-24T22:07:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/391881116",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13239#discussion_r190744948"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13239"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/190744948"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed",
      "commit_id" : "118948996d40c9bd872cf44342a9e72b70c21055",
      "created_at" : "2018-05-24T22:07:32Z",
      "diff_hunk" : "@@ -109,754 +148,710 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n-class NetEventsInterface;\n-class CConnman\n-{\n+class CNetMessage {\n+private:\n+    mutable CHash256 hasher;\n+    mutable uint256 data_hash;\n public:\n+    bool in_data;                   // parsing header (false) or data (true)\n \n-    enum NumConnections {\n-        CONNECTIONS_NONE = 0,\n-        CONNECTIONS_IN = (1U << 0),\n-        CONNECTIONS_OUT = (1U << 1),\n-        CONNECTIONS_ALL = (CONNECTIONS_IN | CONNECTIONS_OUT),\n-    };\n-\n-    struct Options\n-    {\n-        ServiceFlags nLocalServices = NODE_NONE;\n-        int nMaxConnections = 0;\n-        int nMaxOutbound = 0;\n-        int nMaxAddnode = 0;\n-        int nMaxFeeler = 0;\n-        int nBestHeight = 0;\n-        CClientUIInterface* uiInterface = nullptr;\n-        NetEventsInterface* m_msgproc = nullptr;\n-        unsigned int nSendBufferMaxSize = 0;\n-        unsigned int nReceiveFloodSize = 0;\n-        uint64_t nMaxOutboundTimeframe = 0;\n-        uint64_t nMaxOutboundLimit = 0;\n-        std::vector<std::string> vSeedNodes;\n-        std::vector<CSubNet> vWhitelistedRange;\n-        std::vector<CService> vBinds, vWhiteBinds;\n-        bool m_use_addrman_outgoing = true;\n-        std::vector<std::string> m_specified_outgoing;\n-        std::vector<std::string> m_added_nodes;\n-    };\n-\n-    void Init(const Options& connOptions) {\n-        nLocalServices = connOptions.nLocalServices;\n-        nMaxConnections = connOptions.nMaxConnections;\n-        nMaxOutbound = std::min(connOptions.nMaxOutbound, connOptions.nMaxConnections);\n-        nMaxAddnode = connOptions.nMaxAddnode;\n-        nMaxFeeler = connOptions.nMaxFeeler;\n-        nBestHeight = connOptions.nBestHeight;\n-        clientInterface = connOptions.uiInterface;\n-        m_msgproc = connOptions.m_msgproc;\n-        nSendBufferMaxSize = connOptions.nSendBufferMaxSize;\n-        nReceiveFloodSize = connOptions.nReceiveFloodSize;\n-        {\n-            LOCK(cs_totalBytesSent);\n-            nMaxOutboundTimeframe = connOptions.nMaxOutboundTimeframe;\n-            nMaxOutboundLimit = connOptions.nMaxOutboundLimit;\n-        }\n-        vWhitelistedRange = connOptions.vWhitelistedRange;\n-        {\n-            LOCK(cs_vAddedNodes);\n-            vAddedNodes = connOptions.m_added_nodes;\n-        }\n-    }\n-\n-    CConnman(uint64_t seed0, uint64_t seed1);\n-    ~CConnman();\n-    bool Start(CScheduler& scheduler, const Options& options);\n-    void Stop();\n-    void Interrupt();\n-    bool GetNetworkActive() const { return fNetworkActive; };\n-    void SetNetworkActive(bool active);\n-    void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool manual_connection = false);\n-    bool CheckIncomingNonce(uint64_t nonce);\n+    CDataStream hdrbuf;             // partially received header\n+    CMessageHeader hdr;             // complete header\n+    unsigned int nHdrPos;\n \n-    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);\n+    CDataStream vRecv;              // received message data\n+    unsigned int nDataPos;\n \n-    void PushMessage(CNode* pnode, CSerializedNetMsg&& msg);\n+    int64_t nTime;                  // time (in microseconds) of message receipt.\n \n-    template<typename Callable>\n-    void ForEachNode(Callable&& func)\n-    {\n-        LOCK(cs_vNodes);\n-        for (auto&& node : vNodes) {\n-            if (NodeFullyConnected(node))\n-                func(node);\n-        }\n-    };\n+    CNetMessage(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn), vRecv(nTypeIn, nVersionIn) {\n+        hdrbuf.resize(24);\n+        in_data = false;\n+        nHdrPos = 0;\n+        nDataPos = 0;\n+        nTime = 0;\n+    }\n \n-    template<typename Callable>\n-    void ForEachNode(Callable&& func) const\n+    bool complete() const\n     {\n-        LOCK(cs_vNodes);\n-        for (auto&& node : vNodes) {\n-            if (NodeFullyConnected(node))\n-                func(node);\n-        }\n-    };\n+        if (!in_data)\n+            return false;\n+        return (hdr.nMessageSize == nDataPos);\n+    }\n \n-    template<typename Callable, typename CallableAfter>\n-    void ForEachNodeThen(Callable&& pre, CallableAfter&& post)\n-    {\n-        LOCK(cs_vNodes);\n-        for (auto&& node : vNodes) {\n-            if (NodeFullyConnected(node))\n-                pre(node);\n-        }\n-        post();\n-    };\n+    const uint256& GetMessageHash() const;\n \n-    template<typename Callable, typename CallableAfter>\n-    void ForEachNodeThen(Callable&& pre, CallableAfter&& post) const\n+    void SetVersion(int nVersionIn)\n     {\n-        LOCK(cs_vNodes);\n-        for (auto&& node : vNodes) {\n-            if (NodeFullyConnected(node))\n-                pre(node);\n-        }\n-        post();\n-    };\n-\n-    // Addrman functions\n-    size_t GetAddressCount() const;\n-    void SetServices(const CService &addr, ServiceFlags nServices);\n-    void MarkAddressGood(const CAddress& addr);\n-    void AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n-    std::vector<CAddress> GetAddresses();\n-\n-    // Denial-of-service detection/prevention\n-    // The idea is to detect peers that are behaving\n-    // badly and disconnect/ban them, but do it in a\n-    // one-coding-mistake-won't-shatter-the-entire-network\n-    // way.\n-    // IMPORTANT:  There should be nothing I can give a\n-    // node that it will forward on that will make that\n-    // node's peers drop it. If there is, an attacker\n-    // can isolate a node and/or try to split the network.\n-    // Dropping a node for sending stuff that is invalid\n-    // now but might be valid in a later version is also\n-    // dangerous, because it can cause a network split\n-    // between nodes running old code and nodes running\n-    // new code.\n-    void Ban(const CNetAddr& netAddr, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n-    void Ban(const CSubNet& subNet, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n-    void ClearBanned(); // needed for unit testing\n-    bool IsBanned(CNetAddr ip);\n-    bool IsBanned(CSubNet subnet);\n-    bool Unban(const CNetAddr &ip);\n-    bool Unban(const CSubNet &ip);\n-    void GetBanned(banmap_t &banmap);\n-    void SetBanned(const banmap_t &banmap);\n-\n-    // This allows temporarily exceeding nMaxOutbound, with the goal of finding\n-    // a peer that is better than all our current peers.\n-    void SetTryNewOutboundPeer(bool flag);\n-    bool GetTryNewOutboundPeer();\n-\n-    // Return the number of outbound peers we have in excess of our target (eg,\n-    // if we previously called SetTryNewOutboundPeer(true), and have since set\n-    // to false, we may have extra peers that we wish to disconnect). This may\n-    // return a value less than (num_outbound_connections - num_outbound_slots)\n-    // in cases where some outbound connections are not yet fully connected, or\n-    // not yet fully disconnected.\n-    int GetExtraOutboundCount();\n+        hdrbuf.SetVersion(nVersionIn);\n+        vRecv.SetVersion(nVersionIn);\n+    }\n \n-    bool AddNode(const std::string& node);\n-    bool RemoveAddedNode(const std::string& node);\n-    std::vector<AddedNodeInfo> GetAddedNodeInfo();\n+    int readHeader(const char *pch, unsigned int nBytes);\n+    int readData(const char *pch, unsigned int nBytes);\n+};\n \n-    size_t GetNodeCount(NumConnections num);\n-    void GetNodeStats(std::vector<CNodeStats>& vstats);\n-    bool DisconnectNode(const std::string& node);\n-    bool DisconnectNode(NodeId id);\n+/** Information about a peer */\n+class CConnman;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13239#discussion_r190744948",
      "id" : 190744948,
      "in_reply_to_id" : 190604335,
      "original_commit_id" : "e2db96e7ac17adfc70ea78d27b58f378114338fd",
      "original_position" : 258,
      "path" : "src/net.h",
      "position" : null,
      "pull_request_review_id" : 123189928,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13239",
      "updated_at" : "2018-05-24T22:07:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/190744948",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Unnecessary thanks to build fix now in #13235",
      "created_at" : "2018-06-14T09:02:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13239#issuecomment-397224705",
      "id" : 397224705,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13239",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDM5NzIyNDcwNQ==",
      "updated_at" : "2018-06-14T09:02:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/397224705",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5470?v=4",
         "events_url" : "https://api.github.com/users/Empact/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Empact/followers",
         "following_url" : "https://api.github.com/users/Empact/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Empact/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Empact",
         "id" : 5470,
         "login" : "Empact",
         "node_id" : "MDQ6VXNlcjU0NzA=",
         "organizations_url" : "https://api.github.com/users/Empact/orgs",
         "received_events_url" : "https://api.github.com/users/Empact/received_events",
         "repos_url" : "https://api.github.com/users/Empact/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Empact/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Empact/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Empact"
      }
   }
]
