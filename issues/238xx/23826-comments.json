[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK based on the description",
      "created_at" : "2021-12-20T14:36:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-997980484",
      "id" : 997980484,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23826",
      "node_id" : "IC_kwDOABII5847e_lE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997980484/reactions"
      },
      "updated_at" : "2021-12-20T14:36:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997980484",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Strong concept ACK!",
      "created_at" : "2021-12-20T14:55:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-997995730",
      "id" : 997995730,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23826",
      "node_id" : "IC_kwDOABII5847fDTS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997995730/reactions"
      },
      "updated_at" : "2021-12-20T14:55:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997995730",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2021-12-20T14:58:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-997997825",
      "id" : 997997825,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23826",
      "node_id" : "IC_kwDOABII5847fD0B",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997997825/reactions"
      },
      "updated_at" : "2021-12-20T14:58:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997997825",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23807](https://github.com/bitcoin/bitcoin/pull/23807) (p2p: Remove GetAdjustedTime() from AddrMan by w0xlt)\n* [#23373](https://github.com/bitcoin/bitcoin/pull/23373) (test: Parse command line arguments from unit and fuzz tests, make addrman consistency check ratio easier to change by vasild)\n* [#22910](https://github.com/bitcoin/bitcoin/pull/22910) ([RFC] Encapsulate asmap in NetGroupManager by jnewbery)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-12-21T03:12:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-998434676",
      "id" : 998434676,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23826",
      "node_id" : "IC_kwDOABII5847gud0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998434676/reactions"
      },
      "updated_at" : "2021-12-28T06:16:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998434676",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773278363"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773278363"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`nId` is unused. Try:\r\n\r\n```suggestion\r\n    AddrInfo* addr_info_temp = Find(addr);\r\n```",
      "commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "created_at" : "2021-12-21T16:27:24Z",
      "diff_hunk" : "@@ -930,6 +930,31 @@ std::pair<CAddress, int64_t> AddrManImpl::SelectTriedCollision_()\n     return {info_old, info_old.nLastTry};\n }\n \n+std::optional<AddressPosition> AddrManImpl::FindAddressEntry_(const CAddress& addr)\n+{\n+    AssertLockHeld(cs);\n+\n+    int nId;\n+    AddrInfo* addr_info_temp = Find(addr, &nId);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773278363",
      "id" : 773278363,
      "line" : 938,
      "node_id" : "PRRC_kwDOABII584uF0qb",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 938,
      "original_position" : 9,
      "original_start_line" : 937,
      "path" : "src/addrman.cpp",
      "position" : 9,
      "pull_request_review_id" : 837631287,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773278363/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 937,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-21T18:36:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773278363",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773278921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773278921"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n     * @return               Information about the address record in AddrMan or\r\n     *                       nullopt if address is not found.\r\n```",
      "commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "created_at" : "2021-12-21T16:28:10Z",
      "diff_hunk" : "@@ -142,6 +165,15 @@ class AddrMan\n     void SetServices(const CService& addr, ServiceFlags nServices);\n \n     const std::vector<bool>& GetAsmap() const;\n+\n+    /** Test-only function\n+     * Find the address record in AddrMan and return information about its\n+     * position.\n+     * @param[in] addr       The address record to look up.\n+     * @return               Information about the address record in AddrMan\n+     *                       nullptr if address is not found",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773278921",
      "id" : 773278921,
      "line" : 174,
      "node_id" : "PRRC_kwDOABII584uF0zJ",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 174,
      "original_position" : 40,
      "original_start_line" : 173,
      "path" : "src/addrman.h",
      "position" : 40,
      "pull_request_review_id" : 837631287,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773278921/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 173,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-21T18:36:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773278921",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773279660"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773279660"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No need for braces if the if block is just one statement:\r\n\r\n```suggestion\r\n    if (!addr_info_temp) return std::nullopt;\r\n```\r\n\r\nor:\r\n\r\n```suggestion\r\n    if (!addr_info_temp) {\r\n        return std::nullopt;\r\n    }\r\n```",
      "commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "created_at" : "2021-12-21T16:29:07Z",
      "diff_hunk" : "@@ -930,6 +930,31 @@ std::pair<CAddress, int64_t> AddrManImpl::SelectTriedCollision_()\n     return {info_old, info_old.nLastTry};\n }\n \n+std::optional<AddressPosition> AddrManImpl::FindAddressEntry_(const CAddress& addr)\n+{\n+    AssertLockHeld(cs);\n+\n+    int nId;\n+    AddrInfo* addr_info_temp = Find(addr, &nId);\n+\n+    if (!addr_info_temp) { return std::nullopt; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773279660",
      "id" : 773279660,
      "line" : 940,
      "node_id" : "PRRC_kwDOABII584uF0-s",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 940,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/addrman.cpp",
      "position" : 11,
      "pull_request_review_id" : 837631287,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773279660/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-21T18:36:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773279660",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773298505"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773298505"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Since this struct is only used to pass data out of the module, what do you think about making all the members const, eg:\r\n\r\n<details>\r\n<summary>Diff</summary>\r\n\r\n```diff\r\nindex bb3c22ebdb..dba0b3a4a6 100644\r\n--- a/src/addrman.cpp\r\n+++ b/src/addrman.cpp\r\n@@ -940,19 +940,19 @@ std::optional<AddressPosition> AddrManImpl::FindAddressEntry_(const CAddress& ad\r\n     if (!addr_info_temp) { return std::nullopt; }\r\n     const AddrInfo& addr_info = *addr_info_temp;\r\n \r\n-    AddressPosition entry;\r\n     if(addr_info.fInTried) {\r\n-        entry.tried = true;\r\n-        entry.multiplicity = 1;\r\n-        entry.bucket = addr_info.GetTriedBucket(nKey, m_asmap);\r\n-        entry.position = addr_info.GetBucketPosition(nKey, false, entry.bucket);\r\n-        return entry;\r\n+        int bucket{addr_info.GetTriedBucket(nKey, m_asmap)};\r\n+        return AddressPosition(/*tried=*/true,\r\n+                               /*multiplicity=*/1,\r\n+                               /*bucket=*/bucket,\r\n+                               /*position=*/addr_info.GetBucketPosition(nKey, false, bucket));\r\n+    } else {\r\n+        int bucket{addr_info.GetNewBucket(nKey, m_asmap)};\r\n+        return AddressPosition(/*tried=*/false,\r\n+                               /*multiplicity=*/addr_info.nRefCount,\r\n+                               /*bucket=*/bucket,\r\n+                               /*position=*/addr_info.GetBucketPosition(nKey, true, bucket));\r\n     }\r\n-\r\n-    entry.multiplicity = addr_info.nRefCount;\r\n-    entry.bucket = addr_info.GetNewBucket(nKey, m_asmap);\r\n-    entry.position = addr_info.GetBucketPosition(nKey, true, entry.bucket);\r\n-    return entry;\r\n }\r\n \r\n void AddrManImpl::Check() const\r\ndiff --git a/src/addrman.h b/src/addrman.h\r\nindex 7cda33c185..68399fbd0d 100644\r\n--- a/src/addrman.h\r\n+++ b/src/addrman.h\r\n@@ -25,24 +25,28 @@ static constexpr int32_t DEFAULT_ADDRMAN_CONSISTENCY_CHECKS{0};\r\n /** Test-only struct, capturing info about an address in AddrMan */\r\n struct AddressPosition {\r\n     // Whether the address is in the new or tried table\r\n-    bool tried{false};\r\n+    const bool tried;\r\n \r\n     // Addresses in the tried table should always have a multiplicity of 1.\r\n     // Addresses in the new table can have multiplicity between 1 and\r\n     // ADDRMAN_NEW_BUCKETS_PER_ADDRESS\r\n-    int multiplicity{0};\r\n+    const int multiplicity;\r\n \r\n     // If the address is in the new table, the bucket and position are\r\n     // populated based on the first source who sent the address.\r\n     // In certain edge cases, this may not be where the address is currently\r\n     // located.\r\n-    int bucket{0};\r\n-    int position{0};\r\n+    const int bucket;\r\n+    const int position;\r\n \r\n     bool operator==(AddressPosition other) {\r\n         return std::tie(tried, multiplicity, bucket, position) ==\r\n                std::tie(other.tried, other.multiplicity, other.bucket, other.position);\r\n     }\r\n+\r\n+    explicit AddressPosition(bool tried_in, int multiplicity_in, int bucket_in, int position_in)\r\n+        : tried{tried_in}, multiplicity{multiplicity_in}, bucket{bucket_in}, position{position_in} {}\r\n+\r\n };\r\n \r\n /** Stochastic address manager\r\ndiff --git a/src/test/addrman_tests.cpp b/src/test/addrman_tests.cpp\r\nindex a4d57e3435..bf09d631d4 100644\r\n--- a/src/test/addrman_tests.cpp\r\n+++ b/src/test/addrman_tests.cpp\r\n@@ -237,8 +237,8 @@ BOOST_AUTO_TEST_CASE(addrman_new_multiplicity)\r\n         addr.nTime = start_time + i;\r\n         addrman->Add({addr}, source);\r\n     }\r\n-    addr_pos = addrman->FindAddressEntry(addr).value();\r\n-    BOOST_CHECK_EQUAL(addr_pos.multiplicity, 8U);\r\n+    auto addr_pos2 = addrman->FindAddressEntry(addr).value();\r\n+    BOOST_CHECK_EQUAL(addr_pos2.multiplicity, 8U);\r\n     // multiplicity doesn't affect size\r\n     BOOST_CHECK_EQUAL(addrman->size(), 1U);\r\n }\r\n```\r\n</details>\r\n\r\n(When we move to c++20 we can remove the ctor definition and use designated initializers)\r\n\r\nThe advantage to this is that all the fields _must_ be filled explicitly by `FindAddressEntry()` so there's no risk that we accidentally pass out a structure where one of the fields has been incorrectly set to the default value.",
      "commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "created_at" : "2021-12-21T16:55:04Z",
      "diff_hunk" : "@@ -22,6 +22,29 @@ class AddrManImpl;\n /** Default for -checkaddrman */\n static constexpr int32_t DEFAULT_ADDRMAN_CONSISTENCY_CHECKS{0};\n \n+/** Test-only struct, capturing info about an address in AddrMan */\n+struct AddressPosition {\n+    // Whether the address is in the new or tried table\n+    bool tried{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773298505",
      "id" : 773298505,
      "line" : 28,
      "node_id" : "PRRC_kwDOABII584uF5lJ",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 28,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : 7,
      "pull_request_review_id" : 837631287,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773298505/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-21T18:36:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773298505",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773300313"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773300313"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think there's any value in this creating this reference. You've already got a non-null pointer, so just use the `->` dereference operator to get what you need from it.",
      "commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "created_at" : "2021-12-21T16:57:34Z",
      "diff_hunk" : "@@ -930,6 +930,31 @@ std::pair<CAddress, int64_t> AddrManImpl::SelectTriedCollision_()\n     return {info_old, info_old.nLastTry};\n }\n \n+std::optional<AddressPosition> AddrManImpl::FindAddressEntry_(const CAddress& addr)\n+{\n+    AssertLockHeld(cs);\n+\n+    int nId;\n+    AddrInfo* addr_info_temp = Find(addr, &nId);\n+\n+    if (!addr_info_temp) { return std::nullopt; }\n+    const AddrInfo& addr_info = *addr_info_temp;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773300313",
      "id" : 773300313,
      "line" : 941,
      "node_id" : "PRRC_kwDOABII584uF6BZ",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 941,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/addrman.cpp",
      "position" : 12,
      "pull_request_review_id" : 837631287,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773300313/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-21T18:36:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773300313",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773348729"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773348729"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This line appears 17 times in the test. It's also very noisy and distracting from the purpose of the test. Perhaps add a utility function to create an addrman:\r\n\r\n```diff\r\nindex a4d57e3435..28a754e079 100644\r\n--- a/src/test/addrman_tests.cpp\r\n+++ b/src/test/addrman_tests.cpp\r\n@@ -49,12 +49,16 @@ static std::vector<bool> FromBytes(const unsigned char* source, int vector_size)\r\n     return result;\r\n }\r\n \r\n+static std::unique_ptr<AddrMan> TestAddrman(std::vector<bool> asmap = std::vector<bool>())\r\n+{\r\n+    return std::make_unique<AddrMan>(asmap, /*deterministic=*/true, /*consistency_check_ratio=*/100);\r\n+}\r\n \r\n BOOST_FIXTURE_TEST_SUITE(addrman_tests, BasicTestingSetup)\r\n \r\n BOOST_AUTO_TEST_CASE(addrman_simple)\r\n {\r\n-    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\r\n+    auto addrman = TestAddrman();\r\n \r\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\r\n \r\n@@ -597,7 +601,7 @@ BOOST_AUTO_TEST_CASE(addrman_serialization)\r\n {\r\n     std::vector<bool> asmap1 = FromBytes(asmap_raw, sizeof(asmap_raw) * 8);\r\n \r\n-    auto addrman_asmap1 = std::make_unique<AddrMan>(asmap1, /*deterministic=*/true, /*consistency_check_ratio=*/100);\r\n+    auto addrman_asmap1 = TestAddrman(asmap1);\r\n     auto addrman_asmap1_dup = std::make_unique<AddrMan>(asmap1, /*deterministic=*/true, /*consistency_check_ratio=*/100);\r\n     auto addrman_noasmap = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\r\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\r\n```\r\n\r\n(I only changed a couple of instances, but you get the idea)",
      "commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "created_at" : "2021-12-21T18:13:56Z",
      "diff_hunk" : "@@ -107,7 +54,7 @@ BOOST_FIXTURE_TEST_SUITE(addrman_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(addrman_simple)\n {\n-    auto addrman = std::make_unique<AddrManTest>();\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773348729",
      "id" : 773348729,
      "line" : 57,
      "node_id" : "PRRC_kwDOABII584uGF15",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 57,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/test/addrman_tests.cpp",
      "position" : 65,
      "pull_request_review_id" : 837631287,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773348729/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-21T18:36:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773348729",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773349992"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773349992"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I see you've removed the check about the position not matching. That looks like a good change to me since it doesn't make much sense to compare the positions of items in different buckets :+1: ",
      "commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "created_at" : "2021-12-21T18:16:10Z",
      "diff_hunk" : "@@ -700,72 +597,69 @@ BOOST_AUTO_TEST_CASE(addrman_serialization)\n {\n     std::vector<bool> asmap1 = FromBytes(asmap_raw, sizeof(asmap_raw) * 8);\n \n-    auto addrman_asmap1 = std::make_unique<AddrManTest>(asmap1);\n-    auto addrman_asmap1_dup = std::make_unique<AddrManTest>(asmap1);\n-    auto addrman_noasmap = std::make_unique<AddrManTest>();\n+    auto addrman_asmap1 = std::make_unique<AddrMan>(asmap1, /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    auto addrman_asmap1_dup = std::make_unique<AddrMan>(asmap1, /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    auto addrman_noasmap = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n \n     CAddress addr = CAddress(ResolveService(\"250.1.1.1\"), NODE_NONE);\n     CNetAddr default_source;\n \n-\n     addrman_asmap1->Add({addr}, default_source);\n \n     stream << *addrman_asmap1;\n     // serizalizing/deserializing addrman with the same asmap\n     stream >> *addrman_asmap1_dup;\n \n-    std::pair<int, int> bucketAndEntry_asmap1 = addrman_asmap1->GetBucketAndEntry(addr);\n-    std::pair<int, int> bucketAndEntry_asmap1_dup = addrman_asmap1_dup->GetBucketAndEntry(addr);\n-    BOOST_CHECK(bucketAndEntry_asmap1.second != -1);\n-    BOOST_CHECK(bucketAndEntry_asmap1_dup.second != -1);\n+    AddressPosition addr_pos1 = addrman_asmap1->FindAddressEntry(addr).value();\n+    AddressPosition addr_pos2 = addrman_asmap1_dup->FindAddressEntry(addr).value();\n+    BOOST_CHECK(addr_pos1.multiplicity != 0);\n+    BOOST_CHECK(addr_pos2.multiplicity != 0);\n \n-    BOOST_CHECK(bucketAndEntry_asmap1.first == bucketAndEntry_asmap1_dup.first);\n-    BOOST_CHECK(bucketAndEntry_asmap1.second == bucketAndEntry_asmap1_dup.second);\n+    BOOST_CHECK(addr_pos1 == addr_pos2);\n \n     // deserializing asmaped peers.dat to non-asmaped addrman\n     stream << *addrman_asmap1;\n     stream >> *addrman_noasmap;\n-    std::pair<int, int> bucketAndEntry_noasmap = addrman_noasmap->GetBucketAndEntry(addr);\n-    BOOST_CHECK(bucketAndEntry_noasmap.second != -1);\n-    BOOST_CHECK(bucketAndEntry_asmap1.first != bucketAndEntry_noasmap.first);\n-    BOOST_CHECK(bucketAndEntry_asmap1.second != bucketAndEntry_noasmap.second);\n+    AddressPosition addr_pos3 = addrman_noasmap->FindAddressEntry(addr).value();\n+    BOOST_CHECK(addr_pos3.multiplicity != 0);\n+    BOOST_CHECK(addr_pos1.bucket != addr_pos3.bucket);\n+    BOOST_CHECK(addr_pos1.position != addr_pos3.position);\n \n     // deserializing non-asmaped peers.dat to asmaped addrman\n-    addrman_asmap1 = std::make_unique<AddrManTest>(asmap1);\n-    addrman_noasmap = std::make_unique<AddrManTest>();\n+    addrman_asmap1 = std::make_unique<AddrMan>(asmap1, /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    addrman_noasmap = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n     addrman_noasmap->Add({addr}, default_source);\n     stream << *addrman_noasmap;\n     stream >> *addrman_asmap1;\n-    std::pair<int, int> bucketAndEntry_asmap1_deser = addrman_asmap1->GetBucketAndEntry(addr);\n-    BOOST_CHECK(bucketAndEntry_asmap1_deser.second != -1);\n-    BOOST_CHECK(bucketAndEntry_asmap1_deser.first != bucketAndEntry_noasmap.first);\n-    BOOST_CHECK(bucketAndEntry_asmap1_deser.first == bucketAndEntry_asmap1_dup.first);\n-    BOOST_CHECK(bucketAndEntry_asmap1_deser.second == bucketAndEntry_asmap1_dup.second);\n+\n+    AddressPosition addr_pos4 = addrman_asmap1->FindAddressEntry(addr).value();\n+    BOOST_CHECK(addr_pos4.multiplicity != 0);\n+    BOOST_CHECK(addr_pos4.bucket != addr_pos3.bucket);\n+    BOOST_CHECK(addr_pos4 == addr_pos2);\n \n     // used to map to different buckets, now maps to the same bucket.\n-    addrman_asmap1 = std::make_unique<AddrManTest>(asmap1);\n-    addrman_noasmap = std::make_unique<AddrManTest>();\n+    addrman_asmap1 = std::make_unique<AddrMan>(asmap1, /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    addrman_noasmap = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n     CAddress addr1 = CAddress(ResolveService(\"250.1.1.1\"), NODE_NONE);\n     CAddress addr2 = CAddress(ResolveService(\"250.2.1.1\"), NODE_NONE);\n     addrman_noasmap->Add({addr, addr2}, default_source);\n-    std::pair<int, int> bucketAndEntry_noasmap_addr1 = addrman_noasmap->GetBucketAndEntry(addr1);\n-    std::pair<int, int> bucketAndEntry_noasmap_addr2 = addrman_noasmap->GetBucketAndEntry(addr2);\n-    BOOST_CHECK(bucketAndEntry_noasmap_addr1.first != bucketAndEntry_noasmap_addr2.first);\n-    BOOST_CHECK(bucketAndEntry_noasmap_addr1.second != bucketAndEntry_noasmap_addr2.second);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773349992",
      "id" : 773349992,
      "line" : 755,
      "node_id" : "PRRC_kwDOABII584uGGJo",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 755,
      "original_position" : 518,
      "original_start_line" : null,
      "path" : "src/test/addrman_tests.cpp",
      "position" : 518,
      "pull_request_review_id" : 837631287,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773349992/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-21T18:36:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773349992",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773351849"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773351849"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No need for this local variable:\r\n\r\n```suggestion\r\n    // Set last good connection in the deep past.\r\n    addrman->Good(info, /*nTime=*/1);\r\n```",
      "commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "created_at" : "2021-12-21T18:19:18Z",
      "diff_hunk" : "@@ -828,114 +722,126 @@ BOOST_AUTO_TEST_CASE(addrman_selecttriedcollision)\n         CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n \n         // Unable to add duplicate address to tried table.\n-        BOOST_CHECK(!addrman.Good(addr));\n+        BOOST_CHECK(!addrman->Good(addr));\n \n         // Verify duplicate address not marked as a collision.\n-        BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() == \"[::]:0\");\n+        BOOST_CHECK(addrman->SelectTriedCollision().first.ToString() == \"[::]:0\");\n     }\n }\n \n BOOST_AUTO_TEST_CASE(addrman_noevict)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     // Add 35 addresses.\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 36; i++) {\n         CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // No collision yet.\n-        BOOST_CHECK(addrman.Good(addr));\n+        BOOST_CHECK(addrman->Good(addr));\n     }\n \n     // Collision in tried table between 36 and 19.\n     CService addr36 = ResolveService(\"250.1.1.36\");\n-    BOOST_CHECK(addrman.Add({CAddress(addr36, NODE_NONE)}, source));\n-    BOOST_CHECK(!addrman.Good(addr36));\n-    BOOST_CHECK_EQUAL(addrman.SelectTriedCollision().first.ToString(), \"250.1.1.19:0\");\n+    BOOST_CHECK(addrman->Add({CAddress(addr36, NODE_NONE)}, source));\n+    BOOST_CHECK(!addrman->Good(addr36));\n+    BOOST_CHECK_EQUAL(addrman->SelectTriedCollision().first.ToString(), \"250.1.1.19:0\");\n \n     // 36 should be discarded and 19 not evicted.\n     // This means we keep 19 in the tried table and\n     // 36 stays in the new table.\n-    addrman.ResolveCollisions();\n-    BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() == \"[::]:0\");\n+    addrman->ResolveCollisions();\n+    BOOST_CHECK(addrman->SelectTriedCollision().first.ToString() == \"[::]:0\");\n \n     // Lets create two collisions.\n     for (unsigned int i = 37; i < 59; i++) {\n         CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n-        BOOST_CHECK(addrman.Good(addr));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Good(addr));\n     }\n \n     // Cause a collision in the tried table.\n     CService addr59 = ResolveService(\"250.1.1.59\");\n-    BOOST_CHECK(addrman.Add({CAddress(addr59, NODE_NONE)}, source));\n-    BOOST_CHECK(!addrman.Good(addr59));\n+    BOOST_CHECK(addrman->Add({CAddress(addr59, NODE_NONE)}, source));\n+    BOOST_CHECK(!addrman->Good(addr59));\n \n-    BOOST_CHECK_EQUAL(addrman.SelectTriedCollision().first.ToString(), \"250.1.1.10:0\");\n+    BOOST_CHECK_EQUAL(addrman->SelectTriedCollision().first.ToString(), \"250.1.1.10:0\");\n \n     // Cause a second collision in the new table.\n-    BOOST_CHECK(!addrman.Add({CAddress(addr36, NODE_NONE)}, source));\n+    BOOST_CHECK(!addrman->Add({CAddress(addr36, NODE_NONE)}, source));\n \n     // 36 still cannot be moved from new to tried due to colliding with 19\n-    BOOST_CHECK(!addrman.Good(addr36));\n-    BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() != \"[::]:0\");\n+    BOOST_CHECK(!addrman->Good(addr36));\n+    BOOST_CHECK(addrman->SelectTriedCollision().first.ToString() != \"[::]:0\");\n \n     // Resolve all collisions.\n-    addrman.ResolveCollisions();\n-    BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() == \"[::]:0\");\n+    addrman->ResolveCollisions();\n+    BOOST_CHECK(addrman->SelectTriedCollision().first.ToString() == \"[::]:0\");\n }\n \n BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n-    BOOST_CHECK(addrman.size() == 0);\n+    BOOST_CHECK(addrman->size() == 0);\n \n     // Empty addrman should return blank addrman info.\n-    BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() == \"[::]:0\");\n+    BOOST_CHECK(addrman->SelectTriedCollision().first.ToString() == \"[::]:0\");\n \n     // Add 35 addresses\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 36; i++) {\n         CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // No collision yet.\n-        BOOST_CHECK(addrman.Good(addr));\n+        BOOST_CHECK(addrman->Good(addr));\n     }\n \n     // Collision between 36 and 19.\n     CService addr = ResolveService(\"250.1.1.36\");\n-    BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n-    BOOST_CHECK(!addrman.Good(addr));\n+    BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n+    BOOST_CHECK(!addrman->Good(addr));\n \n-    auto info = addrman.SelectTriedCollision().first;\n+    auto info = addrman->SelectTriedCollision().first;\n     BOOST_CHECK_EQUAL(info.ToString(), \"250.1.1.19:0\");\n \n     // Ensure test of address fails, so that it is evicted.\n-    addrman.SimConnFail(info);\n+    int64_t nLastSuccess = 1;\n+    // Set last good connection in the deep past.\n+    addrman->Good(info, nLastSuccess);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773351849",
      "id" : 773351849,
      "line" : 814,
      "node_id" : "PRRC_kwDOABII584uGGmp",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 814,
      "original_position" : 702,
      "original_start_line" : 812,
      "path" : "src/test/addrman_tests.cpp",
      "position" : 702,
      "pull_request_review_id" : 837631287,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773351849/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 812,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-21T18:36:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773351849",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773355331"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773355331"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Be aware that using `GetAdjustedTime()` will be a silent conflict with https://github.com/bitcoin/bitcoin/pull/23807",
      "commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "created_at" : "2021-12-21T18:25:13Z",
      "diff_hunk" : "@@ -1044,5 +950,35 @@ BOOST_AUTO_TEST_CASE(load_addrman_corrupted)\n     BOOST_CHECK_THROW(ReadFromStream(addrman2, ssPeers2), std::ios_base::failure);\n }\n \n+BOOST_AUTO_TEST_CASE(addrman_update_address)\n+{\n+    // Tests updating nTime via Connected() and nServices via SetServices()\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    CNetAddr source{ResolveIP(\"252.2.2.2\")};\n+    CAddress addr{CAddress(ResolveService(\"250.1.1.1\", 8333), NODE_NONE)};\n+\n+    int64_t startTime{GetAdjustedTime() - 10000};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773355331",
      "id" : 773355331,
      "line" : 960,
      "node_id" : "PRRC_kwDOABII584uGHdD",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 960,
      "original_position" : 756,
      "original_start_line" : null,
      "path" : "src/test/addrman_tests.cpp",
      "position" : 756,
      "pull_request_review_id" : 837631287,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773355331/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-21T18:36:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773355331",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773355663"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773355663"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Prefer snake_case for naming local variables in new code:\r\n\r\n```suggestion\r\n    int64_t start_time{GetAdjustedTime() - 10000};\r\n```",
      "commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "created_at" : "2021-12-21T18:25:45Z",
      "diff_hunk" : "@@ -1044,5 +950,35 @@ BOOST_AUTO_TEST_CASE(load_addrman_corrupted)\n     BOOST_CHECK_THROW(ReadFromStream(addrman2, ssPeers2), std::ios_base::failure);\n }\n \n+BOOST_AUTO_TEST_CASE(addrman_update_address)\n+{\n+    // Tests updating nTime via Connected() and nServices via SetServices()\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    CNetAddr source{ResolveIP(\"252.2.2.2\")};\n+    CAddress addr{CAddress(ResolveService(\"250.1.1.1\", 8333), NODE_NONE)};\n+\n+    int64_t startTime{GetAdjustedTime() - 10000};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773355663",
      "id" : 773355663,
      "line" : 960,
      "node_id" : "PRRC_kwDOABII584uGHiP",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 960,
      "original_position" : 756,
      "original_start_line" : null,
      "path" : "src/test/addrman_tests.cpp",
      "position" : 756,
      "pull_request_review_id" : 837631287,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773355663/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-21T18:36:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773355663",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773357109"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773357109"
         }
      },
      "author_association" : "MEMBER",
      "body" : "For consistency:\r\n\r\n```suggestion\r\n    std::vector<CAddress> vAddr1{addrman->GetAddr(/*max_addresses=*/0, /*max_pct=*/0, /*network=*/std::nullopt)};\r\n```\r\n\r\nSame below.",
      "commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "created_at" : "2021-12-21T18:28:13Z",
      "diff_hunk" : "@@ -1044,5 +950,35 @@ BOOST_AUTO_TEST_CASE(load_addrman_corrupted)\n     BOOST_CHECK_THROW(ReadFromStream(addrman2, ssPeers2), std::ios_base::failure);\n }\n \n+BOOST_AUTO_TEST_CASE(addrman_update_address)\n+{\n+    // Tests updating nTime via Connected() and nServices via SetServices()\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    CNetAddr source{ResolveIP(\"252.2.2.2\")};\n+    CAddress addr{CAddress(ResolveService(\"250.1.1.1\", 8333), NODE_NONE)};\n+\n+    int64_t startTime{GetAdjustedTime() - 10000};\n+    addr.nTime = startTime;\n+    BOOST_CHECK(addrman->Add({addr}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+\n+    // Updating an addrman entry with a different port doesn't change it\n+    CAddress addr_diff_port{CAddress(ResolveService(\"250.1.1.1\", 8334), NODE_NONE)};\n+    addr_diff_port.nTime = startTime;\n+    addrman->Connected(addr_diff_port);\n+    addrman->SetServices(addr_diff_port, NODE_NETWORK_LIMITED);\n+    std::vector<CAddress> vAddr1{addrman->GetAddr(/*max_addresses=*/ 0, /*max_pct=*/ 0, /*network=*/ std::nullopt)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773357109",
      "id" : 773357109,
      "line" : 970,
      "node_id" : "PRRC_kwDOABII584uGH41",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 970,
      "original_position" : 766,
      "original_start_line" : null,
      "path" : "src/test/addrman_tests.cpp",
      "position" : 766,
      "pull_request_review_id" : 837631287,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773357109/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-21T18:36:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773357109",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773358672"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773358672"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Again, be aware that this is a silent conflict with #23826.",
      "commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "created_at" : "2021-12-21T18:31:09Z",
      "diff_hunk" : "@@ -151,119 +98,149 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n \n BOOST_AUTO_TEST_CASE(addrman_ports)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 0U);\n \n     // Test 7; Addr with same IP but diff port does not replace existing addr.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1_port, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n-    auto addr_ret2 = addrman.Select().first;\n+    BOOST_CHECK(addrman->Add({CAddress(addr1_port, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n+    auto addr_ret2 = addrman->Select().first;\n     BOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8333\" || addr_ret2.ToString() == \"250.1.1.1:8334\");\n \n     // Test: Add same IP but diff port to tried table; this converts the entry with\n     // the specified port to tried, but not the other.\n-    addrman.Good(CAddress(addr1_port, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n+    addrman->Good(CAddress(addr1_port, NODE_NONE));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n     bool newOnly = true;\n-    auto addr_ret3 = addrman.Select(newOnly).first;\n+    auto addr_ret3 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n }\n \n \n BOOST_AUTO_TEST_CASE(addrman_select)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     // Test: Select from new with 1 addr in new.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     bool newOnly = true;\n-    auto addr_ret1 = addrman.Select(newOnly).first;\n+    auto addr_ret1 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret1.ToString(), \"250.1.1.1:8333\");\n \n     // Test: move addr to tried, select from new expected nothing returned.\n-    BOOST_CHECK(addrman.Good(CAddress(addr1, NODE_NONE)));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n-    auto addr_ret2 = addrman.Select(newOnly).first;\n+    BOOST_CHECK(addrman->Good(CAddress(addr1, NODE_NONE)));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+    auto addr_ret2 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret2.ToString(), \"[::]:0\");\n \n-    auto addr_ret3 = addrman.Select().first;\n+    auto addr_ret3 = addrman->Select().first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n \n     // Add three addresses to new table.\n     CService addr2 = ResolveService(\"250.3.1.1\", 8333);\n     CService addr3 = ResolveService(\"250.3.2.2\", 9999);\n     CService addr4 = ResolveService(\"250.3.3.3\", 9999);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n \n     // Add three addresses to tried table.\n     CService addr5 = ResolveService(\"250.4.4.4\", 8333);\n     CService addr6 = ResolveService(\"250.4.5.5\", 7777);\n     CService addr7 = ResolveService(\"250.4.6.6\", 8333);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr5, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr6, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr7, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr5, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr6, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr7, NODE_NONE)));\n \n     // Test: 6 addrs + 1 addr from last test = 7.\n-    BOOST_CHECK_EQUAL(addrman.size(), 7U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 7U);\n \n     // Test: Select pulls from new and tried regardless of port number.\n     std::set<uint16_t> ports;\n     for (int i = 0; i < 20; ++i) {\n-        ports.insert(addrman.Select().first.GetPort());\n+        ports.insert(addrman->Select().first.GetPort());\n     }\n     BOOST_CHECK_EQUAL(ports.size(), 3U);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     uint32_t num_addrs{0};\n \n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n \n     while (num_addrs < 22) { // Magic number! 250.1.1.1 - 250.1.1.22 do not collide with deterministic key = 1\n         CService addr = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // Test: No collision in new table yet.\n-        BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+        BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n     }\n \n     // Test: new table collision!\n     CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     uint32_t collisions{1};\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n \n     CService addr2 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_new_multiplicity)\n+{\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    CAddress addr{CAddress(ResolveService(\"253.3.3.3\", 8333), NODE_NONE)};\n+    int64_t start_time{GetAdjustedTime()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773358672",
      "id" : 773358672,
      "line" : 220,
      "node_id" : "PRRC_kwDOABII584uGIRQ",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 220,
      "original_position" : 239,
      "original_start_line" : null,
      "path" : "src/test/addrman_tests.cpp",
      "position" : 239,
      "pull_request_review_id" : 837631287,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773358672/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-21T18:36:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773358672",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773359789"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773359789"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Any reason for 400 in particular? I guess it needs to be larger than 8 in case the bucket/positions collide.",
      "commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "created_at" : "2021-12-21T18:33:03Z",
      "diff_hunk" : "@@ -151,119 +98,149 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n \n BOOST_AUTO_TEST_CASE(addrman_ports)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 0U);\n \n     // Test 7; Addr with same IP but diff port does not replace existing addr.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1_port, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n-    auto addr_ret2 = addrman.Select().first;\n+    BOOST_CHECK(addrman->Add({CAddress(addr1_port, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n+    auto addr_ret2 = addrman->Select().first;\n     BOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8333\" || addr_ret2.ToString() == \"250.1.1.1:8334\");\n \n     // Test: Add same IP but diff port to tried table; this converts the entry with\n     // the specified port to tried, but not the other.\n-    addrman.Good(CAddress(addr1_port, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n+    addrman->Good(CAddress(addr1_port, NODE_NONE));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n     bool newOnly = true;\n-    auto addr_ret3 = addrman.Select(newOnly).first;\n+    auto addr_ret3 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n }\n \n \n BOOST_AUTO_TEST_CASE(addrman_select)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     // Test: Select from new with 1 addr in new.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     bool newOnly = true;\n-    auto addr_ret1 = addrman.Select(newOnly).first;\n+    auto addr_ret1 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret1.ToString(), \"250.1.1.1:8333\");\n \n     // Test: move addr to tried, select from new expected nothing returned.\n-    BOOST_CHECK(addrman.Good(CAddress(addr1, NODE_NONE)));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n-    auto addr_ret2 = addrman.Select(newOnly).first;\n+    BOOST_CHECK(addrman->Good(CAddress(addr1, NODE_NONE)));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+    auto addr_ret2 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret2.ToString(), \"[::]:0\");\n \n-    auto addr_ret3 = addrman.Select().first;\n+    auto addr_ret3 = addrman->Select().first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n \n     // Add three addresses to new table.\n     CService addr2 = ResolveService(\"250.3.1.1\", 8333);\n     CService addr3 = ResolveService(\"250.3.2.2\", 9999);\n     CService addr4 = ResolveService(\"250.3.3.3\", 9999);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n \n     // Add three addresses to tried table.\n     CService addr5 = ResolveService(\"250.4.4.4\", 8333);\n     CService addr6 = ResolveService(\"250.4.5.5\", 7777);\n     CService addr7 = ResolveService(\"250.4.6.6\", 8333);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr5, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr6, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr7, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr5, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr6, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr7, NODE_NONE)));\n \n     // Test: 6 addrs + 1 addr from last test = 7.\n-    BOOST_CHECK_EQUAL(addrman.size(), 7U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 7U);\n \n     // Test: Select pulls from new and tried regardless of port number.\n     std::set<uint16_t> ports;\n     for (int i = 0; i < 20; ++i) {\n-        ports.insert(addrman.Select().first.GetPort());\n+        ports.insert(addrman->Select().first.GetPort());\n     }\n     BOOST_CHECK_EQUAL(ports.size(), 3U);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     uint32_t num_addrs{0};\n \n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n \n     while (num_addrs < 22) { // Magic number! 250.1.1.1 - 250.1.1.22 do not collide with deterministic key = 1\n         CService addr = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // Test: No collision in new table yet.\n-        BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+        BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n     }\n \n     // Test: new table collision!\n     CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     uint32_t collisions{1};\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n \n     CService addr2 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_new_multiplicity)\n+{\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    CAddress addr{CAddress(ResolveService(\"253.3.3.3\", 8333), NODE_NONE)};\n+    int64_t start_time{GetAdjustedTime()};\n+    addr.nTime = start_time;\n+\n+    // test that multiplicity stays at 1 if nTime doesn't increase\n+    for (unsigned int i = 1; i < 20; ++i) {\n+        std::string addr_ip{ToString(i % 256) + \".\" + ToString(i >> 8 % 256) + \".1.1\"};\n+        CNetAddr source{ResolveIP(addr_ip)};\n+        addrman->Add({addr}, source);\n+    }\n+    AddressPosition addr_pos = addrman->FindAddressEntry(addr).value();\n+    BOOST_CHECK_EQUAL(addr_pos.multiplicity, 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+\n+    // if nTime increases, an addr can occur in up to 8 buckets\n+    for (unsigned int i = 1; i < 400; ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r773359789",
      "id" : 773359789,
      "line" : 234,
      "node_id" : "PRRC_kwDOABII584uGIit",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 234,
      "original_position" : 253,
      "original_start_line" : null,
      "path" : "src/test/addrman_tests.cpp",
      "position" : 253,
      "pull_request_review_id" : 837631287,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773359789/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-21T18:36:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773359789",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774557150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774557150"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: if this is a test-only function, would not it be better to implement it in a derived class in the test file (such as the deleted class `AddrManTest`)?",
      "commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "created_at" : "2021-12-23T13:03:40Z",
      "diff_hunk" : "@@ -142,6 +165,15 @@ class AddrMan\n     void SetServices(const CService& addr, ServiceFlags nServices);\n \n     const std::vector<bool>& GetAsmap() const;\n+\n+    /** Test-only function\n+     * Find the address record in AddrMan and return information about its\n+     * position.\n+     * @param[in] addr       The address record to look up.\n+     * @return               Information about the address record in AddrMan\n+     *                       nullptr if address is not found\n+     */\n+    std::optional<AddressPosition> FindAddressEntry(const CAddress& addr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774557150",
      "id" : 774557150,
      "line" : 176,
      "node_id" : "PRRC_kwDOABII584uKs3e",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 176,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : 42,
      "pull_request_review_id" : 839325958,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774557150/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-23T13:04:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774557150",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774665581"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774665581"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done as suggested.",
      "commit_id" : "ce8196d01a1aea177790f1b2fb1b0d830d097d9a",
      "created_at" : "2021-12-23T16:13:24Z",
      "diff_hunk" : "@@ -930,6 +930,31 @@ std::pair<CAddress, int64_t> AddrManImpl::SelectTriedCollision_()\n     return {info_old, info_old.nLastTry};\n }\n \n+std::optional<AddressPosition> AddrManImpl::FindAddressEntry_(const CAddress& addr)\n+{\n+    AssertLockHeld(cs);\n+\n+    int nId;\n+    AddrInfo* addr_info_temp = Find(addr, &nId);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774665581",
      "id" : 774665581,
      "in_reply_to_id" : 773278363,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584uLHVt",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 938,
      "original_position" : 9,
      "original_start_line" : 937,
      "path" : "src/addrman.cpp",
      "position" : null,
      "pull_request_review_id" : 839474920,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774665581/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-23T16:13:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774665581",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774666783"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774666783"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "took the first suggestoin",
      "commit_id" : "ce8196d01a1aea177790f1b2fb1b0d830d097d9a",
      "created_at" : "2021-12-23T16:15:37Z",
      "diff_hunk" : "@@ -930,6 +930,31 @@ std::pair<CAddress, int64_t> AddrManImpl::SelectTriedCollision_()\n     return {info_old, info_old.nLastTry};\n }\n \n+std::optional<AddressPosition> AddrManImpl::FindAddressEntry_(const CAddress& addr)\n+{\n+    AssertLockHeld(cs);\n+\n+    int nId;\n+    AddrInfo* addr_info_temp = Find(addr, &nId);\n+\n+    if (!addr_info_temp) { return std::nullopt; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774666783",
      "id" : 774666783,
      "in_reply_to_id" : 773279660,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584uLHof",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 940,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/addrman.cpp",
      "position" : null,
      "pull_request_review_id" : 839476542,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774666783/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-23T16:15:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774666783",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774667058"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774667058"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, that makes sense! Done as suggested.",
      "commit_id" : "ce8196d01a1aea177790f1b2fb1b0d830d097d9a",
      "created_at" : "2021-12-23T16:16:11Z",
      "diff_hunk" : "@@ -22,6 +22,29 @@ class AddrManImpl;\n /** Default for -checkaddrman */\n static constexpr int32_t DEFAULT_ADDRMAN_CONSISTENCY_CHECKS{0};\n \n+/** Test-only struct, capturing info about an address in AddrMan */\n+struct AddressPosition {\n+    // Whether the address is in the new or tried table\n+    bool tried{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774667058",
      "id" : 774667058,
      "in_reply_to_id" : 773298505,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584uLHsy",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 28,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : null,
      "pull_request_review_id" : 839476932,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774667058/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-23T16:16:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774667058",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774667202"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774667202"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "removed",
      "commit_id" : "ce8196d01a1aea177790f1b2fb1b0d830d097d9a",
      "created_at" : "2021-12-23T16:16:28Z",
      "diff_hunk" : "@@ -828,114 +722,126 @@ BOOST_AUTO_TEST_CASE(addrman_selecttriedcollision)\n         CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n \n         // Unable to add duplicate address to tried table.\n-        BOOST_CHECK(!addrman.Good(addr));\n+        BOOST_CHECK(!addrman->Good(addr));\n \n         // Verify duplicate address not marked as a collision.\n-        BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() == \"[::]:0\");\n+        BOOST_CHECK(addrman->SelectTriedCollision().first.ToString() == \"[::]:0\");\n     }\n }\n \n BOOST_AUTO_TEST_CASE(addrman_noevict)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     // Add 35 addresses.\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 36; i++) {\n         CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // No collision yet.\n-        BOOST_CHECK(addrman.Good(addr));\n+        BOOST_CHECK(addrman->Good(addr));\n     }\n \n     // Collision in tried table between 36 and 19.\n     CService addr36 = ResolveService(\"250.1.1.36\");\n-    BOOST_CHECK(addrman.Add({CAddress(addr36, NODE_NONE)}, source));\n-    BOOST_CHECK(!addrman.Good(addr36));\n-    BOOST_CHECK_EQUAL(addrman.SelectTriedCollision().first.ToString(), \"250.1.1.19:0\");\n+    BOOST_CHECK(addrman->Add({CAddress(addr36, NODE_NONE)}, source));\n+    BOOST_CHECK(!addrman->Good(addr36));\n+    BOOST_CHECK_EQUAL(addrman->SelectTriedCollision().first.ToString(), \"250.1.1.19:0\");\n \n     // 36 should be discarded and 19 not evicted.\n     // This means we keep 19 in the tried table and\n     // 36 stays in the new table.\n-    addrman.ResolveCollisions();\n-    BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() == \"[::]:0\");\n+    addrman->ResolveCollisions();\n+    BOOST_CHECK(addrman->SelectTriedCollision().first.ToString() == \"[::]:0\");\n \n     // Lets create two collisions.\n     for (unsigned int i = 37; i < 59; i++) {\n         CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n-        BOOST_CHECK(addrman.Good(addr));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Good(addr));\n     }\n \n     // Cause a collision in the tried table.\n     CService addr59 = ResolveService(\"250.1.1.59\");\n-    BOOST_CHECK(addrman.Add({CAddress(addr59, NODE_NONE)}, source));\n-    BOOST_CHECK(!addrman.Good(addr59));\n+    BOOST_CHECK(addrman->Add({CAddress(addr59, NODE_NONE)}, source));\n+    BOOST_CHECK(!addrman->Good(addr59));\n \n-    BOOST_CHECK_EQUAL(addrman.SelectTriedCollision().first.ToString(), \"250.1.1.10:0\");\n+    BOOST_CHECK_EQUAL(addrman->SelectTriedCollision().first.ToString(), \"250.1.1.10:0\");\n \n     // Cause a second collision in the new table.\n-    BOOST_CHECK(!addrman.Add({CAddress(addr36, NODE_NONE)}, source));\n+    BOOST_CHECK(!addrman->Add({CAddress(addr36, NODE_NONE)}, source));\n \n     // 36 still cannot be moved from new to tried due to colliding with 19\n-    BOOST_CHECK(!addrman.Good(addr36));\n-    BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() != \"[::]:0\");\n+    BOOST_CHECK(!addrman->Good(addr36));\n+    BOOST_CHECK(addrman->SelectTriedCollision().first.ToString() != \"[::]:0\");\n \n     // Resolve all collisions.\n-    addrman.ResolveCollisions();\n-    BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() == \"[::]:0\");\n+    addrman->ResolveCollisions();\n+    BOOST_CHECK(addrman->SelectTriedCollision().first.ToString() == \"[::]:0\");\n }\n \n BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n-    BOOST_CHECK(addrman.size() == 0);\n+    BOOST_CHECK(addrman->size() == 0);\n \n     // Empty addrman should return blank addrman info.\n-    BOOST_CHECK(addrman.SelectTriedCollision().first.ToString() == \"[::]:0\");\n+    BOOST_CHECK(addrman->SelectTriedCollision().first.ToString() == \"[::]:0\");\n \n     // Add 35 addresses\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n     for (unsigned int i = 1; i < 36; i++) {\n         CService addr = ResolveService(\"250.1.1.\" + ToString(i));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // No collision yet.\n-        BOOST_CHECK(addrman.Good(addr));\n+        BOOST_CHECK(addrman->Good(addr));\n     }\n \n     // Collision between 36 and 19.\n     CService addr = ResolveService(\"250.1.1.36\");\n-    BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n-    BOOST_CHECK(!addrman.Good(addr));\n+    BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n+    BOOST_CHECK(!addrman->Good(addr));\n \n-    auto info = addrman.SelectTriedCollision().first;\n+    auto info = addrman->SelectTriedCollision().first;\n     BOOST_CHECK_EQUAL(info.ToString(), \"250.1.1.19:0\");\n \n     // Ensure test of address fails, so that it is evicted.\n-    addrman.SimConnFail(info);\n+    int64_t nLastSuccess = 1;\n+    // Set last good connection in the deep past.\n+    addrman->Good(info, nLastSuccess);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774667202",
      "id" : 774667202,
      "in_reply_to_id" : 773351849,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584uLHvC",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 814,
      "original_position" : 702,
      "original_start_line" : 812,
      "path" : "src/test/addrman_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 839477152,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774667202/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-23T16:16:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774667202",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774670533"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774670533"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It needs to be significantly larger than 8 because adding another entry is stochastic and decreases exponentially with existing RefCount (see [code here](https://github.com/bitcoin/bitcoin/blob/7551ae81e1a9d5bf14b434bce7528ac000d8afe1/src/addrman.cpp#L579-L585)). I chose the value such that a multiplicity of 8 is reached with the deterministic addrman and not too many additional tries are wasted.",
      "commit_id" : "ce8196d01a1aea177790f1b2fb1b0d830d097d9a",
      "created_at" : "2021-12-23T16:23:06Z",
      "diff_hunk" : "@@ -151,119 +98,149 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n \n BOOST_AUTO_TEST_CASE(addrman_ports)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 0U);\n \n     // Test 7; Addr with same IP but diff port does not replace existing addr.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1_port, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n-    auto addr_ret2 = addrman.Select().first;\n+    BOOST_CHECK(addrman->Add({CAddress(addr1_port, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n+    auto addr_ret2 = addrman->Select().first;\n     BOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8333\" || addr_ret2.ToString() == \"250.1.1.1:8334\");\n \n     // Test: Add same IP but diff port to tried table; this converts the entry with\n     // the specified port to tried, but not the other.\n-    addrman.Good(CAddress(addr1_port, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n+    addrman->Good(CAddress(addr1_port, NODE_NONE));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n     bool newOnly = true;\n-    auto addr_ret3 = addrman.Select(newOnly).first;\n+    auto addr_ret3 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n }\n \n \n BOOST_AUTO_TEST_CASE(addrman_select)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     // Test: Select from new with 1 addr in new.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     bool newOnly = true;\n-    auto addr_ret1 = addrman.Select(newOnly).first;\n+    auto addr_ret1 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret1.ToString(), \"250.1.1.1:8333\");\n \n     // Test: move addr to tried, select from new expected nothing returned.\n-    BOOST_CHECK(addrman.Good(CAddress(addr1, NODE_NONE)));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n-    auto addr_ret2 = addrman.Select(newOnly).first;\n+    BOOST_CHECK(addrman->Good(CAddress(addr1, NODE_NONE)));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+    auto addr_ret2 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret2.ToString(), \"[::]:0\");\n \n-    auto addr_ret3 = addrman.Select().first;\n+    auto addr_ret3 = addrman->Select().first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n \n     // Add three addresses to new table.\n     CService addr2 = ResolveService(\"250.3.1.1\", 8333);\n     CService addr3 = ResolveService(\"250.3.2.2\", 9999);\n     CService addr4 = ResolveService(\"250.3.3.3\", 9999);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n \n     // Add three addresses to tried table.\n     CService addr5 = ResolveService(\"250.4.4.4\", 8333);\n     CService addr6 = ResolveService(\"250.4.5.5\", 7777);\n     CService addr7 = ResolveService(\"250.4.6.6\", 8333);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr5, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr6, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr7, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr5, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr6, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr7, NODE_NONE)));\n \n     // Test: 6 addrs + 1 addr from last test = 7.\n-    BOOST_CHECK_EQUAL(addrman.size(), 7U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 7U);\n \n     // Test: Select pulls from new and tried regardless of port number.\n     std::set<uint16_t> ports;\n     for (int i = 0; i < 20; ++i) {\n-        ports.insert(addrman.Select().first.GetPort());\n+        ports.insert(addrman->Select().first.GetPort());\n     }\n     BOOST_CHECK_EQUAL(ports.size(), 3U);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     uint32_t num_addrs{0};\n \n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n \n     while (num_addrs < 22) { // Magic number! 250.1.1.1 - 250.1.1.22 do not collide with deterministic key = 1\n         CService addr = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // Test: No collision in new table yet.\n-        BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+        BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n     }\n \n     // Test: new table collision!\n     CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     uint32_t collisions{1};\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n \n     CService addr2 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_new_multiplicity)\n+{\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    CAddress addr{CAddress(ResolveService(\"253.3.3.3\", 8333), NODE_NONE)};\n+    int64_t start_time{GetAdjustedTime()};\n+    addr.nTime = start_time;\n+\n+    // test that multiplicity stays at 1 if nTime doesn't increase\n+    for (unsigned int i = 1; i < 20; ++i) {\n+        std::string addr_ip{ToString(i % 256) + \".\" + ToString(i >> 8 % 256) + \".1.1\"};\n+        CNetAddr source{ResolveIP(addr_ip)};\n+        addrman->Add({addr}, source);\n+    }\n+    AddressPosition addr_pos = addrman->FindAddressEntry(addr).value();\n+    BOOST_CHECK_EQUAL(addr_pos.multiplicity, 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+\n+    // if nTime increases, an addr can occur in up to 8 buckets\n+    for (unsigned int i = 1; i < 400; ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774670533",
      "id" : 774670533,
      "in_reply_to_id" : 773359789,
      "line" : 239,
      "node_id" : "PRRC_kwDOABII584uLIjF",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 239,
      "original_position" : 253,
      "original_start_line" : null,
      "path" : "src/test/addrman_tests.cpp",
      "position" : 263,
      "pull_request_review_id" : 839481716,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774670533/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-23T16:23:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774670533",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774671330"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774671330"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "removed the reference",
      "commit_id" : "ce8196d01a1aea177790f1b2fb1b0d830d097d9a",
      "created_at" : "2021-12-23T16:24:42Z",
      "diff_hunk" : "@@ -930,6 +930,31 @@ std::pair<CAddress, int64_t> AddrManImpl::SelectTriedCollision_()\n     return {info_old, info_old.nLastTry};\n }\n \n+std::optional<AddressPosition> AddrManImpl::FindAddressEntry_(const CAddress& addr)\n+{\n+    AssertLockHeld(cs);\n+\n+    int nId;\n+    AddrInfo* addr_info_temp = Find(addr, &nId);\n+\n+    if (!addr_info_temp) { return std::nullopt; }\n+    const AddrInfo& addr_info = *addr_info_temp;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774671330",
      "id" : 774671330,
      "in_reply_to_id" : 773300313,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584uLIvi",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 941,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/addrman.cpp",
      "position" : null,
      "pull_request_review_id" : 839482860,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774671330/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-23T16:24:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774671330",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774673099"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774673099"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done as suggested. These calls are also changed in #23373 but I think that these changes are compatible, i.e. `TestAddrman()` should call the `GetCheckRatio()` function introduced there.",
      "commit_id" : "ce8196d01a1aea177790f1b2fb1b0d830d097d9a",
      "created_at" : "2021-12-23T16:27:56Z",
      "diff_hunk" : "@@ -107,7 +54,7 @@ BOOST_FIXTURE_TEST_SUITE(addrman_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(addrman_simple)\n {\n-    auto addrman = std::make_unique<AddrManTest>();\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774673099",
      "id" : 774673099,
      "in_reply_to_id" : 773348729,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584uLJLL",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 57,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/test/addrman_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 839485229,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774673099/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-23T16:27:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774673099",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774676351"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774676351"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "thanks, I am following that PR and will update in case it gets merged.",
      "commit_id" : "ce8196d01a1aea177790f1b2fb1b0d830d097d9a",
      "created_at" : "2021-12-23T16:34:15Z",
      "diff_hunk" : "@@ -1044,5 +950,35 @@ BOOST_AUTO_TEST_CASE(load_addrman_corrupted)\n     BOOST_CHECK_THROW(ReadFromStream(addrman2, ssPeers2), std::ios_base::failure);\n }\n \n+BOOST_AUTO_TEST_CASE(addrman_update_address)\n+{\n+    // Tests updating nTime via Connected() and nServices via SetServices()\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    CNetAddr source{ResolveIP(\"252.2.2.2\")};\n+    CAddress addr{CAddress(ResolveService(\"250.1.1.1\", 8333), NODE_NONE)};\n+\n+    int64_t startTime{GetAdjustedTime() - 10000};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774676351",
      "id" : 774676351,
      "in_reply_to_id" : 773355331,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584uLJ9_",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 960,
      "original_position" : 756,
      "original_start_line" : null,
      "path" : "src/test/addrman_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 839489724,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774676351/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-23T16:34:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774676351",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774686746"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774686746"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I wanted to avoid reaching into the AddrMan internals in the unit tests as it is done currently. Also, I think that this function can be of use in the fuzz tests as well, which also still directly access internals in some spots.\r\nOne alternative possibility I thought about was adding `FindAddressEntry()` only to `addrman_impl.h` instead of `addrman.h` and keep on working with derived classes in the test accessing it that way. If people would prefer, I could switch to that.\r\nNote that a very limited set of test-only functions in the public interface also exist in comparable places such as `txrequest.h`",
      "commit_id" : "ce8196d01a1aea177790f1b2fb1b0d830d097d9a",
      "created_at" : "2021-12-23T16:56:11Z",
      "diff_hunk" : "@@ -142,6 +165,15 @@ class AddrMan\n     void SetServices(const CService& addr, ServiceFlags nServices);\n \n     const std::vector<bool>& GetAsmap() const;\n+\n+    /** Test-only function\n+     * Find the address record in AddrMan and return information about its\n+     * position.\n+     * @param[in] addr       The address record to look up.\n+     * @return               Information about the address record in AddrMan\n+     *                       nullptr if address is not found\n+     */\n+    std::optional<AddressPosition> FindAddressEntry(const CAddress& addr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r774686746",
      "id" : 774686746,
      "in_reply_to_id" : 774557150,
      "line" : 178,
      "node_id" : "PRRC_kwDOABII584uLMga",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 178,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/addrman.h",
      "position" : 44,
      "pull_request_review_id" : 839503537,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774686746/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-23T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/774686746",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for the reviews! \r\n@jnewbery I believe I have addressed all your points in my push.",
      "created_at" : "2021-12-23T16:57:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-1000424438",
      "id" : 1000424438,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23826",
      "node_id" : "IC_kwDOABII5847oUP2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1000424438/reactions"
      },
      "updated_at" : "2021-12-23T16:57:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1000424438",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775550847"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775550847"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/23826/commits/02f5a618dc418da2d6e4af141774dc24a1c6a65d: nit (doesn't change the test behavior): I'd recommend checking the output from `addrman->Good()` whenever it is called.\r\n\r\n1) it is consistent with how `Good()` is called in the rest of the tests\r\n2) it improves the readability (are you expecting a true or false from `Good()`)\r\n\r\n```suggestion\r\n    BOOST_CHECK(!addrman.Good(info, /*nTime=*/1));\r\n```\r\n\r\nfor example, while first reviewing this change I expected an output of `true` from `Good()`, but after adding `BOOST_CHECK` realized `Good()` was actually returning `false` because `info` is already in the tried set",
      "commit_id" : "5ecdaaf4d024d09fbcaa24add0de7baaa4c425de",
      "created_at" : "2021-12-27T15:40:52Z",
      "diff_hunk" : "@@ -897,7 +885,9 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n     BOOST_CHECK_EQUAL(info.ToString(), \"250.1.1.19:0\");\n \n     // Ensure test of address fails, so that it is evicted.\n-    addrman.SimConnFail(info);\n+    // Set last good connection in the deep past.\n+    addrman.Good(info, /*nTime=*/1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775550847",
      "id" : 775550847,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584uOfd_",
      "original_commit_id" : "02f5a618dc418da2d6e4af141774dc24a1c6a65d",
      "original_line" : 889,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/test/addrman_tests.cpp",
      "position" : 25,
      "pull_request_review_id" : 840439160,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775550847/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-27T15:50:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775550847",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775552049"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775552049"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/23826/commits/f5ea63b01bb43b375333ec49790d35b40894f467: same nit regarding `Good()`\r\n\r\n```suggestion\r\n    BOOST_CHECK(addrman->Good(CAddress(addr1, NODE_NONE)));\r\n    BOOST_CHECK(addrman->Good(CAddress(addr2, NODE_NONE)));\r\n```",
      "commit_id" : "5ecdaaf4d024d09fbcaa24add0de7baaa4c425de",
      "created_at" : "2021-12-27T15:44:31Z",
      "diff_hunk" : "@@ -366,18 +366,18 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     CNetAddr source2 = ResolveIP(\"250.2.3.3\");\n \n     // Test: Ensure GetAddr works with new addresses.\n-    BOOST_CHECK(addrman.Add({addr1, addr3, addr5}, source1));\n-    BOOST_CHECK(addrman.Add({addr2, addr4}, source2));\n+    BOOST_CHECK(addrman->Add({addr1, addr3, addr5}, source1));\n+    BOOST_CHECK(addrman->Add({addr2, addr4}, source2));\n \n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/*max_addresses=*/0, /*max_pct=*/0, /*network=*/std::nullopt).size(), 5U);\n+    BOOST_CHECK_EQUAL(addrman->GetAddr(/*max_addresses=*/0, /*max_pct=*/0, /*network=*/std::nullopt).size(), 5U);\n     // Net processing asks for 23% of addresses. 23% of 5 is 1 rounded down.\n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/*max_addresses=*/2500, /*max_pct=*/23, /*network=*/std::nullopt).size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman->GetAddr(/*max_addresses=*/2500, /*max_pct=*/23, /*network=*/std::nullopt).size(), 1U);\n \n     // Test: Ensure GetAddr works with new and tried addresses.\n-    addrman.Good(CAddress(addr1, NODE_NONE));\n-    addrman.Good(CAddress(addr2, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/*max_addresses=*/0, /*max_pct=*/0, /*network=*/std::nullopt).size(), 5U);\n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/*max_addresses=*/2500, /*max_pct=*/23, /*network=*/std::nullopt).size(), 1U);\n+    addrman->Good(CAddress(addr1, NODE_NONE));\n+    addrman->Good(CAddress(addr2, NODE_NONE));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775552049",
      "id" : 775552049,
      "line" : 315,
      "node_id" : "PRRC_kwDOABII584uOfwx",
      "original_commit_id" : "f5ea63b01bb43b375333ec49790d35b40894f467",
      "original_line" : 378,
      "original_position" : 213,
      "original_start_line" : 377,
      "path" : "src/test/addrman_tests.cpp",
      "position" : 213,
      "pull_request_review_id" : 840439160,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775552049/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 314,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-27T15:50:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775552049",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775880634"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775880634"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This was marked as resolved, but still says `nullptr`.",
      "commit_id" : "5ecdaaf4d024d09fbcaa24add0de7baaa4c425de",
      "created_at" : "2021-12-28T12:18:23Z",
      "diff_hunk" : "@@ -142,6 +165,15 @@ class AddrMan\n     void SetServices(const CService& addr, ServiceFlags nServices);\n \n     const std::vector<bool>& GetAsmap() const;\n+\n+    /** Test-only function\n+     * Find the address record in AddrMan and return information about its\n+     * position.\n+     * @param[in] addr       The address record to look up.\n+     * @return               Information about the address record in AddrMan\n+     *                       nullptr if address is not found",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775880634",
      "id" : 775880634,
      "in_reply_to_id" : 773278921,
      "line" : 176,
      "node_id" : "PRRC_kwDOABII584uPv-6",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 176,
      "original_position" : 40,
      "original_start_line" : 173,
      "path" : "src/addrman.h",
      "position" : 42,
      "pull_request_review_id" : 840849967,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775880634/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 175,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-28T12:18:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775880634",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775880807"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775880807"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Looks good. Thanks!",
      "commit_id" : "5ecdaaf4d024d09fbcaa24add0de7baaa4c425de",
      "created_at" : "2021-12-28T12:18:51Z",
      "diff_hunk" : "@@ -107,7 +54,7 @@ BOOST_FIXTURE_TEST_SUITE(addrman_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(addrman_simple)\n {\n-    auto addrman = std::make_unique<AddrManTest>();\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775880807",
      "id" : 775880807,
      "in_reply_to_id" : 773348729,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584uPwBn",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 57,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/test/addrman_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 840850211,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775880807/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-28T12:18:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775880807",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775881573"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775881573"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Makes sense. If you retouch this branch, then you could add that as a code comment (magic values without any explanation always make me wonder if I'm missing some rationale).",
      "commit_id" : "5ecdaaf4d024d09fbcaa24add0de7baaa4c425de",
      "created_at" : "2021-12-28T12:20:36Z",
      "diff_hunk" : "@@ -151,119 +98,149 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n \n BOOST_AUTO_TEST_CASE(addrman_ports)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 0U);\n \n     // Test 7; Addr with same IP but diff port does not replace existing addr.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1_port, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n-    auto addr_ret2 = addrman.Select().first;\n+    BOOST_CHECK(addrman->Add({CAddress(addr1_port, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n+    auto addr_ret2 = addrman->Select().first;\n     BOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8333\" || addr_ret2.ToString() == \"250.1.1.1:8334\");\n \n     // Test: Add same IP but diff port to tried table; this converts the entry with\n     // the specified port to tried, but not the other.\n-    addrman.Good(CAddress(addr1_port, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n+    addrman->Good(CAddress(addr1_port, NODE_NONE));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n     bool newOnly = true;\n-    auto addr_ret3 = addrman.Select(newOnly).first;\n+    auto addr_ret3 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n }\n \n \n BOOST_AUTO_TEST_CASE(addrman_select)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     // Test: Select from new with 1 addr in new.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     bool newOnly = true;\n-    auto addr_ret1 = addrman.Select(newOnly).first;\n+    auto addr_ret1 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret1.ToString(), \"250.1.1.1:8333\");\n \n     // Test: move addr to tried, select from new expected nothing returned.\n-    BOOST_CHECK(addrman.Good(CAddress(addr1, NODE_NONE)));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n-    auto addr_ret2 = addrman.Select(newOnly).first;\n+    BOOST_CHECK(addrman->Good(CAddress(addr1, NODE_NONE)));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+    auto addr_ret2 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret2.ToString(), \"[::]:0\");\n \n-    auto addr_ret3 = addrman.Select().first;\n+    auto addr_ret3 = addrman->Select().first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n \n     // Add three addresses to new table.\n     CService addr2 = ResolveService(\"250.3.1.1\", 8333);\n     CService addr3 = ResolveService(\"250.3.2.2\", 9999);\n     CService addr4 = ResolveService(\"250.3.3.3\", 9999);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n \n     // Add three addresses to tried table.\n     CService addr5 = ResolveService(\"250.4.4.4\", 8333);\n     CService addr6 = ResolveService(\"250.4.5.5\", 7777);\n     CService addr7 = ResolveService(\"250.4.6.6\", 8333);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr5, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr6, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr7, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr5, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr6, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr7, NODE_NONE)));\n \n     // Test: 6 addrs + 1 addr from last test = 7.\n-    BOOST_CHECK_EQUAL(addrman.size(), 7U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 7U);\n \n     // Test: Select pulls from new and tried regardless of port number.\n     std::set<uint16_t> ports;\n     for (int i = 0; i < 20; ++i) {\n-        ports.insert(addrman.Select().first.GetPort());\n+        ports.insert(addrman->Select().first.GetPort());\n     }\n     BOOST_CHECK_EQUAL(ports.size(), 3U);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     uint32_t num_addrs{0};\n \n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n \n     while (num_addrs < 22) { // Magic number! 250.1.1.1 - 250.1.1.22 do not collide with deterministic key = 1\n         CService addr = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // Test: No collision in new table yet.\n-        BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+        BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n     }\n \n     // Test: new table collision!\n     CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     uint32_t collisions{1};\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n \n     CService addr2 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_new_multiplicity)\n+{\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    CAddress addr{CAddress(ResolveService(\"253.3.3.3\", 8333), NODE_NONE)};\n+    int64_t start_time{GetAdjustedTime()};\n+    addr.nTime = start_time;\n+\n+    // test that multiplicity stays at 1 if nTime doesn't increase\n+    for (unsigned int i = 1; i < 20; ++i) {\n+        std::string addr_ip{ToString(i % 256) + \".\" + ToString(i >> 8 % 256) + \".1.1\"};\n+        CNetAddr source{ResolveIP(addr_ip)};\n+        addrman->Add({addr}, source);\n+    }\n+    AddressPosition addr_pos = addrman->FindAddressEntry(addr).value();\n+    BOOST_CHECK_EQUAL(addr_pos.multiplicity, 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+\n+    // if nTime increases, an addr can occur in up to 8 buckets\n+    for (unsigned int i = 1; i < 400; ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775881573",
      "id" : 775881573,
      "in_reply_to_id" : 773359789,
      "line" : 239,
      "node_id" : "PRRC_kwDOABII584uPwNl",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 239,
      "original_position" : 253,
      "original_start_line" : null,
      "path" : "src/test/addrman_tests.cpp",
      "position" : 263,
      "pull_request_review_id" : 840851106,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775881573/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-28T12:20:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/775881573",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 5ecdaaf4d024d09fbcaa24add0de7baaa4c425de\r\n\r\nI'd be happy to rereview if you wanted to address the three remaining review comments:\r\n\r\n- doxygen comment for `FindAddressEntry()` incorrectly refers to `nullptr` instead of `nullopt` (https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775880634)\r\n- magic value `400` can be commented (https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775881573)\r\n- return value of `Good()` can be checked (https://github.com/bitcoin/bitcoin/pull/23826#discussion_r775550847)",
      "created_at" : "2021-12-28T12:22:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-1002070614",
      "id" : 1002070614,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23826",
      "node_id" : "IC_kwDOABII5847umJW",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1002070614/reactions"
      },
      "updated_at" : "2021-12-28T12:22:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1002070614",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r776070706"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776070706"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "sorry - that was an oversight. Changed now.",
      "commit_id" : "26046a12473ad0e342ec200b82184bc1336cf6f3",
      "created_at" : "2021-12-28T20:58:32Z",
      "diff_hunk" : "@@ -142,6 +165,15 @@ class AddrMan\n     void SetServices(const CService& addr, ServiceFlags nServices);\n \n     const std::vector<bool>& GetAsmap() const;\n+\n+    /** Test-only function\n+     * Find the address record in AddrMan and return information about its\n+     * position.\n+     * @param[in] addr       The address record to look up.\n+     * @return               Information about the address record in AddrMan\n+     *                       nullptr if address is not found",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r776070706",
      "id" : 776070706,
      "in_reply_to_id" : 773278921,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584uQeYy",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 176,
      "original_position" : 40,
      "original_start_line" : 173,
      "path" : "src/addrman.h",
      "position" : null,
      "pull_request_review_id" : 841094554,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776070706/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-28T20:58:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776070706",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r776070757"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776070757"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "26046a12473ad0e342ec200b82184bc1336cf6f3",
      "created_at" : "2021-12-28T20:58:43Z",
      "diff_hunk" : "@@ -151,119 +98,149 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n \n BOOST_AUTO_TEST_CASE(addrman_ports)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 0U);\n \n     // Test 7; Addr with same IP but diff port does not replace existing addr.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1_port, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n-    auto addr_ret2 = addrman.Select().first;\n+    BOOST_CHECK(addrman->Add({CAddress(addr1_port, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n+    auto addr_ret2 = addrman->Select().first;\n     BOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8333\" || addr_ret2.ToString() == \"250.1.1.1:8334\");\n \n     // Test: Add same IP but diff port to tried table; this converts the entry with\n     // the specified port to tried, but not the other.\n-    addrman.Good(CAddress(addr1_port, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n+    addrman->Good(CAddress(addr1_port, NODE_NONE));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n     bool newOnly = true;\n-    auto addr_ret3 = addrman.Select(newOnly).first;\n+    auto addr_ret3 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n }\n \n \n BOOST_AUTO_TEST_CASE(addrman_select)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     // Test: Select from new with 1 addr in new.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     bool newOnly = true;\n-    auto addr_ret1 = addrman.Select(newOnly).first;\n+    auto addr_ret1 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret1.ToString(), \"250.1.1.1:8333\");\n \n     // Test: move addr to tried, select from new expected nothing returned.\n-    BOOST_CHECK(addrman.Good(CAddress(addr1, NODE_NONE)));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n-    auto addr_ret2 = addrman.Select(newOnly).first;\n+    BOOST_CHECK(addrman->Good(CAddress(addr1, NODE_NONE)));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+    auto addr_ret2 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret2.ToString(), \"[::]:0\");\n \n-    auto addr_ret3 = addrman.Select().first;\n+    auto addr_ret3 = addrman->Select().first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n \n     // Add three addresses to new table.\n     CService addr2 = ResolveService(\"250.3.1.1\", 8333);\n     CService addr3 = ResolveService(\"250.3.2.2\", 9999);\n     CService addr4 = ResolveService(\"250.3.3.3\", 9999);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n \n     // Add three addresses to tried table.\n     CService addr5 = ResolveService(\"250.4.4.4\", 8333);\n     CService addr6 = ResolveService(\"250.4.5.5\", 7777);\n     CService addr7 = ResolveService(\"250.4.6.6\", 8333);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr5, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr6, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr7, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr5, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr6, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr7, NODE_NONE)));\n \n     // Test: 6 addrs + 1 addr from last test = 7.\n-    BOOST_CHECK_EQUAL(addrman.size(), 7U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 7U);\n \n     // Test: Select pulls from new and tried regardless of port number.\n     std::set<uint16_t> ports;\n     for (int i = 0; i < 20; ++i) {\n-        ports.insert(addrman.Select().first.GetPort());\n+        ports.insert(addrman->Select().first.GetPort());\n     }\n     BOOST_CHECK_EQUAL(ports.size(), 3U);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n {\n-    AddrManTest addrman;\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     uint32_t num_addrs{0};\n \n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n \n     while (num_addrs < 22) { // Magic number! 250.1.1.1 - 250.1.1.22 do not collide with deterministic key = 1\n         CService addr = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // Test: No collision in new table yet.\n-        BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+        BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n     }\n \n     // Test: new table collision!\n     CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     uint32_t collisions{1};\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n \n     CService addr2 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_new_multiplicity)\n+{\n+    auto addrman = std::make_unique<AddrMan>(std::vector<bool>(), /*deterministic=*/true, /*consistency_check_ratio=*/100);\n+    CAddress addr{CAddress(ResolveService(\"253.3.3.3\", 8333), NODE_NONE)};\n+    int64_t start_time{GetAdjustedTime()};\n+    addr.nTime = start_time;\n+\n+    // test that multiplicity stays at 1 if nTime doesn't increase\n+    for (unsigned int i = 1; i < 20; ++i) {\n+        std::string addr_ip{ToString(i % 256) + \".\" + ToString(i >> 8 % 256) + \".1.1\"};\n+        CNetAddr source{ResolveIP(addr_ip)};\n+        addrman->Add({addr}, source);\n+    }\n+    AddressPosition addr_pos = addrman->FindAddressEntry(addr).value();\n+    BOOST_CHECK_EQUAL(addr_pos.multiplicity, 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+\n+    // if nTime increases, an addr can occur in up to 8 buckets\n+    for (unsigned int i = 1; i < 400; ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r776070757",
      "id" : 776070757,
      "in_reply_to_id" : 773359789,
      "line" : 241,
      "node_id" : "PRRC_kwDOABII584uQeZl",
      "original_commit_id" : "250479a28716fda6db661b83375c23f97d2bc6b4",
      "original_line" : 241,
      "original_position" : 253,
      "original_start_line" : null,
      "path" : "src/test/addrman_tests.cpp",
      "position" : 265,
      "pull_request_review_id" : 841094616,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776070757/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-28T20:58:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776070757",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r776070936"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776070936"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done, and I also changed the comment a bit to reflect that.",
      "commit_id" : "26046a12473ad0e342ec200b82184bc1336cf6f3",
      "created_at" : "2021-12-28T20:59:18Z",
      "diff_hunk" : "@@ -897,7 +885,9 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n     BOOST_CHECK_EQUAL(info.ToString(), \"250.1.1.19:0\");\n \n     // Ensure test of address fails, so that it is evicted.\n-    addrman.SimConnFail(info);\n+    // Set last good connection in the deep past.\n+    addrman.Good(info, /*nTime=*/1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r776070936",
      "id" : 776070936,
      "in_reply_to_id" : 775550847,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584uQecY",
      "original_commit_id" : "02f5a618dc418da2d6e4af141774dc24a1c6a65d",
      "original_line" : 889,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/test/addrman_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 841094818,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776070936/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-28T20:59:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776070936",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r776070968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776070968"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "26046a12473ad0e342ec200b82184bc1336cf6f3",
      "created_at" : "2021-12-28T20:59:27Z",
      "diff_hunk" : "@@ -366,18 +366,18 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     CNetAddr source2 = ResolveIP(\"250.2.3.3\");\n \n     // Test: Ensure GetAddr works with new addresses.\n-    BOOST_CHECK(addrman.Add({addr1, addr3, addr5}, source1));\n-    BOOST_CHECK(addrman.Add({addr2, addr4}, source2));\n+    BOOST_CHECK(addrman->Add({addr1, addr3, addr5}, source1));\n+    BOOST_CHECK(addrman->Add({addr2, addr4}, source2));\n \n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/*max_addresses=*/0, /*max_pct=*/0, /*network=*/std::nullopt).size(), 5U);\n+    BOOST_CHECK_EQUAL(addrman->GetAddr(/*max_addresses=*/0, /*max_pct=*/0, /*network=*/std::nullopt).size(), 5U);\n     // Net processing asks for 23% of addresses. 23% of 5 is 1 rounded down.\n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/*max_addresses=*/2500, /*max_pct=*/23, /*network=*/std::nullopt).size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman->GetAddr(/*max_addresses=*/2500, /*max_pct=*/23, /*network=*/std::nullopt).size(), 1U);\n \n     // Test: Ensure GetAddr works with new and tried addresses.\n-    addrman.Good(CAddress(addr1, NODE_NONE));\n-    addrman.Good(CAddress(addr2, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/*max_addresses=*/0, /*max_pct=*/0, /*network=*/std::nullopt).size(), 5U);\n-    BOOST_CHECK_EQUAL(addrman.GetAddr(/*max_addresses=*/2500, /*max_pct=*/23, /*network=*/std::nullopt).size(), 1U);\n+    addrman->Good(CAddress(addr1, NODE_NONE));\n+    addrman->Good(CAddress(addr2, NODE_NONE));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r776070968",
      "id" : 776070968,
      "in_reply_to_id" : 775552049,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584uQec4",
      "original_commit_id" : "f5ea63b01bb43b375333ec49790d35b40894f467",
      "original_line" : 378,
      "original_position" : 213,
      "original_start_line" : 377,
      "path" : "src/test/addrman_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 841094872,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776070968/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-28T20:59:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776070968",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I pushed an update that addresses the outstanding comments.",
      "created_at" : "2021-12-28T21:00:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-1002279886",
      "id" : 1002279886,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23826",
      "node_id" : "IC_kwDOABII5847vZPO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1002279886/reactions"
      },
      "updated_at" : "2021-12-28T21:00:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1002279886",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "reACK https://github.com/bitcoin/bitcoin/pull/23826/commits/26046a12473ad0e342ec200b82184bc1336cf6f3\r\n\r\nverified updates with `git range-diff  5ecdaaf...26046a1`",
      "created_at" : "2021-12-29T12:38:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-1002574899",
      "id" : 1002574899,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23826",
      "node_id" : "IC_kwDOABII5847whQz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1002574899/reactions"
      },
      "updated_at" : "2021-12-29T12:38:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1002574899",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r776308946"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776308946"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    // The acceptance probability decreases exponentially with existing multiplicity -\r\n```",
      "commit_id" : "26046a12473ad0e342ec200b82184bc1336cf6f3",
      "created_at" : "2021-12-29T12:46:52Z",
      "diff_hunk" : "@@ -151,124 +103,156 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n \n BOOST_AUTO_TEST_CASE(addrman_ports)\n {\n-    AddrManTest addrman;\n+    auto addrman = TestAddrMan();\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 0U);\n \n     // Test 7; Addr with same IP but diff port does not replace existing addr.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1_port, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n-    auto addr_ret2 = addrman.Select().first;\n+    BOOST_CHECK(addrman->Add({CAddress(addr1_port, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n+    auto addr_ret2 = addrman->Select().first;\n     BOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8333\" || addr_ret2.ToString() == \"250.1.1.1:8334\");\n \n     // Test: Add same IP but diff port to tried table; this converts the entry with\n     // the specified port to tried, but not the other.\n-    addrman.Good(CAddress(addr1_port, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n+    addrman->Good(CAddress(addr1_port, NODE_NONE));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n     bool newOnly = true;\n-    auto addr_ret3 = addrman.Select(newOnly).first;\n+    auto addr_ret3 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n }\n \n \n BOOST_AUTO_TEST_CASE(addrman_select)\n {\n-    AddrManTest addrman;\n+    auto addrman = TestAddrMan();\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     // Test: Select from new with 1 addr in new.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     bool newOnly = true;\n-    auto addr_ret1 = addrman.Select(newOnly).first;\n+    auto addr_ret1 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret1.ToString(), \"250.1.1.1:8333\");\n \n     // Test: move addr to tried, select from new expected nothing returned.\n-    BOOST_CHECK(addrman.Good(CAddress(addr1, NODE_NONE)));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n-    auto addr_ret2 = addrman.Select(newOnly).first;\n+    BOOST_CHECK(addrman->Good(CAddress(addr1, NODE_NONE)));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+    auto addr_ret2 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret2.ToString(), \"[::]:0\");\n \n-    auto addr_ret3 = addrman.Select().first;\n+    auto addr_ret3 = addrman->Select().first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n \n     // Add three addresses to new table.\n     CService addr2 = ResolveService(\"250.3.1.1\", 8333);\n     CService addr3 = ResolveService(\"250.3.2.2\", 9999);\n     CService addr4 = ResolveService(\"250.3.3.3\", 9999);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n \n     // Add three addresses to tried table.\n     CService addr5 = ResolveService(\"250.4.4.4\", 8333);\n     CService addr6 = ResolveService(\"250.4.5.5\", 7777);\n     CService addr7 = ResolveService(\"250.4.6.6\", 8333);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr5, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr6, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr7, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr5, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr6, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr7, NODE_NONE)));\n \n     // Test: 6 addrs + 1 addr from last test = 7.\n-    BOOST_CHECK_EQUAL(addrman.size(), 7U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 7U);\n \n     // Test: Select pulls from new and tried regardless of port number.\n     std::set<uint16_t> ports;\n     for (int i = 0; i < 20; ++i) {\n-        ports.insert(addrman.Select().first.GetPort());\n+        ports.insert(addrman->Select().first.GetPort());\n     }\n     BOOST_CHECK_EQUAL(ports.size(), 3U);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n {\n-    AddrManTest addrman;\n+    auto addrman = TestAddrMan();\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     uint32_t num_addrs{0};\n \n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n \n     while (num_addrs < 22) { // Magic number! 250.1.1.1 - 250.1.1.22 do not collide with deterministic key = 1\n         CService addr = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // Test: No collision in new table yet.\n-        BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+        BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n     }\n \n     // Test: new table collision!\n     CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     uint32_t collisions{1};\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n \n     CService addr2 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_new_multiplicity)\n+{\n+    auto addrman = TestAddrMan();\n+    CAddress addr{CAddress(ResolveService(\"253.3.3.3\", 8333), NODE_NONE)};\n+    int64_t start_time{GetAdjustedTime()};\n+    addr.nTime = start_time;\n+\n+    // test that multiplicity stays at 1 if nTime doesn't increase\n+    for (unsigned int i = 1; i < 20; ++i) {\n+        std::string addr_ip{ToString(i % 256) + \".\" + ToString(i >> 8 % 256) + \".1.1\"};\n+        CNetAddr source{ResolveIP(addr_ip)};\n+        addrman->Add({addr}, source);\n+    }\n+    AddressPosition addr_pos = addrman->FindAddressEntry(addr).value();\n+    BOOST_CHECK_EQUAL(addr_pos.multiplicity, 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+\n+    // if nTime increases, an addr can occur in up to 8 buckets\n+    // The acceptance probability decreases exponentially with existing multiplicit -",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r776308946",
      "id" : 776308946,
      "line" : 239,
      "node_id" : "PRRC_kwDOABII584uRYjS",
      "original_commit_id" : "26046a12473ad0e342ec200b82184bc1336cf6f3",
      "original_line" : 239,
      "original_position" : 263,
      "original_start_line" : null,
      "path" : "src/test/addrman_tests.cpp",
      "position" : 263,
      "pull_request_review_id" : 841383105,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776308946/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-29T12:46:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/776308946",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r777712573"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777712573"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed.",
      "commit_id" : "ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "created_at" : "2022-01-03T21:27:25Z",
      "diff_hunk" : "@@ -151,124 +103,156 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n \n BOOST_AUTO_TEST_CASE(addrman_ports)\n {\n-    AddrManTest addrman;\n+    auto addrman = TestAddrMan();\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 0U);\n \n     // Test 7; Addr with same IP but diff port does not replace existing addr.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1_port, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n-    auto addr_ret2 = addrman.Select().first;\n+    BOOST_CHECK(addrman->Add({CAddress(addr1_port, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n+    auto addr_ret2 = addrman->Select().first;\n     BOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8333\" || addr_ret2.ToString() == \"250.1.1.1:8334\");\n \n     // Test: Add same IP but diff port to tried table; this converts the entry with\n     // the specified port to tried, but not the other.\n-    addrman.Good(CAddress(addr1_port, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.size(), 2U);\n+    addrman->Good(CAddress(addr1_port, NODE_NONE));\n+    BOOST_CHECK_EQUAL(addrman->size(), 2U);\n     bool newOnly = true;\n-    auto addr_ret3 = addrman.Select(newOnly).first;\n+    auto addr_ret3 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n }\n \n \n BOOST_AUTO_TEST_CASE(addrman_select)\n {\n-    AddrManTest addrman;\n+    auto addrman = TestAddrMan();\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     // Test: Select from new with 1 addr in new.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n     bool newOnly = true;\n-    auto addr_ret1 = addrman.Select(newOnly).first;\n+    auto addr_ret1 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret1.ToString(), \"250.1.1.1:8333\");\n \n     // Test: move addr to tried, select from new expected nothing returned.\n-    BOOST_CHECK(addrman.Good(CAddress(addr1, NODE_NONE)));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n-    auto addr_ret2 = addrman.Select(newOnly).first;\n+    BOOST_CHECK(addrman->Good(CAddress(addr1, NODE_NONE)));\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+    auto addr_ret2 = addrman->Select(newOnly).first;\n     BOOST_CHECK_EQUAL(addr_ret2.ToString(), \"[::]:0\");\n \n-    auto addr_ret3 = addrman.Select().first;\n+    auto addr_ret3 = addrman->Select().first;\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n \n \n     // Add three addresses to new table.\n     CService addr2 = ResolveService(\"250.3.1.1\", 8333);\n     CService addr3 = ResolveService(\"250.3.2.2\", 9999);\n     CService addr4 = ResolveService(\"250.3.3.3\", 9999);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr3, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr4, NODE_NONE)}, ResolveService(\"250.4.1.1\", 8333)));\n \n     // Add three addresses to tried table.\n     CService addr5 = ResolveService(\"250.4.4.4\", 8333);\n     CService addr6 = ResolveService(\"250.4.5.5\", 7777);\n     CService addr7 = ResolveService(\"250.4.6.6\", 8333);\n \n-    BOOST_CHECK(addrman.Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr5, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr6, NODE_NONE)));\n-    BOOST_CHECK(addrman.Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n-    BOOST_CHECK(addrman.Good(CAddress(addr7, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr5, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr5, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr6, NODE_NONE)}, ResolveService(\"250.3.1.1\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr6, NODE_NONE)));\n+    BOOST_CHECK(addrman->Add({CAddress(addr7, NODE_NONE)}, ResolveService(\"250.1.1.3\", 8333)));\n+    BOOST_CHECK(addrman->Good(CAddress(addr7, NODE_NONE)));\n \n     // Test: 6 addrs + 1 addr from last test = 7.\n-    BOOST_CHECK_EQUAL(addrman.size(), 7U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 7U);\n \n     // Test: Select pulls from new and tried regardless of port number.\n     std::set<uint16_t> ports;\n     for (int i = 0; i < 20; ++i) {\n-        ports.insert(addrman.Select().first.GetPort());\n+        ports.insert(addrman->Select().first.GetPort());\n     }\n     BOOST_CHECK_EQUAL(ports.size(), 3U);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n {\n-    AddrManTest addrman;\n+    auto addrman = TestAddrMan();\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     uint32_t num_addrs{0};\n \n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n \n     while (num_addrs < 22) { // Magic number! 250.1.1.1 - 250.1.1.22 do not collide with deterministic key = 1\n         CService addr = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-        BOOST_CHECK(addrman.Add({CAddress(addr, NODE_NONE)}, source));\n+        BOOST_CHECK(addrman->Add({CAddress(addr, NODE_NONE)}, source));\n \n         // Test: No collision in new table yet.\n-        BOOST_CHECK_EQUAL(addrman.size(), num_addrs);\n+        BOOST_CHECK_EQUAL(addrman->size(), num_addrs);\n     }\n \n     // Test: new table collision!\n     CService addr1 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n     uint32_t collisions{1};\n-    BOOST_CHECK(addrman.Add({CAddress(addr1, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr1, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n \n     CService addr2 = ResolveService(\"250.1.1.\" + ToString(++num_addrs));\n-    BOOST_CHECK(addrman.Add({CAddress(addr2, NODE_NONE)}, source));\n-    BOOST_CHECK_EQUAL(addrman.size(), num_addrs - collisions);\n+    BOOST_CHECK(addrman->Add({CAddress(addr2, NODE_NONE)}, source));\n+    BOOST_CHECK_EQUAL(addrman->size(), num_addrs - collisions);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_new_multiplicity)\n+{\n+    auto addrman = TestAddrMan();\n+    CAddress addr{CAddress(ResolveService(\"253.3.3.3\", 8333), NODE_NONE)};\n+    int64_t start_time{GetAdjustedTime()};\n+    addr.nTime = start_time;\n+\n+    // test that multiplicity stays at 1 if nTime doesn't increase\n+    for (unsigned int i = 1; i < 20; ++i) {\n+        std::string addr_ip{ToString(i % 256) + \".\" + ToString(i >> 8 % 256) + \".1.1\"};\n+        CNetAddr source{ResolveIP(addr_ip)};\n+        addrman->Add({addr}, source);\n+    }\n+    AddressPosition addr_pos = addrman->FindAddressEntry(addr).value();\n+    BOOST_CHECK_EQUAL(addr_pos.multiplicity, 1U);\n+    BOOST_CHECK_EQUAL(addrman->size(), 1U);\n+\n+    // if nTime increases, an addr can occur in up to 8 buckets\n+    // The acceptance probability decreases exponentially with existing multiplicit -",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#discussion_r777712573",
      "id" : 777712573,
      "in_reply_to_id" : 776308946,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584uWvO9",
      "original_commit_id" : "26046a12473ad0e342ec200b82184bc1336cf6f3",
      "original_line" : 239,
      "original_position" : 263,
      "original_start_line" : null,
      "path" : "src/test/addrman_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 843053128,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23826",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777712573/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-03T21:27:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777712573",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Made another push, fixing a typo. Btw, this conflicts with #23373, which has been open a while longer but seems close - happy to rebase if that gets merged first.",
      "created_at" : "2022-01-03T21:36:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-1004375859",
      "id" : 1004375859,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23826",
      "node_id" : "IC_kwDOABII58473Y8z",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1004375859/reactions"
      },
      "updated_at" : "2022-01-03T21:36:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1004375859",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866",
      "created_at" : "2022-01-04T10:30:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-1004693788",
      "id" : 1004693788,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23826",
      "node_id" : "IC_kwDOABII58474mkc",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1004693788/reactions"
      },
      "updated_at" : "2022-01-04T10:30:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1004693788",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "reACK https://github.com/bitcoin/bitcoin/pull/23826/commits/ea4c9fd4ab9aaa2e8f2c2e38a75c9f05d0bfc866\r\n\r\nverified with git range-diff",
      "created_at" : "2022-01-04T10:44:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23826#issuecomment-1004702574",
      "id" : 1004702574,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23826",
      "node_id" : "IC_kwDOABII58474otu",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1004702574/reactions"
      },
      "updated_at" : "2022-01-04T10:44:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1004702574",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   }
]
