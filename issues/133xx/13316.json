{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "NONE",
   "body" : "<!-- This issue tracker is only for technical issues related to Bitcoin Core.\r\n\r\nGeneral bitcoin questions and/or support requests are best directed to the Bitcoin StackExchange at https://bitcoin.stackexchange.com.\r\n\r\nFor reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\r\n\r\nIf the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\r\n\r\n<!-- Describe the issue -->\r\n\r\nRunning command âmake checkâ fails if configure option â--with-incompatible-bdbâ is set for Berkeley DB 5.3. It works fine with Berkeley DB 4.8 and without --with-incompatible-bdb option.\r\n\r\n<!--- What behavior did you expect? -->\r\n\r\nI expect that all tests will be passed during âmake checkâ command.\r\n\r\n<!--- What was the actual behavior (provide screenshots if the issue is GUI-related)? -->\r\n\r\nBut I received\r\n\r\n```\r\nEntering test suite \"Bitcoin Test Suite\"\r\nEntering test suite \"accounting_tests\"\r\nEntering test case \"acc_orderupgrade\"\r\nunknown location(0): fatal error in \"acc_orderupgrade\": memory access violation at address: 0x00000001: no mapping at fault address\r\nTest is aborted\r\nLeaving test case \"acc_orderupgrade\"; testing time: 12963mks\r\nLeaving test suite \"accounting_tests\"\r\nLeaving test suite \"Bitcoin Test Suite\"\r\nterminate called after throwing an instance of '\r\nboost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error> >'\r\n*** 1 failure detected in test suite \"Bitcoin Test Suite\"\r\n  what():  boost: mutex lock failed in pthread_mutex_lock: Invalid argument\r\nMakefile:10248: recipe for target 'wallet/test/accounting_tests.cpp.test' failed\r\n```\r\n\r\n<!--- How reliably can you reproduce the issue, what are the steps to do so? -->\r\n\r\nStep to reproduce:\r\n```\r\n./autogen.sh\r\n./configure --with-incompatible-bdb --with-miniupnpc --enable-upnp-default --without-gui\r\nmake\r\nmake check\r\n```\r\nor just run\r\n\r\n```\r\n./src/tests\r\n```\r\n\r\n<!-- What version of Bitcoin Core are you using, where did you get it (website, self-compiled, etc)? -->\r\n\r\nI am using master branch, the HEAD is\r\n\r\n```\r\n$ git show HEAD\r\ncommit 6378eef18f618620e7226765339fd4c9c1349174 (HEAD -> master, origin/master, origin/HEAD)\r\nMerge: 5c41b6008 80b4910f7\r\nAuthor: Wladimir J. van der Laan <laanwj@gmail.com>\r\nDate:   Thu May 24 11:29:07 2018 +0200\r\n\r\n    Merge #13063: Use shared pointer to retain wallet instance\r\n```\r\n\r\n<!-- What type of machine are you observing the error on (OS/CPU and disk type)? -->\r\n\r\nMachine configuration is\r\n\r\n```\r\n$ lsb_release -a\r\nNo LSB modules are available.\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 16.04.4 LTS\r\nRelease:\t16.04\r\nCodename:\txenial\r\n\r\n```\r\n\r\n<!-- Any extra information that might be useful in the debugging process. -->\r\n<!--- This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred. -->\r\n\r\nGDB session is\r\n```\r\nThread 1 \"test_bitcoin\" received signal SIGSEGV, Segmentation fault.\r\nstrlen () at ../sysdeps/x86_64/strlen.S:106\r\n106\t../sysdeps/x86_64/strlen.S: No such file or directory.\r\n(gdb) bt\r\n#0  strlen () at ../sysdeps/x86_64/strlen.S:106\r\n#1  0x00007ffff69c0612 in __os_strdup () from /usr/lib/libdb_cxx-4.8.so\r\n#2  0x00007ffff6992be4 in __env_add_data_dir () from /usr/lib/libdb_cxx-4.8.so\r\n#3  0x00007ffff6992cb1 in __env_set_data_dir () from /usr/lib/libdb_cxx-4.8.so\r\n#4  0x00007ffff68ad62e in DbEnv::set_data_dir(char const*) () from /usr/lib/libdb_cxx-4.8.so\r\n#5  0x000055555585f25d in BerkeleyEnvironment::MakeMock (this=0x555557cf6c10) at wallet/db.cpp:210\r\n#6  0x00005555555cc732 in BerkeleyDatabase::BerkeleyDatabase (mock=true, wallet_path=..., this=0x555557928fa0) at ./wallet/db.h:112\r\n#7  MakeUnique<BerkeleyDatabase, char const (&) [1], bool>(char const (&) [1], bool&&) () at ./util.h:328\r\n#8  0x00005555555c7010 in BerkeleyDatabase::CreateMock () at ./wallet/db.h:131\r\n#9  WalletTestingSetup::WalletTestingSetup (this=0x7fffffffc640, chainName=...) at wallet/test/wallet_test_fixture.cpp:11\r\n#10 0x0000555555838fce in accounting_tests::acc_orderupgrade::acc_orderupgrade (this=0x7fffffffc640) at wallet/test/accounting_tests.cpp:29\r\n#11 accounting_tests::acc_orderupgrade_invoker () at wallet/test/accounting_tests.cpp:29\r\n#12 0x00005555555ed877 in boost::unit_test::ut_detail::invoker<boost::unit_test::ut_detail::unused>::invoke<void (*)()> (this=<optimized out>, f=<optimized out>)\r\n    at /usr/include/boost/test/utils/callback.hpp:56\r\n#13 boost::unit_test::ut_detail::callback0_impl_t<boost::unit_test::ut_detail::unused, void (*)()>::invoke (this=<optimized out>) at /usr/include/boost/test/utils/callback.hpp:89\r\n#14 0x00007ffff70cecb1 in ?? () from /usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.58.0\r\n#15 0x00007ffff70ae996 in boost::execution_monitor::catch_signals(boost::unit_test::callback0<int> const&) () from /usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.58.0\r\n#16 0x00007ffff70af1b3 in boost::execution_monitor::execute(boost::unit_test::callback0<int> const&) () from /usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.58.0\r\n#17 0x00007ffff70cede2 in boost::unit_test::unit_test_monitor_t::execute_and_translate(boost::unit_test::test_case const&) () from /usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.58.0\r\n#18 0x00007ffff70b609e in boost::unit_test::framework_impl::visit(boost::unit_test::test_case const&) () from /usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.58.0\r\n#19 0x00007ffff70ec4cb in boost::unit_test::traverse_test_tree(boost::unit_test::test_suite const&, boost::unit_test::test_tree_visitor&) ()\r\n   from /usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.58.0\r\n#20 0x00007ffff70ec4cb in boost::unit_test::traverse_test_tree(boost::unit_test::test_suite const&, boost::unit_test::test_tree_visitor&) ()\r\n   from /usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.58.0\r\n#21 0x00007ffff70b19f6 in boost::unit_test::framework::run(unsigned long, bool) () from /usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.58.0\r\n#22 0x00007ffff70cd287 in boost::unit_test::unit_test_main(bool (*)(), int, char**) () from /usr/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.58.0\r\n#23 0x00007ffff53be830 in __libc_start_main (main=0x555555593900 <main(int, char**)>, argc=1, argv=0x7fffffffdc58, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, \r\n    stack_end=0x7fffffffdc48) at ../csu/libc-start.c:291\r\n#24 0x00005555555b8fd9 in _start ()\r\n(gdb) frame 5\r\n#5  0x000055555585f25d in BerkeleyEnvironment::MakeMock (this=0x555557cf6c10) at wallet/db.cpp:210\r\n210\t    dbenv->set_cachesize(1, 0, 1);\r\n(gdb) l\r\n205\t\r\n206\t    boost::this_thread::interruption_point();\r\n207\t\r\n208\t    LogPrint(BCLog::DB, \"BerkeleyEnvironment::MakeMock\\n\");\r\n209\t\r\n210\t    dbenv->set_cachesize(1, 0, 1);\r\n211\t    dbenv->set_lg_bsize(10485760 * 4);\r\n212\t    dbenv->set_lg_max(10485760);\r\n213\t    dbenv->set_lk_max_locks(10000);\r\n214\t    dbenv->set_lk_max_objects(10000);\r\n(gdb) p dbenv\r\n$1 = {\r\n  _M_t = {<std::_Tuple_impl<0ul, DbEnv*, std::default_delete<DbEnv> >> = {<std::_Tuple_impl<1ul, std::default_delete<DbEnv> >> = {<std::_Head_base<1ul, std::default_delete<DbEnv>, true>> = {<std::default_delete<DbEnv>> = {<No data fields>}, <No data fields>}, <No data fields>}, <std::_Head_base<0ul, DbEnv*, false>> = {_M_head_impl = 0x555556fd8130}, <No data fields>}, <No data fields>}}\r\n\r\n```",
   "closed_at" : "2018-05-25T09:23:47Z",
   "closed_by" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/22752318?v=4",
      "events_url" : "https://api.github.com/users/mustitz/events{/privacy}",
      "followers_url" : "https://api.github.com/users/mustitz/followers",
      "following_url" : "https://api.github.com/users/mustitz/following{/other_user}",
      "gists_url" : "https://api.github.com/users/mustitz/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/mustitz",
      "id" : 22752318,
      "login" : "mustitz",
      "node_id" : "MDQ6VXNlcjIyNzUyMzE4",
      "organizations_url" : "https://api.github.com/users/mustitz/orgs",
      "received_events_url" : "https://api.github.com/users/mustitz/received_events",
      "repos_url" : "https://api.github.com/users/mustitz/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/mustitz/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/mustitz/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/mustitz"
   },
   "comments" : 3,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13316/comments",
   "created_at" : "2018-05-24T17:07:43Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13316/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/13316",
   "id" : 326212104,
   "labels" : [
      {
         "color" : "006688",
         "default" : false,
         "id" : 477890092,
         "name" : "Questions and Help",
         "node_id" : "MDU6TGFiZWw0Nzc4OTAwOTI=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Questions%20and%20Help"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13316/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWUzMjYyMTIxMDQ=",
   "number" : 13316,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "make check fails for configure option --with-incompatible-bdb and Berkeley DB 5.3",
   "updated_at" : "2018-05-25T09:23:47Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13316",
   "user" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/22752318?v=4",
      "events_url" : "https://api.github.com/users/mustitz/events{/privacy}",
      "followers_url" : "https://api.github.com/users/mustitz/followers",
      "following_url" : "https://api.github.com/users/mustitz/following{/other_user}",
      "gists_url" : "https://api.github.com/users/mustitz/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/mustitz",
      "id" : 22752318,
      "login" : "mustitz",
      "node_id" : "MDQ6VXNlcjIyNzUyMzE4",
      "organizations_url" : "https://api.github.com/users/mustitz/orgs",
      "received_events_url" : "https://api.github.com/users/mustitz/received_events",
      "repos_url" : "https://api.github.com/users/mustitz/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/mustitz/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/mustitz/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/mustitz"
   }
}
