[
   {
      "author_association" : "MEMBER",
      "body" : "I'm reopening this because I think it's worth some long-term consideration. We're not going to get many opportunities to improve block connection by ~12%, so I think this is worth continuing to look at. Now that bitcoin is on c++17, I wonder if there aren't some good ways to slim down @martinus's implementation, since it contains a number of provisions to deal with <c++17 platforms. At the very least we could work on fuzz testing this to our satisfaction.\r\n\r\nI've rerun some benchmarks on an idle workstation and have confirmed that I continue to see ~13% speedups along with reduction in memory use, which is especially pronounced when using a large dbcache.\r\n\r\n## Issues to consider\r\n\r\n- From the README: \"For a really bad hash the performance will not only degrade like in std::unordered_map, the map will simply fail with an std::overflow_error. In practice, when using the standard robin_hood::hash, I have never seen this happening.\"\r\n  - https://github.com/martinus/robin-hood-hashing/issues/117\r\n  - Possible that we can amend this behavior, or at least convince ourselves this is appropriately unlikely given our use of siphash?\r\n\r\n## Benchmarks\r\n\r\n### dbcache=10000\r\n\r\n![ibd local range 500000 540000](https://user-images.githubusercontent.com/73197/128412521-5c1951e2-85cf-44ec-9d01-bab8cad849b3.png)\r\n\r\n#### commands index\r\n|          bench name           |                                                                                                     command                                                                                                      |\r\n|-------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| ibd.local.range.500000.540000 | `bitcoind -dbcache=10000 -debug=coindb -debug=bench -listen=0 -connect=0 -addnode=127.0.0.1:8888 -prune=9999999 -printtoconsole=0 -assumevalid=000000000000000000176c192f42ad13ab159fdb20198b87e7ba3c001e47b876` |\r\n\r\n\r\n#### jamesob/2019-08-robinhood vs. $mergebase (absolute)\r\n|                  bench name                   |  x  | jamesob/2019-08-robinhood  |         $mergebase         |\r\n|-----------------------------------------------|----:|----------------------------|----------------------------|\r\n| ibd.local.range.500000.540000.total_secs      |   3 | 2812.5091 (Â± 27.2604)      | 3190.3358 (Â± 17.5632)      |\r\n| ibd.local.range.500000.540000.peak_rss_KiB    |   3 | 5517118.6667 (Â± 1750.8682) | 6344530.6667 (Â± 3478.0996) |\r\n| ibd.local.range.500000.540000.cpu_kernel_secs |   3 | 260.3867 (Â± 2.5737)        | 263.0400 (Â± 2.1568)        |\r\n| ibd.local.range.500000.540000.cpu_user_secs   |   3 | 12714.3000 (Â± 7.6987)      | 13223.2667 (Â± 8.7341)      |\r\n\r\n\r\n#### jamesob/2019-08-robinhood vs. $mergebase (relative)\r\n|                  bench name                   |  x  | jamesob/2019-08-robinhood | $mergebase |\r\n|-----------------------------------------------|----:|--------------------------:|-----------:|\r\n| ibd.local.range.500000.540000.total_secs      |   3 |                         1 |      1.134 |\r\n| ibd.local.range.500000.540000.peak_rss_KiB    |   3 |                         1 |      1.150 |\r\n| ibd.local.range.500000.540000.cpu_kernel_secs |   3 |                         1 |      1.010 |\r\n| ibd.local.range.500000.540000.cpu_user_secs   |   3 |                         1 |      1.040 |\r\n\r\n\r\n### dbcache=300\r\n\r\n![ibd local range 500000 535000](https://user-images.githubusercontent.com/73197/128412672-e4958f30-8cc4-410b-bdfd-9d98ff024c69.png)\r\n\r\n#### commands index\r\n|          bench name           |                                                                                                    command                                                                                                     |\r\n|-------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| ibd.local.range.500000.535000 | `bitcoind -dbcache=300 -debug=coindb -debug=bench -listen=0 -connect=0 -addnode=127.0.0.1:8888 -prune=9999999 -printtoconsole=0 -assumevalid=000000000000000000176c192f42ad13ab159fdb20198b87e7ba3c001e47b876` |\r\n\r\n\r\n#### 2019-08-robinhood vs. master (absolute)\r\n|                  bench name                   |  x  |      2019-08-robinhood       |           master            |\r\n|-----------------------------------------------|----:|------------------------------|-----------------------------|\r\n| ibd.local.range.500000.535000.total_secs      |   3 | 3592.5329 (Â± 202.2415)       | 4070.7353 (Â± 13.1181)       |\r\n| ibd.local.range.500000.535000.peak_rss_KiB    |   3 | 2049018.6667 (Â± 147027.9395) | 2110129.3333 (Â± 36744.0276) |\r\n| ibd.local.range.500000.535000.cpu_kernel_secs |   3 | 576.7433 (Â± 4.9359)          | 576.6567 (Â± 1.4616)         |\r\n| ibd.local.range.500000.535000.cpu_user_secs   |   3 | 10879.8767 (Â± 20.1319)       | 11260.5933 (Â± 8.3835)       |\r\n\r\n\r\n#### 2019-08-robinhood vs. master (relative)\r\n|                  bench name                   |  x  | 2019-08-robinhood | master |\r\n|-----------------------------------------------|----:|------------------:|-------:|\r\n| ibd.local.range.500000.535000.total_secs      |   3 |              1.00 |  1.133 |\r\n| ibd.local.range.500000.535000.peak_rss_KiB    |   3 |              1.00 |  1.030 |\r\n| ibd.local.range.500000.535000.cpu_kernel_secs |   3 |              1.00 |  1.000 |\r\n| ibd.local.range.500000.535000.cpu_user_secs   |   3 |              1.00 |  1.035 |",
      "created_at" : "2021-08-05T20:34:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22640#issuecomment-893777744",
      "id" : 893777744,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22640",
      "node_id" : "IC_kwDOABII5841RfdQ",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-05T20:34:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/893777744",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Cool. I plan on benchmarking this too (at least IBD speed) via the [`validation::connect_block`](https://github.com/bitcoin/bitcoin/blob/master/doc/tracing.md#tracepoint-validationblock_connected) USDT tracepoint.",
      "created_at" : "2021-08-05T20:50:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22640#issuecomment-893786145",
      "id" : 893786145,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22640",
      "node_id" : "IC_kwDOABII5841Rhgh",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-05T23:27:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/893786145",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "It's unfortunately really hard to fix https://github.com/martinus/robin-hood-hashing/issues/117 without losing at least some of the performance benefit. Also I don't really have the time to do it properly... So I'm personally quite a bit weary about using my `robin_hood` map for such a critical place. I mean I've been using it in for a long time in many countless installations and personally have never seen that problem, but other users of the map have definitely seen it. And it definitely is possible for an malicious actor to construct sequence of values that will cause the map to always fail. That's not possible for unordered_map, this would only degrades the performance.\r\n\r\nI think it would be good to try the same benchmarks also with #16801 and also with `tsl::sparse_map`.\r\n\r\n* #16801 introduces a relatively simple bulk pool allocator for `std::unordered_map`. I think most of the performance improvement from robin_hood comes due to the more efficient allocation, and that pool allocator would bring the same allocation behavior to `std::unordered_map`. The code can be updated with C++17 features which would make it less of a hack. Such a pool allocator could also be beneficial in other places in the code too, wherever node based containers are used.\r\n\r\n* Have a look at memory efficient hashmap implementation: `tsl::sparse_map` seems to be excellent, header only, and in my benchmarks while slower than `robin_hood` it is faster than `std::unordered_map` and more memory efficient than both. I think being able to keep more elements in memory should be a better trade off because it needs less flushes. https://github.com/Tessil/sparse-map",
      "created_at" : "2021-08-06T07:15:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22640#issuecomment-894056722",
      "id" : 894056722,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22640",
      "node_id" : "IC_kwDOABII5841SjkS",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-06T07:15:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894056722",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I have now rebased my branch https://github.com/martinus/bitcoin/tree/2019-08-bulkpoolallocator and done some rudimentary benchmarks: create the `CCoinsMap`, and 5 times insert 1 million entries and then clear it. I measured average time per insertion in ns/op and maximum resident set size in kbyte.\r\n\r\nI tried `std::unordered_map` and `std::map` with and without the `bulk_pool`, and also tried a very simple hash:\r\n\r\n```cpp\r\nstruct Xor {\r\n    size_t operator()(const COutPoint& id) const noexcept {\r\n        return static_cast<size_t>(id.hash.GetUint64(0) ^ id.hash.GetUint64(1) ^ id.hash.GetUint64(2) ^ id.hash.GetUint64(3));\r\n    }\r\n};\r\n```\r\n\r\nI tried a few different hash implementations that I thought would be interesting, https://github.com/greg7mdp/parallel-hashmap, my https://github.com/martinus/robin-hood-hashing and https://github.com/Tessil/sparse-map.\r\n\r\n   ns/op  | RSS kB   | map                             | Pool  |  Hash?\r\n---------:|---------:|---------------------------------|-------|---------------\r\n   62.51  |   311252 | robin_hood::unordered_flat_map  |       | Xor\r\n   99.93  |   311392 | robin_hood::unordered_flat_map  |       | SaltedOutpointHasher\r\n  106.71  |   135460 | std::unordered_map              | Yes   | Xor\r\n  130.00  |   126124 | robin_hood::unordered_node_map  |       | Xor\r\n  158.59  |   126124 | robin_hood::unordered_node_map  |       | SaltedOutpointHasher\r\n  175.24  |   149368 | std::unordered_map              |       | Xor\r\n  264.35  |   311212 | phmap::flat_hash_map            |       | Xor\r\n  317.85  |   135556 | std::unordered_map              | Yes   | SaltedOutpointHasher\r\n  402.43  |   149460 | std::unordered_map              |       | SaltedOutpointHasher\r\n  463.53  |   128336 | tsl::sparse_map                 |       | Xor\r\n  586.76  |   153776 | std::map                        |       |\r\n  545.62  |   112332 | tsl::sparse_map                 |       | SaltedOutpointHasher\r\n  515.25  |   154712 | phmap::node_hash_map            |       | SimpleHasher\r\n1,113.55  |   140448 | std::map                        | Yes   |\r\n\r\nWell, I actually didn't expect robin_hood map to be so good :) \r\n\r\nInterestingly though, at least in that benchmark, `std::unordered_map` with the bulk_pool and the simple hash performs really well, even faster than `robin_hood::unordered_node_map`. I didn't expect `tsl::sparse_map` and `phmap::node_hash_map` to be so slow. Maybe they fare better in a real world benchmark with lots of lookups.\r\n\r\nSo I think it would be worthwhile to properly benchmark the bulk_pool way and a faster hash. Not sure if such a strong hash like siphash is actually needed here.",
      "created_at" : "2021-08-06T20:37:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22640#issuecomment-894506145",
      "id" : 894506145,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22640",
      "node_id" : "IC_kwDOABII5841URSh",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-06T20:37:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894506145",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Once again, @martinus has convinced me that the relative performance benefits of swapping out the entire map implementation aren't worth the risks inherent in `robin_hood`'s more uncertain failure modes. Luckily, bitcoinperf benchmarks (https://github.com/bitcoin/bitcoin/pull/16801#issuecomment-895348607) indicate that work on the allocator may (as Martin suspected) yield most of the benefits of the change here with much less risk. \r\n\r\nI'm closing this PR (again) and I think we should focus effort on vetting the allocator in Martin's branch. ",
      "created_at" : "2021-08-09T16:10:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22640#issuecomment-895351590",
      "id" : 895351590,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22640",
      "node_id" : "IC_kwDOABII5841Xfsm",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-09T16:10:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895351590",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   }
]
