{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "@ryanofsky recently suggested that I should write an overview of how the various pull requests spread over different repositories relate to some bigger picture view.\r\n\r\nSee the [multisig tutorial](https://github.com/bitcoin/bitcoin/blob/master/doc/multisig-tutorial.md) for how things currently work.\r\n\r\nI typically have the following future multisig wallet in mind to guide my thinking:\r\n1. a computer running Bitcoin Core holding one master key (key 1)\r\n2. one or more hardware wallets with additional keys, via HWI (keys 2 ... n)\r\n3. taproot keypath using n-of-n MuSig2\r\n4. a fallback with fewer keys after some time elapsed\r\n5. a GUI wizard to set this up (simple Python command line tool until then)\r\n\r\nThe descriptors for this could be hand crafted, but it would be nice to have:\r\n6. Miniscript compiler that can generate this\r\n\r\n**What's Missing?**\r\n\r\n- [ ] Taproot support for external signers: #22558 (PSBT fields) and \r\n- [ ] Timelock support for descriptors: this will be added along with full [MiniScript](https://bitcoin.sipa.be/miniscript/) support in #24148 & #24149 (@darosior).\r\n- [ ] Ability to handle descriptors for which we have 1-of-N keys. Descriptor wallets currently expect the wallet to be either watch-only and have no keys, or to have all the keys. Ideally it should be possible to create a wallet _with_ a seed, but without any descriptors. The user would grab an xpub from it (#22341 ) to construct a multisig descriptor and then import that. PR's to move in the right direction: #23417 and #23544 (very draft) \r\n- [ ] MuSig2 setup and signing support, which requires:\r\n  - [ ] a BIP to specify new PSBT fields\r\n  - [ ] Bitcoin Core changes; no PR yet afaik, see #23326\r\n  - [ ] At least one other (hardware) wallet to support it\r\n      * I'll try to add it to [nthKey](https://github.com/Sjors/nthkey-ios/issues/74) as soon as libwally supports it, see https://github.com/ElementsProject/libwally-core/issues/300)\r\n      * I'm not aware of any hardware wallet working on this yet\r\n      * testing with two Bitcoin Core nodes is good start\r\n  - [ ] HWI changes: additional commands for:\r\n     - [ ] initial setup\r\n     - [ ] signing (although perhaps calling `signtx` multiple times with the right PSBT will \"just work\")\r\n     * doesn't have to be HWI of course, we would just add support new commands in the [external signer command interface](https://github.com/bitcoin/bitcoin/blob/master/doc/external-signer.md) \r\n- [ ] a simple Python setup wizard\r\n   * right now [Specter Desktop](https://github.com/cryptoadvance/specter-desktop) is by far the easiest way to setup a multisig wallet. But it's a huge dependency (including a bunch of NPM packages for their web interface). A simple Python script in contrib/ could call HWI to get a list of signers, ask what threshold to use, call `createwallet` to generate a blank wallet, fetch an xpub from it, and then call `importdescriptors`.\r\n   * Specter doesn't set the external_signer wallet flag, so I have a trivial PR to do that manually: #21928 \r\n- [ ] a GUI setup wizard: once we have an established work flow, we would implement that in the GUI\r\n\r\n**Misc**\r\n\r\n\r\n\r\nI have a PR that improves address display handling on the device: https://github.com/bitcoin/bitcoin/pull/24313\r\n\r\nEven better would be if we had a feature to ask the wallet for a signature to prove it has the private key (without passing that information to the outside world of course, see #24186). This requires BIP-322 support on our end (#24058), at least one hardware wallet to support it, and a new HWI `signmessage` command. Perhaps this can later be expanded to allow your device to prove that it (still) has the keys it needs as a co-signer.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 2,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24861/comments",
   "created_at" : "2022-04-15T11:17:53Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24861/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/24861",
   "id" : 1205500556,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24861/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "I_kwDOABII585H2nqM",
   "number" : 24861,
   "performed_via_github_app" : null,
   "reactions" : {
      "+1" : 1,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 1,
      "laugh" : 1,
      "rocket" : 0,
      "total_count" : 3,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24861/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24861/timeline",
   "title" : "Awesome multisig PR labyrinth guide",
   "updated_at" : "2022-04-15T11:44:33Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24861",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
      "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
      "followers_url" : "https://api.github.com/users/Sjors/followers",
      "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/Sjors",
      "id" : 10217,
      "login" : "Sjors",
      "node_id" : "MDQ6VXNlcjEwMjE3",
      "organizations_url" : "https://api.github.com/users/Sjors/orgs",
      "received_events_url" : "https://api.github.com/users/Sjors/received_events",
      "repos_url" : "https://api.github.com/users/Sjors/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/Sjors"
   }
}
