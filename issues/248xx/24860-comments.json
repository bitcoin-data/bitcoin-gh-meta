[
   {
      "author_association" : "MEMBER",
      "body" : "[Fuzzer failure](https://github.com/bitcoin/bitcoin/pull/24860/checks?check_run_id=6036314396):\r\n```bash\r\n4.0K\t/tmp/cirrus-ci-build/depends/sdk-sources/\r\n4.0K\t/tmp/cirrus-ci-build/releases/x86_64-pc-linux-gnu\r\n184 fuzz target(s) found: addition_overflow addr_info_deserialize address_deserialize_v1_notime address_deserialize_v1_withtime address_deserialize_v2 addrman addrman_deserialize addrman_serdeser asmap asmap_direct autofile banman base_encode_decode bech32 block block_deserialize block_file_info_deserialize block_filter_deserialize block_header block_header_and_short_txids_deserialize blockfilter blockheader_deserialize blocklocator_deserialize blockmerkleroot blocktransactions_deserialize blocktransactionsrequest_deserialize blockundo_deserialize bloom_filter bloomfilter_deserialize buffered_file chain checkqueue coins_deserialize coins_view coinselection connman crypto crypto_aes256 crypto_aes256cbc crypto_chacha20 crypto_chacha20_poly1305_aead crypto_common crypto_diff_fuzz_chacha20 crypto_hkdf_hmac_sha256_l32 crypto_poly1305 cuckoocache data_stream_addr_man decode_tx descriptor_parse diskblockindex_deserialize eval_script fee_rate fee_rate_deserialize fees flat_file_pos_deserialize flatfile float golomb_rice hex http_request i2p integer inv_deserialize key key_io key_origin_info_deserialize kitchen_sink load_external_block_file locale merkle_block_deserialize merkleblock message messageheader_deserialize miniscript_script miniscript_string minisketch muhash multiplication_overflow net net_permissions netaddr_deserialize netaddress netbase_dns_lookup node_eviction out_point_deserialize p2p_transport_serialization parse_hd_keypath parse_iso8601 parse_numbers parse_script parse_univalue partial_merkle_tree_deserialize partially_signed_transaction_deserialize policy_estimator policy_estimator_io pow prefilled_transaction_deserialize prevector primitives_transaction process_message process_message_addr process_message_addrv2 process_message_block process_message_blocktxn process_message_cfcheckpt process_message_cfheaders process_message_cfilter process_message_cmpctblock process_message_feefilter process_message_filteradd process_message_filterclear process_message_filterload process_message_getaddr process_message_getblocks process_message_getblocktxn process_message_getcfcheckpt process_message_getcfheaders process_message_getcfilters process_message_getdata process_message_getheaders process_message_headers process_message_inv process_message_mempool process_message_merkleblock process_message_notfound process_message_ping process_message_pong process_message_sendaddrv2 process_message_sendcmpct process_message_sendheaders process_message_tx process_message_verack process_message_version process_message_wtxidrelay process_messages protocol psbt psbt_input_deserialize psbt_output_deserialize pub_key_deserialize random rbf rolling_bloom_filter rpc script script_bitcoin_consensus script_descriptor_cache script_deserialize script_flags script_format script_interpreter script_ops script_sigcache script_sign scriptnum_ops secp256k1_ec_seckey_import_export_der secp256k1_ecdsa_signature_parse_der_lax service_deserialize signature_checker signet snapshotmetadata_deserialize socks5 span spanparsing str_printf string system timedata torcontrol transaction tx_in tx_in_deserialize tx_out tx_pool tx_pool_standard txoutcompressor_deserialize txrequest txundo_deserialize uint160_deserialize uint256_deserialize utxo_snapshot validation_load_mempool versionbits wallet_notifications\r\n184 of 184 detected fuzz target(s) selected: addition_overflow addr_info_deserialize address_deserialize_v1_notime address_deserialize_v1_withtime address_deserialize_v2 addrman addrman_deserialize addrman_serdeser asmap asmap_direct autofile banman base_encode_decode bech32 block block_deserialize block_file_info_deserialize block_filter_deserialize block_header block_header_and_short_txids_deserialize blockfilter blockheader_deserialize blocklocator_deserialize blockmerkleroot blocktransactions_deserialize blocktransactionsrequest_deserialize blockundo_deserialize bloom_filter bloomfilter_deserialize buffered_file chain checkqueue coins_deserialize coins_view coinselection connman crypto crypto_aes256 crypto_aes256cbc crypto_chacha20 crypto_chacha20_poly1305_aead crypto_common crypto_diff_fuzz_chacha20 crypto_hkdf_hmac_sha256_l32 crypto_poly1305 cuckoocache data_stream_addr_man decode_tx descriptor_parse diskblockindex_deserialize eval_script fee_rate fee_rate_deserialize fees flat_file_pos_deserialize flatfile float golomb_rice hex http_request i2p integer inv_deserialize key key_io key_origin_info_deserialize kitchen_sink load_external_block_file locale merkle_block_deserialize merkleblock message messageheader_deserialize miniscript_script miniscript_string minisketch muhash multiplication_overflow net net_permissions netaddr_deserialize netaddress netbase_dns_lookup node_eviction out_point_deserialize p2p_transport_serialization parse_hd_keypath parse_iso8601 parse_numbers parse_script parse_univalue partial_merkle_tree_deserialize partially_signed_transaction_deserialize policy_estimator policy_estimator_io pow prefilled_transaction_deserialize prevector primitives_transaction process_message process_message_addr process_message_addrv2 process_message_block process_message_blocktxn process_message_cfcheckpt process_message_cfheaders process_message_cfilter process_message_cmpctblock process_message_feefilter process_message_filteradd process_message_filterclear process_message_filterload process_message_getaddr process_message_getblocks process_message_getblocktxn process_message_getcfcheckpt process_message_getcfheaders process_message_getcfilters process_message_getdata process_message_getheaders process_message_headers process_message_inv process_message_mempool process_message_merkleblock process_message_notfound process_message_ping process_message_pong process_message_sendaddrv2 process_message_sendcmpct process_message_sendheaders process_message_tx process_message_verack process_message_version process_message_wtxidrelay process_messages protocol psbt psbt_input_deserialize psbt_output_deserialize pub_key_deserialize random rbf rolling_bloom_filter rpc script script_bitcoin_consensus script_descriptor_cache script_deserialize script_flags script_format script_interpreter script_ops script_sigcache script_sign scriptnum_ops secp256k1_ec_seckey_import_export_der secp256k1_ecdsa_signature_parse_der_lax service_deserialize signature_checker signet snapshotmetadata_deserialize socks5 span spanparsing str_printf string system timedata torcontrol transaction tx_in tx_in_deserialize tx_out tx_pool tx_pool_standard txoutcompressor_deserialize txrequest txundo_deserialize uint160_deserialize uint256_deserialize utxo_snapshot validation_load_mempool versionbits wallet_notifications\r\nFuzzing harnesses lacking a corpus: coinselection miniscript_script miniscript_string wallet_notifications\r\nPlease consider adding a fuzz corpus at https://github.com/bitcoin-core/qa-assets\r\nRun address_deserialize_v2 with args ['/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz', '-runs=1', '/tmp/cirrus-ci-build/ci/scratch/qa-assets/fuzz_seed_corpus/address_deserialize_v2']fuzz: key.cpp:392: void ECC_Start(): Assertion `secp256k1_context_sign == nullptr' failed.\r\n\r\nfuzz: key.cpp:392: void ECC_Start(): Assertion `secp256k1_context_sign == nullptr' failed.\r\n\r\nTarget \"/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz -runs=1 /tmp/cirrus-ci-build/ci/scratch/qa-assets/fuzz_seed_corpus/address_deserialize_v2\" failed with exit code -6\r\n```",
      "created_at" : "2022-04-15T09:41:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#issuecomment-1100001490",
      "id" : 1100001490,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24860",
      "node_id" : "IC_kwDOABII585BkLDS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1100001490/reactions"
      },
      "updated_at" : "2022-04-15T09:41:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1100001490",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Did some very light code review, it looks sane. I didn't look at the fuzz changes.\r\n\r\nDisallowing duplicate keys seems reasonable; I would not at all be surprised if people generate miniscript by hand or even from Sipa's website, and then paste whatever keys they need into the result. E.g. if you just need a timelock fallback, which you can't do with current descriptors, you probably won't go through the trouble of finding and installing a compiler, figuring out how to put xpub's into it, etc.\r\n\r\nNit: can you make b9a36d3c6ce77c98e5a6e76d0ed223c410f323d2 a scripted diff?",
      "created_at" : "2022-04-15T10:29:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#issuecomment-1100026324",
      "id" : 1100026324,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24860",
      "node_id" : "IC_kwDOABII585BkRHU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1100026324/reactions"
      },
      "updated_at" : "2022-04-15T10:30:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1100026324",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the notification about the fuzzer failure, i fixed it. See also discussion about it in https://github.com/sipa/miniscript/pull/106.\r\n\r\nRegarding the scripted diff, sure. I'll push it soon.",
      "created_at" : "2022-04-15T10:46:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#issuecomment-1100034014",
      "id" : 1100034014,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24860",
      "node_id" : "IC_kwDOABII585BkS_e",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1100034014/reactions"
      },
      "updated_at" : "2022-04-15T10:46:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1100034014",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r851520527"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851520527"
         }
      },
      "author_association" : "NONE",
      "body" : "\r\nI'm not a fan of typedef, but I think that one typedef, in this case, can make the return type cleaner from a reader's viewpoint?\r\n\r\n```suggestion\r\n// FIXME: move this declaration in some better place!\r\ntypedef std::pair<opcodetype, std::vector<unsigned char>> OPCode\r\n\r\nstd::optional<std::vector<OPCode>> DecomposeScript(const CScript& script)\r\n```",
      "commit_id" : "e9828f26352b8af017025d7b3ab3610f05c882c1",
      "created_at" : "2022-04-15T21:22:36Z",
      "diff_hunk" : "@@ -282,16 +280,15 @@ size_t ComputeScriptLen(Fragment nodetype, Type sub0typ, size_t subsize, uint32_\n     return 0;\n }\n \n-bool DecomposeScript(const CScript& script, std::vector<std::pair<opcodetype, std::vector<unsigned char>>>& out)\n+std::optional<std::vector<std::pair<opcodetype, std::vector<unsigned char>>>> DecomposeScript(const CScript& script)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r851520527",
      "id" : 851520527,
      "line" : 283,
      "node_id" : "PRRC_kwDOABII584ywSwP",
      "original_commit_id" : "e9828f26352b8af017025d7b3ab3610f05c882c1",
      "original_line" : 283,
      "original_position" : 116,
      "original_start_line" : null,
      "path" : "src/script/miniscript.cpp",
      "position" : 116,
      "pull_request_review_id" : 943749189,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851520527/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-15T21:22:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851520527",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/17150045?v=4",
         "events_url" : "https://api.github.com/users/vincenzopalazzo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vincenzopalazzo/followers",
         "following_url" : "https://api.github.com/users/vincenzopalazzo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vincenzopalazzo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vincenzopalazzo",
         "id" : 17150045,
         "login" : "vincenzopalazzo",
         "node_id" : "MDQ6VXNlcjE3MTUwMDQ1",
         "organizations_url" : "https://api.github.com/users/vincenzopalazzo/orgs",
         "received_events_url" : "https://api.github.com/users/vincenzopalazzo/received_events",
         "repos_url" : "https://api.github.com/users/vincenzopalazzo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vincenzopalazzo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vincenzopalazzo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vincenzopalazzo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#24149](https://github.com/bitcoin/bitcoin/pull/24149) (Signing support for Miniscript Descriptors by darosior)\n* [#24148](https://github.com/bitcoin/bitcoin/pull/24148) (Miniscript support in Output Descriptors by darosior)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-04-16T06:51:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#issuecomment-1100588763",
      "id" : 1100588763,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24860",
      "node_id" : "IC_kwDOABII585Bmabb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1100588763/reactions"
      },
      "updated_at" : "2022-05-31T11:19:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1100588763",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "cc @sanket1729",
      "created_at" : "2022-04-19T13:42:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#issuecomment-1102673734",
      "id" : 1102673734,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24860",
      "node_id" : "IC_kwDOABII585BuXdG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1102673734/reactions"
      },
      "updated_at" : "2022-04-19T13:42:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1102673734",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-04-19T18:34:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#issuecomment-1102963380",
      "id" : 1102963380,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24860",
      "node_id" : "IC_kwDOABII585BveK0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1102963380/reactions"
      },
      "updated_at" : "2022-04-19T18:34:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1102963380",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r862032549"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862032549"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think you mean all satisfactions here? Not only the non-malleable ones?",
      "commit_id" : "038f367494956cd5ca8bc94d4ed74635ed14e7ee",
      "created_at" : "2022-04-29T18:08:01Z",
      "diff_hunk" : "@@ -779,8 +779,11 @@ struct Node {\n     //! Check whether there is no satisfaction path that contains both timelocks and heightlocks\n     bool CheckTimeLocksMix() const { return GetType() << \"k\"_mst; }\n \n-    //! Do all sanity checks.\n-    bool IsSane() const { return IsValid() && IsNonMalleable() && CheckTimeLocksMix() && CheckOpsLimit() && CheckStackSize(); }\n+    //! Whether successful non-malleable satisfactions are guaranteed to be valid.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r862032549",
      "id" : 862032549,
      "line" : 824,
      "node_id" : "PRRC_kwDOABII584zYZKl",
      "original_commit_id" : "5cea85f12cba5dcfe3a298eddfa711f582adffac",
      "original_line" : 782,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/script/miniscript.h",
      "position" : 6,
      "pull_request_review_id" : 958076310,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862032549/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-29T18:44:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862032549",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6881849?v=4",
         "events_url" : "https://api.github.com/users/sanket1729/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sanket1729/followers",
         "following_url" : "https://api.github.com/users/sanket1729/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sanket1729/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sanket1729",
         "id" : 6881849,
         "login" : "sanket1729",
         "node_id" : "MDQ6VXNlcjY4ODE4NDk=",
         "organizations_url" : "https://api.github.com/users/sanket1729/orgs",
         "received_events_url" : "https://api.github.com/users/sanket1729/received_events",
         "repos_url" : "https://api.github.com/users/sanket1729/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sanket1729/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sanket1729"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r862034391"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862034391"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Technically, all timelocks are malleable if there is no signature. If there is no signature, anyone can malleate nLockTime/nSequence to any value perhaps not matching the script semantics?  \r\n\r\nWhy is the NeedsSignature check only on top-level? and not a general condition for sanity?",
      "commit_id" : "038f367494956cd5ca8bc94d4ed74635ed14e7ee",
      "created_at" : "2022-04-29T18:10:57Z",
      "diff_hunk" : "@@ -779,8 +779,11 @@ struct Node {\n     //! Check whether there is no satisfaction path that contains both timelocks and heightlocks\n     bool CheckTimeLocksMix() const { return GetType() << \"k\"_mst; }\n \n-    //! Do all sanity checks.\n-    bool IsSane() const { return IsValid() && IsNonMalleable() && CheckTimeLocksMix() && CheckOpsLimit() && CheckStackSize(); }\n+    //! Whether successful non-malleable satisfactions are guaranteed to be valid.\n+    bool ValidSatisfactions() const { return IsValid() && CheckOpsLimit() && CheckStackSize(); }\n+\n+    //! Whether the apparent policy of this node matches its script semantics.\n+    bool IsSane() const { return ValidSatisfactions() && IsNonMalleable() && CheckTimeLocksMix(); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r862034391",
      "id" : 862034391,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584zYZnX",
      "original_commit_id" : "5cea85f12cba5dcfe3a298eddfa711f582adffac",
      "original_line" : 786,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/script/miniscript.h",
      "position" : 10,
      "pull_request_review_id" : 958076310,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862034391/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-29T18:44:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862034391",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6881849?v=4",
         "events_url" : "https://api.github.com/users/sanket1729/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sanket1729/followers",
         "following_url" : "https://api.github.com/users/sanket1729/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sanket1729/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sanket1729",
         "id" : 6881849,
         "login" : "sanket1729",
         "node_id" : "MDQ6VXNlcjY4ODE4NDk=",
         "organizations_url" : "https://api.github.com/users/sanket1729/orgs",
         "received_events_url" : "https://api.github.com/users/sanket1729/received_events",
         "repos_url" : "https://api.github.com/users/sanket1729/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sanket1729/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sanket1729"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r862054083"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862054083"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I am confused by why we need the node = this here. Should upfn always not operate on this node?",
      "commit_id" : "038f367494956cd5ca8bc94d4ed74635ed14e7ee",
      "created_at" : "2022-04-29T18:42:16Z",
      "diff_hunk" : "@@ -746,6 +762,30 @@ struct Node {\n         return {{}, {}};\n     }\n \n+    //! Returns true if the node contains at least one duplicate key.\n+    bool ContainsDuplicateKey() const {\n+        auto upfn = [this](const Node& node, Span<std::set<Key>> subs) -> std::optional<std::set<Key>> {\n+            if (&node != this && node.duplicate_key) return {};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r862054083",
      "id" : 862054083,
      "line" : 768,
      "node_id" : "PRRC_kwDOABII584zYebD",
      "original_commit_id" : "038f367494956cd5ca8bc94d4ed74635ed14e7ee",
      "original_line" : 768,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/script/miniscript.h",
      "position" : 37,
      "pull_request_review_id" : 958076310,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862054083/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-29T18:44:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862054083",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6881849?v=4",
         "events_url" : "https://api.github.com/users/sanket1729/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sanket1729/followers",
         "following_url" : "https://api.github.com/users/sanket1729/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sanket1729/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sanket1729",
         "id" : 6881849,
         "login" : "sanket1729",
         "node_id" : "MDQ6VXNlcjY4ODE4NDk=",
         "organizations_url" : "https://api.github.com/users/sanket1729/orgs",
         "received_events_url" : "https://api.github.com/users/sanket1729/received_events",
         "repos_url" : "https://api.github.com/users/sanket1729/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sanket1729/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sanket1729/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sanket1729"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r862093512"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862093512"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`this->duplicate_key` isn't yet initialized when `ContainsDuplicateKey` is being called, so we need to skip inspecting it.",
      "commit_id" : "038f367494956cd5ca8bc94d4ed74635ed14e7ee",
      "created_at" : "2022-04-29T19:36:39Z",
      "diff_hunk" : "@@ -746,6 +762,30 @@ struct Node {\n         return {{}, {}};\n     }\n \n+    //! Returns true if the node contains at least one duplicate key.\n+    bool ContainsDuplicateKey() const {\n+        auto upfn = [this](const Node& node, Span<std::set<Key>> subs) -> std::optional<std::set<Key>> {\n+            if (&node != this && node.duplicate_key) return {};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r862093512",
      "id" : 862093512,
      "in_reply_to_id" : 862054083,
      "line" : 768,
      "node_id" : "PRRC_kwDOABII584zYoDI",
      "original_commit_id" : "038f367494956cd5ca8bc94d4ed74635ed14e7ee",
      "original_line" : 768,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/script/miniscript.h",
      "position" : 37,
      "pull_request_review_id" : 958162126,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862093512/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-29T19:36:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862093512",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r862486490"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862486490"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Only the non-malleable ones, because CheckOpsLimit and CheckStackSize only take the logic of the non-malleable satisfaction algorithm into account.",
      "commit_id" : "038f367494956cd5ca8bc94d4ed74635ed14e7ee",
      "created_at" : "2022-05-01T15:02:42Z",
      "diff_hunk" : "@@ -779,8 +779,11 @@ struct Node {\n     //! Check whether there is no satisfaction path that contains both timelocks and heightlocks\n     bool CheckTimeLocksMix() const { return GetType() << \"k\"_mst; }\n \n-    //! Do all sanity checks.\n-    bool IsSane() const { return IsValid() && IsNonMalleable() && CheckTimeLocksMix() && CheckOpsLimit() && CheckStackSize(); }\n+    //! Whether successful non-malleable satisfactions are guaranteed to be valid.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r862486490",
      "id" : 862486490,
      "in_reply_to_id" : 862032549,
      "line" : 824,
      "node_id" : "PRRC_kwDOABII584zaH_a",
      "original_commit_id" : "5cea85f12cba5dcfe3a298eddfa711f582adffac",
      "original_line" : 782,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/script/miniscript.h",
      "position" : 6,
      "pull_request_review_id" : 958600405,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862486490/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-01T15:02:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862486490",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r873638917"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873638917"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You are right, `n:older(12)` shouldn't be called \"sane\". But to call it \"sane\" one should use `IsSaneTopLevel()`.\r\n\r\nI think that the check for a fragment's sanity should be context-less, and the requirement for signature depends on the context. To take back the example from above `n:older(12)` shouldn't be called sane on its own, but it should in the context of `and_b(n:older(12),s:pk(A))`. So it should only be called insane if not 's' and is the top level fragment. That's what `IsSaneTopLevel()` is.\r\nIt's not purely theoretical, for instance we use this in #24148 to find the deepest insane sub of an insane Miniscript: https://github.com/bitcoin/bitcoin/pull/24148/files#diff-a55760aaec4bce216663f5ebf65823516347356a8320d30459427149f7bbc2c5R824-R831. If the `IsSane()` check is context-dependent it gets messy.\r\n\r\nNow, maybe there is a point for the need for a better naming of these methods.",
      "commit_id" : "225d73cf93c083f4a37625dba216b670310bff4b",
      "created_at" : "2022-05-16T11:58:04Z",
      "diff_hunk" : "@@ -779,8 +779,11 @@ struct Node {\n     //! Check whether there is no satisfaction path that contains both timelocks and heightlocks\n     bool CheckTimeLocksMix() const { return GetType() << \"k\"_mst; }\n \n-    //! Do all sanity checks.\n-    bool IsSane() const { return IsValid() && IsNonMalleable() && CheckTimeLocksMix() && CheckOpsLimit() && CheckStackSize(); }\n+    //! Whether successful non-malleable satisfactions are guaranteed to be valid.\n+    bool ValidSatisfactions() const { return IsValid() && CheckOpsLimit() && CheckStackSize(); }\n+\n+    //! Whether the apparent policy of this node matches its script semantics.\n+    bool IsSane() const { return ValidSatisfactions() && IsNonMalleable() && CheckTimeLocksMix(); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r873638917",
      "id" : 873638917,
      "in_reply_to_id" : 862034391,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5840EqwF",
      "original_commit_id" : "5cea85f12cba5dcfe3a298eddfa711f582adffac",
      "original_line" : 786,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/script/miniscript.h",
      "position" : null,
      "pull_request_review_id" : 973831368,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873638917/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-16T12:00:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873638917",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r873724170"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873724170"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "225d73cf93c083f4a37625dba216b670310bff4b",
      "created_at" : "2022-05-16T13:25:53Z",
      "diff_hunk" : "@@ -282,16 +280,15 @@ size_t ComputeScriptLen(Fragment nodetype, Type sub0typ, size_t subsize, uint32_\n     return 0;\n }\n \n-bool DecomposeScript(const CScript& script, std::vector<std::pair<opcodetype, std::vector<unsigned char>>>& out)\n+std::optional<std::vector<std::pair<opcodetype, std::vector<unsigned char>>>> DecomposeScript(const CScript& script)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r873724170",
      "id" : 873724170,
      "in_reply_to_id" : 851520527,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5840E_kK",
      "original_commit_id" : "e9828f26352b8af017025d7b3ab3610f05c882c1",
      "original_line" : 284,
      "original_position" : 116,
      "original_start_line" : null,
      "path" : "src/script/miniscript.cpp",
      "position" : null,
      "pull_request_review_id" : 973953423,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873724170/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-16T13:25:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873724170",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think i addressed all comments here. It's ready for another round of review. :)\r\n\r\nI had previously made the rename a scripted diff as asked by @Sjors. In the last push i:\r\n- Added a `typedef` for the (operand, data pushed) pair as suggested by @vincenzopalazzo \r\n- Added a `CheckDuplicateKey()` which is useful for unit tests and for granular error detection in #24148 \r\n- Addressed the nits from @sanket1729 review of #24148 ",
      "created_at" : "2022-05-16T14:24:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#issuecomment-1127742775",
      "id" : 1127742775,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24860",
      "node_id" : "IC_kwDOABII585DN_03",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1127742775/reactions"
      },
      "updated_at" : "2022-05-16T14:24:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1127742775",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r874948702"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/874948702"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: the \"using\" notation is considered more modern than typedef (though for non-templated types there is no functional difference):\r\n\r\n```c++\r\nusing Opcode = std::pair<opcodetype, std::vector<unsigned char>>;\r\n```\r\n",
      "commit_id" : "6111d2c1a36ad8449b57841c13f7962c5f90ca3b",
      "created_at" : "2022-05-17T15:13:24Z",
      "diff_hunk" : "@@ -179,6 +179,8 @@ inline constexpr Type operator\"\" _mst(const char* c, size_t l) {\n     return typ;\n }\n \n+typedef std::pair<opcodetype, std::vector<unsigned char>> OpCode;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r874948702",
      "id" : 874948702,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5840Jqhe",
      "original_commit_id" : "a58f35f1eafd435ccd8e216bd85fcfb05ed8cfcd",
      "original_line" : 182,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/script/miniscript.h",
      "position" : null,
      "pull_request_review_id" : 975664219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/874948702/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-17T15:17:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/874948702",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r874953842"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/874953842"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, I think this is right.\r\n\r\nIsSane() being false for `n:older(12)` would be strange, because while indeed it would be bad to use that as a standalone script, it is perfectly reasonable (and even expected) to occur as a subexpression inside other scripts.\r\n\r\nWhat about swapping the naming around?\r\n* IsSane() -> IsSaneSubexpression()\r\n* IsSaneTopLevel() -> IsSane()\r\n",
      "commit_id" : "6111d2c1a36ad8449b57841c13f7962c5f90ca3b",
      "created_at" : "2022-05-17T15:17:33Z",
      "diff_hunk" : "@@ -779,8 +779,11 @@ struct Node {\n     //! Check whether there is no satisfaction path that contains both timelocks and heightlocks\n     bool CheckTimeLocksMix() const { return GetType() << \"k\"_mst; }\n \n-    //! Do all sanity checks.\n-    bool IsSane() const { return IsValid() && IsNonMalleable() && CheckTimeLocksMix() && CheckOpsLimit() && CheckStackSize(); }\n+    //! Whether successful non-malleable satisfactions are guaranteed to be valid.\n+    bool ValidSatisfactions() const { return IsValid() && CheckOpsLimit() && CheckStackSize(); }\n+\n+    //! Whether the apparent policy of this node matches its script semantics.\n+    bool IsSane() const { return ValidSatisfactions() && IsNonMalleable() && CheckTimeLocksMix(); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r874953842",
      "id" : 874953842,
      "in_reply_to_id" : 862034391,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5840Jrxy",
      "original_commit_id" : "5cea85f12cba5dcfe3a298eddfa711f582adffac",
      "original_line" : 786,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/script/miniscript.h",
      "position" : null,
      "pull_request_review_id" : 975664219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/874953842/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-17T15:17:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/874953842",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r874973785"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/874973785"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done, thanks",
      "commit_id" : "6111d2c1a36ad8449b57841c13f7962c5f90ca3b",
      "created_at" : "2022-05-17T15:35:04Z",
      "diff_hunk" : "@@ -179,6 +179,8 @@ inline constexpr Type operator\"\" _mst(const char* c, size_t l) {\n     return typ;\n }\n \n+typedef std::pair<opcodetype, std::vector<unsigned char>> OpCode;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r874973785",
      "id" : 874973785,
      "in_reply_to_id" : 874948702,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5840JwpZ",
      "original_commit_id" : "a58f35f1eafd435ccd8e216bd85fcfb05ed8cfcd",
      "original_line" : 182,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/script/miniscript.h",
      "position" : null,
      "pull_request_review_id" : 975698893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/874973785/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-17T15:35:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/874973785",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r874973943"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/874973943"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "6111d2c1a36ad8449b57841c13f7962c5f90ca3b",
      "created_at" : "2022-05-17T15:35:12Z",
      "diff_hunk" : "@@ -779,8 +779,11 @@ struct Node {\n     //! Check whether there is no satisfaction path that contains both timelocks and heightlocks\n     bool CheckTimeLocksMix() const { return GetType() << \"k\"_mst; }\n \n-    //! Do all sanity checks.\n-    bool IsSane() const { return IsValid() && IsNonMalleable() && CheckTimeLocksMix() && CheckOpsLimit() && CheckStackSize(); }\n+    //! Whether successful non-malleable satisfactions are guaranteed to be valid.\n+    bool ValidSatisfactions() const { return IsValid() && CheckOpsLimit() && CheckStackSize(); }\n+\n+    //! Whether the apparent policy of this node matches its script semantics.\n+    bool IsSane() const { return ValidSatisfactions() && IsNonMalleable() && CheckTimeLocksMix(); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r874973943",
      "id" : 874973943,
      "in_reply_to_id" : 862034391,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5840Jwr3",
      "original_commit_id" : "5cea85f12cba5dcfe3a298eddfa711f582adffac",
      "original_line" : 786,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/script/miniscript.h",
      "position" : null,
      "pull_request_review_id" : 975699102,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/874973943/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-17T15:35:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/874973943",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Added an explicit requirement on the context to provide a `KeyCompare` method instead of implicitly relying on `operator<` for checking key duplicates. Suggested by @sipa in https://github.com/bitcoin/bitcoin/pull/24148#issuecomment-1127664730.",
      "created_at" : "2022-05-26T10:59:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#issuecomment-1138410733",
      "id" : 1138410733,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24860",
      "node_id" : "IC_kwDOABII585D2sTt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1138410733/reactions"
      },
      "updated_at" : "2022-05-26T10:59:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1138410733",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r883686621"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/883686621"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`std::function` may have allocation overhead, and results in dynamic binding (functions pointers rather than compile-time resolving). Here is an alternative, though it's not as elegant as I'd like:\r\n\r\n```diff\r\n--- a/src/script/miniscript.h\r\n+++ b/src/script/miniscript.h\r\n@@ -767,14 +767,20 @@ public:\r\n      * for more complicated types.\r\n      */\r\n     template<typename Ctx> bool ContainsDuplicateKey(const Ctx& ctx) const {\r\n-        using set = std::set<Key, std::function<bool(const Key& a, const Key& b)>>;\r\n+        // We cannot use a lambda here, as lambdas are non assignable, and the set operations\r\n+        // below require moving the comparators around.\r\n+        struct Comp {\r\n+            const Ctx* ctx_ptr;\r\n+            Comp(const Ctx& ctx) : ctx_ptr(&ctx) {}\r\n+            bool operator()(const Key& a, const Key& b) const { return ctx_ptr->KeyCompare(a, b); }\r\n+        };\r\n+        using set = std::set<Key, Comp>;\r\n \r\n         auto upfn = [this, &ctx](const Node& node, Span<set> subs) -> std::optional<set> {\r\n             if (&node != this && node.duplicate_key) return {};\r\n \r\n             size_t keys_count = node.keys.size();\r\n-            auto comp = [&ctx](const Key& a, const Key& b) -> bool { return ctx.KeyCompare(a, b); };\r\n-            set key_set{node.keys.begin(), node.keys.end(), comp};\r\n+            set key_set{node.keys.begin(), node.keys.end(), Comp(ctx)};\r\n             if (key_set.size() != keys_count) return {};\r\n \r\n             for (auto& sub: subs) {\r\n```",
      "commit_id" : "f552056225f2205bcb4af875e42730a357ceb916",
      "created_at" : "2022-05-27T14:46:57Z",
      "diff_hunk" : "@@ -746,6 +763,36 @@ struct Node {\n         return {{}, {}};\n     }\n \n+    /** Check whether any key is repeated.\n+     * This uses a custom key comparator provided by the context in order to still detect duplicates\n+     * for more complicated types.\n+     */\n+    template<typename Ctx> bool ContainsDuplicateKey(const Ctx& ctx) const {\n+        using set = std::set<Key, std::function<bool(const Key& a, const Key& b)>>;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r883686621",
      "id" : 883686621,
      "line" : 770,
      "node_id" : "PRRC_kwDOABII5840q_zd",
      "original_commit_id" : "478c46cad9905b308d70cd2682afb4fedbc49043",
      "original_line" : 771,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/script/miniscript.h",
      "position" : 47,
      "pull_request_review_id" : 987615554,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/883686621/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-27T14:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/883686621",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK f552056225f2205bcb4af875e42730a357ceb916 (with the caveat that a lot of it is my own code).\r\n\r\nWith or without addressing https://github.com/bitcoin/bitcoin/pull/24860#discussion_r883686621",
      "created_at" : "2022-05-27T15:48:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#issuecomment-1139740813",
      "id" : 1139740813,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24860",
      "node_id" : "IC_kwDOABII585D7xCN",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1139740813/reactions"
      },
      "updated_at" : "2022-05-27T15:48:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1139740813",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r884914259"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/884914259"
         }
      },
      "author_association" : "MEMBER",
      "body" : "[TIL](https://stackoverflow.com/a/9088690/12967587), thanks. Done.",
      "commit_id" : "f3a50c9dfe645c548713e44e0eaf26ea9917a379",
      "created_at" : "2022-05-30T14:59:30Z",
      "diff_hunk" : "@@ -746,6 +763,36 @@ struct Node {\n         return {{}, {}};\n     }\n \n+    /** Check whether any key is repeated.\n+     * This uses a custom key comparator provided by the context in order to still detect duplicates\n+     * for more complicated types.\n+     */\n+    template<typename Ctx> bool ContainsDuplicateKey(const Ctx& ctx) const {\n+        using set = std::set<Key, std::function<bool(const Key& a, const Key& b)>>;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r884914259",
      "id" : 884914259,
      "in_reply_to_id" : 883686621,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5840vrhT",
      "original_commit_id" : "478c46cad9905b308d70cd2682afb4fedbc49043",
      "original_line" : 771,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/script/miniscript.h",
      "position" : null,
      "pull_request_review_id" : 989469254,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/884914259/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-30T14:59:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/884914259",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK f3a50c9dfe645c548713e44e0eaf26ea9917a379 (with the caveat that a lot of it is my own code)",
      "created_at" : "2022-05-31T15:21:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#issuecomment-1142278189",
      "id" : 1142278189,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24860",
      "node_id" : "IC_kwDOABII585EFcgt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1142278189/reactions"
      },
      "updated_at" : "2022-05-31T15:21:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1142278189",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Renamed the fuzz target input folder to preserve the inputs: https://github.com/bitcoin-core/qa-assets/commit/3366f7bad1144804e372afd88ee3eae6ca140dfa",
      "created_at" : "2022-06-08T18:08:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#issuecomment-1150233735",
      "id" : 1150233735,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24860",
      "node_id" : "IC_kwDOABII585EjyyH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1150233735/reactions"
      },
      "updated_at" : "2022-06-08T18:08:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1150233735",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've been populating corpora for the two targets here. I'll PR them to qa-assets soon.\n------- Original Message -------\nLe mercredi 8 juin 2022 Ã  8:09 PM, MacroFake ***@***.***> a Ã©crit :\n\n> Renamed the fuzz target input folder to preserve the inputs: ***@***.***(https://github.com/bitcoin-core/qa-assets/commit/3366f7bad1144804e372afd88ee3eae6ca140dfa)\n>\n> â\n> Reply to this email directly, [view it on GitHub](https://github.com/bitcoin/bitcoin/pull/24860#issuecomment-1150233735), or [unsubscribe](https://github.com/notifications/unsubscribe-auth/AFLK3F2HMLUCLFEVIE3XPQLVODOUHANCNFSM5TP67B6Q).\n> You are receiving this because you authored the thread.Message ID: ***@***.***>",
      "created_at" : "2022-06-08T19:42:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#issuecomment-1150327603",
      "id" : 1150327603,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24860",
      "node_id" : "IC_kwDOABII585EkJsz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1150327603/reactions"
      },
      "updated_at" : "2022-06-08T19:42:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1150327603",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r893109311"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893109311"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Looks like this may take quite a while. For example:\r\n\r\n[clusterfuzz-testcase-miniscript_string-5717444439703552.bin.txt](https://github.com/bitcoin/bitcoin/files/8867405/clusterfuzz-testcase-miniscript_string-5717444439703552.bin.txt)\r\n\r\ntakes 10 seconds\r\n\r\nWith the flame graph:\r\n\r\n![Screenshot from 2022-06-09 08-14-22](https://user-images.githubusercontent.com/6399679/172777704-a2110ad7-dbb9-4469-a94b-08767745db32.png)\r\n\r\n",
      "commit_id" : "f3a50c9dfe645c548713e44e0eaf26ea9917a379",
      "created_at" : "2022-06-09T06:17:39Z",
      "diff_hunk" : "@@ -0,0 +1,167 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <core_io.h>\n+#include <hash.h>\n+#include <key.h>\n+#include <script/miniscript.h>\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <util/strencodings.h>\n+\n+namespace {\n+\n+//! Some pre-computed data for more efficient string roundtrips.\n+struct TestData {\n+    typedef CPubKey Key;\n+\n+    // Precomputed public keys.\n+    std::vector<Key> dummy_keys;\n+    std::map<Key, int> dummy_key_idx_map;\n+    std::map<CKeyID, Key> dummy_keys_map;\n+\n+    //! Set the precomputed data.\n+    void Init() {\n+        unsigned char keydata[32] = {1};\n+        for (size_t i = 0; i < 256; i++) {\n+            keydata[31] = i;\n+            CKey privkey;\n+            privkey.Set(keydata, keydata + 32, true);\n+            const Key pubkey = privkey.GetPubKey();\n+\n+            dummy_keys.push_back(pubkey);\n+            dummy_key_idx_map.emplace(pubkey, i);\n+            dummy_keys_map.insert({pubkey.GetID(), pubkey});\n+        }\n+    }\n+} TEST_DATA;\n+\n+/**\n+ * Context to parse a Miniscript node to and from Script or text representation.\n+ * Uses an integer (an index in the dummy keys array from the test data) as keys in order\n+ * to focus on fuzzing the Miniscript nodes' test representation, not the key representation.\n+ */\n+struct ParserContext {\n+    typedef CPubKey Key;\n+\n+    bool KeyCompare(const Key& a, const Key& b) const {\n+        return a < b;\n+    }\n+\n+    std::optional<std::string> ToString(const Key& key) const\n+    {\n+        auto it = TEST_DATA.dummy_key_idx_map.find(key);\n+        if (it == TEST_DATA.dummy_key_idx_map.end()) return {};\n+        uint8_t idx = it->second;\n+        return HexStr(Span{&idx, 1});\n+    }\n+\n+    template<typename I>\n+    std::optional<Key> FromString(I first, I last) const {\n+        if (last - first != 2) return {};\n+        auto idx = ParseHex(std::string(first, last));\n+        if (idx.size() != 1) return {};\n+        return TEST_DATA.dummy_keys[idx[0]];\n+    }\n+\n+    template<typename I>\n+    std::optional<Key> FromPKBytes(I first, I last) const {\n+        Key key;\n+        key.Set(first, last);\n+        if (!key.IsValid()) return {};\n+        return key;\n+    }\n+\n+    template<typename I>\n+    std::optional<Key> FromPKHBytes(I first, I last) const {\n+        assert(last - first == 20);\n+        CKeyID keyid;\n+        std::copy(first, last, keyid.begin());\n+        const auto it = TEST_DATA.dummy_keys_map.find(keyid);\n+        if (it == TEST_DATA.dummy_keys_map.end()) return {};\n+        return it->second;\n+    }\n+} PARSER_CTX;\n+\n+//! Context that implements naive conversion from/to script only, for roundtrip testing.\n+struct ScriptParserContext {\n+    //! For Script roundtrip we never need the key from a key hash.\n+    struct Key {\n+        bool is_hash;\n+        std::vector<unsigned char> data;\n+    };\n+\n+    bool KeyCompare(const Key& a, const Key& b) const {\n+        return a.data < b.data;\n+    }\n+\n+    const std::vector<unsigned char>& ToPKBytes(const Key& key) const\n+    {\n+        assert(!key.is_hash);\n+        return key.data;\n+    }\n+\n+    const std::vector<unsigned char> ToPKHBytes(const Key& key) const\n+    {\n+        if (key.is_hash) return key.data;\n+        const auto h = Hash160(key.data);\n+        return {h.begin(), h.end()};\n+    }\n+\n+    template<typename I>\n+    std::optional<Key> FromPKBytes(I first, I last) const\n+    {\n+        Key key;\n+        key.data.assign(first, last);\n+        key.is_hash = false;\n+        return key;\n+    }\n+\n+    template<typename I>\n+    std::optional<Key> FromPKHBytes(I first, I last) const\n+    {\n+        Key key;\n+        key.data.assign(first, last);\n+        key.is_hash = true;\n+        return key;\n+    }\n+} SCRIPT_PARSER_CONTEXT;\n+\n+} // namespace\n+\n+void FuzzInit()\n+{\n+    ECC_Start();\n+    TEST_DATA.Init();\n+}\n+\n+/* Fuzz tests that test parsing from a string, and roundtripping via string. */\n+FUZZ_TARGET_INIT(miniscript_string, FuzzInit)\n+{\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto str = provider.ConsumeRemainingBytesAsString();\n+    auto parsed = miniscript::FromString(str, PARSER_CTX);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r893109311",
      "id" : 893109311,
      "line" : 146,
      "node_id" : "PRRC_kwDOABII5841O8Q_",
      "original_commit_id" : "f3a50c9dfe645c548713e44e0eaf26ea9917a379",
      "original_line" : 146,
      "original_position" : 146,
      "original_start_line" : null,
      "path" : "src/test/fuzz/miniscript.cpp",
      "position" : 146,
      "pull_request_review_id" : 1000772376,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893109311/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-09T06:17:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893109311",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r893376746"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893376746"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah calling it in the constructor was not exactly bright since we'll re-do the same computation as we pile more nodes in the parsers. On the other hand it's hard not to do so and to keep the `const`ness of the `NodeRef`. Here are different approaches i tried:\r\n- Cache the duplicate key result only once we call it https://github.com/darosior/bitcoin/tree/miniscript_cache_dup_key_check. Needs to drop the constness.\r\n- Conditionally skip the check in the constructor, in order to only do it for the top level node https://github.com/darosior/bitcoin/tree/miniscript_skip_dup_key_check. Doesn't drop the constness but not elegant..\r\n- Don't cache it at all https://github.com/darosior/bitcoin/tree/miniscript_no_dup_key_cache",
      "commit_id" : "f3a50c9dfe645c548713e44e0eaf26ea9917a379",
      "created_at" : "2022-06-09T11:14:58Z",
      "diff_hunk" : "@@ -0,0 +1,167 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <core_io.h>\n+#include <hash.h>\n+#include <key.h>\n+#include <script/miniscript.h>\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <util/strencodings.h>\n+\n+namespace {\n+\n+//! Some pre-computed data for more efficient string roundtrips.\n+struct TestData {\n+    typedef CPubKey Key;\n+\n+    // Precomputed public keys.\n+    std::vector<Key> dummy_keys;\n+    std::map<Key, int> dummy_key_idx_map;\n+    std::map<CKeyID, Key> dummy_keys_map;\n+\n+    //! Set the precomputed data.\n+    void Init() {\n+        unsigned char keydata[32] = {1};\n+        for (size_t i = 0; i < 256; i++) {\n+            keydata[31] = i;\n+            CKey privkey;\n+            privkey.Set(keydata, keydata + 32, true);\n+            const Key pubkey = privkey.GetPubKey();\n+\n+            dummy_keys.push_back(pubkey);\n+            dummy_key_idx_map.emplace(pubkey, i);\n+            dummy_keys_map.insert({pubkey.GetID(), pubkey});\n+        }\n+    }\n+} TEST_DATA;\n+\n+/**\n+ * Context to parse a Miniscript node to and from Script or text representation.\n+ * Uses an integer (an index in the dummy keys array from the test data) as keys in order\n+ * to focus on fuzzing the Miniscript nodes' test representation, not the key representation.\n+ */\n+struct ParserContext {\n+    typedef CPubKey Key;\n+\n+    bool KeyCompare(const Key& a, const Key& b) const {\n+        return a < b;\n+    }\n+\n+    std::optional<std::string> ToString(const Key& key) const\n+    {\n+        auto it = TEST_DATA.dummy_key_idx_map.find(key);\n+        if (it == TEST_DATA.dummy_key_idx_map.end()) return {};\n+        uint8_t idx = it->second;\n+        return HexStr(Span{&idx, 1});\n+    }\n+\n+    template<typename I>\n+    std::optional<Key> FromString(I first, I last) const {\n+        if (last - first != 2) return {};\n+        auto idx = ParseHex(std::string(first, last));\n+        if (idx.size() != 1) return {};\n+        return TEST_DATA.dummy_keys[idx[0]];\n+    }\n+\n+    template<typename I>\n+    std::optional<Key> FromPKBytes(I first, I last) const {\n+        Key key;\n+        key.Set(first, last);\n+        if (!key.IsValid()) return {};\n+        return key;\n+    }\n+\n+    template<typename I>\n+    std::optional<Key> FromPKHBytes(I first, I last) const {\n+        assert(last - first == 20);\n+        CKeyID keyid;\n+        std::copy(first, last, keyid.begin());\n+        const auto it = TEST_DATA.dummy_keys_map.find(keyid);\n+        if (it == TEST_DATA.dummy_keys_map.end()) return {};\n+        return it->second;\n+    }\n+} PARSER_CTX;\n+\n+//! Context that implements naive conversion from/to script only, for roundtrip testing.\n+struct ScriptParserContext {\n+    //! For Script roundtrip we never need the key from a key hash.\n+    struct Key {\n+        bool is_hash;\n+        std::vector<unsigned char> data;\n+    };\n+\n+    bool KeyCompare(const Key& a, const Key& b) const {\n+        return a.data < b.data;\n+    }\n+\n+    const std::vector<unsigned char>& ToPKBytes(const Key& key) const\n+    {\n+        assert(!key.is_hash);\n+        return key.data;\n+    }\n+\n+    const std::vector<unsigned char> ToPKHBytes(const Key& key) const\n+    {\n+        if (key.is_hash) return key.data;\n+        const auto h = Hash160(key.data);\n+        return {h.begin(), h.end()};\n+    }\n+\n+    template<typename I>\n+    std::optional<Key> FromPKBytes(I first, I last) const\n+    {\n+        Key key;\n+        key.data.assign(first, last);\n+        key.is_hash = false;\n+        return key;\n+    }\n+\n+    template<typename I>\n+    std::optional<Key> FromPKHBytes(I first, I last) const\n+    {\n+        Key key;\n+        key.data.assign(first, last);\n+        key.is_hash = true;\n+        return key;\n+    }\n+} SCRIPT_PARSER_CONTEXT;\n+\n+} // namespace\n+\n+void FuzzInit()\n+{\n+    ECC_Start();\n+    TEST_DATA.Init();\n+}\n+\n+/* Fuzz tests that test parsing from a string, and roundtripping via string. */\n+FUZZ_TARGET_INIT(miniscript_string, FuzzInit)\n+{\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto str = provider.ConsumeRemainingBytesAsString();\n+    auto parsed = miniscript::FromString(str, PARSER_CTX);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r893376746",
      "id" : 893376746,
      "in_reply_to_id" : 893109311,
      "line" : 146,
      "node_id" : "PRRC_kwDOABII5841P9jq",
      "original_commit_id" : "f3a50c9dfe645c548713e44e0eaf26ea9917a379",
      "original_line" : 146,
      "original_position" : 146,
      "original_start_line" : null,
      "path" : "src/test/fuzz/miniscript.cpp",
      "position" : 146,
      "pull_request_review_id" : 1001147543,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893376746/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-09T11:14:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893376746",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r893582796"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893582796"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@darosior What about this idea:\r\n\r\n* Make the current `miniscript::Node` constructors private, and make them not compute the `duplicate_key` value.\r\n* Add a forwarding public constructor which invokes the private ones, and also computes the `duplicate_key` value (so now any publicly constructed Node object will have duplicate_key set, but it's possible to bypass this computation by using the private ones, if you have access to them).\r\n* `FromScript` and `FromString` are made `friend`, and thus can use the private constructors.\r\n* Make the `duplicate_key` variable mutable, so `ContainsDuplicateKey` can modify it (and is changed so it sets the value for all children of the called node too).",
      "commit_id" : "f3a50c9dfe645c548713e44e0eaf26ea9917a379",
      "created_at" : "2022-06-09T14:31:25Z",
      "diff_hunk" : "@@ -0,0 +1,167 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <core_io.h>\n+#include <hash.h>\n+#include <key.h>\n+#include <script/miniscript.h>\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <util/strencodings.h>\n+\n+namespace {\n+\n+//! Some pre-computed data for more efficient string roundtrips.\n+struct TestData {\n+    typedef CPubKey Key;\n+\n+    // Precomputed public keys.\n+    std::vector<Key> dummy_keys;\n+    std::map<Key, int> dummy_key_idx_map;\n+    std::map<CKeyID, Key> dummy_keys_map;\n+\n+    //! Set the precomputed data.\n+    void Init() {\n+        unsigned char keydata[32] = {1};\n+        for (size_t i = 0; i < 256; i++) {\n+            keydata[31] = i;\n+            CKey privkey;\n+            privkey.Set(keydata, keydata + 32, true);\n+            const Key pubkey = privkey.GetPubKey();\n+\n+            dummy_keys.push_back(pubkey);\n+            dummy_key_idx_map.emplace(pubkey, i);\n+            dummy_keys_map.insert({pubkey.GetID(), pubkey});\n+        }\n+    }\n+} TEST_DATA;\n+\n+/**\n+ * Context to parse a Miniscript node to and from Script or text representation.\n+ * Uses an integer (an index in the dummy keys array from the test data) as keys in order\n+ * to focus on fuzzing the Miniscript nodes' test representation, not the key representation.\n+ */\n+struct ParserContext {\n+    typedef CPubKey Key;\n+\n+    bool KeyCompare(const Key& a, const Key& b) const {\n+        return a < b;\n+    }\n+\n+    std::optional<std::string> ToString(const Key& key) const\n+    {\n+        auto it = TEST_DATA.dummy_key_idx_map.find(key);\n+        if (it == TEST_DATA.dummy_key_idx_map.end()) return {};\n+        uint8_t idx = it->second;\n+        return HexStr(Span{&idx, 1});\n+    }\n+\n+    template<typename I>\n+    std::optional<Key> FromString(I first, I last) const {\n+        if (last - first != 2) return {};\n+        auto idx = ParseHex(std::string(first, last));\n+        if (idx.size() != 1) return {};\n+        return TEST_DATA.dummy_keys[idx[0]];\n+    }\n+\n+    template<typename I>\n+    std::optional<Key> FromPKBytes(I first, I last) const {\n+        Key key;\n+        key.Set(first, last);\n+        if (!key.IsValid()) return {};\n+        return key;\n+    }\n+\n+    template<typename I>\n+    std::optional<Key> FromPKHBytes(I first, I last) const {\n+        assert(last - first == 20);\n+        CKeyID keyid;\n+        std::copy(first, last, keyid.begin());\n+        const auto it = TEST_DATA.dummy_keys_map.find(keyid);\n+        if (it == TEST_DATA.dummy_keys_map.end()) return {};\n+        return it->second;\n+    }\n+} PARSER_CTX;\n+\n+//! Context that implements naive conversion from/to script only, for roundtrip testing.\n+struct ScriptParserContext {\n+    //! For Script roundtrip we never need the key from a key hash.\n+    struct Key {\n+        bool is_hash;\n+        std::vector<unsigned char> data;\n+    };\n+\n+    bool KeyCompare(const Key& a, const Key& b) const {\n+        return a.data < b.data;\n+    }\n+\n+    const std::vector<unsigned char>& ToPKBytes(const Key& key) const\n+    {\n+        assert(!key.is_hash);\n+        return key.data;\n+    }\n+\n+    const std::vector<unsigned char> ToPKHBytes(const Key& key) const\n+    {\n+        if (key.is_hash) return key.data;\n+        const auto h = Hash160(key.data);\n+        return {h.begin(), h.end()};\n+    }\n+\n+    template<typename I>\n+    std::optional<Key> FromPKBytes(I first, I last) const\n+    {\n+        Key key;\n+        key.data.assign(first, last);\n+        key.is_hash = false;\n+        return key;\n+    }\n+\n+    template<typename I>\n+    std::optional<Key> FromPKHBytes(I first, I last) const\n+    {\n+        Key key;\n+        key.data.assign(first, last);\n+        key.is_hash = true;\n+        return key;\n+    }\n+} SCRIPT_PARSER_CONTEXT;\n+\n+} // namespace\n+\n+void FuzzInit()\n+{\n+    ECC_Start();\n+    TEST_DATA.Init();\n+}\n+\n+/* Fuzz tests that test parsing from a string, and roundtripping via string. */\n+FUZZ_TARGET_INIT(miniscript_string, FuzzInit)\n+{\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto str = provider.ConsumeRemainingBytesAsString();\n+    auto parsed = miniscript::FromString(str, PARSER_CTX);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r893582796",
      "id" : 893582796,
      "in_reply_to_id" : 893109311,
      "line" : 146,
      "node_id" : "PRRC_kwDOABII5841Qv3M",
      "original_commit_id" : "f3a50c9dfe645c548713e44e0eaf26ea9917a379",
      "original_line" : 146,
      "original_position" : 146,
      "original_start_line" : null,
      "path" : "src/test/fuzz/miniscript.cpp",
      "position" : 146,
      "pull_request_review_id" : 1001444452,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893582796/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-09T14:31:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/893582796",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r894308196"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/894308196"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sounds much better than all my approaches. I'll implement and PR this.",
      "commit_id" : "f3a50c9dfe645c548713e44e0eaf26ea9917a379",
      "created_at" : "2022-06-10T08:54:12Z",
      "diff_hunk" : "@@ -0,0 +1,167 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <core_io.h>\n+#include <hash.h>\n+#include <key.h>\n+#include <script/miniscript.h>\n+#include <script/script.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <util/strencodings.h>\n+\n+namespace {\n+\n+//! Some pre-computed data for more efficient string roundtrips.\n+struct TestData {\n+    typedef CPubKey Key;\n+\n+    // Precomputed public keys.\n+    std::vector<Key> dummy_keys;\n+    std::map<Key, int> dummy_key_idx_map;\n+    std::map<CKeyID, Key> dummy_keys_map;\n+\n+    //! Set the precomputed data.\n+    void Init() {\n+        unsigned char keydata[32] = {1};\n+        for (size_t i = 0; i < 256; i++) {\n+            keydata[31] = i;\n+            CKey privkey;\n+            privkey.Set(keydata, keydata + 32, true);\n+            const Key pubkey = privkey.GetPubKey();\n+\n+            dummy_keys.push_back(pubkey);\n+            dummy_key_idx_map.emplace(pubkey, i);\n+            dummy_keys_map.insert({pubkey.GetID(), pubkey});\n+        }\n+    }\n+} TEST_DATA;\n+\n+/**\n+ * Context to parse a Miniscript node to and from Script or text representation.\n+ * Uses an integer (an index in the dummy keys array from the test data) as keys in order\n+ * to focus on fuzzing the Miniscript nodes' test representation, not the key representation.\n+ */\n+struct ParserContext {\n+    typedef CPubKey Key;\n+\n+    bool KeyCompare(const Key& a, const Key& b) const {\n+        return a < b;\n+    }\n+\n+    std::optional<std::string> ToString(const Key& key) const\n+    {\n+        auto it = TEST_DATA.dummy_key_idx_map.find(key);\n+        if (it == TEST_DATA.dummy_key_idx_map.end()) return {};\n+        uint8_t idx = it->second;\n+        return HexStr(Span{&idx, 1});\n+    }\n+\n+    template<typename I>\n+    std::optional<Key> FromString(I first, I last) const {\n+        if (last - first != 2) return {};\n+        auto idx = ParseHex(std::string(first, last));\n+        if (idx.size() != 1) return {};\n+        return TEST_DATA.dummy_keys[idx[0]];\n+    }\n+\n+    template<typename I>\n+    std::optional<Key> FromPKBytes(I first, I last) const {\n+        Key key;\n+        key.Set(first, last);\n+        if (!key.IsValid()) return {};\n+        return key;\n+    }\n+\n+    template<typename I>\n+    std::optional<Key> FromPKHBytes(I first, I last) const {\n+        assert(last - first == 20);\n+        CKeyID keyid;\n+        std::copy(first, last, keyid.begin());\n+        const auto it = TEST_DATA.dummy_keys_map.find(keyid);\n+        if (it == TEST_DATA.dummy_keys_map.end()) return {};\n+        return it->second;\n+    }\n+} PARSER_CTX;\n+\n+//! Context that implements naive conversion from/to script only, for roundtrip testing.\n+struct ScriptParserContext {\n+    //! For Script roundtrip we never need the key from a key hash.\n+    struct Key {\n+        bool is_hash;\n+        std::vector<unsigned char> data;\n+    };\n+\n+    bool KeyCompare(const Key& a, const Key& b) const {\n+        return a.data < b.data;\n+    }\n+\n+    const std::vector<unsigned char>& ToPKBytes(const Key& key) const\n+    {\n+        assert(!key.is_hash);\n+        return key.data;\n+    }\n+\n+    const std::vector<unsigned char> ToPKHBytes(const Key& key) const\n+    {\n+        if (key.is_hash) return key.data;\n+        const auto h = Hash160(key.data);\n+        return {h.begin(), h.end()};\n+    }\n+\n+    template<typename I>\n+    std::optional<Key> FromPKBytes(I first, I last) const\n+    {\n+        Key key;\n+        key.data.assign(first, last);\n+        key.is_hash = false;\n+        return key;\n+    }\n+\n+    template<typename I>\n+    std::optional<Key> FromPKHBytes(I first, I last) const\n+    {\n+        Key key;\n+        key.data.assign(first, last);\n+        key.is_hash = true;\n+        return key;\n+    }\n+} SCRIPT_PARSER_CONTEXT;\n+\n+} // namespace\n+\n+void FuzzInit()\n+{\n+    ECC_Start();\n+    TEST_DATA.Init();\n+}\n+\n+/* Fuzz tests that test parsing from a string, and roundtripping via string. */\n+FUZZ_TARGET_INIT(miniscript_string, FuzzInit)\n+{\n+    FuzzedDataProvider provider(buffer.data(), buffer.size());\n+    auto str = provider.ConsumeRemainingBytesAsString();\n+    auto parsed = miniscript::FromString(str, PARSER_CTX);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24860#discussion_r894308196",
      "id" : 894308196,
      "in_reply_to_id" : 893109311,
      "line" : 146,
      "node_id" : "PRRC_kwDOABII5841Tg9k",
      "original_commit_id" : "f3a50c9dfe645c548713e44e0eaf26ea9917a379",
      "original_line" : 146,
      "original_position" : 146,
      "original_start_line" : null,
      "path" : "src/test/fuzz/miniscript.cpp",
      "position" : 146,
      "pull_request_review_id" : 1002462784,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24860",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/894308196/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-10T08:54:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/894308196",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   }
]
