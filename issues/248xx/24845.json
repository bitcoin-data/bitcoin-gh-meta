{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "Attempting to solve #23144, specially https://github.com/bitcoin/bitcoin/issues/23144#issuecomment-1066640787 with some extra possible improvements.\r\n\r\nSummarizing:\r\n\r\n1) Initial commit (7c9839d), introduces the 'OperationResult' and 'CallResult' classes. Which are generic classes used to encapsulate the function result and the result object (in case of having it) or, in case of failure, the failure reason.\r\nThis lets us clean a bunch of boilerplate code, as now instead of returning a boolean and having to add a ref arg for the return object and another ref for the error string. We can simply return a 'CallResult<ReturnObj>'.\r\n\r\nExample:\r\n\r\n- Before:\r\n```\r\nbool doSomething(arg1, arg2, arg3, arg4, &result, &error_string) {\r\n    do something...\r\n    if (error) {\r\n        error_string = \"something happened\";\r\n        return false;\r\n    }\r\n    // good\r\n    result = goodResult;\r\n    return true;\r\n}\r\n```\r\n\r\n- Now:\r\n```\r\nCallResult<Obj> doSomething(arg1, arg2, arg3, arg4) {\r\n    do something...\r\n    if (error) return {\"something happened\"};\r\n\r\n    // good\r\n    return {goodResult};\r\n}\r\n```\r\n\r\n*Similar boilerplate cleanup happens on the function callers side as they don't have to add the extra pre-function-call error string and result object declarations to pass the references to the function.\r\n\r\n2) The second and third commits refactor the CreationTransaction and SelectCoins flows to use the result classes introduced in the first commit.\r\n\r\n\r\n3) The fourth commit is the actual fix for #23144 (which is quite small due to the previously introduced changes). Plus, adds functional test coverage for it.\r\n\r\n\r\n-----\r\nNow the extra improvements that can be part of this or not:\r\n\r\n4) The fifth commit adds `m_include_only_spendable_outputs` filter option to CoinControl and connects it to the 'AvailableCoins' wallet method.\r\nThe rationale behind is quite simple, functions like `CreateTransaction` are actually skipping the unspendable outputs later in inner for-loops (for example on every `AttemptSelection` --> `GroupOutputs` method call). So, it's faster for the wallet to filter out the unspendable outputs in the first place.\r\n\r\n5) The sixth commit adds cache for utxo mempool information. So in case the wallet fallback to trying different UTXO selection behaviors, it does not end up locking the mempool mutex two times per available UTXO for each 'AttemptSelection/GroupOutputs' call to get the output ancestors and descendants.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24845/comments",
   "created_at" : "2022-04-13T16:25:15Z",
   "draft" : false,
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24845/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/24845",
   "id" : 1203525439,
   "labels" : [
      {
         "color" : "08a781",
         "default" : false,
         "description" : null,
         "id" : 149424,
         "name" : "Wallet",
         "node_id" : "MDU6TGFiZWwxNDk0MjQ=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24845/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "PR_kwDOABII5842MDDS",
   "number" : 24845,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/24845.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24845",
      "merged_at" : null,
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/24845.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24845"
   },
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24845/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24845/timeline",
   "title" : "wallet: createTransaction, return proper error description for  \"too-long-mempool-chain\" + introduce generic Result classes",
   "updated_at" : "2022-04-13T17:21:00Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24845",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/5377650?v=4",
      "events_url" : "https://api.github.com/users/furszy/events{/privacy}",
      "followers_url" : "https://api.github.com/users/furszy/followers",
      "following_url" : "https://api.github.com/users/furszy/following{/other_user}",
      "gists_url" : "https://api.github.com/users/furszy/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/furszy",
      "id" : 5377650,
      "login" : "furszy",
      "node_id" : "MDQ6VXNlcjUzNzc2NTA=",
      "organizations_url" : "https://api.github.com/users/furszy/orgs",
      "received_events_url" : "https://api.github.com/users/furszy/received_events",
      "repos_url" : "https://api.github.com/users/furszy/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/furszy/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/furszy/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/furszy"
   }
}
