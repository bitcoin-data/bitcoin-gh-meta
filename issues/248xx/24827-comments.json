[
   {
      "author_association" : "NONE",
      "body" : "CI failure looks unrelated - a timeout occurred in fee_estimator test. Can we kick the CI again?",
      "created_at" : "2022-04-11T17:53:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24827#issuecomment-1095354491",
      "id" : 1095354491,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24827",
      "node_id" : "IC_kwDOABII585BSch7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1095354491/reactions"
      },
      "updated_at" : "2022-04-11T17:53:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1095354491",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2466893?v=4",
         "events_url" : "https://api.github.com/users/Adlai-Holler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Adlai-Holler/followers",
         "following_url" : "https://api.github.com/users/Adlai-Holler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Adlai-Holler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Adlai-Holler",
         "id" : 2466893,
         "login" : "Adlai-Holler",
         "node_id" : "MDQ6VXNlcjI0NjY4OTM=",
         "organizations_url" : "https://api.github.com/users/Adlai-Holler/orgs",
         "received_events_url" : "https://api.github.com/users/Adlai-Holler/received_events",
         "repos_url" : "https://api.github.com/users/Adlai-Holler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Adlai-Holler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Adlai-Holler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Adlai-Holler"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Can we kick the CI again?\r\n\r\nI think you can do it yourself, `git commit --amend` and then `git push --force`.",
      "created_at" : "2022-04-11T18:07:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24827#issuecomment-1095373490",
      "id" : 1095373490,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24827",
      "node_id" : "IC_kwDOABII585BShKy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1095373490/reactions"
      },
      "updated_at" : "2022-04-11T18:07:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1095373490",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Same test timed out again, plus another RPC also timed out that worked this morning. My base case is now that I broke something. Gone through the code a dozen times and can't see what. I'll keep digging.",
      "created_at" : "2022-04-11T21:45:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24827#issuecomment-1095598442",
      "id" : 1095598442,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24827",
      "node_id" : "IC_kwDOABII585BTYFq",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1095598442/reactions"
      },
      "updated_at" : "2022-04-11T21:45:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1095598442",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2466893?v=4",
         "events_url" : "https://api.github.com/users/Adlai-Holler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Adlai-Holler/followers",
         "following_url" : "https://api.github.com/users/Adlai-Holler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Adlai-Holler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Adlai-Holler",
         "id" : 2466893,
         "login" : "Adlai-Holler",
         "node_id" : "MDQ6VXNlcjI0NjY4OTM=",
         "organizations_url" : "https://api.github.com/users/Adlai-Holler/orgs",
         "received_events_url" : "https://api.github.com/users/Adlai-Holler/received_events",
         "repos_url" : "https://api.github.com/users/Adlai-Holler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Adlai-Holler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Adlai-Holler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Adlai-Holler"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25172](https://github.com/bitcoin/bitcoin/pull/25172) (refactor: use std:: prefix for std lib funcs by fanquake)\n* [#24464](https://github.com/bitcoin/bitcoin/pull/24464) (logging: Add severity level to logs by klementtan)\n* [#23531](https://github.com/bitcoin/bitcoin/pull/23531) (Add Yggdrasil support by prusnak)\n* [#21878](https://github.com/bitcoin/bitcoin/pull/21878) (Make all networking code mockable by vasild)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-04-11T21:46:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24827#issuecomment-1095599003",
      "id" : 1095599003,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24827",
      "node_id" : "IC_kwDOABII585BTYOb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1095599003/reactions"
      },
      "updated_at" : "2022-05-24T01:06:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1095599003",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, I agree this is UB and it should be fixed. `memcpy` is notoriously dangerous though, this will have to be carefully checked to not introduce any subtle bugs, especially to make sure the right lengths are used everywhere.",
      "created_at" : "2022-04-13T20:24:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24827#issuecomment-1098453110",
      "id" : 1098453110,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24827",
      "node_id" : "IC_kwDOABII585BeRB2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1098453110/reactions"
      },
      "updated_at" : "2022-04-13T20:25:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1098453110",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "In terms of lengths, and for more general context on this issue so that reviewers can avoid duplicating work:\r\n\r\n- `struct sockaddr` is an old 1980's generic socket address type, (made with IPv4 in mind). It's like a base class.\r\n- `struct sockaddr_in` (\"internet\") is the IPv4 \"subclass.\"\r\n  - It has a size that fits within `sockaddr` and its layout is such that the two can be cast back & forth. In C. In C++ it's UB to manipulate aliased unrelated types like that.\r\n- `struct sockaddr_in6` is the IPv6 \"subclass.\"\r\n  - It is larger than `sockaddr`\r\n  - But the API still works with `sockaddr*`. It's up to you and the API to cast the pointer to the appropriate \"subclass\" once you know which protocol you're dealing with.\r\n- `struct sockaddr_storage` was added along with `sockaddr_in6` as a \"catch-all\" opaque blob that is large enough to hold either one. The only field defined on the struct is the `ss_family` field (i.e. is this IPv4 or IPv6?). That field is guaranteed to map to the field in all the other versions so it's \"sort of\" castable.\r\n\r\nSo, in this PR here's the strategy:\r\n- On our side, if we need a socket address type that is protocol-independent, make it `sockaddr_storage` instead of `sockaddr`. Makes sure we have a big enough chunk of memory to work with, and it removes some internal casting.\r\n- For writing to out-variables of `sockaddr_storage*`, first we zero all the memory of the out-variable to get a clean slate, then create a protocol-specific local variable e.g. `sockaddr_in` and populate it, then memcpy the smaller subclass variable into the zero'd storage variable.\r\n- Replace downcasts of `sockaddr*` -> e.g. `sockaddr_in*` with creating a local variable of the appropriate type and memcpy'ing using the \"subclass\" length. This looks like a read out of bounds but it's no more out-of-bounds than casting the smaller struct pointer to the larger one was. It's the same thing really.",
      "created_at" : "2022-04-14T00:39:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24827#issuecomment-1098601226",
      "id" : 1098601226,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24827",
      "node_id" : "IC_kwDOABII585Be1MK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1098601226/reactions"
      },
      "updated_at" : "2022-04-14T00:39:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1098601226",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2466893?v=4",
         "events_url" : "https://api.github.com/users/Adlai-Holler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Adlai-Holler/followers",
         "following_url" : "https://api.github.com/users/Adlai-Holler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Adlai-Holler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Adlai-Holler",
         "id" : 2466893,
         "login" : "Adlai-Holler",
         "node_id" : "MDQ6VXNlcjI0NjY4OTM=",
         "organizations_url" : "https://api.github.com/users/Adlai-Holler/orgs",
         "received_events_url" : "https://api.github.com/users/Adlai-Holler/received_events",
         "repos_url" : "https://api.github.com/users/Adlai-Holler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Adlai-Holler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Adlai-Holler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Adlai-Holler"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "By the way, welcome to the project and thanks for the great write-up!",
      "created_at" : "2022-04-14T21:38:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24827#issuecomment-1099650812",
      "id" : 1099650812,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24827",
      "node_id" : "IC_kwDOABII585Bi1b8",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1099650812/reactions"
      },
      "updated_at" : "2022-04-14T21:38:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1099650812",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Casting from sockaddr_storage* -> sockaddr* seems precarious, since they're different sizes, but is there some reason you avoided touching those here as well?\r\n\r\nI guess since we're essentially \"upcasting\" in this case (i.e. the mem allocation referenced by `sockaddr_storage` is larger than `sockaddr`, so the cast pointer will never run into unclaimed memory) it's okay to do this cast. Is that right?",
      "created_at" : "2022-04-14T21:44:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24827#issuecomment-1099654795",
      "id" : 1099654795,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24827",
      "node_id" : "IC_kwDOABII585Bi2aL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1099654795/reactions"
      },
      "updated_at" : "2022-04-14T21:44:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1099654795",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "The remaining casts to `sockaddr*` are unavoidable and safe because we are calling into the external C APIs which expect us to do that cast.\r\n\r\nGood call on some wrapper functions. I wrote them and I'm a lot happier with the result. Templating didn't work out because  (1) in the load functions I ended up needing to check the protocol type for safety and (2) in general I didn't want to be memcpy'ing into templated types.\r\n\r\nWe'll see how the CI does but I'm really happy with the new state of the PR, think we're in good shape.",
      "created_at" : "2022-04-15T02:23:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24827#issuecomment-1099791554",
      "id" : 1099791554,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24827",
      "node_id" : "IC_kwDOABII585BjXzC",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1099791554/reactions"
      },
      "updated_at" : "2022-04-15T02:23:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1099791554",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2466893?v=4",
         "events_url" : "https://api.github.com/users/Adlai-Holler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Adlai-Holler/followers",
         "following_url" : "https://api.github.com/users/Adlai-Holler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Adlai-Holler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Adlai-Holler",
         "id" : 2466893,
         "login" : "Adlai-Holler",
         "node_id" : "MDQ6VXNlcjI0NjY4OTM=",
         "organizations_url" : "https://api.github.com/users/Adlai-Holler/orgs",
         "received_events_url" : "https://api.github.com/users/Adlai-Holler/received_events",
         "repos_url" : "https://api.github.com/users/Adlai-Holler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Adlai-Holler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Adlai-Holler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Adlai-Holler"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Ping â I know reviewers are busy but it seems like we're really close! ð  I just swapped the direct `memcpy`'s out for function wrappers so it's more of a drop-in replacement.",
      "created_at" : "2022-04-25T12:28:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24827#issuecomment-1108507849",
      "id" : 1108507849,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24827",
      "node_id" : "IC_kwDOABII585CEnzJ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1108507849/reactions"
      },
      "updated_at" : "2022-04-25T12:28:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1108507849",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2466893?v=4",
         "events_url" : "https://api.github.com/users/Adlai-Holler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Adlai-Holler/followers",
         "following_url" : "https://api.github.com/users/Adlai-Holler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Adlai-Holler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Adlai-Holler",
         "id" : 2466893,
         "login" : "Adlai-Holler",
         "node_id" : "MDQ6VXNlcjI0NjY4OTM=",
         "organizations_url" : "https://api.github.com/users/Adlai-Holler/orgs",
         "received_events_url" : "https://api.github.com/users/Adlai-Holler/received_events",
         "repos_url" : "https://api.github.com/users/Adlai-Holler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Adlai-Holler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Adlai-Holler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Adlai-Holler"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Good call @jamesob! I applied your patch and made a few readability changes to keep the diff minimal.",
      "created_at" : "2022-05-03T13:37:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24827#issuecomment-1116108420",
      "id" : 1116108420,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24827",
      "node_id" : "IC_kwDOABII585ChnaE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1116108420/reactions"
      },
      "updated_at" : "2022-05-03T13:37:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1116108420",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2466893?v=4",
         "events_url" : "https://api.github.com/users/Adlai-Holler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Adlai-Holler/followers",
         "following_url" : "https://api.github.com/users/Adlai-Holler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Adlai-Holler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Adlai-Holler",
         "id" : 2466893,
         "login" : "Adlai-Holler",
         "node_id" : "MDQ6VXNlcjI0NjY4OTM=",
         "organizations_url" : "https://api.github.com/users/Adlai-Holler/orgs",
         "received_events_url" : "https://api.github.com/users/Adlai-Holler/received_events",
         "repos_url" : "https://api.github.com/users/Adlai-Holler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Adlai-Holler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Adlai-Holler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Adlai-Holler"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-05-24T17:49:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24827#issuecomment-1136259385",
      "id" : 1136259385,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24827",
      "node_id" : "IC_kwDOABII585DufE5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1136259385/reactions"
      },
      "updated_at" : "2022-05-24T17:49:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1136259385",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "What about using _placement new_ to change the dynamic type of the object?\r\n\r\nCorrect me if I am wrong, if we have:\r\n\r\n```cpp\r\nstruct S1 {\r\n    int x;\r\n};\r\n\r\nstruct S2 {\r\n    int x;\r\n};\r\n\r\nS1 s1;\r\nS2* s2_ptr = reinterpret_cast<S2*>(&s1);\r\ns2_ptr->x = 5; // UB because the S1 object is accessed as S2\r\n```\r\n\r\nbut the following is ok because it changes the dynamic type of the object to S2:\r\n\r\n```cpp\r\nS1 s1;\r\nS2* s2_ptr = new (&s1) S2;\r\ns2_ptr->x = 5; // ok\r\n```\r\n\r\nHere is an alternative patch that uses that approach. It is much smaller because it just replaces e.g. `(sockaddr_in*)foo` with `SockAddrCast<sockaddr_in>(foo)`:\r\n\r\n<details>\r\n<summary>[patch] placement new typecast</summary>\r\n\r\n```diff\r\ndiff --git a/src/net.cpp b/src/net.cpp\r\nindex c37d90519c..b3265dc5dc 100644\r\n--- a/src/net.cpp\r\n+++ b/src/net.cpp\r\n@@ -427,13 +427,13 @@ static CAddress GetBindAddress(const Sock& sock)\r\n {\r\n     CAddress addr_bind;\r\n     struct sockaddr_storage sockaddr_bind;\r\n     socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);\r\n     if (sock.Get() != INVALID_SOCKET) {\r\n         if (!sock.GetSockName((struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\r\n-            addr_bind.SetSockAddr((const struct sockaddr*)&sockaddr_bind);\r\n+            addr_bind.SetSockAddr(sockaddr_bind);\r\n         } else {\r\n             LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"getsockname failed\\n\");\r\n         }\r\n     }\r\n     return addr_bind;\r\n }\r\n@@ -920,13 +920,13 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\r\n         if (nErr != WSAEWOULDBLOCK) {\r\n             LogPrintf(\"socket error accept failed: %s\\n\", NetworkErrorString(nErr));\r\n         }\r\n         return;\r\n     }\r\n \r\n-    if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr)) {\r\n+    if (!addr.SetSockAddr(sockaddr)) {\r\n         LogPrintLevel(BCLog::NET, BCLog::Level::Warning, \"Unknown socket family\\n\");\r\n     } else {\r\n         addr = CAddress{MaybeFlipIPv6toCJDNS(addr), NODE_NONE};\r\n     }\r\n \r\n     const CAddress addr_bind{MaybeFlipIPv6toCJDNS(GetBindAddress(*sock)), NODE_NONE};\r\n@@ -2056,13 +2056,13 @@ bool CConnman::BindListenPort(const CService& addrBind, bilingual_str& strError,\r\n {\r\n     int nOne = 1;\r\n \r\n     // Create socket for listening for incoming connections\r\n     struct sockaddr_storage sockaddr;\r\n     socklen_t len = sizeof(sockaddr);\r\n-    if (!addrBind.GetSockAddr((struct sockaddr*)&sockaddr, &len))\r\n+    if (!addrBind.GetSockAddr(&sockaddr, &len))\r\n     {\r\n         strError = strprintf(Untranslated(\"Bind address family for %s not supported\"), addrBind.ToString());\r\n         LogPrintLevel(BCLog::NET, BCLog::Level::Error, \"%s\\n\", strError.original);\r\n         return false;\r\n     }\r\n \r\n@@ -2151,21 +2151,19 @@ void Discover()\r\n             if (ifa->ifa_addr == nullptr) continue;\r\n             if ((ifa->ifa_flags & IFF_UP) == 0) continue;\r\n             if (strcmp(ifa->ifa_name, \"lo\") == 0) continue;\r\n             if (strcmp(ifa->ifa_name, \"lo0\") == 0) continue;\r\n             if (ifa->ifa_addr->sa_family == AF_INET)\r\n             {\r\n-                struct sockaddr_in* s4 = (struct sockaddr_in*)(ifa->ifa_addr);\r\n-                CNetAddr addr(s4->sin_addr);\r\n+                CNetAddr addr(SockAddrCast<sockaddr_in>(ifa->ifa_addr)->sin_addr);\r\n                 if (AddLocal(addr, LOCAL_IF))\r\n                     LogPrintf(\"%s: IPv4 %s: %s\\n\", __func__, ifa->ifa_name, addr.ToString());\r\n             }\r\n             else if (ifa->ifa_addr->sa_family == AF_INET6)\r\n             {\r\n-                struct sockaddr_in6* s6 = (struct sockaddr_in6*)(ifa->ifa_addr);\r\n-                CNetAddr addr(s6->sin6_addr);\r\n+                CNetAddr addr(SockAddrCast<sockaddr_in6>(ifa->ifa_addr)->sin6_addr);\r\n                 if (AddLocal(addr, LOCAL_IF))\r\n                     LogPrintf(\"%s: IPv6 %s: %s\\n\", __func__, ifa->ifa_name, addr.ToString());\r\n             }\r\n         }\r\n         freeifaddrs(myaddrs);\r\n     }\r\ndiff --git a/src/netaddress.cpp b/src/netaddress.cpp\r\nindex ca148bfa51..b997dc6ee9 100644\r\n--- a/src/netaddress.cpp\r\n+++ b/src/netaddress.cpp\r\n@@ -831,20 +831,20 @@ CService::CService(const struct sockaddr_in& addr) : CNetAddr(addr.sin_addr), po\r\n \r\n CService::CService(const struct sockaddr_in6 &addr) : CNetAddr(addr.sin6_addr, addr.sin6_scope_id), port(ntohs(addr.sin6_port))\r\n {\r\n    assert(addr.sin6_family == AF_INET6);\r\n }\r\n \r\n-bool CService::SetSockAddr(const struct sockaddr *paddr)\r\n+bool CService::SetSockAddr(const sockaddr_storage& addr)\r\n {\r\n-    switch (paddr->sa_family) {\r\n+    switch (addr.ss_family) {\r\n     case AF_INET:\r\n-        *this = CService(*(const struct sockaddr_in*)paddr);\r\n+        *this = CService(*SockAddrCast<sockaddr_in>(&addr));\r\n         return true;\r\n     case AF_INET6:\r\n-        *this = CService(*(const struct sockaddr_in6*)paddr);\r\n+        *this = CService(*SockAddrCast<sockaddr_in6>(&addr));\r\n         return true;\r\n     default:\r\n         return false;\r\n     }\r\n }\r\n \r\n@@ -872,32 +872,32 @@ bool operator<(const CService& a, const CService& b)\r\n  *                        parameter might change after calling this function if\r\n  *                        the size of the corresponding address structure\r\n  *                        changed.\r\n  *\r\n  * @returns Whether or not the operation was successful.\r\n  */\r\n-bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const\r\n+bool CService::GetSockAddr(struct sockaddr_storage* paddr, socklen_t* addrlen) const\r\n {\r\n+    memset(paddr, 0x0, *addrlen);\r\n+\r\n     if (IsIPv4()) {\r\n         if (*addrlen < (socklen_t)sizeof(struct sockaddr_in))\r\n             return false;\r\n         *addrlen = sizeof(struct sockaddr_in);\r\n-        struct sockaddr_in *paddrin = (struct sockaddr_in*)paddr;\r\n-        memset(paddrin, 0, *addrlen);\r\n+        sockaddr_in* paddrin = SockAddrCast<sockaddr_in>(paddr);\r\n         if (!GetInAddr(&paddrin->sin_addr))\r\n             return false;\r\n         paddrin->sin_family = AF_INET;\r\n         paddrin->sin_port = htons(port);\r\n         return true;\r\n     }\r\n     if (IsIPv6() || IsCJDNS()) {\r\n         if (*addrlen < (socklen_t)sizeof(struct sockaddr_in6))\r\n             return false;\r\n         *addrlen = sizeof(struct sockaddr_in6);\r\n-        struct sockaddr_in6 *paddrin6 = (struct sockaddr_in6*)paddr;\r\n-        memset(paddrin6, 0, *addrlen);\r\n+        sockaddr_in6* paddrin6 = SockAddrCast<sockaddr_in6>(paddr);\r\n         if (!GetIn6Addr(&paddrin6->sin6_addr))\r\n             return false;\r\n         paddrin6->sin6_scope_id = m_scope_id;\r\n         paddrin6->sin6_family = AF_INET6;\r\n         paddrin6->sin6_port = htons(port);\r\n         return true;\r\ndiff --git a/src/netaddress.h b/src/netaddress.h\r\nindex 47ba045334..e286b93a41 100644\r\n--- a/src/netaddress.h\r\n+++ b/src/netaddress.h\r\n@@ -525,14 +525,14 @@ protected:\r\n public:\r\n     CService();\r\n     CService(const CNetAddr& ip, uint16_t port);\r\n     CService(const struct in_addr& ipv4Addr, uint16_t port);\r\n     explicit CService(const struct sockaddr_in& addr);\r\n     uint16_t GetPort() const;\r\n-    bool GetSockAddr(struct sockaddr* paddr, socklen_t* addrlen) const;\r\n-    bool SetSockAddr(const struct sockaddr* paddr);\r\n+    bool GetSockAddr(sockaddr_storage* paddr, socklen_t* addrlen) const;\r\n+    bool SetSockAddr(const sockaddr_storage& addr);\r\n     friend bool operator==(const CService& a, const CService& b);\r\n     friend bool operator!=(const CService& a, const CService& b) { return !(a == b); }\r\n     friend bool operator<(const CService& a, const CService& b);\r\n     std::vector<unsigned char> GetKey() const;\r\n     std::string ToString() const;\r\n     std::string ToStringPort() const;\r\n@@ -573,7 +573,36 @@ public:\r\n \r\n private:\r\n     const uint64_t m_salt_k0;\r\n     const uint64_t m_salt_k1;\r\n };\r\n \r\n+/**\r\n+ * Cast sockaddr or sockaddr_storage to sockaddr_in or sockaddr_in6.\r\n+ * This is as safe as the traditional typecast:\r\n+ * @code{.cpp}\r\n+ * sockaddr_storage from;\r\n+ * sockaddr_in* to_ptr = (sockaddr_in*)&from;\r\n+ * to_ptr->sin_family = ...\r\n+ * @endcode\r\n+ * except that it avoids the undefined behavior of the last line above by not\r\n+ * breaking the strict aliasing rules.\r\n+ * Placement new changes the dynamic type of the object to `To`, so that it is\r\n+ * safe to access it as `To` afterwards.\r\n+ */\r\n+template <typename To, typename From>\r\n+static inline To* SockAddrCast(const From* ptr)\r\n+{\r\n+    // Make sure nobody abuses this function for other types.\r\n+    static_assert(\r\n+        std::is_same<From, sockaddr>::value ||\r\n+        std::is_same<From, sockaddr_storage>::value);\r\n+    static_assert(\r\n+        std::is_same<To, sockaddr_in>::value ||\r\n+        std::is_same<To, sockaddr_in6>::value);\r\n+    // Make sure that the placement new will not modify the memory pointed by `ptr`.\r\n+    static_assert(std::is_trivially_default_constructible<To>::value);\r\n+\r\n+    return new (const_cast<From*>(ptr)) To;\r\n+}\r\n+\r\n #endif // BITCOIN_NETADDRESS_H\r\ndiff --git a/src/netbase.cpp b/src/netbase.cpp\r\nindex 030f462ed9..ca59230034 100644\r\n--- a/src/netbase.cpp\r\n+++ b/src/netbase.cpp\r\n@@ -65,17 +65,17 @@ std::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_loo\r\n     // Traverse the linked list starting with ai_trav.\r\n     addrinfo* ai_trav{ai_res};\r\n     std::vector<CNetAddr> resolved_addresses;\r\n     while (ai_trav != nullptr) {\r\n         if (ai_trav->ai_family == AF_INET) {\r\n             assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in));\r\n-            resolved_addresses.emplace_back(reinterpret_cast<sockaddr_in*>(ai_trav->ai_addr)->sin_addr);\r\n+            resolved_addresses.emplace_back(SockAddrCast<sockaddr_in>(ai_trav->ai_addr)->sin_addr);\r\n         }\r\n         if (ai_trav->ai_family == AF_INET6) {\r\n             assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in6));\r\n-            const sockaddr_in6* s6{reinterpret_cast<sockaddr_in6*>(ai_trav->ai_addr)};\r\n+            const sockaddr_in6* s6 = SockAddrCast<sockaddr_in6>(ai_trav->ai_addr);\r\n             resolved_addresses.emplace_back(s6->sin6_addr, s6->sin6_scope_id);\r\n         }\r\n         ai_trav = ai_trav->ai_next;\r\n     }\r\n     freeaddrinfo(ai_res);\r\n \r\n@@ -485,13 +485,13 @@ bool Socks5(const std::string& strDest, uint16_t port, const ProxyCredentials* a\r\n \r\n std::unique_ptr<Sock> CreateSockTCP(const CService& address_family)\r\n {\r\n     // Create a sockaddr from the specified service.\r\n     struct sockaddr_storage sockaddr;\r\n     socklen_t len = sizeof(sockaddr);\r\n-    if (!address_family.GetSockAddr((struct sockaddr*)&sockaddr, &len)) {\r\n+    if (!address_family.GetSockAddr(&sockaddr, &len)) {\r\n         LogPrintf(\"Cannot create socket for %s: unsupported network\\n\", address_family.ToString());\r\n         return nullptr;\r\n     }\r\n \r\n     // Create a TCP socket in the address family of the specified service.\r\n     SOCKET hSocket = socket(((struct sockaddr*)&sockaddr)->sa_family, SOCK_STREAM, IPPROTO_TCP);\r\n@@ -550,13 +550,13 @@ bool ConnectSocketDirectly(const CService &addrConnect, const Sock& sock, int nT\r\n     struct sockaddr_storage sockaddr;\r\n     socklen_t len = sizeof(sockaddr);\r\n     if (sock.Get() == INVALID_SOCKET) {\r\n         LogPrintf(\"Cannot connect to %s: invalid socket\\n\", addrConnect.ToString());\r\n         return false;\r\n     }\r\n-    if (!addrConnect.GetSockAddr((struct sockaddr*)&sockaddr, &len)) {\r\n+    if (!addrConnect.GetSockAddr(&sockaddr, &len)) {\r\n         LogPrintf(\"Cannot connect to %s: unsupported network\\n\", addrConnect.ToString());\r\n         return false;\r\n     }\r\n \r\n     // Connect to the addrConnect service on the hSocket socket.\r\n     if (sock.Connect(reinterpret_cast<struct sockaddr*>(&sockaddr), len) == SOCKET_ERROR) {\r\ndiff --git a/src/test/util/net.h b/src/test/util/net.h\r\nindex 34ab9958c6..eb4c283cf8 100644\r\n--- a/src/test/util/net.h\r\n+++ b/src/test/util/net.h\r\n@@ -132,13 +132,13 @@ public:\r\n         if (addr != nullptr) {\r\n             // Pretend all connections come from 5.5.5.5:6789\r\n             memset(addr, 0x00, *addr_len);\r\n             const socklen_t write_len = static_cast<socklen_t>(sizeof(sockaddr_in));\r\n             if (*addr_len >= write_len) {\r\n                 *addr_len = write_len;\r\n-                sockaddr_in* addr_in = reinterpret_cast<sockaddr_in*>(addr);\r\n+                sockaddr_in* addr_in = SockAddrCast<sockaddr_in>(addr);\r\n                 addr_in->sin_family = AF_INET;\r\n                 memset(&addr_in->sin_addr, 0x05, sizeof(addr_in->sin_addr));\r\n                 addr_in->sin_port = htons(6789);\r\n             }\r\n         }\r\n         return std::make_unique<StaticContentsSock>(\"\");\r\ndiff --git a/src/torcontrol.cpp b/src/torcontrol.cpp\r\nindex d6e792a55f..c9b6fc289f 100644\r\n--- a/src/torcontrol.cpp\r\n+++ b/src/torcontrol.cpp\r\n@@ -137,13 +137,13 @@ bool TorControlConnection::Connect(const std::string& tor_control_center, const\r\n         LogPrintf(\"tor: Failed to look up control center %s\\n\", tor_control_center);\r\n         return false;\r\n     }\r\n \r\n     struct sockaddr_storage control_address;\r\n     socklen_t control_address_len = sizeof(control_address);\r\n-    if (!control_service.GetSockAddr(reinterpret_cast<struct sockaddr*>(&control_address), &control_address_len)) {\r\n+    if (!control_service.GetSockAddr(&control_address, &control_address_len)) {\r\n         LogPrintf(\"tor: Error parsing socket address %s\\n\", tor_control_center);\r\n         return false;\r\n     }\r\n \r\n     // Create a new socket, set up callbacks and enable notification bits\r\n     b_conn = bufferevent_socket_new(base, -1, BEV_OPT_CLOSE_ON_FREE);\r\n```\r\n\r\n</details>\r\n",
      "created_at" : "2022-07-12T16:21:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24827#issuecomment-1181979058",
      "id" : 1181979058,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24827",
      "node_id" : "IC_kwDOABII585Gc5Gy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1181979058/reactions"
      },
      "updated_at" : "2022-07-12T16:21:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1181979058",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> The remaining casts to `sockaddr*` are unavoidable and safe because we are calling into the external C APIs which expect us to do that cast.\r\n\r\nI understand the \"unavoidable\" but I don't understand the \"safe\". Do you mean that it is safe just because it goes to external C API? I made the following experiment which shows the opposite (both with gcc 12 and clang 15):\r\n\r\n* `s.h`\r\n```cpp\r\nstruct S1 {\r\n    int x;\r\n};\r\n\r\nstruct S2 {\r\n    int x;\r\n};\r\n```\r\n\r\n* `f.c`\r\n```c\r\n#include \"s.h\"\r\n\r\nint f(struct S1* s1, struct S2* s2)\r\n{\r\n    s1->x = 5;\r\n    s2->x = 6;\r\n    return s1->x;\r\n}\r\n```\r\n\r\n* `main.cc`\r\n```cpp\r\n#include \"s.h\"\r\n\r\nextern \"C\" int f(S1*, S2*);\r\n\r\nint main(int, char**)\r\n{\r\n    S1 s1;\r\n    std::cout << f(&s1, (S2*)&s1) << std::endl;\r\n    return 0;\r\n}\r\n```\r\n\r\nCompile with `-O3` and `5` is printed. Change the type of the second argument to `S1` and `6` is printed.\r\n\r\nI think the `bind(2)` API, strictly speaking implies UB, but it is safe because the `bind()` function never does something like the above, nor we do before passing it the argument.\r\n\r\nThere is an example in [`bind(2)`](https://linux.die.net/man/2/bind) which interprets `sockaddr_un` as `sockaddr` - that is also UB according to the standard of strict aliasing rules<sup>[1](https://gist.github.com/shafik/848ae25ee209f698763cffee272a58f8)</sup> <sup>[2](https://developers.redhat.com/blog/2020/06/02/the-joys-and-perils-of-c-and-c-aliasing-part-1)</sup>, right? What about `memcpy()` where we cast anything to `void*`, also UB?\r\n",
      "created_at" : "2022-07-14T09:09:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24827#issuecomment-1184196333",
      "id" : 1184196333,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24827",
      "node_id" : "IC_kwDOABII585GlWbt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1184196333/reactions"
      },
      "updated_at" : "2022-07-14T09:13:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1184196333",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@Adlai-Holler mind rebasing?",
      "created_at" : "2022-08-05T13:49:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24827#issuecomment-1206480120",
      "id" : 1206480120,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24827",
      "node_id" : "IC_kwDOABII585H6Wz4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1206480120/reactions"
      },
      "updated_at" : "2022-08-05T13:49:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1206480120",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/755825?v=4",
         "events_url" : "https://api.github.com/users/adamjonas/events{/privacy}",
         "followers_url" : "https://api.github.com/users/adamjonas/followers",
         "following_url" : "https://api.github.com/users/adamjonas/following{/other_user}",
         "gists_url" : "https://api.github.com/users/adamjonas/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/adamjonas",
         "id" : 755825,
         "login" : "adamjonas",
         "node_id" : "MDQ6VXNlcjc1NTgyNQ==",
         "organizations_url" : "https://api.github.com/users/adamjonas/orgs",
         "received_events_url" : "https://api.github.com/users/adamjonas/received_events",
         "repos_url" : "https://api.github.com/users/adamjonas/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/adamjonas/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/adamjonas"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK on fixing UB here (and getting rid of these reinterpret_casts).",
      "created_at" : "2022-08-05T13:58:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24827#issuecomment-1206489590",
      "id" : 1206489590,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24827",
      "node_id" : "IC_kwDOABII585H6ZH2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1206489590/reactions"
      },
      "updated_at" : "2022-08-05T13:58:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1206489590",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Are you still working on this?",
      "created_at" : "2022-10-12T19:10:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24827#issuecomment-1276621345",
      "id" : 1276621345,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24827",
      "node_id" : "IC_kwDOABII585MF7Ih",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1276621345/reactions"
      },
      "updated_at" : "2022-10-12T19:10:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1276621345",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   }
]
