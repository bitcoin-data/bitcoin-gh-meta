[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [rajarshimaitra](https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1136199154), [kristapsk](https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1138361638) |\n| Stale ACK | [1440000bytes](https://github.com/bitcoin/bitcoin/pull/24897#pullrequestreview-1041092565) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#bitcoin-core/gui/650](https://github.com/bitcoin-core/gui/pull/650) (Add Import to Wallet GUI by KolbyML)\n* [#27215](https://github.com/bitcoin/bitcoin/pull/27215) (wallet: Turn `destdata` entries into  `CAddressBookData` fields by achow101)\n* [#26951](https://github.com/bitcoin/bitcoin/pull/26951) (wallet: improve rescan performance 640% by pstratem)\n* [#26858](https://github.com/bitcoin/bitcoin/pull/26858) (wallet: Use defined purposes instead of inlining by aureleoules)\n* [#26840](https://github.com/bitcoin/bitcoin/pull/26840) (refactor: importpubkey, importprivkey, importaddress, importmulti, and importdescriptors rpc by KolbyML)\n* [#26836](https://github.com/bitcoin/bitcoin/pull/26836) (wallet: finish addressbook encapsulation by furszy)\n* [#26728](https://github.com/bitcoin/bitcoin/pull/26728) (wallet: Have the wallet store the key for automatically generated descriptors by achow101)\n* [#26177](https://github.com/bitcoin/bitcoin/pull/26177) (refactor / kernel: Move non-gArgs chainparams functionality to kernel by TheCharlatan)\n* [#26129](https://github.com/bitcoin/bitcoin/pull/26129) (wallet, refactor: FundTransaction(): return out-params as `util::Result` structure by theStack)\n* [#26094](https://github.com/bitcoin/bitcoin/pull/26094) (rpc: Return block hash & height in getbalances, gettransaction and getwalletinfo by aureleoules)\n* [#26076](https://github.com/bitcoin/bitcoin/pull/26076) (Switch hardened derivation marker to h (in normalized descriptors and new wallets) by Sjors)\n* [#26008](https://github.com/bitcoin/bitcoin/pull/26008) (wallet: cache IsMine scriptPubKeys to improve performance of descriptor wallets by achow101)\n* [#25991](https://github.com/bitcoin/bitcoin/pull/25991) (Wallet: Add foreign_outputs metadata to support CoinJoin transactions by luke-jr)\n* [#25907](https://github.com/bitcoin/bitcoin/pull/25907) (wallet: rpc to add automatically generated descriptors by achow101)\n* [#25806](https://github.com/bitcoin/bitcoin/pull/25806) (wallet: group outputs only once, decouple it from Coin Selection by furszy)\n* [#25766](https://github.com/bitcoin/bitcoin/pull/25766) (wallet: Include a signature with encrypted keys to mitigate a wallet scam by achow101)\n* [#25722](https://github.com/bitcoin/bitcoin/pull/25722) (refactor: Use util::Result class for wallet loading by ryanofsky)\n* [#25634](https://github.com/bitcoin/bitcoin/pull/25634) (wallet, tests: Expand and test when the blank wallet flag should be un/set by achow101)\n* [#25620](https://github.com/bitcoin/bitcoin/pull/25620) (wallet: Introduce AddressBookManager by furszy)\n* [#25297](https://github.com/bitcoin/bitcoin/pull/25297) (wallet: group independent db writes on single batched db transaction by furszy)\n* [#25273](https://github.com/bitcoin/bitcoin/pull/25273) (wallet: Pass through transaction locktime and preset input sequences and scripts to CreateTransaction by achow101)\n* [#24914](https://github.com/bitcoin/bitcoin/pull/24914) (wallet: Load database records in a particular order by achow101)\n* [#23561](https://github.com/bitcoin/bitcoin/pull/23561) (BIP324: Handshake prerequisites by dhruv)\n* [#23432](https://github.com/bitcoin/bitcoin/pull/23432) (BIP324: CKey encode/decode to elligator-swift by dhruv)\n* [#22838](https://github.com/bitcoin/bitcoin/pull/22838) (descriptors: Be able to specify change and receiving in a single descriptor string by achow101)\n* [#22341](https://github.com/bitcoin/bitcoin/pull/22341) (rpc: add getxpub by Sjors)\n* [#19690](https://github.com/bitcoin/bitcoin/pull/19690) (util: improve FindByte() performance by LarryRuane)\n* [#19461](https://github.com/bitcoin/bitcoin/pull/19461) (multiprocess: Add bitcoin-gui -ipcconnect option by ryanofsky)\n* [#19460](https://github.com/bitcoin/bitcoin/pull/19460) (multiprocess: Add bitcoin-wallet -ipcconnect option by ryanofsky)\n* [#10102](https://github.com/bitcoin/bitcoin/pull/10102) (Multiprocess bitcoin by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2022-04-17T04:48:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1100803007",
      "id" : 1100803007,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585BnOu_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1100803007/reactions"
      },
      "updated_at" : "2023-03-07T05:42:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1100803007",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2022-04-18T01:54:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1101019295",
      "id" : 1101019295,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585BoDif",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1101019295/reactions"
      },
      "updated_at" : "2022-04-18T01:54:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1101019295",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r852141704"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852141704"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm just trying to understand the protocol better. This function is called \"create tweaked pubkey\" but what seems more significant about it to me is that it also provides the recipient with the private key they need to spend from the silent payment output. Is that correct?",
      "commit_id" : "b97fee2f445d396fdb62d4468c214320745519be",
      "created_at" : "2022-04-18T14:08:03Z",
      "diff_hunk" : "@@ -0,0 +1,115 @@\n+#include \"silentpayment.h\"\n+\n+#include <key_io.h>\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+#include <secp256k1_extrakeys.h>\n+\n+namespace silentpayment {\n+\n+secp256k1_pubkey Sender::CreateTweakedPubkey(\n+    const secp256k1_context* ctx,\n+    const secp256k1_xonly_pubkey recipient_public_key,\n+    const unsigned char sender_secret_key[32])\n+{\n+    unsigned char shared_secret[32];\n+\n+    secp256k1_pubkey output_pubkey;\n+\n+    int return_val;\n+\n+    return_val = secp256k1_ecdh_xonly(ctx, shared_secret, &recipient_public_key, sender_secret_key, NULL, NULL);\n+    assert(return_val);\n+\n+    return_val = secp256k1_ec_seckey_verify(secp256k1_context_no_precomp, shared_secret);\n+    assert(return_val);\n+\n+    return_val = secp256k1_xonly_pubkey_tweak_add(ctx, &output_pubkey, &recipient_public_key, shared_secret);\n+    assert(return_val);\n+\n+    return output_pubkey;\n+}\n+\n+XOnlyPubKey Sender::CreateSilentPaymentAddress(\n+    const CKey& sender_secret_key,\n+    const XOnlyPubKey& _recipient_public_key)\n+{\n+    int return_val;\n+\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    secp256k1_xonly_pubkey recipient_public_key;\n+    return_val = secp256k1_xonly_pubkey_parse(ctx, &recipient_public_key, _recipient_public_key.data());\n+    assert(return_val);\n+\n+    secp256k1_pubkey sender_output_pubkey;\n+    sender_output_pubkey = CreateTweakedPubkey(ctx, recipient_public_key, sender_secret_key.data());\n+\n+    // Test the key\n+    size_t len;\n+    unsigned char sender_serialized_output_pubkey[33];\n+    len = sizeof(sender_serialized_output_pubkey);\n+    return_val = secp256k1_ec_pubkey_serialize(ctx, sender_serialized_output_pubkey, &len, &sender_output_pubkey, SECP256K1_EC_COMPRESSED);\n+    assert(return_val);\n+\n+    CPubKey pubKey = CPubKey(sender_serialized_output_pubkey);\n+\n+    assert(pubKey.IsFullyValid());\n+\n+    XOnlyPubKey xOnlyPubKey = XOnlyPubKey(pubKey);\n+\n+    return xOnlyPubKey;\n+}\n+\n+void Recipient::CreateTweakedPubkey(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r852141704",
      "id" : 852141704,
      "line" : 64,
      "node_id" : "PRRC_kwDOABII584yyqaI",
      "original_commit_id" : "b97fee2f445d396fdb62d4468c214320745519be",
      "original_line" : 64,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/wallet/silentpayment.cpp",
      "position" : 64,
      "pull_request_review_id" : 944439250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852141704/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-18T14:08:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852141704",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2084648?v=4",
         "events_url" : "https://api.github.com/users/pinheadmz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pinheadmz/followers",
         "following_url" : "https://api.github.com/users/pinheadmz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pinheadmz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pinheadmz",
         "id" : 2084648,
         "login" : "pinheadmz",
         "node_id" : "MDQ6VXNlcjIwODQ2NDg=",
         "organizations_url" : "https://api.github.com/users/pinheadmz/orgs",
         "received_events_url" : "https://api.github.com/users/pinheadmz/received_events",
         "repos_url" : "https://api.github.com/users/pinheadmz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pinheadmz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pinheadmz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r852184789"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852184789"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes. I defined this name when using another approach, but that's the idea.\r\n\r\n`secp256k1_keypair_xonly_tweak_add` returns both the tweaked private and public keys in the `recipient_keypair` parameter. So the recipient can spend the output.",
      "commit_id" : "b97fee2f445d396fdb62d4468c214320745519be",
      "created_at" : "2022-04-18T15:10:11Z",
      "diff_hunk" : "@@ -0,0 +1,115 @@\n+#include \"silentpayment.h\"\n+\n+#include <key_io.h>\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+#include <secp256k1_extrakeys.h>\n+\n+namespace silentpayment {\n+\n+secp256k1_pubkey Sender::CreateTweakedPubkey(\n+    const secp256k1_context* ctx,\n+    const secp256k1_xonly_pubkey recipient_public_key,\n+    const unsigned char sender_secret_key[32])\n+{\n+    unsigned char shared_secret[32];\n+\n+    secp256k1_pubkey output_pubkey;\n+\n+    int return_val;\n+\n+    return_val = secp256k1_ecdh_xonly(ctx, shared_secret, &recipient_public_key, sender_secret_key, NULL, NULL);\n+    assert(return_val);\n+\n+    return_val = secp256k1_ec_seckey_verify(secp256k1_context_no_precomp, shared_secret);\n+    assert(return_val);\n+\n+    return_val = secp256k1_xonly_pubkey_tweak_add(ctx, &output_pubkey, &recipient_public_key, shared_secret);\n+    assert(return_val);\n+\n+    return output_pubkey;\n+}\n+\n+XOnlyPubKey Sender::CreateSilentPaymentAddress(\n+    const CKey& sender_secret_key,\n+    const XOnlyPubKey& _recipient_public_key)\n+{\n+    int return_val;\n+\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    secp256k1_xonly_pubkey recipient_public_key;\n+    return_val = secp256k1_xonly_pubkey_parse(ctx, &recipient_public_key, _recipient_public_key.data());\n+    assert(return_val);\n+\n+    secp256k1_pubkey sender_output_pubkey;\n+    sender_output_pubkey = CreateTweakedPubkey(ctx, recipient_public_key, sender_secret_key.data());\n+\n+    // Test the key\n+    size_t len;\n+    unsigned char sender_serialized_output_pubkey[33];\n+    len = sizeof(sender_serialized_output_pubkey);\n+    return_val = secp256k1_ec_pubkey_serialize(ctx, sender_serialized_output_pubkey, &len, &sender_output_pubkey, SECP256K1_EC_COMPRESSED);\n+    assert(return_val);\n+\n+    CPubKey pubKey = CPubKey(sender_serialized_output_pubkey);\n+\n+    assert(pubKey.IsFullyValid());\n+\n+    XOnlyPubKey xOnlyPubKey = XOnlyPubKey(pubKey);\n+\n+    return xOnlyPubKey;\n+}\n+\n+void Recipient::CreateTweakedPubkey(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r852184789",
      "id" : 852184789,
      "in_reply_to_id" : 852141704,
      "line" : 64,
      "node_id" : "PRRC_kwDOABII584yy07V",
      "original_commit_id" : "b97fee2f445d396fdb62d4468c214320745519be",
      "original_line" : 64,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/wallet/silentpayment.cpp",
      "position" : 64,
      "pull_request_review_id" : 944500372,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852184789/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-18T15:11:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852184789",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-04-18T17:21:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1101583051",
      "id" : 1101583051,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585BqNLL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1101583051/reactions"
      },
      "updated_at" : "2022-04-18T17:21:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1101583051",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Need some way to avoid users trying to send a silent payment to a wallet that doesn't support it... am I missing something?",
      "created_at" : "2022-04-19T19:06:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1102990584",
      "id" : 1102990584,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585Bvkz4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1102990584/reactions"
      },
      "updated_at" : "2022-04-19T19:06:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1102990584",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@luke-jr Yes, it will need to be further discussed if this concept proves to be valid.\r\n\r\nIn this PR, all descriptor wallets support silent transactions as the `SILENT_PAYMENT` flag can be enabled or disabled at any time. The `rescanblockchain` RPC can be used to retrieve previous silent payments.\r\n\r\nAs only Taproot addresses can be used for silent payments and only descriptor wallets support Taproot, this may suffice, but it certainly needs further discussion.",
      "created_at" : "2022-04-20T07:12:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1103548839",
      "id" : 1103548839,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585BxtGn",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1103548839/reactions"
      },
      "updated_at" : "2022-04-20T07:26:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1103548839",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "NONE",
      "body" : ">Need some way to avoid users trying to send a silent payment to a wallet that doesn't support it\r\n\r\n@luke-jr When the recipient publishes their silent payment address, it needs to be clear that it is not a regular taproot address. The address format should be distinct. The tweaked silent payment address that is generated by the sender and is ultimately committed on-chain should be indistinguishable from a regular taproot output.\r\n\r\n>only Taproot addresses can be used for silent payments\r\n\r\n@w0xlt Note that nothing about the silent payment scheme is exclusive to taproot, but regardless I do think it's good to limit the specifications to creating taproot outputs only as it encourages taproot use and means transactions without taproot outputs (albeit hopefully rare in the eventual future) don't need to be scanned.",
      "created_at" : "2022-04-20T08:45:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1103635123",
      "id" : 1103635123,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585ByCKz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1103635123/reactions"
      },
      "updated_at" : "2022-04-20T08:45:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1103635123",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/9066803?v=4",
         "events_url" : "https://api.github.com/users/RubenSomsen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RubenSomsen/followers",
         "following_url" : "https://api.github.com/users/RubenSomsen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RubenSomsen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RubenSomsen",
         "id" : 9066803,
         "login" : "RubenSomsen",
         "node_id" : "MDQ6VXNlcjkwNjY4MDM=",
         "organizations_url" : "https://api.github.com/users/RubenSomsen/orgs",
         "received_events_url" : "https://api.github.com/users/RubenSomsen/received_events",
         "repos_url" : "https://api.github.com/users/RubenSomsen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RubenSomsen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RubenSomsen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RubenSomsen"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">When the recipient publishes their silent payment address, it needs to be clear that it is not a regular taproot address. The address format should be distinct. \r\n\r\nBut I don't see that in this current spec/code?",
      "created_at" : "2022-04-20T18:00:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1104252903",
      "id" : 1104252903,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585B0Y_n",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1104252903/reactions"
      },
      "updated_at" : "2022-04-20T18:00:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1104252903",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-04-26T18:42:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1110131074",
      "id" : 1110131074,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585CK0GC",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1110131074/reactions"
      },
      "updated_at" : "2022-04-26T18:42:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1110131074",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Need some way to avoid users trying to send a silent payment to a wallet that doesn't support it... am I missing something?\r\n\r\nit's worse than that, AFAIU the address needs to support it not just the wallet -- E.g., what if the Tr key is a NUMS point?\r\n\r\nWorth making a new address type / format so that you never mix the two.",
      "created_at" : "2022-04-28T04:32:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1111735167",
      "id" : 1111735167,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585CQ7t_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1111735167/reactions"
      },
      "updated_at" : "2022-04-28T04:32:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1111735167",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@luke-jr @JeremyRubin  Thanks for the comments. The current version deliberately does not implement a new address/descriptor format. This requires a separate discussion and changes in wallet behavior. And it doesn't make sense to start a discussion about it before the scheme proves itself valid in a viable time.\r\n\r\nCurrently the main focus is to validate the scheme and verify that the performance is viable.",
      "created_at" : "2022-05-16T18:54:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1128022340",
      "id" : 1128022340,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585DPEFE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1128022340/reactions"
      },
      "updated_at" : "2022-05-16T18:54:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1128022340",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I created a short and simple tutorial on how to make silent payments on signet.\r\nhttps://gist.github.com/w0xlt/72390ded95dd797594f80baba5d2e6ee",
      "created_at" : "2022-05-16T18:55:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1128022502",
      "id" : 1128022502,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585DPEHm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1128022502/reactions"
      },
      "updated_at" : "2022-05-16T18:57:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1128022502",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-05-17T12:06:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1128785938",
      "id" : 1128785938,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585DR-gS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1128785938/reactions"
      },
      "updated_at" : "2022-05-17T12:06:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1128785938",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@w0xlt I am sorry if this is documented somewhere, but how do you determine which input carries the public key for ECDH?",
      "created_at" : "2022-05-23T16:47:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1134907552",
      "id" : 1134907552,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585DpVCg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1134907552/reactions"
      },
      "updated_at" : "2022-05-23T16:47:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1134907552",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/42201?v=4",
         "events_url" : "https://api.github.com/users/prusnak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prusnak/followers",
         "following_url" : "https://api.github.com/users/prusnak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prusnak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prusnak",
         "id" : 42201,
         "login" : "prusnak",
         "node_id" : "MDQ6VXNlcjQyMjAx",
         "organizations_url" : "https://api.github.com/users/prusnak/orgs",
         "received_events_url" : "https://api.github.com/users/prusnak/received_events",
         "repos_url" : "https://api.github.com/users/prusnak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prusnak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prusnak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prusnak"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@prusnak It s not well documented as well as being discussed.\r\n\r\nIn the current implementation, for simplicity, [only the first input is used.](https://github.com/w0xlt/bitcoin/blob/8f616acf868bbc75b31bf5170c40fd9957c08e91/src/wallet/spend.cpp#L665)\r\n\r\nThere is a suggestion by @RubenSomsen  to use a hash of all inputs. This would make silent payments compatible with coinjoins.\r\n\r\nThis is a possibility of change if the current version proves viable, since there shouldn't be much difference in performance between the two versions.\r\n\r\nI posted some estimates [here](https://gist.github.com/RubenSomsen/c43b79517e7cb701ebf77eec6dbb46b8?permalink_comment_id=4172737#gistcomment-4172737).",
      "created_at" : "2022-05-23T23:36:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1135241506",
      "id" : 1135241506,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585Dqmki",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1135241506/reactions"
      },
      "updated_at" : "2022-05-23T23:43:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1135241506",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r880324746"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/880324746"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`warning:` comparison of integer expressions of different signedness: âstd::vector<unsigned char>::size_typeâ {aka âlong unsigned intâ} and âintâ [-Wsign-compare]",
      "commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "created_at" : "2022-05-24T10:15:12Z",
      "diff_hunk" : "@@ -0,0 +1,196 @@\n+#include <index/silentpaymentindex.h>\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/disktxpos.h>\n+#include <node/blockstorage.h>\n+#include <pubkey.h>\n+#include <undo.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n+\n+constexpr uint8_t DB_SILENTPAYMENTINDEX{'s'};\n+\n+std::unique_ptr<SilentPaymentIndex> g_silentpaymentindex;\n+\n+/** Access to the silent payment index database (indexes/silentpaymentindex/) */\n+class SilentPaymentIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    bool WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items);\n+};\n+\n+SilentPaymentIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"silentpaymentindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool SilentPaymentIndex::DB::WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : items) {\n+        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+SilentPaymentIndex::SilentPaymentIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(std::make_unique<SilentPaymentIndex::DB>(n_cache_size, f_memory, f_wipe))\n+{}\n+\n+SilentPaymentIndex::~SilentPaymentIndex() {}\n+\n+bool SilentPaymentIndex::ExtractPubkeyFromInput(const Coin& prevCoin, const CTxIn& txin,  XOnlyPubKey& senderPubKey)\n+{\n+    // scriptPubKey being spent by this input\n+    CScript scriptPubKey = prevCoin.out.scriptPubKey;\n+\n+    if (scriptPubKey.IsPayToWitnessScriptHash()) {\n+        return false;\n+    }\n+\n+    // Vector of parsed pubkeys and hashes\n+    std::vector<std::vector<unsigned char>> solutions;\n+\n+    TxoutType whichType = Solver(scriptPubKey, solutions);\n+\n+    if (whichType == TxoutType::NONSTANDARD ||\n+    whichType == TxoutType::MULTISIG ||\n+    whichType == TxoutType::WITNESS_UNKNOWN ) {\n+        return false;\n+    }\n+\n+    const CScript scriptSig = txin.scriptSig;\n+    const CScriptWitness scriptWitness = txin.scriptWitness;\n+\n+    assert(senderPubKey.IsNull());\n+\n+    // TODO: Condition not tested\n+    if (whichType == TxoutType::PUBKEY) {\n+\n+        CPubKey pubkey = CPubKey(solutions[0]);\n+        assert(pubkey.IsFullyValid());\n+        senderPubKey = XOnlyPubKey(pubkey);\n+    }\n+\n+    else if (whichType == TxoutType::PUBKEYHASH) {\n+\n+        int sigSize = static_cast<int>(scriptSig[0]);\n+        int pubKeySize = static_cast<int>(scriptSig[sigSize + 1]);\n+        auto serializedPubKey = std::vector<unsigned char>(scriptSig.begin() + sigSize + 2, scriptSig.end());\n+        assert(serializedPubKey.size() == pubKeySize);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r880324746",
      "id" : 880324746,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII5840eLCK",
      "original_commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "original_line" : 85,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/index/silentpaymentindex.cpp",
      "position" : 85,
      "pull_request_review_id" : 982957038,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/880324746/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-24T10:15:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/880324746",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-05-24T13:39:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1135937189",
      "id" : 1135937189,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585DtQal",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1135937189/reactions"
      },
      "updated_at" : "2022-05-24T13:39:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1135937189",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Huge Concept ACK.. \r\n\r\nThis is amazing.. ð¥ð¥ð¥ð¥",
      "created_at" : "2022-05-24T17:07:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1136199154",
      "id" : 1136199154,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585DuQXy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1136199154/reactions"
      },
      "updated_at" : "2022-05-24T17:07:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1136199154",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I followed the tutorial and it worked great on signet",
      "created_at" : "2022-05-26T00:12:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1138004570",
      "id" : 1138004570,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585D1JJa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1138004570/reactions"
      },
      "updated_at" : "2022-05-26T00:12:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1138004570",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/207713?v=4",
         "events_url" : "https://api.github.com/users/a5an0/events{/privacy}",
         "followers_url" : "https://api.github.com/users/a5an0/followers",
         "following_url" : "https://api.github.com/users/a5an0/following{/other_user}",
         "gists_url" : "https://api.github.com/users/a5an0/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/a5an0",
         "id" : 207713,
         "login" : "a5an0",
         "node_id" : "MDQ6VXNlcjIwNzcxMw==",
         "organizations_url" : "https://api.github.com/users/a5an0/orgs",
         "received_events_url" : "https://api.github.com/users/a5an0/received_events",
         "repos_url" : "https://api.github.com/users/a5an0/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/a5an0/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/a5an0/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/a5an0"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2022-05-26T09:54:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1138361638",
      "id" : 1138361638,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585D2gUm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1138361638/reactions"
      },
      "updated_at" : "2022-05-26T09:54:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1138361638",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r882514222"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/882514222"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Linter error:\r\n```\r\nPlease use bracket syntax includes (\"#include <foo.h>\") instead of quote syntax includes:\r\nsrc/wallet/silentpayment.cpp:#include \"silentpayment.h\"\r\n^---- failure generated from lint-includes.py\r\n```",
      "commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "created_at" : "2022-05-26T10:01:30Z",
      "diff_hunk" : "@@ -0,0 +1,115 @@\n+#include \"silentpayment.h\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r882514222",
      "id" : 882514222,
      "line" : 1,
      "node_id" : "PRRC_kwDOABII5840mhku",
      "original_commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "original_line" : 1,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "src/wallet/silentpayment.cpp",
      "position" : 1,
      "pull_request_review_id" : 985996807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/882514222/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-26T11:06:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/882514222",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r882515225"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/882515225"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Linter error:\r\n```\r\nAssertions should not have side effects:\r\nsrc/wallet/wallet.cpp:    assert( ++pos == coins.end() );\r\n```",
      "commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "created_at" : "2022-05-26T10:02:57Z",
      "diff_hunk" : "@@ -1108,41 +1224,158 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxS\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n-            /* Check if any keys in the wallet keypool that were supposed to be unused\n-             * have appeared in a new transaction. If so, remove those keys from the keypool.\n-             * This can happen when restoring an old wallet backup that does not contain\n-             * the mostly recently created transactions from newer versions of the wallet.\n-             */\n-\n-            // loop though all outputs\n-            for (const CTxOut& txout: tx.vout) {\n-                for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n-                    for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n-                        // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n-                        if (!dest.internal.has_value()) {\n-                            dest.internal = IsInternalScriptPubKeyMan(spk_man);\n-                        }\n+            return HandleNewTxBelongingToMe(tx, state, rescanning_old_block);\n+        }\n+        else if (IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENT) && VerifySilentPayment(tx, rawTrKeys))\n+        {\n+            return AddSilentScriptKeyMan(tx, state, rescanning_old_block, rawTrKeys);\n+        }\n+    }\n+    return false;\n+}\n+\n+bool CWallet::ExtractPubkeyFromInput(const CTxIn& txin, XOnlyPubKey& senderPubKey)\n+{\n+    // Find the UTXO being spent in UTXO Set to learn the transaction type\n+    std::map<COutPoint, Coin> coins;\n+    coins[txin.prevout];\n+    chain().findCoins(coins);\n \n-                        // skip if can't determine whether it's a receiving address or not\n-                        if (!dest.internal.has_value()) continue;\n+    auto pos = coins.find(txin.prevout);\n \n-                        // If this is a receiving address and it's not in the address book yet\n-                        // (e.g. it wasn't generated on this node or we're restoring from backup)\n-                        // add it to the address book for proper transaction accounting\n-                        if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n-                            SetAddressBook(dest.dest, \"\", \"receive\");\n-                        }\n-                    }\n-                }\n-            }\n+    Coin coin = pos->second;\n \n-            // Block disconnection override an abandoned tx as unconfirmed\n-            // which means user may have to call abandontransaction again\n-            TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n-            return AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n+    // TODO: can more than one txin.prevout be in the mempool (RBF) ?\n+    assert( ++pos == coins.end() );",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r882515225",
      "id" : 882515225,
      "line" : 1249,
      "node_id" : "PRRC_kwDOABII5840mh0Z",
      "original_commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "original_line" : 1249,
      "original_position" : 205,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 205,
      "pull_request_review_id" : 985996807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/882515225/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-26T11:06:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/882515225",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r882518081"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/882518081"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n#ifndef BITCOIN_WALLET_SILENTPAYMENT_H\r\n#define BITCOIN_WALLET_SILENTPAYMENT_H\r\n```\r\n\r\nLinter does not like the name of include guard define:\r\n```\r\nsrc/wallet/silentpayment.h seems to be missing the expected include guard:\r\n  #ifndef BITCOIN_WALLET_SILENTPAYMENT_H\r\n  #define BITCOIN_WALLET_SILENTPAYMENT_H\r\n  ...\r\n  #endif // BITCOIN_WALLET_SILENTPAYMENT_H\r\n```",
      "commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "created_at" : "2022-05-26T10:06:58Z",
      "diff_hunk" : "@@ -0,0 +1,38 @@\n+#ifndef BITCOIN_SILENT_PAYMENT_H\n+#define BITCOIN_SILENT_PAYMENT_H",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r882518081",
      "id" : 882518081,
      "line" : 2,
      "node_id" : "PRRC_kwDOABII5840mihB",
      "original_commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "original_line" : 2,
      "original_position" : 2,
      "original_start_line" : 1,
      "path" : "src/wallet/silentpayment.h",
      "position" : 2,
      "pull_request_review_id" : 985996807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/882518081/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1,
      "start_side" : "RIGHT",
      "updated_at" : "2022-05-26T11:06:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/882518081",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r882521869"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/882521869"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```\r\nrpc/blockchain.cpp: In function âbool {anonymous}::CheckSilentPayment(uint256&, const CScript&, std::vector<std::tuple<FlatSigningProvider, CScript> >&, node::NodeContext&, std::vector<uint256>&, std::vector<XOnlyPubKey>&, std::map<CScript, std::__cxx11::basic_string<char> >&)â:\r\nrpc/blockchain.cpp:1936:18: warning: unused variable âactive_chainstateâ [-Wunused-variable]\r\n 1936 |     CChainState& active_chainstate = chainman.ActiveChainstate();\r\n      |                  ^~~~~~~~~~~~~~~~~\r\n```",
      "commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "created_at" : "2022-05-26T10:12:18Z",
      "diff_hunk" : "@@ -1910,9 +1915,113 @@ static RPCHelpMan getblockstats()\n }\n \n namespace {\n-//! Search for a given set of pubkey scripts\n-bool FindScriptPubKey(std::atomic<int>& scan_progress, const std::atomic<bool>& should_abort, int64_t& count, CCoinsViewCursor* cursor, const std::set<CScript>& needles, std::map<COutPoint, Coin>& out_results, std::function<void()>& interruption_point)\n+\n+bool CheckSilentPayment(\n+    uint256& txhash,\n+    const CScript& outScriptPubKey,\n+    std::vector<std::tuple<FlatSigningProvider, CScript>>& providers,\n+    NodeContext& node,\n+    std::vector<uint256>& verified_txs,\n+    std::vector<XOnlyPubKey>& silPubKeys,\n+    std::map<CScript, std::string>& silDesc)\n {\n+\n+    bool f_silentpaymentindex_ready = g_silentpaymentindex ? g_silentpaymentindex->BlockUntilSyncedToCurrentChain() : false;\n+    if (!f_silentpaymentindex_ready) {\n+        throw JSONRPCError(RPC_VERIFY_ERROR, \"The silent payment index is either disabled or not yet synced.\");\n+    }\n+\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    LOCK(cs_main);\n+    CChainState& active_chainstate = chainman.ActiveChainstate();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r882521869",
      "id" : 882521869,
      "line" : 1936,
      "node_id" : "PRRC_kwDOABII5840mjcN",
      "original_commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "original_line" : 1936,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 63,
      "pull_request_review_id" : 985996807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/882521869/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-26T11:06:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/882521869",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r882526990"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/882526990"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```\r\nIn file included from wallet/wallet.cpp:44:\r\nwallet/wallet.cpp: In member function âbool wallet::CWallet::ExtractPubkeyFromInput(const CTxIn&, XOnlyPubKey&)â:\r\nwallet/wallet.cpp:1292:40: warning: comparison of integer expressions of different signedness: âstd::vector<unsigned char>::size_typeâ {aka âlong unsigned intâ} and âintâ [-Wsign-compare]\r\n 1292 |         assert(serializedPubKey.size() == pubKeySize);\r\n      |                ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~\r\n```",
      "commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "created_at" : "2022-05-26T10:19:45Z",
      "diff_hunk" : "@@ -1108,41 +1224,158 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxS\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n-            /* Check if any keys in the wallet keypool that were supposed to be unused\n-             * have appeared in a new transaction. If so, remove those keys from the keypool.\n-             * This can happen when restoring an old wallet backup that does not contain\n-             * the mostly recently created transactions from newer versions of the wallet.\n-             */\n-\n-            // loop though all outputs\n-            for (const CTxOut& txout: tx.vout) {\n-                for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n-                    for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n-                        // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n-                        if (!dest.internal.has_value()) {\n-                            dest.internal = IsInternalScriptPubKeyMan(spk_man);\n-                        }\n+            return HandleNewTxBelongingToMe(tx, state, rescanning_old_block);\n+        }\n+        else if (IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENT) && VerifySilentPayment(tx, rawTrKeys))\n+        {\n+            return AddSilentScriptKeyMan(tx, state, rescanning_old_block, rawTrKeys);\n+        }\n+    }\n+    return false;\n+}\n+\n+bool CWallet::ExtractPubkeyFromInput(const CTxIn& txin, XOnlyPubKey& senderPubKey)\n+{\n+    // Find the UTXO being spent in UTXO Set to learn the transaction type\n+    std::map<COutPoint, Coin> coins;\n+    coins[txin.prevout];\n+    chain().findCoins(coins);\n \n-                        // skip if can't determine whether it's a receiving address or not\n-                        if (!dest.internal.has_value()) continue;\n+    auto pos = coins.find(txin.prevout);\n \n-                        // If this is a receiving address and it's not in the address book yet\n-                        // (e.g. it wasn't generated on this node or we're restoring from backup)\n-                        // add it to the address book for proper transaction accounting\n-                        if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n-                            SetAddressBook(dest.dest, \"\", \"receive\");\n-                        }\n-                    }\n-                }\n-            }\n+    Coin coin = pos->second;\n \n-            // Block disconnection override an abandoned tx as unconfirmed\n-            // which means user may have to call abandontransaction again\n-            TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n-            return AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n+    // TODO: can more than one txin.prevout be in the mempool (RBF) ?\n+    assert( ++pos == coins.end() );\n+\n+    if (coin.out.IsNull()) {\n+        return false;\n+    }\n+\n+    // scriptPubKey being spent by this input\n+    CScript scriptPubKey = coin.out.scriptPubKey;\n+\n+    if (scriptPubKey.IsPayToWitnessScriptHash()) {\n+        return false;\n+    }\n+\n+    // Vector of parsed pubkeys and hashes\n+    std::vector<std::vector<unsigned char>> solutions;\n+\n+    TxoutType whichType = Solver(scriptPubKey, solutions);\n+\n+    if (whichType == TxoutType::NONSTANDARD ||\n+    whichType == TxoutType::MULTISIG ||\n+    whichType == TxoutType::WITNESS_UNKNOWN ) {\n+        return false;\n+    }\n+\n+    const CScript scriptSig = txin.scriptSig;\n+    const CScriptWitness scriptWitness = txin.scriptWitness;\n+\n+    assert(senderPubKey.IsNull());\n+\n+    // TODO: Condition not tested\n+    if (whichType == TxoutType::PUBKEY) {\n+\n+        CPubKey pubkey = CPubKey(solutions[0]);\n+        assert(pubkey.IsFullyValid());\n+        senderPubKey = XOnlyPubKey(pubkey);\n+\n+    }\n+\n+    else if (whichType == TxoutType::PUBKEYHASH) {\n+\n+        int sigSize = static_cast<int>(scriptSig[0]);\n+        int pubKeySize = static_cast<int>(scriptSig[sigSize + 1]);\n+        auto serializedPubKey = std::vector<unsigned char>(scriptSig.begin() + sigSize + 2, scriptSig.end());\n+        assert(serializedPubKey.size() == pubKeySize);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r882526990",
      "id" : 882526990,
      "line" : 1292,
      "node_id" : "PRRC_kwDOABII5840mksO",
      "original_commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "original_line" : 1292,
      "original_position" : 248,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 248,
      "pull_request_review_id" : 985996807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/882526990/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-26T11:06:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/882526990",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r882527414"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/882527414"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```\r\nwallet/silentpayment.cpp: In static member function âstatic void silentpayment::Recipient::CreateTweakedKeyPair(const secp256k1_context*, secp256k1_xonly_pubkey, secp256k1_keypair&)â:\r\nwallet/silentpayment.cpp:72:22: warning: unused variable âoutput_pubkeyâ [-Wunused-variable]\r\n   72 |     secp256k1_pubkey output_pubkey;\r\n      |                      ^~~~~~~~~~~~~\r\n```",
      "commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "created_at" : "2022-05-26T10:20:23Z",
      "diff_hunk" : "@@ -0,0 +1,115 @@\n+#include \"silentpayment.h\"\n+\n+#include <key_io.h>\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+#include <secp256k1_extrakeys.h>\n+\n+namespace silentpayment {\n+\n+secp256k1_pubkey Sender::CreateTweakedPubkey(\n+    const secp256k1_context* ctx,\n+    const secp256k1_xonly_pubkey recipient_public_key,\n+    const unsigned char sender_secret_key[32])\n+{\n+    unsigned char shared_secret[32];\n+\n+    secp256k1_pubkey output_pubkey;\n+\n+    int return_val;\n+\n+    return_val = secp256k1_ecdh_xonly(ctx, shared_secret, &recipient_public_key, sender_secret_key, NULL, NULL);\n+    assert(return_val);\n+\n+    return_val = secp256k1_ec_seckey_verify(secp256k1_context_no_precomp, shared_secret);\n+    assert(return_val);\n+\n+    return_val = secp256k1_xonly_pubkey_tweak_add(ctx, &output_pubkey, &recipient_public_key, shared_secret);\n+    assert(return_val);\n+\n+    return output_pubkey;\n+}\n+\n+XOnlyPubKey Sender::CreateSilentPaymentAddress(\n+    const CKey& sender_secret_key,\n+    const XOnlyPubKey& _recipient_public_key)\n+{\n+    int return_val;\n+\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    secp256k1_xonly_pubkey recipient_public_key;\n+    return_val = secp256k1_xonly_pubkey_parse(ctx, &recipient_public_key, _recipient_public_key.data());\n+    assert(return_val);\n+\n+    secp256k1_pubkey sender_output_pubkey;\n+    sender_output_pubkey = CreateTweakedPubkey(ctx, recipient_public_key, sender_secret_key.begin());\n+\n+    // Test the key\n+    size_t len;\n+    unsigned char sender_serialized_output_pubkey[33];\n+    len = sizeof(sender_serialized_output_pubkey);\n+    return_val = secp256k1_ec_pubkey_serialize(ctx, sender_serialized_output_pubkey, &len, &sender_output_pubkey, SECP256K1_EC_COMPRESSED);\n+    assert(return_val);\n+\n+    CPubKey pubKey = CPubKey(sender_serialized_output_pubkey);\n+\n+    assert(pubKey.IsFullyValid());\n+\n+    XOnlyPubKey xOnlyPubKey = XOnlyPubKey(pubKey);\n+\n+    return xOnlyPubKey;\n+}\n+\n+void Recipient::CreateTweakedKeyPair(\n+    const secp256k1_context* ctx,\n+    const secp256k1_xonly_pubkey sender_public_key,\n+    secp256k1_keypair& recipient_keypair)\n+{\n+    unsigned char recipient_secret_key[32];\n+    unsigned char shared_secret[32];\n+\n+    secp256k1_pubkey output_pubkey;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r882527414",
      "id" : 882527414,
      "line" : 72,
      "node_id" : "PRRC_kwDOABII5840mky2",
      "original_commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "original_line" : 72,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/wallet/silentpayment.cpp",
      "position" : 72,
      "pull_request_review_id" : 985996807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/882527414/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-26T11:06:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/882527414",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r887750679"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887750679"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Skip this test when compiled without legacy wallet support.",
      "commit_id" : "a395e23bbfa259a9043e2ecb830cad290abde776",
      "created_at" : "2022-06-02T09:22:34Z",
      "diff_hunk" : "@@ -0,0 +1,268 @@\n+#!/usr/bin/env python3\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.util import (\n+    assert_raises_rpc_error,\n+)\n+from test_framework.descriptors import descsum_create\n+\n+class SilentTransactioTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        self.extra_args = [[], [\"-keypool=1\", \"-silentpaymentindex=1\"], [\"-keypool=1\", \"-silentpaymentindex=1\"]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def init_wallet(self, *, node):\n+        pass\n+\n+    def invalid_create_wallet(self):\n+        self.log.info(\"Testing the creation of invalid wallets\")\n+\n+        assert_raises_rpc_error(-4, \"Only descriptor wallets support silent payments.\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r887750679",
      "id" : 887750679,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58406gAX",
      "original_commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "original_line" : 25,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "test/functional/wallet_silentpayment.py",
      "position" : null,
      "pull_request_review_id" : 993257629,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887750679/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-02T14:18:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887750679",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r887752800"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887752800"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Skip this test when compiled without external signer support.",
      "commit_id" : "a395e23bbfa259a9043e2ecb830cad290abde776",
      "created_at" : "2022-06-02T09:24:56Z",
      "diff_hunk" : "@@ -0,0 +1,268 @@\n+#!/usr/bin/env python3\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.util import (\n+    assert_raises_rpc_error,\n+)\n+from test_framework.descriptors import descsum_create\n+\n+class SilentTransactioTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        self.extra_args = [[], [\"-keypool=1\", \"-silentpaymentindex=1\"], [\"-keypool=1\", \"-silentpaymentindex=1\"]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def init_wallet(self, *, node):\n+        pass\n+\n+    def invalid_create_wallet(self):\n+        self.log.info(\"Testing the creation of invalid wallets\")\n+\n+        assert_raises_rpc_error(-4, \"Only descriptor wallets support silent payments.\",\n+            self.nodes[1].createwallet, wallet_name='invalid_wallet', descriptors=False, silent_payment=True)\n+\n+        assert_raises_rpc_error(-4, \"Silent payments require the ability to store private keys.\",\n+            self.nodes[1].createwallet, wallet_name='invalid_wallet', descriptors=True, disable_private_keys=True, silent_payment=True)\n+\n+        assert_raises_rpc_error(-4, \"Silent payments require the ability to store private keys.\",\n+            self.nodes[1].createwallet, wallet_name='invalid_wallet',  descriptors=True, disable_private_keys=True, external_signer=True, silent_payment=True)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r887752800",
      "id" : 887752800,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58406ghg",
      "original_commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "original_line" : 32,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "test/functional/wallet_silentpayment.py",
      "position" : null,
      "pull_request_review_id" : 993257629,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887752800/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-02T14:18:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887752800",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Very cool! It's nice to be able to test this concept with \"real\" demo software. I'll share some thoughts about the concept on the mailinglist or gist. Will focus on the implementation here.\r\n\r\nI was able to send to signet coins to myself. Here's the public key: `tb1p0ykcmjxv26utyntns8ryn70at9t38zkdta9fj3zrrnpnczuddxvqf8qwac`\r\n\r\nMy first thought was that it may be better (initially) to implement silent payments as a standalone tool that uses the Bitcoin Core RPC.\r\n\r\nHowever, given that this implementation requires a new index, I don't know how practical that is. Getting a new index added to Bitcoin Core however is also not easy (https://bitcoincore.reviews/14053). The light at the end the tunnel here would be a plugin system for indexes, which should be possible once process separation is complete. See #24230. That will take a while though.\r\n\r\nAnother reason for building a separate tool that uses the RPC is that this proposal has a pretty big resource need, something that the project may not want to commit to anytime soon. The sending side is not resource intensive though, so perhaps that is easier to get in.\r\n\r\nLimiting the scope of this implementation to taproot makes sense. Limiting it to the first input seems brittle however, hopefully it's not too difficult to scan them all. Other implementations might order the input coins differently. Also, if you go for the approach of building an external tool that uses the RPC, then you can could use `send` with 1 fixed input and have the wallet automatically select the other coins. But in that case the RPC gives no guarantee which position the input will end up (it might be the first in practice atm).\r\n\r\nIn case the proposal is modified to consider _all_ inputs, keep in mind that this makes coin selection (slightly) more complicated. The wallet has to decide, before it knows the output address, which inputs to use. That would involve some surgery in the way coin selection is integrated in the wallet. When implemented as an external tool, you would probably make two calls to send: one with a dummy destination and automatic coin selection to get the coins, and then one with manual coin selection and the real destination. But that's not pretty, and won't work if the wallet has a combination of taproot and non-taproot coins, because you currently can't tell coin selection to only use taproot inputs.\r\n\r\nImporting a descriptor with a shorter range than the keypool size has no effect afaik, it's just treated as a descriptor with range 0-1000. We could change that behavior, so that a descriptor imported with a fixed range is not expanded unless you re-import it. Not sure if that's ideal, cc @achow101. Another option might be to make the keypool configurable per wallet, though that also feels a bit meh. A user may have multiple wallets, not all of which use this feature, so relying on a global keypool=1 setting is not ideal. And a factor 1000 slower scanning seems suboptimal.\r\n\r\nAnother approach could be that a silent_payment wallet only ever generates 1 key, perhaps with a new `silent(pk)` descriptor type. That might also make it easier for `getnewaddress` to spit out something that's not actually an address. See https://gist.github.com/RubenSomsen/c43b79517e7cb701ebf77eec6dbb46b8?permalink_comment_id=4177027#gistcomment-4177027 for discussion around what format the silent payment public key should be communicated in.\r\n\r\nIdeally the scriptPubKeys are stored in the silent(pk) descriptor. This would make `getaddressinfo` return the right descriptor. In that case `getnewaddress` should always fail, because the addresses are not known in advance. You'd need another way to communicate the public key. The easiest hack might be to return it as public-key version of the silent(pk) descriptor, so the user can find it with either `listdescriptors` or `getaddressinfo` on any received payment.",
      "created_at" : "2022-06-02T14:18:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1144921702",
      "id" : 1144921702,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585EPh5m",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1144921702/reactions"
      },
      "updated_at" : "2022-06-02T14:18:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1144921702",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r889490415"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490415"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/6120b53da4b1a7dc067790a1c00ac744a66f2f71. Thanks.",
      "commit_id" : "a395e23bbfa259a9043e2ecb830cad290abde776",
      "created_at" : "2022-06-04T05:49:06Z",
      "diff_hunk" : "@@ -0,0 +1,196 @@\n+#include <index/silentpaymentindex.h>\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/disktxpos.h>\n+#include <node/blockstorage.h>\n+#include <pubkey.h>\n+#include <undo.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n+\n+constexpr uint8_t DB_SILENTPAYMENTINDEX{'s'};\n+\n+std::unique_ptr<SilentPaymentIndex> g_silentpaymentindex;\n+\n+/** Access to the silent payment index database (indexes/silentpaymentindex/) */\n+class SilentPaymentIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    bool WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items);\n+};\n+\n+SilentPaymentIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"silentpaymentindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool SilentPaymentIndex::DB::WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : items) {\n+        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+SilentPaymentIndex::SilentPaymentIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(std::make_unique<SilentPaymentIndex::DB>(n_cache_size, f_memory, f_wipe))\n+{}\n+\n+SilentPaymentIndex::~SilentPaymentIndex() {}\n+\n+bool SilentPaymentIndex::ExtractPubkeyFromInput(const Coin& prevCoin, const CTxIn& txin,  XOnlyPubKey& senderPubKey)\n+{\n+    // scriptPubKey being spent by this input\n+    CScript scriptPubKey = prevCoin.out.scriptPubKey;\n+\n+    if (scriptPubKey.IsPayToWitnessScriptHash()) {\n+        return false;\n+    }\n+\n+    // Vector of parsed pubkeys and hashes\n+    std::vector<std::vector<unsigned char>> solutions;\n+\n+    TxoutType whichType = Solver(scriptPubKey, solutions);\n+\n+    if (whichType == TxoutType::NONSTANDARD ||\n+    whichType == TxoutType::MULTISIG ||\n+    whichType == TxoutType::WITNESS_UNKNOWN ) {\n+        return false;\n+    }\n+\n+    const CScript scriptSig = txin.scriptSig;\n+    const CScriptWitness scriptWitness = txin.scriptWitness;\n+\n+    assert(senderPubKey.IsNull());\n+\n+    // TODO: Condition not tested\n+    if (whichType == TxoutType::PUBKEY) {\n+\n+        CPubKey pubkey = CPubKey(solutions[0]);\n+        assert(pubkey.IsFullyValid());\n+        senderPubKey = XOnlyPubKey(pubkey);\n+    }\n+\n+    else if (whichType == TxoutType::PUBKEYHASH) {\n+\n+        int sigSize = static_cast<int>(scriptSig[0]);\n+        int pubKeySize = static_cast<int>(scriptSig[sigSize + 1]);\n+        auto serializedPubKey = std::vector<unsigned char>(scriptSig.begin() + sigSize + 2, scriptSig.end());\n+        assert(serializedPubKey.size() == pubKeySize);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r889490415",
      "id" : 889490415,
      "in_reply_to_id" : 880324746,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5841BIvv",
      "original_commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "original_line" : 85,
      "original_position" : 85,
      "original_start_line" : null,
      "path" : "src/index/silentpaymentindex.cpp",
      "position" : null,
      "pull_request_review_id" : 995775644,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490415/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-04T05:49:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490415",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r889490543"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490543"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in  https://github.com/bitcoin/bitcoin/pull/24897/commits/178e39d804a092016abe9650a1cde085173d6795. Thanks.",
      "commit_id" : "a395e23bbfa259a9043e2ecb830cad290abde776",
      "created_at" : "2022-06-04T05:50:24Z",
      "diff_hunk" : "@@ -1108,41 +1224,158 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxS\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n-            /* Check if any keys in the wallet keypool that were supposed to be unused\n-             * have appeared in a new transaction. If so, remove those keys from the keypool.\n-             * This can happen when restoring an old wallet backup that does not contain\n-             * the mostly recently created transactions from newer versions of the wallet.\n-             */\n-\n-            // loop though all outputs\n-            for (const CTxOut& txout: tx.vout) {\n-                for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n-                    for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n-                        // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n-                        if (!dest.internal.has_value()) {\n-                            dest.internal = IsInternalScriptPubKeyMan(spk_man);\n-                        }\n+            return HandleNewTxBelongingToMe(tx, state, rescanning_old_block);\n+        }\n+        else if (IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENT) && VerifySilentPayment(tx, rawTrKeys))\n+        {\n+            return AddSilentScriptKeyMan(tx, state, rescanning_old_block, rawTrKeys);\n+        }\n+    }\n+    return false;\n+}\n+\n+bool CWallet::ExtractPubkeyFromInput(const CTxIn& txin, XOnlyPubKey& senderPubKey)\n+{\n+    // Find the UTXO being spent in UTXO Set to learn the transaction type\n+    std::map<COutPoint, Coin> coins;\n+    coins[txin.prevout];\n+    chain().findCoins(coins);\n \n-                        // skip if can't determine whether it's a receiving address or not\n-                        if (!dest.internal.has_value()) continue;\n+    auto pos = coins.find(txin.prevout);\n \n-                        // If this is a receiving address and it's not in the address book yet\n-                        // (e.g. it wasn't generated on this node or we're restoring from backup)\n-                        // add it to the address book for proper transaction accounting\n-                        if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n-                            SetAddressBook(dest.dest, \"\", \"receive\");\n-                        }\n-                    }\n-                }\n-            }\n+    Coin coin = pos->second;\n \n-            // Block disconnection override an abandoned tx as unconfirmed\n-            // which means user may have to call abandontransaction again\n-            TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n-            return AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n+    // TODO: can more than one txin.prevout be in the mempool (RBF) ?\n+    assert( ++pos == coins.end() );\n+\n+    if (coin.out.IsNull()) {\n+        return false;\n+    }\n+\n+    // scriptPubKey being spent by this input\n+    CScript scriptPubKey = coin.out.scriptPubKey;\n+\n+    if (scriptPubKey.IsPayToWitnessScriptHash()) {\n+        return false;\n+    }\n+\n+    // Vector of parsed pubkeys and hashes\n+    std::vector<std::vector<unsigned char>> solutions;\n+\n+    TxoutType whichType = Solver(scriptPubKey, solutions);\n+\n+    if (whichType == TxoutType::NONSTANDARD ||\n+    whichType == TxoutType::MULTISIG ||\n+    whichType == TxoutType::WITNESS_UNKNOWN ) {\n+        return false;\n+    }\n+\n+    const CScript scriptSig = txin.scriptSig;\n+    const CScriptWitness scriptWitness = txin.scriptWitness;\n+\n+    assert(senderPubKey.IsNull());\n+\n+    // TODO: Condition not tested\n+    if (whichType == TxoutType::PUBKEY) {\n+\n+        CPubKey pubkey = CPubKey(solutions[0]);\n+        assert(pubkey.IsFullyValid());\n+        senderPubKey = XOnlyPubKey(pubkey);\n+\n+    }\n+\n+    else if (whichType == TxoutType::PUBKEYHASH) {\n+\n+        int sigSize = static_cast<int>(scriptSig[0]);\n+        int pubKeySize = static_cast<int>(scriptSig[sigSize + 1]);\n+        auto serializedPubKey = std::vector<unsigned char>(scriptSig.begin() + sigSize + 2, scriptSig.end());\n+        assert(serializedPubKey.size() == pubKeySize);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r889490543",
      "id" : 889490543,
      "in_reply_to_id" : 882526990,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5841BIxv",
      "original_commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "original_line" : 1292,
      "original_position" : 248,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 995775727,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490543/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-04T05:50:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490543",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r889490571"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490571"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/afbdf2bd9d1e1358eb03054db732cf12d05802b7. Thanks.",
      "commit_id" : "a395e23bbfa259a9043e2ecb830cad290abde776",
      "created_at" : "2022-06-04T05:50:47Z",
      "diff_hunk" : "@@ -0,0 +1,115 @@\n+#include \"silentpayment.h\"\n+\n+#include <key_io.h>\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+#include <secp256k1_extrakeys.h>\n+\n+namespace silentpayment {\n+\n+secp256k1_pubkey Sender::CreateTweakedPubkey(\n+    const secp256k1_context* ctx,\n+    const secp256k1_xonly_pubkey recipient_public_key,\n+    const unsigned char sender_secret_key[32])\n+{\n+    unsigned char shared_secret[32];\n+\n+    secp256k1_pubkey output_pubkey;\n+\n+    int return_val;\n+\n+    return_val = secp256k1_ecdh_xonly(ctx, shared_secret, &recipient_public_key, sender_secret_key, NULL, NULL);\n+    assert(return_val);\n+\n+    return_val = secp256k1_ec_seckey_verify(secp256k1_context_no_precomp, shared_secret);\n+    assert(return_val);\n+\n+    return_val = secp256k1_xonly_pubkey_tweak_add(ctx, &output_pubkey, &recipient_public_key, shared_secret);\n+    assert(return_val);\n+\n+    return output_pubkey;\n+}\n+\n+XOnlyPubKey Sender::CreateSilentPaymentAddress(\n+    const CKey& sender_secret_key,\n+    const XOnlyPubKey& _recipient_public_key)\n+{\n+    int return_val;\n+\n+    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    secp256k1_xonly_pubkey recipient_public_key;\n+    return_val = secp256k1_xonly_pubkey_parse(ctx, &recipient_public_key, _recipient_public_key.data());\n+    assert(return_val);\n+\n+    secp256k1_pubkey sender_output_pubkey;\n+    sender_output_pubkey = CreateTweakedPubkey(ctx, recipient_public_key, sender_secret_key.begin());\n+\n+    // Test the key\n+    size_t len;\n+    unsigned char sender_serialized_output_pubkey[33];\n+    len = sizeof(sender_serialized_output_pubkey);\n+    return_val = secp256k1_ec_pubkey_serialize(ctx, sender_serialized_output_pubkey, &len, &sender_output_pubkey, SECP256K1_EC_COMPRESSED);\n+    assert(return_val);\n+\n+    CPubKey pubKey = CPubKey(sender_serialized_output_pubkey);\n+\n+    assert(pubKey.IsFullyValid());\n+\n+    XOnlyPubKey xOnlyPubKey = XOnlyPubKey(pubKey);\n+\n+    return xOnlyPubKey;\n+}\n+\n+void Recipient::CreateTweakedKeyPair(\n+    const secp256k1_context* ctx,\n+    const secp256k1_xonly_pubkey sender_public_key,\n+    secp256k1_keypair& recipient_keypair)\n+{\n+    unsigned char recipient_secret_key[32];\n+    unsigned char shared_secret[32];\n+\n+    secp256k1_pubkey output_pubkey;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r889490571",
      "id" : 889490571,
      "in_reply_to_id" : 882527414,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5841BIyL",
      "original_commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "original_line" : 72,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/wallet/silentpayment.cpp",
      "position" : null,
      "pull_request_review_id" : 995775748,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490571/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-04T05:50:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490571",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r889490596"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490596"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/16ca3614639833d4a3bfea548a2cf4738bb2efb7. Thanks.",
      "commit_id" : "a395e23bbfa259a9043e2ecb830cad290abde776",
      "created_at" : "2022-06-04T05:51:16Z",
      "diff_hunk" : "@@ -1910,9 +1915,113 @@ static RPCHelpMan getblockstats()\n }\n \n namespace {\n-//! Search for a given set of pubkey scripts\n-bool FindScriptPubKey(std::atomic<int>& scan_progress, const std::atomic<bool>& should_abort, int64_t& count, CCoinsViewCursor* cursor, const std::set<CScript>& needles, std::map<COutPoint, Coin>& out_results, std::function<void()>& interruption_point)\n+\n+bool CheckSilentPayment(\n+    uint256& txhash,\n+    const CScript& outScriptPubKey,\n+    std::vector<std::tuple<FlatSigningProvider, CScript>>& providers,\n+    NodeContext& node,\n+    std::vector<uint256>& verified_txs,\n+    std::vector<XOnlyPubKey>& silPubKeys,\n+    std::map<CScript, std::string>& silDesc)\n {\n+\n+    bool f_silentpaymentindex_ready = g_silentpaymentindex ? g_silentpaymentindex->BlockUntilSyncedToCurrentChain() : false;\n+    if (!f_silentpaymentindex_ready) {\n+        throw JSONRPCError(RPC_VERIFY_ERROR, \"The silent payment index is either disabled or not yet synced.\");\n+    }\n+\n+    ChainstateManager& chainman = EnsureChainman(node);\n+    LOCK(cs_main);\n+    CChainState& active_chainstate = chainman.ActiveChainstate();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r889490596",
      "id" : 889490596,
      "in_reply_to_id" : 882521869,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5841BIyk",
      "original_commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "original_line" : 1936,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 995775776,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490596/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-04T05:51:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490596",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r889490622"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490622"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/afbdf2bd9d1e1358eb03054db732cf12d05802b7. Thanks.",
      "commit_id" : "a395e23bbfa259a9043e2ecb830cad290abde776",
      "created_at" : "2022-06-04T05:51:43Z",
      "diff_hunk" : "@@ -0,0 +1,38 @@\n+#ifndef BITCOIN_SILENT_PAYMENT_H\n+#define BITCOIN_SILENT_PAYMENT_H",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r889490622",
      "id" : 889490622,
      "in_reply_to_id" : 882518081,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5841BIy-",
      "original_commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "original_line" : 2,
      "original_position" : 2,
      "original_start_line" : 1,
      "path" : "src/wallet/silentpayment.h",
      "position" : null,
      "pull_request_review_id" : 995775806,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490622/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-06-04T05:51:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490622",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r889490641"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490641"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/commit/afbdf2bd9d1e1358eb03054db732cf12d05802b7. Thanks.",
      "commit_id" : "a395e23bbfa259a9043e2ecb830cad290abde776",
      "created_at" : "2022-06-04T05:52:05Z",
      "diff_hunk" : "@@ -0,0 +1,115 @@\n+#include \"silentpayment.h\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r889490641",
      "id" : 889490641,
      "in_reply_to_id" : 882514222,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5841BIzR",
      "original_commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "original_line" : 1,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "src/wallet/silentpayment.cpp",
      "position" : null,
      "pull_request_review_id" : 995775825,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490641/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-04T05:52:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490641",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r889490700"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490700"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/commit/178e39d804a092016abe9650a1cde085173d6795. Thanks.",
      "commit_id" : "a395e23bbfa259a9043e2ecb830cad290abde776",
      "created_at" : "2022-06-04T05:52:30Z",
      "diff_hunk" : "@@ -1108,41 +1224,158 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxS\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n-            /* Check if any keys in the wallet keypool that were supposed to be unused\n-             * have appeared in a new transaction. If so, remove those keys from the keypool.\n-             * This can happen when restoring an old wallet backup that does not contain\n-             * the mostly recently created transactions from newer versions of the wallet.\n-             */\n-\n-            // loop though all outputs\n-            for (const CTxOut& txout: tx.vout) {\n-                for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n-                    for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n-                        // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n-                        if (!dest.internal.has_value()) {\n-                            dest.internal = IsInternalScriptPubKeyMan(spk_man);\n-                        }\n+            return HandleNewTxBelongingToMe(tx, state, rescanning_old_block);\n+        }\n+        else if (IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENT) && VerifySilentPayment(tx, rawTrKeys))\n+        {\n+            return AddSilentScriptKeyMan(tx, state, rescanning_old_block, rawTrKeys);\n+        }\n+    }\n+    return false;\n+}\n+\n+bool CWallet::ExtractPubkeyFromInput(const CTxIn& txin, XOnlyPubKey& senderPubKey)\n+{\n+    // Find the UTXO being spent in UTXO Set to learn the transaction type\n+    std::map<COutPoint, Coin> coins;\n+    coins[txin.prevout];\n+    chain().findCoins(coins);\n \n-                        // skip if can't determine whether it's a receiving address or not\n-                        if (!dest.internal.has_value()) continue;\n+    auto pos = coins.find(txin.prevout);\n \n-                        // If this is a receiving address and it's not in the address book yet\n-                        // (e.g. it wasn't generated on this node or we're restoring from backup)\n-                        // add it to the address book for proper transaction accounting\n-                        if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n-                            SetAddressBook(dest.dest, \"\", \"receive\");\n-                        }\n-                    }\n-                }\n-            }\n+    Coin coin = pos->second;\n \n-            // Block disconnection override an abandoned tx as unconfirmed\n-            // which means user may have to call abandontransaction again\n-            TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n-            return AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n+    // TODO: can more than one txin.prevout be in the mempool (RBF) ?\n+    assert( ++pos == coins.end() );",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r889490700",
      "id" : 889490700,
      "in_reply_to_id" : 882515225,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5841BI0M",
      "original_commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "original_line" : 1249,
      "original_position" : 205,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 995775851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490700/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-04T05:52:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490700",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r889490746"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490746"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/a395e23bbfa259a9043e2ecb830cad290abde776. Thanks.",
      "commit_id" : "a395e23bbfa259a9043e2ecb830cad290abde776",
      "created_at" : "2022-06-04T05:53:02Z",
      "diff_hunk" : "@@ -0,0 +1,268 @@\n+#!/usr/bin/env python3\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.util import (\n+    assert_raises_rpc_error,\n+)\n+from test_framework.descriptors import descsum_create\n+\n+class SilentTransactioTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        self.extra_args = [[], [\"-keypool=1\", \"-silentpaymentindex=1\"], [\"-keypool=1\", \"-silentpaymentindex=1\"]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def init_wallet(self, *, node):\n+        pass\n+\n+    def invalid_create_wallet(self):\n+        self.log.info(\"Testing the creation of invalid wallets\")\n+\n+        assert_raises_rpc_error(-4, \"Only descriptor wallets support silent payments.\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r889490746",
      "id" : 889490746,
      "in_reply_to_id" : 887750679,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5841BI06",
      "original_commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "original_line" : 25,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "test/functional/wallet_silentpayment.py",
      "position" : null,
      "pull_request_review_id" : 995775876,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490746/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-04T05:53:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490746",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r889490762"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490762"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/a395e23bbfa259a9043e2ecb830cad290abde776. Thanks.",
      "commit_id" : "a395e23bbfa259a9043e2ecb830cad290abde776",
      "created_at" : "2022-06-04T05:53:05Z",
      "diff_hunk" : "@@ -0,0 +1,268 @@\n+#!/usr/bin/env python3\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.util import (\n+    assert_raises_rpc_error,\n+)\n+from test_framework.descriptors import descsum_create\n+\n+class SilentTransactioTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        self.extra_args = [[], [\"-keypool=1\", \"-silentpaymentindex=1\"], [\"-keypool=1\", \"-silentpaymentindex=1\"]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def init_wallet(self, *, node):\n+        pass\n+\n+    def invalid_create_wallet(self):\n+        self.log.info(\"Testing the creation of invalid wallets\")\n+\n+        assert_raises_rpc_error(-4, \"Only descriptor wallets support silent payments.\",\n+            self.nodes[1].createwallet, wallet_name='invalid_wallet', descriptors=False, silent_payment=True)\n+\n+        assert_raises_rpc_error(-4, \"Silent payments require the ability to store private keys.\",\n+            self.nodes[1].createwallet, wallet_name='invalid_wallet', descriptors=True, disable_private_keys=True, silent_payment=True)\n+\n+        assert_raises_rpc_error(-4, \"Silent payments require the ability to store private keys.\",\n+            self.nodes[1].createwallet, wallet_name='invalid_wallet',  descriptors=True, disable_private_keys=True, external_signer=True, silent_payment=True)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r889490762",
      "id" : 889490762,
      "in_reply_to_id" : 887752800,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5841BI1K",
      "original_commit_id" : "8f616acf868bbc75b31bf5170c40fd9957c08e91",
      "original_line" : 32,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "test/functional/wallet_silentpayment.py",
      "position" : null,
      "pull_request_review_id" : 995775881,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490762/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-04T05:53:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889490762",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@Sjors @kristapsk @1440000bytes Thanks for reviews and tests.  I addressed your suggestions in the last force-push.\r\n\r\n@Sjors  I agree that using a separate wallet/tool ââfor silent payments can be a good solution.\r\nI initially considered this option, but it would imply re-implementing the scan logic. The tool must be able to request and de-serialize blocks and the UTXO Set to scan coins.\r\nSo a new branch appeared to be the simplest way to implement a proof of concept.\r\n\r\n> In case the proposal is modified to consider all inputs, keep in mind that this makes coin selection (slightly) more complicated.\r\n\r\nYes. There are some tradeoffs involving how to use inputs for ECDH. I don't think there's a way to accept every type of input, as seen in https://github.com/bitcoin/bitcoin/pull/24897/commits/178e39d804a092016abe9650a1cde085173d6795.\r\n\r\nExample:\r\n```c++\r\nif (whichType == TxoutType::NONSTANDARD ||\r\n    whichType == TxoutType::MULTISIG ||\r\n    whichType == TxoutType::WITNESS_UNKNOWN ) {\r\n        return false;\r\n    }\r\n```\r\n\r\n> given that this implementation requires a new index,\r\n\r\nThis index just speeds up the transaction verification. This is not necessary for Silent Payments, although in this particular implementation it is required for UX purposes. I'm getting some metrics to see if it can be removed and still have a good user experience.\r\n\r\n> relying on a global keypool=1 setting is not ideal.\r\n\r\nYes. This is just for testing and should not be required in an eventual final version.\r\n\r\n> Another approach could be that a silent_payment wallet only ever generates 1 key, perhaps with a new silent(pk) descriptor type. \r\n\r\nI think this is the best solution. This would imply changing the `getnewaddress` RPC to always return the same address for this `silent` descriptor and allowing a non-ranged descriptor to be active.",
      "created_at" : "2022-06-05T21:57:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1146890220",
      "id" : 1146890220,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585EXCfs",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1146890220/reactions"
      },
      "updated_at" : "2022-06-06T01:36:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1146890220",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-07-12T13:16:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1181748133",
      "id" : 1181748133,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585GcAul",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1181748133/reactions"
      },
      "updated_at" : "2022-07-12T13:16:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1181748133",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased.",
      "created_at" : "2022-07-15T23:24:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1186019639",
      "id" : 1186019639,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585GsTk3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186019639/reactions"
      },
      "updated_at" : "2022-07-15T23:24:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186019639",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Rebased.\r\n\r\nwhy is CI failing?",
      "created_at" : "2022-07-16T00:24:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1186036654",
      "id" : 1186036654,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585GsXuu",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186036654/reactions"
      },
      "updated_at" : "2022-07-16T00:24:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186036654",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@1440000bytes this PR is built on top of https://github.com/bitcoin/bitcoin/pull/23480 and https://github.com/bitcoin-core/secp256k1/pull/994, which have not yet been merged.\r\n\r\n~~One of the error is the same as #23480, which occurs in `wallet_taproot.py`. This is failing almost every CI check, but not on my machine (Ubuntu 21.10).~~\r\nRegarding the error in`wallet_taproot.py`, I suggested the solution in https://github.com/bitcoin/bitcoin/pull/23480#issuecomment-1186014033, but had forgotten to commit it here. This error has now been fixed.\r\n\r\nThe other error is a lint error about manually merging #994. I'm still not sure how to fix this lint error.\r\n\r\nEDIT: The only error now is the lint error mentioned above. From what I understand from the file `test/lint/git-subtree-check.sh`, this is because the `src/secp256k1` subtree is compared with the master branch of https://github.com/bitcoin-core/secp256k1  and as it is different, it results in an error.\r\n\r\nIf so, this error will remain until https://github.com/bitcoin-core/secp256k1/pull/994 is merged.\r\n\r\nAnyway, it's a lint error (formatting basically). Does not affect functionality.",
      "created_at" : "2022-07-16T01:49:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1186053310",
      "id" : 1186053310,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585Gsby-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186053310/reactions"
      },
      "updated_at" : "2022-07-16T06:46:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186053310",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">Another approach could be that a silent_payment wallet only ever generates 1 key, perhaps with a new silent(pk) descriptor type. That might also make it easier for getnewaddress to spit out something that's not actually an address. \r\n\r\nHow would you apply a label and determine who the sender is?\r\n\r\nAlso, being non-reversible from the UTXO doesn't make it any less of an address...",
      "created_at" : "2022-07-16T05:29:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1186093975",
      "id" : 1186093975,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585GsluX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186093975/reactions"
      },
      "updated_at" : "2022-07-16T05:29:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186093975",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@luke-jr Not sure if I understand your question, but this scheme doesn't change anything regarding the sender/recipient relationship.\r\nThe sender will know the tweaked address and the recipient will know where the coins are coming from.\r\n\r\nWhat this proposal prevents is external observers from knowing or tracking how many coins or transactions a public address has.\r\nAnd it also prevents reuse of a public address (as it happens in on-chain donations, for example).",
      "created_at" : "2022-07-16T06:03:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1186097589",
      "id" : 1186097589,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585Gsmm1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186097589/reactions"
      },
      "updated_at" : "2022-07-16T06:06:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186097589",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">Not sure if I understand your question, but this scheme doesn't change anything regarding the sender/recipient relationship.\r\nThe sender will know the tweaked address and the recipient will know where the coins are coming from.\r\n\r\nThe recipient knows who the sender is and the purpose of the transaction, based on the address the bitcoins were sent to. If `getnewaddress` gave the same address every call, it would be impossible to tell the difference between them.\r\n\r\n>And it also prevents reuse of a public address (as it happens in on-chain donations, for example).\r\n\r\nI thought the whole point was to make reuse of such an address safe?",
      "created_at" : "2022-07-16T14:46:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1186209556",
      "id" : 1186209556,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585GtB8U",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186209556/reactions"
      },
      "updated_at" : "2022-07-16T14:46:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186209556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> If `getnewaddress` gave the same address every call\r\n\r\nYou can label the tweaked address. It is part of the wallet. The `rawtr(pk)` descriptor is normally added to wallet.\r\n\r\n> I thought the whole point was to make reuse of such an address safe?\r\n\r\nYes. That's the point. The same address will be tweaked on every transaction \r\n\r\nAs I understand it, the purpose of SP is primarily to increase privacy in a situation where you need to publicly post an address and anyone can send coins to it.\r\n\r\nIf you need more control to categorize each address by payer, an HD wallet is better.",
      "created_at" : "2022-07-16T15:14:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1186216119",
      "id" : 1186216119,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585GtDi3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186216119/reactions"
      },
      "updated_at" : "2022-07-16T15:25:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186216119",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">You can label the tweaked address. It is part of the wallet.\r\n\r\nThat seems like a bad design... it should show the silent address.\r\n\r\nBut more importantly, for the recipient to set a label, he has to know what it's for _first_....\r\n\r\n",
      "created_at" : "2022-07-16T15:31:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1186219581",
      "id" : 1186219581,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585GtEY9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186219581/reactions"
      },
      "updated_at" : "2022-07-16T15:31:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186219581",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> it should show the silent address. \r\n\r\nThis can be done. The wallet knows that a certain transaction / address was found by verifying SP.",
      "created_at" : "2022-07-16T15:37:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1186221029",
      "id" : 1186221029,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585GtEvl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186221029/reactions"
      },
      "updated_at" : "2022-07-16T15:37:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1186221029",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r929443015"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/929443015"
         }
      },
      "author_association" : "NONE",
      "body" : "address2 is not being used",
      "commit_id" : "1e2c0760a611253fa2dc0261fab6795ef02dc7d7",
      "created_at" : "2022-07-26T01:22:29Z",
      "diff_hunk" : "@@ -652,12 +652,67 @@ static void DiscourageFeeSniping(CMutableTransaction& tx, FastRandomContext& rng\n     }\n }\n \n+bool CreateSilentTransaction(\n+    const CWallet& wallet,\n+    const std::vector<COutput>& selected_coins,\n+    CMutableTransaction& txNew,\n+    bilingual_str& error)\n+{\n+    auto firstCoin = selected_coins.at(0);\n+\n+    const auto& spk_managers = wallet.GetScriptPubKeyMans(firstCoin.txout.scriptPubKey);\n+\n+    if (spk_managers.size() != 1) {\n+        error = _(\"Only one ScriptPubKeyManager was expected for the input.\");\n+        return false;\n+    }\n+\n+    DescriptorScriptPubKeyMan* spk_manager = dynamic_cast<DescriptorScriptPubKeyMan*>(*spk_managers.begin());\n+\n+    for (auto& vout : txNew.vout) {\n+\n+        std::vector<std::vector<unsigned char>> solutions;\n+        TxoutType whichType = Solver(vout.scriptPubKey, solutions);\n+\n+        if (whichType != TxoutType::WITNESS_V1_TAPROOT) {\n+            error = _(\"Silent Payments require that the recipients use Taproot address.\");\n+            return false;\n+        }\n+\n+        auto recipientPubKey = XOnlyPubKey(solutions[0]);\n+\n+        auto destScriptPubKey = GetScriptForDestination(WitnessV1Taproot(recipientPubKey));\n+        CTxDestination address2;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r929443015",
      "id" : 929443015,
      "line" : 685,
      "node_id" : "PRRC_kwDOABII5843ZizH",
      "original_commit_id" : "1e2c0760a611253fa2dc0261fab6795ef02dc7d7",
      "original_line" : 685,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 34,
      "pull_request_review_id" : 1050258564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/929443015/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-26T01:22:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/929443015",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/45250003?v=4",
         "events_url" : "https://api.github.com/users/librepgp/events{/privacy}",
         "followers_url" : "https://api.github.com/users/librepgp/followers",
         "following_url" : "https://api.github.com/users/librepgp/following{/other_user}",
         "gists_url" : "https://api.github.com/users/librepgp/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/librepgp",
         "id" : 45250003,
         "login" : "librepgp",
         "node_id" : "MDQ6VXNlcjQ1MjUwMDAz",
         "organizations_url" : "https://api.github.com/users/librepgp/orgs",
         "received_events_url" : "https://api.github.com/users/librepgp/received_events",
         "repos_url" : "https://api.github.com/users/librepgp/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/librepgp/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/librepgp/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/librepgp"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r934880741"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934880741"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Removed in d554e067c7715b736062312463fa8a1e36ed48c2. Thanks for review.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-08-01T20:19:20Z",
      "diff_hunk" : "@@ -652,12 +652,67 @@ static void DiscourageFeeSniping(CMutableTransaction& tx, FastRandomContext& rng\n     }\n }\n \n+bool CreateSilentTransaction(\n+    const CWallet& wallet,\n+    const std::vector<COutput>& selected_coins,\n+    CMutableTransaction& txNew,\n+    bilingual_str& error)\n+{\n+    auto firstCoin = selected_coins.at(0);\n+\n+    const auto& spk_managers = wallet.GetScriptPubKeyMans(firstCoin.txout.scriptPubKey);\n+\n+    if (spk_managers.size() != 1) {\n+        error = _(\"Only one ScriptPubKeyManager was expected for the input.\");\n+        return false;\n+    }\n+\n+    DescriptorScriptPubKeyMan* spk_manager = dynamic_cast<DescriptorScriptPubKeyMan*>(*spk_managers.begin());\n+\n+    for (auto& vout : txNew.vout) {\n+\n+        std::vector<std::vector<unsigned char>> solutions;\n+        TxoutType whichType = Solver(vout.scriptPubKey, solutions);\n+\n+        if (whichType != TxoutType::WITNESS_V1_TAPROOT) {\n+            error = _(\"Silent Payments require that the recipients use Taproot address.\");\n+            return false;\n+        }\n+\n+        auto recipientPubKey = XOnlyPubKey(solutions[0]);\n+\n+        auto destScriptPubKey = GetScriptForDestination(WitnessV1Taproot(recipientPubKey));\n+        CTxDestination address2;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r934880741",
      "id" : 934880741,
      "in_reply_to_id" : 929443015,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5843uSXl",
      "original_commit_id" : "1e2c0760a611253fa2dc0261fab6795ef02dc7d7",
      "original_line" : 791,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1057806743,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934880741/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-08-01T20:19:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/934880741",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-08-02T18:37:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1203081337",
      "id" : 1203081337,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585HtZB5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1203081337/reactions"
      },
      "updated_at" : "2022-08-02T18:37:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1203081337",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-08-05T13:56:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1206487265",
      "id" : 1206487265,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585H6Yjh",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1206487265/reactions"
      },
      "updated_at" : "2022-08-05T13:56:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1206487265",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-08-09T22:40:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1209962886",
      "id" : 1209962886,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585IHpGG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1209962886/reactions"
      },
      "updated_at" : "2022-08-09T22:40:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1209962886",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This PR has been updated with a new silent payment version, which eliminates some manual steps from the previous version (such as the need to set the `keypool` to avoid costly multi-key scan).\r\n\r\nThis is achieved by using a new descriptor type (`sp()`) that has no range and contains exactly one key.\r\n\r\nExample: `sp(cQq73sG9....JD51uaRD)#9llg6xjm`\r\n\r\nThis descriptor introduces a new type of output:  `silent-payment`. This output type returns a standard Taproot script (Segwit V1), but with HRP changed from `bc` to  `sp` on the mainnet (or `tsp` on testnet and signet).\r\n\r\nThis output type will always generate the same address (unless another `sp` descriptor is enabled on the same wallet).\r\n\r\n```bash\r\n$ ./src/bitcoin-cli -signet getnewaddress '' 'silent-payment'\r\ntsp1pfmjyl7ecpmx8yf8cu6g3ez36jy7s9mzuh5pdnal3k0n588uzgmfs4s4fws\r\n```\r\n\r\nTo create a silent transaction, simply use the silent payment address as one of the outputs. \r\nThe `send` RPC will automatically identify and tweak it.\r\n\r\nThe transaction can contain multiple outputs, combining silent and standard addresses.\r\n\r\nI have written a step by step signet tutorial so reviewers can test this new version easily.\r\nhttps://gist.github.com/w0xlt/a7b498ac1ff14b8c292a22be789bd93f",
      "created_at" : "2022-08-17T00:09:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1217295752",
      "id" : 1217295752,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585IjnWI",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1217295752/reactions"
      },
      "updated_at" : "2022-08-17T00:09:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1217295752",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-08-17T00:44:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1217313635",
      "id" : 1217313635,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585Ijrtj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1217313635/reactions"
      },
      "updated_at" : "2022-08-17T00:44:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1217313635",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "is the idea of a scanning key included in this? I would have expected `sp(...)` to contain 64 bytes (two xonly keys).",
      "created_at" : "2022-08-17T13:37:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1218022393",
      "id" : 1218022393,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585ImYv5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218022393/reactions"
      },
      "updated_at" : "2022-08-17T13:37:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218022393",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3734083?v=4",
         "events_url" : "https://api.github.com/users/LLFourn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LLFourn/followers",
         "following_url" : "https://api.github.com/users/LLFourn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LLFourn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LLFourn",
         "id" : 3734083,
         "login" : "LLFourn",
         "node_id" : "MDQ6VXNlcjM3MzQwODM=",
         "organizations_url" : "https://api.github.com/users/LLFourn/orgs",
         "received_events_url" : "https://api.github.com/users/LLFourn/received_events",
         "repos_url" : "https://api.github.com/users/LLFourn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LLFourn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LLFourn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LLFourn"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I think there is a use case for multiple SP addresses and this is probably what @luke-jr meant. Let's say I work on two Open Source projects. I could post the same SP address for both but it'd be nicer to post a separate SP address for each. Then I would be able to determine how much people appreciate each project. Perhaps most donations go only to one of them so I should focus on that one? It may be an advanced use case but a very reasonable one. I'd myself definitely prefer this over having one address.",
      "created_at" : "2022-08-17T15:24:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1218159758",
      "id" : 1218159758,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585Im6SO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218159758/reactions"
      },
      "updated_at" : "2022-08-17T15:24:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218159758",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1178779?v=4",
         "events_url" : "https://api.github.com/users/Kixunil/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Kixunil/followers",
         "following_url" : "https://api.github.com/users/Kixunil/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Kixunil/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Kixunil",
         "id" : 1178779,
         "login" : "Kixunil",
         "node_id" : "MDQ6VXNlcjExNzg3Nzk=",
         "organizations_url" : "https://api.github.com/users/Kixunil/orgs",
         "received_events_url" : "https://api.github.com/users/Kixunil/received_events",
         "repos_url" : "https://api.github.com/users/Kixunil/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Kixunil/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Kixunil/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Kixunil"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Many people don't receive only donations. If you have multiple clients, you need a different address for each so you know who is paying you.",
      "created_at" : "2022-08-17T16:03:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1218217369",
      "id" : 1218217369,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585InIWZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218217369/reactions"
      },
      "updated_at" : "2022-08-17T16:03:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218217369",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@Kixunil 2 wallets (different silent payment address) for 2 projects would also make sense ",
      "created_at" : "2022-08-17T16:03:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1218217431",
      "id" : 1218217431,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585InIXX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218217431/reactions"
      },
      "updated_at" : "2022-08-17T16:03:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218217431",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Many people don't receive only donations. If you have multiple clients, you need a different address for each so you know who is paying you.\r\n\r\n@luke-jr client could share txid in which he sent the payment ",
      "created_at" : "2022-08-17T16:05:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1218220136",
      "id" : 1218220136,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585InJBo",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218220136/reactions"
      },
      "updated_at" : "2022-08-17T16:05:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218220136",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@luke-jr indeed, though you could already send a different xpub to each client and avoid some scanning costs. SP address may be nicer though, not sure.\r\n\r\n@1440000bytes yes, those hacks are available but I'd prefer to avoid such hacks because they significantly degrade UX.",
      "created_at" : "2022-08-17T16:16:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1218231718",
      "id" : 1218231718,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585InL2m",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218231718/reactions"
      },
      "updated_at" : "2022-08-17T16:16:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218231718",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1178779?v=4",
         "events_url" : "https://api.github.com/users/Kixunil/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Kixunil/followers",
         "following_url" : "https://api.github.com/users/Kixunil/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Kixunil/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Kixunil",
         "id" : 1178779,
         "login" : "Kixunil",
         "node_id" : "MDQ6VXNlcjExNzg3Nzk=",
         "organizations_url" : "https://api.github.com/users/Kixunil/orgs",
         "received_events_url" : "https://api.github.com/users/Kixunil/received_events",
         "repos_url" : "https://api.github.com/users/Kixunil/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Kixunil/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Kixunil/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Kixunil"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @1440000bytes yes, those hacks are available but I'd prefer to avoid such hacks because they significantly degrade UX.\r\n\r\nNot sure I would consider it hack because it makes things simple. Even BIP 47 has one reusable code per wallet so I would find it confusing to have multiple silent payment address in the same wallet. Although no strong opinion and won't mind anything as long as silent payment address is available in core.",
      "created_at" : "2022-08-17T16:28:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1218245487",
      "id" : 1218245487,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585InPNv",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218245487/reactions"
      },
      "updated_at" : "2022-08-17T16:28:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218245487",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "* May make spending funds together impossible/difficult\r\n* Managing multiple wallets is PITA\r\n* Sending txid is just more work for humans that computers could do instead\r\n\r\nI think these are enough reasons to at least support multiple addresses in *descriptors* and leaving it up to wallets to decide whether to provide support for more than one in GUI/CLI/...",
      "created_at" : "2022-08-17T16:41:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1218258776",
      "id" : 1218258776,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585InSdY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218258776/reactions"
      },
      "updated_at" : "2022-08-17T16:41:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218258776",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1178779?v=4",
         "events_url" : "https://api.github.com/users/Kixunil/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Kixunil/followers",
         "following_url" : "https://api.github.com/users/Kixunil/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Kixunil/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Kixunil",
         "id" : 1178779,
         "login" : "Kixunil",
         "node_id" : "MDQ6VXNlcjExNzg3Nzk=",
         "organizations_url" : "https://api.github.com/users/Kixunil/orgs",
         "received_events_url" : "https://api.github.com/users/Kixunil/received_events",
         "repos_url" : "https://api.github.com/users/Kixunil/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Kixunil/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Kixunil/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Kixunil"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> client could share txid in which he sent the payment\r\n\r\nAnyone could claim to have sent it. There is still no proof-of-sender in Bitcoin, and it doesn't look like anyone is working on it.\r\n\r\nEven if it were possible, it'd still be a pain - this kind of thing should \"just work\" and label transactions, without extra steps from the users.\r\n\r\n>Even BIP 47 has one reusable code per wallet\r\n\r\nBIP 47 was a bad design that shouldn't be implemented nor imitated...\r\n\r\n",
      "created_at" : "2022-08-17T22:55:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1218576871",
      "id" : 1218576871,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585IogHn",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218576871/reactions"
      },
      "updated_at" : "2022-08-17T22:55:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218576871",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The default behavior for most descriptors is to be ranged and therefore support multiple addresses.\r\nIf the idea is to have multiple `sp` addresses, a ranged `sp` version is sufficient (and is easier to implement than the current version).\r\n\r\nThe decision to use a rangeless descriptor is for validation purposes.\r\nVerification of silent payments is costly. And if the user inadvertently generates multiple `sp` addresses, the overhead can be prohibitive.\r\nUntil there are more reliable statistics on how many `sp` addresses a node (even on a raspberrey) can process (from mempool and when loading wallets), I think it's prudent to keep only one active address per wallet.\r\n\r\nThe label issue shouldn't be complicated, I think. \r\nUTXO can inherit the same label assigned to the `sp` address or descriptor.\r\nI can work on that in the next iteration.",
      "created_at" : "2022-08-17T23:20:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1218630414",
      "id" : 1218630414,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585IotMO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218630414/reactions"
      },
      "updated_at" : "2022-08-17T23:20:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218630414",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "NONE",
      "body" : ">I think there is a use case for multiple SP addresses\r\n\r\n@Kixunil good point about wanting to identify the reason for the payment. Naively, the issue is that two keys means twice the scanning, but an interesting alternative would be to simply use the same key (assuming you're OK with using the same identity) but add a public identifier `f` to it when tweaking. So instead of `hash(i*X)*G + X` you get `hash(i*X)*G + X + f*G `. This means every additional \"address\" only costs one additional ECC addition when scanning (relatively cheap compared to doing ECC multiplications).\r\n\r\nThe main downside with this is that `f` becomes crucial for recovering from backup. If we set `f` as an index (0, 1, 2, 3...) then you'd only have to remember how many \"addresses\" you issued (and perhaps overshoot when unsure) to ensure recovery of funds, though of course you'd rather also remember which index is associated with what payment reason.\r\n\r\nAbsolute worst case scenario you could even do something similar to the gap limit where you scan the full history (not just the UTXO set so you don't miss spent outputs) with a default max index of e.g. 100, and then if you find out most of them are in use, you scan the next 100, etc. Costly, but thorough, and only needed as a last resort.",
      "created_at" : "2022-08-17T23:26:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1218641521",
      "id" : 1218641521,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585Iov5x",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218641521/reactions"
      },
      "updated_at" : "2022-08-17T23:28:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218641521",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/9066803?v=4",
         "events_url" : "https://api.github.com/users/RubenSomsen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RubenSomsen/followers",
         "following_url" : "https://api.github.com/users/RubenSomsen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RubenSomsen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RubenSomsen",
         "id" : 9066803,
         "login" : "RubenSomsen",
         "node_id" : "MDQ6VXNlcjkwNjY4MDM=",
         "organizations_url" : "https://api.github.com/users/RubenSomsen/orgs",
         "received_events_url" : "https://api.github.com/users/RubenSomsen/received_events",
         "repos_url" : "https://api.github.com/users/RubenSomsen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RubenSomsen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RubenSomsen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RubenSomsen"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-08-19T17:51:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1220951357",
      "id" : 1220951357,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585Ixj09",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1220951357/reactions"
      },
      "updated_at" : "2022-08-19T17:51:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1220951357",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-08-31T09:30:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1232699656",
      "id" : 1232699656,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585JeYEI",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232699656/reactions"
      },
      "updated_at" : "2022-08-31T09:30:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232699656",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> This PR has been updated with a new silent payment version, which eliminates some manual steps from the previous version (such as the need to set the `keypool` to avoid costly multi-key scan).\r\n> \r\n> This is achieved by using a new descriptor type (`sp()`) that has no range and contains exactly one key.\r\n> \r\n> Example: `sp(cQq73sG9....JD51uaRD)#9llg6xjm`\r\n> \r\n> This descriptor introduces a new type of output: `silent-payment`. This output type returns a standard Taproot script (Segwit V1), but with HRP changed from `bc` to `sp` on the mainnet (or `tsp` on testnet and signet).\r\n> \r\n> This output type will always generate the same address (unless another `sp` descriptor is enabled on the same wallet).\r\n> \r\n> ```shell\r\n> $ ./src/bitcoin-cli -signet getnewaddress '' 'silent-payment'\r\n> tsp1pfmjyl7ecpmx8yf8cu6g3ez36jy7s9mzuh5pdnal3k0n588uzgmfs4s4fws\r\n> ```\r\n> \r\n> To create a silent transaction, simply use the silent payment address as one of the outputs. The `send` RPC will automatically identify and tweak it.\r\n> \r\n> The transaction can contain multiple outputs, combining silent and standard addresses.\r\n> \r\n> I have written a step by step signet tutorial so reviewers can test this new version easily. https://gist.github.com/w0xlt/a7b498ac1ff14b8c292a22be789bd93f\r\n\r\nTested the new version and everything worked fine except scanning UTXO set: https://gist.github.com/w0xlt/a7b498ac1ff14b8c292a22be789bd93f?permalink_comment_id=4286510#gistcomment-4286510\r\n\r\nI have updated the steps I followed here in tutorial section: https://silentbitco.in/\r\n\r\nUpdated the new silent payment address in DNS as TXT record: [`tsp1pkr8e083j7vp0w82ry5s53rz3t26yf0p8dzg7gqs53r6y399kyw4qa8z52y`](https://mxtoolbox.com/SuperTool.aspx?action=txt%3aalice.silentbitco.in)\r\n\r\n---\r\n\r\nSuggestion: We could add a new RPC command to create silent payment address instead of using `getnewaddress`. So the CLI command would look like this:\r\n\r\n```\r\n$ bitcoin-cli getspaddress\r\n```",
      "created_at" : "2022-09-01T06:45:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1233819035",
      "id" : 1233819035,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585JipWb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1233819035/reactions"
      },
      "updated_at" : "2022-09-01T06:45:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1233819035",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-09-13T16:35:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1245664312",
      "id" : 1245664312,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585KP1Q4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1245664312/reactions"
      },
      "updated_at" : "2022-09-13T16:35:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1245664312",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@w0xlt can you rebase? \r\n\r\n> The purpose of this PR is not a final version, but to start the discussion and get benchmarks based on a real implementation.\r\n\r\n> T> his version is built on top of https://github.com/bitcoin-core/secp256k1/pull/994 (bitcoin-core/secp256k1) for x-only ECDH support and https://github.com/bitcoin/bitcoin/pull/23480 (bitcoin/bitcoin) for rawtr(). Each new silent transaction detected is stored in wallet as a rawtr() descriptor.\r\n\r\nCan you confirm this is one of the version that can be used for bitcoin?",
      "created_at" : "2022-09-13T16:56:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1245687307",
      "id" : 1245687307,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585KP64L",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1245687307/reactions"
      },
      "updated_at" : "2022-09-13T16:56:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1245687307",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@1440000bytes Done.\r\n\r\nI am not sure I understand your question. The idea of current implementation is to be used with Bitcoin.\r\nI'm evaluating the possibility of including more than one `sp` address per wallet, but that would be a future change .",
      "created_at" : "2022-09-18T15:48:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1250335151",
      "id" : 1250335151,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585Khpmv",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1250335151/reactions"
      },
      "updated_at" : "2022-09-18T15:48:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1250335151",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Sorry I forgot to mention 'mainnet' after bitcoin. Wanted to know if this version is good enough for mainnet and what else could be done to get more reviews and eventually get this merged before v25.0",
      "created_at" : "2022-09-18T15:55:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1250336244",
      "id" : 1250336244,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585Khp30",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1250336244/reactions"
      },
      "updated_at" : "2022-09-18T15:55:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1250336244",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Can you please @luke-jr and @achow101 we need this is is core... please",
      "created_at" : "2022-09-29T21:19:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1262826653",
      "id" : 1262826653,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585LRTSd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1262826653/reactions"
      },
      "updated_at" : "2022-09-29T21:19:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1262826653",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@1440000bytes This isn't even close to ready for review yet... It still needs at least a BIP and support for generating multiple addresses. And the secp256k1 changes also haven't been merged yet, much less included in the version Bitcoin Core uses.\r\n\r\n>Suggestion: We could add a new RPC command to create silent payment address instead of using getnewaddress.\r\n\r\nWhy? `getnewaddress` is the correct thing to use here...",
      "created_at" : "2022-09-29T21:57:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1262857525",
      "id" : 1262857525,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585LRa01",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1262857525/reactions"
      },
      "updated_at" : "2022-09-29T21:57:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1262857525",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This new version addresses most (or all) requests made in PR so far:\r\n\r\n. Implements the new scheme suggested by @RubenSomsen that allows multiple silent addresses per wallet with minimal overhead.\r\n. Implements a new RPC to retrieve silent addresses (suggested by @1440000bytes), which allows users to assign different labels to different addresses. That way, the user knows which silent address the UTXO came from (as suggested by @luke-jr).\r\n\r\nExample:\r\n\r\n```bash\r\n./src/bitcoin-cli -signet -rpcwallet=\"receiver\" getspaddress\r\ntsp001pjgcwd9p6f2rcgf35dlgvj77h2afylg6lp5cdn0cztrk4k54w99kqxn48tq\r\n\r\n# This will return the same address as above (both have no label)\r\n./src/bitcoin-cli -signet -rpcwallet=\"receiver\" getspaddress\r\ntsp001pjgcwd9p6f2rcgf35dlgvj77h2afylg6lp5cdn0cztrk4k54w99kqxn48tq\r\n\r\n# New label, new address\r\n./src/bitcoin-cli -signet -rpcwallet=\"receiver\" getspaddress 'donation'\r\ntsp011pjgcwd9p6f2rcgf35dlgvj77h2afylg6lp5cdn0cztrk4k54w99kq80t7lt \r\n```\r\n\r\nIn this new scheme, the address has a new field called identifier, which tells the receiver and sender how to tweak the address correctly.\r\n\r\nIf the receiver, for whatever reason, doesn't know which identifiers have been used, there is no problem. The wallet can scan all identifiers from 0 to 99. Currently, only 100 different identifiers per wallet are allowed. This limit, however, can be increased at any time in the future.\r\n\r\nUnlike address formats so far, `sp` addresses are not script-related and may eventually include any additional information needed, such as an expiration timestamp (or block height). That way, users don't have to track the address indefinitely.\r\n\r\nAs usual I wrote a step by step tutorial:\r\nhttps://gist.github.com/w0xlt/c81277ae8677b6c0d3dd073893210875",
      "created_at" : "2022-09-29T22:03:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1262862099",
      "id" : 1262862099,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585LRb8T",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1262862099/reactions"
      },
      "updated_at" : "2022-09-29T23:26:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1262862099",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @1440000bytes This isn't even close to ready for review yet... It still needs at least a BIP and support for generating multiple addresses. And the secp256k1 changes also haven't been merged yet, much less included in the version Bitcoin Core uses.\r\n> \r\n> > Suggestion: We could add a new RPC command to create silent payment address instead of using getnewaddress.\r\n> \r\n> Why? `getnewaddress` is the correct thing to use here...\r\n\r\nI respect for your review. At least we know whats needed for bitcoin core/knots  to use this.",
      "created_at" : "2022-09-29T22:08:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1262865155",
      "id" : 1262865155,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585LRcsD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1262865155/reactions"
      },
      "updated_at" : "2022-09-29T22:08:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1262865155",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@1440000bytes This new push addresses all requests made so far, but as @luke-jr said, there is still a long way to go before this PR is merged (if at all). https://github.com/bitcoin-core/secp256k1/pull/994 needs to be merged first.\r\n\r\n> Why? getnewaddress is the correct thing to use here...\r\n\r\nI accepted the suggestion of @1440000bytes because `getspaddress` will not necessarily return a new address. If the user repeats the label, the address will be the same, so `getnewaddress` does not exactly represent the expected behavior.",
      "created_at" : "2022-09-29T22:12:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1262869408",
      "id" : 1262869408,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585LRdug",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1262869408/reactions"
      },
      "updated_at" : "2022-09-29T22:12:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1262869408",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @1440000bytes This new push addresses all requests made so far, but as @luke-jr said, there is still a long way to go before this PR is merged (if at all). [bitcoin-core/secp256k1#994](https://github.com/bitcoin-core/secp256k1/pull/994) needs to be merged first.\r\n> \r\n> > Why? getnewaddress is the correct thing to use here...\r\n> \r\n> I accepted the suggestion of @1440000bytes because `getspaddress` will not necessarily return a new address. If the user repeats the label, the address will be the same, so `getnewaddress` does not exactly represent the expected behavior.\r\n\r\nI dont want this as another \"proof of concept\"\r\n\r\nUsers need privacy right now and it will be an inspiration when core wallet does it with something like silent payment. We don't need to share bitcoin address on social media.\r\n\r\nRoss https://twitter.com/raw_avocado/status/1575110869809143808 got it wrong with opsec by sharing email address on bitcointalk. Lot of users were tracked because they shared bitcoin address on social media. Lets fix this partially by allowing the users to share a silent payment address.   ",
      "created_at" : "2022-09-29T22:41:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1262900646",
      "id" : 1262900646,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585LRlWm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1262900646/reactions"
      },
      "updated_at" : "2022-09-29T22:43:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1262900646",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "You can try this as well: https://github.com/bitcoin-inquisition/bitcoin/pulls",
      "created_at" : "2022-09-29T22:45:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1262907414",
      "id" : 1262907414,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585LRnAW",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1262907414/reactions"
      },
      "updated_at" : "2022-09-29T22:45:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1262907414",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">This new version addresses most (or all) requests made in PR so far:\r\n\r\nI just finished going over the BIPs PRs and didn't see one for this yet.\r\n\r\n>In this new scheme, the address has a new field called identifier, which tells the receiver and sender how to set the address correctly.\r\n\r\nWouldn't this allow someone who obtains two addresses, to determine they are both for the same wallet? Seems like a major privacy problem.\r\n\r\n> Currently, only 100 different identifiers per wallet are allowed. This limit, however, can be increased at any time in the future.\r\n\r\nAny limit seems problematic, but 100 is definitely too few.\r\n\r\n>>Why? getnewaddress is the correct thing to use here...\r\n\r\n>I accepted the suggestion of @1440000bytes because getspaddress will not necessarily return a new address. If the user repeats the label, the address will be the same, so getnewaddress does not exactly represent the expected behavior.\r\n\r\nI see, that makes sense. `getaccountaddress` used to do something similar. We no longer have accounts, but maybe a more generic name `getreusableaddress` would be better. (I assume `getnewaddress` can also be used still?)\r\n",
      "created_at" : "2022-09-29T23:07:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1262921393",
      "id" : 1262921393,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585LRqax",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1262921393/reactions"
      },
      "updated_at" : "2022-09-29T23:07:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1262921393",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984688350"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984688350"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in 06037565e907c020340e064a5612abfebf347cc9\r\ncould simplify code\r\n```cpp\r\nbool ret = (fExisted || IsMine(tx) || IsFromMe(tx)) ? HandleNewTxBelongingToMe(tx, state, rescanning_old_block) : false;\r\nif (IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENT) && VerifySilentPayment(tx, rawTrKeys)) {\r\n    ret = AddSilentScriptKeyMan(tx, state, rescanning_old_block, rawTrKeys) || ret;\r\n}\r\nreturn ret;\r\n```\r\ninstead of \r\n\r\n```cpp\r\nbool ret = false;\r\n\r\nif (fExisted || IsMine(tx) || IsFromMe(tx))\r\n{\r\n    ret = HandleNewTxBelongingToMe(tx, state, rescanning_old_block);\r\n}\r\n\r\nif (IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENT) && VerifySilentPayment(tx, rawTrKeys))\r\n{\r\n    ret = AddSilentScriptKeyMan(tx, state, rescanning_old_block, rawTrKeys) || ret;\r\n}\r\n\r\nreturn ret;\r\n```",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T15:02:17Z",
      "diff_hunk" : "@@ -1154,47 +1254,20 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxS\n \n         bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n         if (fExisted && !fUpdate) return false;\n-        if (fExisted || IsMine(tx) || IsFromMe(tx))\n-        {\n-            /* Check if any keys in the wallet keypool that were supposed to be unused\n-             * have appeared in a new transaction. If so, remove those keys from the keypool.\n-             * This can happen when restoring an old wallet backup that does not contain\n-             * the mostly recently created transactions from newer versions of the wallet.\n-             */\n-\n-            // loop though all outputs\n-            for (const CTxOut& txout: tx.vout) {\n-                for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n-                    for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n-                        // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n-                        if (!dest.internal.has_value()) {\n-                            dest.internal = IsInternalScriptPubKeyMan(spk_man);\n-                        }\n \n-                        // skip if can't determine whether it's a receiving address or not\n-                        if (!dest.internal.has_value()) continue;\n+        bool ret = false;\n \n-                        // If this is a receiving address and it's not in the address book yet\n-                        // (e.g. it wasn't generated on this node or we're restoring from backup)\n-                        // add it to the address book for proper transaction accounting\n-                        if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n-                            SetAddressBook(dest.dest, \"\", \"receive\");\n-                        }\n-                    }\n-                }\n-            }\n+        if (fExisted || IsMine(tx) || IsFromMe(tx))\n+        {\n+            ret = HandleNewTxBelongingToMe(tx, state, rescanning_old_block);\n+        }\n \n-            // Block disconnection override an abandoned tx as unconfirmed\n-            // which means user may have to call abandontransaction again\n-            TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n-            CWalletTx* wtx = AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n-            if (!wtx) {\n-                // Can only be nullptr if there was a db write error (missing db, read-only db or a db engine internal writing error).\n-                // As we only store arriving transaction in this process, and we don't want an inconsistent state, let's throw an error.\n-                throw std::runtime_error(\"DB error adding transaction to wallet, write failed\");\n-            }\n-            return true;\n+        if (IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENT) && VerifySilentPayment(tx, rawTrKeys))\n+        {\n+            ret = AddSilentScriptKeyMan(tx, state, rescanning_old_block, rawTrKeys) || ret;\n         }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984688350",
      "id" : 984688350,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846sSbe",
      "original_commit_id" : "06037565e907c020340e064a5612abfebf347cc9",
      "original_line" : 1268,
      "original_position" : 165,
      "original_start_line" : 1258,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984688350/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-30T16:19:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984688350",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984691039"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984691039"
         }
      },
      "author_association" : "MEMBER",
      "body" : "no need for this scope",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T15:05:11Z",
      "diff_hunk" : "@@ -1133,12 +1133,112 @@ bool CWallet::LoadToWallet(const uint256& hash, const UpdateWalletTxFn& fill_wtx\n     return true;\n }\n \n+bool CWallet::HandleNewTxBelongingToMe(const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    /* Check if any keys in the wallet keypool that were supposed to be unused\n+        * have appeared in a new transaction. If so, remove those keys from the keypool.\n+        * This can happen when restoring an old wallet backup that does not contain\n+        * the mostly recently created transactions from newer versions of the wallet.\n+        */\n+\n+    // loop though all outputs\n+    for (const CTxOut& txout: tx.vout) {\n+        for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n+            for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n+                // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n+                if (!dest.internal.has_value()) {\n+                    dest.internal = IsInternalScriptPubKeyMan(spk_man);\n+                }\n+\n+                // skip if can't determine whether it's a receiving address or not\n+                if (!dest.internal.has_value()) continue;\n+\n+                // If this is a receiving address and it's not in the address book yet\n+                // (e.g. it wasn't generated on this node or we're restoring from backup)\n+                // add it to the address book for proper transaction accounting\n+                if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n+                    SetAddressBook(dest.dest, \"\", \"receive\");\n+                }\n+            }\n+        }\n+    }\n+\n+    // Block disconnection override an abandoned tx as unconfirmed\n+    // which means user may have to call abandontransaction again\n+    TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n+    CWalletTx* wtx = AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n+    if (!wtx) {\n+        // Can only be nullptr if there was a db write error (missing db, read-only db or a db engine internal writing error).\n+        // As we only store arriving transaction in this process, and we don't want an inconsistent state, let's throw an error.\n+        throw std::runtime_error(\"DB error adding transaction to wallet, write failed\");\n+    }\n+    return true;\n+}\n+\n+bool CWallet::AddSilentScriptKeyMan(\n+    const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block, const std::vector<std::tuple<CKey, int32_t>>& rawTrKeys)\n+{\n+    WalletLogPrintf(\"Silent Transaction identified: %s.\\n\", tx.GetHash().ToString());\n+\n+    for(auto& identifier_key: rawTrKeys) {\n+\n+        CKey key = std::get<0>(identifier_key);\n+        int32_t identifier = std::get<1>(identifier_key);\n+\n+        std::string desc = \"rawtr(\" + EncodeSecret(key) + \")\";\n+        std::string checksum = GetDescriptorChecksum(desc);\n+\n+        auto timestamp = std::chrono::duration_cast<std::chrono::microseconds>(\n+            std::chrono::system_clock::now().time_since_epoch()).count();\n+\n+        std::string desc_check = desc + \"#\" + checksum;\n+\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(desc_check, keys, error, /* require_checksum = */ true);\n+        assert(parsed_desc);\n+\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+\n+        // Need to ExpandPrivate to check if private keys are available for all pubkeys\n+        FlatSigningProvider expand_keys;\n+        std::vector<CScript> scripts;\n+        assert(parsed_desc->Expand(0, keys, scripts, expand_keys));\n+        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        std::string label;\n+\n+        if (m_silent_address_book.count(identifier)) {\n+            auto entry = m_silent_address_book[identifier];\n+            label = entry.m_label;\n+        } else {\n+            std::stringstream ss;\n+            ss << identifier;\n+            label = ss.str();\n+        }\n+\n+        auto existing_spk_manager = GetDescriptorScriptPubKeyMan(w_desc);\n+        if (!existing_spk_manager) {\n+            auto spk_manager = AddWalletDescriptor(w_desc, keys, label, false);\n+            assert(spk_manager != nullptr);\n+        }\n+    }\n+\n+    return HandleNewTxBelongingToMe(tx, state, rescanning_old_block);\n+}\n+\n bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxState& state, bool fUpdate, bool rescanning_old_block)\n {\n     const CTransaction& tx = *ptx;\n     {\n         AssertLockHeld(cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984691039",
      "id" : 984691039,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846sTFf",
      "original_commit_id" : "06037565e907c020340e064a5612abfebf347cc9",
      "original_line" : 1238,
      "original_position" : 106,
      "original_start_line" : 1237,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984691039/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-30T16:15:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984691039",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984696515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984696515"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this will never be reached",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T15:11:12Z",
      "diff_hunk" : "@@ -1154,47 +1254,20 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxS\n \n         bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n         if (fExisted && !fUpdate) return false;\n-        if (fExisted || IsMine(tx) || IsFromMe(tx))\n-        {\n-            /* Check if any keys in the wallet keypool that were supposed to be unused\n-             * have appeared in a new transaction. If so, remove those keys from the keypool.\n-             * This can happen when restoring an old wallet backup that does not contain\n-             * the mostly recently created transactions from newer versions of the wallet.\n-             */\n-\n-            // loop though all outputs\n-            for (const CTxOut& txout: tx.vout) {\n-                for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n-                    for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n-                        // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n-                        if (!dest.internal.has_value()) {\n-                            dest.internal = IsInternalScriptPubKeyMan(spk_man);\n-                        }\n \n-                        // skip if can't determine whether it's a receiving address or not\n-                        if (!dest.internal.has_value()) continue;\n+        bool ret = false;\n \n-                        // If this is a receiving address and it's not in the address book yet\n-                        // (e.g. it wasn't generated on this node or we're restoring from backup)\n-                        // add it to the address book for proper transaction accounting\n-                        if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n-                            SetAddressBook(dest.dest, \"\", \"receive\");\n-                        }\n-                    }\n-                }\n-            }\n+        if (fExisted || IsMine(tx) || IsFromMe(tx))\n+        {\n+            ret = HandleNewTxBelongingToMe(tx, state, rescanning_old_block);\n+        }\n \n-            // Block disconnection override an abandoned tx as unconfirmed\n-            // which means user may have to call abandontransaction again\n-            TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n-            CWalletTx* wtx = AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n-            if (!wtx) {\n-                // Can only be nullptr if there was a db write error (missing db, read-only db or a db engine internal writing error).\n-                // As we only store arriving transaction in this process, and we don't want an inconsistent state, let's throw an error.\n-                throw std::runtime_error(\"DB error adding transaction to wallet, write failed\");\n-            }\n-            return true;\n+        if (IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENT) && VerifySilentPayment(tx, rawTrKeys))\n+        {\n+            ret = AddSilentScriptKeyMan(tx, state, rescanning_old_block, rawTrKeys) || ret;\n         }\n+\n+        return ret;\n     }\n     return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984696515",
      "id" : 984696515,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846sUbD",
      "original_commit_id" : "06037565e907c020340e064a5612abfebf347cc9",
      "original_line" : 1272,
      "original_position" : 169,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984696515/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-30T16:15:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984696515",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984700363"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984700363"
         }
      },
      "author_association" : "MEMBER",
      "body" : "3c05b6baaea9054d000cbce1390463cc150b80b1: explicit what these `uint256` correspond to \r\n```suggestion\r\n    std::vector<std::pair<uint256, uint256>> items; // <tx_hash, keydata>\r\n```",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T15:15:27Z",
      "diff_hunk" : "@@ -0,0 +1,206 @@\n+#include <index/silentpaymentindex.h>\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/disktxpos.h>\n+#include <node/blockstorage.h>\n+#include <pubkey.h>\n+#include <undo.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+\n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n+\n+constexpr uint8_t DB_SILENTPAYMENTINDEX{'s'};\n+\n+std::unique_ptr<SilentPaymentIndex> g_silentpaymentindex;\n+\n+/** Access to the silent payment index database (indexes/silentpaymentindex/) */\n+class SilentPaymentIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    bool WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items);\n+};\n+\n+SilentPaymentIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"silentpaymentindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool SilentPaymentIndex::DB::WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : items) {\n+        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+SilentPaymentIndex::SilentPaymentIndex(std::unique_ptr<interfaces::Chain> chain, size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : BaseIndex(std::move(chain), \"silentpaymentindex\"), m_db(std::make_unique<SilentPaymentIndex::DB>(n_cache_size, f_memory, f_wipe))\n+{}\n+\n+SilentPaymentIndex::~SilentPaymentIndex() {}\n+\n+bool SilentPaymentIndex::ExtractPubkeyFromInput(const Coin& prevCoin, const CTxIn& txin,  XOnlyPubKey& senderPubKey)\n+{\n+    // scriptPubKey being spent by this input\n+    CScript scriptPubKey = prevCoin.out.scriptPubKey;\n+\n+    if (scriptPubKey.IsPayToWitnessScriptHash()) {\n+        return false;\n+    }\n+\n+    // Vector of parsed pubkeys and hashes\n+    std::vector<std::vector<unsigned char>> solutions;\n+\n+    TxoutType whichType = Solver(scriptPubKey, solutions);\n+\n+    if (whichType == TxoutType::NONSTANDARD ||\n+    whichType == TxoutType::MULTISIG ||\n+    whichType == TxoutType::WITNESS_UNKNOWN ) {\n+        return false;\n+    }\n+\n+    const CScript scriptSig = txin.scriptSig;\n+    const CScriptWitness scriptWitness = txin.scriptWitness;\n+\n+    assert(senderPubKey.IsNull());\n+\n+    // TODO: Condition not tested\n+    if (whichType == TxoutType::PUBKEY) {\n+\n+        CPubKey pubkey = CPubKey(solutions[0]);\n+        assert(pubkey.IsFullyValid());\n+        senderPubKey = XOnlyPubKey(pubkey);\n+    }\n+\n+    else if (whichType == TxoutType::PUBKEYHASH) {\n+\n+        int sigSize = static_cast<int>(scriptSig[0]);\n+        int pubKeySize = static_cast<int>(scriptSig[sigSize + 1]);\n+        auto serializedPubKey = std::vector<unsigned char>(scriptSig.begin() + sigSize + 2, scriptSig.end());\n+        assert(serializedPubKey.size() == (size_t) pubKeySize);\n+\n+        CPubKey pubkey = CPubKey(serializedPubKey);\n+        assert(pubkey.IsFullyValid());\n+\n+        senderPubKey = XOnlyPubKey(pubkey);\n+\n+    }\n+\n+    else if (whichType == TxoutType::WITNESS_V0_KEYHASH || scriptPubKey.IsPayToScriptHash()) {\n+        if (scriptWitness.stack.size() != 2) return false;\n+        assert(scriptWitness.stack.at(1).size() == 33);\n+\n+        CPubKey pubkey = CPubKey(scriptWitness.stack.at(1));\n+        assert(pubkey.IsFullyValid());\n+\n+        senderPubKey = XOnlyPubKey(pubkey);\n+    }\n+\n+    else if (whichType == TxoutType::WITNESS_V1_TAPROOT) {\n+\n+        senderPubKey = XOnlyPubKey(solutions[0]);\n+        assert(senderPubKey.IsFullyValid());\n+    }\n+\n+    CTxDestination address;\n+    ExtractDestination(scriptPubKey, address);\n+\n+    return true;\n+}\n+\n+bool SilentPaymentIndex::GetSilentPaymentKey(const CTransactionRef& tx, const CBlockIndex* blockindex, XOnlyPubKey& firstInputPubKey)\n+{\n+    if (tx->IsCoinBase()) {\n+        return false;\n+    }\n+\n+    for (auto& vout : tx->vout) {\n+        std::vector<std::vector<unsigned char>> solutions;\n+        TxoutType whichType = Solver(vout.scriptPubKey, solutions);\n+\n+        if (whichType != TxoutType::WITNESS_V1_TAPROOT) {\n+            return false;\n+        }\n+    }\n+\n+    CBlockUndo blockUndo;\n+    CBlock block;\n+\n+    if (!(UndoReadFromDisk(blockUndo, blockindex) && ReadBlockFromDisk(block, blockindex, Params().GetConsensus()))) {\n+        return false;\n+    }\n+\n+    CTxUndo* undoTX {nullptr};\n+    auto it = std::find_if(block.vtx.begin(), block.vtx.end(), [tx](CTransactionRef t){ return *t == *tx; });\n+    if (it != block.vtx.end()) {\n+        // -1 as blockundo does not have coinbase tx\n+        undoTX = &blockUndo.vtxundo.at(it - block.vtx.begin() - 1);\n+    }\n+\n+    if (undoTX == nullptr) {\n+        return false;\n+    }\n+\n+    const Coin& prev_coin = undoTX->vprevout[0];\n+\n+    const CTxIn& txin = tx->vin.at(0);\n+\n+    return ExtractPubkeyFromInput(prev_coin, txin, firstInputPubKey);\n+}\n+\n+bool SilentPaymentIndex::CustomAppend(const interfaces::BlockInfo& block)\n+{\n+    // Exclude genesis block transaction because outputs are not spendable.\n+    if (block.height == 0) return true;\n+\n+    assert(block.data);\n+\n+    Consensus::Params consensus = Params().GetConsensus();\n+\n+    if (block.height < consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height) {\n+        return true;\n+    }\n+\n+    std::vector<std::pair<uint256, uint256>> items;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984700363",
      "id" : 984700363,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846sVXL",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 172,
      "original_position" : 172,
      "original_start_line" : null,
      "path" : "src/index/silentpaymentindex.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984700363/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-30T16:15:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984700363",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984701121"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984701121"
         }
      },
      "author_association" : "MEMBER",
      "body" : "3c05b6baaea9054d000cbce1390463cc150b80b1\r\n```suggestion\r\n    for (const auto& [tx_hash, keydata] : items) {\r\n        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tx_hash), keydata);\r\n    }\r\n```",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T15:16:18Z",
      "diff_hunk" : "@@ -0,0 +1,206 @@\n+#include <index/silentpaymentindex.h>\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/disktxpos.h>\n+#include <node/blockstorage.h>\n+#include <pubkey.h>\n+#include <undo.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+\n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n+\n+constexpr uint8_t DB_SILENTPAYMENTINDEX{'s'};\n+\n+std::unique_ptr<SilentPaymentIndex> g_silentpaymentindex;\n+\n+/** Access to the silent payment index database (indexes/silentpaymentindex/) */\n+class SilentPaymentIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    bool WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items);\n+};\n+\n+SilentPaymentIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"silentpaymentindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool SilentPaymentIndex::DB::WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : items) {\n+        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tuple.first), tuple.second);\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984701121",
      "id" : 984701121,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846sVjB",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 40,
      "original_position" : 40,
      "original_start_line" : 38,
      "path" : "src/index/silentpaymentindex.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984701121/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-30T16:15:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984701121",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984705023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984705023"
         }
      },
      "author_association" : "MEMBER",
      "body" : "3c05b6baaea9054d000cbce1390463cc150b80b1\r\n```suggestion\r\nbool SilentPaymentIndex::ExtractPubkeyFromInput(const Coin& prevCoin, const CTxIn& txin,  XOnlyPubKey& senderPubKey) const\r\n```",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T15:20:32Z",
      "diff_hunk" : "@@ -0,0 +1,206 @@\n+#include <index/silentpaymentindex.h>\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/disktxpos.h>\n+#include <node/blockstorage.h>\n+#include <pubkey.h>\n+#include <undo.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+\n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n+\n+constexpr uint8_t DB_SILENTPAYMENTINDEX{'s'};\n+\n+std::unique_ptr<SilentPaymentIndex> g_silentpaymentindex;\n+\n+/** Access to the silent payment index database (indexes/silentpaymentindex/) */\n+class SilentPaymentIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    bool WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items);\n+};\n+\n+SilentPaymentIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"silentpaymentindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool SilentPaymentIndex::DB::WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : items) {\n+        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+SilentPaymentIndex::SilentPaymentIndex(std::unique_ptr<interfaces::Chain> chain, size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : BaseIndex(std::move(chain), \"silentpaymentindex\"), m_db(std::make_unique<SilentPaymentIndex::DB>(n_cache_size, f_memory, f_wipe))\n+{}\n+\n+SilentPaymentIndex::~SilentPaymentIndex() {}\n+\n+bool SilentPaymentIndex::ExtractPubkeyFromInput(const Coin& prevCoin, const CTxIn& txin,  XOnlyPubKey& senderPubKey)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984705023",
      "id" : 984705023,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846sWf_",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 50,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/index/silentpaymentindex.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984705023/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-30T16:15:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984705023",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984709509"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984709509"
         }
      },
      "author_association" : "MEMBER",
      "body" : "8a757e61b94f76f83bbcbe449edda710187af5f3\r\nsame below\r\n```suggestion\r\n    auto dest_silent_payment_hrp = ToLower(std::string_view(str).substr(0, params.SilentPaymentHRP().size()));\r\n```",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T15:25:31Z",
      "diff_hunk" : "@@ -76,30 +95,35 @@ class DestinationEncoder\n     std::string operator()(const CNoDestination& no) const { return {}; }\n };\n \n-CTxDestination DecodeDestination(const std::string& str, const CChainParams& params, std::string& error_str, std::vector<int>* error_locations)\n+std::tuple<CTxDestination,bool,int32_t> DecodeDestination(const std::string& str, const CChainParams& params, std::string& error_str, std::vector<int>* error_locations)\n {\n     std::vector<unsigned char> data;\n     uint160 hash;\n     error_str = \"\";\n+    bool silent_payment{false};\n+\n+    const auto& silent_payment_hrp = params.SilentPaymentHRP();\n+    auto dest_silent_payment_hrp = ToLower(str.substr(0, params.SilentPaymentHRP().size()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984709509",
      "id" : 984709509,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846sXmF",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 106,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/key_io.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984709509/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-30T16:15:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984709509",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984729836"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984729836"
         }
      },
      "author_association" : "MEMBER",
      "body" : "c53eec1c25c4a94935ae8e775c09e71ef24a3d0b\r\n```suggestion\r\n        for(const auto& [sp_key, sp_range]: sp_keys_range) {\r\n```",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T15:49:19Z",
      "diff_hunk" : "@@ -1983,6 +2031,14 @@ bool FindScriptPubKey(std::atomic<int>& scan_progress, const std::atomic<bool>&\n         if (needles.count(coin.out.scriptPubKey)) {\n             out_results.emplace(key, coin);\n         }\n+        for(const auto& sp_key_range: sp_keys_range) {\n+            CKey sp_key = std::get<0>(sp_key_range);\n+            std::pair<int64_t, int64_t> sp_range = std::get<1>(sp_key_range);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984729836",
      "id" : 984729836,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846scjs",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 2036,
      "original_position" : 78,
      "original_start_line" : 2034,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984729836/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-30T16:15:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984729836",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984730361"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984730361"
         }
      },
      "author_association" : "MEMBER",
      "body" : "c53eec1c25c4a94935ae8e775c09e71ef24a3d0b\r\n```suggestion\r\n```",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T15:49:52Z",
      "diff_hunk" : "@@ -2122,17 +2178,54 @@ static RPCHelpMan scantxoutset()\n         }\n \n         std::set<CScript> needles;\n+        std::vector<std::tuple<CKey, std::pair<int64_t, int64_t>>> sp_keys_range;\n         std::map<CScript, std::string> descriptors;\n         CAmount total_in = 0;\n \n         // loop through the scan objects\n         for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n             FlatSigningProvider provider;\n-            auto scripts = EvalDescriptorStringOrObject(scanobject, provider);\n-            for (CScript& script : scripts) {\n-                std::string inferred = InferDescriptor(script, provider)->ToString();\n-                needles.emplace(script);\n-                descriptors.emplace(std::move(script), std::move(inferred));\n+            // auto scripts = EvalDescriptorStringOrObject(scanobject, provider);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984730361",
      "id" : 984730361,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846scr5",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 2188,
      "original_position" : 103,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984730361/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-30T16:15:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984730361",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984730908"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984730908"
         }
      },
      "author_association" : "MEMBER",
      "body" : "c53eec1c25c4a94935ae8e775c09e71ef24a3d0b\r\n```suggestion\r\n            auto [desc_str, range] = EvalDescriptorStringOrObject(scanobject);\r\n```",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T15:50:34Z",
      "diff_hunk" : "@@ -2122,17 +2178,54 @@ static RPCHelpMan scantxoutset()\n         }\n \n         std::set<CScript> needles;\n+        std::vector<std::tuple<CKey, std::pair<int64_t, int64_t>>> sp_keys_range;\n         std::map<CScript, std::string> descriptors;\n         CAmount total_in = 0;\n \n         // loop through the scan objects\n         for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n             FlatSigningProvider provider;\n-            auto scripts = EvalDescriptorStringOrObject(scanobject, provider);\n-            for (CScript& script : scripts) {\n-                std::string inferred = InferDescriptor(script, provider)->ToString();\n-                needles.emplace(script);\n-                descriptors.emplace(std::move(script), std::move(inferred));\n+            // auto scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            auto ret = EvalDescriptorStringOrObject(scanobject);\n+            auto desc_str = std::get<0>(ret);\n+            auto range = std::get<1>(ret);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984730908",
      "id" : 984730908,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846sc0c",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 2191,
      "original_position" : 106,
      "original_start_line" : 2189,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984730908/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-30T16:15:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984730908",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984733402"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984733402"
         }
      },
      "author_association" : "MEMBER",
      "body" : "c53eec1c25c4a94935ae8e775c09e71ef24a3d0b\r\n```suggestion\r\n                for (const auto& [key, range] : sp_keys_range) {\r\n```",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T15:53:42Z",
      "diff_hunk" : "@@ -2122,17 +2178,54 @@ static RPCHelpMan scantxoutset()\n         }\n \n         std::set<CScript> needles;\n+        std::vector<std::tuple<CKey, std::pair<int64_t, int64_t>>> sp_keys_range;\n         std::map<CScript, std::string> descriptors;\n         CAmount total_in = 0;\n \n         // loop through the scan objects\n         for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n             FlatSigningProvider provider;\n-            auto scripts = EvalDescriptorStringOrObject(scanobject, provider);\n-            for (CScript& script : scripts) {\n-                std::string inferred = InferDescriptor(script, provider)->ToString();\n-                needles.emplace(script);\n-                descriptors.emplace(std::move(script), std::move(inferred));\n+            // auto scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            auto ret = EvalDescriptorStringOrObject(scanobject);\n+            auto desc_str = std::get<0>(ret);\n+            auto range = std::get<1>(ret);\n+\n+            bool is_sp_desc = (desc_str.rfind(\"sp(\", 0) == 0);\n+\n+            if (is_sp_desc) {\n+                auto keys = DescriptorToKeys(desc_str, range, provider);\n+\n+                if (keys.empty()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scanning silent payment descriptors requires private keys.\");\n+                }\n+\n+                assert(keys.size() == 1);\n+\n+                auto privKey = keys.at(0);\n+\n+                // if (std::find(sp_keys.begin(), sp_keys.end(), privKey) == sp_keys.end()) {\n+                //     sp_keys.push_back(privKey);\n+                // }\n+\n+                bool privkey_already_added{false};\n+                for (const std::tuple<CKey, std::tuple<int64_t, int64_t>> privkeyrange : sp_keys_range) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984733402",
      "id" : 984733402,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846sdba",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 2211,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984733402/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-30T16:15:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984733402",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984734438"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984734438"
         }
      },
      "author_association" : "MEMBER",
      "body" : "c53eec1c25c4a94935ae8e775c09e71ef24a3d0b\r\n```suggestion\r\n                    sp_keys_range.emplace_back(privKey, range);\r\n```",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T15:54:48Z",
      "diff_hunk" : "@@ -2122,17 +2178,54 @@ static RPCHelpMan scantxoutset()\n         }\n \n         std::set<CScript> needles;\n+        std::vector<std::tuple<CKey, std::pair<int64_t, int64_t>>> sp_keys_range;\n         std::map<CScript, std::string> descriptors;\n         CAmount total_in = 0;\n \n         // loop through the scan objects\n         for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n             FlatSigningProvider provider;\n-            auto scripts = EvalDescriptorStringOrObject(scanobject, provider);\n-            for (CScript& script : scripts) {\n-                std::string inferred = InferDescriptor(script, provider)->ToString();\n-                needles.emplace(script);\n-                descriptors.emplace(std::move(script), std::move(inferred));\n+            // auto scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            auto ret = EvalDescriptorStringOrObject(scanobject);\n+            auto desc_str = std::get<0>(ret);\n+            auto range = std::get<1>(ret);\n+\n+            bool is_sp_desc = (desc_str.rfind(\"sp(\", 0) == 0);\n+\n+            if (is_sp_desc) {\n+                auto keys = DescriptorToKeys(desc_str, range, provider);\n+\n+                if (keys.empty()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scanning silent payment descriptors requires private keys.\");\n+                }\n+\n+                assert(keys.size() == 1);\n+\n+                auto privKey = keys.at(0);\n+\n+                // if (std::find(sp_keys.begin(), sp_keys.end(), privKey) == sp_keys.end()) {\n+                //     sp_keys.push_back(privKey);\n+                // }\n+\n+                bool privkey_already_added{false};\n+                for (const std::tuple<CKey, std::tuple<int64_t, int64_t>> privkeyrange : sp_keys_range) {\n+                    CKey existent_privkey = std::get<0>(privkeyrange);\n+                    if (existent_privkey == privKey) {\n+                        privkey_already_added = true;\n+                        break;\n+                    }\n+                }\n+\n+                if (!privkey_already_added) {\n+                    sp_keys_range.push_back({privKey, range});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984734438",
      "id" : 984734438,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846sdrm",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 2220,
      "original_position" : 135,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984734438/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-30T16:15:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984734438",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984735613"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984735613"
         }
      },
      "author_association" : "MEMBER",
      "body" : "155fcb69cb850953f7778387eab0611bb32c557e\r\n```suggestion\r\n```",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T15:56:14Z",
      "diff_hunk" : "@@ -116,12 +116,17 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n             CTxOut out(0, CScript() << OP_RETURN << data);\n             rawTx.vout.push_back(out);\n         } else {\n-            CTxDestination destination = DecodeDestination(name_);\n+            ;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984735613",
      "id" : 984735613,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846sd99",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 119,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction_util.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984735613/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-30T16:15:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984735613",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984737097"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984737097"
         }
      },
      "author_association" : "MEMBER",
      "body" : "155fcb69cb850953f7778387eab0611bb32c557e\r\nuse structured binding",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T15:58:01Z",
      "diff_hunk" : "@@ -116,12 +116,17 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n             CTxOut out(0, CScript() << OP_RETURN << data);\n             rawTx.vout.push_back(out);\n         } else {\n-            CTxDestination destination = DecodeDestination(name_);\n+            ;\n+            auto decoded = DecodeDestinationIndicatingSP(name_);\n+            CTxDestination destination{std::get<0>(decoded)};\n+            bool silent_payment{std::get<1>(decoded)};\n+            int32_t identifier{std::get<2>(decoded)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984737097",
      "id" : 984737097,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846seVJ",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 123,
      "original_position" : 27,
      "original_start_line" : 120,
      "path" : "src/rpc/rawtransaction_util.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984737097/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-30T16:15:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984737097",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984737619"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984737619"
         }
      },
      "author_association" : "MEMBER",
      "body" : "155fcb69cb850953f7778387eab0611bb32c557e\r\n```suggestion\r\n            if (!destinations.emplace(destination, identifier).second) {\r\n```",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T15:58:43Z",
      "diff_hunk" : "@@ -116,12 +116,17 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n             CTxOut out(0, CScript() << OP_RETURN << data);\n             rawTx.vout.push_back(out);\n         } else {\n-            CTxDestination destination = DecodeDestination(name_);\n+            ;\n+            auto decoded = DecodeDestinationIndicatingSP(name_);\n+            CTxDestination destination{std::get<0>(decoded)};\n+            bool silent_payment{std::get<1>(decoded)};\n+            int32_t identifier{std::get<2>(decoded)};\n+\n             if (!IsValidDestination(destination)) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(\"Invalid Bitcoin address: \") + name_);\n             }\n \n-            if (!destinations.insert(destination).second) {\n+            if (!destinations.insert({destination, identifier}).second) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984737619",
      "id" : 984737619,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846sedT",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 129,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction_util.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984737619/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-30T16:15:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984737619",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984738214"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984738214"
         }
      },
      "author_association" : "MEMBER",
      "body" : "c53eec1c25c4a94935ae8e775c09e71ef24a3d0b\r\nalso in header\r\n```suggestion\r\nstd::vector<CScript> DescriptorToScripts(const std::string& desc_str, std::pair<int64_t, int64_t> range, FlatSigningProvider& provider)\r\n```",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T15:59:27Z",
      "diff_hunk" : "@@ -1092,6 +1093,88 @@ std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, Fl\n     return ret;\n }\n \n+std::tuple<std::string, std::pair<int64_t, int64_t>> EvalDescriptorStringOrObject(const UniValue& scanobject)\n+{\n+    std::string desc_str;\n+    std::pair<int64_t, int64_t> range = {0, 1000};\n+    if (scanobject.isStr()) {\n+        desc_str = scanobject.get_str();\n+    } else if (scanobject.isObject()) {\n+        UniValue desc_uni = find_value(scanobject, \"desc\");\n+        if (desc_uni.isNull()) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor needs to be provided in scan object\");\n+        desc_str = desc_uni.get_str();\n+\n+        bool is_sp_desc = (desc_str.rfind(\"sp(\", 0) == 0);\n+\n+        if (is_sp_desc) {\n+            range = {0, wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER};\n+        }\n+\n+        UniValue range_uni = find_value(scanobject, \"range\");\n+        if (!range_uni.isNull()) {\n+            range = ParseDescriptorRange(range_uni);\n+        }\n+\n+        if (is_sp_desc && range.second > wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER) {\n+            std::stringstream ss;\n+            ss << wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER;\n+\n+            throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                \"End of range is too high. The maximum allowed for silent payment descriptors is \" + ss.str());\n+        }\n+\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan object needs to be either a string or an object\");\n+    }\n+\n+    return {desc_str, range};\n+}\n+\n+std::vector<CScript> DescriptorToScripts(std::string desc_str, std::pair<int64_t, int64_t> range, FlatSigningProvider& provider)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984738214",
      "id" : 984738214,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846semm",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 1133,
      "original_position" : 49,
      "original_start_line" : null,
      "path" : "src/rpc/util.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984738214/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-30T16:15:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984738214",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984738708"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984738708"
         }
      },
      "author_association" : "MEMBER",
      "body" : "c53eec1c25c4a94935ae8e775c09e71ef24a3d0b\r\n```suggestion\r\nstd::vector<CKey> DescriptorToKeys(const std::string& desc_str, std::pair<int64_t, int64_t> range, FlatSigningProvider& provider)\r\n```",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T16:00:00Z",
      "diff_hunk" : "@@ -1092,6 +1093,88 @@ std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, Fl\n     return ret;\n }\n \n+std::tuple<std::string, std::pair<int64_t, int64_t>> EvalDescriptorStringOrObject(const UniValue& scanobject)\n+{\n+    std::string desc_str;\n+    std::pair<int64_t, int64_t> range = {0, 1000};\n+    if (scanobject.isStr()) {\n+        desc_str = scanobject.get_str();\n+    } else if (scanobject.isObject()) {\n+        UniValue desc_uni = find_value(scanobject, \"desc\");\n+        if (desc_uni.isNull()) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor needs to be provided in scan object\");\n+        desc_str = desc_uni.get_str();\n+\n+        bool is_sp_desc = (desc_str.rfind(\"sp(\", 0) == 0);\n+\n+        if (is_sp_desc) {\n+            range = {0, wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER};\n+        }\n+\n+        UniValue range_uni = find_value(scanobject, \"range\");\n+        if (!range_uni.isNull()) {\n+            range = ParseDescriptorRange(range_uni);\n+        }\n+\n+        if (is_sp_desc && range.second > wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER) {\n+            std::stringstream ss;\n+            ss << wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER;\n+\n+            throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                \"End of range is too high. The maximum allowed for silent payment descriptors is \" + ss.str());\n+        }\n+\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan object needs to be either a string or an object\");\n+    }\n+\n+    return {desc_str, range};\n+}\n+\n+std::vector<CScript> DescriptorToScripts(std::string desc_str, std::pair<int64_t, int64_t> range, FlatSigningProvider& provider)\n+{\n+    std::string error;\n+    auto desc = Parse(desc_str, provider, error);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+    }\n+    if (!desc->IsRange()) {\n+        range.first = 0;\n+        range.second = 0;\n+    }\n+    std::vector<CScript> ret;\n+    for (int i = range.first; i <= range.second; ++i) {\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(i, provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys: '%s'\", desc_str));\n+        }\n+        std::move(scripts.begin(), scripts.end(), std::back_inserter(ret));\n+    }\n+    return ret;\n+}\n+\n+std::vector<CKey> DescriptorToKeys(std::string desc_str, std::pair<int64_t, int64_t> range, FlatSigningProvider& provider)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984738708",
      "id" : 984738708,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846seuU",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 1155,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/rpc/util.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984738708/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-30T16:15:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984738708",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984739120"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984739120"
         }
      },
      "author_association" : "MEMBER",
      "body" : "c53eec1c25c4a94935ae8e775c09e71ef24a3d0b\r\n```suggestion\r\n```",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T16:00:31Z",
      "diff_hunk" : "@@ -1092,6 +1093,88 @@ std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, Fl\n     return ret;\n }\n \n+std::tuple<std::string, std::pair<int64_t, int64_t>> EvalDescriptorStringOrObject(const UniValue& scanobject)\n+{\n+    std::string desc_str;\n+    std::pair<int64_t, int64_t> range = {0, 1000};\n+    if (scanobject.isStr()) {\n+        desc_str = scanobject.get_str();\n+    } else if (scanobject.isObject()) {\n+        UniValue desc_uni = find_value(scanobject, \"desc\");\n+        if (desc_uni.isNull()) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor needs to be provided in scan object\");\n+        desc_str = desc_uni.get_str();\n+\n+        bool is_sp_desc = (desc_str.rfind(\"sp(\", 0) == 0);\n+\n+        if (is_sp_desc) {\n+            range = {0, wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER};\n+        }\n+\n+        UniValue range_uni = find_value(scanobject, \"range\");\n+        if (!range_uni.isNull()) {\n+            range = ParseDescriptorRange(range_uni);\n+        }\n+\n+        if (is_sp_desc && range.second > wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER) {\n+            std::stringstream ss;\n+            ss << wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER;\n+\n+            throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                \"End of range is too high. The maximum allowed for silent payment descriptors is \" + ss.str());\n+        }\n+\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan object needs to be either a string or an object\");\n+    }\n+\n+    return {desc_str, range};\n+}\n+\n+std::vector<CScript> DescriptorToScripts(std::string desc_str, std::pair<int64_t, int64_t> range, FlatSigningProvider& provider)\n+{\n+    std::string error;\n+    auto desc = Parse(desc_str, provider, error);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+    }\n+    if (!desc->IsRange()) {\n+        range.first = 0;\n+        range.second = 0;\n+    }\n+    std::vector<CScript> ret;\n+    for (int i = range.first; i <= range.second; ++i) {\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(i, provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys: '%s'\", desc_str));\n+        }\n+        std::move(scripts.begin(), scripts.end(), std::back_inserter(ret));\n+    }\n+    return ret;\n+}\n+\n+std::vector<CKey> DescriptorToKeys(std::string desc_str, std::pair<int64_t, int64_t> range, FlatSigningProvider& provider)\n+{\n+    std::string error;\n+    auto desc = Parse(desc_str, provider, error);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+    }\n+    if (!desc->IsRange()) {\n+        range.first = 0;\n+        range.second = 0;\n+    }\n+    std::vector<CKey> ret;\n+    for (int i = range.first; i <= range.second; ++i) {\n+        FlatSigningProvider out;\n+        desc->ExpandPrivate(i, provider, out);\n+        //std::move(out.keys.begin(), out.keys.end(), std::back_inserter(ret));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984739120",
      "id" : 984739120,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846se0w",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 1170,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/rpc/util.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984739120/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-30T16:15:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984739120",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984739751"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984739751"
         }
      },
      "author_association" : "MEMBER",
      "body" : "c53eec1c25c4a94935ae8e775c09e71ef24a3d0b\r\n```suggestion\r\n        for (const auto& [_, privKey] : out.keys) {\r\n```",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T16:01:19Z",
      "diff_hunk" : "@@ -1092,6 +1093,88 @@ std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, Fl\n     return ret;\n }\n \n+std::tuple<std::string, std::pair<int64_t, int64_t>> EvalDescriptorStringOrObject(const UniValue& scanobject)\n+{\n+    std::string desc_str;\n+    std::pair<int64_t, int64_t> range = {0, 1000};\n+    if (scanobject.isStr()) {\n+        desc_str = scanobject.get_str();\n+    } else if (scanobject.isObject()) {\n+        UniValue desc_uni = find_value(scanobject, \"desc\");\n+        if (desc_uni.isNull()) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor needs to be provided in scan object\");\n+        desc_str = desc_uni.get_str();\n+\n+        bool is_sp_desc = (desc_str.rfind(\"sp(\", 0) == 0);\n+\n+        if (is_sp_desc) {\n+            range = {0, wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER};\n+        }\n+\n+        UniValue range_uni = find_value(scanobject, \"range\");\n+        if (!range_uni.isNull()) {\n+            range = ParseDescriptorRange(range_uni);\n+        }\n+\n+        if (is_sp_desc && range.second > wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER) {\n+            std::stringstream ss;\n+            ss << wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER;\n+\n+            throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                \"End of range is too high. The maximum allowed for silent payment descriptors is \" + ss.str());\n+        }\n+\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan object needs to be either a string or an object\");\n+    }\n+\n+    return {desc_str, range};\n+}\n+\n+std::vector<CScript> DescriptorToScripts(std::string desc_str, std::pair<int64_t, int64_t> range, FlatSigningProvider& provider)\n+{\n+    std::string error;\n+    auto desc = Parse(desc_str, provider, error);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+    }\n+    if (!desc->IsRange()) {\n+        range.first = 0;\n+        range.second = 0;\n+    }\n+    std::vector<CScript> ret;\n+    for (int i = range.first; i <= range.second; ++i) {\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(i, provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys: '%s'\", desc_str));\n+        }\n+        std::move(scripts.begin(), scripts.end(), std::back_inserter(ret));\n+    }\n+    return ret;\n+}\n+\n+std::vector<CKey> DescriptorToKeys(std::string desc_str, std::pair<int64_t, int64_t> range, FlatSigningProvider& provider)\n+{\n+    std::string error;\n+    auto desc = Parse(desc_str, provider, error);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+    }\n+    if (!desc->IsRange()) {\n+        range.first = 0;\n+        range.second = 0;\n+    }\n+    std::vector<CKey> ret;\n+    for (int i = range.first; i <= range.second; ++i) {\n+        FlatSigningProvider out;\n+        desc->ExpandPrivate(i, provider, out);\n+        //std::move(out.keys.begin(), out.keys.end(), std::back_inserter(ret));\n+        for (auto& [_, privKey] : out.keys) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984739751",
      "id" : 984739751,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846se-n",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 1171,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/rpc/util.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984739751/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-30T16:15:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984739751",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984740556"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984740556"
         }
      },
      "author_association" : "MEMBER",
      "body" : "a0c5c6cf29835ee8315356e050c01db9252e9dc1\r\nuse structured binding",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T16:02:08Z",
      "diff_hunk" : "@@ -135,13 +200,31 @@ RPCHelpMan setlabel()\n \n     LOCK(pwallet->cs_wallet);\n \n-    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+    auto address = request.params[0].get_str();\n+\n+    auto decoded = DecodeDestinationIndicatingSP(address);\n+    CTxDestination dest{std::get<0>(decoded)};\n+    bool silent_payment{std::get<1>(decoded)};\n+    int32_t silent_payment_index{std::get<2>(decoded)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984740556",
      "id" : 984740556,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846sfLM",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 208,
      "original_position" : 89,
      "original_start_line" : 205,
      "path" : "src/wallet/rpc/addresses.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984740556/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-30T16:15:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984740556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984741063"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984741063"
         }
      },
      "author_association" : "MEMBER",
      "body" : "8a757e61b94f76f83bbcbe449edda710187af5f3\r\nuse structured binding",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-09-30T16:02:39Z",
      "diff_hunk" : "@@ -553,7 +637,11 @@ RPCHelpMan getaddressinfo()\n     LOCK(pwallet->cs_wallet);\n \n     std::string error_msg;\n-    CTxDestination dest = DecodeDestination(request.params[0].get_str(), error_msg);\n+\n+    auto decoded = DecodeDestinationIndicatingSP(request.params[0].get_str(), error_msg);\n+    CTxDestination dest{std::get<0>(decoded)};\n+    bool silent_payment{std::get<1>(decoded)};\n+    int32_t silent_payment_index{std::get<2>(decoded)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r984741063",
      "id" : 984741063,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5846sfTH",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 644,
      "original_position" : 129,
      "original_start_line" : 642,
      "path" : "src/wallet/rpc/addresses.cpp",
      "position" : null,
      "pull_request_review_id" : 1126966227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984741063/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-09-30T16:15:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984741063",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Currently, only 100 different identifiers per wallet are allowed. This limit, however, can be increased at any time in the future.\r\n\r\nThis identifier is encoded in the sp address, isn't it sensitive information to leak?\r\nAny limit seems too low, especially 100. Can't the identifier be encoded using a CompactSize?",
      "created_at" : "2022-10-03T12:24:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1265364454",
      "id" : 1265364454,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585La-3m",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1265364454/reactions"
      },
      "updated_at" : "2022-10-03T12:24:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1265364454",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> This identifier is encoded in the sp address, isn't it sensitive information to leak?\r\n\r\nA common feature of these stealth address schemes (BIP47, BIP351) is that a static identifier may be safely associated with your identity without loss of privacy.",
      "created_at" : "2022-10-03T22:53:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1266160442",
      "id" : 1266160442,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585LeBM6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266160442/reactions"
      },
      "updated_at" : "2022-10-03T22:53:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266160442",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1562417?v=4",
         "events_url" : "https://api.github.com/users/clarkmoody/events{/privacy}",
         "followers_url" : "https://api.github.com/users/clarkmoody/followers",
         "following_url" : "https://api.github.com/users/clarkmoody/following{/other_user}",
         "gists_url" : "https://api.github.com/users/clarkmoody/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/clarkmoody",
         "id" : 1562417,
         "login" : "clarkmoody",
         "node_id" : "MDQ6VXNlcjE1NjI0MTc=",
         "organizations_url" : "https://api.github.com/users/clarkmoody/orgs",
         "received_events_url" : "https://api.github.com/users/clarkmoody/received_events",
         "repos_url" : "https://api.github.com/users/clarkmoody/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/clarkmoody/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/clarkmoody/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/clarkmoody"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "But that's not correct. If someone acquires both, they now know they pay to the same wallet.",
      "created_at" : "2022-10-03T22:57:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1266165856",
      "id" : 1266165856,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585LeChg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266165856/reactions"
      },
      "updated_at" : "2022-10-03T22:57:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266165856",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "There seems to be some confusion about the function of the [identifier](https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1218641521). Its function is *not* to create more than one identity, but to be able to distinguish why someone paid you. For example, when the same entity is raising money on behalf of two different charities and wants to know for which of the two charities the sender intended their donation.\r\n\r\nTo be absolutely clear, the payments that appear on-chain are still absolutely unlinkable by a third party observer, nor are they able to tell which identifier was used.\r\n\r\nIn cases where you don't want people to know that you're the same entity, the identifier is insufficient â you'll need a completely separate Silent Payment address which (roughly) doubles your scanning efforts, so it's much more costly in terms of performance.\r\n\r\n",
      "created_at" : "2022-10-03T23:26:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1266193417",
      "id" : 1266193417,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585LeJQJ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266193417/reactions"
      },
      "updated_at" : "2022-10-03T23:36:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266193417",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/9066803?v=4",
         "events_url" : "https://api.github.com/users/RubenSomsen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RubenSomsen/followers",
         "following_url" : "https://api.github.com/users/RubenSomsen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RubenSomsen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RubenSomsen",
         "id" : 9066803,
         "login" : "RubenSomsen",
         "node_id" : "MDQ6VXNlcjkwNjY4MDM=",
         "organizations_url" : "https://api.github.com/users/RubenSomsen/orgs",
         "received_events_url" : "https://api.github.com/users/RubenSomsen/received_events",
         "repos_url" : "https://api.github.com/users/RubenSomsen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RubenSomsen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RubenSomsen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RubenSomsen"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This is a serious privacy leak that no other invoice address format has right now (maybe Lightning? not sure), and is not generally expected/known.",
      "created_at" : "2022-10-03T23:45:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1266210990",
      "id" : 1266210990,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585LeNiu",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266210990/reactions"
      },
      "updated_at" : "2022-10-03T23:45:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266210990",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@luke-jr I suspect we're not yet on the same page. Could you be specific about what you think is being leaked? Essentially all that is happening is that the person who is getting paid is publicly saying \"you could send me money for purpose A or purpose B, so please tweak the final address a bit so I know for which purpose you sent me money\". The resulting on-chain address is still completely unrecognizable by outside parties.\r\n\r\nSo essentially all that is happening is that a few extra secret bits of information are being transmitted to the recipient along with the payment. There is no impact on privacy other than the fact that the recipient voluntarily made a statement about how it would interpret those bits.\r\n\r\nOf course this is not equivalent to having a completely separate identity on which you could get paid, but that is not its purpose. I.e. the difference is A says pay me for X, B says pay me for Y, and A might be the same person as B but nobody knows, or A saying pay me for X or Y so we know the same person will receive the funds no matter if you pay for X or Y. Both are useful. One is more flexible than the other, but also more computationally expensive.",
      "created_at" : "2022-10-04T00:26:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1266243366",
      "id" : 1266243366,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585LeVcm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266243366/reactions"
      },
      "updated_at" : "2022-10-04T00:31:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266243366",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/9066803?v=4",
         "events_url" : "https://api.github.com/users/RubenSomsen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RubenSomsen/followers",
         "following_url" : "https://api.github.com/users/RubenSomsen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RubenSomsen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RubenSomsen",
         "id" : 9066803,
         "login" : "RubenSomsen",
         "node_id" : "MDQ6VXNlcjkwNjY4MDM=",
         "organizations_url" : "https://api.github.com/users/RubenSomsen/orgs",
         "received_events_url" : "https://api.github.com/users/RubenSomsen/received_events",
         "repos_url" : "https://api.github.com/users/RubenSomsen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RubenSomsen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RubenSomsen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RubenSomsen"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "In your example earlier, charity A does not necessarily want to leak that it is using the same service as charity B. Throughout Bitcoin's history, there has never been any leak of such relationships between invoice addresses. It would be very unexpected, especially for it to be introduced with a privacy improvement!",
      "created_at" : "2022-10-04T00:43:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1266257861",
      "id" : 1266257861,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585LeY_F",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266257861/reactions"
      },
      "updated_at" : "2022-10-04T00:43:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266257861",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@luke-jr I agree it is a communication challenge to explain such a feature to users, but I hope you see now that it can be of benefit when used correctly. I also agree that this idea is not adequate in cases where you do not want people to know that the same entity is receiving money for separate purposes.\r\n\r\nAnother example which may be more clear: maybe you're a known open source developer who is openly working on multiple projects and you want to distinguish for which of these projects your supporters are donating.",
      "created_at" : "2022-10-04T00:57:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1266268257",
      "id" : 1266268257,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585Lebhh",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266268257/reactions"
      },
      "updated_at" : "2022-10-04T00:57:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266268257",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/9066803?v=4",
         "events_url" : "https://api.github.com/users/RubenSomsen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RubenSomsen/followers",
         "following_url" : "https://api.github.com/users/RubenSomsen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RubenSomsen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RubenSomsen",
         "id" : 9066803,
         "login" : "RubenSomsen",
         "node_id" : "MDQ6VXNlcjkwNjY4MDM=",
         "organizations_url" : "https://api.github.com/users/RubenSomsen/orgs",
         "received_events_url" : "https://api.github.com/users/RubenSomsen/received_events",
         "repos_url" : "https://api.github.com/users/RubenSomsen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RubenSomsen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RubenSomsen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RubenSomsen"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@RubenSomsen I agree it may have use cases, but if the user asks for a new address, they should get a new address, not a variation of an existing one. (Unless they explicitly ask for a variation, which I would suggest doing in a followup PR since it necessarily adds a new API and concept)",
      "created_at" : "2022-10-04T03:08:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1266336785",
      "id" : 1266336785,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585LesQR",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266336785/reactions"
      },
      "updated_at" : "2022-10-04T03:08:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266336785",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@luke-jr I agree it may not be a good idea to refer to the same pubkey/identity + different identifier as a \"new address\" if that sets the wrong expectations for users. Thanks for clarifying.",
      "created_at" : "2022-10-04T09:22:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1266654402",
      "id" : 1266654402,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585Lf5zC",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266654402/reactions"
      },
      "updated_at" : "2022-10-04T09:22:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266654402",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/9066803?v=4",
         "events_url" : "https://api.github.com/users/RubenSomsen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RubenSomsen/followers",
         "following_url" : "https://api.github.com/users/RubenSomsen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RubenSomsen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RubenSomsen",
         "id" : 9066803,
         "login" : "RubenSomsen",
         "node_id" : "MDQ6VXNlcjkwNjY4MDM=",
         "organizations_url" : "https://api.github.com/users/RubenSomsen/orgs",
         "received_events_url" : "https://api.github.com/users/RubenSomsen/received_events",
         "repos_url" : "https://api.github.com/users/RubenSomsen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RubenSomsen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RubenSomsen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RubenSomsen"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-10-04T11:59:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1266879937",
      "id" : 1266879937,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585Lgw3B",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266879937/reactions"
      },
      "updated_at" : "2022-10-04T11:59:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266879937",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987827344"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987827344"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/5e8b8091e33fa0479f2509b470b601e6691723e2.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:43:16Z",
      "diff_hunk" : "@@ -1154,47 +1254,20 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxS\n \n         bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n         if (fExisted && !fUpdate) return false;\n-        if (fExisted || IsMine(tx) || IsFromMe(tx))\n-        {\n-            /* Check if any keys in the wallet keypool that were supposed to be unused\n-             * have appeared in a new transaction. If so, remove those keys from the keypool.\n-             * This can happen when restoring an old wallet backup that does not contain\n-             * the mostly recently created transactions from newer versions of the wallet.\n-             */\n-\n-            // loop though all outputs\n-            for (const CTxOut& txout: tx.vout) {\n-                for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n-                    for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n-                        // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n-                        if (!dest.internal.has_value()) {\n-                            dest.internal = IsInternalScriptPubKeyMan(spk_man);\n-                        }\n \n-                        // skip if can't determine whether it's a receiving address or not\n-                        if (!dest.internal.has_value()) continue;\n+        bool ret = false;\n \n-                        // If this is a receiving address and it's not in the address book yet\n-                        // (e.g. it wasn't generated on this node or we're restoring from backup)\n-                        // add it to the address book for proper transaction accounting\n-                        if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n-                            SetAddressBook(dest.dest, \"\", \"receive\");\n-                        }\n-                    }\n-                }\n-            }\n+        if (fExisted || IsMine(tx) || IsFromMe(tx))\n+        {\n+            ret = HandleNewTxBelongingToMe(tx, state, rescanning_old_block);\n+        }\n \n-            // Block disconnection override an abandoned tx as unconfirmed\n-            // which means user may have to call abandontransaction again\n-            TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n-            CWalletTx* wtx = AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n-            if (!wtx) {\n-                // Can only be nullptr if there was a db write error (missing db, read-only db or a db engine internal writing error).\n-                // As we only store arriving transaction in this process, and we don't want an inconsistent state, let's throw an error.\n-                throw std::runtime_error(\"DB error adding transaction to wallet, write failed\");\n-            }\n-            return true;\n+        if (IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENT) && VerifySilentPayment(tx, rawTrKeys))\n+        {\n+            ret = AddSilentScriptKeyMan(tx, state, rescanning_old_block, rawTrKeys) || ret;\n         }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987827344",
      "id" : 987827344,
      "in_reply_to_id" : 984688350,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464QyQ",
      "original_commit_id" : "06037565e907c020340e064a5612abfebf347cc9",
      "original_line" : 1268,
      "original_position" : 165,
      "original_start_line" : 1258,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1131292858,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987827344/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-05T11:43:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987827344",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987827511"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987827511"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/commit/5e8b8091e33fa0479f2509b470b601e6691723e2.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:43:31Z",
      "diff_hunk" : "@@ -1133,12 +1133,112 @@ bool CWallet::LoadToWallet(const uint256& hash, const UpdateWalletTxFn& fill_wtx\n     return true;\n }\n \n+bool CWallet::HandleNewTxBelongingToMe(const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    /* Check if any keys in the wallet keypool that were supposed to be unused\n+        * have appeared in a new transaction. If so, remove those keys from the keypool.\n+        * This can happen when restoring an old wallet backup that does not contain\n+        * the mostly recently created transactions from newer versions of the wallet.\n+        */\n+\n+    // loop though all outputs\n+    for (const CTxOut& txout: tx.vout) {\n+        for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n+            for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n+                // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n+                if (!dest.internal.has_value()) {\n+                    dest.internal = IsInternalScriptPubKeyMan(spk_man);\n+                }\n+\n+                // skip if can't determine whether it's a receiving address or not\n+                if (!dest.internal.has_value()) continue;\n+\n+                // If this is a receiving address and it's not in the address book yet\n+                // (e.g. it wasn't generated on this node or we're restoring from backup)\n+                // add it to the address book for proper transaction accounting\n+                if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n+                    SetAddressBook(dest.dest, \"\", \"receive\");\n+                }\n+            }\n+        }\n+    }\n+\n+    // Block disconnection override an abandoned tx as unconfirmed\n+    // which means user may have to call abandontransaction again\n+    TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n+    CWalletTx* wtx = AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n+    if (!wtx) {\n+        // Can only be nullptr if there was a db write error (missing db, read-only db or a db engine internal writing error).\n+        // As we only store arriving transaction in this process, and we don't want an inconsistent state, let's throw an error.\n+        throw std::runtime_error(\"DB error adding transaction to wallet, write failed\");\n+    }\n+    return true;\n+}\n+\n+bool CWallet::AddSilentScriptKeyMan(\n+    const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block, const std::vector<std::tuple<CKey, int32_t>>& rawTrKeys)\n+{\n+    WalletLogPrintf(\"Silent Transaction identified: %s.\\n\", tx.GetHash().ToString());\n+\n+    for(auto& identifier_key: rawTrKeys) {\n+\n+        CKey key = std::get<0>(identifier_key);\n+        int32_t identifier = std::get<1>(identifier_key);\n+\n+        std::string desc = \"rawtr(\" + EncodeSecret(key) + \")\";\n+        std::string checksum = GetDescriptorChecksum(desc);\n+\n+        auto timestamp = std::chrono::duration_cast<std::chrono::microseconds>(\n+            std::chrono::system_clock::now().time_since_epoch()).count();\n+\n+        std::string desc_check = desc + \"#\" + checksum;\n+\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(desc_check, keys, error, /* require_checksum = */ true);\n+        assert(parsed_desc);\n+\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+\n+        // Need to ExpandPrivate to check if private keys are available for all pubkeys\n+        FlatSigningProvider expand_keys;\n+        std::vector<CScript> scripts;\n+        assert(parsed_desc->Expand(0, keys, scripts, expand_keys));\n+        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        std::string label;\n+\n+        if (m_silent_address_book.count(identifier)) {\n+            auto entry = m_silent_address_book[identifier];\n+            label = entry.m_label;\n+        } else {\n+            std::stringstream ss;\n+            ss << identifier;\n+            label = ss.str();\n+        }\n+\n+        auto existing_spk_manager = GetDescriptorScriptPubKeyMan(w_desc);\n+        if (!existing_spk_manager) {\n+            auto spk_manager = AddWalletDescriptor(w_desc, keys, label, false);\n+            assert(spk_manager != nullptr);\n+        }\n+    }\n+\n+    return HandleNewTxBelongingToMe(tx, state, rescanning_old_block);\n+}\n+\n bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxState& state, bool fUpdate, bool rescanning_old_block)\n {\n     const CTransaction& tx = *ptx;\n     {\n         AssertLockHeld(cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987827511",
      "id" : 987827511,
      "in_reply_to_id" : 984691039,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464Q03",
      "original_commit_id" : "06037565e907c020340e064a5612abfebf347cc9",
      "original_line" : 1238,
      "original_position" : 106,
      "original_start_line" : 1237,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1131293096,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987827511/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-05T11:43:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987827511",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987827575"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987827575"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/commit/5e8b8091e33fa0479f2509b470b601e6691723e2.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:43:36Z",
      "diff_hunk" : "@@ -1154,47 +1254,20 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxS\n \n         bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n         if (fExisted && !fUpdate) return false;\n-        if (fExisted || IsMine(tx) || IsFromMe(tx))\n-        {\n-            /* Check if any keys in the wallet keypool that were supposed to be unused\n-             * have appeared in a new transaction. If so, remove those keys from the keypool.\n-             * This can happen when restoring an old wallet backup that does not contain\n-             * the mostly recently created transactions from newer versions of the wallet.\n-             */\n-\n-            // loop though all outputs\n-            for (const CTxOut& txout: tx.vout) {\n-                for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n-                    for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n-                        // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n-                        if (!dest.internal.has_value()) {\n-                            dest.internal = IsInternalScriptPubKeyMan(spk_man);\n-                        }\n \n-                        // skip if can't determine whether it's a receiving address or not\n-                        if (!dest.internal.has_value()) continue;\n+        bool ret = false;\n \n-                        // If this is a receiving address and it's not in the address book yet\n-                        // (e.g. it wasn't generated on this node or we're restoring from backup)\n-                        // add it to the address book for proper transaction accounting\n-                        if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n-                            SetAddressBook(dest.dest, \"\", \"receive\");\n-                        }\n-                    }\n-                }\n-            }\n+        if (fExisted || IsMine(tx) || IsFromMe(tx))\n+        {\n+            ret = HandleNewTxBelongingToMe(tx, state, rescanning_old_block);\n+        }\n \n-            // Block disconnection override an abandoned tx as unconfirmed\n-            // which means user may have to call abandontransaction again\n-            TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n-            CWalletTx* wtx = AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n-            if (!wtx) {\n-                // Can only be nullptr if there was a db write error (missing db, read-only db or a db engine internal writing error).\n-                // As we only store arriving transaction in this process, and we don't want an inconsistent state, let's throw an error.\n-                throw std::runtime_error(\"DB error adding transaction to wallet, write failed\");\n-            }\n-            return true;\n+        if (IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENT) && VerifySilentPayment(tx, rawTrKeys))\n+        {\n+            ret = AddSilentScriptKeyMan(tx, state, rescanning_old_block, rawTrKeys) || ret;\n         }\n+\n+        return ret;\n     }\n     return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987827575",
      "id" : 987827575,
      "in_reply_to_id" : 984696515,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464Q13",
      "original_commit_id" : "06037565e907c020340e064a5612abfebf347cc9",
      "original_line" : 1272,
      "original_position" : 169,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1131293180,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987827575/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-05T11:43:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987827575",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987827856"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987827856"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/9c47a26452426fffc4ee3a7d2bdcfd0813e2ccbc",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:43:57Z",
      "diff_hunk" : "@@ -0,0 +1,206 @@\n+#include <index/silentpaymentindex.h>\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/disktxpos.h>\n+#include <node/blockstorage.h>\n+#include <pubkey.h>\n+#include <undo.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+\n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n+\n+constexpr uint8_t DB_SILENTPAYMENTINDEX{'s'};\n+\n+std::unique_ptr<SilentPaymentIndex> g_silentpaymentindex;\n+\n+/** Access to the silent payment index database (indexes/silentpaymentindex/) */\n+class SilentPaymentIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    bool WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items);\n+};\n+\n+SilentPaymentIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"silentpaymentindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool SilentPaymentIndex::DB::WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : items) {\n+        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+SilentPaymentIndex::SilentPaymentIndex(std::unique_ptr<interfaces::Chain> chain, size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : BaseIndex(std::move(chain), \"silentpaymentindex\"), m_db(std::make_unique<SilentPaymentIndex::DB>(n_cache_size, f_memory, f_wipe))\n+{}\n+\n+SilentPaymentIndex::~SilentPaymentIndex() {}\n+\n+bool SilentPaymentIndex::ExtractPubkeyFromInput(const Coin& prevCoin, const CTxIn& txin,  XOnlyPubKey& senderPubKey)\n+{\n+    // scriptPubKey being spent by this input\n+    CScript scriptPubKey = prevCoin.out.scriptPubKey;\n+\n+    if (scriptPubKey.IsPayToWitnessScriptHash()) {\n+        return false;\n+    }\n+\n+    // Vector of parsed pubkeys and hashes\n+    std::vector<std::vector<unsigned char>> solutions;\n+\n+    TxoutType whichType = Solver(scriptPubKey, solutions);\n+\n+    if (whichType == TxoutType::NONSTANDARD ||\n+    whichType == TxoutType::MULTISIG ||\n+    whichType == TxoutType::WITNESS_UNKNOWN ) {\n+        return false;\n+    }\n+\n+    const CScript scriptSig = txin.scriptSig;\n+    const CScriptWitness scriptWitness = txin.scriptWitness;\n+\n+    assert(senderPubKey.IsNull());\n+\n+    // TODO: Condition not tested\n+    if (whichType == TxoutType::PUBKEY) {\n+\n+        CPubKey pubkey = CPubKey(solutions[0]);\n+        assert(pubkey.IsFullyValid());\n+        senderPubKey = XOnlyPubKey(pubkey);\n+    }\n+\n+    else if (whichType == TxoutType::PUBKEYHASH) {\n+\n+        int sigSize = static_cast<int>(scriptSig[0]);\n+        int pubKeySize = static_cast<int>(scriptSig[sigSize + 1]);\n+        auto serializedPubKey = std::vector<unsigned char>(scriptSig.begin() + sigSize + 2, scriptSig.end());\n+        assert(serializedPubKey.size() == (size_t) pubKeySize);\n+\n+        CPubKey pubkey = CPubKey(serializedPubKey);\n+        assert(pubkey.IsFullyValid());\n+\n+        senderPubKey = XOnlyPubKey(pubkey);\n+\n+    }\n+\n+    else if (whichType == TxoutType::WITNESS_V0_KEYHASH || scriptPubKey.IsPayToScriptHash()) {\n+        if (scriptWitness.stack.size() != 2) return false;\n+        assert(scriptWitness.stack.at(1).size() == 33);\n+\n+        CPubKey pubkey = CPubKey(scriptWitness.stack.at(1));\n+        assert(pubkey.IsFullyValid());\n+\n+        senderPubKey = XOnlyPubKey(pubkey);\n+    }\n+\n+    else if (whichType == TxoutType::WITNESS_V1_TAPROOT) {\n+\n+        senderPubKey = XOnlyPubKey(solutions[0]);\n+        assert(senderPubKey.IsFullyValid());\n+    }\n+\n+    CTxDestination address;\n+    ExtractDestination(scriptPubKey, address);\n+\n+    return true;\n+}\n+\n+bool SilentPaymentIndex::GetSilentPaymentKey(const CTransactionRef& tx, const CBlockIndex* blockindex, XOnlyPubKey& firstInputPubKey)\n+{\n+    if (tx->IsCoinBase()) {\n+        return false;\n+    }\n+\n+    for (auto& vout : tx->vout) {\n+        std::vector<std::vector<unsigned char>> solutions;\n+        TxoutType whichType = Solver(vout.scriptPubKey, solutions);\n+\n+        if (whichType != TxoutType::WITNESS_V1_TAPROOT) {\n+            return false;\n+        }\n+    }\n+\n+    CBlockUndo blockUndo;\n+    CBlock block;\n+\n+    if (!(UndoReadFromDisk(blockUndo, blockindex) && ReadBlockFromDisk(block, blockindex, Params().GetConsensus()))) {\n+        return false;\n+    }\n+\n+    CTxUndo* undoTX {nullptr};\n+    auto it = std::find_if(block.vtx.begin(), block.vtx.end(), [tx](CTransactionRef t){ return *t == *tx; });\n+    if (it != block.vtx.end()) {\n+        // -1 as blockundo does not have coinbase tx\n+        undoTX = &blockUndo.vtxundo.at(it - block.vtx.begin() - 1);\n+    }\n+\n+    if (undoTX == nullptr) {\n+        return false;\n+    }\n+\n+    const Coin& prev_coin = undoTX->vprevout[0];\n+\n+    const CTxIn& txin = tx->vin.at(0);\n+\n+    return ExtractPubkeyFromInput(prev_coin, txin, firstInputPubKey);\n+}\n+\n+bool SilentPaymentIndex::CustomAppend(const interfaces::BlockInfo& block)\n+{\n+    // Exclude genesis block transaction because outputs are not spendable.\n+    if (block.height == 0) return true;\n+\n+    assert(block.data);\n+\n+    Consensus::Params consensus = Params().GetConsensus();\n+\n+    if (block.height < consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height) {\n+        return true;\n+    }\n+\n+    std::vector<std::pair<uint256, uint256>> items;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987827856",
      "id" : 987827856,
      "in_reply_to_id" : 984700363,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464Q6Q",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 172,
      "original_position" : 172,
      "original_start_line" : null,
      "path" : "src/index/silentpaymentindex.cpp",
      "position" : null,
      "pull_request_review_id" : 1131293566,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987827856/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-05T11:43:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987827856",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987827969"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987827969"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/9c47a26452426fffc4ee3a7d2bdcfd0813e2ccbc.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:44:06Z",
      "diff_hunk" : "@@ -0,0 +1,206 @@\n+#include <index/silentpaymentindex.h>\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/disktxpos.h>\n+#include <node/blockstorage.h>\n+#include <pubkey.h>\n+#include <undo.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+\n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n+\n+constexpr uint8_t DB_SILENTPAYMENTINDEX{'s'};\n+\n+std::unique_ptr<SilentPaymentIndex> g_silentpaymentindex;\n+\n+/** Access to the silent payment index database (indexes/silentpaymentindex/) */\n+class SilentPaymentIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    bool WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items);\n+};\n+\n+SilentPaymentIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"silentpaymentindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool SilentPaymentIndex::DB::WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : items) {\n+        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tuple.first), tuple.second);\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987827969",
      "id" : 987827969,
      "in_reply_to_id" : 984701121,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464Q8B",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 40,
      "original_position" : 40,
      "original_start_line" : 38,
      "path" : "src/index/silentpaymentindex.cpp",
      "position" : null,
      "pull_request_review_id" : 1131293722,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987827969/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-05T11:44:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987827969",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987828331"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987828331"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/commit/9c47a26452426fffc4ee3a7d2bdcfd0813e2ccbc.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:44:36Z",
      "diff_hunk" : "@@ -0,0 +1,206 @@\n+#include <index/silentpaymentindex.h>\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/disktxpos.h>\n+#include <node/blockstorage.h>\n+#include <pubkey.h>\n+#include <undo.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+\n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n+\n+constexpr uint8_t DB_SILENTPAYMENTINDEX{'s'};\n+\n+std::unique_ptr<SilentPaymentIndex> g_silentpaymentindex;\n+\n+/** Access to the silent payment index database (indexes/silentpaymentindex/) */\n+class SilentPaymentIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    bool WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items);\n+};\n+\n+SilentPaymentIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"silentpaymentindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool SilentPaymentIndex::DB::WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : items) {\n+        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+SilentPaymentIndex::SilentPaymentIndex(std::unique_ptr<interfaces::Chain> chain, size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : BaseIndex(std::move(chain), \"silentpaymentindex\"), m_db(std::make_unique<SilentPaymentIndex::DB>(n_cache_size, f_memory, f_wipe))\n+{}\n+\n+SilentPaymentIndex::~SilentPaymentIndex() {}\n+\n+bool SilentPaymentIndex::ExtractPubkeyFromInput(const Coin& prevCoin, const CTxIn& txin,  XOnlyPubKey& senderPubKey)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987828331",
      "id" : 987828331,
      "in_reply_to_id" : 984705023,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464RBr",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 50,
      "original_position" : 50,
      "original_start_line" : null,
      "path" : "src/index/silentpaymentindex.cpp",
      "position" : null,
      "pull_request_review_id" : 1131294207,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987828331/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-05T11:44:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987828331",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987828911"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987828911"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/7eecc8732b267c421b45166ba5a0576e602892f0.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:45:24Z",
      "diff_hunk" : "@@ -76,30 +95,35 @@ class DestinationEncoder\n     std::string operator()(const CNoDestination& no) const { return {}; }\n };\n \n-CTxDestination DecodeDestination(const std::string& str, const CChainParams& params, std::string& error_str, std::vector<int>* error_locations)\n+std::tuple<CTxDestination,bool,int32_t> DecodeDestination(const std::string& str, const CChainParams& params, std::string& error_str, std::vector<int>* error_locations)\n {\n     std::vector<unsigned char> data;\n     uint160 hash;\n     error_str = \"\";\n+    bool silent_payment{false};\n+\n+    const auto& silent_payment_hrp = params.SilentPaymentHRP();\n+    auto dest_silent_payment_hrp = ToLower(str.substr(0, params.SilentPaymentHRP().size()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987828911",
      "id" : 987828911,
      "in_reply_to_id" : 984709509,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464RKv",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 106,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/key_io.cpp",
      "position" : null,
      "pull_request_review_id" : 1131295048,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987828911/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-05T11:45:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987828911",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987829154"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829154"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/edf8e5b5eccd9031c1b59ce8ea4c5586ed503d1d.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:45:45Z",
      "diff_hunk" : "@@ -1983,6 +2031,14 @@ bool FindScriptPubKey(std::atomic<int>& scan_progress, const std::atomic<bool>&\n         if (needles.count(coin.out.scriptPubKey)) {\n             out_results.emplace(key, coin);\n         }\n+        for(const auto& sp_key_range: sp_keys_range) {\n+            CKey sp_key = std::get<0>(sp_key_range);\n+            std::pair<int64_t, int64_t> sp_range = std::get<1>(sp_key_range);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987829154",
      "id" : 987829154,
      "in_reply_to_id" : 984729836,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464ROi",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 2036,
      "original_position" : 78,
      "original_start_line" : 2034,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 1131295399,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829154/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-05T11:45:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829154",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987829227"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829227"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/edf8e5b5eccd9031c1b59ce8ea4c5586ed503d1d.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:45:52Z",
      "diff_hunk" : "@@ -2122,17 +2178,54 @@ static RPCHelpMan scantxoutset()\n         }\n \n         std::set<CScript> needles;\n+        std::vector<std::tuple<CKey, std::pair<int64_t, int64_t>>> sp_keys_range;\n         std::map<CScript, std::string> descriptors;\n         CAmount total_in = 0;\n \n         // loop through the scan objects\n         for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n             FlatSigningProvider provider;\n-            auto scripts = EvalDescriptorStringOrObject(scanobject, provider);\n-            for (CScript& script : scripts) {\n-                std::string inferred = InferDescriptor(script, provider)->ToString();\n-                needles.emplace(script);\n-                descriptors.emplace(std::move(script), std::move(inferred));\n+            // auto scripts = EvalDescriptorStringOrObject(scanobject, provider);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987829227",
      "id" : 987829227,
      "in_reply_to_id" : 984730361,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464RPr",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 2188,
      "original_position" : 103,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 1131295520,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829227/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-05T11:45:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829227",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987829311"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829311"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/edf8e5b5eccd9031c1b59ce8ea4c5586ed503d1d.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:45:59Z",
      "diff_hunk" : "@@ -2122,17 +2178,54 @@ static RPCHelpMan scantxoutset()\n         }\n \n         std::set<CScript> needles;\n+        std::vector<std::tuple<CKey, std::pair<int64_t, int64_t>>> sp_keys_range;\n         std::map<CScript, std::string> descriptors;\n         CAmount total_in = 0;\n \n         // loop through the scan objects\n         for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n             FlatSigningProvider provider;\n-            auto scripts = EvalDescriptorStringOrObject(scanobject, provider);\n-            for (CScript& script : scripts) {\n-                std::string inferred = InferDescriptor(script, provider)->ToString();\n-                needles.emplace(script);\n-                descriptors.emplace(std::move(script), std::move(inferred));\n+            // auto scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            auto ret = EvalDescriptorStringOrObject(scanobject);\n+            auto desc_str = std::get<0>(ret);\n+            auto range = std::get<1>(ret);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987829311",
      "id" : 987829311,
      "in_reply_to_id" : 984730908,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464RQ_",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 2191,
      "original_position" : 106,
      "original_start_line" : 2189,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 1131295636,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829311/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-05T11:46:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829311",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987829382"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829382"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/edf8e5b5eccd9031c1b59ce8ea4c5586ed503d1d.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:46:05Z",
      "diff_hunk" : "@@ -2122,17 +2178,54 @@ static RPCHelpMan scantxoutset()\n         }\n \n         std::set<CScript> needles;\n+        std::vector<std::tuple<CKey, std::pair<int64_t, int64_t>>> sp_keys_range;\n         std::map<CScript, std::string> descriptors;\n         CAmount total_in = 0;\n \n         // loop through the scan objects\n         for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n             FlatSigningProvider provider;\n-            auto scripts = EvalDescriptorStringOrObject(scanobject, provider);\n-            for (CScript& script : scripts) {\n-                std::string inferred = InferDescriptor(script, provider)->ToString();\n-                needles.emplace(script);\n-                descriptors.emplace(std::move(script), std::move(inferred));\n+            // auto scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            auto ret = EvalDescriptorStringOrObject(scanobject);\n+            auto desc_str = std::get<0>(ret);\n+            auto range = std::get<1>(ret);\n+\n+            bool is_sp_desc = (desc_str.rfind(\"sp(\", 0) == 0);\n+\n+            if (is_sp_desc) {\n+                auto keys = DescriptorToKeys(desc_str, range, provider);\n+\n+                if (keys.empty()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scanning silent payment descriptors requires private keys.\");\n+                }\n+\n+                assert(keys.size() == 1);\n+\n+                auto privKey = keys.at(0);\n+\n+                // if (std::find(sp_keys.begin(), sp_keys.end(), privKey) == sp_keys.end()) {\n+                //     sp_keys.push_back(privKey);\n+                // }\n+\n+                bool privkey_already_added{false};\n+                for (const std::tuple<CKey, std::tuple<int64_t, int64_t>> privkeyrange : sp_keys_range) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987829382",
      "id" : 987829382,
      "in_reply_to_id" : 984733402,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464RSG",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 2211,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 1131295730,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829382/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-05T11:46:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829382",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987829496"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829496"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/edf8e5b5eccd9031c1b59ce8ea4c5586ed503d1d.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:46:13Z",
      "diff_hunk" : "@@ -2122,17 +2178,54 @@ static RPCHelpMan scantxoutset()\n         }\n \n         std::set<CScript> needles;\n+        std::vector<std::tuple<CKey, std::pair<int64_t, int64_t>>> sp_keys_range;\n         std::map<CScript, std::string> descriptors;\n         CAmount total_in = 0;\n \n         // loop through the scan objects\n         for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n             FlatSigningProvider provider;\n-            auto scripts = EvalDescriptorStringOrObject(scanobject, provider);\n-            for (CScript& script : scripts) {\n-                std::string inferred = InferDescriptor(script, provider)->ToString();\n-                needles.emplace(script);\n-                descriptors.emplace(std::move(script), std::move(inferred));\n+            // auto scripts = EvalDescriptorStringOrObject(scanobject, provider);\n+            auto ret = EvalDescriptorStringOrObject(scanobject);\n+            auto desc_str = std::get<0>(ret);\n+            auto range = std::get<1>(ret);\n+\n+            bool is_sp_desc = (desc_str.rfind(\"sp(\", 0) == 0);\n+\n+            if (is_sp_desc) {\n+                auto keys = DescriptorToKeys(desc_str, range, provider);\n+\n+                if (keys.empty()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scanning silent payment descriptors requires private keys.\");\n+                }\n+\n+                assert(keys.size() == 1);\n+\n+                auto privKey = keys.at(0);\n+\n+                // if (std::find(sp_keys.begin(), sp_keys.end(), privKey) == sp_keys.end()) {\n+                //     sp_keys.push_back(privKey);\n+                // }\n+\n+                bool privkey_already_added{false};\n+                for (const std::tuple<CKey, std::tuple<int64_t, int64_t>> privkeyrange : sp_keys_range) {\n+                    CKey existent_privkey = std::get<0>(privkeyrange);\n+                    if (existent_privkey == privKey) {\n+                        privkey_already_added = true;\n+                        break;\n+                    }\n+                }\n+\n+                if (!privkey_already_added) {\n+                    sp_keys_range.push_back({privKey, range});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987829496",
      "id" : 987829496,
      "in_reply_to_id" : 984734438,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464RT4",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 2220,
      "original_position" : 135,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 1131295881,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829496/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-05T11:46:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829496",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987829800"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829800"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/3bfd4786fdbcefc5558b10a74da6827f1edab187.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:46:42Z",
      "diff_hunk" : "@@ -116,12 +116,17 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n             CTxOut out(0, CScript() << OP_RETURN << data);\n             rawTx.vout.push_back(out);\n         } else {\n-            CTxDestination destination = DecodeDestination(name_);\n+            ;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987829800",
      "id" : 987829800,
      "in_reply_to_id" : 984735613,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464RYo",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 119,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction_util.cpp",
      "position" : null,
      "pull_request_review_id" : 1131296332,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829800/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-05T11:46:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829800",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987829862"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829862"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/3bfd4786fdbcefc5558b10a74da6827f1edab187.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:46:48Z",
      "diff_hunk" : "@@ -116,12 +116,17 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n             CTxOut out(0, CScript() << OP_RETURN << data);\n             rawTx.vout.push_back(out);\n         } else {\n-            CTxDestination destination = DecodeDestination(name_);\n+            ;\n+            auto decoded = DecodeDestinationIndicatingSP(name_);\n+            CTxDestination destination{std::get<0>(decoded)};\n+            bool silent_payment{std::get<1>(decoded)};\n+            int32_t identifier{std::get<2>(decoded)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987829862",
      "id" : 987829862,
      "in_reply_to_id" : 984737097,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464RZm",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 123,
      "original_position" : 27,
      "original_start_line" : 120,
      "path" : "src/rpc/rawtransaction_util.cpp",
      "position" : null,
      "pull_request_review_id" : 1131296428,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829862/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-05T11:46:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829862",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987829973"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829973"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/3bfd4786fdbcefc5558b10a74da6827f1edab187.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:46:58Z",
      "diff_hunk" : "@@ -116,12 +116,17 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n             CTxOut out(0, CScript() << OP_RETURN << data);\n             rawTx.vout.push_back(out);\n         } else {\n-            CTxDestination destination = DecodeDestination(name_);\n+            ;\n+            auto decoded = DecodeDestinationIndicatingSP(name_);\n+            CTxDestination destination{std::get<0>(decoded)};\n+            bool silent_payment{std::get<1>(decoded)};\n+            int32_t identifier{std::get<2>(decoded)};\n+\n             if (!IsValidDestination(destination)) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(\"Invalid Bitcoin address: \") + name_);\n             }\n \n-            if (!destinations.insert(destination).second) {\n+            if (!destinations.insert({destination, identifier}).second) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987829973",
      "id" : 987829973,
      "in_reply_to_id" : 984737619,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464RbV",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 129,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction_util.cpp",
      "position" : null,
      "pull_request_review_id" : 1131296585,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829973/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-05T11:46:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987829973",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987830246"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987830246"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/edf8e5b5eccd9031c1b59ce8ea4c5586ed503d1d.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:47:21Z",
      "diff_hunk" : "@@ -1092,6 +1093,88 @@ std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, Fl\n     return ret;\n }\n \n+std::tuple<std::string, std::pair<int64_t, int64_t>> EvalDescriptorStringOrObject(const UniValue& scanobject)\n+{\n+    std::string desc_str;\n+    std::pair<int64_t, int64_t> range = {0, 1000};\n+    if (scanobject.isStr()) {\n+        desc_str = scanobject.get_str();\n+    } else if (scanobject.isObject()) {\n+        UniValue desc_uni = find_value(scanobject, \"desc\");\n+        if (desc_uni.isNull()) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor needs to be provided in scan object\");\n+        desc_str = desc_uni.get_str();\n+\n+        bool is_sp_desc = (desc_str.rfind(\"sp(\", 0) == 0);\n+\n+        if (is_sp_desc) {\n+            range = {0, wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER};\n+        }\n+\n+        UniValue range_uni = find_value(scanobject, \"range\");\n+        if (!range_uni.isNull()) {\n+            range = ParseDescriptorRange(range_uni);\n+        }\n+\n+        if (is_sp_desc && range.second > wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER) {\n+            std::stringstream ss;\n+            ss << wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER;\n+\n+            throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                \"End of range is too high. The maximum allowed for silent payment descriptors is \" + ss.str());\n+        }\n+\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan object needs to be either a string or an object\");\n+    }\n+\n+    return {desc_str, range};\n+}\n+\n+std::vector<CScript> DescriptorToScripts(std::string desc_str, std::pair<int64_t, int64_t> range, FlatSigningProvider& provider)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987830246",
      "id" : 987830246,
      "in_reply_to_id" : 984738214,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464Rfm",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 1133,
      "original_position" : 49,
      "original_start_line" : null,
      "path" : "src/rpc/util.cpp",
      "position" : null,
      "pull_request_review_id" : 1131296955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987830246/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-05T11:47:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987830246",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987830385"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987830385"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/edf8e5b5eccd9031c1b59ce8ea4c5586ed503d1d.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:47:31Z",
      "diff_hunk" : "@@ -1092,6 +1093,88 @@ std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, Fl\n     return ret;\n }\n \n+std::tuple<std::string, std::pair<int64_t, int64_t>> EvalDescriptorStringOrObject(const UniValue& scanobject)\n+{\n+    std::string desc_str;\n+    std::pair<int64_t, int64_t> range = {0, 1000};\n+    if (scanobject.isStr()) {\n+        desc_str = scanobject.get_str();\n+    } else if (scanobject.isObject()) {\n+        UniValue desc_uni = find_value(scanobject, \"desc\");\n+        if (desc_uni.isNull()) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor needs to be provided in scan object\");\n+        desc_str = desc_uni.get_str();\n+\n+        bool is_sp_desc = (desc_str.rfind(\"sp(\", 0) == 0);\n+\n+        if (is_sp_desc) {\n+            range = {0, wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER};\n+        }\n+\n+        UniValue range_uni = find_value(scanobject, \"range\");\n+        if (!range_uni.isNull()) {\n+            range = ParseDescriptorRange(range_uni);\n+        }\n+\n+        if (is_sp_desc && range.second > wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER) {\n+            std::stringstream ss;\n+            ss << wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER;\n+\n+            throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                \"End of range is too high. The maximum allowed for silent payment descriptors is \" + ss.str());\n+        }\n+\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan object needs to be either a string or an object\");\n+    }\n+\n+    return {desc_str, range};\n+}\n+\n+std::vector<CScript> DescriptorToScripts(std::string desc_str, std::pair<int64_t, int64_t> range, FlatSigningProvider& provider)\n+{\n+    std::string error;\n+    auto desc = Parse(desc_str, provider, error);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+    }\n+    if (!desc->IsRange()) {\n+        range.first = 0;\n+        range.second = 0;\n+    }\n+    std::vector<CScript> ret;\n+    for (int i = range.first; i <= range.second; ++i) {\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(i, provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys: '%s'\", desc_str));\n+        }\n+        std::move(scripts.begin(), scripts.end(), std::back_inserter(ret));\n+    }\n+    return ret;\n+}\n+\n+std::vector<CKey> DescriptorToKeys(std::string desc_str, std::pair<int64_t, int64_t> range, FlatSigningProvider& provider)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987830385",
      "id" : 987830385,
      "in_reply_to_id" : 984738708,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464Rhx",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 1155,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/rpc/util.cpp",
      "position" : null,
      "pull_request_review_id" : 1131297120,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987830385/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-05T11:47:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987830385",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987830690"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987830690"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/edf8e5b5eccd9031c1b59ce8ea4c5586ed503d1d.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:47:55Z",
      "diff_hunk" : "@@ -1092,6 +1093,88 @@ std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, Fl\n     return ret;\n }\n \n+std::tuple<std::string, std::pair<int64_t, int64_t>> EvalDescriptorStringOrObject(const UniValue& scanobject)\n+{\n+    std::string desc_str;\n+    std::pair<int64_t, int64_t> range = {0, 1000};\n+    if (scanobject.isStr()) {\n+        desc_str = scanobject.get_str();\n+    } else if (scanobject.isObject()) {\n+        UniValue desc_uni = find_value(scanobject, \"desc\");\n+        if (desc_uni.isNull()) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor needs to be provided in scan object\");\n+        desc_str = desc_uni.get_str();\n+\n+        bool is_sp_desc = (desc_str.rfind(\"sp(\", 0) == 0);\n+\n+        if (is_sp_desc) {\n+            range = {0, wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER};\n+        }\n+\n+        UniValue range_uni = find_value(scanobject, \"range\");\n+        if (!range_uni.isNull()) {\n+            range = ParseDescriptorRange(range_uni);\n+        }\n+\n+        if (is_sp_desc && range.second > wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER) {\n+            std::stringstream ss;\n+            ss << wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER;\n+\n+            throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                \"End of range is too high. The maximum allowed for silent payment descriptors is \" + ss.str());\n+        }\n+\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan object needs to be either a string or an object\");\n+    }\n+\n+    return {desc_str, range};\n+}\n+\n+std::vector<CScript> DescriptorToScripts(std::string desc_str, std::pair<int64_t, int64_t> range, FlatSigningProvider& provider)\n+{\n+    std::string error;\n+    auto desc = Parse(desc_str, provider, error);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+    }\n+    if (!desc->IsRange()) {\n+        range.first = 0;\n+        range.second = 0;\n+    }\n+    std::vector<CScript> ret;\n+    for (int i = range.first; i <= range.second; ++i) {\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(i, provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys: '%s'\", desc_str));\n+        }\n+        std::move(scripts.begin(), scripts.end(), std::back_inserter(ret));\n+    }\n+    return ret;\n+}\n+\n+std::vector<CKey> DescriptorToKeys(std::string desc_str, std::pair<int64_t, int64_t> range, FlatSigningProvider& provider)\n+{\n+    std::string error;\n+    auto desc = Parse(desc_str, provider, error);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+    }\n+    if (!desc->IsRange()) {\n+        range.first = 0;\n+        range.second = 0;\n+    }\n+    std::vector<CKey> ret;\n+    for (int i = range.first; i <= range.second; ++i) {\n+        FlatSigningProvider out;\n+        desc->ExpandPrivate(i, provider, out);\n+        //std::move(out.keys.begin(), out.keys.end(), std::back_inserter(ret));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987830690",
      "id" : 987830690,
      "in_reply_to_id" : 984739120,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464Rmi",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 1170,
      "original_position" : 86,
      "original_start_line" : null,
      "path" : "src/rpc/util.cpp",
      "position" : null,
      "pull_request_review_id" : 1131297529,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987830690/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-05T11:47:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987830690",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987830861"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987830861"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/edf8e5b5eccd9031c1b59ce8ea4c5586ed503d1d.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:48:07Z",
      "diff_hunk" : "@@ -1092,6 +1093,88 @@ std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, Fl\n     return ret;\n }\n \n+std::tuple<std::string, std::pair<int64_t, int64_t>> EvalDescriptorStringOrObject(const UniValue& scanobject)\n+{\n+    std::string desc_str;\n+    std::pair<int64_t, int64_t> range = {0, 1000};\n+    if (scanobject.isStr()) {\n+        desc_str = scanobject.get_str();\n+    } else if (scanobject.isObject()) {\n+        UniValue desc_uni = find_value(scanobject, \"desc\");\n+        if (desc_uni.isNull()) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor needs to be provided in scan object\");\n+        desc_str = desc_uni.get_str();\n+\n+        bool is_sp_desc = (desc_str.rfind(\"sp(\", 0) == 0);\n+\n+        if (is_sp_desc) {\n+            range = {0, wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER};\n+        }\n+\n+        UniValue range_uni = find_value(scanobject, \"range\");\n+        if (!range_uni.isNull()) {\n+            range = ParseDescriptorRange(range_uni);\n+        }\n+\n+        if (is_sp_desc && range.second > wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER) {\n+            std::stringstream ss;\n+            ss << wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER;\n+\n+            throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                \"End of range is too high. The maximum allowed for silent payment descriptors is \" + ss.str());\n+        }\n+\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan object needs to be either a string or an object\");\n+    }\n+\n+    return {desc_str, range};\n+}\n+\n+std::vector<CScript> DescriptorToScripts(std::string desc_str, std::pair<int64_t, int64_t> range, FlatSigningProvider& provider)\n+{\n+    std::string error;\n+    auto desc = Parse(desc_str, provider, error);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+    }\n+    if (!desc->IsRange()) {\n+        range.first = 0;\n+        range.second = 0;\n+    }\n+    std::vector<CScript> ret;\n+    for (int i = range.first; i <= range.second; ++i) {\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(i, provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys: '%s'\", desc_str));\n+        }\n+        std::move(scripts.begin(), scripts.end(), std::back_inserter(ret));\n+    }\n+    return ret;\n+}\n+\n+std::vector<CKey> DescriptorToKeys(std::string desc_str, std::pair<int64_t, int64_t> range, FlatSigningProvider& provider)\n+{\n+    std::string error;\n+    auto desc = Parse(desc_str, provider, error);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+    }\n+    if (!desc->IsRange()) {\n+        range.first = 0;\n+        range.second = 0;\n+    }\n+    std::vector<CKey> ret;\n+    for (int i = range.first; i <= range.second; ++i) {\n+        FlatSigningProvider out;\n+        desc->ExpandPrivate(i, provider, out);\n+        //std::move(out.keys.begin(), out.keys.end(), std::back_inserter(ret));\n+        for (auto& [_, privKey] : out.keys) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987830861",
      "id" : 987830861,
      "in_reply_to_id" : 984739751,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464RpN",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 1171,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "src/rpc/util.cpp",
      "position" : null,
      "pull_request_review_id" : 1131297763,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987830861/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-05T11:48:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987830861",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987831196"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987831196"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/7a03d0cd787ac53d44206744c0f85a22399f71e3.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:48:30Z",
      "diff_hunk" : "@@ -135,13 +200,31 @@ RPCHelpMan setlabel()\n \n     LOCK(pwallet->cs_wallet);\n \n-    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+    auto address = request.params[0].get_str();\n+\n+    auto decoded = DecodeDestinationIndicatingSP(address);\n+    CTxDestination dest{std::get<0>(decoded)};\n+    bool silent_payment{std::get<1>(decoded)};\n+    int32_t silent_payment_index{std::get<2>(decoded)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987831196",
      "id" : 987831196,
      "in_reply_to_id" : 984740556,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464Ruc",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 208,
      "original_position" : 89,
      "original_start_line" : 205,
      "path" : "src/wallet/rpc/addresses.cpp",
      "position" : null,
      "pull_request_review_id" : 1131298176,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987831196/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-05T11:48:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987831196",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987831594"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987831594"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/7eecc8732b267c421b45166ba5a0576e602892f0.",
      "commit_id" : "50b54c45a3c3ab768c1b8c634ff941cef7ad39c4",
      "created_at" : "2022-10-05T11:48:59Z",
      "diff_hunk" : "@@ -553,7 +637,11 @@ RPCHelpMan getaddressinfo()\n     LOCK(pwallet->cs_wallet);\n \n     std::string error_msg;\n-    CTxDestination dest = DecodeDestination(request.params[0].get_str(), error_msg);\n+\n+    auto decoded = DecodeDestinationIndicatingSP(request.params[0].get_str(), error_msg);\n+    CTxDestination dest{std::get<0>(decoded)};\n+    bool silent_payment{std::get<1>(decoded)};\n+    int32_t silent_payment_index{std::get<2>(decoded)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r987831594",
      "id" : 987831594,
      "in_reply_to_id" : 984741063,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58464R0q",
      "original_commit_id" : "79402460ade5f6944c86a071ac72a2c47ae88fba",
      "original_line" : 644,
      "original_position" : 129,
      "original_start_line" : 642,
      "path" : "src/wallet/rpc/addresses.cpp",
      "position" : null,
      "pull_request_review_id" : 1131298701,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987831594/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-05T11:48:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/987831594",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@aureleoules Thanks for the detailed review. I addressed all the suggestions.\r\n\r\n> the user asks for a new address, they should get a new address\r\n\r\n@luke-jr as mentioned earlier, that's why a new RPC was created instead of using `getnewaddress`, just so the user doesn't think a new address will be generated.",
      "created_at" : "2022-10-05T11:53:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1268335783",
      "id" : 1268335783,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585LmUSn",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1268335783/reactions"
      },
      "updated_at" : "2022-10-05T11:53:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1268335783",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Silent Payment v4 (coinjoin support added)\r\n\r\nChanges:\r\n\r\n. Silent payments now use all inputs to create transactions. Previously, they only used the first input. This change increases privacy and makes silent payments compatible with coinjoin.\r\n\r\n. `getspaddress` RPC renamed to `getsilentaddress` for clarity\r\n\r\n. Added support for silent payment in PSBT via `walletcreatefundedpsbt` RPC.\r\n\r\n. Added a new index scheme (which stores the sum of input public keys for each transaction). The previous index `bitcoin/signet/indexes/silentpaymentindex` should be removed as it is no longer compatible with this new version.\r\n\r\nFor reviewers:\r\n\r\nNow, silent payments use the scheme `hash(i1*X + i2*X + i3*X + ...)*G + X == hash(x*(I1+I2+I3+...))*G + X`, as described here: https://gist.github.com/RubenSomsen/c43b79517e7cb701ebf77eec6dbb46b8#variant-using-all-inputs\r\n\r\nAs inputs can be Taproot, this introduced a new issue as `bitcoin-core/secp256k1` does not support x-only public key sum (perhaps due to missing prefix byte).\r\n\r\nI opened a new PR https://github.com/bitcoin-core/secp256k1/pull/1143 to add a function to convert from x-only to compressed public key with even y. This is the solution being used by the current silent payment implementation.\r\n\r\nTutorial updated: https://gist.github.com/w0xlt/c81277ae8677b6c0d3dd073893210875",
      "created_at" : "2022-10-11T07:01:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1274178546",
      "id" : 1274178546,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585L8mvy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1274178546/reactions"
      },
      "updated_at" : "2022-10-11T07:01:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1274178546",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "How about returning a JSON object with some warnings for new labels to explicit that new labels are not new identities?\r\n\r\n<details>\r\n<summary>Example</summary>\r\n\r\n```bash\r\n./src/bitcoin-cli -testnet -rpcwallet=sp1 getsilentaddress client1 \r\n{\r\n  \"address\": \"tsp071pp809z56vwvyqhwc4fsjq8vhjw6yyguzv2u9hnwt3jvyl2ha49nwqtsc8w9\",\r\n  \"index\": 7,\r\n  \"label\": \"client1\",\r\n  \"warnings\": \"This address is not a new identity. It is a re-use of an existing identity with a different label.\"\r\n}\r\n./src/bitcoin-cli -testnet -rpcwallet=sp1 getsilentaddress client1\r\n{\r\n  \"address\": \"tsp071pp809z56vwvyqhwc4fsjq8vhjw6yyguzv2u9hnwt3jvyl2ha49nwqtsc8w9\",\r\n  \"label\": \"client1\",\r\n  \"index\": 7\r\n}\r\n./src/bitcoin-cli -testnet -rpcwallet=sp1 getsilentaddress client2\r\n{\r\n  \"address\": \"tsp081pp809z56vwvyqhwc4fsjq8vhjw6yyguzv2u9hnwt3jvyl2ha49nwqyqkdah\",\r\n  \"index\": 8,\r\n  \"label\": \"client2\",\r\n  \"warnings\": \"This address is not a new identity. It is a re-use of an existing identity with a different label.\"\r\n}\r\n./src/bitcoin-cli -testnet -rpcwallet=sp1 getsilentaddress client2\r\n{\r\n  \"address\": \"tsp081pp809z56vwvyqhwc4fsjq8vhjw6yyguzv2u9hnwt3jvyl2ha49nwqyqkdah\",\r\n  \"label\": \"client2\",\r\n  \"index\": 8\r\n}\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Code diff</summary>\r\n\r\n```diff\r\ndiff --git a/src/wallet/rpc/addresses.cpp b/src/wallet/rpc/addresses.cpp\r\nindex 1f8621d48..cd6165cef 100644\r\n--- a/src/wallet/rpc/addresses.cpp\r\n+++ b/src/wallet/rpc/addresses.cpp\r\n@@ -110,10 +110,14 @@ RPCHelpMan getsilentaddress()\r\n     if (!request.params[0].isNull())\r\n         label = LabelFromValue(request.params[0]);\r\n \r\n+    UniValue obj(UniValue::VOBJ);\r\n     for (auto const& [key, val] : pwallet->m_silent_address_book)\r\n     {\r\n         if (val.m_label == label) {\r\n-            return val.m_address;\r\n+            obj.pushKV(\"address\", val.m_address);\r\n+            obj.pushKV(\"label\", val.m_label);\r\n+            obj.pushKV(\"index\", key);\r\n+            return obj;\r\n         }\r\n     }\r\n \r\n@@ -128,7 +132,16 @@ RPCHelpMan getsilentaddress()\r\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, util::ErrorString(op_dest).original);\r\n     }\r\n \r\n-    return EncodeDestination(*op_dest, silent_payment, current_index);\r\n+    const auto address{EncodeDestination(*op_dest, silent_payment, current_index)};\r\n+\r\n+    obj.pushKV(\"address\", address);\r\n+    obj.pushKV(\"index\", current_index);\r\n+    obj.pushKV(\"label\", label);\r\n+    if (current_index > 0) {\r\n+        obj.pushKV(\"warnings\", \"This address is not a new identity. It is a re-use of an existing identity with a different label.\");\r\n+    }\r\n+\r\n+    return obj;\r\n },\r\n     };\r\n }\r\n```\r\n\r\n</details>",
      "created_at" : "2022-10-11T12:30:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1274611407",
      "id" : 1274611407,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585L-QbP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1274611407/reactions"
      },
      "updated_at" : "2022-10-11T12:33:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1274611407",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992270270"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992270270"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in c9b3e312d3579be66043934c3a0c1f13911ab715\r\nThis function seems to be largely duplicated from the function `CWallet::ExtractPubkeyFromInput` in `src/wallet/wallet.cpp`, is there a way to re-use code?",
      "commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "created_at" : "2022-10-11T12:37:05Z",
      "diff_hunk" : "@@ -0,0 +1,229 @@\n+#include <index/silentpaymentindex.h>\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/disktxpos.h>\n+#include <node/blockstorage.h>\n+#include <pubkey.h>\n+#include <undo.h>\n+#include <util/system.h>\n+#include <validation.h>\n+#include <wallet/silentpayment.h>\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+\n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n+\n+constexpr uint8_t DB_SILENTPAYMENTINDEX{'s'};\n+\n+std::unique_ptr<SilentPaymentIndex> g_silentpaymentindex;\n+\n+/** Access to the silent payment index database (indexes/silentpaymentindex/) */\n+class SilentPaymentIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    bool WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items);\n+};\n+\n+SilentPaymentIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"silentpaymentindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool SilentPaymentIndex::DB::WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& [tx_hash, keydata] : items) {\n+        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tx_hash), keydata);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+SilentPaymentIndex::SilentPaymentIndex(std::unique_ptr<interfaces::Chain> chain, size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : BaseIndex(std::move(chain), \"silentpaymentindex\"), m_db(std::make_unique<SilentPaymentIndex::DB>(n_cache_size, f_memory, f_wipe))\n+{}\n+\n+SilentPaymentIndex::~SilentPaymentIndex() {}\n+\n+bool SilentPaymentIndex::ExtractPubkeyFromInput(const Coin& prevCoin, const CTxIn& txin,  XOnlyPubKey& senderPubKey) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992270270",
      "id" : 992270270,
      "line" : 51,
      "node_id" : "PRRC_kwDOABII5847JNe-",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 51,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/index/silentpaymentindex.cpp",
      "position" : 51,
      "pull_request_review_id" : 1137407003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992270270/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-11T13:29:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992270270",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992281752"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992281752"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in de25bcf6b7d59ad8803748412825a99bdb812cf3\r\nThis code is from `std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, FlatSigningProvider& provider)`, you should re-use it.\r\n\r\n<details>\r\n<summary>Diff</summary>\r\n\r\n```diff\r\ndiff --git a/src/rpc/util.cpp b/src/rpc/util.cpp\r\nindex 084d165da..672d3fd98 100644\r\n--- a/src/rpc/util.cpp\r\n+++ b/src/rpc/util.cpp\r\n@@ -1073,24 +1073,7 @@ std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, Fl\r\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan object needs to be either a string or an object\");\r\n     }\r\n \r\n-    std::string error;\r\n-    auto desc = Parse(desc_str, provider, error);\r\n-    if (!desc) {\r\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\r\n-    }\r\n-    if (!desc->IsRange()) {\r\n-        range.first = 0;\r\n-        range.second = 0;\r\n-    }\r\n-    std::vector<CScript> ret;\r\n-    for (int i = range.first; i <= range.second; ++i) {\r\n-        std::vector<CScript> scripts;\r\n-        if (!desc->Expand(i, provider, scripts, provider)) {\r\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys: '%s'\", desc_str));\r\n-        }\r\n-        std::move(scripts.begin(), scripts.end(), std::back_inserter(ret));\r\n-    }\r\n-    return ret;\r\n+    return DescriptorToScripts(desc_str, range, provider);\r\n }\r\n \r\n std::tuple<std::string, std::pair<int64_t, int64_t>> EvalDescriptorStringOrObject(const UniValue& scanobject)\r\n```\r\n\r\n</details>\r\n\r\n",
      "commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "created_at" : "2022-10-11T12:47:30Z",
      "diff_hunk" : "@@ -1092,6 +1093,87 @@ std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, Fl\n     return ret;\n }\n \n+std::tuple<std::string, std::pair<int64_t, int64_t>> EvalDescriptorStringOrObject(const UniValue& scanobject)\n+{\n+    std::string desc_str;\n+    std::pair<int64_t, int64_t> range = {0, 1000};\n+    if (scanobject.isStr()) {\n+        desc_str = scanobject.get_str();\n+    } else if (scanobject.isObject()) {\n+        UniValue desc_uni = find_value(scanobject, \"desc\");\n+        if (desc_uni.isNull()) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor needs to be provided in scan object\");\n+        desc_str = desc_uni.get_str();\n+\n+        bool is_sp_desc = (desc_str.rfind(\"sp(\", 0) == 0);\n+\n+        if (is_sp_desc) {\n+            range = {0, wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER};\n+        }\n+\n+        UniValue range_uni = find_value(scanobject, \"range\");\n+        if (!range_uni.isNull()) {\n+            range = ParseDescriptorRange(range_uni);\n+        }\n+\n+        if (is_sp_desc && range.second > wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER) {\n+            std::stringstream ss;\n+            ss << wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER;\n+\n+            throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                \"End of range is too high. The maximum allowed for silent payment descriptors is \" + ss.str());\n+        }\n+\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan object needs to be either a string or an object\");\n+    }\n+\n+    return {desc_str, range};\n+}\n+\n+std::vector<CScript> DescriptorToScripts(const std::string& desc_str, std::pair<int64_t, int64_t> range, FlatSigningProvider& provider)\n+{\n+    std::string error;\n+    auto desc = Parse(desc_str, provider, error);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+    }\n+    if (!desc->IsRange()) {\n+        range.first = 0;\n+        range.second = 0;\n+    }\n+    std::vector<CScript> ret;\n+    for (int i = range.first; i <= range.second; ++i) {\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(i, provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys: '%s'\", desc_str));\n+        }\n+        std::move(scripts.begin(), scripts.end(), std::back_inserter(ret));\n+    }\n+    return ret;\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992281752",
      "id" : 992281752,
      "line" : 1153,
      "node_id" : "PRRC_kwDOABII5847JQSY",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 1153,
      "original_position" : 69,
      "original_start_line" : 1133,
      "path" : "src/rpc/util.cpp",
      "position" : 69,
      "pull_request_review_id" : 1137407003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992281752/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1133,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-11T13:29:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992281752",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992287719"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992287719"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in d8a8182d2d37edcff51579225123f18434204f4a\r\n```suggestion\r\n    bool is_bech32_or_sp = (ToLower(std::string_view(str).substr(0, params.Bech32HRP().size())) == params.Bech32HRP()) ||\r\n        dest_silent_payment_hrp == silent_payment_hrp;\r\n```",
      "commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "created_at" : "2022-10-11T12:52:59Z",
      "diff_hunk" : "@@ -76,30 +95,35 @@ class DestinationEncoder\n     std::string operator()(const CNoDestination& no) const { return {}; }\n };\n \n-CTxDestination DecodeDestination(const std::string& str, const CChainParams& params, std::string& error_str, std::vector<int>* error_locations)\n+std::tuple<CTxDestination,bool,int32_t> DecodeDestination(const std::string& str, const CChainParams& params, std::string& error_str, std::vector<int>* error_locations)\n {\n     std::vector<unsigned char> data;\n     uint160 hash;\n     error_str = \"\";\n+    bool silent_payment{false};\n+\n+    const auto& silent_payment_hrp = params.SilentPaymentHRP();\n+    auto dest_silent_payment_hrp = ToLower(std::string_view(str).substr(0, params.SilentPaymentHRP().size()));\n \n     // Note this will be false if it is a valid Bech32 address for a different network\n-    bool is_bech32 = (ToLower(str.substr(0, params.Bech32HRP().size())) == params.Bech32HRP());\n+    bool is_bech32_or_sp = (ToLower(str.substr(0, params.Bech32HRP().size())) == params.Bech32HRP()) ||\n+        dest_silent_payment_hrp == silent_payment_hrp;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992287719",
      "id" : 992287719,
      "line" : 110,
      "node_id" : "PRRC_kwDOABII5847JRvn",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 110,
      "original_position" : 68,
      "original_start_line" : 109,
      "path" : "src/key_io.cpp",
      "position" : 68,
      "pull_request_review_id" : 1137407003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992287719/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 109,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-11T13:29:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992287719",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992288336"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992288336"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in 37bf469db8aead02e8cd8601eb1238e7d810657d\r\n```suggestion\r\n            if (!silent_payment_vouts.empty()) {\r\n```",
      "commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "created_at" : "2022-10-11T12:53:32Z",
      "diff_hunk" : "@@ -1214,17 +1214,29 @@ RPCHelpMan send()\n             InterpretFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n             PreventOutdatedOptions(options);\n \n+            std::vector<SilentTxOut> silent_payment_vouts;\n \n             CAmount fee;\n             int change_position;\n             bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n-            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf, &silent_payment_vouts);\n+\n+            if (silent_payment_vouts.size() > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992288336",
      "id" : 992288336,
      "line" : 1224,
      "node_id" : "PRRC_kwDOABII5847JR5Q",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 1224,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 30,
      "pull_request_review_id" : 1137407003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992288336/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-11T13:29:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992288336",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992289528"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992289528"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in 3618e1635dc53021fcc1373070c9e52ebf4e2477\r\n```suggestion\r\nbool DescriptorScriptPubKeyMan::GetPrivKeyForSilentPayment(const CScript& scriptPubKey, CKey& privKey, bool onlyTaproot)\r\n```",
      "commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "created_at" : "2022-10-11T12:54:37Z",
      "diff_hunk" : "@@ -2620,6 +2640,87 @@ bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKe\n     return true;\n }\n \n+bool DescriptorScriptPubKeyMan::GetPrivKeyForSilentPayment(const CScript scriptPubKey, CKey& privKey, bool onlyTaproot)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992289528",
      "id" : 992289528,
      "line" : 2643,
      "node_id" : "PRRC_kwDOABII5847JSL4",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 2643,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 65,
      "pull_request_review_id" : 1137407003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992289528/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-11T13:29:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992289528",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992290706"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992290706"
         }
      },
      "author_association" : "MEMBER",
      "body" : "3618e1635dc53021fcc1373070c9e52ebf4e2477\r\nuse structured binding instead",
      "commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "created_at" : "2022-10-11T12:55:40Z",
      "diff_hunk" : "@@ -2620,6 +2640,87 @@ bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKe\n     return true;\n }\n \n+bool DescriptorScriptPubKeyMan::GetPrivKeyForSilentPayment(const CScript scriptPubKey, CKey& privKey, bool onlyTaproot)\n+{\n+    std::vector<std::vector<unsigned char>> solutions;\n+    TxoutType whichType = Solver(scriptPubKey, solutions);\n+\n+    std::unique_ptr<FlatSigningProvider> coin_keys = GetSigningProvider(scriptPubKey, true);\n+    if (!coin_keys || coin_keys->keys.size() != 1) {\n+        return false;\n+    }\n+\n+    auto& key = *coin_keys->keys.begin();\n+\n+    // Tweak the private key as GetSigningProvider returns the original key.\n+    // Taproot addresses / scriptPubKeys use tweaked public key, not the original key.\n+    if (whichType == TxoutType::WITNESS_V1_TAPROOT) {\n+        auto pubKeyFromScriptPubKey = XOnlyPubKey(solutions[0]);\n+\n+        // this means it is a \"rawtr\" output\n+        if (XOnlyPubKey(key.second.GetPubKey()) == pubKeyFromScriptPubKey) {\n+            privKey = key.second;\n+            return true;\n+        }\n+\n+        TaprootSpendData spenddata;\n+        coin_keys->GetTaprootSpendData(pubKeyFromScriptPubKey, spenddata);\n+\n+        if(!key.second.TweakCKey(&spenddata.merkle_root, privKey)) return false;\n+\n+        assert(XOnlyPubKey(privKey.GetPubKey()) ==  pubKeyFromScriptPubKey);\n+    } else if (onlyTaproot) {\n+        return false;\n+    } else if (whichType == TxoutType::NONSTANDARD || whichType == TxoutType::MULTISIG || whichType == TxoutType::WITNESS_UNKNOWN ) {\n+        return false;\n+    } else {\n+        privKey = key.second;\n+    }\n+\n+    return true;\n+}\n+\n+std::vector<std::tuple<CKey, int32_t>> DescriptorScriptPubKeyMan::VerifySilentPaymentAddress(\n+    std::vector<std::tuple<CScript, XOnlyPubKey>>& tx_output_pub_keys,\n+    XOnlyPubKey& sender_pub_key)\n+{\n+    LOCK(cs_desc_man);\n+\n+    std::vector<std::tuple<CKey, int32_t>> raw_tr_keys;\n+\n+    std::vector<CKey> priv_keys;\n+\n+    for (auto& [_, priv_key] : m_map_keys) {\n+        priv_keys.push_back(priv_key);\n+    }\n+\n+    assert(priv_keys.size() == 1);\n+\n+    CKey priv_key = priv_keys.at(0);\n+\n+    for(auto& pub_key_items : tx_output_pub_keys) {\n+\n+        CScript& outputScriptPubKey = std::get<0>(pub_key_items);\n+        XOnlyPubKey& outputPubKey = std::get<1>(pub_key_items);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992290706",
      "id" : 992290706,
      "line" : 2704,
      "node_id" : "PRRC_kwDOABII5847JSeS",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 2704,
      "original_position" : 126,
      "original_start_line" : 2701,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 126,
      "pull_request_review_id" : 1137407003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992290706/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 2701,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-11T13:29:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992290706",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992291843"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992291843"
         }
      },
      "author_association" : "MEMBER",
      "body" : "3618e1635dc53021fcc1373070c9e52ebf4e2477\r\nthis avoids creating a temporary\r\n```suggestion\r\n                raw_tr_keys.emplace_back({silKey, identifier});\r\n```",
      "commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "created_at" : "2022-10-11T12:56:43Z",
      "diff_hunk" : "@@ -2620,6 +2640,87 @@ bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKe\n     return true;\n }\n \n+bool DescriptorScriptPubKeyMan::GetPrivKeyForSilentPayment(const CScript scriptPubKey, CKey& privKey, bool onlyTaproot)\n+{\n+    std::vector<std::vector<unsigned char>> solutions;\n+    TxoutType whichType = Solver(scriptPubKey, solutions);\n+\n+    std::unique_ptr<FlatSigningProvider> coin_keys = GetSigningProvider(scriptPubKey, true);\n+    if (!coin_keys || coin_keys->keys.size() != 1) {\n+        return false;\n+    }\n+\n+    auto& key = *coin_keys->keys.begin();\n+\n+    // Tweak the private key as GetSigningProvider returns the original key.\n+    // Taproot addresses / scriptPubKeys use tweaked public key, not the original key.\n+    if (whichType == TxoutType::WITNESS_V1_TAPROOT) {\n+        auto pubKeyFromScriptPubKey = XOnlyPubKey(solutions[0]);\n+\n+        // this means it is a \"rawtr\" output\n+        if (XOnlyPubKey(key.second.GetPubKey()) == pubKeyFromScriptPubKey) {\n+            privKey = key.second;\n+            return true;\n+        }\n+\n+        TaprootSpendData spenddata;\n+        coin_keys->GetTaprootSpendData(pubKeyFromScriptPubKey, spenddata);\n+\n+        if(!key.second.TweakCKey(&spenddata.merkle_root, privKey)) return false;\n+\n+        assert(XOnlyPubKey(privKey.GetPubKey()) ==  pubKeyFromScriptPubKey);\n+    } else if (onlyTaproot) {\n+        return false;\n+    } else if (whichType == TxoutType::NONSTANDARD || whichType == TxoutType::MULTISIG || whichType == TxoutType::WITNESS_UNKNOWN ) {\n+        return false;\n+    } else {\n+        privKey = key.second;\n+    }\n+\n+    return true;\n+}\n+\n+std::vector<std::tuple<CKey, int32_t>> DescriptorScriptPubKeyMan::VerifySilentPaymentAddress(\n+    std::vector<std::tuple<CScript, XOnlyPubKey>>& tx_output_pub_keys,\n+    XOnlyPubKey& sender_pub_key)\n+{\n+    LOCK(cs_desc_man);\n+\n+    std::vector<std::tuple<CKey, int32_t>> raw_tr_keys;\n+\n+    std::vector<CKey> priv_keys;\n+\n+    for (auto& [_, priv_key] : m_map_keys) {\n+        priv_keys.push_back(priv_key);\n+    }\n+\n+    assert(priv_keys.size() == 1);\n+\n+    CKey priv_key = priv_keys.at(0);\n+\n+    for(auto& pub_key_items : tx_output_pub_keys) {\n+\n+        CScript& outputScriptPubKey = std::get<0>(pub_key_items);\n+        XOnlyPubKey& outputPubKey = std::get<1>(pub_key_items);\n+\n+        silentpayment::Recipient silent_sender{silentpayment::Recipient(priv_key, sender_pub_key)};\n+\n+        for (int32_t identifier = 0; identifier <= m_wallet_descriptor.next_index; identifier++) {\n+            CKey silKey = silent_sender.Tweak(identifier);\n+            XOnlyPubKey silPubKey{XOnlyPubKey(silKey.GetPubKey())};\n+\n+            if (silPubKey == outputPubKey) {\n+                raw_tr_keys.push_back({silKey, identifier});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992291843",
      "id" : 992291843,
      "line" : 2713,
      "node_id" : "PRRC_kwDOABII5847JSwD",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 2713,
      "original_position" : 135,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 135,
      "pull_request_review_id" : 1137407003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992291843/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-11T13:29:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992291843",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992293148"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992293148"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in 60537b92b0f27cab91fbb61da0d195197146bff6\r\n```suggestion\r\nSender::Sender(const CKey& sender_secret_key, const XOnlyPubKey& recipient_x_only_public_key)\r\n```",
      "commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "created_at" : "2022-10-11T12:57:54Z",
      "diff_hunk" : "@@ -0,0 +1,209 @@\n+#include <wallet/silentpayment.h>\n+\n+#include <key_io.h>\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+#include <secp256k1_extrakeys.h>\n+#include <arith_uint256.h>\n+\n+namespace silentpayment {\n+\n+Sender::Sender(const CKey sender_secret_key, const XOnlyPubKey recipient_x_only_public_key)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992293148",
      "id" : 992293148,
      "line" : 11,
      "node_id" : "PRRC_kwDOABII5847JTEc",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 11,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/wallet/silentpayment.cpp",
      "position" : 11,
      "pull_request_review_id" : 1137407003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992293148/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-11T13:29:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992293148",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992298635"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992298635"
         }
      },
      "author_association" : "MEMBER",
      "body" : "60537b92b0f27cab91fbb61da0d195197146bff6\r\n\r\n`return_val` should be asserted\r\n",
      "commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "created_at" : "2022-10-11T13:02:47Z",
      "diff_hunk" : "@@ -0,0 +1,209 @@\n+#include <wallet/silentpayment.h>\n+\n+#include <key_io.h>\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+#include <secp256k1_extrakeys.h>\n+#include <arith_uint256.h>\n+\n+namespace silentpayment {\n+\n+Sender::Sender(const CKey sender_secret_key, const XOnlyPubKey recipient_x_only_public_key)\n+{\n+    m_context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    // Parse the recipient's XOnlyPubKey to secp256k1_xonly_pubkey\n+    int return_val = secp256k1_xonly_pubkey_parse(m_context, &m_recipient_x_only_public_key, recipient_x_only_public_key.data());\n+    assert(return_val);\n+\n+    // Create the shared secret using the recipient's x-only pubkey and the sender' secret key\n+    return_val = secp256k1_ecdh_xonly(m_context, m_shared_secret, &m_recipient_x_only_public_key, sender_secret_key.begin(), nullptr, nullptr);\n+    assert(return_val);\n+}\n+\n+Sender::~Sender()\n+{\n+    secp256k1_context_destroy(m_context);\n+    memset(m_shared_secret, 0, sizeof(m_shared_secret));\n+    memset(m_recipient_x_only_public_key.data, 0, sizeof(m_recipient_x_only_public_key.data));\n+}\n+\n+XOnlyPubKey Sender::Tweak(const int32_t& identifier)\n+{\n+    unsigned char shared_secret[32];\n+    memcpy(shared_secret, m_shared_secret, 32);\n+    assert(memcmp(shared_secret, m_shared_secret, 32) == 0);\n+\n+    // Add the identifier to the shared_secret\n+    arith_uint256 tweak;\n+    tweak = tweak + identifier;\n+\n+    int return_val = secp256k1_ec_seckey_tweak_add(m_context, shared_secret, ArithToUint256(tweak).data());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992298635",
      "id" : 992298635,
      "line" : 41,
      "node_id" : "PRRC_kwDOABII5847JUaL",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 41,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/wallet/silentpayment.cpp",
      "position" : 41,
      "pull_request_review_id" : 1137407003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992298635/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-11T13:29:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992298635",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992299985"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992299985"
         }
      },
      "author_association" : "MEMBER",
      "body" : "47cc799b9518c13d96fde5a7de050b8a0cd41e4c\r\n```suggestion\r\n    return !rawTrKeys.empty();\r\n```",
      "commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "created_at" : "2022-10-11T13:03:59Z",
      "diff_hunk" : "@@ -1096,70 +1133,296 @@ bool CWallet::LoadToWallet(const uint256& hash, const UpdateWalletTxFn& fill_wtx\n     return true;\n }\n \n-bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxState& state, bool fUpdate, bool rescanning_old_block)\n+bool CWallet::HandleNewTxBelongingToMe(const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block)\n {\n-    const CTransaction& tx = *ptx;\n-    {\n-        AssertLockHeld(cs_wallet);\n-\n-        if (auto* conf = std::get_if<TxStateConfirmed>(&state)) {\n-            for (const CTxIn& txin : tx.vin) {\n-                std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n-                while (range.first != range.second) {\n-                    if (range.first->second != tx.GetHash()) {\n-                        WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), conf->confirmed_block_hash.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n-                        MarkConflicted(conf->confirmed_block_hash, conf->confirmed_block_height, range.first->second);\n-                    }\n-                    range.first++;\n+    AssertLockHeld(cs_wallet);\n+\n+    /* Check if any keys in the wallet keypool that were supposed to be unused\n+        * have appeared in a new transaction. If so, remove those keys from the keypool.\n+        * This can happen when restoring an old wallet backup that does not contain\n+        * the mostly recently created transactions from newer versions of the wallet.\n+        */\n+\n+    // loop though all outputs\n+    for (const CTxOut& txout: tx.vout) {\n+        for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n+            for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n+                // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n+                if (!dest.internal.has_value()) {\n+                    dest.internal = IsInternalScriptPubKeyMan(spk_man);\n+                }\n+\n+                // skip if can't determine whether it's a receiving address or not\n+                if (!dest.internal.has_value()) continue;\n+\n+                // If this is a receiving address and it's not in the address book yet\n+                // (e.g. it wasn't generated on this node or we're restoring from backup)\n+                // add it to the address book for proper transaction accounting\n+                if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n+                    SetAddressBook(dest.dest, \"\", \"receive\");\n                 }\n             }\n         }\n+    }\n \n-        bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n-        if (fExisted && !fUpdate) return false;\n-        if (fExisted || IsMine(tx) || IsFromMe(tx))\n-        {\n-            /* Check if any keys in the wallet keypool that were supposed to be unused\n-             * have appeared in a new transaction. If so, remove those keys from the keypool.\n-             * This can happen when restoring an old wallet backup that does not contain\n-             * the mostly recently created transactions from newer versions of the wallet.\n-             */\n-\n-            // loop though all outputs\n-            for (const CTxOut& txout: tx.vout) {\n-                for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n-                    for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n-                        // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n-                        if (!dest.internal.has_value()) {\n-                            dest.internal = IsInternalScriptPubKeyMan(spk_man);\n-                        }\n+    // Block disconnection override an abandoned tx as unconfirmed\n+    // which means user may have to call abandontransaction again\n+    TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n+    CWalletTx* wtx = AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n+    if (!wtx) {\n+        // Can only be nullptr if there was a db write error (missing db, read-only db or a db engine internal writing error).\n+        // As we only store arriving transaction in this process, and we don't want an inconsistent state, let's throw an error.\n+        throw std::runtime_error(\"DB error adding transaction to wallet, write failed\");\n+    }\n+    return true;\n+}\n \n-                        // skip if can't determine whether it's a receiving address or not\n-                        if (!dest.internal.has_value()) continue;\n+bool CWallet::AddSilentScriptKeyMan(\n+    const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block, const std::vector<std::tuple<CKey, int32_t>>& rawTrKeys)\n+{\n+    WalletLogPrintf(\"Silent Transaction identified: %s.\\n\", tx.GetHash().ToString());\n \n-                        // If this is a receiving address and it's not in the address book yet\n-                        // (e.g. it wasn't generated on this node or we're restoring from backup)\n-                        // add it to the address book for proper transaction accounting\n-                        if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n-                            SetAddressBook(dest.dest, \"\", \"receive\");\n-                        }\n-                    }\n+    for(auto& identifier_key: rawTrKeys) {\n+\n+        CKey key = std::get<0>(identifier_key);\n+        int32_t identifier = std::get<1>(identifier_key);\n+\n+        std::string desc = \"rawtr(\" + EncodeSecret(key) + \")\";\n+        std::string checksum = GetDescriptorChecksum(desc);\n+\n+        auto timestamp = std::chrono::duration_cast<std::chrono::microseconds>(\n+            std::chrono::system_clock::now().time_since_epoch()).count();\n+\n+        std::string desc_check = desc + \"#\" + checksum;\n+\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(desc_check, keys, error, /* require_checksum = */ true);\n+        assert(parsed_desc);\n+\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+\n+        // Need to ExpandPrivate to check if private keys are available for all pubkeys\n+        FlatSigningProvider expand_keys;\n+        std::vector<CScript> scripts;\n+        assert(parsed_desc->Expand(0, keys, scripts, expand_keys));\n+        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        std::string label;\n+\n+        if (m_silent_address_book.count(identifier)) {\n+            auto entry = m_silent_address_book[identifier];\n+            label = entry.m_label;\n+        } else {\n+            std::stringstream ss;\n+            ss << identifier;\n+            label = ss.str();\n+        }\n+\n+        auto existing_spk_manager = GetDescriptorScriptPubKeyMan(w_desc);\n+        if (!existing_spk_manager) {\n+            auto spk_manager = AddWalletDescriptor(w_desc, keys, label, false);\n+            assert(spk_manager != nullptr);\n+        }\n+    }\n+\n+    return HandleNewTxBelongingToMe(tx, state, rescanning_old_block);\n+}\n+\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxState& state, bool fUpdate, bool rescanning_old_block)\n+{\n+    const CTransaction& tx = *ptx;\n+\n+    AssertLockHeld(cs_wallet);\n+\n+    std::vector<std::tuple<CKey, int32_t>> rawTrKeys;\n+\n+    if (auto* conf = std::get_if<TxStateConfirmed>(&state)) {\n+        for (const CTxIn& txin : tx.vin) {\n+            std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n+            while (range.first != range.second) {\n+                if (range.first->second != tx.GetHash()) {\n+                    WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), conf->confirmed_block_hash.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n+                    MarkConflicted(conf->confirmed_block_hash, conf->confirmed_block_height, range.first->second);\n                 }\n+                range.first++;\n             }\n+        }\n+    }\n \n-            // Block disconnection override an abandoned tx as unconfirmed\n-            // which means user may have to call abandontransaction again\n-            TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n-            CWalletTx* wtx = AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n-            if (!wtx) {\n-                // Can only be nullptr if there was a db write error (missing db, read-only db or a db engine internal writing error).\n-                // As we only store arriving transaction in this process, and we don't want an inconsistent state, let's throw an error.\n-                throw std::runtime_error(\"DB error adding transaction to wallet, write failed\");\n-            }\n-            return true;\n+    bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n+    if (fExisted && !fUpdate) return false;\n+\n+    bool ret = (fExisted || IsMine(tx) || IsFromMe(tx)) ? HandleNewTxBelongingToMe(tx, state, rescanning_old_block) : false;\n+    if (IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENT) && VerifySilentPayment(tx, rawTrKeys)) {\n+        ret = AddSilentScriptKeyMan(tx, state, rescanning_old_block, rawTrKeys) || ret;\n+    }\n+    return ret;\n+}\n+\n+bool CWallet::ExtractPubkeyFromInput(const CTxIn& txin, XOnlyPubKey& senderPubKey)\n+{\n+    // Find the UTXO being spent in UTXO Set to learn the transaction type\n+    std::map<COutPoint, Coin> coins;\n+    coins[txin.prevout];\n+    chain().findCoins(coins);\n+\n+    auto pos = coins.find(txin.prevout);\n+\n+    Coin coin = pos->second;\n+\n+    // TODO: can more than one txin.prevout be in the mempool (RBF) ?\n+    pos++;\n+    assert( pos == coins.end() );\n+\n+    if (coin.out.IsNull()) {\n+        return false;\n+    }\n+\n+    // scriptPubKey being spent by this input\n+    CScript scriptPubKey = coin.out.scriptPubKey;\n+\n+    if (scriptPubKey.IsPayToWitnessScriptHash()) {\n+        return false;\n+    }\n+\n+    // Vector of parsed pubkeys and hashes\n+    std::vector<std::vector<unsigned char>> solutions;\n+\n+    TxoutType whichType = Solver(scriptPubKey, solutions);\n+\n+    if (whichType == TxoutType::NONSTANDARD ||\n+    whichType == TxoutType::MULTISIG ||\n+    whichType == TxoutType::WITNESS_UNKNOWN ) {\n+        return false;\n+    }\n+\n+    const CScript scriptSig = txin.scriptSig;\n+    const CScriptWitness scriptWitness = txin.scriptWitness;\n+\n+    assert(senderPubKey.IsNull());\n+\n+    // TODO: Condition not tested\n+    if (whichType == TxoutType::PUBKEY) {\n+\n+        CPubKey pubkey = CPubKey(solutions[0]);\n+        assert(pubkey.IsFullyValid());\n+        senderPubKey = XOnlyPubKey(pubkey);\n+\n+    }\n+\n+    else if (whichType == TxoutType::PUBKEYHASH) {\n+\n+        int sigSize = static_cast<int>(scriptSig[0]);\n+        int pubKeySize = static_cast<int>(scriptSig[sigSize + 1]);\n+        auto serializedPubKey = std::vector<unsigned char>(scriptSig.begin() + sigSize + 2, scriptSig.end());\n+        assert(serializedPubKey.size() == (size_t) pubKeySize);\n+\n+        CPubKey pubkey = CPubKey(serializedPubKey);\n+        assert(pubkey.IsFullyValid());\n+\n+        senderPubKey = XOnlyPubKey(pubkey);\n+\n+    }\n+\n+    else if (whichType == TxoutType::WITNESS_V0_KEYHASH || scriptPubKey.IsPayToScriptHash()) {\n+        if (scriptWitness.stack.size() != 2) return false;\n+        assert(scriptWitness.stack.at(1).size() == 33);\n+\n+        CPubKey pubkey = CPubKey(scriptWitness.stack.at(1));\n+        assert(pubkey.IsFullyValid());\n+\n+        senderPubKey = XOnlyPubKey(pubkey);\n+    }\n+\n+    else if (whichType == TxoutType::WITNESS_V1_TAPROOT) {\n+\n+        senderPubKey = XOnlyPubKey(solutions[0]);\n+        assert(senderPubKey.IsFullyValid());\n+    }\n+\n+    CTxDestination address;\n+    ExtractDestination(scriptPubKey, address);\n+\n+    return true;\n+}\n+\n+bool CWallet::VerifySilentPayment(const CTransaction& tx, std::vector<std::tuple<CKey, int32_t>>& rawTrKeys)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (tx.IsCoinBase() || tx.vin.empty()) return false;\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return false;\n+\n+    std::vector<std::tuple<CScript, XOnlyPubKey>> outputPubKeys;\n+\n+    for (auto& vout : tx.vout) {\n+\n+        if (IsMine(vout)) {\n+            continue;\n         }\n+\n+        std::vector<std::vector<unsigned char>> solutions;\n+        TxoutType whichType = Solver(vout.scriptPubKey, solutions);\n+\n+        // Silent Payments require that the recipients use Taproot address\n+        if (whichType != TxoutType::WITNESS_V1_TAPROOT) {\n+            continue;\n+        }\n+\n+        auto xOnlyPubKey = XOnlyPubKey(solutions[0]);\n+\n+        assert(xOnlyPubKey.IsFullyValid());\n+\n+        outputPubKeys.emplace_back(vout.scriptPubKey, xOnlyPubKey);\n     }\n-    return false;\n+\n+    if (outputPubKeys.empty()) {\n+        return false;\n+    }\n+\n+    std::vector<XOnlyPubKey> sender_pubkeys;\n+\n+    for (const CTxIn& txin : tx.vin) {\n+        auto senderPubKey = XOnlyPubKey();\n+\n+        if (!ExtractPubkeyFromInput(txin, senderPubKey)) {\n+            continue;\n+        }\n+\n+        assert(senderPubKey.IsFullyValid());\n+\n+        sender_pubkeys.push_back(senderPubKey);\n+    }\n+\n+    XOnlyPubKey sum_sender_pubkeys;\n+\n+    if (sender_pubkeys.empty() || sender_pubkeys.size() != tx.vin.size()) {\n+        if (!m_chain->getSilentTransactionFirstInputPubKey(tx.GetHash(), sum_sender_pubkeys)) {\n+            return false;\n+        }\n+    } else {\n+        sum_sender_pubkeys = silentpayment::Recipient::SumXOnlyPublicKeys(sender_pubkeys);\n+    }\n+\n+    for (ScriptPubKeyMan* spkm : GetActiveScriptPubKeyMans()) {\n+        DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+\n+        std::string desc_str;\n+        bool res_get_desc = desc_spkm->GetDescriptorString(desc_str, false);\n+\n+        // There must be only one SP descriptor\n+        if (res_get_desc && desc_str.rfind(\"sp(\", 0) != 0) {\n+            continue;\n+        }\n+\n+        rawTrKeys = desc_spkm->VerifySilentPaymentAddress(outputPubKeys, sum_sender_pubkeys);\n+    }\n+\n+    return rawTrKeys.size() > 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992299985",
      "id" : 992299985,
      "line" : 1425,
      "node_id" : "PRRC_kwDOABII5847JUvR",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 1425,
      "original_position" : 421,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 421,
      "pull_request_review_id" : 1137407003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992299985/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-11T13:29:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992299985",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992302969"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992302969"
         }
      },
      "author_association" : "MEMBER",
      "body" : "60537b92b0f27cab91fbb61da0d195197146bff6\r\nI believe this can be made `const`",
      "commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "created_at" : "2022-10-11T13:06:39Z",
      "diff_hunk" : "@@ -0,0 +1,209 @@\n+#include <wallet/silentpayment.h>\n+\n+#include <key_io.h>\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+#include <secp256k1_extrakeys.h>\n+#include <arith_uint256.h>\n+\n+namespace silentpayment {\n+\n+Sender::Sender(const CKey sender_secret_key, const XOnlyPubKey recipient_x_only_public_key)\n+{\n+    m_context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    // Parse the recipient's XOnlyPubKey to secp256k1_xonly_pubkey\n+    int return_val = secp256k1_xonly_pubkey_parse(m_context, &m_recipient_x_only_public_key, recipient_x_only_public_key.data());\n+    assert(return_val);\n+\n+    // Create the shared secret using the recipient's x-only pubkey and the sender' secret key\n+    return_val = secp256k1_ecdh_xonly(m_context, m_shared_secret, &m_recipient_x_only_public_key, sender_secret_key.begin(), nullptr, nullptr);\n+    assert(return_val);\n+}\n+\n+Sender::~Sender()\n+{\n+    secp256k1_context_destroy(m_context);\n+    memset(m_shared_secret, 0, sizeof(m_shared_secret));\n+    memset(m_recipient_x_only_public_key.data, 0, sizeof(m_recipient_x_only_public_key.data));\n+}\n+\n+XOnlyPubKey Sender::Tweak(const int32_t& identifier)\n+{\n+    unsigned char shared_secret[32];\n+    memcpy(shared_secret, m_shared_secret, 32);\n+    assert(memcmp(shared_secret, m_shared_secret, 32) == 0);\n+\n+    // Add the identifier to the shared_secret\n+    arith_uint256 tweak;\n+    tweak = tweak + identifier;\n+\n+    int return_val = secp256k1_ec_seckey_tweak_add(m_context, shared_secret, ArithToUint256(tweak).data());\n+\n+    // Tweak the recipient's x-only pubkey with identifier + shared_secret\n+    secp256k1_pubkey output_pubkey;\n+\n+    return_val = secp256k1_xonly_pubkey_tweak_add(m_context, &output_pubkey, &m_recipient_x_only_public_key, shared_secret);\n+    assert(return_val);\n+\n+    // Serialize and test the tweaked public key\n+    size_t len;\n+    unsigned char sender_serialized_output_pubkey[33];\n+    len = sizeof(sender_serialized_output_pubkey);\n+    return_val = secp256k1_ec_pubkey_serialize(m_context, sender_serialized_output_pubkey, &len, &output_pubkey, SECP256K1_EC_COMPRESSED);\n+    assert(return_val);\n+\n+    CPubKey pubKey = CPubKey(sender_serialized_output_pubkey);\n+\n+    assert(pubKey.IsFullyValid());\n+\n+    return XOnlyPubKey(pubKey);\n+}\n+\n+CKey Sender::SumPrivateKeys(const std::vector<CKey>& sender_secret_keys)\n+{\n+    auto context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    assert(!sender_secret_keys.empty());\n+\n+    const auto& first_seckey{sender_secret_keys.at(0)};\n+\n+    unsigned char seckey[32];\n+    memcpy(seckey, first_seckey.data(), 32);\n+    assert(memcmp(seckey, first_seckey.data(), 32) == 0);\n+\n+    if (first_seckey.GetPubKey()[0] == 3) {\n+        int return_val = secp256k1_ec_seckey_negate(context, seckey);\n+        assert(return_val);\n+    }\n+\n+    if (sender_secret_keys.size() > 1) {\n+        for (size_t i = 1; i < sender_secret_keys.size(); i++) {\n+\n+            const auto& sender_seckey{sender_secret_keys.at(i)};\n+\n+            unsigned char seckey_i[32];\n+            memcpy(seckey_i, sender_seckey.begin(), 32);\n+            assert(memcmp(seckey_i, sender_seckey.begin(), 32) == 0);\n+\n+            if (sender_seckey.GetPubKey()[0] == 3) {\n+                int return_val = secp256k1_ec_seckey_negate(context, seckey_i);\n+                assert(return_val);\n+            }\n+\n+            int return_val = secp256k1_ec_seckey_tweak_add(context, seckey, seckey_i);\n+            assert(return_val);\n+        }\n+    }\n+\n+\n+\n+    CKey ckey;\n+    ckey.Set(std::begin(seckey), std::end(seckey), true);\n+\n+    secp256k1_context_destroy(context);\n+    memset(seckey, 0, sizeof(seckey));\n+\n+    return ckey;\n+}\n+\n+Recipient::Recipient(const CKey& recipient_secret_key, const XOnlyPubKey& sender_x_only_public_key)\n+{\n+    m_context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    int return_val = secp256k1_keypair_create(m_context, &m_recipient_keypair, recipient_secret_key.begin());\n+    assert(return_val);\n+\n+    secp256k1_xonly_pubkey parsed_sender_x_only_public_key;\n+    return_val = secp256k1_xonly_pubkey_parse(m_context, &parsed_sender_x_only_public_key, sender_x_only_public_key.data());\n+    assert(return_val);\n+\n+    return_val = secp256k1_ecdh_xonly(m_context, m_shared_secret, &parsed_sender_x_only_public_key, recipient_secret_key.begin(), nullptr, nullptr);\n+    assert(return_val);\n+\n+    return_val = secp256k1_ec_seckey_verify(secp256k1_context_no_precomp, m_shared_secret);\n+    assert(return_val);\n+}\n+\n+Recipient::~Recipient()\n+{\n+    secp256k1_context_destroy(m_context);\n+    memset(m_shared_secret, 0, sizeof(m_shared_secret));\n+    memset(m_recipient_keypair.data, 0, sizeof(m_recipient_keypair.data));\n+}\n+\n+CKey Recipient::Tweak(const int32_t& identifier)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992302969",
      "id" : 992302969,
      "line" : 135,
      "node_id" : "PRRC_kwDOABII5847JVd5",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 135,
      "original_position" : 135,
      "original_start_line" : null,
      "path" : "src/wallet/silentpayment.cpp",
      "position" : 135,
      "pull_request_review_id" : 1137407003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992302969/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-11T13:29:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992302969",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992877199"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877199"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/301481648aa20f8a8ebd7d868a1a63300cb6ab3e.",
      "commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "created_at" : "2022-10-12T00:26:29Z",
      "diff_hunk" : "@@ -0,0 +1,229 @@\n+#include <index/silentpaymentindex.h>\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/disktxpos.h>\n+#include <node/blockstorage.h>\n+#include <pubkey.h>\n+#include <undo.h>\n+#include <util/system.h>\n+#include <validation.h>\n+#include <wallet/silentpayment.h>\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+\n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n+\n+constexpr uint8_t DB_SILENTPAYMENTINDEX{'s'};\n+\n+std::unique_ptr<SilentPaymentIndex> g_silentpaymentindex;\n+\n+/** Access to the silent payment index database (indexes/silentpaymentindex/) */\n+class SilentPaymentIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    bool WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items);\n+};\n+\n+SilentPaymentIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"silentpaymentindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool SilentPaymentIndex::DB::WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& [tx_hash, keydata] : items) {\n+        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tx_hash), keydata);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+SilentPaymentIndex::SilentPaymentIndex(std::unique_ptr<interfaces::Chain> chain, size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : BaseIndex(std::move(chain), \"silentpaymentindex\"), m_db(std::make_unique<SilentPaymentIndex::DB>(n_cache_size, f_memory, f_wipe))\n+{}\n+\n+SilentPaymentIndex::~SilentPaymentIndex() {}\n+\n+bool SilentPaymentIndex::ExtractPubkeyFromInput(const Coin& prevCoin, const CTxIn& txin,  XOnlyPubKey& senderPubKey) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992877199",
      "id" : 992877199,
      "in_reply_to_id" : 992270270,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5847LhqP",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 51,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/index/silentpaymentindex.cpp",
      "position" : null,
      "pull_request_review_id" : 1138290329,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877199/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-12T00:26:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877199",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992877381"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877381"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/eeb7942bb2c41beb063fcbaa7d36cfd02de7ea04.",
      "commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "created_at" : "2022-10-12T00:26:51Z",
      "diff_hunk" : "@@ -1092,6 +1093,87 @@ std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, Fl\n     return ret;\n }\n \n+std::tuple<std::string, std::pair<int64_t, int64_t>> EvalDescriptorStringOrObject(const UniValue& scanobject)\n+{\n+    std::string desc_str;\n+    std::pair<int64_t, int64_t> range = {0, 1000};\n+    if (scanobject.isStr()) {\n+        desc_str = scanobject.get_str();\n+    } else if (scanobject.isObject()) {\n+        UniValue desc_uni = find_value(scanobject, \"desc\");\n+        if (desc_uni.isNull()) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor needs to be provided in scan object\");\n+        desc_str = desc_uni.get_str();\n+\n+        bool is_sp_desc = (desc_str.rfind(\"sp(\", 0) == 0);\n+\n+        if (is_sp_desc) {\n+            range = {0, wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER};\n+        }\n+\n+        UniValue range_uni = find_value(scanobject, \"range\");\n+        if (!range_uni.isNull()) {\n+            range = ParseDescriptorRange(range_uni);\n+        }\n+\n+        if (is_sp_desc && range.second > wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER) {\n+            std::stringstream ss;\n+            ss << wallet::SILENT_ADDRESS_MAXIMUM_IDENTIFIER;\n+\n+            throw JSONRPCError(RPC_INVALID_PARAMETER,\n+                \"End of range is too high. The maximum allowed for silent payment descriptors is \" + ss.str());\n+        }\n+\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan object needs to be either a string or an object\");\n+    }\n+\n+    return {desc_str, range};\n+}\n+\n+std::vector<CScript> DescriptorToScripts(const std::string& desc_str, std::pair<int64_t, int64_t> range, FlatSigningProvider& provider)\n+{\n+    std::string error;\n+    auto desc = Parse(desc_str, provider, error);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+    }\n+    if (!desc->IsRange()) {\n+        range.first = 0;\n+        range.second = 0;\n+    }\n+    std::vector<CScript> ret;\n+    for (int i = range.first; i <= range.second; ++i) {\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(i, provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys: '%s'\", desc_str));\n+        }\n+        std::move(scripts.begin(), scripts.end(), std::back_inserter(ret));\n+    }\n+    return ret;\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992877381",
      "id" : 992877381,
      "in_reply_to_id" : 992281752,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5847LhtF",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 1136,
      "original_position" : 69,
      "original_start_line" : 1133,
      "path" : "src/rpc/util.cpp",
      "position" : null,
      "pull_request_review_id" : 1138290514,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877381/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-12T00:26:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877381",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992877487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877487"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/2aa1a6957296f06e1215256a9c20c37f4b4e6273.",
      "commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "created_at" : "2022-10-12T00:27:13Z",
      "diff_hunk" : "@@ -76,30 +95,35 @@ class DestinationEncoder\n     std::string operator()(const CNoDestination& no) const { return {}; }\n };\n \n-CTxDestination DecodeDestination(const std::string& str, const CChainParams& params, std::string& error_str, std::vector<int>* error_locations)\n+std::tuple<CTxDestination,bool,int32_t> DecodeDestination(const std::string& str, const CChainParams& params, std::string& error_str, std::vector<int>* error_locations)\n {\n     std::vector<unsigned char> data;\n     uint160 hash;\n     error_str = \"\";\n+    bool silent_payment{false};\n+\n+    const auto& silent_payment_hrp = params.SilentPaymentHRP();\n+    auto dest_silent_payment_hrp = ToLower(std::string_view(str).substr(0, params.SilentPaymentHRP().size()));\n \n     // Note this will be false if it is a valid Bech32 address for a different network\n-    bool is_bech32 = (ToLower(str.substr(0, params.Bech32HRP().size())) == params.Bech32HRP());\n+    bool is_bech32_or_sp = (ToLower(str.substr(0, params.Bech32HRP().size())) == params.Bech32HRP()) ||\n+        dest_silent_payment_hrp == silent_payment_hrp;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992877487",
      "id" : 992877487,
      "in_reply_to_id" : 992287719,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5847Lhuv",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 110,
      "original_position" : 68,
      "original_start_line" : 109,
      "path" : "src/key_io.cpp",
      "position" : null,
      "pull_request_review_id" : 1138290677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877487/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-12T00:27:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877487",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992877604"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877604"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/486317926ed7ca47374ea802022dbdde17af0100.",
      "commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "created_at" : "2022-10-12T00:27:35Z",
      "diff_hunk" : "@@ -1214,17 +1214,29 @@ RPCHelpMan send()\n             InterpretFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n             PreventOutdatedOptions(options);\n \n+            std::vector<SilentTxOut> silent_payment_vouts;\n \n             CAmount fee;\n             int change_position;\n             bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n-            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf, &silent_payment_vouts);\n+\n+            if (silent_payment_vouts.size() > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992877604",
      "id" : 992877604,
      "in_reply_to_id" : 992288336,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5847Lhwk",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 1224,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1138290832,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877604/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-12T00:27:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877604",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992877736"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877736"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/c3e3002cf9b70f8b54f5e344277ad0864c555f5c.",
      "commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "created_at" : "2022-10-12T00:27:56Z",
      "diff_hunk" : "@@ -2620,6 +2640,87 @@ bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKe\n     return true;\n }\n \n+bool DescriptorScriptPubKeyMan::GetPrivKeyForSilentPayment(const CScript scriptPubKey, CKey& privKey, bool onlyTaproot)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992877736",
      "id" : 992877736,
      "in_reply_to_id" : 992289528,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5847Lhyo",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 2643,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : null,
      "pull_request_review_id" : 1138291007,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877736/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-12T00:27:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877736",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992877821"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877821"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/c3e3002cf9b70f8b54f5e344277ad0864c555f5c.",
      "commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "created_at" : "2022-10-12T00:28:12Z",
      "diff_hunk" : "@@ -2620,6 +2640,87 @@ bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKe\n     return true;\n }\n \n+bool DescriptorScriptPubKeyMan::GetPrivKeyForSilentPayment(const CScript scriptPubKey, CKey& privKey, bool onlyTaproot)\n+{\n+    std::vector<std::vector<unsigned char>> solutions;\n+    TxoutType whichType = Solver(scriptPubKey, solutions);\n+\n+    std::unique_ptr<FlatSigningProvider> coin_keys = GetSigningProvider(scriptPubKey, true);\n+    if (!coin_keys || coin_keys->keys.size() != 1) {\n+        return false;\n+    }\n+\n+    auto& key = *coin_keys->keys.begin();\n+\n+    // Tweak the private key as GetSigningProvider returns the original key.\n+    // Taproot addresses / scriptPubKeys use tweaked public key, not the original key.\n+    if (whichType == TxoutType::WITNESS_V1_TAPROOT) {\n+        auto pubKeyFromScriptPubKey = XOnlyPubKey(solutions[0]);\n+\n+        // this means it is a \"rawtr\" output\n+        if (XOnlyPubKey(key.second.GetPubKey()) == pubKeyFromScriptPubKey) {\n+            privKey = key.second;\n+            return true;\n+        }\n+\n+        TaprootSpendData spenddata;\n+        coin_keys->GetTaprootSpendData(pubKeyFromScriptPubKey, spenddata);\n+\n+        if(!key.second.TweakCKey(&spenddata.merkle_root, privKey)) return false;\n+\n+        assert(XOnlyPubKey(privKey.GetPubKey()) ==  pubKeyFromScriptPubKey);\n+    } else if (onlyTaproot) {\n+        return false;\n+    } else if (whichType == TxoutType::NONSTANDARD || whichType == TxoutType::MULTISIG || whichType == TxoutType::WITNESS_UNKNOWN ) {\n+        return false;\n+    } else {\n+        privKey = key.second;\n+    }\n+\n+    return true;\n+}\n+\n+std::vector<std::tuple<CKey, int32_t>> DescriptorScriptPubKeyMan::VerifySilentPaymentAddress(\n+    std::vector<std::tuple<CScript, XOnlyPubKey>>& tx_output_pub_keys,\n+    XOnlyPubKey& sender_pub_key)\n+{\n+    LOCK(cs_desc_man);\n+\n+    std::vector<std::tuple<CKey, int32_t>> raw_tr_keys;\n+\n+    std::vector<CKey> priv_keys;\n+\n+    for (auto& [_, priv_key] : m_map_keys) {\n+        priv_keys.push_back(priv_key);\n+    }\n+\n+    assert(priv_keys.size() == 1);\n+\n+    CKey priv_key = priv_keys.at(0);\n+\n+    for(auto& pub_key_items : tx_output_pub_keys) {\n+\n+        CScript& outputScriptPubKey = std::get<0>(pub_key_items);\n+        XOnlyPubKey& outputPubKey = std::get<1>(pub_key_items);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992877821",
      "id" : 992877821,
      "in_reply_to_id" : 992290706,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5847Lhz9",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 2704,
      "original_position" : 126,
      "original_start_line" : 2701,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : null,
      "pull_request_review_id" : 1138291125,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877821/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-12T00:28:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877821",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992877916"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877916"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/c3e3002cf9b70f8b54f5e344277ad0864c555f5c.",
      "commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "created_at" : "2022-10-12T00:28:28Z",
      "diff_hunk" : "@@ -2620,6 +2640,87 @@ bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKe\n     return true;\n }\n \n+bool DescriptorScriptPubKeyMan::GetPrivKeyForSilentPayment(const CScript scriptPubKey, CKey& privKey, bool onlyTaproot)\n+{\n+    std::vector<std::vector<unsigned char>> solutions;\n+    TxoutType whichType = Solver(scriptPubKey, solutions);\n+\n+    std::unique_ptr<FlatSigningProvider> coin_keys = GetSigningProvider(scriptPubKey, true);\n+    if (!coin_keys || coin_keys->keys.size() != 1) {\n+        return false;\n+    }\n+\n+    auto& key = *coin_keys->keys.begin();\n+\n+    // Tweak the private key as GetSigningProvider returns the original key.\n+    // Taproot addresses / scriptPubKeys use tweaked public key, not the original key.\n+    if (whichType == TxoutType::WITNESS_V1_TAPROOT) {\n+        auto pubKeyFromScriptPubKey = XOnlyPubKey(solutions[0]);\n+\n+        // this means it is a \"rawtr\" output\n+        if (XOnlyPubKey(key.second.GetPubKey()) == pubKeyFromScriptPubKey) {\n+            privKey = key.second;\n+            return true;\n+        }\n+\n+        TaprootSpendData spenddata;\n+        coin_keys->GetTaprootSpendData(pubKeyFromScriptPubKey, spenddata);\n+\n+        if(!key.second.TweakCKey(&spenddata.merkle_root, privKey)) return false;\n+\n+        assert(XOnlyPubKey(privKey.GetPubKey()) ==  pubKeyFromScriptPubKey);\n+    } else if (onlyTaproot) {\n+        return false;\n+    } else if (whichType == TxoutType::NONSTANDARD || whichType == TxoutType::MULTISIG || whichType == TxoutType::WITNESS_UNKNOWN ) {\n+        return false;\n+    } else {\n+        privKey = key.second;\n+    }\n+\n+    return true;\n+}\n+\n+std::vector<std::tuple<CKey, int32_t>> DescriptorScriptPubKeyMan::VerifySilentPaymentAddress(\n+    std::vector<std::tuple<CScript, XOnlyPubKey>>& tx_output_pub_keys,\n+    XOnlyPubKey& sender_pub_key)\n+{\n+    LOCK(cs_desc_man);\n+\n+    std::vector<std::tuple<CKey, int32_t>> raw_tr_keys;\n+\n+    std::vector<CKey> priv_keys;\n+\n+    for (auto& [_, priv_key] : m_map_keys) {\n+        priv_keys.push_back(priv_key);\n+    }\n+\n+    assert(priv_keys.size() == 1);\n+\n+    CKey priv_key = priv_keys.at(0);\n+\n+    for(auto& pub_key_items : tx_output_pub_keys) {\n+\n+        CScript& outputScriptPubKey = std::get<0>(pub_key_items);\n+        XOnlyPubKey& outputPubKey = std::get<1>(pub_key_items);\n+\n+        silentpayment::Recipient silent_sender{silentpayment::Recipient(priv_key, sender_pub_key)};\n+\n+        for (int32_t identifier = 0; identifier <= m_wallet_descriptor.next_index; identifier++) {\n+            CKey silKey = silent_sender.Tweak(identifier);\n+            XOnlyPubKey silPubKey{XOnlyPubKey(silKey.GetPubKey())};\n+\n+            if (silPubKey == outputPubKey) {\n+                raw_tr_keys.push_back({silKey, identifier});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992877916",
      "id" : 992877916,
      "in_reply_to_id" : 992291843,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5847Lh1c",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 2713,
      "original_position" : 135,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : null,
      "pull_request_review_id" : 1138291249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877916/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-12T00:28:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992877916",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992878015"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992878015"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/fb014fefff60d87cf21f220fa756aa449bd6daf4.",
      "commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "created_at" : "2022-10-12T00:28:47Z",
      "diff_hunk" : "@@ -0,0 +1,209 @@\n+#include <wallet/silentpayment.h>\n+\n+#include <key_io.h>\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+#include <secp256k1_extrakeys.h>\n+#include <arith_uint256.h>\n+\n+namespace silentpayment {\n+\n+Sender::Sender(const CKey sender_secret_key, const XOnlyPubKey recipient_x_only_public_key)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992878015",
      "id" : 992878015,
      "in_reply_to_id" : 992293148,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5847Lh2_",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 11,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/wallet/silentpayment.cpp",
      "position" : null,
      "pull_request_review_id" : 1138291414,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992878015/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-12T00:28:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992878015",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992878068"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992878068"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/fb014fefff60d87cf21f220fa756aa449bd6daf4.",
      "commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "created_at" : "2022-10-12T00:28:58Z",
      "diff_hunk" : "@@ -0,0 +1,209 @@\n+#include <wallet/silentpayment.h>\n+\n+#include <key_io.h>\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+#include <secp256k1_extrakeys.h>\n+#include <arith_uint256.h>\n+\n+namespace silentpayment {\n+\n+Sender::Sender(const CKey sender_secret_key, const XOnlyPubKey recipient_x_only_public_key)\n+{\n+    m_context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    // Parse the recipient's XOnlyPubKey to secp256k1_xonly_pubkey\n+    int return_val = secp256k1_xonly_pubkey_parse(m_context, &m_recipient_x_only_public_key, recipient_x_only_public_key.data());\n+    assert(return_val);\n+\n+    // Create the shared secret using the recipient's x-only pubkey and the sender' secret key\n+    return_val = secp256k1_ecdh_xonly(m_context, m_shared_secret, &m_recipient_x_only_public_key, sender_secret_key.begin(), nullptr, nullptr);\n+    assert(return_val);\n+}\n+\n+Sender::~Sender()\n+{\n+    secp256k1_context_destroy(m_context);\n+    memset(m_shared_secret, 0, sizeof(m_shared_secret));\n+    memset(m_recipient_x_only_public_key.data, 0, sizeof(m_recipient_x_only_public_key.data));\n+}\n+\n+XOnlyPubKey Sender::Tweak(const int32_t& identifier)\n+{\n+    unsigned char shared_secret[32];\n+    memcpy(shared_secret, m_shared_secret, 32);\n+    assert(memcmp(shared_secret, m_shared_secret, 32) == 0);\n+\n+    // Add the identifier to the shared_secret\n+    arith_uint256 tweak;\n+    tweak = tweak + identifier;\n+\n+    int return_val = secp256k1_ec_seckey_tweak_add(m_context, shared_secret, ArithToUint256(tweak).data());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992878068",
      "id" : 992878068,
      "in_reply_to_id" : 992298635,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5847Lh30",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 41,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "src/wallet/silentpayment.cpp",
      "position" : null,
      "pull_request_review_id" : 1138291489,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992878068/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-12T00:28:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992878068",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992878159"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992878159"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/pull/24897/commits/43503e2ae6a462472f8ede023d6682cff99dd60d.",
      "commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "created_at" : "2022-10-12T00:29:16Z",
      "diff_hunk" : "@@ -1096,70 +1133,296 @@ bool CWallet::LoadToWallet(const uint256& hash, const UpdateWalletTxFn& fill_wtx\n     return true;\n }\n \n-bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxState& state, bool fUpdate, bool rescanning_old_block)\n+bool CWallet::HandleNewTxBelongingToMe(const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block)\n {\n-    const CTransaction& tx = *ptx;\n-    {\n-        AssertLockHeld(cs_wallet);\n-\n-        if (auto* conf = std::get_if<TxStateConfirmed>(&state)) {\n-            for (const CTxIn& txin : tx.vin) {\n-                std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n-                while (range.first != range.second) {\n-                    if (range.first->second != tx.GetHash()) {\n-                        WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), conf->confirmed_block_hash.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n-                        MarkConflicted(conf->confirmed_block_hash, conf->confirmed_block_height, range.first->second);\n-                    }\n-                    range.first++;\n+    AssertLockHeld(cs_wallet);\n+\n+    /* Check if any keys in the wallet keypool that were supposed to be unused\n+        * have appeared in a new transaction. If so, remove those keys from the keypool.\n+        * This can happen when restoring an old wallet backup that does not contain\n+        * the mostly recently created transactions from newer versions of the wallet.\n+        */\n+\n+    // loop though all outputs\n+    for (const CTxOut& txout: tx.vout) {\n+        for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n+            for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n+                // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n+                if (!dest.internal.has_value()) {\n+                    dest.internal = IsInternalScriptPubKeyMan(spk_man);\n+                }\n+\n+                // skip if can't determine whether it's a receiving address or not\n+                if (!dest.internal.has_value()) continue;\n+\n+                // If this is a receiving address and it's not in the address book yet\n+                // (e.g. it wasn't generated on this node or we're restoring from backup)\n+                // add it to the address book for proper transaction accounting\n+                if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n+                    SetAddressBook(dest.dest, \"\", \"receive\");\n                 }\n             }\n         }\n+    }\n \n-        bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n-        if (fExisted && !fUpdate) return false;\n-        if (fExisted || IsMine(tx) || IsFromMe(tx))\n-        {\n-            /* Check if any keys in the wallet keypool that were supposed to be unused\n-             * have appeared in a new transaction. If so, remove those keys from the keypool.\n-             * This can happen when restoring an old wallet backup that does not contain\n-             * the mostly recently created transactions from newer versions of the wallet.\n-             */\n-\n-            // loop though all outputs\n-            for (const CTxOut& txout: tx.vout) {\n-                for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n-                    for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n-                        // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n-                        if (!dest.internal.has_value()) {\n-                            dest.internal = IsInternalScriptPubKeyMan(spk_man);\n-                        }\n+    // Block disconnection override an abandoned tx as unconfirmed\n+    // which means user may have to call abandontransaction again\n+    TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n+    CWalletTx* wtx = AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n+    if (!wtx) {\n+        // Can only be nullptr if there was a db write error (missing db, read-only db or a db engine internal writing error).\n+        // As we only store arriving transaction in this process, and we don't want an inconsistent state, let's throw an error.\n+        throw std::runtime_error(\"DB error adding transaction to wallet, write failed\");\n+    }\n+    return true;\n+}\n \n-                        // skip if can't determine whether it's a receiving address or not\n-                        if (!dest.internal.has_value()) continue;\n+bool CWallet::AddSilentScriptKeyMan(\n+    const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block, const std::vector<std::tuple<CKey, int32_t>>& rawTrKeys)\n+{\n+    WalletLogPrintf(\"Silent Transaction identified: %s.\\n\", tx.GetHash().ToString());\n \n-                        // If this is a receiving address and it's not in the address book yet\n-                        // (e.g. it wasn't generated on this node or we're restoring from backup)\n-                        // add it to the address book for proper transaction accounting\n-                        if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n-                            SetAddressBook(dest.dest, \"\", \"receive\");\n-                        }\n-                    }\n+    for(auto& identifier_key: rawTrKeys) {\n+\n+        CKey key = std::get<0>(identifier_key);\n+        int32_t identifier = std::get<1>(identifier_key);\n+\n+        std::string desc = \"rawtr(\" + EncodeSecret(key) + \")\";\n+        std::string checksum = GetDescriptorChecksum(desc);\n+\n+        auto timestamp = std::chrono::duration_cast<std::chrono::microseconds>(\n+            std::chrono::system_clock::now().time_since_epoch()).count();\n+\n+        std::string desc_check = desc + \"#\" + checksum;\n+\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(desc_check, keys, error, /* require_checksum = */ true);\n+        assert(parsed_desc);\n+\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+\n+        // Need to ExpandPrivate to check if private keys are available for all pubkeys\n+        FlatSigningProvider expand_keys;\n+        std::vector<CScript> scripts;\n+        assert(parsed_desc->Expand(0, keys, scripts, expand_keys));\n+        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        std::string label;\n+\n+        if (m_silent_address_book.count(identifier)) {\n+            auto entry = m_silent_address_book[identifier];\n+            label = entry.m_label;\n+        } else {\n+            std::stringstream ss;\n+            ss << identifier;\n+            label = ss.str();\n+        }\n+\n+        auto existing_spk_manager = GetDescriptorScriptPubKeyMan(w_desc);\n+        if (!existing_spk_manager) {\n+            auto spk_manager = AddWalletDescriptor(w_desc, keys, label, false);\n+            assert(spk_manager != nullptr);\n+        }\n+    }\n+\n+    return HandleNewTxBelongingToMe(tx, state, rescanning_old_block);\n+}\n+\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxState& state, bool fUpdate, bool rescanning_old_block)\n+{\n+    const CTransaction& tx = *ptx;\n+\n+    AssertLockHeld(cs_wallet);\n+\n+    std::vector<std::tuple<CKey, int32_t>> rawTrKeys;\n+\n+    if (auto* conf = std::get_if<TxStateConfirmed>(&state)) {\n+        for (const CTxIn& txin : tx.vin) {\n+            std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n+            while (range.first != range.second) {\n+                if (range.first->second != tx.GetHash()) {\n+                    WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), conf->confirmed_block_hash.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n+                    MarkConflicted(conf->confirmed_block_hash, conf->confirmed_block_height, range.first->second);\n                 }\n+                range.first++;\n             }\n+        }\n+    }\n \n-            // Block disconnection override an abandoned tx as unconfirmed\n-            // which means user may have to call abandontransaction again\n-            TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n-            CWalletTx* wtx = AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n-            if (!wtx) {\n-                // Can only be nullptr if there was a db write error (missing db, read-only db or a db engine internal writing error).\n-                // As we only store arriving transaction in this process, and we don't want an inconsistent state, let's throw an error.\n-                throw std::runtime_error(\"DB error adding transaction to wallet, write failed\");\n-            }\n-            return true;\n+    bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n+    if (fExisted && !fUpdate) return false;\n+\n+    bool ret = (fExisted || IsMine(tx) || IsFromMe(tx)) ? HandleNewTxBelongingToMe(tx, state, rescanning_old_block) : false;\n+    if (IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENT) && VerifySilentPayment(tx, rawTrKeys)) {\n+        ret = AddSilentScriptKeyMan(tx, state, rescanning_old_block, rawTrKeys) || ret;\n+    }\n+    return ret;\n+}\n+\n+bool CWallet::ExtractPubkeyFromInput(const CTxIn& txin, XOnlyPubKey& senderPubKey)\n+{\n+    // Find the UTXO being spent in UTXO Set to learn the transaction type\n+    std::map<COutPoint, Coin> coins;\n+    coins[txin.prevout];\n+    chain().findCoins(coins);\n+\n+    auto pos = coins.find(txin.prevout);\n+\n+    Coin coin = pos->second;\n+\n+    // TODO: can more than one txin.prevout be in the mempool (RBF) ?\n+    pos++;\n+    assert( pos == coins.end() );\n+\n+    if (coin.out.IsNull()) {\n+        return false;\n+    }\n+\n+    // scriptPubKey being spent by this input\n+    CScript scriptPubKey = coin.out.scriptPubKey;\n+\n+    if (scriptPubKey.IsPayToWitnessScriptHash()) {\n+        return false;\n+    }\n+\n+    // Vector of parsed pubkeys and hashes\n+    std::vector<std::vector<unsigned char>> solutions;\n+\n+    TxoutType whichType = Solver(scriptPubKey, solutions);\n+\n+    if (whichType == TxoutType::NONSTANDARD ||\n+    whichType == TxoutType::MULTISIG ||\n+    whichType == TxoutType::WITNESS_UNKNOWN ) {\n+        return false;\n+    }\n+\n+    const CScript scriptSig = txin.scriptSig;\n+    const CScriptWitness scriptWitness = txin.scriptWitness;\n+\n+    assert(senderPubKey.IsNull());\n+\n+    // TODO: Condition not tested\n+    if (whichType == TxoutType::PUBKEY) {\n+\n+        CPubKey pubkey = CPubKey(solutions[0]);\n+        assert(pubkey.IsFullyValid());\n+        senderPubKey = XOnlyPubKey(pubkey);\n+\n+    }\n+\n+    else if (whichType == TxoutType::PUBKEYHASH) {\n+\n+        int sigSize = static_cast<int>(scriptSig[0]);\n+        int pubKeySize = static_cast<int>(scriptSig[sigSize + 1]);\n+        auto serializedPubKey = std::vector<unsigned char>(scriptSig.begin() + sigSize + 2, scriptSig.end());\n+        assert(serializedPubKey.size() == (size_t) pubKeySize);\n+\n+        CPubKey pubkey = CPubKey(serializedPubKey);\n+        assert(pubkey.IsFullyValid());\n+\n+        senderPubKey = XOnlyPubKey(pubkey);\n+\n+    }\n+\n+    else if (whichType == TxoutType::WITNESS_V0_KEYHASH || scriptPubKey.IsPayToScriptHash()) {\n+        if (scriptWitness.stack.size() != 2) return false;\n+        assert(scriptWitness.stack.at(1).size() == 33);\n+\n+        CPubKey pubkey = CPubKey(scriptWitness.stack.at(1));\n+        assert(pubkey.IsFullyValid());\n+\n+        senderPubKey = XOnlyPubKey(pubkey);\n+    }\n+\n+    else if (whichType == TxoutType::WITNESS_V1_TAPROOT) {\n+\n+        senderPubKey = XOnlyPubKey(solutions[0]);\n+        assert(senderPubKey.IsFullyValid());\n+    }\n+\n+    CTxDestination address;\n+    ExtractDestination(scriptPubKey, address);\n+\n+    return true;\n+}\n+\n+bool CWallet::VerifySilentPayment(const CTransaction& tx, std::vector<std::tuple<CKey, int32_t>>& rawTrKeys)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (tx.IsCoinBase() || tx.vin.empty()) return false;\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return false;\n+\n+    std::vector<std::tuple<CScript, XOnlyPubKey>> outputPubKeys;\n+\n+    for (auto& vout : tx.vout) {\n+\n+        if (IsMine(vout)) {\n+            continue;\n         }\n+\n+        std::vector<std::vector<unsigned char>> solutions;\n+        TxoutType whichType = Solver(vout.scriptPubKey, solutions);\n+\n+        // Silent Payments require that the recipients use Taproot address\n+        if (whichType != TxoutType::WITNESS_V1_TAPROOT) {\n+            continue;\n+        }\n+\n+        auto xOnlyPubKey = XOnlyPubKey(solutions[0]);\n+\n+        assert(xOnlyPubKey.IsFullyValid());\n+\n+        outputPubKeys.emplace_back(vout.scriptPubKey, xOnlyPubKey);\n     }\n-    return false;\n+\n+    if (outputPubKeys.empty()) {\n+        return false;\n+    }\n+\n+    std::vector<XOnlyPubKey> sender_pubkeys;\n+\n+    for (const CTxIn& txin : tx.vin) {\n+        auto senderPubKey = XOnlyPubKey();\n+\n+        if (!ExtractPubkeyFromInput(txin, senderPubKey)) {\n+            continue;\n+        }\n+\n+        assert(senderPubKey.IsFullyValid());\n+\n+        sender_pubkeys.push_back(senderPubKey);\n+    }\n+\n+    XOnlyPubKey sum_sender_pubkeys;\n+\n+    if (sender_pubkeys.empty() || sender_pubkeys.size() != tx.vin.size()) {\n+        if (!m_chain->getSilentTransactionFirstInputPubKey(tx.GetHash(), sum_sender_pubkeys)) {\n+            return false;\n+        }\n+    } else {\n+        sum_sender_pubkeys = silentpayment::Recipient::SumXOnlyPublicKeys(sender_pubkeys);\n+    }\n+\n+    for (ScriptPubKeyMan* spkm : GetActiveScriptPubKeyMans()) {\n+        DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+\n+        std::string desc_str;\n+        bool res_get_desc = desc_spkm->GetDescriptorString(desc_str, false);\n+\n+        // There must be only one SP descriptor\n+        if (res_get_desc && desc_str.rfind(\"sp(\", 0) != 0) {\n+            continue;\n+        }\n+\n+        rawTrKeys = desc_spkm->VerifySilentPaymentAddress(outputPubKeys, sum_sender_pubkeys);\n+    }\n+\n+    return rawTrKeys.size() > 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992878159",
      "id" : 992878159,
      "in_reply_to_id" : 992299985,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5847Lh5P",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 1425,
      "original_position" : 421,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1138291614,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992878159/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-12T00:29:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992878159",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992878244"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992878244"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/commit/fb014fefff60d87cf21f220fa756aa449bd6daf4.",
      "commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "created_at" : "2022-10-12T00:29:31Z",
      "diff_hunk" : "@@ -0,0 +1,209 @@\n+#include <wallet/silentpayment.h>\n+\n+#include <key_io.h>\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+#include <secp256k1_extrakeys.h>\n+#include <arith_uint256.h>\n+\n+namespace silentpayment {\n+\n+Sender::Sender(const CKey sender_secret_key, const XOnlyPubKey recipient_x_only_public_key)\n+{\n+    m_context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    // Parse the recipient's XOnlyPubKey to secp256k1_xonly_pubkey\n+    int return_val = secp256k1_xonly_pubkey_parse(m_context, &m_recipient_x_only_public_key, recipient_x_only_public_key.data());\n+    assert(return_val);\n+\n+    // Create the shared secret using the recipient's x-only pubkey and the sender' secret key\n+    return_val = secp256k1_ecdh_xonly(m_context, m_shared_secret, &m_recipient_x_only_public_key, sender_secret_key.begin(), nullptr, nullptr);\n+    assert(return_val);\n+}\n+\n+Sender::~Sender()\n+{\n+    secp256k1_context_destroy(m_context);\n+    memset(m_shared_secret, 0, sizeof(m_shared_secret));\n+    memset(m_recipient_x_only_public_key.data, 0, sizeof(m_recipient_x_only_public_key.data));\n+}\n+\n+XOnlyPubKey Sender::Tweak(const int32_t& identifier)\n+{\n+    unsigned char shared_secret[32];\n+    memcpy(shared_secret, m_shared_secret, 32);\n+    assert(memcmp(shared_secret, m_shared_secret, 32) == 0);\n+\n+    // Add the identifier to the shared_secret\n+    arith_uint256 tweak;\n+    tweak = tweak + identifier;\n+\n+    int return_val = secp256k1_ec_seckey_tweak_add(m_context, shared_secret, ArithToUint256(tweak).data());\n+\n+    // Tweak the recipient's x-only pubkey with identifier + shared_secret\n+    secp256k1_pubkey output_pubkey;\n+\n+    return_val = secp256k1_xonly_pubkey_tweak_add(m_context, &output_pubkey, &m_recipient_x_only_public_key, shared_secret);\n+    assert(return_val);\n+\n+    // Serialize and test the tweaked public key\n+    size_t len;\n+    unsigned char sender_serialized_output_pubkey[33];\n+    len = sizeof(sender_serialized_output_pubkey);\n+    return_val = secp256k1_ec_pubkey_serialize(m_context, sender_serialized_output_pubkey, &len, &output_pubkey, SECP256K1_EC_COMPRESSED);\n+    assert(return_val);\n+\n+    CPubKey pubKey = CPubKey(sender_serialized_output_pubkey);\n+\n+    assert(pubKey.IsFullyValid());\n+\n+    return XOnlyPubKey(pubKey);\n+}\n+\n+CKey Sender::SumPrivateKeys(const std::vector<CKey>& sender_secret_keys)\n+{\n+    auto context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    assert(!sender_secret_keys.empty());\n+\n+    const auto& first_seckey{sender_secret_keys.at(0)};\n+\n+    unsigned char seckey[32];\n+    memcpy(seckey, first_seckey.data(), 32);\n+    assert(memcmp(seckey, first_seckey.data(), 32) == 0);\n+\n+    if (first_seckey.GetPubKey()[0] == 3) {\n+        int return_val = secp256k1_ec_seckey_negate(context, seckey);\n+        assert(return_val);\n+    }\n+\n+    if (sender_secret_keys.size() > 1) {\n+        for (size_t i = 1; i < sender_secret_keys.size(); i++) {\n+\n+            const auto& sender_seckey{sender_secret_keys.at(i)};\n+\n+            unsigned char seckey_i[32];\n+            memcpy(seckey_i, sender_seckey.begin(), 32);\n+            assert(memcmp(seckey_i, sender_seckey.begin(), 32) == 0);\n+\n+            if (sender_seckey.GetPubKey()[0] == 3) {\n+                int return_val = secp256k1_ec_seckey_negate(context, seckey_i);\n+                assert(return_val);\n+            }\n+\n+            int return_val = secp256k1_ec_seckey_tweak_add(context, seckey, seckey_i);\n+            assert(return_val);\n+        }\n+    }\n+\n+\n+\n+    CKey ckey;\n+    ckey.Set(std::begin(seckey), std::end(seckey), true);\n+\n+    secp256k1_context_destroy(context);\n+    memset(seckey, 0, sizeof(seckey));\n+\n+    return ckey;\n+}\n+\n+Recipient::Recipient(const CKey& recipient_secret_key, const XOnlyPubKey& sender_x_only_public_key)\n+{\n+    m_context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    int return_val = secp256k1_keypair_create(m_context, &m_recipient_keypair, recipient_secret_key.begin());\n+    assert(return_val);\n+\n+    secp256k1_xonly_pubkey parsed_sender_x_only_public_key;\n+    return_val = secp256k1_xonly_pubkey_parse(m_context, &parsed_sender_x_only_public_key, sender_x_only_public_key.data());\n+    assert(return_val);\n+\n+    return_val = secp256k1_ecdh_xonly(m_context, m_shared_secret, &parsed_sender_x_only_public_key, recipient_secret_key.begin(), nullptr, nullptr);\n+    assert(return_val);\n+\n+    return_val = secp256k1_ec_seckey_verify(secp256k1_context_no_precomp, m_shared_secret);\n+    assert(return_val);\n+}\n+\n+Recipient::~Recipient()\n+{\n+    secp256k1_context_destroy(m_context);\n+    memset(m_shared_secret, 0, sizeof(m_shared_secret));\n+    memset(m_recipient_keypair.data, 0, sizeof(m_recipient_keypair.data));\n+}\n+\n+CKey Recipient::Tweak(const int32_t& identifier)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r992878244",
      "id" : 992878244,
      "in_reply_to_id" : 992302969,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5847Lh6k",
      "original_commit_id" : "978fbe4a7d5fdc0105095cd7f2b66da375cb3050",
      "original_line" : 135,
      "original_position" : 135,
      "original_start_line" : null,
      "path" : "src/wallet/silentpayment.cpp",
      "position" : null,
      "pull_request_review_id" : 1138291721,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992878244/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-12T00:29:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/992878244",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@aureleoules Thanks. Great suggestion to improve the UX regarding `getsilentaddress`. I added you as co-author in https://github.com/bitcoin/bitcoin/pull/24897/commits/35701eff890f5cff02af3e8c59b20f2948153b5f.",
      "created_at" : "2022-10-12T00:31:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1275433767",
      "id" : 1275433767,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585MBZMn",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1275433767/reactions"
      },
      "updated_at" : "2022-10-12T00:31:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1275433767",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r993082208"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993082208"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fb014fefff60d87cf21f220fa756aa449bd6daf4\r\nassertions should not have side effects\r\nalso seen at `src/silentpayment.cpp:148` in same commit fb014fefff60d87cf21f220fa756aa449bd6daf4\r\n```suggestion\r\n\tint r = memcmp(shared_secret, m_shared_secret, 32)\r\n    assert(r == 0);\r\n```",
      "commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "created_at" : "2022-10-12T07:19:02Z",
      "diff_hunk" : "@@ -0,0 +1,281 @@\n+#include <silentpayment.h>\n+\n+#include <coins.h>\n+#include <key_io.h>\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+#include <secp256k1_extrakeys.h>\n+#include <arith_uint256.h>\n+\n+namespace silentpayment {\n+\n+Sender::Sender(const CKey& sender_secret_key, const XOnlyPubKey& recipient_x_only_public_key)\n+{\n+    m_context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    // Parse the recipient's XOnlyPubKey to secp256k1_xonly_pubkey\n+    int return_val = secp256k1_xonly_pubkey_parse(m_context, &m_recipient_x_only_public_key, recipient_x_only_public_key.data());\n+    assert(return_val);\n+\n+    // Create the shared secret using the recipient's x-only pubkey and the sender' secret key\n+    return_val = secp256k1_ecdh_xonly(m_context, m_shared_secret, &m_recipient_x_only_public_key, sender_secret_key.begin(), nullptr, nullptr);\n+    assert(return_val);\n+}\n+\n+Sender::~Sender()\n+{\n+    secp256k1_context_destroy(m_context);\n+    memset(m_shared_secret, 0, sizeof(m_shared_secret));\n+    memset(m_recipient_x_only_public_key.data, 0, sizeof(m_recipient_x_only_public_key.data));\n+}\n+\n+XOnlyPubKey Sender::Tweak(const int32_t& identifier) const\n+{\n+    unsigned char shared_secret[32];\n+    memcpy(shared_secret, m_shared_secret, 32);\n+    assert(memcmp(shared_secret, m_shared_secret, 32) == 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r993082208",
      "id" : 993082208,
      "line" : 36,
      "node_id" : "PRRC_kwDOABII5847MTtg",
      "original_commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "original_line" : 36,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/silentpayment.cpp",
      "position" : 36,
      "pull_request_review_id" : 1138561292,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993082208/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-12T08:47:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993082208",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r993083309"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993083309"
         }
      },
      "author_association" : "MEMBER",
      "body" : "301481648aa20f8a8ebd7d868a1a63300cb6ab3e\r\n```suggestion\r\nbool SilentPaymentIndex::GetSilentPaymentKey(const CTransactionRef& tx, const CBlockIndex* blockindex, XOnlyPubKey& sum_tx_pubkeys) const\r\n```",
      "commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "created_at" : "2022-10-12T07:20:26Z",
      "diff_hunk" : "@@ -0,0 +1,160 @@\n+#include <index/silentpaymentindex.h>\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/disktxpos.h>\n+#include <node/blockstorage.h>\n+#include <pubkey.h>\n+#include <undo.h>\n+#include <util/system.h>\n+#include <validation.h>\n+#include <silentpayment.h>\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+\n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n+\n+constexpr uint8_t DB_SILENTPAYMENTINDEX{'s'};\n+\n+std::unique_ptr<SilentPaymentIndex> g_silentpaymentindex;\n+\n+/** Access to the silent payment index database (indexes/silentpaymentindex/) */\n+class SilentPaymentIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    bool WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items);\n+};\n+\n+SilentPaymentIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"silentpaymentindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool SilentPaymentIndex::DB::WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& [tx_hash, keydata] : items) {\n+        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tx_hash), keydata);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+SilentPaymentIndex::SilentPaymentIndex(std::unique_ptr<interfaces::Chain> chain, size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : BaseIndex(std::move(chain), \"silentpaymentindex\"), m_db(std::make_unique<SilentPaymentIndex::DB>(n_cache_size, f_memory, f_wipe))\n+{}\n+\n+SilentPaymentIndex::~SilentPaymentIndex() {}\n+\n+bool SilentPaymentIndex::GetSilentPaymentKey(const CTransactionRef& tx, const CBlockIndex* blockindex, XOnlyPubKey& sum_tx_pubkeys)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r993083309",
      "id" : 993083309,
      "line" : 51,
      "node_id" : "PRRC_kwDOABII5847MT-t",
      "original_commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "original_line" : 51,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/index/silentpaymentindex.cpp",
      "position" : 51,
      "pull_request_review_id" : 1138561292,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993083309/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-12T08:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993083309",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r993096372"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993096372"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fb014fefff60d87cf21f220fa756aa449bd6daf4\r\n`return_val` should be asserted",
      "commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "created_at" : "2022-10-12T07:34:49Z",
      "diff_hunk" : "@@ -0,0 +1,281 @@\n+#include <silentpayment.h>\n+\n+#include <coins.h>\n+#include <key_io.h>\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+#include <secp256k1_extrakeys.h>\n+#include <arith_uint256.h>\n+\n+namespace silentpayment {\n+\n+Sender::Sender(const CKey& sender_secret_key, const XOnlyPubKey& recipient_x_only_public_key)\n+{\n+    m_context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    // Parse the recipient's XOnlyPubKey to secp256k1_xonly_pubkey\n+    int return_val = secp256k1_xonly_pubkey_parse(m_context, &m_recipient_x_only_public_key, recipient_x_only_public_key.data());\n+    assert(return_val);\n+\n+    // Create the shared secret using the recipient's x-only pubkey and the sender' secret key\n+    return_val = secp256k1_ecdh_xonly(m_context, m_shared_secret, &m_recipient_x_only_public_key, sender_secret_key.begin(), nullptr, nullptr);\n+    assert(return_val);\n+}\n+\n+Sender::~Sender()\n+{\n+    secp256k1_context_destroy(m_context);\n+    memset(m_shared_secret, 0, sizeof(m_shared_secret));\n+    memset(m_recipient_x_only_public_key.data, 0, sizeof(m_recipient_x_only_public_key.data));\n+}\n+\n+XOnlyPubKey Sender::Tweak(const int32_t& identifier) const\n+{\n+    unsigned char shared_secret[32];\n+    memcpy(shared_secret, m_shared_secret, 32);\n+    assert(memcmp(shared_secret, m_shared_secret, 32) == 0);\n+\n+    // Add the identifier to the shared_secret\n+    arith_uint256 tweak;\n+    tweak = tweak + identifier;\n+\n+    int return_val = secp256k1_ec_seckey_tweak_add(m_context, shared_secret, ArithToUint256(tweak).data());\n+    assert(return_val);\n+\n+    // Tweak the recipient's x-only pubkey with identifier + shared_secret\n+    secp256k1_pubkey output_pubkey;\n+\n+    return_val = secp256k1_xonly_pubkey_tweak_add(m_context, &output_pubkey, &m_recipient_x_only_public_key, shared_secret);\n+    assert(return_val);\n+\n+    // Serialize and test the tweaked public key\n+    size_t len;\n+    unsigned char sender_serialized_output_pubkey[33];\n+    len = sizeof(sender_serialized_output_pubkey);\n+    return_val = secp256k1_ec_pubkey_serialize(m_context, sender_serialized_output_pubkey, &len, &output_pubkey, SECP256K1_EC_COMPRESSED);\n+    assert(return_val);\n+\n+    CPubKey pubKey = CPubKey(sender_serialized_output_pubkey);\n+\n+    assert(pubKey.IsFullyValid());\n+\n+    return XOnlyPubKey(pubKey);\n+}\n+\n+CKey Sender::SumPrivateKeys(const std::vector<CKey>& sender_secret_keys)\n+{\n+    auto context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    assert(!sender_secret_keys.empty());\n+\n+    const auto& first_seckey{sender_secret_keys.at(0)};\n+\n+    unsigned char seckey[32];\n+    memcpy(seckey, first_seckey.data(), 32);\n+    assert(memcmp(seckey, first_seckey.data(), 32) == 0);\n+\n+    if (first_seckey.GetPubKey()[0] == 3) {\n+        int return_val = secp256k1_ec_seckey_negate(context, seckey);\n+        assert(return_val);\n+    }\n+\n+    if (sender_secret_keys.size() > 1) {\n+        for (size_t i = 1; i < sender_secret_keys.size(); i++) {\n+\n+            const auto& sender_seckey{sender_secret_keys.at(i)};\n+\n+            unsigned char seckey_i[32];\n+            memcpy(seckey_i, sender_seckey.begin(), 32);\n+            assert(memcmp(seckey_i, sender_seckey.begin(), 32) == 0);\n+\n+            if (sender_seckey.GetPubKey()[0] == 3) {\n+                int return_val = secp256k1_ec_seckey_negate(context, seckey_i);\n+                assert(return_val);\n+            }\n+\n+            int return_val = secp256k1_ec_seckey_tweak_add(context, seckey, seckey_i);\n+            assert(return_val);\n+        }\n+    }\n+\n+\n+\n+    CKey ckey;\n+    ckey.Set(std::begin(seckey), std::end(seckey), true);\n+\n+    secp256k1_context_destroy(context);\n+    memset(seckey, 0, sizeof(seckey));\n+\n+    return ckey;\n+}\n+\n+Recipient::Recipient(const CKey& recipient_secret_key, const XOnlyPubKey& sender_x_only_public_key)\n+{\n+    m_context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    int return_val = secp256k1_keypair_create(m_context, &m_recipient_keypair, recipient_secret_key.begin());\n+    assert(return_val);\n+\n+    secp256k1_xonly_pubkey parsed_sender_x_only_public_key;\n+    return_val = secp256k1_xonly_pubkey_parse(m_context, &parsed_sender_x_only_public_key, sender_x_only_public_key.data());\n+    assert(return_val);\n+\n+    return_val = secp256k1_ecdh_xonly(m_context, m_shared_secret, &parsed_sender_x_only_public_key, recipient_secret_key.begin(), nullptr, nullptr);\n+    assert(return_val);\n+\n+    return_val = secp256k1_ec_seckey_verify(secp256k1_context_no_precomp, m_shared_secret);\n+    assert(return_val);\n+}\n+\n+Recipient::~Recipient()\n+{\n+    secp256k1_context_destroy(m_context);\n+    memset(m_shared_secret, 0, sizeof(m_shared_secret));\n+    memset(m_recipient_keypair.data, 0, sizeof(m_recipient_keypair.data));\n+}\n+\n+CKey Recipient::Tweak(const int32_t& identifier) const\n+{\n+    secp256k1_keypair recipient_keypair;\n+    memcpy(recipient_keypair.data, m_recipient_keypair.data, 96);\n+    assert(memcmp(recipient_keypair.data, m_recipient_keypair.data, 96) == 0);\n+\n+    // arith_uint256 tweak{*m_shared_secret};\n+    // tweak = tweak + identifier;\n+\n+    unsigned char shared_secret[32];\n+    memcpy(shared_secret, m_shared_secret, 32);\n+    assert(memcmp(shared_secret, m_shared_secret, 32) == 0);\n+\n+    arith_uint256 tweak;\n+    tweak = tweak + identifier;\n+\n+    int return_val = secp256k1_ec_seckey_tweak_add(m_context, shared_secret, ArithToUint256(tweak).data());\n+    assert(return_val);\n+\n+    return_val = secp256k1_keypair_xonly_tweak_add(m_context, &recipient_keypair, shared_secret);\n+    assert(return_val);\n+\n+    unsigned char result_secret_key[32];\n+    return_val = secp256k1_keypair_sec(m_context, result_secret_key, &recipient_keypair);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r993096372",
      "id" : 993096372,
      "line" : 160,
      "node_id" : "PRRC_kwDOABII5847MXK0",
      "original_commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "original_line" : 160,
      "original_position" : 160,
      "original_start_line" : null,
      "path" : "src/silentpayment.cpp",
      "position" : 160,
      "pull_request_review_id" : 1138561292,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993096372/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-12T08:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993096372",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r993102242"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993102242"
         }
      },
      "author_association" : "MEMBER",
      "body" : "c3e3002cf9b70f8b54f5e344277ad0864c555f5c\r\n```suggestion\r\nbool DescriptorScriptPubKeyMan::GetPrivKeyForSilentPayment(const CScript& scriptPubKey, CKey& privKey, bool onlyTaproot) const\r\n```",
      "commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "created_at" : "2022-10-12T07:41:19Z",
      "diff_hunk" : "@@ -2620,6 +2640,86 @@ bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKe\n     return true;\n }\n \n+bool DescriptorScriptPubKeyMan::GetPrivKeyForSilentPayment(const CScript& scriptPubKey, CKey& privKey, bool onlyTaproot)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r993102242",
      "id" : 993102242,
      "line" : 2643,
      "node_id" : "PRRC_kwDOABII5847MYmi",
      "original_commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "original_line" : 2643,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 65,
      "pull_request_review_id" : 1138561292,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993102242/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-12T08:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993102242",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r993103358"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993103358"
         }
      },
      "author_association" : "MEMBER",
      "body" : "43503e2ae6a462472f8ede023d6682cff99dd60d\r\nuse structured binding\r\n",
      "commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "created_at" : "2022-10-12T07:42:25Z",
      "diff_hunk" : "@@ -1096,70 +1133,229 @@ bool CWallet::LoadToWallet(const uint256& hash, const UpdateWalletTxFn& fill_wtx\n     return true;\n }\n \n-bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxState& state, bool fUpdate, bool rescanning_old_block)\n+bool CWallet::HandleNewTxBelongingToMe(const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block)\n {\n-    const CTransaction& tx = *ptx;\n-    {\n-        AssertLockHeld(cs_wallet);\n-\n-        if (auto* conf = std::get_if<TxStateConfirmed>(&state)) {\n-            for (const CTxIn& txin : tx.vin) {\n-                std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n-                while (range.first != range.second) {\n-                    if (range.first->second != tx.GetHash()) {\n-                        WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), conf->confirmed_block_hash.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n-                        MarkConflicted(conf->confirmed_block_hash, conf->confirmed_block_height, range.first->second);\n-                    }\n-                    range.first++;\n+    AssertLockHeld(cs_wallet);\n+\n+    /* Check if any keys in the wallet keypool that were supposed to be unused\n+        * have appeared in a new transaction. If so, remove those keys from the keypool.\n+        * This can happen when restoring an old wallet backup that does not contain\n+        * the mostly recently created transactions from newer versions of the wallet.\n+        */\n+\n+    // loop though all outputs\n+    for (const CTxOut& txout: tx.vout) {\n+        for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n+            for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n+                // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n+                if (!dest.internal.has_value()) {\n+                    dest.internal = IsInternalScriptPubKeyMan(spk_man);\n+                }\n+\n+                // skip if can't determine whether it's a receiving address or not\n+                if (!dest.internal.has_value()) continue;\n+\n+                // If this is a receiving address and it's not in the address book yet\n+                // (e.g. it wasn't generated on this node or we're restoring from backup)\n+                // add it to the address book for proper transaction accounting\n+                if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n+                    SetAddressBook(dest.dest, \"\", \"receive\");\n                 }\n             }\n         }\n+    }\n \n-        bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n-        if (fExisted && !fUpdate) return false;\n-        if (fExisted || IsMine(tx) || IsFromMe(tx))\n-        {\n-            /* Check if any keys in the wallet keypool that were supposed to be unused\n-             * have appeared in a new transaction. If so, remove those keys from the keypool.\n-             * This can happen when restoring an old wallet backup that does not contain\n-             * the mostly recently created transactions from newer versions of the wallet.\n-             */\n-\n-            // loop though all outputs\n-            for (const CTxOut& txout: tx.vout) {\n-                for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n-                    for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n-                        // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n-                        if (!dest.internal.has_value()) {\n-                            dest.internal = IsInternalScriptPubKeyMan(spk_man);\n-                        }\n+    // Block disconnection override an abandoned tx as unconfirmed\n+    // which means user may have to call abandontransaction again\n+    TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n+    CWalletTx* wtx = AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n+    if (!wtx) {\n+        // Can only be nullptr if there was a db write error (missing db, read-only db or a db engine internal writing error).\n+        // As we only store arriving transaction in this process, and we don't want an inconsistent state, let's throw an error.\n+        throw std::runtime_error(\"DB error adding transaction to wallet, write failed\");\n+    }\n+    return true;\n+}\n \n-                        // skip if can't determine whether it's a receiving address or not\n-                        if (!dest.internal.has_value()) continue;\n+bool CWallet::AddSilentScriptKeyMan(\n+    const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block, const std::vector<std::tuple<CKey, int32_t>>& rawTrKeys)\n+{\n+    WalletLogPrintf(\"Silent Transaction identified: %s.\\n\", tx.GetHash().ToString());\n \n-                        // If this is a receiving address and it's not in the address book yet\n-                        // (e.g. it wasn't generated on this node or we're restoring from backup)\n-                        // add it to the address book for proper transaction accounting\n-                        if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n-                            SetAddressBook(dest.dest, \"\", \"receive\");\n-                        }\n-                    }\n+    for(auto& identifier_key: rawTrKeys) {\n+\n+        CKey key = std::get<0>(identifier_key);\n+        int32_t identifier = std::get<1>(identifier_key);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r993103358",
      "id" : 993103358,
      "line" : 1188,
      "node_id" : "PRRC_kwDOABII5847MY3-",
      "original_commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "original_line" : 1188,
      "original_position" : 173,
      "original_start_line" : 1185,
      "path" : "src/wallet/wallet.cpp",
      "position" : 173,
      "pull_request_review_id" : 1138561292,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993103358/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1185,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-12T08:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993103358",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r993104802"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993104802"
         }
      },
      "author_association" : "MEMBER",
      "body" : "35701eff890f5cff02af3e8c59b20f2948153b5f\r\n```suggestion\r\nutil::Result<CTxDestination> CWallet::GetNewDestination(const OutputType type, const std::string& label, const bool silent_payment, const int32_t current_index)\r\n```",
      "commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "created_at" : "2022-10-12T07:43:55Z",
      "diff_hunk" : "@@ -2368,18 +2573,32 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n     return res;\n }\n \n-util::Result<CTxDestination> CWallet::GetNewDestination(const OutputType type, const std::string label)\n+util::Result<CTxDestination> CWallet::GetNewDestination(const OutputType type, const std::string label, const bool silent_payment, const int32_t current_index)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r993104802",
      "id" : 993104802,
      "line" : 2576,
      "node_id" : "PRRC_kwDOABII5847MZOi",
      "original_commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "original_line" : 2576,
      "original_position" : 379,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 379,
      "pull_request_review_id" : 1138561292,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993104802/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-12T08:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993104802",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r993162151"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993162151"
         }
      },
      "author_association" : "MEMBER",
      "body" : "c3e3002cf9b70f8b54f5e344277ad0864c555f5c\r\n```suggestion\r\n    for(const auto& [outputScriptPubKey, outputPubKey] : tx_output_pub_keys) {\r\n```",
      "commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "created_at" : "2022-10-12T08:39:35Z",
      "diff_hunk" : "@@ -2620,6 +2640,86 @@ bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKe\n     return true;\n }\n \n+bool DescriptorScriptPubKeyMan::GetPrivKeyForSilentPayment(const CScript& scriptPubKey, CKey& privKey, bool onlyTaproot)\n+{\n+    std::vector<std::vector<unsigned char>> solutions;\n+    TxoutType whichType = Solver(scriptPubKey, solutions);\n+\n+    std::unique_ptr<FlatSigningProvider> coin_keys = GetSigningProvider(scriptPubKey, true);\n+    if (!coin_keys || coin_keys->keys.size() != 1) {\n+        return false;\n+    }\n+\n+    auto& key = *coin_keys->keys.begin();\n+\n+    // Tweak the private key as GetSigningProvider returns the original key.\n+    // Taproot addresses / scriptPubKeys use tweaked public key, not the original key.\n+    if (whichType == TxoutType::WITNESS_V1_TAPROOT) {\n+        auto pubKeyFromScriptPubKey = XOnlyPubKey(solutions[0]);\n+\n+        // this means it is a \"rawtr\" output\n+        if (XOnlyPubKey(key.second.GetPubKey()) == pubKeyFromScriptPubKey) {\n+            privKey = key.second;\n+            return true;\n+        }\n+\n+        TaprootSpendData spenddata;\n+        coin_keys->GetTaprootSpendData(pubKeyFromScriptPubKey, spenddata);\n+\n+        if(!key.second.TweakCKey(&spenddata.merkle_root, privKey)) return false;\n+\n+        assert(XOnlyPubKey(privKey.GetPubKey()) ==  pubKeyFromScriptPubKey);\n+    } else if (onlyTaproot) {\n+        return false;\n+    } else if (whichType == TxoutType::NONSTANDARD || whichType == TxoutType::MULTISIG || whichType == TxoutType::WITNESS_UNKNOWN ) {\n+        return false;\n+    } else {\n+        privKey = key.second;\n+    }\n+\n+    return true;\n+}\n+\n+std::vector<std::tuple<CKey, int32_t>> DescriptorScriptPubKeyMan::VerifySilentPaymentAddress(\n+    std::vector<std::tuple<CScript, XOnlyPubKey>>& tx_output_pub_keys,\n+    XOnlyPubKey& sender_pub_key)\n+{\n+    LOCK(cs_desc_man);\n+\n+    std::vector<std::tuple<CKey, int32_t>> raw_tr_keys;\n+\n+    std::vector<CKey> priv_keys;\n+\n+    for (auto& [_, priv_key] : m_map_keys) {\n+        priv_keys.push_back(priv_key);\n+    }\n+\n+    assert(priv_keys.size() == 1);\n+\n+    CKey priv_key = priv_keys.at(0);\n+\n+    for(auto& pub_key_items : tx_output_pub_keys) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r993162151",
      "id" : 993162151,
      "line" : 2701,
      "node_id" : "PRRC_kwDOABII5847MnOn",
      "original_commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "original_line" : 2701,
      "original_position" : 123,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 123,
      "pull_request_review_id" : 1138561292,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993162151/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-12T08:45:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/993162151",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Also, I think it could be nice to have a way to list all generated silent addresses with their respective label, to quickly find the payment address for an existing client for example. Such as:\r\n```sh\r\n$ ./src/bitcoin-cli -regtest listsilentaddresses\r\n{\r\n  \"wallet_name\": \"my_sp_wallet\",\r\n  \"silent_addresses\": [\r\n\t{\r\n\t\t\"address\": \"sprt041plqhqd9t33wty9l3l86rpx82pmh7sny9qlhq9ypatxvwnq2rxyfgqrj43fq\",\r\n\t\t\"label\": \"Client 1\",\r\n\t\t\"identifier: 4\r\n\t},\r\n\t{\r\n\t\t\"address\": \"sprt051plqhqd9t33wty9l3l86rpx82pmh7sny9qlhq9ypatxvwnq2rxyfgqzwtgat\",\r\n\t\t\"label\": \"Client 2\",\r\n\t\t\"identifier: 5\r\n\t},\r\n\t{\r\n\t\t\"address\": \"sprt061plqhqd9t33wty9l3l86rpx82pmh7sny9qlhq9ypatxvwnq2rxyfgqprq2gk\",\r\n\t\t\"label\": \"Donations\",\r\n\t\t\"identifier: 6\r\n\t},\r\n\t...\r\n  ]\r\n}\r\n```\r\n\r\nI hope this feature is not too premature for this PR.",
      "created_at" : "2022-10-12T13:17:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1276160738",
      "id" : 1276160738,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585MEKri",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1276160738/reactions"
      },
      "updated_at" : "2022-10-12T13:17:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1276160738",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r996379426"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379426"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in 1f48b4c3ea120edaf67b25bb09e4a69421fe45a1.",
      "commit_id" : "9fde79224621421245737d99f9be6c2b5a6c4ac2",
      "created_at" : "2022-10-16T02:48:36Z",
      "diff_hunk" : "@@ -0,0 +1,281 @@\n+#include <silentpayment.h>\n+\n+#include <coins.h>\n+#include <key_io.h>\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+#include <secp256k1_extrakeys.h>\n+#include <arith_uint256.h>\n+\n+namespace silentpayment {\n+\n+Sender::Sender(const CKey& sender_secret_key, const XOnlyPubKey& recipient_x_only_public_key)\n+{\n+    m_context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    // Parse the recipient's XOnlyPubKey to secp256k1_xonly_pubkey\n+    int return_val = secp256k1_xonly_pubkey_parse(m_context, &m_recipient_x_only_public_key, recipient_x_only_public_key.data());\n+    assert(return_val);\n+\n+    // Create the shared secret using the recipient's x-only pubkey and the sender' secret key\n+    return_val = secp256k1_ecdh_xonly(m_context, m_shared_secret, &m_recipient_x_only_public_key, sender_secret_key.begin(), nullptr, nullptr);\n+    assert(return_val);\n+}\n+\n+Sender::~Sender()\n+{\n+    secp256k1_context_destroy(m_context);\n+    memset(m_shared_secret, 0, sizeof(m_shared_secret));\n+    memset(m_recipient_x_only_public_key.data, 0, sizeof(m_recipient_x_only_public_key.data));\n+}\n+\n+XOnlyPubKey Sender::Tweak(const int32_t& identifier) const\n+{\n+    unsigned char shared_secret[32];\n+    memcpy(shared_secret, m_shared_secret, 32);\n+    assert(memcmp(shared_secret, m_shared_secret, 32) == 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r996379426",
      "id" : 996379426,
      "in_reply_to_id" : 993082208,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5847Y4si",
      "original_commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "original_line" : 36,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/silentpayment.cpp",
      "position" : null,
      "pull_request_review_id" : 1143245595,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379426/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-16T02:48:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379426",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r996379454"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379454"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done  in 8e49caf4e5dc29b6e275aff6f0a3234bbfd77c41.",
      "commit_id" : "9fde79224621421245737d99f9be6c2b5a6c4ac2",
      "created_at" : "2022-10-16T02:48:52Z",
      "diff_hunk" : "@@ -0,0 +1,160 @@\n+#include <index/silentpaymentindex.h>\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/disktxpos.h>\n+#include <node/blockstorage.h>\n+#include <pubkey.h>\n+#include <undo.h>\n+#include <util/system.h>\n+#include <validation.h>\n+#include <silentpayment.h>\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+\n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n+\n+constexpr uint8_t DB_SILENTPAYMENTINDEX{'s'};\n+\n+std::unique_ptr<SilentPaymentIndex> g_silentpaymentindex;\n+\n+/** Access to the silent payment index database (indexes/silentpaymentindex/) */\n+class SilentPaymentIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    bool WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items);\n+};\n+\n+SilentPaymentIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"silentpaymentindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool SilentPaymentIndex::DB::WriteSilentPayments(const std::vector<std::pair<uint256, uint256>>& items)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& [tx_hash, keydata] : items) {\n+        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tx_hash), keydata);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+SilentPaymentIndex::SilentPaymentIndex(std::unique_ptr<interfaces::Chain> chain, size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : BaseIndex(std::move(chain), \"silentpaymentindex\"), m_db(std::make_unique<SilentPaymentIndex::DB>(n_cache_size, f_memory, f_wipe))\n+{}\n+\n+SilentPaymentIndex::~SilentPaymentIndex() {}\n+\n+bool SilentPaymentIndex::GetSilentPaymentKey(const CTransactionRef& tx, const CBlockIndex* blockindex, XOnlyPubKey& sum_tx_pubkeys)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r996379454",
      "id" : 996379454,
      "in_reply_to_id" : 993083309,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5847Y4s-",
      "original_commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "original_line" : 51,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/index/silentpaymentindex.cpp",
      "position" : null,
      "pull_request_review_id" : 1143245607,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379454/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-16T02:48:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379454",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r996379469"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379469"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/commit/1f48b4c3ea120edaf67b25bb09e4a69421fe45a1.",
      "commit_id" : "9fde79224621421245737d99f9be6c2b5a6c4ac2",
      "created_at" : "2022-10-16T02:49:12Z",
      "diff_hunk" : "@@ -0,0 +1,281 @@\n+#include <silentpayment.h>\n+\n+#include <coins.h>\n+#include <key_io.h>\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+#include <secp256k1_extrakeys.h>\n+#include <arith_uint256.h>\n+\n+namespace silentpayment {\n+\n+Sender::Sender(const CKey& sender_secret_key, const XOnlyPubKey& recipient_x_only_public_key)\n+{\n+    m_context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    // Parse the recipient's XOnlyPubKey to secp256k1_xonly_pubkey\n+    int return_val = secp256k1_xonly_pubkey_parse(m_context, &m_recipient_x_only_public_key, recipient_x_only_public_key.data());\n+    assert(return_val);\n+\n+    // Create the shared secret using the recipient's x-only pubkey and the sender' secret key\n+    return_val = secp256k1_ecdh_xonly(m_context, m_shared_secret, &m_recipient_x_only_public_key, sender_secret_key.begin(), nullptr, nullptr);\n+    assert(return_val);\n+}\n+\n+Sender::~Sender()\n+{\n+    secp256k1_context_destroy(m_context);\n+    memset(m_shared_secret, 0, sizeof(m_shared_secret));\n+    memset(m_recipient_x_only_public_key.data, 0, sizeof(m_recipient_x_only_public_key.data));\n+}\n+\n+XOnlyPubKey Sender::Tweak(const int32_t& identifier) const\n+{\n+    unsigned char shared_secret[32];\n+    memcpy(shared_secret, m_shared_secret, 32);\n+    assert(memcmp(shared_secret, m_shared_secret, 32) == 0);\n+\n+    // Add the identifier to the shared_secret\n+    arith_uint256 tweak;\n+    tweak = tweak + identifier;\n+\n+    int return_val = secp256k1_ec_seckey_tweak_add(m_context, shared_secret, ArithToUint256(tweak).data());\n+    assert(return_val);\n+\n+    // Tweak the recipient's x-only pubkey with identifier + shared_secret\n+    secp256k1_pubkey output_pubkey;\n+\n+    return_val = secp256k1_xonly_pubkey_tweak_add(m_context, &output_pubkey, &m_recipient_x_only_public_key, shared_secret);\n+    assert(return_val);\n+\n+    // Serialize and test the tweaked public key\n+    size_t len;\n+    unsigned char sender_serialized_output_pubkey[33];\n+    len = sizeof(sender_serialized_output_pubkey);\n+    return_val = secp256k1_ec_pubkey_serialize(m_context, sender_serialized_output_pubkey, &len, &output_pubkey, SECP256K1_EC_COMPRESSED);\n+    assert(return_val);\n+\n+    CPubKey pubKey = CPubKey(sender_serialized_output_pubkey);\n+\n+    assert(pubKey.IsFullyValid());\n+\n+    return XOnlyPubKey(pubKey);\n+}\n+\n+CKey Sender::SumPrivateKeys(const std::vector<CKey>& sender_secret_keys)\n+{\n+    auto context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    assert(!sender_secret_keys.empty());\n+\n+    const auto& first_seckey{sender_secret_keys.at(0)};\n+\n+    unsigned char seckey[32];\n+    memcpy(seckey, first_seckey.data(), 32);\n+    assert(memcmp(seckey, first_seckey.data(), 32) == 0);\n+\n+    if (first_seckey.GetPubKey()[0] == 3) {\n+        int return_val = secp256k1_ec_seckey_negate(context, seckey);\n+        assert(return_val);\n+    }\n+\n+    if (sender_secret_keys.size() > 1) {\n+        for (size_t i = 1; i < sender_secret_keys.size(); i++) {\n+\n+            const auto& sender_seckey{sender_secret_keys.at(i)};\n+\n+            unsigned char seckey_i[32];\n+            memcpy(seckey_i, sender_seckey.begin(), 32);\n+            assert(memcmp(seckey_i, sender_seckey.begin(), 32) == 0);\n+\n+            if (sender_seckey.GetPubKey()[0] == 3) {\n+                int return_val = secp256k1_ec_seckey_negate(context, seckey_i);\n+                assert(return_val);\n+            }\n+\n+            int return_val = secp256k1_ec_seckey_tweak_add(context, seckey, seckey_i);\n+            assert(return_val);\n+        }\n+    }\n+\n+\n+\n+    CKey ckey;\n+    ckey.Set(std::begin(seckey), std::end(seckey), true);\n+\n+    secp256k1_context_destroy(context);\n+    memset(seckey, 0, sizeof(seckey));\n+\n+    return ckey;\n+}\n+\n+Recipient::Recipient(const CKey& recipient_secret_key, const XOnlyPubKey& sender_x_only_public_key)\n+{\n+    m_context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    int return_val = secp256k1_keypair_create(m_context, &m_recipient_keypair, recipient_secret_key.begin());\n+    assert(return_val);\n+\n+    secp256k1_xonly_pubkey parsed_sender_x_only_public_key;\n+    return_val = secp256k1_xonly_pubkey_parse(m_context, &parsed_sender_x_only_public_key, sender_x_only_public_key.data());\n+    assert(return_val);\n+\n+    return_val = secp256k1_ecdh_xonly(m_context, m_shared_secret, &parsed_sender_x_only_public_key, recipient_secret_key.begin(), nullptr, nullptr);\n+    assert(return_val);\n+\n+    return_val = secp256k1_ec_seckey_verify(secp256k1_context_no_precomp, m_shared_secret);\n+    assert(return_val);\n+}\n+\n+Recipient::~Recipient()\n+{\n+    secp256k1_context_destroy(m_context);\n+    memset(m_shared_secret, 0, sizeof(m_shared_secret));\n+    memset(m_recipient_keypair.data, 0, sizeof(m_recipient_keypair.data));\n+}\n+\n+CKey Recipient::Tweak(const int32_t& identifier) const\n+{\n+    secp256k1_keypair recipient_keypair;\n+    memcpy(recipient_keypair.data, m_recipient_keypair.data, 96);\n+    assert(memcmp(recipient_keypair.data, m_recipient_keypair.data, 96) == 0);\n+\n+    // arith_uint256 tweak{*m_shared_secret};\n+    // tweak = tweak + identifier;\n+\n+    unsigned char shared_secret[32];\n+    memcpy(shared_secret, m_shared_secret, 32);\n+    assert(memcmp(shared_secret, m_shared_secret, 32) == 0);\n+\n+    arith_uint256 tweak;\n+    tweak = tweak + identifier;\n+\n+    int return_val = secp256k1_ec_seckey_tweak_add(m_context, shared_secret, ArithToUint256(tweak).data());\n+    assert(return_val);\n+\n+    return_val = secp256k1_keypair_xonly_tweak_add(m_context, &recipient_keypair, shared_secret);\n+    assert(return_val);\n+\n+    unsigned char result_secret_key[32];\n+    return_val = secp256k1_keypair_sec(m_context, result_secret_key, &recipient_keypair);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r996379469",
      "id" : 996379469,
      "in_reply_to_id" : 993096372,
      "line" : 209,
      "node_id" : "PRRC_kwDOABII5847Y4tN",
      "original_commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "original_line" : 209,
      "original_position" : 160,
      "original_start_line" : null,
      "path" : "src/silentpayment.cpp",
      "position" : 209,
      "pull_request_review_id" : 1143245623,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379469/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-16T02:49:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379469",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r996379472"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379472"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in a97cff0045ae0dcdb29fddb7ff263c2e3b052ce9.",
      "commit_id" : "9fde79224621421245737d99f9be6c2b5a6c4ac2",
      "created_at" : "2022-10-16T02:49:25Z",
      "diff_hunk" : "@@ -2620,6 +2640,86 @@ bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKe\n     return true;\n }\n \n+bool DescriptorScriptPubKeyMan::GetPrivKeyForSilentPayment(const CScript& scriptPubKey, CKey& privKey, bool onlyTaproot)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r996379472",
      "id" : 996379472,
      "in_reply_to_id" : 993102242,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5847Y4tQ",
      "original_commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "original_line" : 2643,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : null,
      "pull_request_review_id" : 1143245630,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379472/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-16T02:49:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379472",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r996379491"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379491"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in 4da115941601e433569c5fd11a1d4a5f4b90107e.",
      "commit_id" : "9fde79224621421245737d99f9be6c2b5a6c4ac2",
      "created_at" : "2022-10-16T02:49:42Z",
      "diff_hunk" : "@@ -1096,70 +1133,229 @@ bool CWallet::LoadToWallet(const uint256& hash, const UpdateWalletTxFn& fill_wtx\n     return true;\n }\n \n-bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxState& state, bool fUpdate, bool rescanning_old_block)\n+bool CWallet::HandleNewTxBelongingToMe(const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block)\n {\n-    const CTransaction& tx = *ptx;\n-    {\n-        AssertLockHeld(cs_wallet);\n-\n-        if (auto* conf = std::get_if<TxStateConfirmed>(&state)) {\n-            for (const CTxIn& txin : tx.vin) {\n-                std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n-                while (range.first != range.second) {\n-                    if (range.first->second != tx.GetHash()) {\n-                        WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), conf->confirmed_block_hash.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n-                        MarkConflicted(conf->confirmed_block_hash, conf->confirmed_block_height, range.first->second);\n-                    }\n-                    range.first++;\n+    AssertLockHeld(cs_wallet);\n+\n+    /* Check if any keys in the wallet keypool that were supposed to be unused\n+        * have appeared in a new transaction. If so, remove those keys from the keypool.\n+        * This can happen when restoring an old wallet backup that does not contain\n+        * the mostly recently created transactions from newer versions of the wallet.\n+        */\n+\n+    // loop though all outputs\n+    for (const CTxOut& txout: tx.vout) {\n+        for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n+            for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n+                // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n+                if (!dest.internal.has_value()) {\n+                    dest.internal = IsInternalScriptPubKeyMan(spk_man);\n+                }\n+\n+                // skip if can't determine whether it's a receiving address or not\n+                if (!dest.internal.has_value()) continue;\n+\n+                // If this is a receiving address and it's not in the address book yet\n+                // (e.g. it wasn't generated on this node or we're restoring from backup)\n+                // add it to the address book for proper transaction accounting\n+                if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n+                    SetAddressBook(dest.dest, \"\", \"receive\");\n                 }\n             }\n         }\n+    }\n \n-        bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n-        if (fExisted && !fUpdate) return false;\n-        if (fExisted || IsMine(tx) || IsFromMe(tx))\n-        {\n-            /* Check if any keys in the wallet keypool that were supposed to be unused\n-             * have appeared in a new transaction. If so, remove those keys from the keypool.\n-             * This can happen when restoring an old wallet backup that does not contain\n-             * the mostly recently created transactions from newer versions of the wallet.\n-             */\n-\n-            // loop though all outputs\n-            for (const CTxOut& txout: tx.vout) {\n-                for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n-                    for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n-                        // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n-                        if (!dest.internal.has_value()) {\n-                            dest.internal = IsInternalScriptPubKeyMan(spk_man);\n-                        }\n+    // Block disconnection override an abandoned tx as unconfirmed\n+    // which means user may have to call abandontransaction again\n+    TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n+    CWalletTx* wtx = AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n+    if (!wtx) {\n+        // Can only be nullptr if there was a db write error (missing db, read-only db or a db engine internal writing error).\n+        // As we only store arriving transaction in this process, and we don't want an inconsistent state, let's throw an error.\n+        throw std::runtime_error(\"DB error adding transaction to wallet, write failed\");\n+    }\n+    return true;\n+}\n \n-                        // skip if can't determine whether it's a receiving address or not\n-                        if (!dest.internal.has_value()) continue;\n+bool CWallet::AddSilentScriptKeyMan(\n+    const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block, const std::vector<std::tuple<CKey, int32_t>>& rawTrKeys)\n+{\n+    WalletLogPrintf(\"Silent Transaction identified: %s.\\n\", tx.GetHash().ToString());\n \n-                        // If this is a receiving address and it's not in the address book yet\n-                        // (e.g. it wasn't generated on this node or we're restoring from backup)\n-                        // add it to the address book for proper transaction accounting\n-                        if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n-                            SetAddressBook(dest.dest, \"\", \"receive\");\n-                        }\n-                    }\n+    for(auto& identifier_key: rawTrKeys) {\n+\n+        CKey key = std::get<0>(identifier_key);\n+        int32_t identifier = std::get<1>(identifier_key);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r996379491",
      "id" : 996379491,
      "in_reply_to_id" : 993103358,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5847Y4tj",
      "original_commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "original_line" : 1188,
      "original_position" : 173,
      "original_start_line" : 1185,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1143245638,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379491/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-16T02:49:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379491",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r996379505"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379505"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in f8cbdccfdeff1ce584d5ce99544af36814d82785.",
      "commit_id" : "9fde79224621421245737d99f9be6c2b5a6c4ac2",
      "created_at" : "2022-10-16T02:49:59Z",
      "diff_hunk" : "@@ -2368,18 +2573,32 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n     return res;\n }\n \n-util::Result<CTxDestination> CWallet::GetNewDestination(const OutputType type, const std::string label)\n+util::Result<CTxDestination> CWallet::GetNewDestination(const OutputType type, const std::string label, const bool silent_payment, const int32_t current_index)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r996379505",
      "id" : 996379505,
      "in_reply_to_id" : 993104802,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5847Y4tx",
      "original_commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "original_line" : 2576,
      "original_position" : 379,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1143245653,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379505/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-16T02:49:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379505",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r996379524"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379524"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in a97cff0045ae0dcdb29fddb7ff263c2e3b052ce9.",
      "commit_id" : "9fde79224621421245737d99f9be6c2b5a6c4ac2",
      "created_at" : "2022-10-16T02:50:13Z",
      "diff_hunk" : "@@ -2620,6 +2640,86 @@ bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKe\n     return true;\n }\n \n+bool DescriptorScriptPubKeyMan::GetPrivKeyForSilentPayment(const CScript& scriptPubKey, CKey& privKey, bool onlyTaproot)\n+{\n+    std::vector<std::vector<unsigned char>> solutions;\n+    TxoutType whichType = Solver(scriptPubKey, solutions);\n+\n+    std::unique_ptr<FlatSigningProvider> coin_keys = GetSigningProvider(scriptPubKey, true);\n+    if (!coin_keys || coin_keys->keys.size() != 1) {\n+        return false;\n+    }\n+\n+    auto& key = *coin_keys->keys.begin();\n+\n+    // Tweak the private key as GetSigningProvider returns the original key.\n+    // Taproot addresses / scriptPubKeys use tweaked public key, not the original key.\n+    if (whichType == TxoutType::WITNESS_V1_TAPROOT) {\n+        auto pubKeyFromScriptPubKey = XOnlyPubKey(solutions[0]);\n+\n+        // this means it is a \"rawtr\" output\n+        if (XOnlyPubKey(key.second.GetPubKey()) == pubKeyFromScriptPubKey) {\n+            privKey = key.second;\n+            return true;\n+        }\n+\n+        TaprootSpendData spenddata;\n+        coin_keys->GetTaprootSpendData(pubKeyFromScriptPubKey, spenddata);\n+\n+        if(!key.second.TweakCKey(&spenddata.merkle_root, privKey)) return false;\n+\n+        assert(XOnlyPubKey(privKey.GetPubKey()) ==  pubKeyFromScriptPubKey);\n+    } else if (onlyTaproot) {\n+        return false;\n+    } else if (whichType == TxoutType::NONSTANDARD || whichType == TxoutType::MULTISIG || whichType == TxoutType::WITNESS_UNKNOWN ) {\n+        return false;\n+    } else {\n+        privKey = key.second;\n+    }\n+\n+    return true;\n+}\n+\n+std::vector<std::tuple<CKey, int32_t>> DescriptorScriptPubKeyMan::VerifySilentPaymentAddress(\n+    std::vector<std::tuple<CScript, XOnlyPubKey>>& tx_output_pub_keys,\n+    XOnlyPubKey& sender_pub_key)\n+{\n+    LOCK(cs_desc_man);\n+\n+    std::vector<std::tuple<CKey, int32_t>> raw_tr_keys;\n+\n+    std::vector<CKey> priv_keys;\n+\n+    for (auto& [_, priv_key] : m_map_keys) {\n+        priv_keys.push_back(priv_key);\n+    }\n+\n+    assert(priv_keys.size() == 1);\n+\n+    CKey priv_key = priv_keys.at(0);\n+\n+    for(auto& pub_key_items : tx_output_pub_keys) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r996379524",
      "id" : 996379524,
      "in_reply_to_id" : 993162151,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5847Y4uE",
      "original_commit_id" : "62c0c18a69559270a0a420fc48e88d50a632062c",
      "original_line" : 2701,
      "original_position" : 123,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : null,
      "pull_request_review_id" : 1143245658,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379524/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-16T02:50:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/996379524",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@aureleoules Thanks for all the suggestions and the benchmark file. I've added it (and given you authorship) as it's crucial to determine the feasibility of this scheme. I also added the `ECDHPerformance_10_100` method as ECDH is the most expensive operation (which until this PR was not used by Bitcoin Core - see f66beaa534aa42341a3c3030024a13ae9078c04c).\r\n\r\nI also implemented the `listsilentaddresses` RPC. Really great suggestion.\r\n\r\n> Also, why did you move src/wallet/silentpayment.cpp to src/silentpayment.cpp?\r\n\r\nI removed `silentpayment.{cpp,h}` from wallet folder because it is also used in index and RPC `scantxoutset` (which is not related to wallet). So this was introducing a wallet dependency on these classes.",
      "created_at" : "2022-10-16T05:05:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1279893291",
      "id" : 1279893291,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585MSZ8r",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1279893291/reactions"
      },
      "updated_at" : "2022-10-16T05:05:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1279893291",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This new push implements a new cryptographic scheme (also suggested by @RubenSomsen) that eliminates the need for PR https://github.com/bitcoin-core/secp256k1/pull/994 and https://github.com/bitcoin-core/secp256k1/pull/1143.\r\n\r\nThe new scheme basically works as follows:\r\n. If the keys used for silent payments generate a public key with odd y, then negate them when performing ECDH.\r\n. For x-only pubkeys, add 2 in front before running ECDH (so it becomes a public key with even y). \r\n. Tweak the original keys, not the negated ones.\r\n\r\n@1440000bytes This way, now all CI checks are passing successfully as the `secp256k1` lib is the same as the master branch.",
      "created_at" : "2022-10-16T05:08:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1279893592",
      "id" : 1279893592,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585MSaBY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1279893592/reactions"
      },
      "updated_at" : "2022-10-16T19:22:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1279893592",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I forgot to mention that any previous index of `silentpayment` needs to be removed as it is not compatible with the last push.",
      "created_at" : "2022-10-16T20:57:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1280055958",
      "id" : 1280055958,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585MTBqW",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1280055958/reactions"
      },
      "updated_at" : "2022-10-16T20:57:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1280055958",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r999483790"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999483790"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Encoding the identifier in a different base could increase the maximum number of identifiers when stored on 2 bytes.\r\nbase10 (current) -> 100 identifiers\r\nbase16 -> 256 identifiers\r\nbase32 -> 1024 identifiers\r\nbase58 -> 3364 identifiers\r\n\r\nThe issue with a base58 HRP is that it's incompatible with BIP-173 and BIP-350, maybe the identifier could be encoded in the `data` part instead of the `hrp`? Or base32 is enough.",
      "commit_id" : "9fde79224621421245737d99f9be6c2b5a6c4ac2",
      "created_at" : "2022-10-19T13:50:23Z",
      "diff_hunk" : "@@ -59,7 +64,20 @@ class DestinationEncoder\n         std::vector<unsigned char> data = {1};\n         data.reserve(53);\n         ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, tap.begin(), tap.end());\n-        return bech32::Encode(bech32::Encoding::BECH32M, m_params.Bech32HRP(), data);\n+\n+        std::string hrp = m_params.Bech32HRP();\n+\n+        if (m_silent_payment) {\n+            hrp = m_params.SilentPaymentHRP();\n+\n+            std::ostringstream ss;\n+            ss << std::setw(2) << std::setfill('0') << m_silent_payment_index;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r999483790",
      "id" : 999483790,
      "line" : 74,
      "node_id" : "PRRC_kwDOABII5847kumO",
      "original_commit_id" : "9fde79224621421245737d99f9be6c2b5a6c4ac2",
      "original_line" : 74,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/key_io.cpp",
      "position" : 35,
      "pull_request_review_id" : 1147617433,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999483790/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-19T15:50:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999483790",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r999487623"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999487623"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Type missmatch between `int16_t` and `int32_t` of `m_silent_payment_index`",
      "commit_id" : "9fde79224621421245737d99f9be6c2b5a6c4ac2",
      "created_at" : "2022-10-19T13:52:30Z",
      "diff_hunk" : "@@ -13,6 +13,8 @@\n \n #include <string>\n \n+const int16_t SILENT_ADDRESS_MAXIMUM_IDENTIFIER = 99;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r999487623",
      "id" : 999487623,
      "line" : 16,
      "node_id" : "PRRC_kwDOABII5847kviH",
      "original_commit_id" : "9fde79224621421245737d99f9be6c2b5a6c4ac2",
      "original_line" : 16,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/key_io.h",
      "position" : 4,
      "pull_request_review_id" : 1147617433,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999487623/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-19T15:50:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/999487623",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "thanks for PoC'ing an implementation on this, @w0xlt ! in the comments on https://gist.github.com/RubenSomsen/c43b79517e7cb701ebf77eec6dbb46b8 you mention having a gist with steps for testing (https://gist.github.com/w0xlt/a7b498ac1ff14b8c292a22be789bd93f) but this link appears to be dead. do you have an updated link for testing?",
      "created_at" : "2022-10-19T18:18:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1284401633",
      "id" : 1284401633,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585Mjmnh",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1284401633/reactions"
      },
      "updated_at" : "2022-10-19T18:18:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1284401633",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
         "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/josibake/followers",
         "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/josibake",
         "id" : 7444140,
         "login" : "josibake",
         "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
         "organizations_url" : "https://api.github.com/users/josibake/orgs",
         "received_events_url" : "https://api.github.com/users/josibake/received_events",
         "repos_url" : "https://api.github.com/users/josibake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/josibake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Hi @josibake I removed old versions of the tutorial when the implementation and interface changed.\r\nThe current url is https://gist.github.com/w0xlt/c81277ae8677b6c0d3dd073893210875.",
      "created_at" : "2022-10-19T18:28:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1284413041",
      "id" : 1284413041,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585MjpZx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 1,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1284413041/reactions"
      },
      "updated_at" : "2022-10-19T19:11:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1284413041",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1001990248"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1001990248"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Another excellent suggestion @aureleoules !\r\n\r\nI've been working on this.\r\nSome examples:\r\n`sprt1la68kq44e29c0p85rknf59qs5eww6vr3dw08arakura622ce7wcvygce0uqnw3q4` for identifier `8090879`.\r\n`sprt1yvpttj5ts7z0g8dxng2ppfjua5c8z6u7068mdc8m5543nuascg33jlcpe5xc6` for identifier `35`.",
      "commit_id" : "9fde79224621421245737d99f9be6c2b5a6c4ac2",
      "created_at" : "2022-10-21T16:39:38Z",
      "diff_hunk" : "@@ -59,7 +64,20 @@ class DestinationEncoder\n         std::vector<unsigned char> data = {1};\n         data.reserve(53);\n         ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, tap.begin(), tap.end());\n-        return bech32::Encode(bech32::Encoding::BECH32M, m_params.Bech32HRP(), data);\n+\n+        std::string hrp = m_params.Bech32HRP();\n+\n+        if (m_silent_payment) {\n+            hrp = m_params.SilentPaymentHRP();\n+\n+            std::ostringstream ss;\n+            ss << std::setw(2) << std::setfill('0') << m_silent_payment_index;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1001990248",
      "id" : 1001990248,
      "in_reply_to_id" : 999483790,
      "line" : 74,
      "node_id" : "PRRC_kwDOABII5847uSho",
      "original_commit_id" : "9fde79224621421245737d99f9be6c2b5a6c4ac2",
      "original_line" : 74,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/key_io.cpp",
      "position" : 35,
      "pull_request_review_id" : 1151256691,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1001990248/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-21T16:39:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1001990248",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1002036738"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002036738"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Great, how exactly is the identifier encoded in your examples?",
      "commit_id" : "9fde79224621421245737d99f9be6c2b5a6c4ac2",
      "created_at" : "2022-10-21T17:36:13Z",
      "diff_hunk" : "@@ -59,7 +64,20 @@ class DestinationEncoder\n         std::vector<unsigned char> data = {1};\n         data.reserve(53);\n         ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, tap.begin(), tap.end());\n-        return bech32::Encode(bech32::Encoding::BECH32M, m_params.Bech32HRP(), data);\n+\n+        std::string hrp = m_params.Bech32HRP();\n+\n+        if (m_silent_payment) {\n+            hrp = m_params.SilentPaymentHRP();\n+\n+            std::ostringstream ss;\n+            ss << std::setw(2) << std::setfill('0') << m_silent_payment_index;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1002036738",
      "id" : 1002036738,
      "in_reply_to_id" : 999483790,
      "line" : 74,
      "node_id" : "PRRC_kwDOABII5847ud4C",
      "original_commit_id" : "9fde79224621421245737d99f9be6c2b5a6c4ac2",
      "original_line" : 74,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/key_io.cpp",
      "position" : 35,
      "pull_request_review_id" : 1151328202,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002036738/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-21T17:36:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002036738",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> This new push implements a new cryptographic scheme (also suggested by @RubenSomsen) that eliminates the need for PR [bitcoin-core/secp256k1#994](https://github.com/bitcoin-core/secp256k1/pull/994) and [bitcoin-core/secp256k1#1143](https://github.com/bitcoin-core/secp256k1/pull/1143).\r\n> \r\n> The new scheme basically works as follows: . If the keys used for silent payments generate a public key with odd y, then negate them when performing ECDH. . For x-only pubkeys, add 2 in front before running ECDH (so it becomes a public key with even y). . Tweak the original keys, not the negated ones.\r\n> \r\n> @1440000bytes This way, now all CI checks are passing successfully as the `secp256k1` lib is the same as the master branch.\r\n\r\nStill waiting for response particularly about the last question :  https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021003.html",
      "created_at" : "2022-10-21T23:57:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1287543056",
      "id" : 1287543056,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585MvlkQ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1287543056/reactions"
      },
      "updated_at" : "2022-10-23T14:24:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1287543056",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@1440000bytes I haven't accessed ML for a while.\r\n\r\nI replied to the email, but regarding the last question: the warning was suggested by @aureleoules in https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1276160738 and the reason was a discussion in this PR about users thinking that each address would come from a different key and not the same key.",
      "created_at" : "2022-10-23T07:05:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1288031174",
      "id" : 1288031174,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585MxcvG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1288031174/reactions"
      },
      "updated_at" : "2022-10-23T07:05:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1288031174",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1002654972"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002654972"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Currently the format is: `HRP + 00 (two digits) + V1 Segwit address (bech32m)`\r\n\r\nBut there is no need to be a segwit address. This is because in the first version the sender could pay for the original segwit address or tweak it to the silent address, but early discussions in this PR indicated a preference on the part of reviewers for a specific address for silent payments.\r\n\r\nSo the format in the examples above is different, which is:\r\n\r\n`HRP + identifier (variable length) + compressed public key (both identifier and PK are in bech32m format)`\r\n\r\nI haven't pushed it yet as the above format is not compatible with current code and also adds complexity to the code as it is not a valid scriptPubKey.\r\n\r\nHowever, here is the code used to obtain the format above (in `key_io.cpp`):\r\n\r\n<details><summary>Code</summary>\r\n<p>\r\n\r\n```c++\r\nstd::string EncodeSilentDestination(const CPubKey pubkey, const int32_t silent_payment_index)\r\n{\r\n    // The data_in is index + public key\r\n    std::vector<unsigned char> data_in = {};\r\n    std::vector<unsigned char> data_out = {};\r\n\r\n    std::vector<unsigned char> index_data = {};\r\n    unsigned char index_chunk = silent_payment_index & 0xFF;\r\n    int8_t shift = 8;\r\n\r\n    while(index_chunk != 0) {\r\n        index_data.push_back(index_chunk);\r\n        index_chunk = (silent_payment_index >> shift) & 0xFF;\r\n        shift += 8;\r\n    }\r\n\r\n    data_in.insert(data_in.end(), index_data.begin(), index_data.end());\r\n    data_in.insert(data_in.end(), pubkey.begin(), pubkey.end());\r\n\r\n    ConvertBits<8, 5, true>([&](unsigned char c) { data_out.push_back(c); }, data_in.begin(), data_in.end());\r\n\r\n    std::string hrp = Params().SilentPaymentHRP();\r\n\r\n    return bech32::Encode(bech32::Encoding::BECH32M, hrp, data_out);\r\n}\r\n\r\nstd::tuple<CPubKey, int32_t> DecodeSilentData(const std::vector<unsigned char>& data)\r\n{\r\n    if (data.size() <= 33) {\r\n        return {CPubKey(), 0};\r\n    }\r\n\r\n    std::vector<unsigned char> pubkey_data(data.end() - 33, data.end());\r\n    CPubKey pubkey{pubkey_data.begin(), pubkey_data.end()};\r\n\r\n    std::vector<unsigned char> index_data(data.begin(), data.end() - 33);\r\n\r\n    int32_t index = 0;\r\n    int shift = 0;\r\n\r\n    for (auto it = index_data.begin(); it != index_data.end(); it++) {\r\n        index |=  (*it << shift);\r\n        shift += 8;\r\n    }\r\n\r\n    return {pubkey, index};\r\n}\r\n\r\nstd::vector<unsigned char> DecodeSilentAddress(const std::string& str)\r\n{\r\n    auto params{Params()};\r\n\r\n    const auto& silent_payment_hrp = params.SilentPaymentHRP();\r\n    auto dest_silent_payment_hrp = ToLower(std::string_view(str).substr(0, params.SilentPaymentHRP().size()));\r\n\r\n    bool is_sp = dest_silent_payment_hrp == silent_payment_hrp;\r\n\r\n    if (!is_sp) {\r\n        return {};\r\n    }\r\n\r\n    std::vector<unsigned char> data;\r\n    data.clear();\r\n    const auto dec = bech32::Decode(str);\r\n    auto dec_silent_payment_hrp = dec.hrp.substr(0, params.SilentPaymentHRP().size());\r\n\r\n    if (dec.encoding != bech32::Encoding::BECH32M || dec.data.empty() || dec.hrp != silent_payment_hrp) {\r\n        return {};\r\n    }\r\n\r\n    data.reserve(((dec.data.size() - 1) * 5) / 8);\r\n    if (ConvertBits<5, 8, false>([&](unsigned char c) { data.push_back(c); }, dec.data.begin(), dec.data.end())) {\r\n        return data;\r\n    }\r\n\r\n    return {};\r\n}\r\n```\r\n</p>\r\n</details>",
      "commit_id" : "9fde79224621421245737d99f9be6c2b5a6c4ac2",
      "created_at" : "2022-10-23T07:24:48Z",
      "diff_hunk" : "@@ -59,7 +64,20 @@ class DestinationEncoder\n         std::vector<unsigned char> data = {1};\n         data.reserve(53);\n         ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, tap.begin(), tap.end());\n-        return bech32::Encode(bech32::Encoding::BECH32M, m_params.Bech32HRP(), data);\n+\n+        std::string hrp = m_params.Bech32HRP();\n+\n+        if (m_silent_payment) {\n+            hrp = m_params.SilentPaymentHRP();\n+\n+            std::ostringstream ss;\n+            ss << std::setw(2) << std::setfill('0') << m_silent_payment_index;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1002654972",
      "id" : 1002654972,
      "in_reply_to_id" : 999483790,
      "line" : 74,
      "node_id" : "PRRC_kwDOABII5847w0z8",
      "original_commit_id" : "9fde79224621421245737d99f9be6c2b5a6c4ac2",
      "original_line" : 74,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/key_io.cpp",
      "position" : 35,
      "pull_request_review_id" : 1152249252,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002654972/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-23T07:24:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1002654972",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> In cases where you don't want people to know that you're the same entity, the identifier is insufficient â you'll need a completely separate Silent Payment address which (roughly) doubles your scanning efforts, so it's much more costly in terms of performance.\r\n\r\nIf #25957 gets merged, would this still be an issue? If I'm not mistaken, the double-scanning efforts problem mostly apply when importing a backup of an sp descriptor or syncing the wallet when the chain is out-of-date of many blocks. Which is not often done, with #25957 the issue should be mitigated anyway?\r\nSo, would it be reasonable to implement both the identifier feature and the multi-sp-identity feature per wallet for those who wish/need full privacy?\r\n\r\n--\r\n\r\nAlso, rescanning a sp descriptor makes `bitcoind` crash with the following assert:\r\n> bitcoind: wallet/wallet.cpp:1315: bool wallet::CWallet::VerifySilentPayment(const CTransaction &, std::vector<std::tuple<CKey, int32_t>> &): Assertion `xOnlyPubKey.IsFullyValid()' failed.\r\n\r\nTo reproduce:\r\n```\r\n./src/bitcoind -testnet -silentpaymentindex\r\n./src/bitcoin-cli -testnet -named createwallet wallet_name=sp_crash silent_payment=true\r\n./src/bitcoin-cli -testnet -rpcwallet=sp_crash importdescriptors '[{\r\n      \"desc\": \"sp(cTXUgq3oC65nkmWjN8Q1eg1wsMPZBr526Ynfecpy4XmKtztjomrg)#vshe5dpl\", \r\n      \"timestamp\": 1607448174,\r\n      \"active\": true,\r\n      \"internal\": false,\r\n      \"next\": 0\r\n}]'\r\n```\r\n\r\nAny `sp` descriptor seems to lead to the crash.\r\n\r\nI haven't debugged the issue but my guess is that the scanning process encountered a taproot output with an invalid `xOnlyPubKey` in the block close to the timestamp `1607448174` (~2020-12-08), which should just be skipped instead of being asserted valid?",
      "created_at" : "2022-10-25T15:34:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1290758076",
      "id" : 1290758076,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585M72e8",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1290758076/reactions"
      },
      "updated_at" : "2022-10-25T15:36:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1290758076",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@aureleoules thanks for testing. They are really helpful.\r\nThe problematic output is https://blockstream.info/testnet/address/tb1pqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqkqqqqqqqqqkkkkkkf5,  whose scriptPubKey is `51200000000000000000000000000000000000000000000000000000000000000000`.\r\n\r\nI didn't know it's a valid Taproot script as the public key is invalid. The code assumes that if `TxoutType whichType = Solver(vout.scriptPubKey, solutions);` returned a `TxoutType::WITNESS_V1_TAPROOT`, both the script and the public key are valid.\r\n\r\nBut the public key in the above scriptPubKey is evidently false.\r\n\r\nI will change this validation and release a new version with the new address format, described in https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1001990248.\r\n\r\nRegarding #25957, I think it's incompatible with Silent Payments, which needs to tweak the keys for each transaction. AFAIK, there is no way to combine the silent payment scheme with Golomb-coded sets.\r\n\r\n",
      "created_at" : "2022-10-27T02:13:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1292871814",
      "id" : 1292871814,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585ND6iG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292871814/reactions"
      },
      "updated_at" : "2022-10-27T02:14:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292871814",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The following change will allow importing the descriptor.\r\n\r\n> wallet/wallet.cpp:1315\r\n```diff\r\n-        assert(xOnlyPubKey.IsFullyValid());\r\n+        if (!xOnlyPubKey.IsFullyValid()) {\r\n+            continue;\r\n+       }\r\n```\r\n\r\nIt might be better to use `-rpcclienttimeout=0` when importing or scanning `sp` descriptors.",
      "created_at" : "2022-10-27T02:58:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1292901949",
      "id" : 1292901949,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585NEB49",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292901949/reactions"
      },
      "updated_at" : "2022-10-27T02:58:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1292901949",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The last push proposes and implements a new address format.\r\nThe previous format was: `HRP + 00 (two digits) + V1 Segwit address (bech32m)`\r\n\r\nBut there is no need for a segwit script, as detailed in https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1002654972. A silent payment address only needs to expose the public key and identifier.\r\nSo the new format is:\r\n\r\n`HRP + identifier (variable length) + compressed public key (both identifier and pubkey are in bech32m format)`\r\n\r\nThe reason to use the compressed public key instead of the x-only pubkey is to save an operation and simplify the code.\r\nIf x-only pubkey were used instead of compressed public key, it would be necessary to check if the private key generates a public key with odd y and negates it if so.\r\nExposing the prefix byte in the public key makes this unnecessary.",
      "created_at" : "2022-10-29T06:00:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1295745114",
      "id" : 1295745114,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585NO4Ba",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1295745114/reactions"
      },
      "updated_at" : "2022-10-29T06:00:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1295745114",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009199941"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009199941"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ebff8b2d55d9c087c4bf8f8961bd8ec1ee51c04f\r\n```suggestion\r\n            const auto& pubkey = std::get<CPubKey>(pubkey_variant);\r\n```",
      "commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "created_at" : "2022-10-31T09:27:34Z",
      "diff_hunk" : "@@ -0,0 +1,165 @@\n+#include <index/silentpaymentindex.h>\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/disktxpos.h>\n+#include <node/blockstorage.h>\n+#include <pubkey.h>\n+#include <undo.h>\n+#include <util/system.h>\n+#include <validation.h>\n+#include <silentpayment.h>\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+\n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n+\n+constexpr uint8_t DB_SILENTPAYMENTINDEX{'s'};\n+\n+std::unique_ptr<SilentPaymentIndex> g_silentpaymentindex;\n+\n+/** Access to the silent payment index database (indexes/silentpaymentindex/) */\n+class SilentPaymentIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    bool WriteSilentPayments(const std::vector<std::pair<uint256, CPubKey>>& items);\n+};\n+\n+SilentPaymentIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"silentpaymentindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool SilentPaymentIndex::DB::WriteSilentPayments(const std::vector<std::pair<uint256, CPubKey>>& items)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& [tx_hash, pubkey] : items) {\n+        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tx_hash), pubkey);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+SilentPaymentIndex::SilentPaymentIndex(std::unique_ptr<interfaces::Chain> chain, size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : BaseIndex(std::move(chain), \"silentpaymentindex\"), m_db(std::make_unique<SilentPaymentIndex::DB>(n_cache_size, f_memory, f_wipe))\n+{}\n+\n+SilentPaymentIndex::~SilentPaymentIndex() {}\n+\n+bool SilentPaymentIndex::GetSilentPaymentKey(const CTransactionRef& tx, const CBlockIndex* blockindex, CPubKey& sum_tx_pubkeys) const\n+{\n+    if (tx->IsCoinBase()) {\n+        return false;\n+    }\n+\n+    std::unordered_set<TxoutType> tx_vout_types;\n+    for (auto& vout : tx->vout) {\n+        std::vector<std::vector<unsigned char>> solutions;\n+        TxoutType whichType = Solver(vout.scriptPubKey, solutions);\n+        tx_vout_types.insert(whichType);\n+    }\n+\n+    // Silent Payments require that the recipients use Taproot address\n+    // so one output at least must be Taproot\n+    if (tx_vout_types.find(TxoutType::WITNESS_V1_TAPROOT) == tx_vout_types.end()) {\n+        return false;\n+    }\n+\n+    CBlockUndo blockUndo;\n+    CBlock block;\n+\n+    if (!(UndoReadFromDisk(blockUndo, blockindex) && ReadBlockFromDisk(block, blockindex, Params().GetConsensus()))) {\n+        return false;\n+    }\n+\n+    CTxUndo* undoTX {nullptr};\n+    auto it = std::find_if(block.vtx.begin(), block.vtx.end(), [tx](CTransactionRef t){ return *t == *tx; });\n+    if (it != block.vtx.end()) {\n+        // -1 as blockundo does not have coinbase tx\n+        undoTX = &blockUndo.vtxundo.at(it - block.vtx.begin() - 1);\n+    }\n+\n+    if (undoTX == nullptr) {\n+        return false;\n+    }\n+\n+    assert(tx->vin.size() == undoTX->vprevout.size());\n+\n+    std::vector<XOnlyPubKey> input_xonly_pubkeys;\n+    std::vector<CPubKey> input_pubkeys;\n+\n+    for (size_t i = 0; i < tx->vin.size(); i++)\n+    {\n+        const Coin& prev_coin{undoTX->vprevout[i]};\n+\n+        const CTxIn& txin{tx->vin.at(i)};\n+\n+        auto pubkey_variant = silentpayment::ExtractPubkeyFromInput(prev_coin, txin);\n+\n+        if (std::holds_alternative<CPubKey>(pubkey_variant)) {\n+            auto pubkey = std::get<CPubKey>(pubkey_variant);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009199941",
      "id" : 1009199941,
      "line" : 102,
      "node_id" : "PRRC_kwDOABII5848JytF",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 102,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/index/silentpaymentindex.cpp",
      "position" : 102,
      "pull_request_review_id" : 1161566117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009199941/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-31T10:24:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009199941",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009200242"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009200242"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ebff8b2d55d9c087c4bf8f8961bd8ec1ee51c04f\r\n```suggestion\r\n            const auto& pubkey = std::get<XOnlyPubKey>(pubkey_variant);\r\n```",
      "commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "created_at" : "2022-10-31T09:27:51Z",
      "diff_hunk" : "@@ -0,0 +1,165 @@\n+#include <index/silentpaymentindex.h>\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/disktxpos.h>\n+#include <node/blockstorage.h>\n+#include <pubkey.h>\n+#include <undo.h>\n+#include <util/system.h>\n+#include <validation.h>\n+#include <silentpayment.h>\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+\n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n+\n+constexpr uint8_t DB_SILENTPAYMENTINDEX{'s'};\n+\n+std::unique_ptr<SilentPaymentIndex> g_silentpaymentindex;\n+\n+/** Access to the silent payment index database (indexes/silentpaymentindex/) */\n+class SilentPaymentIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    bool WriteSilentPayments(const std::vector<std::pair<uint256, CPubKey>>& items);\n+};\n+\n+SilentPaymentIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"silentpaymentindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool SilentPaymentIndex::DB::WriteSilentPayments(const std::vector<std::pair<uint256, CPubKey>>& items)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& [tx_hash, pubkey] : items) {\n+        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tx_hash), pubkey);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+SilentPaymentIndex::SilentPaymentIndex(std::unique_ptr<interfaces::Chain> chain, size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : BaseIndex(std::move(chain), \"silentpaymentindex\"), m_db(std::make_unique<SilentPaymentIndex::DB>(n_cache_size, f_memory, f_wipe))\n+{}\n+\n+SilentPaymentIndex::~SilentPaymentIndex() {}\n+\n+bool SilentPaymentIndex::GetSilentPaymentKey(const CTransactionRef& tx, const CBlockIndex* blockindex, CPubKey& sum_tx_pubkeys) const\n+{\n+    if (tx->IsCoinBase()) {\n+        return false;\n+    }\n+\n+    std::unordered_set<TxoutType> tx_vout_types;\n+    for (auto& vout : tx->vout) {\n+        std::vector<std::vector<unsigned char>> solutions;\n+        TxoutType whichType = Solver(vout.scriptPubKey, solutions);\n+        tx_vout_types.insert(whichType);\n+    }\n+\n+    // Silent Payments require that the recipients use Taproot address\n+    // so one output at least must be Taproot\n+    if (tx_vout_types.find(TxoutType::WITNESS_V1_TAPROOT) == tx_vout_types.end()) {\n+        return false;\n+    }\n+\n+    CBlockUndo blockUndo;\n+    CBlock block;\n+\n+    if (!(UndoReadFromDisk(blockUndo, blockindex) && ReadBlockFromDisk(block, blockindex, Params().GetConsensus()))) {\n+        return false;\n+    }\n+\n+    CTxUndo* undoTX {nullptr};\n+    auto it = std::find_if(block.vtx.begin(), block.vtx.end(), [tx](CTransactionRef t){ return *t == *tx; });\n+    if (it != block.vtx.end()) {\n+        // -1 as blockundo does not have coinbase tx\n+        undoTX = &blockUndo.vtxundo.at(it - block.vtx.begin() - 1);\n+    }\n+\n+    if (undoTX == nullptr) {\n+        return false;\n+    }\n+\n+    assert(tx->vin.size() == undoTX->vprevout.size());\n+\n+    std::vector<XOnlyPubKey> input_xonly_pubkeys;\n+    std::vector<CPubKey> input_pubkeys;\n+\n+    for (size_t i = 0; i < tx->vin.size(); i++)\n+    {\n+        const Coin& prev_coin{undoTX->vprevout[i]};\n+\n+        const CTxIn& txin{tx->vin.at(i)};\n+\n+        auto pubkey_variant = silentpayment::ExtractPubkeyFromInput(prev_coin, txin);\n+\n+        if (std::holds_alternative<CPubKey>(pubkey_variant)) {\n+            auto pubkey = std::get<CPubKey>(pubkey_variant);\n+            if (pubkey.IsFullyValid()) {\n+                input_pubkeys.push_back(pubkey);\n+            }\n+        } else if (std::holds_alternative<XOnlyPubKey>(pubkey_variant)) {\n+            auto pubkey = std::get<XOnlyPubKey>(pubkey_variant);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009200242",
      "id" : 1009200242,
      "line" : 107,
      "node_id" : "PRRC_kwDOABII5848Jyxy",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 107,
      "original_position" : 107,
      "original_start_line" : null,
      "path" : "src/index/silentpaymentindex.cpp",
      "position" : 107,
      "pull_request_review_id" : 1161566117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009200242/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-31T10:24:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009200242",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009201659"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009201659"
         }
      },
      "author_association" : "MEMBER",
      "body" : "5ee94ec2b7ef5f3affcde75325e795221b8f5122\r\n```suggestion\r\nstd::string EncodeSilentDestination(const CPubKey& pubkey, const int32_t silent_payment_index)\r\n```",
      "commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "created_at" : "2022-10-31T09:29:20Z",
      "diff_hunk" : "@@ -278,6 +280,39 @@ std::string EncodeDestination(const CTxDestination& dest)\n     return std::visit(DestinationEncoder(Params()), dest);\n }\n \n+std::string EncodeSilentDestination(const CPubKey pubkey, const int32_t silent_payment_index)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009201659",
      "id" : 1009201659,
      "line" : 283,
      "node_id" : "PRRC_kwDOABII5848JzH7",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 283,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/key_io.cpp",
      "position" : 13,
      "pull_request_review_id" : 1161566117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009201659/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-31T10:24:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009201659",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009203402"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009203402"
         }
      },
      "author_association" : "MEMBER",
      "body" : "5ee94ec2b7ef5f3affcde75325e795221b8f5122\r\n```suggestion\r\n    for (const auto& it : index_data) {\r\n        index |=  (it << shift);\r\n        shift += 8;\r\n    }\r\n```",
      "commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "created_at" : "2022-10-31T09:30:58Z",
      "diff_hunk" : "@@ -299,3 +334,55 @@ bool IsValidDestinationString(const std::string& str)\n {\n     return IsValidDestinationString(str, Params());\n }\n+\n+std::tuple<CPubKey, int32_t> DecodeSilentData(const std::vector<unsigned char>& data)\n+{\n+    if (data.size() <= 33) {\n+        return {CPubKey(), 0};\n+    }\n+\n+    std::vector<unsigned char> pubkey_data(data.end() - 33, data.end());\n+    CPubKey pubkey{pubkey_data.begin(), pubkey_data.end()};\n+\n+    std::vector<unsigned char> index_data(data.begin(), data.end() - 33);\n+\n+    int32_t index = 0;\n+    int shift = 0;\n+\n+    for (auto it = index_data.begin(); it != index_data.end(); it++) {\n+        index |=  (*it << shift);\n+        shift += 8;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009203402",
      "id" : 1009203402,
      "line" : 355,
      "node_id" : "PRRC_kwDOABII5848JzjK",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 355,
      "original_position" : 71,
      "original_start_line" : 352,
      "path" : "src/key_io.cpp",
      "position" : 71,
      "pull_request_review_id" : 1161566117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009203402/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 352,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-31T10:24:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009203402",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009207838"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009207838"
         }
      },
      "author_association" : "MEMBER",
      "body" : "a8931257c319e5c6e3e575171667d8f9cd61ace2\r\nuse a constructor initializer list, maybe refactor the one above as well?",
      "commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "created_at" : "2022-10-31T09:35:09Z",
      "diff_hunk" : "@@ -57,6 +57,13 @@ CTxOut::CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn)\n     scriptPubKey = scriptPubKeyIn;\n }\n \n+CTxOut::CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn, bool silentpayment)\n+{\n+    nValue = nValueIn;\n+    scriptPubKey = scriptPubKeyIn;\n+    m_silentpayment = silentpayment;\n+}\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009207838",
      "id" : 1009207838,
      "line" : 66,
      "node_id" : "PRRC_kwDOABII5848J0oe",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 66,
      "original_position" : 10,
      "original_start_line" : 60,
      "path" : "src/primitives/transaction.cpp",
      "position" : 10,
      "pull_request_review_id" : 1161566117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009207838/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 60,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-31T10:24:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009207838",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009212088"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009212088"
         }
      },
      "author_association" : "MEMBER",
      "body" : "4da30d6fd3eb9347081ecdea33470c8d212f56a9\r\n`return_val` is never asserted",
      "commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "created_at" : "2022-10-31T09:39:34Z",
      "diff_hunk" : "@@ -0,0 +1,294 @@\n+#include <silentpayment.h>\n+\n+#include <coins.h>\n+#include <key_io.h>\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+#include <secp256k1_extrakeys.h>\n+#include <arith_uint256.h>\n+\n+namespace silentpayment {\n+\n+Sender::Sender(const std::vector<std::tuple<CKey, bool>>& sender_secret_keys, const CPubKey& recipient_public_key)\n+{\n+    m_context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    const auto& [seckey, is_taproot] = sender_secret_keys.at(0);\n+\n+    unsigned char sum_seckey[32];\n+    memcpy(sum_seckey, seckey.data(), 32);\n+    assert(memcmp(sum_seckey, seckey.data(), 32) == 0);\n+\n+    if (is_taproot && seckey.GetPubKey()[0] == 3) {\n+        int return_val = secp256k1_ec_seckey_negate(m_context, sum_seckey);\n+        assert(return_val);\n+    }\n+\n+    if (sender_secret_keys.size() > 1) {\n+        for (size_t i = 1; i < sender_secret_keys.size(); i++) {\n+\n+            const auto& [sender_seckey, sender_is_taproot] = sender_secret_keys.at(i);\n+\n+            unsigned char seckey_i[32];\n+            memcpy(seckey_i, sender_seckey.begin(), 32);\n+            assert(memcmp(seckey_i, sender_seckey.begin(), 32) == 0);\n+\n+            if (sender_is_taproot && sender_seckey.GetPubKey()[0] == 3) {\n+                int return_val = secp256k1_ec_seckey_negate(m_context, seckey_i);\n+                assert(return_val);\n+            }\n+\n+            int return_val = secp256k1_ec_seckey_tweak_add(m_context, sum_seckey, seckey_i);\n+            assert(return_val);\n+        }\n+    }\n+\n+    secp256k1_pubkey parsed_recipient_public_key;\n+    int return_val = secp256k1_ec_pubkey_parse(m_context, &parsed_recipient_public_key, recipient_public_key.data(), recipient_public_key.size());\n+    assert(return_val);\n+\n+\n+    return_val = secp256k1_ecdh(m_context, m_shared_secret, &parsed_recipient_public_key, sum_seckey, nullptr, nullptr);\n+    assert(return_val);\n+\n+    // store recipient's pubkey\n+    return_val = secp256k1_ec_pubkey_parse(m_context, &m_recipient_public_key, recipient_public_key.data(), recipient_public_key.size());\n+    assert(return_val);\n+\n+    CKey ckey;\n+    ckey.Set(std::begin(m_shared_secret), std::end(m_shared_secret), true);\n+}\n+\n+Sender::~Sender()\n+{\n+    secp256k1_context_destroy(m_context);\n+    memset(m_shared_secret, 0, sizeof(m_shared_secret));\n+    memset(m_recipient_x_only_public_key.data, 0, sizeof(m_recipient_x_only_public_key.data));\n+}\n+\n+XOnlyPubKey Sender::Tweak2(const int32_t& identifier) const\n+{\n+    unsigned char shared_secret[32];\n+    memcpy(shared_secret, m_shared_secret, 32);\n+    int return_val = memcmp(shared_secret, m_shared_secret, 32);\n+    assert(return_val == 0);\n+\n+    // Add the identifier to the shared_secret\n+    arith_uint256 tweak;\n+    tweak = tweak + identifier;\n+\n+    return_val = secp256k1_ec_seckey_tweak_add(m_context, shared_secret, ArithToUint256(tweak).data());\n+    assert(return_val);\n+\n+    secp256k1_pubkey recipient_public_key;\n+    memcpy(recipient_public_key.data, m_recipient_public_key.data, 64);\n+    assert(memcmp(recipient_public_key.data, m_recipient_public_key.data, 64) == 0);\n+\n+    // Tweak the recipient's pubkey with identifier + shared_secret\n+    return_val = secp256k1_ec_pubkey_tweak_add(m_context, &recipient_public_key, shared_secret);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009212088",
      "id" : 1009212088,
      "line" : 88,
      "node_id" : "PRRC_kwDOABII5848J1q4",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 88,
      "original_position" : 88,
      "original_start_line" : null,
      "path" : "src/silentpayment.cpp",
      "position" : 88,
      "pull_request_review_id" : 1161566117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009212088/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-31T10:24:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009212088",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009213729"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009213729"
         }
      },
      "author_association" : "MEMBER",
      "body" : "4da30d6fd3eb9347081ecdea33470c8d212f56a9\r\n```suggestion\r\n    for (auto& pubkey : v_pubkeys) {\r\n        p_pubkeys.push_back(&pubkey);\r\n    }\r\n```",
      "commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "created_at" : "2022-10-31T09:41:15Z",
      "diff_hunk" : "@@ -0,0 +1,294 @@\n+#include <silentpayment.h>\n+\n+#include <coins.h>\n+#include <key_io.h>\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+#include <secp256k1_extrakeys.h>\n+#include <arith_uint256.h>\n+\n+namespace silentpayment {\n+\n+Sender::Sender(const std::vector<std::tuple<CKey, bool>>& sender_secret_keys, const CPubKey& recipient_public_key)\n+{\n+    m_context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    const auto& [seckey, is_taproot] = sender_secret_keys.at(0);\n+\n+    unsigned char sum_seckey[32];\n+    memcpy(sum_seckey, seckey.data(), 32);\n+    assert(memcmp(sum_seckey, seckey.data(), 32) == 0);\n+\n+    if (is_taproot && seckey.GetPubKey()[0] == 3) {\n+        int return_val = secp256k1_ec_seckey_negate(m_context, sum_seckey);\n+        assert(return_val);\n+    }\n+\n+    if (sender_secret_keys.size() > 1) {\n+        for (size_t i = 1; i < sender_secret_keys.size(); i++) {\n+\n+            const auto& [sender_seckey, sender_is_taproot] = sender_secret_keys.at(i);\n+\n+            unsigned char seckey_i[32];\n+            memcpy(seckey_i, sender_seckey.begin(), 32);\n+            assert(memcmp(seckey_i, sender_seckey.begin(), 32) == 0);\n+\n+            if (sender_is_taproot && sender_seckey.GetPubKey()[0] == 3) {\n+                int return_val = secp256k1_ec_seckey_negate(m_context, seckey_i);\n+                assert(return_val);\n+            }\n+\n+            int return_val = secp256k1_ec_seckey_tweak_add(m_context, sum_seckey, seckey_i);\n+            assert(return_val);\n+        }\n+    }\n+\n+    secp256k1_pubkey parsed_recipient_public_key;\n+    int return_val = secp256k1_ec_pubkey_parse(m_context, &parsed_recipient_public_key, recipient_public_key.data(), recipient_public_key.size());\n+    assert(return_val);\n+\n+\n+    return_val = secp256k1_ecdh(m_context, m_shared_secret, &parsed_recipient_public_key, sum_seckey, nullptr, nullptr);\n+    assert(return_val);\n+\n+    // store recipient's pubkey\n+    return_val = secp256k1_ec_pubkey_parse(m_context, &m_recipient_public_key, recipient_public_key.data(), recipient_public_key.size());\n+    assert(return_val);\n+\n+    CKey ckey;\n+    ckey.Set(std::begin(m_shared_secret), std::end(m_shared_secret), true);\n+}\n+\n+Sender::~Sender()\n+{\n+    secp256k1_context_destroy(m_context);\n+    memset(m_shared_secret, 0, sizeof(m_shared_secret));\n+    memset(m_recipient_x_only_public_key.data, 0, sizeof(m_recipient_x_only_public_key.data));\n+}\n+\n+XOnlyPubKey Sender::Tweak2(const int32_t& identifier) const\n+{\n+    unsigned char shared_secret[32];\n+    memcpy(shared_secret, m_shared_secret, 32);\n+    int return_val = memcmp(shared_secret, m_shared_secret, 32);\n+    assert(return_val == 0);\n+\n+    // Add the identifier to the shared_secret\n+    arith_uint256 tweak;\n+    tweak = tweak + identifier;\n+\n+    return_val = secp256k1_ec_seckey_tweak_add(m_context, shared_secret, ArithToUint256(tweak).data());\n+    assert(return_val);\n+\n+    secp256k1_pubkey recipient_public_key;\n+    memcpy(recipient_public_key.data, m_recipient_public_key.data, 64);\n+    assert(memcmp(recipient_public_key.data, m_recipient_public_key.data, 64) == 0);\n+\n+    // Tweak the recipient's pubkey with identifier + shared_secret\n+    return_val = secp256k1_ec_pubkey_tweak_add(m_context, &recipient_public_key, shared_secret);\n+\n+    // Serialize and test the tweaked public key\n+    size_t len;\n+    unsigned char serialized_output_pubkey[33];\n+    len = sizeof(serialized_output_pubkey);\n+    return_val = secp256k1_ec_pubkey_serialize(m_context, serialized_output_pubkey, &len, &recipient_public_key, SECP256K1_EC_COMPRESSED);\n+    assert(return_val);\n+\n+    CPubKey pubKey = CPubKey(serialized_output_pubkey);\n+\n+    assert(pubKey.IsFullyValid());\n+\n+    return XOnlyPubKey(pubKey);\n+}\n+\n+Recipient::Recipient(const CKey& recipient_secret_key)\n+{\n+    m_context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    int return_val = secp256k1_keypair_create(m_context, &m_recipient_keypair, recipient_secret_key.begin());\n+    assert(return_val);\n+\n+    memcpy(m_recipient_seckey, recipient_secret_key.data(), 32);\n+    assert(memcmp(m_recipient_seckey, recipient_secret_key.data(), 32) == 0);\n+}\n+\n+void Recipient::SetSenderPublicKey(const CPubKey& sender_public_key)\n+{\n+    secp256k1_pubkey sender_pubkey;\n+    int return_val = secp256k1_ec_pubkey_parse(m_context, &sender_pubkey, sender_public_key.data(), sender_public_key.size());\n+    assert(return_val);\n+\n+    return_val = secp256k1_ecdh(m_context, m_shared_secret, &sender_pubkey, m_recipient_seckey, nullptr, nullptr);\n+    assert(return_val);\n+\n+    CKey ckey;\n+    ckey.Set(std::begin(m_shared_secret), std::end(m_shared_secret), true);\n+}\n+\n+Recipient::~Recipient()\n+{\n+    secp256k1_context_destroy(m_context);\n+    memset(m_recipient_seckey, 0, sizeof(m_recipient_seckey));\n+    memset(m_shared_secret, 0, sizeof(m_shared_secret));\n+    memset(m_recipient_keypair.data, 0, sizeof(m_recipient_keypair.data));\n+}\n+\n+std::tuple<CKey,XOnlyPubKey> Recipient::Tweak2(const int32_t& identifier) const\n+{\n+    secp256k1_keypair recipient_keypair;\n+    memcpy(recipient_keypair.data, m_recipient_keypair.data, 96);\n+    assert(memcmp(recipient_keypair.data, m_recipient_keypair.data, 96) == 0);\n+\n+    unsigned char shared_secret[32];\n+    memcpy(shared_secret, m_shared_secret, 32);\n+    int return_val = memcmp(shared_secret, m_shared_secret, 32);\n+    assert(return_val == 0);\n+\n+    arith_uint256 tweak;\n+    tweak = tweak + identifier;\n+\n+    return_val = secp256k1_ec_seckey_tweak_add(m_context, shared_secret, ArithToUint256(tweak).data());\n+    assert(return_val);\n+\n+    unsigned char result_secret_key[32];\n+    return_val = secp256k1_keypair_sec(m_context, result_secret_key, &recipient_keypair);\n+    assert(return_val);\n+\n+    secp256k1_pubkey result_pubkey;\n+    return_val = secp256k1_keypair_pub(m_context, &result_pubkey, &recipient_keypair);\n+    assert(return_val);\n+\n+    return_val = secp256k1_ec_seckey_tweak_add(m_context, result_secret_key, shared_secret);\n+    assert(return_val);\n+\n+    return_val = secp256k1_ec_pubkey_tweak_add(m_context, &result_pubkey, shared_secret);\n+    assert(return_val);\n+\n+    // Serialize and test the tweaked public key\n+    size_t len;\n+    unsigned char pubkey_bytes[33];\n+    len = sizeof(pubkey_bytes);\n+    return_val = secp256k1_ec_pubkey_serialize(m_context, pubkey_bytes, &len, &result_pubkey, SECP256K1_EC_COMPRESSED);\n+    assert(return_val);\n+\n+    CKey ckey;\n+    ckey.Set(std::begin(result_secret_key), std::end(result_secret_key), true);\n+\n+    return {ckey, XOnlyPubKey{CPubKey{pubkey_bytes}}};\n+}\n+\n+CPubKey Recipient::SumPublicKeys(const std::vector<CPubKey>& sender_public_keys, const std::vector<XOnlyPubKey>& sender_x_only_public_key)\n+{\n+    auto context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    std::vector<secp256k1_pubkey> v_pubkeys;\n+\n+    for (auto& pubkey : sender_public_keys) {\n+        secp256k1_pubkey parsed_pubkey;\n+        int return_val = secp256k1_ec_pubkey_parse(context, &parsed_pubkey, pubkey.data(), pubkey.size());\n+        assert(return_val);\n+\n+        v_pubkeys.push_back(parsed_pubkey);\n+    }\n+\n+    for (auto& xpubkey : sender_x_only_public_key) {\n+        auto pubkey = xpubkey.ConvertToCompressedPubKey();\n+        secp256k1_pubkey parsed_pubkey;\n+        int return_val = secp256k1_ec_pubkey_parse(context, &parsed_pubkey, pubkey.data(), pubkey.size());\n+        assert(return_val);\n+\n+        v_pubkeys.push_back(parsed_pubkey);\n+    }\n+\n+    std::vector<secp256k1_pubkey *> p_pubkeys;\n+    for (size_t i = 0; i < v_pubkeys.size(); i++) {\n+        p_pubkeys.push_back(&v_pubkeys.at(i));\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009213729",
      "id" : 1009213729,
      "line" : 206,
      "node_id" : "PRRC_kwDOABII5848J2Eh",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 206,
      "original_position" : 206,
      "original_start_line" : 204,
      "path" : "src/silentpayment.cpp",
      "position" : 206,
      "pull_request_review_id" : 1161566117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009213729/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 204,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-31T10:24:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009213729",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009215421"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009215421"
         }
      },
      "author_association" : "MEMBER",
      "body" : "a8931257c319e5c6e3e575171667d8f9cd61ace2\r\n```suggestion\r\n            for (const auto& out : rawTx.vout) {\r\n                if (out.m_silentpayment) {\r\n```",
      "commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "created_at" : "2022-10-31T09:43:00Z",
      "diff_hunk" : "@@ -1214,11 +1214,30 @@ RPCHelpMan send()\n             InterpretFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n             PreventOutdatedOptions(options);\n \n-\n             CAmount fee;\n             int change_position;\n             bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n+\n+            bool is_silent_payment{false};\n+\n+            for (uint64_t i = 0; i < rawTx.vout.size(); i++) {\n+                if (rawTx.vout[i].m_silentpayment) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009215421",
      "id" : 1009215421,
      "line" : 1225,
      "node_id" : "PRRC_kwDOABII5848J2e9",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 1225,
      "original_position" : 13,
      "original_start_line" : 1224,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 13,
      "pull_request_review_id" : 1161566117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009215421/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1224,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-31T10:24:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009215421",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009216590"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009216590"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This code seems to be duplicated in `send` and `walletcreatefundedpsbt` RPCs, maybe wrap this in a static function?",
      "commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "created_at" : "2022-10-31T09:44:18Z",
      "diff_hunk" : "@@ -1214,11 +1214,30 @@ RPCHelpMan send()\n             InterpretFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n             PreventOutdatedOptions(options);\n \n-\n             CAmount fee;\n             int change_position;\n             bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n+\n+            bool is_silent_payment{false};\n+\n+            for (uint64_t i = 0; i < rawTx.vout.size(); i++) {\n+                if (rawTx.vout[i].m_silentpayment) {\n+                    is_silent_payment = true;\n+                    break;\n+                }\n+            }\n+\n+            if (is_silent_payment) {\n+                if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Only descriptor wallets support silent payments.\");\n+                }\n+                if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) || pwallet->IsWalletFlagSet(WALLET_FLAG_EXTERNAL_SIGNER) ) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Silent payments require access to private keys to build transactions.\");\n+                }\n+                EnsureWalletIsUnlocked(*pwallet);\n+            }\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009216590",
      "id" : 1009216590,
      "line" : 1240,
      "node_id" : "PRRC_kwDOABII5848J2xO",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 1240,
      "original_position" : 28,
      "original_start_line" : 1222,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 28,
      "pull_request_review_id" : 1161566117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009216590/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1222,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-31T10:24:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009216590",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009218091"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009218091"
         }
      },
      "author_association" : "MEMBER",
      "body" : "268c3fd560964d708fb9718548d216149065112a\r\n```suggestion\r\n        for (const auto& [_, priv_key] : m_map_keys) {\r\n```",
      "commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "created_at" : "2022-10-31T09:45:55Z",
      "diff_hunk" : "@@ -2623,6 +2684,96 @@ bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKe\n     return true;\n }\n \n+std::tuple<CKey,bool> DescriptorScriptPubKeyMan::GetPrivKeyForSilentPayment(const CScript& scriptPubKey, const bool onlyTaproot) const\n+{\n+    std::vector<std::vector<unsigned char>> solutions;\n+    TxoutType whichType = Solver(scriptPubKey, solutions);\n+\n+    std::unique_ptr<FlatSigningProvider> coin_keys = GetSigningProvider(scriptPubKey, true);\n+    if (!coin_keys || coin_keys->keys.size() != 1) {\n+        return {}; // returns an invalid private key\n+    }\n+\n+    auto& key = *coin_keys->keys.begin();\n+\n+    // Tweak the private key as GetSigningProvider returns the original key.\n+    // Taproot addresses / scriptPubKeys use tweaked public key, not the original key.\n+    if (whichType == TxoutType::WITNESS_V1_TAPROOT) {\n+\n+\n+        auto pubKeyFromScriptPubKey = XOnlyPubKey(solutions[0]);\n+\n+        // this means it is a \"rawtr\" output\n+        if (XOnlyPubKey(key.second.GetPubKey()) == pubKeyFromScriptPubKey) {\n+            return {key.second, true};\n+        }\n+\n+        TaprootSpendData spenddata;\n+        coin_keys->GetTaprootSpendData(pubKeyFromScriptPubKey, spenddata);\n+\n+        CKey priv_key;\n+        if(!key.second.TweakCKey(&spenddata.merkle_root, priv_key)) return {};\n+\n+        assert(XOnlyPubKey(priv_key.GetPubKey()) ==  pubKeyFromScriptPubKey);\n+\n+        return {priv_key, true};\n+    } else if (onlyTaproot) {\n+        return {}; // returns an invalid private key\n+    } else if (whichType == TxoutType::NONSTANDARD || whichType == TxoutType::MULTISIG || whichType == TxoutType::WITNESS_UNKNOWN ) {\n+        return {}; // returns an invalid private key\n+    } else {\n+        return {key.second, false};\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::LoadSilentRecipient()\n+{\n+    if (m_silent_recipient == nullptr) {\n+        LOCK(cs_desc_man);\n+\n+        std::vector<CKey> priv_keys;\n+\n+        for (auto& [_, priv_key] : m_map_keys) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009218091",
      "id" : 1009218091,
      "line" : 2736,
      "node_id" : "PRRC_kwDOABII5848J3Ir",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 2736,
      "original_position" : 171,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 171,
      "pull_request_review_id" : 1161566117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009218091/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-31T10:24:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009218091",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009218466"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009218466"
         }
      },
      "author_association" : "MEMBER",
      "body" : "268c3fd560964d708fb9718548d216149065112a\r\n```suggestion\r\n    const std::vector<std::tuple<CScript, XOnlyPubKey>>& tx_output_pub_keys,\r\n```",
      "commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "created_at" : "2022-10-31T09:46:20Z",
      "diff_hunk" : "@@ -2623,6 +2684,96 @@ bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKe\n     return true;\n }\n \n+std::tuple<CKey,bool> DescriptorScriptPubKeyMan::GetPrivKeyForSilentPayment(const CScript& scriptPubKey, const bool onlyTaproot) const\n+{\n+    std::vector<std::vector<unsigned char>> solutions;\n+    TxoutType whichType = Solver(scriptPubKey, solutions);\n+\n+    std::unique_ptr<FlatSigningProvider> coin_keys = GetSigningProvider(scriptPubKey, true);\n+    if (!coin_keys || coin_keys->keys.size() != 1) {\n+        return {}; // returns an invalid private key\n+    }\n+\n+    auto& key = *coin_keys->keys.begin();\n+\n+    // Tweak the private key as GetSigningProvider returns the original key.\n+    // Taproot addresses / scriptPubKeys use tweaked public key, not the original key.\n+    if (whichType == TxoutType::WITNESS_V1_TAPROOT) {\n+\n+\n+        auto pubKeyFromScriptPubKey = XOnlyPubKey(solutions[0]);\n+\n+        // this means it is a \"rawtr\" output\n+        if (XOnlyPubKey(key.second.GetPubKey()) == pubKeyFromScriptPubKey) {\n+            return {key.second, true};\n+        }\n+\n+        TaprootSpendData spenddata;\n+        coin_keys->GetTaprootSpendData(pubKeyFromScriptPubKey, spenddata);\n+\n+        CKey priv_key;\n+        if(!key.second.TweakCKey(&spenddata.merkle_root, priv_key)) return {};\n+\n+        assert(XOnlyPubKey(priv_key.GetPubKey()) ==  pubKeyFromScriptPubKey);\n+\n+        return {priv_key, true};\n+    } else if (onlyTaproot) {\n+        return {}; // returns an invalid private key\n+    } else if (whichType == TxoutType::NONSTANDARD || whichType == TxoutType::MULTISIG || whichType == TxoutType::WITNESS_UNKNOWN ) {\n+        return {}; // returns an invalid private key\n+    } else {\n+        return {key.second, false};\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::LoadSilentRecipient()\n+{\n+    if (m_silent_recipient == nullptr) {\n+        LOCK(cs_desc_man);\n+\n+        std::vector<CKey> priv_keys;\n+\n+        for (auto& [_, priv_key] : m_map_keys) {\n+            priv_keys.push_back(priv_key);\n+        }\n+\n+        assert(priv_keys.size() == 1);\n+\n+        m_silent_recipient = std::make_unique<silentpayment::Recipient>(priv_keys.at(0));\n+    }\n+}\n+\n+std::vector<std::tuple<CKey, int32_t>> DescriptorScriptPubKeyMan::VerifySilentPaymentAddress(\n+    std::vector<std::tuple<CScript, XOnlyPubKey>>& tx_output_pub_keys,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009218466",
      "id" : 1009218466,
      "line" : 2747,
      "node_id" : "PRRC_kwDOABII5848J3Oi",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 2747,
      "original_position" : 182,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 182,
      "pull_request_review_id" : 1161566117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009218466/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-31T10:24:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009218466",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009218652"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009218652"
         }
      },
      "author_association" : "MEMBER",
      "body" : "268c3fd560964d708fb9718548d216149065112a\r\n```suggestion\r\n    const CPubKey& sender_pub_key)\r\n```",
      "commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "created_at" : "2022-10-31T09:46:33Z",
      "diff_hunk" : "@@ -2623,6 +2684,96 @@ bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKe\n     return true;\n }\n \n+std::tuple<CKey,bool> DescriptorScriptPubKeyMan::GetPrivKeyForSilentPayment(const CScript& scriptPubKey, const bool onlyTaproot) const\n+{\n+    std::vector<std::vector<unsigned char>> solutions;\n+    TxoutType whichType = Solver(scriptPubKey, solutions);\n+\n+    std::unique_ptr<FlatSigningProvider> coin_keys = GetSigningProvider(scriptPubKey, true);\n+    if (!coin_keys || coin_keys->keys.size() != 1) {\n+        return {}; // returns an invalid private key\n+    }\n+\n+    auto& key = *coin_keys->keys.begin();\n+\n+    // Tweak the private key as GetSigningProvider returns the original key.\n+    // Taproot addresses / scriptPubKeys use tweaked public key, not the original key.\n+    if (whichType == TxoutType::WITNESS_V1_TAPROOT) {\n+\n+\n+        auto pubKeyFromScriptPubKey = XOnlyPubKey(solutions[0]);\n+\n+        // this means it is a \"rawtr\" output\n+        if (XOnlyPubKey(key.second.GetPubKey()) == pubKeyFromScriptPubKey) {\n+            return {key.second, true};\n+        }\n+\n+        TaprootSpendData spenddata;\n+        coin_keys->GetTaprootSpendData(pubKeyFromScriptPubKey, spenddata);\n+\n+        CKey priv_key;\n+        if(!key.second.TweakCKey(&spenddata.merkle_root, priv_key)) return {};\n+\n+        assert(XOnlyPubKey(priv_key.GetPubKey()) ==  pubKeyFromScriptPubKey);\n+\n+        return {priv_key, true};\n+    } else if (onlyTaproot) {\n+        return {}; // returns an invalid private key\n+    } else if (whichType == TxoutType::NONSTANDARD || whichType == TxoutType::MULTISIG || whichType == TxoutType::WITNESS_UNKNOWN ) {\n+        return {}; // returns an invalid private key\n+    } else {\n+        return {key.second, false};\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::LoadSilentRecipient()\n+{\n+    if (m_silent_recipient == nullptr) {\n+        LOCK(cs_desc_man);\n+\n+        std::vector<CKey> priv_keys;\n+\n+        for (auto& [_, priv_key] : m_map_keys) {\n+            priv_keys.push_back(priv_key);\n+        }\n+\n+        assert(priv_keys.size() == 1);\n+\n+        m_silent_recipient = std::make_unique<silentpayment::Recipient>(priv_keys.at(0));\n+    }\n+}\n+\n+std::vector<std::tuple<CKey, int32_t>> DescriptorScriptPubKeyMan::VerifySilentPaymentAddress(\n+    std::vector<std::tuple<CScript, XOnlyPubKey>>& tx_output_pub_keys,\n+    CPubKey& sender_pub_key)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009218652",
      "id" : 1009218652,
      "line" : 2748,
      "node_id" : "PRRC_kwDOABII5848J3Rc",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 2748,
      "original_position" : 183,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 183,
      "pull_request_review_id" : 1161566117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009218652/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-31T10:24:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009218652",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009219653"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009219653"
         }
      },
      "author_association" : "MEMBER",
      "body" : "a8931257c319e5c6e3e575171667d8f9cd61ace2\r\n```suggestion\r\n        const auto* spk_manager = dynamic_cast<DescriptorScriptPubKeyMan*>(*spk_managers.begin());\r\n```",
      "commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "created_at" : "2022-10-31T09:47:32Z",
      "diff_hunk" : "@@ -750,6 +750,54 @@ static void DiscourageFeeSniping(CMutableTransaction& tx, FastRandomContext& rng\n     }\n }\n \n+bool CreateSilentTransaction(\n+    const CWallet& wallet,\n+    const std::vector<COutput>& selected_coins,\n+    CMutableTransaction& txNew,\n+    bilingual_str& error)\n+{\n+    std::vector<std::tuple<CKey,bool>> input_private_keys;\n+\n+    for (const auto& input : selected_coins) {\n+        const auto& spk_managers = wallet.GetScriptPubKeyMans(input.txout.scriptPubKey);\n+\n+        if (spk_managers.size() != 1) {\n+            error = _(\"Only one ScriptPubKeyManager was expected for the input.\");\n+            return false;\n+        }\n+\n+        DescriptorScriptPubKeyMan* spk_manager = dynamic_cast<DescriptorScriptPubKeyMan*>(*spk_managers.begin());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009219653",
      "id" : 1009219653,
      "line" : 769,
      "node_id" : "PRRC_kwDOABII5848J3hF",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 769,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 20,
      "pull_request_review_id" : 1161566117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009219653/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-31T10:24:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009219653",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009220476"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009220476"
         }
      },
      "author_association" : "MEMBER",
      "body" : "a8931257c319e5c6e3e575171667d8f9cd61ace2\r\n```suggestion\r\n        input_private_keys.emplace_back(sender_secret_key, is_taproot);\r\n```",
      "commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "created_at" : "2022-10-31T09:48:23Z",
      "diff_hunk" : "@@ -750,6 +750,54 @@ static void DiscourageFeeSniping(CMutableTransaction& tx, FastRandomContext& rng\n     }\n }\n \n+bool CreateSilentTransaction(\n+    const CWallet& wallet,\n+    const std::vector<COutput>& selected_coins,\n+    CMutableTransaction& txNew,\n+    bilingual_str& error)\n+{\n+    std::vector<std::tuple<CKey,bool>> input_private_keys;\n+\n+    for (const auto& input : selected_coins) {\n+        const auto& spk_managers = wallet.GetScriptPubKeyMans(input.txout.scriptPubKey);\n+\n+        if (spk_managers.size() != 1) {\n+            error = _(\"Only one ScriptPubKeyManager was expected for the input.\");\n+            return false;\n+        }\n+\n+        DescriptorScriptPubKeyMan* spk_manager = dynamic_cast<DescriptorScriptPubKeyMan*>(*spk_managers.begin());\n+\n+        const auto& [sender_secret_key, is_taproot]{spk_manager->GetPrivKeyForSilentPayment(input.txout.scriptPubKey, /*onlyTaproot=*/ false)};\n+\n+        if (!sender_secret_key.IsValid()) {\n+            error = _(\"The private key of one of the inputs was not found.\");\n+            return false;\n+        }\n+\n+        input_private_keys.push_back({sender_secret_key, is_taproot});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009220476",
      "id" : 1009220476,
      "line" : 778,
      "node_id" : "PRRC_kwDOABII5848J3t8",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 778,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : 29,
      "pull_request_review_id" : 1161566117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009220476/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-31T10:24:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009220476",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009221659"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009221659"
         }
      },
      "author_association" : "MEMBER",
      "body" : "a8931257c319e5c6e3e575171667d8f9cd61ace2\r\n```suggestion\r\n    for (const auto& out : txNew.vout) {\r\n        if (out.m_silentpayment) {\r\n            is_silent_payment = true;\r\n            break;\r\n        }\r\n    }\r\n```",
      "commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "created_at" : "2022-10-31T09:49:35Z",
      "diff_hunk" : "@@ -913,6 +961,19 @@ static util::Result<CreatedTransactionResult> CreateTransactionInternal(\n     }\n     TRACE5(coin_selection, selected_coins, wallet.GetName().c_str(), GetAlgorithmName(result->GetAlgo()).c_str(), result->GetTarget(), result->GetWaste(), result->GetSelectedValue());\n \n+    bool is_silent_payment{false};\n+\n+    for (uint64_t i = 0; i < txNew.vout.size(); i++) {\n+        if (txNew.vout[i].m_silentpayment) {\n+            is_silent_payment = true;\n+            break;\n+        }\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009221659",
      "id" : 1009221659,
      "line" : 971,
      "node_id" : "PRRC_kwDOABII5848J4Ab",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 971,
      "original_position" : 75,
      "original_start_line" : 966,
      "path" : "src/wallet/spend.cpp",
      "position" : 75,
      "pull_request_review_id" : 1161566117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009221659/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 966,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-31T10:24:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009221659",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009225555"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009225555"
         }
      },
      "author_association" : "MEMBER",
      "body" : "268c3fd560964d708fb9718548d216149065112a\r\n```suggestion\r\nCoin CWallet::FindPreviousCoin(const CTxIn& txin) const\r\n```",
      "commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "created_at" : "2022-10-31T09:53:42Z",
      "diff_hunk" : "@@ -1156,70 +1193,235 @@ bool CWallet::LoadToWallet(const uint256& hash, const UpdateWalletTxFn& fill_wtx\n     return true;\n }\n \n-bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxState& state, bool fUpdate, bool rescanning_old_block)\n+bool CWallet::HandleNewTxBelongingToMe(const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block)\n {\n-    const CTransaction& tx = *ptx;\n-    {\n-        AssertLockHeld(cs_wallet);\n-\n-        if (auto* conf = std::get_if<TxStateConfirmed>(&state)) {\n-            for (const CTxIn& txin : tx.vin) {\n-                std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n-                while (range.first != range.second) {\n-                    if (range.first->second != tx.GetHash()) {\n-                        WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), conf->confirmed_block_hash.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n-                        MarkConflicted(conf->confirmed_block_hash, conf->confirmed_block_height, range.first->second);\n-                    }\n-                    range.first++;\n+    AssertLockHeld(cs_wallet);\n+\n+    /* Check if any keys in the wallet keypool that were supposed to be unused\n+        * have appeared in a new transaction. If so, remove those keys from the keypool.\n+        * This can happen when restoring an old wallet backup that does not contain\n+        * the mostly recently created transactions from newer versions of the wallet.\n+        */\n+\n+    // loop though all outputs\n+    for (const CTxOut& txout: tx.vout) {\n+        for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n+            for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n+                // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n+                if (!dest.internal.has_value()) {\n+                    dest.internal = IsInternalScriptPubKeyMan(spk_man);\n+                }\n+\n+                // skip if can't determine whether it's a receiving address or not\n+                if (!dest.internal.has_value()) continue;\n+\n+                // If this is a receiving address and it's not in the address book yet\n+                // (e.g. it wasn't generated on this node or we're restoring from backup)\n+                // add it to the address book for proper transaction accounting\n+                if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n+                    SetAddressBook(dest.dest, \"\", \"receive\");\n                 }\n             }\n         }\n+    }\n \n-        bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n-        if (fExisted && !fUpdate) return false;\n-        if (fExisted || IsMine(tx) || IsFromMe(tx))\n-        {\n-            /* Check if any keys in the wallet keypool that were supposed to be unused\n-             * have appeared in a new transaction. If so, remove those keys from the keypool.\n-             * This can happen when restoring an old wallet backup that does not contain\n-             * the mostly recently created transactions from newer versions of the wallet.\n-             */\n-\n-            // loop though all outputs\n-            for (const CTxOut& txout: tx.vout) {\n-                for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n-                    for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n-                        // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n-                        if (!dest.internal.has_value()) {\n-                            dest.internal = IsInternalScriptPubKeyMan(spk_man);\n-                        }\n+    // Block disconnection override an abandoned tx as unconfirmed\n+    // which means user may have to call abandontransaction again\n+    TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n+    CWalletTx* wtx = AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n+    if (!wtx) {\n+        // Can only be nullptr if there was a db write error (missing db, read-only db or a db engine internal writing error).\n+        // As we only store arriving transaction in this process, and we don't want an inconsistent state, let's throw an error.\n+        throw std::runtime_error(\"DB error adding transaction to wallet, write failed\");\n+    }\n+    return true;\n+}\n \n-                        // skip if can't determine whether it's a receiving address or not\n-                        if (!dest.internal.has_value()) continue;\n+bool CWallet::AddSilentScriptKeyMan(\n+    const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block, const std::vector<std::tuple<CKey, int32_t>>& rawTrKeys)\n+{\n+    WalletLogPrintf(\"Silent Transaction identified: %s.\\n\", tx.GetHash().ToString());\n \n-                        // If this is a receiving address and it's not in the address book yet\n-                        // (e.g. it wasn't generated on this node or we're restoring from backup)\n-                        // add it to the address book for proper transaction accounting\n-                        if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n-                            SetAddressBook(dest.dest, \"\", \"receive\");\n-                        }\n-                    }\n+    for(const auto& [key, identifier]: rawTrKeys) {\n+\n+        std::string desc = \"rawtr(\" + EncodeSecret(key) + \")\";\n+        std::string checksum = GetDescriptorChecksum(desc);\n+\n+        auto timestamp = std::chrono::duration_cast<std::chrono::microseconds>(\n+            std::chrono::system_clock::now().time_since_epoch()).count();\n+\n+        std::string desc_check = desc + \"#\" + checksum;\n+\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(desc_check, keys, error, /* require_checksum = */ true);\n+        assert(parsed_desc);\n+\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+\n+        // Need to ExpandPrivate to check if private keys are available for all pubkeys\n+        FlatSigningProvider expand_keys;\n+        std::vector<CScript> scripts;\n+        assert(parsed_desc->Expand(0, keys, scripts, expand_keys));\n+        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        std::string label;\n+\n+        if (m_silent_address_book.count(identifier)) {\n+            auto entry = m_silent_address_book[identifier];\n+            label = entry.m_label;\n+        } else {\n+            std::stringstream ss;\n+            ss << identifier;\n+            label = ss.str();\n+        }\n+\n+        auto existing_spk_manager = GetDescriptorScriptPubKeyMan(w_desc);\n+        if (!existing_spk_manager) {\n+            auto spk_manager = AddWalletDescriptor(w_desc, keys, label, false);\n+            assert(spk_manager != nullptr);\n+        }\n+    }\n+\n+    return HandleNewTxBelongingToMe(tx, state, rescanning_old_block);\n+}\n+\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxState& state, bool fUpdate, bool rescanning_old_block)\n+{\n+    const CTransaction& tx = *ptx;\n+\n+    AssertLockHeld(cs_wallet);\n+\n+    std::vector<std::tuple<CKey, int32_t>> rawTrKeys;\n+\n+    if (auto* conf = std::get_if<TxStateConfirmed>(&state)) {\n+        for (const CTxIn& txin : tx.vin) {\n+            std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n+            while (range.first != range.second) {\n+                if (range.first->second != tx.GetHash()) {\n+                    WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), conf->confirmed_block_hash.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n+                    MarkConflicted(conf->confirmed_block_hash, conf->confirmed_block_height, range.first->second);\n                 }\n+                range.first++;\n             }\n+        }\n+    }\n+\n+    bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n+    if (fExisted && !fUpdate) return false;\n+\n+    bool ret = (fExisted || IsMine(tx) || IsFromMe(tx)) ? HandleNewTxBelongingToMe(tx, state, rescanning_old_block) : false;\n+    if (IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENT) && VerifySilentPayment(tx, rawTrKeys)) {\n+        ret = AddSilentScriptKeyMan(tx, state, rescanning_old_block, rawTrKeys) || ret;\n+    }\n+    return ret;\n+}\n+\n+Coin CWallet::FindPreviousCoin(const CTxIn& txin)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009225555",
      "id" : 1009225555,
      "line" : 1322,
      "node_id" : "PRRC_kwDOABII5848J49T",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 1322,
      "original_position" : 247,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 247,
      "pull_request_review_id" : 1161566117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009225555/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-31T10:24:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009225555",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009227644"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009227644"
         }
      },
      "author_association" : "MEMBER",
      "body" : "a56b75609aafbf6ea1a9c1a280ccd3133c28d13b\r\nis this intended?",
      "commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "created_at" : "2022-10-31T09:55:55Z",
      "diff_hunk" : "@@ -1156,70 +1193,235 @@ bool CWallet::LoadToWallet(const uint256& hash, const UpdateWalletTxFn& fill_wtx\n     return true;\n }\n \n-bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxState& state, bool fUpdate, bool rescanning_old_block)\n+bool CWallet::HandleNewTxBelongingToMe(const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block)\n {\n-    const CTransaction& tx = *ptx;\n-    {\n-        AssertLockHeld(cs_wallet);\n-\n-        if (auto* conf = std::get_if<TxStateConfirmed>(&state)) {\n-            for (const CTxIn& txin : tx.vin) {\n-                std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n-                while (range.first != range.second) {\n-                    if (range.first->second != tx.GetHash()) {\n-                        WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), conf->confirmed_block_hash.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n-                        MarkConflicted(conf->confirmed_block_hash, conf->confirmed_block_height, range.first->second);\n-                    }\n-                    range.first++;\n+    AssertLockHeld(cs_wallet);\n+\n+    /* Check if any keys in the wallet keypool that were supposed to be unused\n+        * have appeared in a new transaction. If so, remove those keys from the keypool.\n+        * This can happen when restoring an old wallet backup that does not contain\n+        * the mostly recently created transactions from newer versions of the wallet.\n+        */\n+\n+    // loop though all outputs\n+    for (const CTxOut& txout: tx.vout) {\n+        for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n+            for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n+                // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n+                if (!dest.internal.has_value()) {\n+                    dest.internal = IsInternalScriptPubKeyMan(spk_man);\n+                }\n+\n+                // skip if can't determine whether it's a receiving address or not\n+                if (!dest.internal.has_value()) continue;\n+\n+                // If this is a receiving address and it's not in the address book yet\n+                // (e.g. it wasn't generated on this node or we're restoring from backup)\n+                // add it to the address book for proper transaction accounting\n+                if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n+                    SetAddressBook(dest.dest, \"\", \"receive\");\n                 }\n             }\n         }\n+    }\n \n-        bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n-        if (fExisted && !fUpdate) return false;\n-        if (fExisted || IsMine(tx) || IsFromMe(tx))\n-        {\n-            /* Check if any keys in the wallet keypool that were supposed to be unused\n-             * have appeared in a new transaction. If so, remove those keys from the keypool.\n-             * This can happen when restoring an old wallet backup that does not contain\n-             * the mostly recently created transactions from newer versions of the wallet.\n-             */\n-\n-            // loop though all outputs\n-            for (const CTxOut& txout: tx.vout) {\n-                for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n-                    for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n-                        // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n-                        if (!dest.internal.has_value()) {\n-                            dest.internal = IsInternalScriptPubKeyMan(spk_man);\n-                        }\n+    // Block disconnection override an abandoned tx as unconfirmed\n+    // which means user may have to call abandontransaction again\n+    TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n+    CWalletTx* wtx = AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n+    if (!wtx) {\n+        // Can only be nullptr if there was a db write error (missing db, read-only db or a db engine internal writing error).\n+        // As we only store arriving transaction in this process, and we don't want an inconsistent state, let's throw an error.\n+        throw std::runtime_error(\"DB error adding transaction to wallet, write failed\");\n+    }\n+    return true;\n+}\n \n-                        // skip if can't determine whether it's a receiving address or not\n-                        if (!dest.internal.has_value()) continue;\n+bool CWallet::AddSilentScriptKeyMan(\n+    const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block, const std::vector<std::tuple<CKey, int32_t>>& rawTrKeys)\n+{\n+    WalletLogPrintf(\"Silent Transaction identified: %s.\\n\", tx.GetHash().ToString());\n \n-                        // If this is a receiving address and it's not in the address book yet\n-                        // (e.g. it wasn't generated on this node or we're restoring from backup)\n-                        // add it to the address book for proper transaction accounting\n-                        if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n-                            SetAddressBook(dest.dest, \"\", \"receive\");\n-                        }\n-                    }\n+    for(const auto& [key, identifier]: rawTrKeys) {\n+\n+        std::string desc = \"rawtr(\" + EncodeSecret(key) + \")\";\n+        std::string checksum = GetDescriptorChecksum(desc);\n+\n+        auto timestamp = std::chrono::duration_cast<std::chrono::microseconds>(\n+            std::chrono::system_clock::now().time_since_epoch()).count();\n+\n+        std::string desc_check = desc + \"#\" + checksum;\n+\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(desc_check, keys, error, /* require_checksum = */ true);\n+        assert(parsed_desc);\n+\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+\n+        // Need to ExpandPrivate to check if private keys are available for all pubkeys\n+        FlatSigningProvider expand_keys;\n+        std::vector<CScript> scripts;\n+        assert(parsed_desc->Expand(0, keys, scripts, expand_keys));\n+        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        std::string label;\n+\n+        if (m_silent_address_book.count(identifier)) {\n+            auto entry = m_silent_address_book[identifier];\n+            label = entry.m_label;\n+        } else {\n+            std::stringstream ss;\n+            ss << identifier;\n+            label = ss.str();\n+        }\n+\n+        auto existing_spk_manager = GetDescriptorScriptPubKeyMan(w_desc);\n+        if (!existing_spk_manager) {\n+            auto spk_manager = AddWalletDescriptor(w_desc, keys, label, false);\n+            assert(spk_manager != nullptr);\n+        }\n+    }\n+\n+    return HandleNewTxBelongingToMe(tx, state, rescanning_old_block);\n+}\n+\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxState& state, bool fUpdate, bool rescanning_old_block)\n+{\n+    const CTransaction& tx = *ptx;\n+\n+    AssertLockHeld(cs_wallet);\n+\n+    std::vector<std::tuple<CKey, int32_t>> rawTrKeys;\n+\n+    if (auto* conf = std::get_if<TxStateConfirmed>(&state)) {\n+        for (const CTxIn& txin : tx.vin) {\n+            std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n+            while (range.first != range.second) {\n+                if (range.first->second != tx.GetHash()) {\n+                    WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), conf->confirmed_block_hash.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n+                    MarkConflicted(conf->confirmed_block_hash, conf->confirmed_block_height, range.first->second);\n                 }\n+                range.first++;\n             }\n+        }\n+    }\n+\n+    bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n+    if (fExisted && !fUpdate) return false;\n+\n+    bool ret = (fExisted || IsMine(tx) || IsFromMe(tx)) ? HandleNewTxBelongingToMe(tx, state, rescanning_old_block) : false;\n+    if (IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENT) && VerifySilentPayment(tx, rawTrKeys)) {\n+        ret = AddSilentScriptKeyMan(tx, state, rescanning_old_block, rawTrKeys) || ret;\n+    }\n+    return ret;\n+}\n+\n+Coin CWallet::FindPreviousCoin(const CTxIn& txin)\n+{\n+    // Find the UTXO being spent in UTXO Set to learn the transaction type\n+    std::map<COutPoint, Coin> coins;\n+    coins[txin.prevout];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009227644",
      "id" : 1009227644,
      "line" : 1326,
      "node_id" : "PRRC_kwDOABII5848J5d8",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 1326,
      "original_position" : 251,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 251,
      "pull_request_review_id" : 1161566117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009227644/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-31T10:24:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009227644",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009229121"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009229121"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This seems to be duplicated code from `wallet/wallet.cpp:1384` and `index/silentpaymentindex.cpp:101`, can you re-use it?",
      "commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "created_at" : "2022-10-31T09:57:28Z",
      "diff_hunk" : "@@ -1156,70 +1193,235 @@ bool CWallet::LoadToWallet(const uint256& hash, const UpdateWalletTxFn& fill_wtx\n     return true;\n }\n \n-bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxState& state, bool fUpdate, bool rescanning_old_block)\n+bool CWallet::HandleNewTxBelongingToMe(const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block)\n {\n-    const CTransaction& tx = *ptx;\n-    {\n-        AssertLockHeld(cs_wallet);\n-\n-        if (auto* conf = std::get_if<TxStateConfirmed>(&state)) {\n-            for (const CTxIn& txin : tx.vin) {\n-                std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n-                while (range.first != range.second) {\n-                    if (range.first->second != tx.GetHash()) {\n-                        WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), conf->confirmed_block_hash.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n-                        MarkConflicted(conf->confirmed_block_hash, conf->confirmed_block_height, range.first->second);\n-                    }\n-                    range.first++;\n+    AssertLockHeld(cs_wallet);\n+\n+    /* Check if any keys in the wallet keypool that were supposed to be unused\n+        * have appeared in a new transaction. If so, remove those keys from the keypool.\n+        * This can happen when restoring an old wallet backup that does not contain\n+        * the mostly recently created transactions from newer versions of the wallet.\n+        */\n+\n+    // loop though all outputs\n+    for (const CTxOut& txout: tx.vout) {\n+        for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n+            for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n+                // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n+                if (!dest.internal.has_value()) {\n+                    dest.internal = IsInternalScriptPubKeyMan(spk_man);\n+                }\n+\n+                // skip if can't determine whether it's a receiving address or not\n+                if (!dest.internal.has_value()) continue;\n+\n+                // If this is a receiving address and it's not in the address book yet\n+                // (e.g. it wasn't generated on this node or we're restoring from backup)\n+                // add it to the address book for proper transaction accounting\n+                if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n+                    SetAddressBook(dest.dest, \"\", \"receive\");\n                 }\n             }\n         }\n+    }\n \n-        bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n-        if (fExisted && !fUpdate) return false;\n-        if (fExisted || IsMine(tx) || IsFromMe(tx))\n-        {\n-            /* Check if any keys in the wallet keypool that were supposed to be unused\n-             * have appeared in a new transaction. If so, remove those keys from the keypool.\n-             * This can happen when restoring an old wallet backup that does not contain\n-             * the mostly recently created transactions from newer versions of the wallet.\n-             */\n-\n-            // loop though all outputs\n-            for (const CTxOut& txout: tx.vout) {\n-                for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n-                    for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n-                        // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n-                        if (!dest.internal.has_value()) {\n-                            dest.internal = IsInternalScriptPubKeyMan(spk_man);\n-                        }\n+    // Block disconnection override an abandoned tx as unconfirmed\n+    // which means user may have to call abandontransaction again\n+    TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n+    CWalletTx* wtx = AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n+    if (!wtx) {\n+        // Can only be nullptr if there was a db write error (missing db, read-only db or a db engine internal writing error).\n+        // As we only store arriving transaction in this process, and we don't want an inconsistent state, let's throw an error.\n+        throw std::runtime_error(\"DB error adding transaction to wallet, write failed\");\n+    }\n+    return true;\n+}\n \n-                        // skip if can't determine whether it's a receiving address or not\n-                        if (!dest.internal.has_value()) continue;\n+bool CWallet::AddSilentScriptKeyMan(\n+    const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block, const std::vector<std::tuple<CKey, int32_t>>& rawTrKeys)\n+{\n+    WalletLogPrintf(\"Silent Transaction identified: %s.\\n\", tx.GetHash().ToString());\n \n-                        // If this is a receiving address and it's not in the address book yet\n-                        // (e.g. it wasn't generated on this node or we're restoring from backup)\n-                        // add it to the address book for proper transaction accounting\n-                        if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n-                            SetAddressBook(dest.dest, \"\", \"receive\");\n-                        }\n-                    }\n+    for(const auto& [key, identifier]: rawTrKeys) {\n+\n+        std::string desc = \"rawtr(\" + EncodeSecret(key) + \")\";\n+        std::string checksum = GetDescriptorChecksum(desc);\n+\n+        auto timestamp = std::chrono::duration_cast<std::chrono::microseconds>(\n+            std::chrono::system_clock::now().time_since_epoch()).count();\n+\n+        std::string desc_check = desc + \"#\" + checksum;\n+\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(desc_check, keys, error, /* require_checksum = */ true);\n+        assert(parsed_desc);\n+\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+\n+        // Need to ExpandPrivate to check if private keys are available for all pubkeys\n+        FlatSigningProvider expand_keys;\n+        std::vector<CScript> scripts;\n+        assert(parsed_desc->Expand(0, keys, scripts, expand_keys));\n+        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        std::string label;\n+\n+        if (m_silent_address_book.count(identifier)) {\n+            auto entry = m_silent_address_book[identifier];\n+            label = entry.m_label;\n+        } else {\n+            std::stringstream ss;\n+            ss << identifier;\n+            label = ss.str();\n+        }\n+\n+        auto existing_spk_manager = GetDescriptorScriptPubKeyMan(w_desc);\n+        if (!existing_spk_manager) {\n+            auto spk_manager = AddWalletDescriptor(w_desc, keys, label, false);\n+            assert(spk_manager != nullptr);\n+        }\n+    }\n+\n+    return HandleNewTxBelongingToMe(tx, state, rescanning_old_block);\n+}\n+\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxState& state, bool fUpdate, bool rescanning_old_block)\n+{\n+    const CTransaction& tx = *ptx;\n+\n+    AssertLockHeld(cs_wallet);\n+\n+    std::vector<std::tuple<CKey, int32_t>> rawTrKeys;\n+\n+    if (auto* conf = std::get_if<TxStateConfirmed>(&state)) {\n+        for (const CTxIn& txin : tx.vin) {\n+            std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n+            while (range.first != range.second) {\n+                if (range.first->second != tx.GetHash()) {\n+                    WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), conf->confirmed_block_hash.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n+                    MarkConflicted(conf->confirmed_block_hash, conf->confirmed_block_height, range.first->second);\n                 }\n+                range.first++;\n             }\n+        }\n+    }\n+\n+    bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n+    if (fExisted && !fUpdate) return false;\n+\n+    bool ret = (fExisted || IsMine(tx) || IsFromMe(tx)) ? HandleNewTxBelongingToMe(tx, state, rescanning_old_block) : false;\n+    if (IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENT) && VerifySilentPayment(tx, rawTrKeys)) {\n+        ret = AddSilentScriptKeyMan(tx, state, rescanning_old_block, rawTrKeys) || ret;\n+    }\n+    return ret;\n+}\n+\n+Coin CWallet::FindPreviousCoin(const CTxIn& txin)\n+{\n+    // Find the UTXO being spent in UTXO Set to learn the transaction type\n+    std::map<COutPoint, Coin> coins;\n+    coins[txin.prevout];\n+    chain().findCoins(coins);\n+\n+    auto pos = coins.find(txin.prevout);\n+\n+    Coin coin = pos->second;\n+\n+    // TODO: can more than one txin.prevout be in the mempool (RBF) ?\n+    pos++;\n+    assert( pos == coins.end() );\n+\n+    return coin;\n+}\n+\n+bool CWallet::VerifySilentPayment(const CTransaction& tx, std::vector<std::tuple<CKey, int32_t>>& rawTrKeys)\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    if (tx.IsCoinBase() || tx.vin.empty()) return false;\n+\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) return false;\n \n-            // Block disconnection override an abandoned tx as unconfirmed\n-            // which means user may have to call abandontransaction again\n-            TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n-            CWalletTx* wtx = AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n-            if (!wtx) {\n-                // Can only be nullptr if there was a db write error (missing db, read-only db or a db engine internal writing error).\n-                // As we only store arriving transaction in this process, and we don't want an inconsistent state, let's throw an error.\n-                throw std::runtime_error(\"DB error adding transaction to wallet, write failed\");\n+    std::vector<std::tuple<CScript, XOnlyPubKey>> outputPubKeys;\n+\n+    for (auto& vout : tx.vout) {\n+\n+        if (IsMine(vout)) {\n+            continue;\n+        }\n+\n+        std::vector<std::vector<unsigned char>> solutions;\n+        TxoutType whichType = Solver(vout.scriptPubKey, solutions);\n+\n+        // Silent Payments require that the recipients use Taproot address\n+        if (whichType != TxoutType::WITNESS_V1_TAPROOT) {\n+            continue;\n+        }\n+\n+        auto xOnlyPubKey = XOnlyPubKey(solutions[0]);\n+\n+        if (!xOnlyPubKey.IsFullyValid()) {\n+            continue;\n+        }\n+\n+        outputPubKeys.emplace_back(vout.scriptPubKey, xOnlyPubKey);\n+    }\n+\n+    if (outputPubKeys.empty()) {\n+        return false;\n+    }\n+\n+    std::vector<XOnlyPubKey> input_xonly_pubkeys;\n+    std::vector<CPubKey> input_pubkeys;\n+\n+    for (const CTxIn& txin : tx.vin) {\n+        const Coin prev_coin{FindPreviousCoin(txin)};\n+\n+        auto pubkey_variant = silentpayment::ExtractPubkeyFromInput(prev_coin, txin);\n+\n+        if (std::holds_alternative<CPubKey>(pubkey_variant)) {\n+            auto pubkey = std::get<CPubKey>(pubkey_variant);\n+            if (pubkey.IsFullyValid()) {\n+                input_pubkeys.push_back(pubkey);\n+            }\n+        } else if (std::holds_alternative<XOnlyPubKey>(pubkey_variant)) {\n+            auto pubkey = std::get<XOnlyPubKey>(pubkey_variant);\n+            if (pubkey.IsFullyValid()) {\n+                input_xonly_pubkeys.push_back(pubkey);\n             }\n-            return true;\n         }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1009229121",
      "id" : 1009229121,
      "line" : 1395,
      "node_id" : "PRRC_kwDOABII5848J51B",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 1395,
      "original_position" : 329,
      "original_start_line" : 1385,
      "path" : "src/wallet/wallet.cpp",
      "position" : 329,
      "pull_request_review_id" : 1161566117,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009229121/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1385,
      "start_side" : "RIGHT",
      "updated_at" : "2022-10-31T10:24:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1009229121",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I think this is very cool work and hopefully will be added to some ecosystem wallets in future but unsure whether it should be included in the scope for the Core wallet (the Core wallet is already attempting to do a lot e.g. complex scripting support and has been subject to a number of significant re-architectures recently). I guess that decision falls to the maintainers and long term contributors of the Core wallet as if this is merged it will need to be maintained by them. Scope creep is hard to push back on especially when the work is genuinely promising and interesting but it has to be done sometimes unfortunately.\r\n\r\nPerhaps the wallet scope discussion can happen (if it needs to happen) in an issue as to not disrupt the review of this PR. ",
      "created_at" : "2022-10-31T10:49:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1296911815",
      "id" : 1296911815,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585NTU3H",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1296911815/reactions"
      },
      "updated_at" : "2022-10-31T10:49:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1296911815",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I think this is very cool work and hopefully will be added to some ecosystem wallets in future but unsure whether it should be included in the scope for the Core wallet (the Core wallet is already attempting to do a lot e.g. complex scripting support and has been subject to a number of significant re-architectures recently). I guess that decision falls to the maintainers and long term contributors of the Core wallet as if this is merged it will need to be maintained by them. Scope creep is hard to push back on especially when the work is genuinely promising and interesting but it has to be done sometimes unfortunately.\r\n> \r\n> Perhaps the wallet scope discussion can happen (if it needs to happen) in an issue as to not disrupt the review of this PR.\r\n\r\nThis is a basic feature that should exist in every bitcoin wallet.\r\n\r\nI appreciate the specs by @RubenSomsen, code by @w0xlt and respect all the reviewers.\r\n\r\nWould love to see this merged and available in v25.0 so that every bitcoin core user can share their silent payment address on social media and accept payments with privacy.",
      "created_at" : "2022-10-31T11:01:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1296923395",
      "id" : 1296923395,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585NTXsD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1296923395/reactions"
      },
      "updated_at" : "2022-10-31T11:01:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1296923395",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1010983782"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1010983782"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in 05ef1b48bfd6cb466bac118a917449b1d26d043d.",
      "commit_id" : "b8bb17fbf2f9cef672810fe6902b212194702871",
      "created_at" : "2022-11-01T23:08:52Z",
      "diff_hunk" : "@@ -0,0 +1,165 @@\n+#include <index/silentpaymentindex.h>\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/disktxpos.h>\n+#include <node/blockstorage.h>\n+#include <pubkey.h>\n+#include <undo.h>\n+#include <util/system.h>\n+#include <validation.h>\n+#include <silentpayment.h>\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+\n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n+\n+constexpr uint8_t DB_SILENTPAYMENTINDEX{'s'};\n+\n+std::unique_ptr<SilentPaymentIndex> g_silentpaymentindex;\n+\n+/** Access to the silent payment index database (indexes/silentpaymentindex/) */\n+class SilentPaymentIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    bool WriteSilentPayments(const std::vector<std::pair<uint256, CPubKey>>& items);\n+};\n+\n+SilentPaymentIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"silentpaymentindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool SilentPaymentIndex::DB::WriteSilentPayments(const std::vector<std::pair<uint256, CPubKey>>& items)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& [tx_hash, pubkey] : items) {\n+        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tx_hash), pubkey);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+SilentPaymentIndex::SilentPaymentIndex(std::unique_ptr<interfaces::Chain> chain, size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : BaseIndex(std::move(chain), \"silentpaymentindex\"), m_db(std::make_unique<SilentPaymentIndex::DB>(n_cache_size, f_memory, f_wipe))\n+{}\n+\n+SilentPaymentIndex::~SilentPaymentIndex() {}\n+\n+bool SilentPaymentIndex::GetSilentPaymentKey(const CTransactionRef& tx, const CBlockIndex* blockindex, CPubKey& sum_tx_pubkeys) const\n+{\n+    if (tx->IsCoinBase()) {\n+        return false;\n+    }\n+\n+    std::unordered_set<TxoutType> tx_vout_types;\n+    for (auto& vout : tx->vout) {\n+        std::vector<std::vector<unsigned char>> solutions;\n+        TxoutType whichType = Solver(vout.scriptPubKey, solutions);\n+        tx_vout_types.insert(whichType);\n+    }\n+\n+    // Silent Payments require that the recipients use Taproot address\n+    // so one output at least must be Taproot\n+    if (tx_vout_types.find(TxoutType::WITNESS_V1_TAPROOT) == tx_vout_types.end()) {\n+        return false;\n+    }\n+\n+    CBlockUndo blockUndo;\n+    CBlock block;\n+\n+    if (!(UndoReadFromDisk(blockUndo, blockindex) && ReadBlockFromDisk(block, blockindex, Params().GetConsensus()))) {\n+        return false;\n+    }\n+\n+    CTxUndo* undoTX {nullptr};\n+    auto it = std::find_if(block.vtx.begin(), block.vtx.end(), [tx](CTransactionRef t){ return *t == *tx; });\n+    if (it != block.vtx.end()) {\n+        // -1 as blockundo does not have coinbase tx\n+        undoTX = &blockUndo.vtxundo.at(it - block.vtx.begin() - 1);\n+    }\n+\n+    if (undoTX == nullptr) {\n+        return false;\n+    }\n+\n+    assert(tx->vin.size() == undoTX->vprevout.size());\n+\n+    std::vector<XOnlyPubKey> input_xonly_pubkeys;\n+    std::vector<CPubKey> input_pubkeys;\n+\n+    for (size_t i = 0; i < tx->vin.size(); i++)\n+    {\n+        const Coin& prev_coin{undoTX->vprevout[i]};\n+\n+        const CTxIn& txin{tx->vin.at(i)};\n+\n+        auto pubkey_variant = silentpayment::ExtractPubkeyFromInput(prev_coin, txin);\n+\n+        if (std::holds_alternative<CPubKey>(pubkey_variant)) {\n+            auto pubkey = std::get<CPubKey>(pubkey_variant);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1010983782",
      "id" : 1010983782,
      "in_reply_to_id" : 1009199941,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848QmNm",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 102,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/index/silentpaymentindex.cpp",
      "position" : null,
      "pull_request_review_id" : 1164168170,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1010983782/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-01T23:08:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1010983782",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1010983858"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1010983858"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in 05ef1b48bfd6cb466bac118a917449b1d26d043d.",
      "commit_id" : "b8bb17fbf2f9cef672810fe6902b212194702871",
      "created_at" : "2022-11-01T23:09:03Z",
      "diff_hunk" : "@@ -0,0 +1,165 @@\n+#include <index/silentpaymentindex.h>\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/disktxpos.h>\n+#include <node/blockstorage.h>\n+#include <pubkey.h>\n+#include <undo.h>\n+#include <util/system.h>\n+#include <validation.h>\n+#include <silentpayment.h>\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+\n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n+\n+constexpr uint8_t DB_SILENTPAYMENTINDEX{'s'};\n+\n+std::unique_ptr<SilentPaymentIndex> g_silentpaymentindex;\n+\n+/** Access to the silent payment index database (indexes/silentpaymentindex/) */\n+class SilentPaymentIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    bool WriteSilentPayments(const std::vector<std::pair<uint256, CPubKey>>& items);\n+};\n+\n+SilentPaymentIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"silentpaymentindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool SilentPaymentIndex::DB::WriteSilentPayments(const std::vector<std::pair<uint256, CPubKey>>& items)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& [tx_hash, pubkey] : items) {\n+        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tx_hash), pubkey);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+SilentPaymentIndex::SilentPaymentIndex(std::unique_ptr<interfaces::Chain> chain, size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : BaseIndex(std::move(chain), \"silentpaymentindex\"), m_db(std::make_unique<SilentPaymentIndex::DB>(n_cache_size, f_memory, f_wipe))\n+{}\n+\n+SilentPaymentIndex::~SilentPaymentIndex() {}\n+\n+bool SilentPaymentIndex::GetSilentPaymentKey(const CTransactionRef& tx, const CBlockIndex* blockindex, CPubKey& sum_tx_pubkeys) const\n+{\n+    if (tx->IsCoinBase()) {\n+        return false;\n+    }\n+\n+    std::unordered_set<TxoutType> tx_vout_types;\n+    for (auto& vout : tx->vout) {\n+        std::vector<std::vector<unsigned char>> solutions;\n+        TxoutType whichType = Solver(vout.scriptPubKey, solutions);\n+        tx_vout_types.insert(whichType);\n+    }\n+\n+    // Silent Payments require that the recipients use Taproot address\n+    // so one output at least must be Taproot\n+    if (tx_vout_types.find(TxoutType::WITNESS_V1_TAPROOT) == tx_vout_types.end()) {\n+        return false;\n+    }\n+\n+    CBlockUndo blockUndo;\n+    CBlock block;\n+\n+    if (!(UndoReadFromDisk(blockUndo, blockindex) && ReadBlockFromDisk(block, blockindex, Params().GetConsensus()))) {\n+        return false;\n+    }\n+\n+    CTxUndo* undoTX {nullptr};\n+    auto it = std::find_if(block.vtx.begin(), block.vtx.end(), [tx](CTransactionRef t){ return *t == *tx; });\n+    if (it != block.vtx.end()) {\n+        // -1 as blockundo does not have coinbase tx\n+        undoTX = &blockUndo.vtxundo.at(it - block.vtx.begin() - 1);\n+    }\n+\n+    if (undoTX == nullptr) {\n+        return false;\n+    }\n+\n+    assert(tx->vin.size() == undoTX->vprevout.size());\n+\n+    std::vector<XOnlyPubKey> input_xonly_pubkeys;\n+    std::vector<CPubKey> input_pubkeys;\n+\n+    for (size_t i = 0; i < tx->vin.size(); i++)\n+    {\n+        const Coin& prev_coin{undoTX->vprevout[i]};\n+\n+        const CTxIn& txin{tx->vin.at(i)};\n+\n+        auto pubkey_variant = silentpayment::ExtractPubkeyFromInput(prev_coin, txin);\n+\n+        if (std::holds_alternative<CPubKey>(pubkey_variant)) {\n+            auto pubkey = std::get<CPubKey>(pubkey_variant);\n+            if (pubkey.IsFullyValid()) {\n+                input_pubkeys.push_back(pubkey);\n+            }\n+        } else if (std::holds_alternative<XOnlyPubKey>(pubkey_variant)) {\n+            auto pubkey = std::get<XOnlyPubKey>(pubkey_variant);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1010983858",
      "id" : 1010983858,
      "in_reply_to_id" : 1009200242,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848QmOy",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 107,
      "original_position" : 107,
      "original_start_line" : null,
      "path" : "src/index/silentpaymentindex.cpp",
      "position" : null,
      "pull_request_review_id" : 1164168289,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1010983858/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-01T23:09:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1010983858",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1010983985"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1010983985"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in 7f71bc26087227fb0659800eaffa3c4198e6109e.",
      "commit_id" : "b8bb17fbf2f9cef672810fe6902b212194702871",
      "created_at" : "2022-11-01T23:09:20Z",
      "diff_hunk" : "@@ -278,6 +280,39 @@ std::string EncodeDestination(const CTxDestination& dest)\n     return std::visit(DestinationEncoder(Params()), dest);\n }\n \n+std::string EncodeSilentDestination(const CPubKey pubkey, const int32_t silent_payment_index)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1010983985",
      "id" : 1010983985,
      "in_reply_to_id" : 1009201659,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848QmQx",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 283,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/key_io.cpp",
      "position" : null,
      "pull_request_review_id" : 1164168476,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1010983985/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-01T23:09:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1010983985",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011005629"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011005629"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/commit/7f71bc26087227fb0659800eaffa3c4198e6109e.",
      "commit_id" : "b8bb17fbf2f9cef672810fe6902b212194702871",
      "created_at" : "2022-11-01T23:46:28Z",
      "diff_hunk" : "@@ -299,3 +334,55 @@ bool IsValidDestinationString(const std::string& str)\n {\n     return IsValidDestinationString(str, Params());\n }\n+\n+std::tuple<CPubKey, int32_t> DecodeSilentData(const std::vector<unsigned char>& data)\n+{\n+    if (data.size() <= 33) {\n+        return {CPubKey(), 0};\n+    }\n+\n+    std::vector<unsigned char> pubkey_data(data.end() - 33, data.end());\n+    CPubKey pubkey{pubkey_data.begin(), pubkey_data.end()};\n+\n+    std::vector<unsigned char> index_data(data.begin(), data.end() - 33);\n+\n+    int32_t index = 0;\n+    int shift = 0;\n+\n+    for (auto it = index_data.begin(); it != index_data.end(); it++) {\n+        index |=  (*it << shift);\n+        shift += 8;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011005629",
      "id" : 1011005629,
      "in_reply_to_id" : 1009203402,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848Qri9",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 355,
      "original_position" : 71,
      "original_start_line" : 352,
      "path" : "src/key_io.cpp",
      "position" : null,
      "pull_request_review_id" : 1164195220,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011005629/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-11-01T23:46:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011005629",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011005814"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011005814"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in e833dd60f8bceff2d81acea7b0aadfb1b97baa71.",
      "commit_id" : "b8bb17fbf2f9cef672810fe6902b212194702871",
      "created_at" : "2022-11-01T23:46:47Z",
      "diff_hunk" : "@@ -57,6 +57,13 @@ CTxOut::CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn)\n     scriptPubKey = scriptPubKeyIn;\n }\n \n+CTxOut::CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn, bool silentpayment)\n+{\n+    nValue = nValueIn;\n+    scriptPubKey = scriptPubKeyIn;\n+    m_silentpayment = silentpayment;\n+}\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011005814",
      "id" : 1011005814,
      "in_reply_to_id" : 1009207838,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848Qrl2",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 61,
      "original_position" : 10,
      "original_start_line" : 60,
      "path" : "src/primitives/transaction.cpp",
      "position" : null,
      "pull_request_review_id" : 1164195432,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011005814/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-11-01T23:46:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011005814",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011006007"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011006007"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in b6b55768c0b0fbc4632a3e4be31583349c637b96.",
      "commit_id" : "b8bb17fbf2f9cef672810fe6902b212194702871",
      "created_at" : "2022-11-01T23:47:10Z",
      "diff_hunk" : "@@ -0,0 +1,294 @@\n+#include <silentpayment.h>\n+\n+#include <coins.h>\n+#include <key_io.h>\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+#include <secp256k1_extrakeys.h>\n+#include <arith_uint256.h>\n+\n+namespace silentpayment {\n+\n+Sender::Sender(const std::vector<std::tuple<CKey, bool>>& sender_secret_keys, const CPubKey& recipient_public_key)\n+{\n+    m_context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    const auto& [seckey, is_taproot] = sender_secret_keys.at(0);\n+\n+    unsigned char sum_seckey[32];\n+    memcpy(sum_seckey, seckey.data(), 32);\n+    assert(memcmp(sum_seckey, seckey.data(), 32) == 0);\n+\n+    if (is_taproot && seckey.GetPubKey()[0] == 3) {\n+        int return_val = secp256k1_ec_seckey_negate(m_context, sum_seckey);\n+        assert(return_val);\n+    }\n+\n+    if (sender_secret_keys.size() > 1) {\n+        for (size_t i = 1; i < sender_secret_keys.size(); i++) {\n+\n+            const auto& [sender_seckey, sender_is_taproot] = sender_secret_keys.at(i);\n+\n+            unsigned char seckey_i[32];\n+            memcpy(seckey_i, sender_seckey.begin(), 32);\n+            assert(memcmp(seckey_i, sender_seckey.begin(), 32) == 0);\n+\n+            if (sender_is_taproot && sender_seckey.GetPubKey()[0] == 3) {\n+                int return_val = secp256k1_ec_seckey_negate(m_context, seckey_i);\n+                assert(return_val);\n+            }\n+\n+            int return_val = secp256k1_ec_seckey_tweak_add(m_context, sum_seckey, seckey_i);\n+            assert(return_val);\n+        }\n+    }\n+\n+    secp256k1_pubkey parsed_recipient_public_key;\n+    int return_val = secp256k1_ec_pubkey_parse(m_context, &parsed_recipient_public_key, recipient_public_key.data(), recipient_public_key.size());\n+    assert(return_val);\n+\n+\n+    return_val = secp256k1_ecdh(m_context, m_shared_secret, &parsed_recipient_public_key, sum_seckey, nullptr, nullptr);\n+    assert(return_val);\n+\n+    // store recipient's pubkey\n+    return_val = secp256k1_ec_pubkey_parse(m_context, &m_recipient_public_key, recipient_public_key.data(), recipient_public_key.size());\n+    assert(return_val);\n+\n+    CKey ckey;\n+    ckey.Set(std::begin(m_shared_secret), std::end(m_shared_secret), true);\n+}\n+\n+Sender::~Sender()\n+{\n+    secp256k1_context_destroy(m_context);\n+    memset(m_shared_secret, 0, sizeof(m_shared_secret));\n+    memset(m_recipient_x_only_public_key.data, 0, sizeof(m_recipient_x_only_public_key.data));\n+}\n+\n+XOnlyPubKey Sender::Tweak2(const int32_t& identifier) const\n+{\n+    unsigned char shared_secret[32];\n+    memcpy(shared_secret, m_shared_secret, 32);\n+    int return_val = memcmp(shared_secret, m_shared_secret, 32);\n+    assert(return_val == 0);\n+\n+    // Add the identifier to the shared_secret\n+    arith_uint256 tweak;\n+    tweak = tweak + identifier;\n+\n+    return_val = secp256k1_ec_seckey_tweak_add(m_context, shared_secret, ArithToUint256(tweak).data());\n+    assert(return_val);\n+\n+    secp256k1_pubkey recipient_public_key;\n+    memcpy(recipient_public_key.data, m_recipient_public_key.data, 64);\n+    assert(memcmp(recipient_public_key.data, m_recipient_public_key.data, 64) == 0);\n+\n+    // Tweak the recipient's pubkey with identifier + shared_secret\n+    return_val = secp256k1_ec_pubkey_tweak_add(m_context, &recipient_public_key, shared_secret);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011006007",
      "id" : 1011006007,
      "in_reply_to_id" : 1009212088,
      "line" : 88,
      "node_id" : "PRRC_kwDOABII5848Qro3",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 88,
      "original_position" : 88,
      "original_start_line" : null,
      "path" : "src/silentpayment.cpp",
      "position" : 88,
      "pull_request_review_id" : 1164195636,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011006007/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-01T23:47:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011006007",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011006232"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011006232"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/commit/b6b55768c0b0fbc4632a3e4be31583349c637b96.",
      "commit_id" : "b8bb17fbf2f9cef672810fe6902b212194702871",
      "created_at" : "2022-11-01T23:47:39Z",
      "diff_hunk" : "@@ -0,0 +1,294 @@\n+#include <silentpayment.h>\n+\n+#include <coins.h>\n+#include <key_io.h>\n+#include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n+#include <secp256k1_extrakeys.h>\n+#include <arith_uint256.h>\n+\n+namespace silentpayment {\n+\n+Sender::Sender(const std::vector<std::tuple<CKey, bool>>& sender_secret_keys, const CPubKey& recipient_public_key)\n+{\n+    m_context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    const auto& [seckey, is_taproot] = sender_secret_keys.at(0);\n+\n+    unsigned char sum_seckey[32];\n+    memcpy(sum_seckey, seckey.data(), 32);\n+    assert(memcmp(sum_seckey, seckey.data(), 32) == 0);\n+\n+    if (is_taproot && seckey.GetPubKey()[0] == 3) {\n+        int return_val = secp256k1_ec_seckey_negate(m_context, sum_seckey);\n+        assert(return_val);\n+    }\n+\n+    if (sender_secret_keys.size() > 1) {\n+        for (size_t i = 1; i < sender_secret_keys.size(); i++) {\n+\n+            const auto& [sender_seckey, sender_is_taproot] = sender_secret_keys.at(i);\n+\n+            unsigned char seckey_i[32];\n+            memcpy(seckey_i, sender_seckey.begin(), 32);\n+            assert(memcmp(seckey_i, sender_seckey.begin(), 32) == 0);\n+\n+            if (sender_is_taproot && sender_seckey.GetPubKey()[0] == 3) {\n+                int return_val = secp256k1_ec_seckey_negate(m_context, seckey_i);\n+                assert(return_val);\n+            }\n+\n+            int return_val = secp256k1_ec_seckey_tweak_add(m_context, sum_seckey, seckey_i);\n+            assert(return_val);\n+        }\n+    }\n+\n+    secp256k1_pubkey parsed_recipient_public_key;\n+    int return_val = secp256k1_ec_pubkey_parse(m_context, &parsed_recipient_public_key, recipient_public_key.data(), recipient_public_key.size());\n+    assert(return_val);\n+\n+\n+    return_val = secp256k1_ecdh(m_context, m_shared_secret, &parsed_recipient_public_key, sum_seckey, nullptr, nullptr);\n+    assert(return_val);\n+\n+    // store recipient's pubkey\n+    return_val = secp256k1_ec_pubkey_parse(m_context, &m_recipient_public_key, recipient_public_key.data(), recipient_public_key.size());\n+    assert(return_val);\n+\n+    CKey ckey;\n+    ckey.Set(std::begin(m_shared_secret), std::end(m_shared_secret), true);\n+}\n+\n+Sender::~Sender()\n+{\n+    secp256k1_context_destroy(m_context);\n+    memset(m_shared_secret, 0, sizeof(m_shared_secret));\n+    memset(m_recipient_x_only_public_key.data, 0, sizeof(m_recipient_x_only_public_key.data));\n+}\n+\n+XOnlyPubKey Sender::Tweak2(const int32_t& identifier) const\n+{\n+    unsigned char shared_secret[32];\n+    memcpy(shared_secret, m_shared_secret, 32);\n+    int return_val = memcmp(shared_secret, m_shared_secret, 32);\n+    assert(return_val == 0);\n+\n+    // Add the identifier to the shared_secret\n+    arith_uint256 tweak;\n+    tweak = tweak + identifier;\n+\n+    return_val = secp256k1_ec_seckey_tweak_add(m_context, shared_secret, ArithToUint256(tweak).data());\n+    assert(return_val);\n+\n+    secp256k1_pubkey recipient_public_key;\n+    memcpy(recipient_public_key.data, m_recipient_public_key.data, 64);\n+    assert(memcmp(recipient_public_key.data, m_recipient_public_key.data, 64) == 0);\n+\n+    // Tweak the recipient's pubkey with identifier + shared_secret\n+    return_val = secp256k1_ec_pubkey_tweak_add(m_context, &recipient_public_key, shared_secret);\n+\n+    // Serialize and test the tweaked public key\n+    size_t len;\n+    unsigned char serialized_output_pubkey[33];\n+    len = sizeof(serialized_output_pubkey);\n+    return_val = secp256k1_ec_pubkey_serialize(m_context, serialized_output_pubkey, &len, &recipient_public_key, SECP256K1_EC_COMPRESSED);\n+    assert(return_val);\n+\n+    CPubKey pubKey = CPubKey(serialized_output_pubkey);\n+\n+    assert(pubKey.IsFullyValid());\n+\n+    return XOnlyPubKey(pubKey);\n+}\n+\n+Recipient::Recipient(const CKey& recipient_secret_key)\n+{\n+    m_context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    int return_val = secp256k1_keypair_create(m_context, &m_recipient_keypair, recipient_secret_key.begin());\n+    assert(return_val);\n+\n+    memcpy(m_recipient_seckey, recipient_secret_key.data(), 32);\n+    assert(memcmp(m_recipient_seckey, recipient_secret_key.data(), 32) == 0);\n+}\n+\n+void Recipient::SetSenderPublicKey(const CPubKey& sender_public_key)\n+{\n+    secp256k1_pubkey sender_pubkey;\n+    int return_val = secp256k1_ec_pubkey_parse(m_context, &sender_pubkey, sender_public_key.data(), sender_public_key.size());\n+    assert(return_val);\n+\n+    return_val = secp256k1_ecdh(m_context, m_shared_secret, &sender_pubkey, m_recipient_seckey, nullptr, nullptr);\n+    assert(return_val);\n+\n+    CKey ckey;\n+    ckey.Set(std::begin(m_shared_secret), std::end(m_shared_secret), true);\n+}\n+\n+Recipient::~Recipient()\n+{\n+    secp256k1_context_destroy(m_context);\n+    memset(m_recipient_seckey, 0, sizeof(m_recipient_seckey));\n+    memset(m_shared_secret, 0, sizeof(m_shared_secret));\n+    memset(m_recipient_keypair.data, 0, sizeof(m_recipient_keypair.data));\n+}\n+\n+std::tuple<CKey,XOnlyPubKey> Recipient::Tweak2(const int32_t& identifier) const\n+{\n+    secp256k1_keypair recipient_keypair;\n+    memcpy(recipient_keypair.data, m_recipient_keypair.data, 96);\n+    assert(memcmp(recipient_keypair.data, m_recipient_keypair.data, 96) == 0);\n+\n+    unsigned char shared_secret[32];\n+    memcpy(shared_secret, m_shared_secret, 32);\n+    int return_val = memcmp(shared_secret, m_shared_secret, 32);\n+    assert(return_val == 0);\n+\n+    arith_uint256 tweak;\n+    tweak = tweak + identifier;\n+\n+    return_val = secp256k1_ec_seckey_tweak_add(m_context, shared_secret, ArithToUint256(tweak).data());\n+    assert(return_val);\n+\n+    unsigned char result_secret_key[32];\n+    return_val = secp256k1_keypair_sec(m_context, result_secret_key, &recipient_keypair);\n+    assert(return_val);\n+\n+    secp256k1_pubkey result_pubkey;\n+    return_val = secp256k1_keypair_pub(m_context, &result_pubkey, &recipient_keypair);\n+    assert(return_val);\n+\n+    return_val = secp256k1_ec_seckey_tweak_add(m_context, result_secret_key, shared_secret);\n+    assert(return_val);\n+\n+    return_val = secp256k1_ec_pubkey_tweak_add(m_context, &result_pubkey, shared_secret);\n+    assert(return_val);\n+\n+    // Serialize and test the tweaked public key\n+    size_t len;\n+    unsigned char pubkey_bytes[33];\n+    len = sizeof(pubkey_bytes);\n+    return_val = secp256k1_ec_pubkey_serialize(m_context, pubkey_bytes, &len, &result_pubkey, SECP256K1_EC_COMPRESSED);\n+    assert(return_val);\n+\n+    CKey ckey;\n+    ckey.Set(std::begin(result_secret_key), std::end(result_secret_key), true);\n+\n+    return {ckey, XOnlyPubKey{CPubKey{pubkey_bytes}}};\n+}\n+\n+CPubKey Recipient::SumPublicKeys(const std::vector<CPubKey>& sender_public_keys, const std::vector<XOnlyPubKey>& sender_x_only_public_key)\n+{\n+    auto context = secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY);\n+\n+    std::vector<secp256k1_pubkey> v_pubkeys;\n+\n+    for (auto& pubkey : sender_public_keys) {\n+        secp256k1_pubkey parsed_pubkey;\n+        int return_val = secp256k1_ec_pubkey_parse(context, &parsed_pubkey, pubkey.data(), pubkey.size());\n+        assert(return_val);\n+\n+        v_pubkeys.push_back(parsed_pubkey);\n+    }\n+\n+    for (auto& xpubkey : sender_x_only_public_key) {\n+        auto pubkey = xpubkey.ConvertToCompressedPubKey();\n+        secp256k1_pubkey parsed_pubkey;\n+        int return_val = secp256k1_ec_pubkey_parse(context, &parsed_pubkey, pubkey.data(), pubkey.size());\n+        assert(return_val);\n+\n+        v_pubkeys.push_back(parsed_pubkey);\n+    }\n+\n+    std::vector<secp256k1_pubkey *> p_pubkeys;\n+    for (size_t i = 0; i < v_pubkeys.size(); i++) {\n+        p_pubkeys.push_back(&v_pubkeys.at(i));\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011006232",
      "id" : 1011006232,
      "in_reply_to_id" : 1009213729,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848QrsY",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 207,
      "original_position" : 206,
      "original_start_line" : 204,
      "path" : "src/silentpayment.cpp",
      "position" : null,
      "pull_request_review_id" : 1164195918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011006232/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-11-01T23:47:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011006232",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011006732"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011006732"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in e833dd60f8bceff2d81acea7b0aadfb1b97baa71.",
      "commit_id" : "b8bb17fbf2f9cef672810fe6902b212194702871",
      "created_at" : "2022-11-01T23:48:39Z",
      "diff_hunk" : "@@ -1214,11 +1214,30 @@ RPCHelpMan send()\n             InterpretFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n             PreventOutdatedOptions(options);\n \n-\n             CAmount fee;\n             int change_position;\n             bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n+\n+            bool is_silent_payment{false};\n+\n+            for (uint64_t i = 0; i < rawTx.vout.size(); i++) {\n+                if (rawTx.vout[i].m_silentpayment) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011006732",
      "id" : 1011006732,
      "in_reply_to_id" : 1009215421,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848Qr0M",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 1225,
      "original_position" : 13,
      "original_start_line" : 1224,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1164196545,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011006732/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-11-01T23:48:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011006732",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011006834"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011006834"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in e833dd60f8bceff2d81acea7b0aadfb1b97baa71.",
      "commit_id" : "b8bb17fbf2f9cef672810fe6902b212194702871",
      "created_at" : "2022-11-01T23:48:48Z",
      "diff_hunk" : "@@ -1214,11 +1214,30 @@ RPCHelpMan send()\n             InterpretFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\n             PreventOutdatedOptions(options);\n \n-\n             CAmount fee;\n             int change_position;\n             bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n+\n+            bool is_silent_payment{false};\n+\n+            for (uint64_t i = 0; i < rawTx.vout.size(); i++) {\n+                if (rawTx.vout[i].m_silentpayment) {\n+                    is_silent_payment = true;\n+                    break;\n+                }\n+            }\n+\n+            if (is_silent_payment) {\n+                if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Only descriptor wallets support silent payments.\");\n+                }\n+                if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) || pwallet->IsWalletFlagSet(WALLET_FLAG_EXTERNAL_SIGNER) ) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Silent payments require access to private keys to build transactions.\");\n+                }\n+                EnsureWalletIsUnlocked(*pwallet);\n+            }\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011006834",
      "id" : 1011006834,
      "in_reply_to_id" : 1009216590,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848Qr1y",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 1245,
      "original_position" : 28,
      "original_start_line" : 1222,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1164196793,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011006834/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-11-01T23:48:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011006834",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011007448"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007448"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in 94bbc986d176244658a931037dab67de4d9fdb4a.",
      "commit_id" : "b8bb17fbf2f9cef672810fe6902b212194702871",
      "created_at" : "2022-11-01T23:49:39Z",
      "diff_hunk" : "@@ -2623,6 +2684,96 @@ bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKe\n     return true;\n }\n \n+std::tuple<CKey,bool> DescriptorScriptPubKeyMan::GetPrivKeyForSilentPayment(const CScript& scriptPubKey, const bool onlyTaproot) const\n+{\n+    std::vector<std::vector<unsigned char>> solutions;\n+    TxoutType whichType = Solver(scriptPubKey, solutions);\n+\n+    std::unique_ptr<FlatSigningProvider> coin_keys = GetSigningProvider(scriptPubKey, true);\n+    if (!coin_keys || coin_keys->keys.size() != 1) {\n+        return {}; // returns an invalid private key\n+    }\n+\n+    auto& key = *coin_keys->keys.begin();\n+\n+    // Tweak the private key as GetSigningProvider returns the original key.\n+    // Taproot addresses / scriptPubKeys use tweaked public key, not the original key.\n+    if (whichType == TxoutType::WITNESS_V1_TAPROOT) {\n+\n+\n+        auto pubKeyFromScriptPubKey = XOnlyPubKey(solutions[0]);\n+\n+        // this means it is a \"rawtr\" output\n+        if (XOnlyPubKey(key.second.GetPubKey()) == pubKeyFromScriptPubKey) {\n+            return {key.second, true};\n+        }\n+\n+        TaprootSpendData spenddata;\n+        coin_keys->GetTaprootSpendData(pubKeyFromScriptPubKey, spenddata);\n+\n+        CKey priv_key;\n+        if(!key.second.TweakCKey(&spenddata.merkle_root, priv_key)) return {};\n+\n+        assert(XOnlyPubKey(priv_key.GetPubKey()) ==  pubKeyFromScriptPubKey);\n+\n+        return {priv_key, true};\n+    } else if (onlyTaproot) {\n+        return {}; // returns an invalid private key\n+    } else if (whichType == TxoutType::NONSTANDARD || whichType == TxoutType::MULTISIG || whichType == TxoutType::WITNESS_UNKNOWN ) {\n+        return {}; // returns an invalid private key\n+    } else {\n+        return {key.second, false};\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::LoadSilentRecipient()\n+{\n+    if (m_silent_recipient == nullptr) {\n+        LOCK(cs_desc_man);\n+\n+        std::vector<CKey> priv_keys;\n+\n+        for (auto& [_, priv_key] : m_map_keys) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011007448",
      "id" : 1011007448,
      "in_reply_to_id" : 1009218091,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848Qr_Y",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 2736,
      "original_position" : 171,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : null,
      "pull_request_review_id" : 1164197819,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007448/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-01T23:49:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007448",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011007449"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007449"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in 94bbc986d176244658a931037dab67de4d9fdb4a.",
      "commit_id" : "b8bb17fbf2f9cef672810fe6902b212194702871",
      "created_at" : "2022-11-01T23:49:39Z",
      "diff_hunk" : "@@ -2623,6 +2684,96 @@ bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKe\n     return true;\n }\n \n+std::tuple<CKey,bool> DescriptorScriptPubKeyMan::GetPrivKeyForSilentPayment(const CScript& scriptPubKey, const bool onlyTaproot) const\n+{\n+    std::vector<std::vector<unsigned char>> solutions;\n+    TxoutType whichType = Solver(scriptPubKey, solutions);\n+\n+    std::unique_ptr<FlatSigningProvider> coin_keys = GetSigningProvider(scriptPubKey, true);\n+    if (!coin_keys || coin_keys->keys.size() != 1) {\n+        return {}; // returns an invalid private key\n+    }\n+\n+    auto& key = *coin_keys->keys.begin();\n+\n+    // Tweak the private key as GetSigningProvider returns the original key.\n+    // Taproot addresses / scriptPubKeys use tweaked public key, not the original key.\n+    if (whichType == TxoutType::WITNESS_V1_TAPROOT) {\n+\n+\n+        auto pubKeyFromScriptPubKey = XOnlyPubKey(solutions[0]);\n+\n+        // this means it is a \"rawtr\" output\n+        if (XOnlyPubKey(key.second.GetPubKey()) == pubKeyFromScriptPubKey) {\n+            return {key.second, true};\n+        }\n+\n+        TaprootSpendData spenddata;\n+        coin_keys->GetTaprootSpendData(pubKeyFromScriptPubKey, spenddata);\n+\n+        CKey priv_key;\n+        if(!key.second.TweakCKey(&spenddata.merkle_root, priv_key)) return {};\n+\n+        assert(XOnlyPubKey(priv_key.GetPubKey()) ==  pubKeyFromScriptPubKey);\n+\n+        return {priv_key, true};\n+    } else if (onlyTaproot) {\n+        return {}; // returns an invalid private key\n+    } else if (whichType == TxoutType::NONSTANDARD || whichType == TxoutType::MULTISIG || whichType == TxoutType::WITNESS_UNKNOWN ) {\n+        return {}; // returns an invalid private key\n+    } else {\n+        return {key.second, false};\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::LoadSilentRecipient()\n+{\n+    if (m_silent_recipient == nullptr) {\n+        LOCK(cs_desc_man);\n+\n+        std::vector<CKey> priv_keys;\n+\n+        for (auto& [_, priv_key] : m_map_keys) {\n+            priv_keys.push_back(priv_key);\n+        }\n+\n+        assert(priv_keys.size() == 1);\n+\n+        m_silent_recipient = std::make_unique<silentpayment::Recipient>(priv_keys.at(0));\n+    }\n+}\n+\n+std::vector<std::tuple<CKey, int32_t>> DescriptorScriptPubKeyMan::VerifySilentPaymentAddress(\n+    std::vector<std::tuple<CScript, XOnlyPubKey>>& tx_output_pub_keys,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011007449",
      "id" : 1011007449,
      "in_reply_to_id" : 1009218466,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848Qr_Z",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 2747,
      "original_position" : 182,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : null,
      "pull_request_review_id" : 1164197819,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007449/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-01T23:49:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007449",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011007628"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007628"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in 94bbc986d176244658a931037dab67de4d9fdb4a.",
      "commit_id" : "b8bb17fbf2f9cef672810fe6902b212194702871",
      "created_at" : "2022-11-01T23:50:04Z",
      "diff_hunk" : "@@ -2623,6 +2684,96 @@ bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKe\n     return true;\n }\n \n+std::tuple<CKey,bool> DescriptorScriptPubKeyMan::GetPrivKeyForSilentPayment(const CScript& scriptPubKey, const bool onlyTaproot) const\n+{\n+    std::vector<std::vector<unsigned char>> solutions;\n+    TxoutType whichType = Solver(scriptPubKey, solutions);\n+\n+    std::unique_ptr<FlatSigningProvider> coin_keys = GetSigningProvider(scriptPubKey, true);\n+    if (!coin_keys || coin_keys->keys.size() != 1) {\n+        return {}; // returns an invalid private key\n+    }\n+\n+    auto& key = *coin_keys->keys.begin();\n+\n+    // Tweak the private key as GetSigningProvider returns the original key.\n+    // Taproot addresses / scriptPubKeys use tweaked public key, not the original key.\n+    if (whichType == TxoutType::WITNESS_V1_TAPROOT) {\n+\n+\n+        auto pubKeyFromScriptPubKey = XOnlyPubKey(solutions[0]);\n+\n+        // this means it is a \"rawtr\" output\n+        if (XOnlyPubKey(key.second.GetPubKey()) == pubKeyFromScriptPubKey) {\n+            return {key.second, true};\n+        }\n+\n+        TaprootSpendData spenddata;\n+        coin_keys->GetTaprootSpendData(pubKeyFromScriptPubKey, spenddata);\n+\n+        CKey priv_key;\n+        if(!key.second.TweakCKey(&spenddata.merkle_root, priv_key)) return {};\n+\n+        assert(XOnlyPubKey(priv_key.GetPubKey()) ==  pubKeyFromScriptPubKey);\n+\n+        return {priv_key, true};\n+    } else if (onlyTaproot) {\n+        return {}; // returns an invalid private key\n+    } else if (whichType == TxoutType::NONSTANDARD || whichType == TxoutType::MULTISIG || whichType == TxoutType::WITNESS_UNKNOWN ) {\n+        return {}; // returns an invalid private key\n+    } else {\n+        return {key.second, false};\n+    }\n+}\n+\n+void DescriptorScriptPubKeyMan::LoadSilentRecipient()\n+{\n+    if (m_silent_recipient == nullptr) {\n+        LOCK(cs_desc_man);\n+\n+        std::vector<CKey> priv_keys;\n+\n+        for (auto& [_, priv_key] : m_map_keys) {\n+            priv_keys.push_back(priv_key);\n+        }\n+\n+        assert(priv_keys.size() == 1);\n+\n+        m_silent_recipient = std::make_unique<silentpayment::Recipient>(priv_keys.at(0));\n+    }\n+}\n+\n+std::vector<std::tuple<CKey, int32_t>> DescriptorScriptPubKeyMan::VerifySilentPaymentAddress(\n+    std::vector<std::tuple<CScript, XOnlyPubKey>>& tx_output_pub_keys,\n+    CPubKey& sender_pub_key)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011007628",
      "id" : 1011007628,
      "in_reply_to_id" : 1009218652,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848QsCM",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 2748,
      "original_position" : 183,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : null,
      "pull_request_review_id" : 1164198027,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007628/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-01T23:50:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007628",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011007675"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007675"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in e833dd60f8bceff2d81acea7b0aadfb1b97baa71.",
      "commit_id" : "b8bb17fbf2f9cef672810fe6902b212194702871",
      "created_at" : "2022-11-01T23:50:11Z",
      "diff_hunk" : "@@ -750,6 +750,54 @@ static void DiscourageFeeSniping(CMutableTransaction& tx, FastRandomContext& rng\n     }\n }\n \n+bool CreateSilentTransaction(\n+    const CWallet& wallet,\n+    const std::vector<COutput>& selected_coins,\n+    CMutableTransaction& txNew,\n+    bilingual_str& error)\n+{\n+    std::vector<std::tuple<CKey,bool>> input_private_keys;\n+\n+    for (const auto& input : selected_coins) {\n+        const auto& spk_managers = wallet.GetScriptPubKeyMans(input.txout.scriptPubKey);\n+\n+        if (spk_managers.size() != 1) {\n+            error = _(\"Only one ScriptPubKeyManager was expected for the input.\");\n+            return false;\n+        }\n+\n+        DescriptorScriptPubKeyMan* spk_manager = dynamic_cast<DescriptorScriptPubKeyMan*>(*spk_managers.begin());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011007675",
      "id" : 1011007675,
      "in_reply_to_id" : 1009219653,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848QsC7",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 769,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1164198087,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007675/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-01T23:50:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007675",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011007766"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007766"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/commit/e833dd60f8bceff2d81acea7b0aadfb1b97baa71.",
      "commit_id" : "b8bb17fbf2f9cef672810fe6902b212194702871",
      "created_at" : "2022-11-01T23:50:27Z",
      "diff_hunk" : "@@ -750,6 +750,54 @@ static void DiscourageFeeSniping(CMutableTransaction& tx, FastRandomContext& rng\n     }\n }\n \n+bool CreateSilentTransaction(\n+    const CWallet& wallet,\n+    const std::vector<COutput>& selected_coins,\n+    CMutableTransaction& txNew,\n+    bilingual_str& error)\n+{\n+    std::vector<std::tuple<CKey,bool>> input_private_keys;\n+\n+    for (const auto& input : selected_coins) {\n+        const auto& spk_managers = wallet.GetScriptPubKeyMans(input.txout.scriptPubKey);\n+\n+        if (spk_managers.size() != 1) {\n+            error = _(\"Only one ScriptPubKeyManager was expected for the input.\");\n+            return false;\n+        }\n+\n+        DescriptorScriptPubKeyMan* spk_manager = dynamic_cast<DescriptorScriptPubKeyMan*>(*spk_managers.begin());\n+\n+        const auto& [sender_secret_key, is_taproot]{spk_manager->GetPrivKeyForSilentPayment(input.txout.scriptPubKey, /*onlyTaproot=*/ false)};\n+\n+        if (!sender_secret_key.IsValid()) {\n+            error = _(\"The private key of one of the inputs was not found.\");\n+            return false;\n+        }\n+\n+        input_private_keys.push_back({sender_secret_key, is_taproot});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011007766",
      "id" : 1011007766,
      "in_reply_to_id" : 1009220476,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848QsEW",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 778,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1164198207,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007766/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-01T23:50:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007766",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011007813"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007813"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/commit/e833dd60f8bceff2d81acea7b0aadfb1b97baa71.",
      "commit_id" : "b8bb17fbf2f9cef672810fe6902b212194702871",
      "created_at" : "2022-11-01T23:50:35Z",
      "diff_hunk" : "@@ -913,6 +961,19 @@ static util::Result<CreatedTransactionResult> CreateTransactionInternal(\n     }\n     TRACE5(coin_selection, selected_coins, wallet.GetName().c_str(), GetAlgorithmName(result->GetAlgo()).c_str(), result->GetTarget(), result->GetWaste(), result->GetSelectedValue());\n \n+    bool is_silent_payment{false};\n+\n+    for (uint64_t i = 0; i < txNew.vout.size(); i++) {\n+        if (txNew.vout[i].m_silentpayment) {\n+            is_silent_payment = true;\n+            break;\n+        }\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011007813",
      "id" : 1011007813,
      "in_reply_to_id" : 1009221659,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848QsFF",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 971,
      "original_position" : 75,
      "original_start_line" : 966,
      "path" : "src/wallet/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 1164198273,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007813/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-11-01T23:50:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007813",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011007924"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007924"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in https://github.com/bitcoin/bitcoin/commit/94bbc986d176244658a931037dab67de4d9fdb4a.",
      "commit_id" : "b8bb17fbf2f9cef672810fe6902b212194702871",
      "created_at" : "2022-11-01T23:50:47Z",
      "diff_hunk" : "@@ -1156,70 +1193,235 @@ bool CWallet::LoadToWallet(const uint256& hash, const UpdateWalletTxFn& fill_wtx\n     return true;\n }\n \n-bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxState& state, bool fUpdate, bool rescanning_old_block)\n+bool CWallet::HandleNewTxBelongingToMe(const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block)\n {\n-    const CTransaction& tx = *ptx;\n-    {\n-        AssertLockHeld(cs_wallet);\n-\n-        if (auto* conf = std::get_if<TxStateConfirmed>(&state)) {\n-            for (const CTxIn& txin : tx.vin) {\n-                std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n-                while (range.first != range.second) {\n-                    if (range.first->second != tx.GetHash()) {\n-                        WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), conf->confirmed_block_hash.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n-                        MarkConflicted(conf->confirmed_block_hash, conf->confirmed_block_height, range.first->second);\n-                    }\n-                    range.first++;\n+    AssertLockHeld(cs_wallet);\n+\n+    /* Check if any keys in the wallet keypool that were supposed to be unused\n+        * have appeared in a new transaction. If so, remove those keys from the keypool.\n+        * This can happen when restoring an old wallet backup that does not contain\n+        * the mostly recently created transactions from newer versions of the wallet.\n+        */\n+\n+    // loop though all outputs\n+    for (const CTxOut& txout: tx.vout) {\n+        for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n+            for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n+                // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n+                if (!dest.internal.has_value()) {\n+                    dest.internal = IsInternalScriptPubKeyMan(spk_man);\n+                }\n+\n+                // skip if can't determine whether it's a receiving address or not\n+                if (!dest.internal.has_value()) continue;\n+\n+                // If this is a receiving address and it's not in the address book yet\n+                // (e.g. it wasn't generated on this node or we're restoring from backup)\n+                // add it to the address book for proper transaction accounting\n+                if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n+                    SetAddressBook(dest.dest, \"\", \"receive\");\n                 }\n             }\n         }\n+    }\n \n-        bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n-        if (fExisted && !fUpdate) return false;\n-        if (fExisted || IsMine(tx) || IsFromMe(tx))\n-        {\n-            /* Check if any keys in the wallet keypool that were supposed to be unused\n-             * have appeared in a new transaction. If so, remove those keys from the keypool.\n-             * This can happen when restoring an old wallet backup that does not contain\n-             * the mostly recently created transactions from newer versions of the wallet.\n-             */\n-\n-            // loop though all outputs\n-            for (const CTxOut& txout: tx.vout) {\n-                for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n-                    for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n-                        // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n-                        if (!dest.internal.has_value()) {\n-                            dest.internal = IsInternalScriptPubKeyMan(spk_man);\n-                        }\n+    // Block disconnection override an abandoned tx as unconfirmed\n+    // which means user may have to call abandontransaction again\n+    TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n+    CWalletTx* wtx = AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n+    if (!wtx) {\n+        // Can only be nullptr if there was a db write error (missing db, read-only db or a db engine internal writing error).\n+        // As we only store arriving transaction in this process, and we don't want an inconsistent state, let's throw an error.\n+        throw std::runtime_error(\"DB error adding transaction to wallet, write failed\");\n+    }\n+    return true;\n+}\n \n-                        // skip if can't determine whether it's a receiving address or not\n-                        if (!dest.internal.has_value()) continue;\n+bool CWallet::AddSilentScriptKeyMan(\n+    const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block, const std::vector<std::tuple<CKey, int32_t>>& rawTrKeys)\n+{\n+    WalletLogPrintf(\"Silent Transaction identified: %s.\\n\", tx.GetHash().ToString());\n \n-                        // If this is a receiving address and it's not in the address book yet\n-                        // (e.g. it wasn't generated on this node or we're restoring from backup)\n-                        // add it to the address book for proper transaction accounting\n-                        if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n-                            SetAddressBook(dest.dest, \"\", \"receive\");\n-                        }\n-                    }\n+    for(const auto& [key, identifier]: rawTrKeys) {\n+\n+        std::string desc = \"rawtr(\" + EncodeSecret(key) + \")\";\n+        std::string checksum = GetDescriptorChecksum(desc);\n+\n+        auto timestamp = std::chrono::duration_cast<std::chrono::microseconds>(\n+            std::chrono::system_clock::now().time_since_epoch()).count();\n+\n+        std::string desc_check = desc + \"#\" + checksum;\n+\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(desc_check, keys, error, /* require_checksum = */ true);\n+        assert(parsed_desc);\n+\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+\n+        // Need to ExpandPrivate to check if private keys are available for all pubkeys\n+        FlatSigningProvider expand_keys;\n+        std::vector<CScript> scripts;\n+        assert(parsed_desc->Expand(0, keys, scripts, expand_keys));\n+        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        std::string label;\n+\n+        if (m_silent_address_book.count(identifier)) {\n+            auto entry = m_silent_address_book[identifier];\n+            label = entry.m_label;\n+        } else {\n+            std::stringstream ss;\n+            ss << identifier;\n+            label = ss.str();\n+        }\n+\n+        auto existing_spk_manager = GetDescriptorScriptPubKeyMan(w_desc);\n+        if (!existing_spk_manager) {\n+            auto spk_manager = AddWalletDescriptor(w_desc, keys, label, false);\n+            assert(spk_manager != nullptr);\n+        }\n+    }\n+\n+    return HandleNewTxBelongingToMe(tx, state, rescanning_old_block);\n+}\n+\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxState& state, bool fUpdate, bool rescanning_old_block)\n+{\n+    const CTransaction& tx = *ptx;\n+\n+    AssertLockHeld(cs_wallet);\n+\n+    std::vector<std::tuple<CKey, int32_t>> rawTrKeys;\n+\n+    if (auto* conf = std::get_if<TxStateConfirmed>(&state)) {\n+        for (const CTxIn& txin : tx.vin) {\n+            std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n+            while (range.first != range.second) {\n+                if (range.first->second != tx.GetHash()) {\n+                    WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), conf->confirmed_block_hash.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n+                    MarkConflicted(conf->confirmed_block_hash, conf->confirmed_block_height, range.first->second);\n                 }\n+                range.first++;\n             }\n+        }\n+    }\n+\n+    bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n+    if (fExisted && !fUpdate) return false;\n+\n+    bool ret = (fExisted || IsMine(tx) || IsFromMe(tx)) ? HandleNewTxBelongingToMe(tx, state, rescanning_old_block) : false;\n+    if (IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENT) && VerifySilentPayment(tx, rawTrKeys)) {\n+        ret = AddSilentScriptKeyMan(tx, state, rescanning_old_block, rawTrKeys) || ret;\n+    }\n+    return ret;\n+}\n+\n+Coin CWallet::FindPreviousCoin(const CTxIn& txin)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011007924",
      "id" : 1011007924,
      "in_reply_to_id" : 1009225555,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5848QsG0",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 1322,
      "original_position" : 247,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 1164198390,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007924/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-01T23:50:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011007924",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011014779"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011014779"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes. I think this is the expected way to call `void FindCoins(const NodeContext& node, std::map<COutPoint, Coin>& coins)`.\r\nOther examples:\r\nhttps://github.com/bitcoin/bitcoin/blob/bf0cb4399061c6827bd5d7428a146010102d7ab1/src/rpc/rawtransaction.cpp#L664-L669\r\nhttps://github.com/bitcoin/bitcoin/blob/bf0cb4399061c6827bd5d7428a146010102d7ab1/src/wallet/feebumper.cpp#L176-L180\r\nhttps://github.com/bitcoin/bitcoin/blob/bf0cb4399061c6827bd5d7428a146010102d7ab1/src/wallet/spend.cpp#L1106-L1110",
      "commit_id" : "b8bb17fbf2f9cef672810fe6902b212194702871",
      "created_at" : "2022-11-02T00:07:03Z",
      "diff_hunk" : "@@ -1156,70 +1193,235 @@ bool CWallet::LoadToWallet(const uint256& hash, const UpdateWalletTxFn& fill_wtx\n     return true;\n }\n \n-bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxState& state, bool fUpdate, bool rescanning_old_block)\n+bool CWallet::HandleNewTxBelongingToMe(const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block)\n {\n-    const CTransaction& tx = *ptx;\n-    {\n-        AssertLockHeld(cs_wallet);\n-\n-        if (auto* conf = std::get_if<TxStateConfirmed>(&state)) {\n-            for (const CTxIn& txin : tx.vin) {\n-                std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n-                while (range.first != range.second) {\n-                    if (range.first->second != tx.GetHash()) {\n-                        WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), conf->confirmed_block_hash.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n-                        MarkConflicted(conf->confirmed_block_hash, conf->confirmed_block_height, range.first->second);\n-                    }\n-                    range.first++;\n+    AssertLockHeld(cs_wallet);\n+\n+    /* Check if any keys in the wallet keypool that were supposed to be unused\n+        * have appeared in a new transaction. If so, remove those keys from the keypool.\n+        * This can happen when restoring an old wallet backup that does not contain\n+        * the mostly recently created transactions from newer versions of the wallet.\n+        */\n+\n+    // loop though all outputs\n+    for (const CTxOut& txout: tx.vout) {\n+        for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n+            for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n+                // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n+                if (!dest.internal.has_value()) {\n+                    dest.internal = IsInternalScriptPubKeyMan(spk_man);\n+                }\n+\n+                // skip if can't determine whether it's a receiving address or not\n+                if (!dest.internal.has_value()) continue;\n+\n+                // If this is a receiving address and it's not in the address book yet\n+                // (e.g. it wasn't generated on this node or we're restoring from backup)\n+                // add it to the address book for proper transaction accounting\n+                if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n+                    SetAddressBook(dest.dest, \"\", \"receive\");\n                 }\n             }\n         }\n+    }\n \n-        bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n-        if (fExisted && !fUpdate) return false;\n-        if (fExisted || IsMine(tx) || IsFromMe(tx))\n-        {\n-            /* Check if any keys in the wallet keypool that were supposed to be unused\n-             * have appeared in a new transaction. If so, remove those keys from the keypool.\n-             * This can happen when restoring an old wallet backup that does not contain\n-             * the mostly recently created transactions from newer versions of the wallet.\n-             */\n-\n-            // loop though all outputs\n-            for (const CTxOut& txout: tx.vout) {\n-                for (const auto& spk_man : GetScriptPubKeyMans(txout.scriptPubKey)) {\n-                    for (auto &dest : spk_man->MarkUnusedAddresses(txout.scriptPubKey)) {\n-                        // If internal flag is not defined try to infer it from the ScriptPubKeyMan\n-                        if (!dest.internal.has_value()) {\n-                            dest.internal = IsInternalScriptPubKeyMan(spk_man);\n-                        }\n+    // Block disconnection override an abandoned tx as unconfirmed\n+    // which means user may have to call abandontransaction again\n+    TxState tx_state = std::visit([](auto&& s) -> TxState { return s; }, state);\n+    CWalletTx* wtx = AddToWallet(MakeTransactionRef(tx), tx_state, /*update_wtx=*/nullptr, /*fFlushOnClose=*/false, rescanning_old_block);\n+    if (!wtx) {\n+        // Can only be nullptr if there was a db write error (missing db, read-only db or a db engine internal writing error).\n+        // As we only store arriving transaction in this process, and we don't want an inconsistent state, let's throw an error.\n+        throw std::runtime_error(\"DB error adding transaction to wallet, write failed\");\n+    }\n+    return true;\n+}\n \n-                        // skip if can't determine whether it's a receiving address or not\n-                        if (!dest.internal.has_value()) continue;\n+bool CWallet::AddSilentScriptKeyMan(\n+    const CTransaction& tx, const SyncTxState& state, bool rescanning_old_block, const std::vector<std::tuple<CKey, int32_t>>& rawTrKeys)\n+{\n+    WalletLogPrintf(\"Silent Transaction identified: %s.\\n\", tx.GetHash().ToString());\n \n-                        // If this is a receiving address and it's not in the address book yet\n-                        // (e.g. it wasn't generated on this node or we're restoring from backup)\n-                        // add it to the address book for proper transaction accounting\n-                        if (!*dest.internal && !FindAddressBookEntry(dest.dest, /* allow_change= */ false)) {\n-                            SetAddressBook(dest.dest, \"\", \"receive\");\n-                        }\n-                    }\n+    for(const auto& [key, identifier]: rawTrKeys) {\n+\n+        std::string desc = \"rawtr(\" + EncodeSecret(key) + \")\";\n+        std::string checksum = GetDescriptorChecksum(desc);\n+\n+        auto timestamp = std::chrono::duration_cast<std::chrono::microseconds>(\n+            std::chrono::system_clock::now().time_since_epoch()).count();\n+\n+        std::string desc_check = desc + \"#\" + checksum;\n+\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(desc_check, keys, error, /* require_checksum = */ true);\n+        assert(parsed_desc);\n+\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+\n+        // Need to ExpandPrivate to check if private keys are available for all pubkeys\n+        FlatSigningProvider expand_keys;\n+        std::vector<CScript> scripts;\n+        assert(parsed_desc->Expand(0, keys, scripts, expand_keys));\n+        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        std::string label;\n+\n+        if (m_silent_address_book.count(identifier)) {\n+            auto entry = m_silent_address_book[identifier];\n+            label = entry.m_label;\n+        } else {\n+            std::stringstream ss;\n+            ss << identifier;\n+            label = ss.str();\n+        }\n+\n+        auto existing_spk_manager = GetDescriptorScriptPubKeyMan(w_desc);\n+        if (!existing_spk_manager) {\n+            auto spk_manager = AddWalletDescriptor(w_desc, keys, label, false);\n+            assert(spk_manager != nullptr);\n+        }\n+    }\n+\n+    return HandleNewTxBelongingToMe(tx, state, rescanning_old_block);\n+}\n+\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const SyncTxState& state, bool fUpdate, bool rescanning_old_block)\n+{\n+    const CTransaction& tx = *ptx;\n+\n+    AssertLockHeld(cs_wallet);\n+\n+    std::vector<std::tuple<CKey, int32_t>> rawTrKeys;\n+\n+    if (auto* conf = std::get_if<TxStateConfirmed>(&state)) {\n+        for (const CTxIn& txin : tx.vin) {\n+            std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n+            while (range.first != range.second) {\n+                if (range.first->second != tx.GetHash()) {\n+                    WalletLogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), conf->confirmed_block_hash.ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n+                    MarkConflicted(conf->confirmed_block_hash, conf->confirmed_block_height, range.first->second);\n                 }\n+                range.first++;\n             }\n+        }\n+    }\n+\n+    bool fExisted = mapWallet.count(tx.GetHash()) != 0;\n+    if (fExisted && !fUpdate) return false;\n+\n+    bool ret = (fExisted || IsMine(tx) || IsFromMe(tx)) ? HandleNewTxBelongingToMe(tx, state, rescanning_old_block) : false;\n+    if (IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENT) && VerifySilentPayment(tx, rawTrKeys)) {\n+        ret = AddSilentScriptKeyMan(tx, state, rescanning_old_block, rawTrKeys) || ret;\n+    }\n+    return ret;\n+}\n+\n+Coin CWallet::FindPreviousCoin(const CTxIn& txin)\n+{\n+    // Find the UTXO being spent in UTXO Set to learn the transaction type\n+    std::map<COutPoint, Coin> coins;\n+    coins[txin.prevout];",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1011014779",
      "id" : 1011014779,
      "in_reply_to_id" : 1009227644,
      "line" : 1326,
      "node_id" : "PRRC_kwDOABII5848Qtx7",
      "original_commit_id" : "2fe96a4241a4c4402c202631d219b4544820e908",
      "original_line" : 1326,
      "original_position" : 251,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 251,
      "pull_request_review_id" : 1164208199,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011014779/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-11-02T00:07:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011014779",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I can no longer use `sendtoaddress` nor  `generatetoaddress` to send coins to an sp address:\r\n```bash\r\n./src/bitcoin-cli -regtest -named -rpcwallet=test sendtoaddress address=sprt1qgqqygu4ws7ggfa3sewh5zmr9pthrklqvllh7d97z8ufx6eskyw25tp8af8hwk amount=1 fee_rate=25\r\nerror code: -5\r\nerror message:\r\nInvalid Bitcoin address: sprt1qgqqygu4ws7ggfa3sewh5zmr9pthrklqvllh7d97z8ufx6eskyw25tp8af8hwk\r\n```\r\nIt used to work in 62c0c18a69559270a0a420fc48e88d50a632062c at least.\r\n\r\nI verified that the `importdescriptors` issue mentioned above is fixed and can also now sync the `silentpaymentindex`.",
      "created_at" : "2022-11-07T14:13:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1305678284",
      "id" : 1305678284,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585N0xHM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1305678284/reactions"
      },
      "updated_at" : "2022-11-07T14:13:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1305678284",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@aureleoules Thanks for the continuous testing. \r\nThe reason `sendtoaddress` was not able to recognize the sp address is that this is no longer a segwit script.\r\nSince the last push, the address format is `identifier + pubkey` but in the last version it has changed again as described in the comment below.\r\nI also implemented sp support for `sendmany` and `sendtoaddress` in this version.",
      "created_at" : "2022-11-10T21:46:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1310945480",
      "id" : 1310945480,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585OI3DI",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1310945480/reactions"
      },
      "updated_at" : "2022-11-10T21:46:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1310945480",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "New update:\r\n\r\n. This new version implements a new scheme, which uses two keys (scan and spend keys). This scheme allows watch-only wallets for silent payments.\r\n\r\n. It also implements a new address format `HRP + spend x-only pubkey + scan x-only pubkey`, as specified in https://gist.github.com/RubenSomsen/c43b79517e7cb701ebf77eec6dbb46b8#scanning-key. Example:\r\n\r\n```bash\r\n$ ./src/bitcoin-cli -regtest getsilentaddress 'donation'\r\n{\r\n  \"address\": \"sprt1mx0828tmms6v4dzjvwyp8w3aus350k9fthlrj8v8zxmp9w2tf88l3kqh6rr98xx05mv444npzkj9j7wrxzj9tc7v0w7jl0xhpc6wzpc0l5gcq\",\r\n  \"label\": \"donation\",\r\n  \"identifier\": 1\r\n}\r\n\r\n$ ./src/bitcoin-cli -regtest decodesilentaddress \"sprt1mx0828tmms6v4dzjvwyp8w3aus350k9fthlrj8v8zxmp9w2tf88l3kqh6rr98xx05mv444npzkj9j7wrxzj9tc7v0w7jl0xhpc6wzpc0l5gcq\"\r\n{\r\n  \"address\": \"sprt1mx0828tmms6v4dzjvwyp8w3aus350k9fthlrj8v8zxmp9w2tf88l3kqh6rr98xx05mv444npzkj9j7wrxzj9tc7v0w7jl0xhpc6wzpc0l5gcq\",\r\n  \"scan_pubkey\": \"d99e751d7bdc34cab452638813ba3de42347d8a95dfe391d8711b612b94b49cf\",\r\n  \"spend_pubkey\": \"f8d817d0c65398cfa6d95ad66115a45979c330a455e3cc7bbd2fbcd70e34e107\",\r\n  \"label\": \"donation\",\r\n  \"identifier\": 1\r\n}\r\n```\r\n\r\n. Adds support for silent payment in `sendmany` and `sendtoaddress`\r\n\r\n. Improvements in `silentpayment.{cpp,h}`. This class no longer manages `secp256k1_context` itself and no longer interacts directly with  `secp256k1` library.\r\n\r\n. Silent watch-only wallets have not yet been implemented. Some architectural improvements are needed first.\r\n\r\nSupported commands (RPC) so far:\r\n. send\r\n. walletcreatefundedpsbt\r\n. sendmany\r\n. sendtoaddress\r\n. scantxoutset\r\n",
      "created_at" : "2022-11-10T21:49:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1310949739",
      "id" : 1310949739,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585OI4Fr",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1310949739/reactions"
      },
      "updated_at" : "2022-11-10T21:53:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1310949739",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@w0xlt  I will review this PR based on code and some testing\r\n\r\nGive me a few days.. and dont worry about any \"scope screep\" messages",
      "created_at" : "2022-11-11T19:29:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1312103070",
      "id" : 1312103070,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585ONRqe",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1312103070/reactions"
      },
      "updated_at" : "2022-11-11T19:29:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1312103070",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I was able to fully sync the silentpaymentindex on `mainnet` and `testnet` (respective size 23M and 1.2M).\r\nI also ran the following steps:\r\n- Create SP wallet\r\n- Send coins to it\r\n- Export SP descriptor in new wallet\r\n- Check balances match\r\n\r\nAnd I imported an sp descriptor on `mainnet` and `testnet` with timestamp 0 successfully.\r\n\r\nWill test further later.",
      "created_at" : "2022-11-14T22:45:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1314506955",
      "id" : 1314506955,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585OWcjL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1314506955/reactions"
      },
      "updated_at" : "2022-11-14T22:45:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1314506955",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2022-12-05T22:51:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1338286149",
      "id" : 1338286149,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585PxKBF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1338286149/reactions"
      },
      "updated_at" : "2022-12-05T22:51:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1338286149",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2022-12-19T09:35:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1357360043",
      "id" : 1357360043,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585Q56ur",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1357360043/reactions"
      },
      "updated_at" : "2022-12-19T09:35:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1357360043",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-01-10T23:03:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1378008374",
      "id" : 1378008374,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585SIr02",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1378008374/reactions"
      },
      "updated_at" : "2023-01-10T23:03:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1378008374",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1072215399"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072215399"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`GetSilentPaymentKey` is executed for each transaction for each block during the index creation.\r\nBut it is reading block undo data and block data for every transaction, this can be optimized by reading it only once per block in the parent function (`SilentPaymentIndex::CustomAppend`).\r\n\r\n```diff\r\ndiff --git a/src/index/silentpaymentindex.cpp b/src/index/silentpaymentindex.cpp\r\nindex 65329a408..601a09d21 100644\r\n--- a/src/index/silentpaymentindex.cpp\r\n+++ b/src/index/silentpaymentindex.cpp\r\n@@ -48,7 +48,7 @@ SilentPaymentIndex::SilentPaymentIndex(std::unique_ptr<interfaces::Chain> chain,\r\n \r\n SilentPaymentIndex::~SilentPaymentIndex() {}\r\n \r\n-bool SilentPaymentIndex::GetSilentPaymentKey(const CTransactionRef& tx, const CBlockIndex* blockindex, CPubKey& sum_tx_pubkeys) const\r\n+bool SilentPaymentIndex::GetSilentPaymentKey(const CTransactionRef& tx, const CBlock& block, const CBlockUndo& blockUndo, CPubKey& sum_tx_pubkeys) const\r\n {\r\n     if (tx->IsCoinBase()) {\r\n         return false;\r\n@@ -67,32 +67,22 @@ bool SilentPaymentIndex::GetSilentPaymentKey(const CTransactionRef& tx, const CB\r\n         return false;\r\n     }\r\n \r\n-    CBlockUndo blockUndo;\r\n-    CBlock block;\r\n-\r\n-    if (!(UndoReadFromDisk(blockUndo, blockindex) && ReadBlockFromDisk(block, blockindex, Params().GetConsensus()))) {\r\n+    auto it = std::find_if(block.vtx.cbegin(), block.vtx.cend(), [tx](CTransactionRef t){ return *t == *tx; });\r\n+    if (it == block.vtx.end()) {\r\n         return false;\r\n     }\r\n \r\n-    CTxUndo* undoTX {nullptr};\r\n-    auto it = std::find_if(block.vtx.begin(), block.vtx.end(), [tx](CTransactionRef t){ return *t == *tx; });\r\n-    if (it != block.vtx.end()) {\r\n-        // -1 as blockundo does not have coinbase tx\r\n-        undoTX = &blockUndo.vtxundo.at(it - block.vtx.begin() - 1);\r\n-    }\r\n-\r\n-    if (undoTX == nullptr) {\r\n-        return false;\r\n-    }\r\n+    // -1 as blockundo does not have coinbase tx    \r\n+    const auto& undoTX = blockUndo.vtxundo.at(it - block.vtx.begin() - 1);\r\n \r\n-    assert(tx->vin.size() == undoTX->vprevout.size());\r\n+    assert(tx->vin.size() == undoTX.vprevout.size());\r\n \r\n     std::vector<XOnlyPubKey> input_xonly_pubkeys;\r\n     std::vector<CPubKey> input_pubkeys;\r\n \r\n     for (size_t i = 0; i < tx->vin.size(); i++)\r\n     {\r\n-        const Coin& prev_coin{undoTX->vprevout[i]};\r\n+        const Coin& prev_coin{undoTX.vprevout[i]};\r\n \r\n         const CTxIn& txin{tx->vin.at(i)};\r\n \r\n@@ -140,9 +130,16 @@ bool SilentPaymentIndex::CustomAppend(const interfaces::BlockInfo& block)\r\n \r\n     const CBlockIndex* pindex = WITH_LOCK(cs_main, return m_chainstate->m_blockman.LookupBlockIndex(block.hash));\r\n \r\n+    CBlockUndo blockundo;\r\n+    CBlock blockdata;\r\n+\r\n+    if (!(UndoReadFromDisk(blockundo, pindex) && ReadBlockFromDisk(blockdata, pindex, Params().GetConsensus()))) {\r\n+        return false;\r\n+    }\r\n+\r\n     for (const auto& tx : block.data->vtx) {\r\n         CPubKey tweakedKey;\r\n-        if (GetSilentPaymentKey(tx, pindex, tweakedKey)) {\r\n+        if (GetSilentPaymentKey(tx, blockdata, blockundo, tweakedKey)) {\r\n             items.emplace_back(tx->GetHash(), tweakedKey);\r\n         }\r\n \r\ndiff --git a/src/index/silentpaymentindex.h b/src/index/silentpaymentindex.h\r\nindex 44e601334..ef3942686 100644\r\n--- a/src/index/silentpaymentindex.h\r\n+++ b/src/index/silentpaymentindex.h\r\n@@ -22,7 +22,7 @@ private:\r\n \r\n     bool AllowPrune() const override { return false; }\r\n \r\n-    bool GetSilentPaymentKey(const CTransactionRef& tx, const CBlockIndex* pindex, CPubKey& sum_tx_pubkeys) const;\r\n+    bool GetSilentPaymentKey(const CTransactionRef& tx, const CBlock& block, const CBlockUndo& blockUndo, CPubKey& sum_tx_pubkeys) const;\r\n \r\n protected:\r\n     bool CustomAppend(const interfaces::BlockInfo& block) override;\r\n```\r\n\r\nThis patch speeds up the scanning by 11x (from 11 block/s to 124 block/s)\r\n\r\nAlso note that once #24230 is merged, block data (and undo data) will be available in the BlockInfo struct directly (In `SilentPaymentIndex::CustomAppend`) if the index is configured with additional options.\r\n(Currently, the `data` and `undo_data` of the BlockInfo struct is unused.)",
      "commit_id" : "b9a6a237a3a1f78e9741e29a72a0ff11face21be",
      "created_at" : "2023-01-17T13:35:07Z",
      "diff_hunk" : "@@ -0,0 +1,165 @@\n+#include <index/silentpaymentindex.h>\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/disktxpos.h>\n+#include <node/blockstorage.h>\n+#include <pubkey.h>\n+#include <undo.h>\n+#include <util/system.h>\n+#include <validation.h>\n+#include <silentpayment.h>\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+\n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n+\n+constexpr uint8_t DB_SILENTPAYMENTINDEX{'s'};\n+\n+std::unique_ptr<SilentPaymentIndex> g_silentpaymentindex;\n+\n+/** Access to the silent payment index database (indexes/silentpaymentindex/) */\n+class SilentPaymentIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    bool WriteSilentPayments(const std::vector<std::pair<uint256, CPubKey>>& items);\n+};\n+\n+SilentPaymentIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"silentpaymentindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool SilentPaymentIndex::DB::WriteSilentPayments(const std::vector<std::pair<uint256, CPubKey>>& items)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& [tx_hash, pubkey] : items) {\n+        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tx_hash), pubkey);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+SilentPaymentIndex::SilentPaymentIndex(std::unique_ptr<interfaces::Chain> chain, size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : BaseIndex(std::move(chain), \"silentpaymentindex\"), m_db(std::make_unique<SilentPaymentIndex::DB>(n_cache_size, f_memory, f_wipe))\n+{}\n+\n+SilentPaymentIndex::~SilentPaymentIndex() {}\n+\n+bool SilentPaymentIndex::GetSilentPaymentKey(const CTransactionRef& tx, const CBlockIndex* blockindex, CPubKey& sum_tx_pubkeys) const\n+{\n+    if (tx->IsCoinBase()) {\n+        return false;\n+    }\n+\n+    std::unordered_set<TxoutType> tx_vout_types;\n+    for (auto& vout : tx->vout) {\n+        std::vector<std::vector<unsigned char>> solutions;\n+        TxoutType whichType = Solver(vout.scriptPubKey, solutions);\n+        tx_vout_types.insert(whichType);\n+    }\n+\n+    // Silent Payments require that the recipients use Taproot address\n+    // so one output at least must be Taproot\n+    if (tx_vout_types.find(TxoutType::WITNESS_V1_TAPROOT) == tx_vout_types.end()) {\n+        return false;\n+    }\n+\n+    CBlockUndo blockUndo;\n+    CBlock block;\n+\n+    if (!(UndoReadFromDisk(blockUndo, blockindex) && ReadBlockFromDisk(block, blockindex, Params().GetConsensus()))) {\n+        return false;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1072215399",
      "id" : 1072215399,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584_6LVn",
      "original_commit_id" : "f7bda4c6959594b8a9e1dc10a04dd697307e3fa3",
      "original_line" : 75,
      "original_position" : 75,
      "original_start_line" : 70,
      "path" : "src/index/silentpaymentindex.cpp",
      "position" : null,
      "pull_request_review_id" : 1251563653,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 2,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072215399/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-17T15:55:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072215399",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1072222220"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072222220"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It may be better to execute this function for the entire block instead of executing it for every transaction, and have the for loop inside the function. This would avoid a lot of function calls.",
      "commit_id" : "b9a6a237a3a1f78e9741e29a72a0ff11face21be",
      "created_at" : "2023-01-17T13:41:23Z",
      "diff_hunk" : "@@ -0,0 +1,165 @@\n+#include <index/silentpaymentindex.h>\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/disktxpos.h>\n+#include <node/blockstorage.h>\n+#include <pubkey.h>\n+#include <undo.h>\n+#include <util/system.h>\n+#include <validation.h>\n+#include <silentpayment.h>\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+\n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n+\n+constexpr uint8_t DB_SILENTPAYMENTINDEX{'s'};\n+\n+std::unique_ptr<SilentPaymentIndex> g_silentpaymentindex;\n+\n+/** Access to the silent payment index database (indexes/silentpaymentindex/) */\n+class SilentPaymentIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    bool WriteSilentPayments(const std::vector<std::pair<uint256, CPubKey>>& items);\n+};\n+\n+SilentPaymentIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"silentpaymentindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool SilentPaymentIndex::DB::WriteSilentPayments(const std::vector<std::pair<uint256, CPubKey>>& items)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& [tx_hash, pubkey] : items) {\n+        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tx_hash), pubkey);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+SilentPaymentIndex::SilentPaymentIndex(std::unique_ptr<interfaces::Chain> chain, size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : BaseIndex(std::move(chain), \"silentpaymentindex\"), m_db(std::make_unique<SilentPaymentIndex::DB>(n_cache_size, f_memory, f_wipe))\n+{}\n+\n+SilentPaymentIndex::~SilentPaymentIndex() {}\n+\n+bool SilentPaymentIndex::GetSilentPaymentKey(const CTransactionRef& tx, const CBlockIndex* blockindex, CPubKey& sum_tx_pubkeys) const\n+{\n+    if (tx->IsCoinBase()) {\n+        return false;\n+    }\n+\n+    std::unordered_set<TxoutType> tx_vout_types;\n+    for (auto& vout : tx->vout) {\n+        std::vector<std::vector<unsigned char>> solutions;\n+        TxoutType whichType = Solver(vout.scriptPubKey, solutions);\n+        tx_vout_types.insert(whichType);\n+    }\n+\n+    // Silent Payments require that the recipients use Taproot address\n+    // so one output at least must be Taproot\n+    if (tx_vout_types.find(TxoutType::WITNESS_V1_TAPROOT) == tx_vout_types.end()) {\n+        return false;\n+    }\n+\n+    CBlockUndo blockUndo;\n+    CBlock block;\n+\n+    if (!(UndoReadFromDisk(blockUndo, blockindex) && ReadBlockFromDisk(block, blockindex, Params().GetConsensus()))) {\n+        return false;\n+    }\n+\n+    CTxUndo* undoTX {nullptr};\n+    auto it = std::find_if(block.vtx.begin(), block.vtx.end(), [tx](CTransactionRef t){ return *t == *tx; });\n+    if (it != block.vtx.end()) {\n+        // -1 as blockundo does not have coinbase tx\n+        undoTX = &blockUndo.vtxundo.at(it - block.vtx.begin() - 1);\n+    }\n+\n+    if (undoTX == nullptr) {\n+        return false;\n+    }\n+\n+    assert(tx->vin.size() == undoTX->vprevout.size());\n+\n+    std::vector<XOnlyPubKey> input_xonly_pubkeys;\n+    std::vector<CPubKey> input_pubkeys;\n+\n+    for (size_t i = 0; i < tx->vin.size(); i++)\n+    {\n+        const Coin& prev_coin{undoTX->vprevout[i]};\n+\n+        const CTxIn& txin{tx->vin.at(i)};\n+\n+        const auto& pubkey_variant{silentpayment::ExtractPubkeyFromInput(prev_coin, txin)};\n+\n+        if (std::holds_alternative<CPubKey>(pubkey_variant)) {\n+            const auto& pubkey{std::get<CPubKey>(pubkey_variant)};\n+            if (pubkey.IsFullyValid()) {\n+                input_pubkeys.push_back(pubkey);\n+            }\n+        } else if (std::holds_alternative<XOnlyPubKey>(pubkey_variant)) {\n+            const auto& pubkey{std::get<XOnlyPubKey>(pubkey_variant)};\n+            if (pubkey.IsFullyValid()) {\n+                input_xonly_pubkeys.push_back(pubkey);\n+            }\n+        }\n+    }\n+\n+    // Currently Silent Payment scheme uses all keys. If not possible to\n+    // retrieve all keys, it is not a SP transaction.\n+    if ((input_pubkeys.size() + input_xonly_pubkeys.size()) != tx->vin.size()) {\n+        return false;\n+    }\n+\n+    sum_tx_pubkeys = silentpayment::Recipient::CombinePublicKeys(input_pubkeys, input_xonly_pubkeys);\n+    assert(sum_tx_pubkeys.IsFullyValid());\n+\n+    return true;\n+}\n+\n+bool SilentPaymentIndex::CustomAppend(const interfaces::BlockInfo& block)\n+{\n+    // Exclude genesis block transaction because outputs are not spendable.\n+    if (block.height == 0) return true;\n+\n+    assert(block.data);\n+\n+    Consensus::Params consensus = Params().GetConsensus();\n+\n+    if (block.height < consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height) {\n+        return true;\n+    }\n+\n+    std::vector<std::pair<uint256, CPubKey>> items; // <tx_hash, sum of public keys of transaction inputs >\n+\n+    const CBlockIndex* pindex = WITH_LOCK(cs_main, return m_chainstate->m_blockman.LookupBlockIndex(block.hash));\n+\n+    for (const auto& tx : block.data->vtx) {\n+        CPubKey tweakedKey;\n+        if (GetSilentPaymentKey(tx, pindex, tweakedKey)) {\n+            items.emplace_back(tx->GetHash(), tweakedKey);\n+        }\n+\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1072222220",
      "id" : 1072222220,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584_6NAM",
      "original_commit_id" : "f7bda4c6959594b8a9e1dc10a04dd697307e3fa3",
      "original_line" : 124,
      "original_position" : 149,
      "original_start_line" : 143,
      "path" : "src/index/silentpaymentindex.cpp",
      "position" : null,
      "pull_request_review_id" : 1251563653,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 2,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072222220/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-17T15:55:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1072222220",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-01-28T16:34:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1407434288",
      "id" : 1407434288,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585T474w",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1407434288/reactions"
      },
      "updated_at" : "2023-01-28T16:34:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1407434288",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1089910515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089910515"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Really good catch @aureleoules !\r\nThanks for the all the reviews.\r\nThis improves the index considerably. Done in 1fe05939916b779c7f9111bcbaeaace03595c014.\r\nI added you as co-author.",
      "commit_id" : "b9a6a237a3a1f78e9741e29a72a0ff11face21be",
      "created_at" : "2023-01-29T09:27:32Z",
      "diff_hunk" : "@@ -0,0 +1,165 @@\n+#include <index/silentpaymentindex.h>\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/disktxpos.h>\n+#include <node/blockstorage.h>\n+#include <pubkey.h>\n+#include <undo.h>\n+#include <util/system.h>\n+#include <validation.h>\n+#include <silentpayment.h>\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+\n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n+\n+constexpr uint8_t DB_SILENTPAYMENTINDEX{'s'};\n+\n+std::unique_ptr<SilentPaymentIndex> g_silentpaymentindex;\n+\n+/** Access to the silent payment index database (indexes/silentpaymentindex/) */\n+class SilentPaymentIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    bool WriteSilentPayments(const std::vector<std::pair<uint256, CPubKey>>& items);\n+};\n+\n+SilentPaymentIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"silentpaymentindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool SilentPaymentIndex::DB::WriteSilentPayments(const std::vector<std::pair<uint256, CPubKey>>& items)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& [tx_hash, pubkey] : items) {\n+        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tx_hash), pubkey);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+SilentPaymentIndex::SilentPaymentIndex(std::unique_ptr<interfaces::Chain> chain, size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : BaseIndex(std::move(chain), \"silentpaymentindex\"), m_db(std::make_unique<SilentPaymentIndex::DB>(n_cache_size, f_memory, f_wipe))\n+{}\n+\n+SilentPaymentIndex::~SilentPaymentIndex() {}\n+\n+bool SilentPaymentIndex::GetSilentPaymentKey(const CTransactionRef& tx, const CBlockIndex* blockindex, CPubKey& sum_tx_pubkeys) const\n+{\n+    if (tx->IsCoinBase()) {\n+        return false;\n+    }\n+\n+    std::unordered_set<TxoutType> tx_vout_types;\n+    for (auto& vout : tx->vout) {\n+        std::vector<std::vector<unsigned char>> solutions;\n+        TxoutType whichType = Solver(vout.scriptPubKey, solutions);\n+        tx_vout_types.insert(whichType);\n+    }\n+\n+    // Silent Payments require that the recipients use Taproot address\n+    // so one output at least must be Taproot\n+    if (tx_vout_types.find(TxoutType::WITNESS_V1_TAPROOT) == tx_vout_types.end()) {\n+        return false;\n+    }\n+\n+    CBlockUndo blockUndo;\n+    CBlock block;\n+\n+    if (!(UndoReadFromDisk(blockUndo, blockindex) && ReadBlockFromDisk(block, blockindex, Params().GetConsensus()))) {\n+        return false;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1089910515",
      "id" : 1089910515,
      "in_reply_to_id" : 1072215399,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585A9rbz",
      "original_commit_id" : "f7bda4c6959594b8a9e1dc10a04dd697307e3fa3",
      "original_line" : 75,
      "original_position" : 75,
      "original_start_line" : 70,
      "path" : "src/index/silentpaymentindex.cpp",
      "position" : null,
      "pull_request_review_id" : 1274128609,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089910515/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-29T09:27:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089910515",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1089910537"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089910537"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done in 1fe05939916b779c7f9111bcbaeaace03595c014.",
      "commit_id" : "b9a6a237a3a1f78e9741e29a72a0ff11face21be",
      "created_at" : "2023-01-29T09:27:40Z",
      "diff_hunk" : "@@ -0,0 +1,165 @@\n+#include <index/silentpaymentindex.h>\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/disktxpos.h>\n+#include <node/blockstorage.h>\n+#include <pubkey.h>\n+#include <undo.h>\n+#include <util/system.h>\n+#include <validation.h>\n+#include <silentpayment.h>\n+\n+#include <dbwrapper.h>\n+#include <hash.h>\n+\n+using node::ReadBlockFromDisk;\n+using node::UndoReadFromDisk;\n+\n+constexpr uint8_t DB_SILENTPAYMENTINDEX{'s'};\n+\n+std::unique_ptr<SilentPaymentIndex> g_silentpaymentindex;\n+\n+/** Access to the silent payment index database (indexes/silentpaymentindex/) */\n+class SilentPaymentIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    bool WriteSilentPayments(const std::vector<std::pair<uint256, CPubKey>>& items);\n+};\n+\n+SilentPaymentIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(gArgs.GetDataDirNet() / \"indexes\" / \"silentpaymentindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool SilentPaymentIndex::DB::WriteSilentPayments(const std::vector<std::pair<uint256, CPubKey>>& items)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& [tx_hash, pubkey] : items) {\n+        batch.Write(std::make_pair(DB_SILENTPAYMENTINDEX, tx_hash), pubkey);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+SilentPaymentIndex::SilentPaymentIndex(std::unique_ptr<interfaces::Chain> chain, size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : BaseIndex(std::move(chain), \"silentpaymentindex\"), m_db(std::make_unique<SilentPaymentIndex::DB>(n_cache_size, f_memory, f_wipe))\n+{}\n+\n+SilentPaymentIndex::~SilentPaymentIndex() {}\n+\n+bool SilentPaymentIndex::GetSilentPaymentKey(const CTransactionRef& tx, const CBlockIndex* blockindex, CPubKey& sum_tx_pubkeys) const\n+{\n+    if (tx->IsCoinBase()) {\n+        return false;\n+    }\n+\n+    std::unordered_set<TxoutType> tx_vout_types;\n+    for (auto& vout : tx->vout) {\n+        std::vector<std::vector<unsigned char>> solutions;\n+        TxoutType whichType = Solver(vout.scriptPubKey, solutions);\n+        tx_vout_types.insert(whichType);\n+    }\n+\n+    // Silent Payments require that the recipients use Taproot address\n+    // so one output at least must be Taproot\n+    if (tx_vout_types.find(TxoutType::WITNESS_V1_TAPROOT) == tx_vout_types.end()) {\n+        return false;\n+    }\n+\n+    CBlockUndo blockUndo;\n+    CBlock block;\n+\n+    if (!(UndoReadFromDisk(blockUndo, blockindex) && ReadBlockFromDisk(block, blockindex, Params().GetConsensus()))) {\n+        return false;\n+    }\n+\n+    CTxUndo* undoTX {nullptr};\n+    auto it = std::find_if(block.vtx.begin(), block.vtx.end(), [tx](CTransactionRef t){ return *t == *tx; });\n+    if (it != block.vtx.end()) {\n+        // -1 as blockundo does not have coinbase tx\n+        undoTX = &blockUndo.vtxundo.at(it - block.vtx.begin() - 1);\n+    }\n+\n+    if (undoTX == nullptr) {\n+        return false;\n+    }\n+\n+    assert(tx->vin.size() == undoTX->vprevout.size());\n+\n+    std::vector<XOnlyPubKey> input_xonly_pubkeys;\n+    std::vector<CPubKey> input_pubkeys;\n+\n+    for (size_t i = 0; i < tx->vin.size(); i++)\n+    {\n+        const Coin& prev_coin{undoTX->vprevout[i]};\n+\n+        const CTxIn& txin{tx->vin.at(i)};\n+\n+        const auto& pubkey_variant{silentpayment::ExtractPubkeyFromInput(prev_coin, txin)};\n+\n+        if (std::holds_alternative<CPubKey>(pubkey_variant)) {\n+            const auto& pubkey{std::get<CPubKey>(pubkey_variant)};\n+            if (pubkey.IsFullyValid()) {\n+                input_pubkeys.push_back(pubkey);\n+            }\n+        } else if (std::holds_alternative<XOnlyPubKey>(pubkey_variant)) {\n+            const auto& pubkey{std::get<XOnlyPubKey>(pubkey_variant)};\n+            if (pubkey.IsFullyValid()) {\n+                input_xonly_pubkeys.push_back(pubkey);\n+            }\n+        }\n+    }\n+\n+    // Currently Silent Payment scheme uses all keys. If not possible to\n+    // retrieve all keys, it is not a SP transaction.\n+    if ((input_pubkeys.size() + input_xonly_pubkeys.size()) != tx->vin.size()) {\n+        return false;\n+    }\n+\n+    sum_tx_pubkeys = silentpayment::Recipient::CombinePublicKeys(input_pubkeys, input_xonly_pubkeys);\n+    assert(sum_tx_pubkeys.IsFullyValid());\n+\n+    return true;\n+}\n+\n+bool SilentPaymentIndex::CustomAppend(const interfaces::BlockInfo& block)\n+{\n+    // Exclude genesis block transaction because outputs are not spendable.\n+    if (block.height == 0) return true;\n+\n+    assert(block.data);\n+\n+    Consensus::Params consensus = Params().GetConsensus();\n+\n+    if (block.height < consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height) {\n+        return true;\n+    }\n+\n+    std::vector<std::pair<uint256, CPubKey>> items; // <tx_hash, sum of public keys of transaction inputs >\n+\n+    const CBlockIndex* pindex = WITH_LOCK(cs_main, return m_chainstate->m_blockman.LookupBlockIndex(block.hash));\n+\n+    for (const auto& tx : block.data->vtx) {\n+        CPubKey tweakedKey;\n+        if (GetSilentPaymentKey(tx, pindex, tweakedKey)) {\n+            items.emplace_back(tx->GetHash(), tweakedKey);\n+        }\n+\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1089910537",
      "id" : 1089910537,
      "in_reply_to_id" : 1072222220,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585A9rcJ",
      "original_commit_id" : "f7bda4c6959594b8a9e1dc10a04dd697307e3fa3",
      "original_line" : 124,
      "original_position" : 149,
      "original_start_line" : 143,
      "path" : "src/index/silentpaymentindex.cpp",
      "position" : null,
      "pull_request_review_id" : 1274128626,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089910537/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-29T09:27:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1089910537",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased and all the issues identified by SonarCloud in https://github.com/bitcoin/bitcoin/pull/26865#issuecomment-1379021010 have been fixed.\r\nGreat tool @aureleoules ",
      "created_at" : "2023-01-29T09:29:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1407610739",
      "id" : 1407610739,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585T5m9z",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1407610739/reactions"
      },
      "updated_at" : "2023-01-29T09:29:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1407610739",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Update: The silentpayment index has been removed from the codebase.\r\n\r\n`scantxoutset` has been changed to use `txindex` and `CBlockUndo`. So the scan works without silentpayment index.\r\n\r\n`getsilentpaymentblockdata` also works without any indexes, using only `CBlockUndo`. The code is relatively simple. Therefore, even serving light clients, there is no need for indexing.\r\n\r\nSeems to work fine. Not sure about the performance.\r\n\r\nA new PR, with the index, will be added soon.",
      "created_at" : "2023-02-14T05:26:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1429142222",
      "id" : 1429142222,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585VLvrO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1429142222/reactions"
      },
      "updated_at" : "2023-02-14T05:26:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1429142222",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-02-17T19:16:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1435123699",
      "id" : 1435123699,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585Vij_z",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1435123699/reactions"
      },
      "updated_at" : "2023-02-17T19:16:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1435123699",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-03-07T01:08:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1457310252",
      "id" : 1457310252,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585W3Mos",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1457310252/reactions"
      },
      "updated_at" : "2023-03-07T01:08:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1457310252",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1160786689"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160786689"
         }
      },
      "author_association" : "MEMBER",
      "body" : "3742cc75571a60bda52a41923c8244535af9ff23: maybe move that above `UNKNOWN`?",
      "commit_id" : "ee652ca59a7c3e6f73f871d00d640074a1e7abac",
      "created_at" : "2023-04-07T15:40:16Z",
      "diff_hunk" : "@@ -20,13 +20,15 @@ enum class OutputType {\n     BECH32,\n     BECH32M,\n     UNKNOWN,\n+    SILENT_PAYMENT,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1160786689",
      "id" : 1160786689,
      "line" : 23,
      "node_id" : "PRRC_kwDOABII585FMDMB",
      "original_commit_id" : "3742cc75571a60bda52a41923c8244535af9ff23",
      "original_line" : 23,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/outputtype.h",
      "position" : 4,
      "pull_request_review_id" : 1376326898,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160786689/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-04-07T15:47:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160786689",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1160804856"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160804856"
         }
      },
      "author_association" : "MEMBER",
      "body" : "9143c7e1f1710f123072cc272b66ab2cad0eb57a: this commit won't compile, probably needs something from a later commit",
      "commit_id" : "ee652ca59a7c3e6f73f871d00d640074a1e7abac",
      "created_at" : "2023-04-07T16:08:22Z",
      "diff_hunk" : "@@ -1495,6 +1495,11 @@ static UniValue ProcessDescriptorImport(CWallet& wallet, const UniValue& data, c\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptors must be ranged\");\n         }\n \n+        if (isSP && data.exists(\"next_index\"))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1160804856",
      "id" : 1160804856,
      "line" : 1501,
      "node_id" : "PRRC_kwDOABII585FMHn4",
      "original_commit_id" : "9143c7e1f1710f123072cc272b66ab2cad0eb57a",
      "original_line" : 1498,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/backup.cpp",
      "position" : 13,
      "pull_request_review_id" : 1376353563,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160804856/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-04-07T16:08:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160804856",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1160888305"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160888305"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The term \"identity\" is confusing here. It's also confusing that you get this error when you generate a new silent payment address, but not when you request an existing one (by reusing a label).\r\n\r\nI guess what you're trying to say here is that an outside observer can tell that two silent payment addresses belong to the same person? Maybe just say that:\r\n\r\n`The silent payment addresses are unique for accounting purposes only. They can be linked to the same wallet. For privacy a new wallet is required.`\r\n\r\nThat said, I think this feature is a footgun. Also because poor coin control will eventually link funds from all labels.",
      "commit_id" : "ee652ca59a7c3e6f73f871d00d640074a1e7abac",
      "created_at" : "2023-04-07T18:40:28Z",
      "diff_hunk" : "@@ -66,6 +70,137 @@ RPCHelpMan getnewaddress()\n     };\n }\n \n+RPCHelpMan getsilentaddress()\n+{\n+    return RPCHelpMan{\"getsilentaddress\",\n+                \"\\nReturns a silent paymet address if it is enabled in wallet.\\n\"\n+                \"If 'label' is specified and it is new, a new address will be generated. \\n\"\n+                \"If the 'label' is already assigned to a silent address, this same address will be shown.\\n\",\n+                {\n+                    {\"label\", RPCArg::Type::STR, RPCArg::Default{\"\"}, \"The label name for the address to be linked to. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created if there is no label by the given name.\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"address\", \"The silent address\"},\n+                        {RPCResult::Type::STR_HEX, \"label\", \"The label assigned to this silent address\"},\n+                        {RPCResult::Type::NUM, \"identifier\", \"The identifier corresponding to the given label\"},\n+                        {RPCResult::Type::STR, \"warnings\", /*optional=*/true, \"Any warnings associated with the address\"},\n+                    }\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getsilentaddress\", \"\")\n+            + HelpExampleRpc(\"getsilentaddress\", \"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return UniValue::VNULL;\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    if (!pwallet->IsWalletFlagSet(WALLET_FLAG_SILENT_PAYMENT)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: This wallet is not enabled for silent payments\");\n+    }\n+\n+    if (!pwallet->CanGetAddresses()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: This wallet has no available keys\");\n+    }\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    std::string label;\n+    if (!request.params[0].isNull())\n+        label = LabelFromValue(request.params[0]);\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto const& [key, val] : pwallet->m_silent_address_book)\n+    {\n+        if (val.m_label == label) {\n+            ret.pushKV(\"address\", val.m_address);\n+            ret.pushKV(\"label\", val.m_label);\n+            ret.pushKV(\"identifier\", key);\n+            return ret;\n+        }\n+    }\n+\n+    const auto result = pwallet->GetSilentDestination(label);\n+\n+    if (!result) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, util::ErrorString(result).original);\n+    }\n+\n+    const auto& [address, identifier] = *result;\n+\n+    ret.pushKV(\"address\", address);\n+    ret.pushKV(\"label\", label);\n+    ret.pushKV(\"identifier\", identifier);\n+    if (identifier > 0) {\n+        ret.pushKV(\"warnings\", \"This address is not a new identity. It is a re-use of an existing identity with a different label.\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#discussion_r1160888305",
      "id" : 1160888305,
      "line" : 138,
      "node_id" : "PRRC_kwDOABII585FMb_x",
      "original_commit_id" : "ee652ca59a7c3e6f73f871d00d640074a1e7abac",
      "original_line" : 138,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/addresses.cpp",
      "position" : 80,
      "pull_request_review_id" : 1376473103,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24897",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160888305/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-04-07T18:42:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160888305",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Silent watch-only wallets have not yet been implemented. Some architectural improvements are needed first.\r\n\r\nThis would be nice though, maybe in a followup. I was trying to test it with `bitcoin-cli -signet -named createwallet wallet_name=SilentWatcher silent_payment=true disable_private_keys=true` and then import a descriptor like `sp(â¦)`.\r\n\r\nI guess one thing you need for that is the ability to dump the watch key. You could add an argument `scan_privkey` to `decodesilentaddress` which would return the private, rather the public. Ideally in the form of a `sp(â¦)` descriptor ready for import (and a warning that leaking that descriptor hurts your privacy, though coins can't be stolen)\r\n\r\nFinally I noticed that calling `listdescriptors true` on the wallet reveals only 1 private key for the `sp()` descriptor; I guess because they are derived from each other?",
      "created_at" : "2023-04-07T18:57:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24897#issuecomment-1500550465",
      "id" : 1500550465,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24897",
      "node_id" : "IC_kwDOABII585ZcJVB",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1500550465/reactions"
      },
      "updated_at" : "2023-04-07T18:57:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1500550465",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   }
]
