[
   {
      "body" : "Nice work. \r\n\r\nHowever I wonder in which cases does this provide more security than just rpcuser+rpcpassword or using a generated cookie?\r\n\r\nThe usual argument for public/private key authentication (in e.g. ssh) is that it allows using a single private key to authenticate to multiple servers, without the servers possessing enough information to authenticate to other servers. But I'm not convinced this is a very likely use-case with bitcoinds.\r\n\r\n~~What this does not protect against is MiTM: as no Message Authentication Code is used, the authentication token can be passed on while the command could be completely replaced.~~ Edit: Oh! I misread, you thought of this by signing the entire request. I think replay attacks are still possible though.\r\n\r\nAlso: not sure how wise it is to get into cryptographic protocol design here. One point with dropping SSL is to clearly put responsibility for any kind of advanced RPC authentication/encryption on the user  (hence my recommendation in the release notes to use `stunnel`, which can handle certificate pubkey based auth).\r\n",
      "created_at" : "2015-08-31T09:32:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136314946",
      "id" : 136314946,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6604",
      "updated_at" : "2015-08-31T09:37:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/136314946",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "@laanwj: Made the same thoughts. I see use-cases in landscapes where bitcoind and the RPC client app do not lay on the same machine and sharing the secrets (even if the network is trusted) is unwanted.\r\n\r\nRight, it does not prevent from MiTM. It could be achieved easily by including a only increasing nonce in the request/signature. But this would break sharing the same user (we only support one) between different client without sharing the current nonce height between client apps.",
      "created_at" : "2015-08-31T09:43:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136317148",
      "id" : 136317148,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6604",
      "updated_at" : "2015-08-31T09:43:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/136317148",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "But right. I'm also not sure if this would make sense to have in master. I just have the feeling that users will expose the RPC auth to the public (even if they add a reverse proxy).",
      "created_at" : "2015-08-31T09:53:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136318727",
      "id" : 136318727,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6604",
      "updated_at" : "2015-08-31T09:53:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/136318727",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Personally, [weak] concept NACK.\r\nI'd prefer the master RPC to be kept as simple as possible. \r\n\r\n> I see use-cases in landscapes where bitcoind and the RPC client app do not lay on the same machine and sharing the secrets (even if the network is trusted) is unwanted.\r\n\r\nIs that common though?\r\n\r\n> ... users will expose the RPC auth to the public ...\r\n\r\nThis is my concern too.",
      "created_at" : "2015-08-31T12:23:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136357381",
      "id" : 136357381,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6604",
      "updated_at" : "2015-08-31T12:25:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/136357381",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/413395?v=3",
         "events_url" : "https://api.github.com/users/dcousens/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dcousens/followers",
         "following_url" : "https://api.github.com/users/dcousens/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dcousens/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dcousens",
         "id" : 413395,
         "login" : "dcousens",
         "organizations_url" : "https://api.github.com/users/dcousens/orgs",
         "received_events_url" : "https://api.github.com/users/dcousens/received_events",
         "repos_url" : "https://api.github.com/users/dcousens/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dcousens/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dcousens"
      }
   },
   {
      "body" : "+1 for better auth.  I've always wanted better auth.\r\n\r\n+1 for auth that does not require sending a password over the wire (even if we recommend localhost etc.)\r\n\r\nMy idea was to add something standards supported - HTTP-Digest authentication with an already-specified digest, rather than inventing my own.\r\n\r\nThat said, this work is obviously better than Basic auth.\r\n\r\n",
      "created_at" : "2015-08-31T13:18:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136368556",
      "id" : 136368556,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6604",
      "updated_at" : "2015-08-31T13:18:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/136368556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "I agree with @dcousens that we should keep RPC as simple as possible. Also: Adding any advanced authentication features makes it easier for users to expose RPC more widely. If you want to argue for that we should also keep SSL support, as without SSL \"digest authentication\" adds only very little, e.g. it's vulnerable to MiTM attacks (it's also based on MD5 which is basically broken...).\r\n",
      "created_at" : "2015-08-31T13:49:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136376976",
      "id" : 136376976,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6604",
      "updated_at" : "2015-08-31T13:49:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/136376976",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "As simple as possible is removing RPC authentication.  If the argument is complexity and \"you shouldn't do that\" then remove all RPC auth and let the connection layer handle it.\r\n\r\nOtherwise merging a better option is obviously an improvement over choosing to keep a poor and insecure auth method.\r\n",
      "created_at" : "2015-08-31T13:58:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136378802",
      "id" : 136378802,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6604",
      "updated_at" : "2015-08-31T13:58:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/136378802",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "Even if one uses `stunnel` (or a different encryption layer), i think storing a plaintext password in a config file on the remote system (where bitcoind is running) is not a way that i personally would support for a security critical application like bitcoind.\r\n\r\nOn modern operating systems with high adjustable permission systems i think a pub key based auth. can make sense.\r\n\r\nMaybe we keep this PR laying around and see how the RPC server evolves and think about it later. Maybe its also useful for someone customizing bitcoind for his personal needs.",
      "created_at" : "2015-08-31T14:14:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136383006",
      "id" : 136383006,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6604",
      "updated_at" : "2015-08-31T14:14:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/136383006",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Insecure in what use case? What is your attack scenario?\r\n\r\nJust saying \"more secure\" as if you need to check some checkboxes isn't useful, and will just cause people to make false assumptions. If it involves merging some horrible complex beast like HTTP digest authentication, it could in practice make things less secure by exposing bugs in little-tested/reviewed code paths.",
      "created_at" : "2015-08-31T14:17:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136383712",
      "id" : 136383712,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6604",
      "updated_at" : "2015-08-31T14:17:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/136383712",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "> i think storing a plaintext password in a config file on the remote system (where bitcoind is running) is not a way that i personally would support for a security critical application like bitcoind.\r\n\r\nBut the private key is password-equivalent. Stealing it gives exactly the same permissions as stealing the password would. Again: what is the attack scenario you're trying to protect against?",
      "created_at" : "2015-08-31T14:19:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136383945",
      "id" : 136383945,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6604",
      "updated_at" : "2015-08-31T14:19:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/136383945",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "> But the private key is password-equivalent. Stealing it gives exactly the same permissions as stealing the password would. Again: what is the attack scenario you're trying to protect against?\r\n\r\nRight. This is why i don't want to store the private key on the system that is running bitcoind (bitcoin.conf). What i want there is a public key verifying my authorization.\r\n\r\nAn attack scenario could be a linux system where an attacker gains read access to bitcoin.conf (it's very likely that some users not using the right permission mode for `bitcoin.conf`). An attacker than could ban and whitelist serval nodes or do other evil things. This would work from any users without special rights on a multiuser operating system like linux.\r\nIt more realistic that a VPS operator or different attacker can get read access to `bitcoin.conf` than compromising your whole system. The first would be even hard to detect.",
      "created_at" : "2015-08-31T14:27:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136387796",
      "id" : 136387796,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6604",
      "updated_at" : "2015-08-31T14:27:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/136387796",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Sure - public key authentication would prevent an attacker breaching the bitcoind node from getting the password (private key) from bitcoin.conf. But if the attacker already has access to the system running bitcoind, it's only one step toward stealing the wallet.dat, or manipulating/observing bitcoind directly in memory, bypassing RPC auth.\r\n\r\nEdit: I do like the \"server has different credentials than the client\" idea though. Could be powerful, especially with multiple clients w/ different pubkeys. This is better than digest auth.\r\nI think this is better posed as a flexibility improvement: if you have N servers and M clients you just need to add those M pubkeys to every server. And one can remove clients without having to change the codes on every other client. This would require M*N shared secrets otherwise.",
      "created_at" : "2015-08-31T14:34:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136390280",
      "id" : 136390280,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6604",
      "updated_at" : "2015-08-31T15:13:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/136390280",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "> Right. This is why i don't want to store the private key on the system that is running bitcoind (bitcoin.conf). What i want there is a public key verifying my authorization.\r\n\r\nAt which point,  if an attacker compromises the `bitcoind` system,  the threat model means he won't be able to get the clients private key.\r\nBut,  meh?\r\nAssuming the client private key is only used for this `bitcoind` instance,  what point is there in that?  It is no different to breaching the `rpcpassword` directly?\r\n\r\nPlus, a whole new technology stack might be required for the client.",
      "created_at" : "2015-08-31T16:54:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136427330",
      "id" : 136427330,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6604",
      "updated_at" : "2015-08-31T18:31:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/136427330",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/413395?v=3",
         "events_url" : "https://api.github.com/users/dcousens/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dcousens/followers",
         "following_url" : "https://api.github.com/users/dcousens/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dcousens/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dcousens",
         "id" : 413395,
         "login" : "dcousens",
         "organizations_url" : "https://api.github.com/users/dcousens/orgs",
         "received_events_url" : "https://api.github.com/users/dcousens/received_events",
         "repos_url" : "https://api.github.com/users/dcousens/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dcousens/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dcousens"
      }
   },
   {
      "body" : "I think \"new technology stack\" is a bit over-stated.  Should be well within the reach of existing codebases while not breaking the rest.",
      "created_at" : "2015-08-31T17:16:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-136432922",
      "id" : 136432922,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6604",
      "updated_at" : "2015-08-31T17:16:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/136432922",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "I think using something custom here breaks most of the advantage of using http+json rpc in the first place. I think it's unlikely many callers would implement support for the custom thing.  If we had a whole custom RPC protocol it would be a different answer (and in that case I'd argue that it should be using a SPAKE protocol of some kind-- as those can get us mutual authentication to boot). \r\n\r\nSupporting plain digest auth, lame as it is, would likely deliver more aggregate value. (plus doesn't give us a totally novel protocol that needs cryptanalysis.)",
      "created_at" : "2015-09-06T08:28:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-138052171",
      "id" : 138052171,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6604",
      "updated_at" : "2015-09-06T08:28:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/138052171",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "This PRs authentication methode is not new and has been widely deployed over Bitpay/Copay (https://github.com/bitpay/bitauth). But right. It's a new implementation and it would require some crypoanalysis.\r\n\r\nIf I'm right, using auth digest would mean we would encourage people to use a auth scheme that is based on broken md5.\r\n\r\nI would recommend to drop auth fully or try to achieve a modern form of authentication that is not based on plain text password transmission or md5 hashing.\r\n",
      "created_at" : "2015-09-06T11:15:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-138070978",
      "id" : 138070978,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6604",
      "updated_at" : "2015-09-06T11:15:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/138070978",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Here is an analysis of MD5 and Digest auth.  https://en.wikipedia.org/wiki/Digest_access_authentication#Impact_of_MD5_security_on_digest_authentication\r\n\r\nThough it's not HMAC, Digest auth includes multiple MD5 rounds and even allows the possibility for some implementations to store the first hash, rather than the cleartext password.  That does appear to be applicable to us -- perhaps a tiny 20-line CLI util could generate a password hash for placing into bitcoin.conf.\r\n\r\nIn general I agree w/ @gmaxwell   I do note that this would likely require importing MD5 down the road as OpenSSL use is eliminated.  Moving the server over to libevent and removing SSL was another big step in that direction, incidentally...\r\n",
      "created_at" : "2015-09-06T15:12:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-138092148",
      "id" : 138092148,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6604",
      "updated_at" : "2015-09-06T15:13:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/138092148",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "@jonasschnelli There is nothing currently known to be broken about MD5 in this application.  For the digest authentication to be broken, assuming strong credentials, it would require an efficient second pre-image attack against MD5 and none is known to exist (nor, AFAIK, theorized to be likely to be found anytime soon).  The existing attacks against MD5 are structured collision attacks.  The only complaint anyone should make about digest auth is that it has no resistance at all to a MITM, and as such it's awful limited in what it protects against.\r\n\r\nIf the credentials are weak (e.g. user picked passwords) then both http digest auth and the bitauth scheme are both insecure as they are not zero-knowledge (an observer can attempt to brute force the secret offline), and neither have an effective KDF (to make the brute forcing of a weak key somewhat more computationally infeasible). (As far as including MD5 for this, well thats trivial at least).\r\n\r\nThere is a proposal for digest auth improvements, which will likely be widely deployed: https://tools.ietf.org/id/draft-ietf-httpauth-digest-19.txt which might be of interest.\r\n\r\n",
      "created_at" : "2015-09-06T21:43:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-138128047",
      "id" : 138128047,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6604",
      "updated_at" : "2015-09-06T22:31:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/138128047",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "Separately, I've analyzed this proposal somewhat and now feel comfortable NAKing this particular construction and implementation:  It's appears trivially vulnerable to replay,  e.g. you send send me 1 BTC and I observe your sendtoaddress RPC call,  then I connect and continually replay it until you are out of coins.\r\n\r\n[And I find it a little hard to imagine a practical example where plain auth with a random cookie would be insecure but that kind of replay would be tolerable. ... maybe a situation where the exposed connections only performs information gathering RPCs that you wouldn't mind just anyone performing?]\r\n\r\nInterestingly, the bitauth page claims to include a nonce to prevent replay-- but I see no evidence of that in your implementation. (Then again, it also makes claims like \"The cryptography in Bitcoin is rock solid and is securing billions of dollars worth of bitcoins.\", as seemingly its main security claim, which is a serious red-flag.)\r\n\r\nThe bitauth readme claims \"The server verifies that the signature is valid and that it matches the identity (the public key). It then computes the SIN from the public key, and sees whether that SIN has access to the requested resource. The nonce is checked to make sure it is higher than \r\nthe previously used nonce.\" ---- that is a stateful protocol, and making it secure requires that there be no more than one server (and that the server refrain from certain scaling and HA approaches without using a consensus protocol); likewise multiple clients with the same key would lock each other out.    I also can't find any evidence of the bitauth code actually implementing that either... e.g. the example client and server seem to have no infrastructure to persist a counter; though I know nothing about reviewing JS code and perhaps that is magicked away someplace.\r\n\r\nWhile even with that vulnerability it's true that an improvement over plain-text, but I think it doesn't make sense to adopt a narrow, not widely compatible protocol with such simple violations of expected security-- especially on top of the poor performance of it. And it certainly wouldn't be enough for us to stop recommending people use the https as: It's not an improvement over that..\r\n\r\nI'm concerned that this protocol may have a turn-the-client-into-a-TX-signing-oracle attack in some contexts; the specific construction makes it somewhat hard to be sure that no such attack exists.   E.g. I get a client to make a request which happens to be identical to a masked bitcoin transaction that I want the client to sign, spending coins associated with the clients pubkey (as users eagerly reuse these keys even if we ask them not to).  The only resistance I see to this attack is just the challenge in comping up with a plausible string that is both a json request that a client could be talked into producing and a transaction.   For our own client this might be impossible, but it's hard to reason about all possible functioning client software.  There might be a trivial reason this doesn't apply however.\r\n\r\nI do support being stronger here but we are hamstrung somewhat by compatibility requirements inherent in an RPC interface; and we should not go half way and deliver something that might look secure under all reasonable attack models but actually be weak under many of them.\r\n\r\n",
      "created_at" : "2015-09-06T21:47:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-138128692",
      "id" : 138128692,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6604",
      "updated_at" : "2015-09-06T23:36:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/138128692",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "Right. I has no replay attack prevention (like a upcounting nonce within the signature). That would be required for production.\r\n\r\nFair enough.\r\nI see the points and they make also sense for me.\r\nWill see how complicated auth digest would be to implementation.",
      "created_at" : "2015-09-07T03:54:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6604#issuecomment-138175930",
      "id" : 138175930,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6604",
      "updated_at" : "2015-09-07T03:54:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/138175930",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   }
]
