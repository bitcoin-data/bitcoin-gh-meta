[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK on improving the design testability and coverage here.",
      "created_at" : "2020-09-17T05:56:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19966#issuecomment-693931152",
      "id" : 693931152,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19966",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MzkzMTE1Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-17T05:56:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693931152",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> The functional tests cover some parts of the eviction logic but the coverage is spotty/incomplete.\r\n\r\nIn order to get a rough idea of the quality of the current eviction logic testing I performed some basic mutation testing of this code.\r\n\r\nAll tests (including `p2p_eviction.py`) pass successfully also in the presence of these mutations:\r\n\r\n```diff\r\n$ git diff\r\ndiff --git a/src/net.cpp b/src/net.cpp\r\nindex e35d05cec..e138a4a13 100644\r\n--- a/src/net.cpp\r\n+++ b/src/net.cpp\r\n@@ -826,43 +826,36 @@ static bool ReverseCompareNodeMinPingTime(const NodeEvictionCandidate &a, const\r\n\r\n static bool ReverseCompareNodeTimeConnected(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\r\n {\r\n-    return a.nTimeConnected > b.nTimeConnected;\r\n+    return false;\r\n }\r\n\r\n static bool CompareLocalHostTimeConnected(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\r\n {\r\n-    if (a.m_is_local != b.m_is_local) return b.m_is_local;\r\n-    return a.nTimeConnected > b.nTimeConnected;\r\n+    return false;\r\n }\r\n\r\n static bool CompareNetGroupKeyed(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b) {\r\n-    return a.nKeyedNetGroup < b.nKeyedNetGroup;\r\n+    return false;\r\n }\r\n\r\n static bool CompareNodeBlockTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\r\n {\r\n     // There is a fall-through here because it is common for a node to have many peers which have not yet relayed a block.\r\n     if (a.nLastBlockTime != b.nLastBlockTime) return a.nLastBlockTime < b.nLastBlockTime;\r\n-    if (a.fRelevantServices != b.fRelevantServices) return b.fRelevantServices;\r\n-    return a.nTimeConnected > b.nTimeConnected;\r\n+    return false;\r\n }\r\n\r\n static bool CompareNodeTXTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\r\n {\r\n     // There is a fall-through here because it is common for a node to have more than a few peers that have not yet relayed txn.\r\n     if (a.nLastTXTime != b.nLastTXTime) return a.nLastTXTime < b.nLastTXTime;\r\n-    if (a.fRelayTxes != b.fRelayTxes) return b.fRelayTxes;\r\n-    if (a.fBloomFilter != b.fBloomFilter) return a.fBloomFilter;\r\n-    return a.nTimeConnected > b.nTimeConnected;\r\n+    return false;\r\n }\r\n\r\n // Pick out the potential block-relay only peers, and sort them by last block time.\r\n static bool CompareNodeBlockRelayOnlyTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\r\n {\r\n-    if (a.fRelayTxes != b.fRelayTxes) return a.fRelayTxes;\r\n-    if (a.nLastBlockTime != b.nLastBlockTime) return a.nLastBlockTime < b.nLastBlockTime;\r\n-    if (a.fRelevantServices != b.fRelevantServices) return b.fRelevantServices;\r\n-    return a.nTimeConnected > b.nTimeConnected;\r\n+    return false;\r\n }\r\n\r\n //! Sort an array by the specified comparator, then erase the last K elements.\r\n@@ -870,8 +863,6 @@ template<typename T, typename Comparator>\r\n static void EraseLastKElements(std::vector<T> &elements, Comparator comparator, size_t k)\r\n {\r\n     std::sort(elements.begin(), elements.end(), comparator);\r\n-    size_t eraseSize = std::min(k, elements.size());\r\n-    elements.erase(elements.end() - eraseSize, elements.end());\r\n }\r\n\r\n /** Try to find a connection to evict when the node is full.\r\n$ make\r\n$ make check\r\n$ echo $?\r\n0\r\n$ test/functional/test_runner.py\r\n$ echo $?\r\n0\r\n```",
      "created_at" : "2020-09-17T12:26:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19966#issuecomment-694196367",
      "id" : 694196367,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19966",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5NDE5NjM2Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-17T12:33:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/694196367",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The small patch taking us to the suggested unit testable `SelectNodeToEvict` could look something like this:\r\n\r\n```patch\r\ndiff --git a/src/net.cpp b/src/net.cpp\r\nindex 79e7f88c2..10c1246e4 100644\r\n--- a/src/net.cpp\r\n+++ b/src/net.cpp\r\n@@ -874,43 +874,7 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\r\n     elements.erase(elements.end() - eraseSize, elements.end());\r\n }\r\n \r\n-/** Try to find a connection to evict when the node is full.\r\n- *  Extreme care must be taken to avoid opening the node to attacker\r\n- *   triggered network partitioning.\r\n- *  The strategy used here is to protect a small number of peers\r\n- *   for each of several distinct characteristics which are difficult\r\n- *   to forge.  In order to partition a node the attacker must be\r\n- *   simultaneously better at all of them than honest peers.\r\n- */\r\n-bool CConnman::AttemptToEvictConnection()\r\n-{\r\n-    std::vector<NodeEvictionCandidate> vEvictionCandidates;\r\n-    {\r\n-        LOCK(cs_vNodes);\r\n-\r\n-        for (const CNode* node : vNodes) {\r\n-            if (node->HasPermission(PF_NOBAN))\r\n-                continue;\r\n-            if (!node->IsInboundConn())\r\n-                continue;\r\n-            if (node->fDisconnect)\r\n-                continue;\r\n-            bool peer_relay_txes = false;\r\n-            bool peer_filter_not_null = false;\r\n-            if (node->m_tx_relay != nullptr) {\r\n-                LOCK(node->m_tx_relay->cs_filter);\r\n-                peer_relay_txes = node->m_tx_relay->fRelayTxes;\r\n-                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\r\n-            }\r\n-            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\r\n-                                               node->nLastBlockTime, node->nLastTXTime,\r\n-                                               HasAllDesirableServiceFlags(node->nServices),\r\n-                                               peer_relay_txes, peer_filter_not_null, node->addr, node->nKeyedNetGroup,\r\n-                                               node->m_prefer_evict, node->addr.IsLocal()};\r\n-            vEvictionCandidates.push_back(candidate);\r\n-        }\r\n-    }\r\n-\r\n+[[nodiscard]] Optional<NodeEvictionCandidate> SelectNodeToEvict(std::vector<NodeEvictionCandidate> vEvictionCandidates) {\r\n     // Protect connections with certain characteristics\r\n \r\n     // Deterministically select 4 peers to protect by netgroup.\r\n@@ -948,7 +912,7 @@ bool CConnman::AttemptToEvictConnection()\r\n     total_protect_size -= initial_size - vEvictionCandidates.size();\r\n     EraseLastKElements(vEvictionCandidates, ReverseCompareNodeTimeConnected, total_protect_size);\r\n \r\n-    if (vEvictionCandidates.empty()) return false;\r\n+    if (vEvictionCandidates.empty()) return nullopt;\r\n \r\n     // If any remaining peers are preferred for eviction consider only them.\r\n     // This happens after the other preferences since if a peer is really the best by other criteria (esp relaying blocks)\r\n@@ -979,8 +943,56 @@ bool CConnman::AttemptToEvictConnection()\r\n     // Reduce to the network group with the most connections\r\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\r\n \r\n     // Disconnect from the network group with the most connections\r\n-    NodeId evicted = vEvictionCandidates.front().id;\r\n+    return vEvictionCandidates.front();\r\n+}\r\n+\r\n+/** Try to find a connection to evict when the node is full.\r\n+ *  Extreme care must be taken to avoid opening the node to attacker\r\n+ *   triggered network partitioning.\r\n+ *  The strategy used here is to protect a small number of peers\r\n+ *   for each of several distinct characteristics which are difficult\r\n+ *   to forge.  In order to partition a node the attacker must be\r\n+ *   simultaneously better at all of them than honest peers.\r\n+ */\r\n+bool CConnman::AttemptToEvictConnection()\r\n+{\r\n+    std::vector<NodeEvictionCandidate> vEvictionCandidates;\r\n+    {\r\n+        LOCK(cs_vNodes);\r\n+\r\n+        for (const CNode* node : vNodes) {\r\n+            if (node->HasPermission(PF_NOBAN))\r\n+                continue;\r\n+            if (!node->IsInboundConn())\r\n+                continue;\r\n+            if (node->fDisconnect)\r\n+                continue;\r\n+            bool peer_relay_txes = false;\r\n+            bool peer_filter_not_null = false;\r\n+            if (node->m_tx_relay != nullptr) {\r\n+                LOCK(node->m_tx_relay->cs_filter);\r\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\r\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\r\n+            }\r\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\r\n+                                               node->nLastBlockTime, node->nLastTXTime,\r\n+                                               HasAllDesirableServiceFlags(node->nServices),\r\n+                                               peer_relay_txes, peer_filter_not_null, node->addr, node->nKeyedNetGroup,\r\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\r\n+            vEvictionCandidates.push_back(candidate);\r\n+        }\r\n+    }\r\n+\r\n+    const Optional<NodeEvictionCandidate> node_to_evict = SelectNodeToEvict(vEvictionCandidates);\r\n+    if (!node_to_evict) {\r\n+        return false;\r\n+    }\r\n+    const NodeId evicted = node_to_evict->id;\r\n     LOCK(cs_vNodes);\r\n     for (CNode* pnode : vNodes) {\r\n         if (pnode->GetId() == evicted) {\r\n```",
      "created_at" : "2020-09-18T06:15:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19966#issuecomment-694677753",
      "id" : 694677753,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19966",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5NDY3Nzc1Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-18T14:54:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/694677753",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "strong concept ACK on improving eviction testing ðð½ . its critical logic, hard to reason about, and lacking automated testing. \r\n\r\nI'm trying to wrap my head around this strategy, is this right so far? - \r\n- the main idea is to separate `AttemptToEvictConnection` into two parts of 1. selecting eviction candidates 2. selecting which node to evict from the candidates\r\n- the proposed strategy is to extract # 2 into `SelectNodeToEvict`.\r\n- this enables sanity testing `SelectNodeToEvict` (as done in #19972) by constructing `NodeEvictionCandidates` with fuzzed inputs\r\n\r\nthis seems like a great start. do you think this would enable us to write unit tests as well? ",
      "created_at" : "2020-09-18T16:46:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19966#issuecomment-694972408",
      "id" : 694972408,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19966",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5NDk3MjQwOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-18T16:46:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/694972408",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I'm trying to wrap my head around this strategy, is this right so far? -\r\n> \r\n> * the main idea is to separate `AttemptToEvictConnection` into two parts of 1. selecting eviction candidates 2. selecting which node to evict from the candidates\r\n> * the proposed strategy is to extract # 2 into `SelectNodeToEvict`.\r\n> * this enables sanity testing `SelectNodeToEvict` (as done in #19972) by constructing `NodeEvictionCandidates` with fuzzed inputs\r\n\r\nExactly! :)\r\n\r\nAnd as you point out the fuzzing harness is only meant as basic sanity testing to make sure the basic hygiene routine is covered -- that no ASan or UBSan warnings are triggered no matter what input is fed, and some very basic sanity assertions. The important testing of the eviction logic is expected to be done in unit tests.\r\n\r\n> this seems like a great start. do you think this would enable us to write unit tests as well?\r\n\r\nAbsolutely! :)\r\n\r\nI suggest introducing something along the lines of:\r\n\r\n```c++\r\nvoid AssertIsEvicted(const NodeId expected_to_be_evicted, std::vector<NodeEvictionCandidate> eviction_candidates);\r\nvoid AssertIsNotEvicted(const NodeId expected_not_to_be_evicted, std::vector<NodeEvictionCandidate> eviction_candidates);\r\n```\r\n\r\nThese could be used to test that the \"correct node\" is evicted/not evicted (whichever makes more sense) given some synthetic `NodeEvictionCandidate`:s carefully constructed to have different characteristics that are relevant from an eviction policy perspective.",
      "created_at" : "2020-09-19T08:19:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19966#issuecomment-695182863",
      "id" : 695182863,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19966",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5NTE4Mjg2Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-19T09:36:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/695182863",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. I think covering heuristic stubs correctness (e.g `CompareLocalHostTimeConnected`) is a good step forward. These stubs aren't straightforward to understand so unit test coverage would be great.\r\n\r\nI can't think of issue as splitting `AttemptToEvictConnection` between `SelectNodeToEvict`/`AttemptToEvictCandidates`.",
      "created_at" : "2020-09-22T00:08:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19966#issuecomment-696445234",
      "id" : 696445234,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19966",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5NjQ0NTIzNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-22T00:08:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/696445234",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This issue is addressed in #20477 (\"test/net: Add unit testing of node eviction logic\").",
      "created_at" : "2020-11-25T08:46:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19966#issuecomment-733558262",
      "id" : 733558262,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19966",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMzU1ODI2Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-25T08:46:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733558262",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
