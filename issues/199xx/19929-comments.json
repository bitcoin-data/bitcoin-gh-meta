[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This overlaps with #19865 and #19918.\r\n\r\ncc @hebasto @ryanofsky @MarcoFalke @ajtowns ",
      "created_at" : "2020-09-09T19:05:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19929#issuecomment-689757482",
      "id" : 689757482,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19929",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4OTc1NzQ4Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-09T19:13:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/689757482",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tested with the following patch:\r\n```diff\r\n--- a/src/txmempool.cpp\r\n+++ b/src/txmempool.cpp\r\n@@ -1108,7 +1108,7 @@ bool CTxMemPool::IsLoaded() const\r\n \r\n void CTxMemPool::SetIsLoaded(bool loaded)\r\n {\r\n-    LOCK(cs);\r\n+    AssertLockHeld(cs);\r\n     m_is_loaded = loaded;\r\n }\r\n \r\n```\r\n\r\n- on master (564e1ab0f3dc573bd3ea60a80f6649c361243df9) clang emits warning:\r\n```\r\ntxmempool.cpp:1112:5: warning: writing variable 'm_is_loaded' requires holding mutex 'cs' exclusively [-Wthread-safety-analysis]\r\n    m_is_loaded = loaded;\r\n    ^\r\n```\r\n\r\n- with this PR (2a4081e487f1b83a5c9f1194a73d5a01a4c35cc6) clang compiles without warnings\r\n\r\nNot sure if this is correct as in both cases the patch causes run time `abort()`.",
      "created_at" : "2020-09-09T19:50:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19929#issuecomment-689782739",
      "id" : 689782739,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19929",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4OTc4MjczOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-09T19:52:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/689782739",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This is exactly how it is supposed to work: https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#assert-capability-and-assert-shared-capability\r\n\r\n`m_is_loaded = loaded;` is never going to be executed if `cs` is not locked and thus clang does not emit a warning about it.",
      "created_at" : "2020-09-09T20:21:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19929#issuecomment-689800574",
      "id" : 689800574,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19929",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4OTgwMDU3NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-09T20:21:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/689800574",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Just to elaborate - expecting a warning in the example above is similar to expecting a warning in:\r\n\r\n```cpp\r\nint Func(int x)\r\n{\r\n    if (x == 1) {\r\n        return 10;\r\n    }       \r\n    abort();\r\n} // should we get \"control reaches end of non-void function\" here?\r\n```\r\n\r\nThe compiler does not emit a warning because it sees that `abort()` will [not return](https://en.cppreference.com/w/c/language/_Noreturn) and thus code after it is unreachable.\r\n\r\nWhat we are doing now in `master` looks like removing the [no return](https://en.cppreference.com/w/c/language/_Noreturn) attribute from `abort()` in order to get a warning for a code that will never be executed (we have removed the `ASSERT_EXCLUSIVE_LOCK` attribute from `AssertLockHeld()` to warn on unreachable code).",
      "created_at" : "2020-09-10T07:00:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19929#issuecomment-690032955",
      "id" : 690032955,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19929",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MDAzMjk1NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-10T07:00:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/690032955",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "My testing [patch](https://github.com/bitcoin/bitcoin/pull/19929#issuecomment-689782739) makes the code wrong from the point of concurrency -- writing to `m_is_loaded` is not protected by a mutex.\r\n\r\nOn master compiler emits a warning about wrong code.\r\n\r\nWith this PR we get know about wrong code only at run time.\r\n\r\nI believe that the former is strictly better then latter.",
      "created_at" : "2020-09-10T07:31:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19929#issuecomment-690048719",
      "id" : 690048719,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19929",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MDA0ODcxOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-10T07:31:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/690048719",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@vasild, the [textualist](https://en.wikipedia.org/wiki/Textualism) interpretation of the clang documentation here is very smart, but I think is misplaced because https://clang.llvm.org/docs/ThreadSafetyAnalysis.html is not a legal document or programming language standard, and this interpretation causes practical problems that will make the code less verifiably thread safe and harder to work with. Here are the practical problems with this PR:\r\n\r\n- It makes `AssertLockHeld` and `AssertNotLockHeld` calls now have different TSA annotations depending on whether the `DEBUG_LOCKORDER` macro is defined or not defined. I think this is bad. TSA annotations are already confusing to developers and difficult to work with. They cause errors in some configurations, or warning in other configurations, or may be completely ignored. They can happen locally or not, and are enabled and disabled in various CI jobs pretty much randomly for no reason. I think they are already about as crazily inconsistent as anyone can stand. Applying different annotations based on whether DEBUG_LOCKORDER is defined makes things worse and I think is not acceptable because:\r\n\r\n  - DEBUG_LOCKORDER flag is supposed to a debug flag turning on runtime debug features. There isn't a reason for someone to expect it to affect thread safety analysis in non-debug functions.\r\n\r\n  - Making individual annotations conditional on the `DEBUG_LOCKORDER` flag is worse than turning annotations off entirely based on `DEBUG_LOCKORDER` or another flag. Presence of an individual annotation doesn't just cause errors or suppress errors but can actually cause some errors and suppress different errors at the same time. With this PR, instead of developers just facing the inconvenient scenario of errors happening in one configuration but not other configurations, they may now face a new (nightmare) scenario of an error happening in one configuration, where fixing it can break a different configuration, and fixing that can break the original configuration, and so on. We should avoid this by just having a master switch that turns off all thread safety annotations, and not go down the road of applying different individual annotations based on different switches.\r\n\r\n- (I think you know this, but to make it clear to others:) Adding `ASSERT_EXCLUSIVE_LOCK` annotation to existing `AssertLockHeld` calls throughout the codebase may make that code less thread safe when it is changed in the future because `ASSERT_EXCLUSIVE_LOCK` suppresses compile time checks which verify that the mutex is really locked in all those places. Unsafety of `ASSERT_EXCLUSIVE_LOCK` is the reason why #19668 switched away from `ASSERT_EXCLUSIVE_LOCK` to `EXCLUSIVE_LOCKS_REQUIRED` and is the reason why I think #19865 and #19918 are both safer alternatives to this PR. (#19865 removes all existing `AssertLockHeld` calls to keeps compile-time checking as strict as possible while eliminating redundant runtime checks. #19668 keeps existing `AssertLockHeld` calls because Marco and others believe they are useful, and it adds a different function to replace the pre-#19668 behavior).\r\n\r\n- (This is also acknowledged in your PR description:) This PR forces to us to use NO_THREAD_SAFETY_ANALYSIS in situations where we don't need and shouldn't want to disable thread safety analysis. All we need is ability to inform the compiler that a specific mutex is locked at a specific time, which is exactly what `ASSERT_EXCLUSIVE_LOCK` does and why we should use it.\r\n\r\nOn the textual disagreement, I think while the text of https://clang.llvm.org/docs/ThreadSafetyAnalysis.html could be improved, it is compatible with how #19865 and #19668 are using `ASSERT_EXCLUSIVE_LOCK` and how pre-#19668 code was using it it. The text says if a function is annotated with that attribute \"The function is assumed to fail (no return) if the capability is not held.\" I agree it's bad to add an annotation that causes the compiler to make a false assumption, but in the actual situations where this would be relevant, that assumption is the least of our problems. If AssertLockHeld is called and the capability is not held, then fact that we're calling AssertLockHeld indicates the actual program has undefined behavior, and theoretical optimizations compiler might apply to the AssertLockHeld invocation are a sideshow. It would be good to fix the clang documentation upstream to match what the compiler actually does: assuming the capability is held, not optimizing the debug function call. Much better than practical harms to safety and maintainability of future code which I think this PR is making as unnecessary tradeoffs.",
      "created_at" : "2020-09-10T15:15:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19929#issuecomment-690358411",
      "id" : 690358411,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19929",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MDM1ODQxMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-10T15:15:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/690358411",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@hebasto, @ryanofsky, thanks for the review!\r\n\r\nI re-read your comments a few times and I see your points, but I disagree with some of the above. I see neither side is convinced and so I am closing this PR because for it to get merged an agreement is needed.\r\n\r\nIt would have been too boring if everybody agreed on everything all the time! :)\r\n\r\nI still think that sticking to the documentation and accepting the limitations of the tools used is the right approach in the long term. OTOH telling the compiler that we do something while we actually do something else and [misusing](https://github.com/bitcoin/bitcoin/pull/19865#issuecomment-688232331) its directives is confusing and may backfire at some point.",
      "created_at" : "2020-09-14T07:38:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19929#issuecomment-691878491",
      "id" : 691878491,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19929",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MTg3ODQ5MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-14T07:41:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/691878491",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@vasild I can't speak for others, but I agree with you there is a potential problem. I just don't think this PR is an good solution to the problem due to bigger problems it creates.\r\n\r\nI think the best solution would be a documentation fix. It'd be helpful if you could take a look at https://reviews.llvm.org/D87629 and see if it resolves your concerns.",
      "created_at" : "2020-09-14T20:05:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19929#issuecomment-692284229",
      "id" : 692284229,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19929",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MjI4NDIyOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-14T20:05:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/692284229",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> * if `DEBUG_LOCKORDER` is not defined, then `AssertLockHeld()` does\r\n>   nothing, thus don't tag it with any attributes (don't fool the\r\n>   compiler that we do something which we don't).\r\n\r\nThe attribute is meant to model the standard `assert`, so the function doesn't have to actually check anything. My [comment](https://reviews.llvm.org/D87629#2278073) on @ryanofsky's documentation change goes into a bit more detail about that.\r\n\r\n> https://clang.llvm.org/docs/ThreadSafetyAnalysis.html is not a legal document or programming language standard\r\n\r\nTechnically right, but we'd appreciate if you treat it like a language standard. So if there are discrepancies between documentation and implementation we'd like to know them.\r\n\r\n> * It makes `AssertLockHeld` and `AssertNotLockHeld` calls now have different TSA annotations depending on whether the `DEBUG_LOCKORDER` macro is defined or not defined. I think this is bad.\r\n\r\nAgreed, conceptually it's independent of the build profile whether a mutex is held in this case. It's just that in some profiles you check that it is, but how you handle assertions (like if you drop them in non-debug builds) doesn't concern the Analysis.\r\n\r\n> If AssertLockHeld is called and the capability is not held, then fact that we're calling AssertLockHeld indicates the actual program has undefined behavior, and theoretical optimizations compiler might apply to the AssertLockHeld invocation are a sideshow.\r\n\r\nTo be clear, Thread Safety annotations have absolutely no effect on the generated code. They are part of the Clang AST, and are considered in the Analysis library, but CodeGen ignores them, so the IR emitted by the Frontend already contains no trace of the attributes. Meaning that whatever the middle end or backend do cannot possibly be influenced by them. No optimization will ever depend on them.",
      "created_at" : "2020-09-16T23:38:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19929#issuecomment-693722339",
      "id" : 693722339,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19929",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MzcyMjMzOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-16T23:38:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693722339",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/1453952?v=4",
         "events_url" : "https://api.github.com/users/aaronpuchert/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aaronpuchert/followers",
         "following_url" : "https://api.github.com/users/aaronpuchert/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aaronpuchert/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aaronpuchert",
         "id" : 1453952,
         "login" : "aaronpuchert",
         "node_id" : "MDQ6VXNlcjE0NTM5NTI=",
         "organizations_url" : "https://api.github.com/users/aaronpuchert/orgs",
         "received_events_url" : "https://api.github.com/users/aaronpuchert/received_events",
         "repos_url" : "https://api.github.com/users/aaronpuchert/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aaronpuchert/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aaronpuchert/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aaronpuchert"
      }
   }
]
