[
   {
      "author_association" : "MEMBER",
      "body" : "cc @sipa",
      "created_at" : "2020-05-05T06:06:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-623871970",
      "id" : 623871970,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyMzg3MTk3MA==",
      "updated_at" : "2020-05-05T06:06:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623871970",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420013187"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420013187"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    static LockData* lockdata = new LockData();\r\n```\r\n\r\nnot sure why auto needs to hide both the type and the pointer-ness. The additional 5 chars don't seem overly verbose.",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T10:35:42Z",
      "diff_hunk" : "@@ -78,21 +78,14 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // See doc/developers-notes.md#construct-on-first-use-idiom\n+    static auto lockdata = new LockData();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420013187",
      "id" : 420013187,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAxMzE4Nw==",
      "original_commit_id" : "5a406f76030263c1c4e5335cea3be022263426f2",
      "original_line" : 87,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 405669322,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420013187",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 5a406f76030263c1c4e5335cea3be022263426f2 -> 7e3f40dd594d81b37458f9f5d36d4d7df99f8917 ([pr18881.01](https://github.com/hebasto/bitcoin/commits/pr18881.01) -> [pr18881.02](https://github.com/hebasto/bitcoin/commits/pr18881.02), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.01..pr18881.02)):\r\n\r\n- addressed @MarcoFalke's [comment](https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420013187):\r\n> not sure why auto needs to hide both the type and the pointer-ness. The additional 5 chars don't seem overly verbose.",
      "created_at" : "2020-05-05T10:52:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-623985636",
      "id" : 623985636,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyMzk4NTYzNg==",
      "updated_at" : "2020-05-05T10:52:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623985636",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420022157"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420022157"
         }
      },
      "author_association" : "MEMBER",
      "body" : "[Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-623985636).",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T10:53:15Z",
      "diff_hunk" : "@@ -78,21 +78,14 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // See doc/developers-notes.md#construct-on-first-use-idiom\n+    static auto lockdata = new LockData();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420022157",
      "id" : 420022157,
      "in_reply_to_id" : 420013187,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAyMjE1Nw==",
      "original_commit_id" : "5a406f76030263c1c4e5335cea3be022263426f2",
      "original_line" : 87,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 405679685,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420022157",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420046291"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420046291"
         }
      },
      "author_association" : "MEMBER",
      "body" : "approach guarantees",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T11:43:31Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use idiom\n+------------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"`static` initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the `static` initialization order problem, use the Construct On First Use idiom:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developers-notes.md#construct-on-first-use-idiom\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guaranties that:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420046291",
      "id" : 420046291,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0NjI5MQ==",
      "original_commit_id" : "7e3f40dd594d81b37458f9f5d36d4d7df99f8917",
      "original_line" : 864,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405709216,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420046291",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420046912"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420046912"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think the markdown is more readable without wrapping \"static\" in code markup (same for line 853 below)",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T11:44:45Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use idiom\n+------------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"`static` initialization order problem\". It could cause the use of an object:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420046912",
      "id" : 420046912,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0NjkxMg==",
      "original_commit_id" : "7e3f40dd594d81b37458f9f5d36d4d7df99f8917",
      "original_line" : 847,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405709912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420046912",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420047499"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420047499"
         }
      },
      "author_association" : "MEMBER",
      "body" : "can drop \"idiom\"? or maybe more clear with quotes: \"Construct On First Use\" idiom, but I personally prefer without \"idiom\"\r\n\r\n(same for line 853 below)",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T11:45:59Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use idiom",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420047499",
      "id" : 420047499,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0NzQ5OQ==",
      "original_commit_id" : "7e3f40dd594d81b37458f9f5d36d4d7df99f8917",
      "original_line" : 843,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405709912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420047499",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420047910"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420047910"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/gets/is/",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T11:46:47Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use idiom\n+------------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"`static` initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the `static` initialization order problem, use the Construct On First Use idiom:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developers-notes.md#construct-on-first-use-idiom\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guaranties that:\n+\n+- an object gets constructed prior to its first use",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420047910",
      "id" : 420047910,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0NzkxMA==",
      "original_commit_id" : "7e3f40dd594d81b37458f9f5d36d4d7df99f8917",
      "original_line" : 866,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405709912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420047910",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420048042"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420048042"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/doesn't get/is not/",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T11:47:07Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use idiom\n+------------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"`static` initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the `static` initialization order problem, use the Construct On First Use idiom:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developers-notes.md#construct-on-first-use-idiom\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guaranties that:\n+\n+- an object gets constructed prior to its first use\n+- an object doesnât get destructed until after its last use",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420048042",
      "id" : 420048042,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0ODA0Mg==",
      "original_commit_id" : "7e3f40dd594d81b37458f9f5d36d4d7df99f8917",
      "original_line" : 867,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405709912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420048042",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 7e3f40dd594d81b37458f9f5d36d4d7df99f8917 -> a2234071ddc633cf92ba501126b74bf78731f676 ([pr18881.02](https://github.com/hebasto/bitcoin/commits/pr18881.02) -> [pr18881.03](https://github.com/hebasto/bitcoin/commits/pr18881.03), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.02..pr18881.03)):\r\n\r\n- addressed @jonatack's [comment](https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420046291):\r\n> approach guarantees",
      "created_at" : "2020-05-05T11:49:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624007651",
      "id" : 624007651,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDAwNzY1MQ==",
      "updated_at" : "2020-05-05T11:49:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624007651",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420049394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420049394"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thank you! [Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624007651).",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T11:49:47Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use idiom\n+------------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"`static` initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the `static` initialization order problem, use the Construct On First Use idiom:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developers-notes.md#construct-on-first-use-idiom\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guaranties that:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420049394",
      "id" : 420049394,
      "in_reply_to_id" : 420046291,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0OTM5NA==",
      "original_commit_id" : "7e3f40dd594d81b37458f9f5d36d4d7df99f8917",
      "original_line" : 864,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405712930,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420049394",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420049925"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420049925"
         }
      },
      "author_association" : "MEMBER",
      "body" : "developer",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T11:50:54Z",
      "diff_hunk" : "@@ -13,21 +13,7 @@ const char * const DEFAULT_DEBUGLOGFILE = \"debug.log\";\n \n BCLog::Logger& LogInstance()\n {\n-/**\n- * NOTE: the logger instances is leaked on exit. This is ugly, but will be\n- * cleaned up by the OS/libc. Defining a logger as a global object doesn't work\n- * since the order of destruction of static/global objects is undefined.\n- * Consider if the logger gets destroyed, and then some later destructor calls\n- * LogPrintf, maybe indirectly, and you get a core dump at shutdown trying to\n- * access the logger. When the shutdown sequence is fully audited and tested,\n- * explicit destruction of these objects can be implemented by changing this\n- * from a raw pointer to a std::unique_ptr.\n- * Since the destructor is never called, the logger and all its members must\n- * have a trivial destructor.\n- *\n- * This method of initialization was originally introduced in\n- * ee3374234c60aba2cc4c5cd5cac1c0aefc2d817c.\n- */\n+    // See doc/developers-notes.md#construct-on-first-use-idiom",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420049925",
      "id" : 420049925,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0OTkyNQ==",
      "original_commit_id" : "a2234071ddc633cf92ba501126b74bf78731f676",
      "original_line" : 16,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "src/logging.cpp",
      "position" : null,
      "pull_request_review_id" : 405709912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420049925",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420050170"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420050170"
         }
      },
      "author_association" : "MEMBER",
      "body" : "developer",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T11:51:23Z",
      "diff_hunk" : "@@ -436,8 +436,7 @@ class RNGState {\n \n RNGState& GetRNGState() noexcept\n {\n-    // This C++11 idiom relies on the guarantee that static variable are initialized\n-    // on first call, even when multiple parallel calls are permitted.\n+    // See doc/developers-notes.md#construct-on-first-use-idiom",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420050170",
      "id" : 420050170,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MDE3MA==",
      "original_commit_id" : "a2234071ddc633cf92ba501126b74bf78731f676",
      "original_line" : 439,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/random.cpp",
      "position" : null,
      "pull_request_review_id" : 405709912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420050170",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420050539"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420050539"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If the destructor for an object needs to be called",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T11:52:04Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use idiom\n+------------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"`static` initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the `static` initialization order problem, use the Construct On First Use idiom:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developers-notes.md#construct-on-first-use-idiom\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guarantees that:\n+\n+- an object gets constructed prior to its first use\n+- an object doesnât get destructed until after its last use\n+- the initialization of an object is thread-safe\n+\n+*Note 1*: Even though the object pointed to by a pointer is never deleted, the memory doesn't actually \"leak\" since the operating system automatically reclaims all the memory in a program's heap when that program exits.\n+\n+*Note 2*: If it is required that the destructor for an object is called while the program is exiting, other approaches must be used.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420050539",
      "id" : 420050539,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MDUzOQ==",
      "original_commit_id" : "a2234071ddc633cf92ba501126b74bf78731f676",
      "original_line" : 872,
      "original_position" : 41,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405709912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420050539",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420050657"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420050657"
         }
      },
      "author_association" : "MEMBER",
      "body" : "developer",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T11:52:17Z",
      "diff_hunk" : "@@ -78,21 +78,14 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // See doc/developers-notes.md#construct-on-first-use-idiom",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420050657",
      "id" : 420050657,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MDY1Nw==",
      "original_commit_id" : "a2234071ddc633cf92ba501126b74bf78731f676",
      "original_line" : 86,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 405709912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420050657",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420053647"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420053647"
         }
      },
      "author_association" : "MEMBER",
      "body" : "oops, somehow that comment was published before the review...GitHub :man_shrugging: ",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T11:58:06Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use idiom\n+------------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"`static` initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the `static` initialization order problem, use the Construct On First Use idiom:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developers-notes.md#construct-on-first-use-idiom\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guaranties that:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420053647",
      "id" : 420053647,
      "in_reply_to_id" : 420046291,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA1MzY0Nw==",
      "original_commit_id" : "7e3f40dd594d81b37458f9f5d36d4d7df99f8917",
      "original_line" : 864,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405718197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420053647",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated a2234071ddc633cf92ba501126b74bf78731f676 -> d3c26862e263fea7d49df7f9bc9acef30a84c1ca ([pr18881.03](https://github.com/hebasto/bitcoin/commits/pr18881.03) -> [pr18881.04](https://github.com/hebasto/bitcoin/commits/pr18881.04), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.03..pr18881.04)):\r\n\r\n- addressed @jonatack's comments",
      "created_at" : "2020-05-05T12:14:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624019271",
      "id" : 624019271,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDAxOTI3MQ==",
      "updated_at" : "2020-05-05T12:14:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624019271",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420082930"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420082930"
         }
      },
      "author_association" : "MEMBER",
      "body" : "approach",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T12:50:19Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guarantees that:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420082930",
      "id" : 420082930,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4MjkzMA==",
      "original_commit_id" : "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "original_line" : 864,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405754524,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420082930",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420083226"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420083226"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/use the/be sure to/",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T12:50:50Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420083226",
      "id" : 420083226,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4MzIyNg==",
      "original_commit_id" : "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "original_line" : 853,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405754524,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420083226",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420084466"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420084466"
         }
      },
      "author_association" : "MEMBER",
      "body" : "comment seems unneeded?",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T12:53:00Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420084466",
      "id" : 420084466,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4NDQ2Ng==",
      "original_commit_id" : "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "original_line" : 858,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405754524,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420084466",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420084908"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420084908"
         }
      },
      "author_association" : "MEMBER",
      "body" : "is this code snippet a good explanation of the concept?",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T12:53:44Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420084908",
      "id" : 420084908,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4NDkwOA==",
      "original_commit_id" : "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "original_line" : 856,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405754524,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420084908",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420086744"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420086744"
         }
      },
      "author_association" : "MEMBER",
      "body" : "sorry to re-review the same area, but I think this could be reduced to two points and would be better written as:\r\n- the object is constructed before first use and not destroyed until after last use\r\n- the object initialization is thread-safe\r\n\r\n(also: destructed -> destroyed and the \"its\" can be removed)",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T12:56:34Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guarantees that:\n+\n+- an object is constructed prior to its first use",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420086744",
      "id" : 420086744,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4Njc0NA==",
      "original_commit_id" : "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "original_line" : 866,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405754524,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420086744",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420100644"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420100644"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It seems developers need multi-line comments to describe rationale of using  COFU :)\r\nThis oneliner is just a pointer to docs with detailed explanation and pitfalls (like not calling a destructor). I'd prefer keep it as is.",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T13:17:41Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420100644",
      "id" : 420100644,
      "in_reply_to_id" : 420084466,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEwMDY0NA==",
      "original_commit_id" : "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "original_line" : 858,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405777105,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420100644",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420101738"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420101738"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why not? I'd say \"example\" rather \"explanation\".",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T13:19:16Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420101738",
      "id" : 420101738,
      "in_reply_to_id" : 420084908,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEwMTczOA==",
      "original_commit_id" : "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "original_line" : 856,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405778448,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420101738",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated d3c26862e263fea7d49df7f9bc9acef30a84c1ca -> 86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc ([pr18881.04](https://github.com/hebasto/bitcoin/commits/pr18881.04) -> [pr18881.05](https://github.com/hebasto/bitcoin/commits/pr18881.05), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.04..pr18881.05)):\r\n\r\n- addressed @jonatack's comments",
      "created_at" : "2020-05-05T13:26:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624053939",
      "id" : 624053939,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDA1MzkzOQ==",
      "updated_at" : "2020-05-05T13:26:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624053939",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420107046"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420107046"
         }
      },
      "author_association" : "MEMBER",
      "body" : "[Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624053939).",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T13:26:50Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guarantees that:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420107046",
      "id" : 420107046,
      "in_reply_to_id" : 420082930,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEwNzA0Ng==",
      "original_commit_id" : "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "original_line" : 864,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405785343,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420107046",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420107190"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420107190"
         }
      },
      "author_association" : "MEMBER",
      "body" : "[Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624053939).",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T13:27:01Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420107190",
      "id" : 420107190,
      "in_reply_to_id" : 420083226,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEwNzE5MA==",
      "original_commit_id" : "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "original_line" : 853,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405785532,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420107190",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420107506"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420107506"
         }
      },
      "author_association" : "MEMBER",
      "body" : "[Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-624053939).",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T13:27:27Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guarantees that:\n+\n+- an object is constructed prior to its first use",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420107506",
      "id" : 420107506,
      "in_reply_to_id" : 420086744,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEwNzUwNg==",
      "original_commit_id" : "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "original_line" : 866,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405785948,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420107506",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420109240"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420109240"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, in the codebase it's fine but here it's a pointer to itself :) edit: reading the rendered doc I guess it's fine",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T13:29:45Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420109240",
      "id" : 420109240,
      "in_reply_to_id" : 420084466,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEwOTI0MA==",
      "original_commit_id" : "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "original_line" : 858,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405788154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420109240",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420109425"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420109425"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"its\" seems prevent any ambiguation :)",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T13:30:01Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};\n+    return *g_logger;\n+}\n+```\n+\n+*Rationale*: This approache guarantees that:\n+\n+- an object is constructed prior to its first use",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420109425",
      "id" : 420109425,
      "in_reply_to_id" : 420086744,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEwOTQyNQ==",
      "original_commit_id" : "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "original_line" : 866,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405788393,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420109425",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420112012"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420112012"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sure; people can look it up anyway for more info.",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T13:33:39Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420112012",
      "id" : 420112012,
      "in_reply_to_id" : 420084908,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExMjAxMg==",
      "original_commit_id" : "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "original_line" : 856,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405791697,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420112012",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420112084"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420112084"
         }
      },
      "author_association" : "MEMBER",
      "body" : "As it is an \"example\", the presence of the comment line seems reasonable, no?",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T13:33:44Z",
      "diff_hunk" : "@@ -839,6 +840,37 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, use the Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420112084",
      "id" : 420112084,
      "in_reply_to_id" : 420084466,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExMjA4NA==",
      "original_commit_id" : "d3c26862e263fea7d49df7f9bc9acef30a84c1ca",
      "original_line" : 858,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405791799,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420112084",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420242951"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420242951"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's nicer to use std::unique_pointer here, so that the object also gets destroyed on shutdown (in reserve order compared to initialization).",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T16:29:33Z",
      "diff_hunk" : "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420242951",
      "id" : 420242951,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0Mjk1MQ==",
      "original_commit_id" : "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "original_line" : 859,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405956635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420242951",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420247771"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420247771"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agree that the docs should recommend the version that doesn't leak. An additional note can say that a version that leaks might be preferable in rare circumstances.",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T16:36:16Z",
      "diff_hunk" : "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420247771",
      "id" : 420247771,
      "in_reply_to_id" : 420242951,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0Nzc3MQ==",
      "original_commit_id" : "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "original_line" : 859,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 405962487,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420247771",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420472355"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420472355"
         }
      },
      "author_association" : "MEMBER",
      "body" : "IMO, destroying an object via `std::unique_pointer`:\r\n- is not required as no actual memory leak happens at program exit ([C++ FAQ-a](https://isocpp.org/wiki/faq/ctors#static-init-order-on-first-use) and [FAQ-b](https://isocpp.org/wiki/faq/ctors#nifty-counter-idiom)); in another words, not destroying an object does not implies memory leaks in that case\r\n- is not safe as this object could (potentially) be destroyed before its last use at program exit sequence, e.g., instances of `BCLog::Logger` and `LockData` classes.",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T23:45:37Z",
      "diff_hunk" : "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420472355",
      "id" : 420472355,
      "in_reply_to_id" : 420242951,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3MjM1NQ==",
      "original_commit_id" : "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "original_line" : 859,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 406228938,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420472355",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420476145"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420476145"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The initial intention of changing the docs was to drop every long explanation in the source, and just re-direct a code reader to the docs. If these changes seem controversial, all doc-change commits could be dropped :)",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-05T23:57:47Z",
      "diff_hunk" : "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420476145",
      "id" : 420476145,
      "in_reply_to_id" : 420242951,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3NjE0NQ==",
      "original_commit_id" : "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "original_line" : 859,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 406233142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420476145",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420492795"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420492795"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ð \r\n```cpp\r\nstatic BCLog::Logger logger;\r\nreturn logger;\r\n```",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-06T00:59:59Z",
      "diff_hunk" : "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420492795",
      "id" : 420492795,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5Mjc5NQ==",
      "original_commit_id" : "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "original_line" : 859,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 406250534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420492795",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420503783"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420503783"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> ```c++\r\n> static BCLog::Logger logger;\r\n> return logger;\r\n> ```\r\n\r\nThe `logger` object could (potentially) be destroyed before its last use at program exit sequence that leads to undefined behavior.\r\n\r\n",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-06T01:46:05Z",
      "diff_hunk" : "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420503783",
      "id" : 420503783,
      "in_reply_to_id" : 420492795,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwMzc4Mw==",
      "original_commit_id" : "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "original_line" : 859,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 406261389,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420503783",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420504248"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420504248"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Actually, the d954f7c8c017c7e9bf60f48a8c41da8c498239f7 commit in this PR fixes such issue for the `lockdata` object.",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-06T01:48:14Z",
      "diff_hunk" : "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420504248",
      "id" : 420504248,
      "in_reply_to_id" : 420492795,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwNDI0OA==",
      "original_commit_id" : "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "original_line" : 859,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 406261890,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420504248",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420998960"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420998960"
         }
      },
      "author_association" : "MEMBER",
      "body" : "* Some tools check for leaked memory at exit, so making that the default increases verbosity for those tools.\r\n* The destructor must be trivial to be able to do that in the first place. I am not sure why you remove that requirement in the docs.",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-06T18:21:41Z",
      "diff_hunk" : "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r420998960",
      "id" : 420998960,
      "in_reply_to_id" : 420242951,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5ODk2MA==",
      "original_commit_id" : "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "original_line" : 859,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 406873565,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/420998960",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r421001720"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421001720"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not doing that is not a leak. It's just memory that's still reachable at exit (which at least valgrind classifies differently than leaked memory, and doesn't warn about).\r\n\r\nI think it's just cleaner to clean things up too; for example this makes it easier to move globals into a class if that ever makes sense. Also, if that works, it means there exists a clear layering between which modules depend on which others in terms of initialization order, which is a low-priority nice-to-have if possible.",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-06T18:26:25Z",
      "diff_hunk" : "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r421001720",
      "id" : 421001720,
      "in_reply_to_id" : 420242951,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwMTcyMA==",
      "original_commit_id" : "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "original_line" : 859,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 406877034,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421001720",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r421479070"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421479070"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think you should make this suggestion in general. This solution, while valuable in rare cases such as logging and tracking locks, is a brute-force one that does not belong in actual application code. It's *messy* and assumes we don't actually know what's going on (in regard to initialization dependencies) or what are all the edge cases.\r\n\r\nYou're supposed to expliclty allocate things in a deterministic order during initialization and destroy it in a (usually reversed) deterministic order on shutdown in the appropriate functions in `init.cpp`, not rely on global initialization order nor first use.\r\n",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-07T12:52:21Z",
      "diff_hunk" : "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r421479070",
      "id" : 421479070,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3OTA3MA==",
      "original_commit_id" : "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "original_line" : 853,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 407439396,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421479070",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK on using this solution in this specific place but NACK on suggesting its use in general.",
      "created_at" : "2020-05-07T12:53:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625236733",
      "id" : 625236733,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNTIzNjczMw==",
      "updated_at" : "2020-05-07T12:53:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625236733",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r421480237"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421480237"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Right, `unique_ptr` won't work here. It was the same destruction order (thougn not initialization order) problem as using a global directly.",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-07T12:54:11Z",
      "diff_hunk" : "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r421480237",
      "id" : 421480237,
      "in_reply_to_id" : 420242951,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MDIzNw==",
      "original_commit_id" : "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "original_line" : 859,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 407440860,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421480237",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "<details><summary>looked more deeply into this to try to understand it better</summary>\r\n<p>\r\n\r\nI didn't find a direct reference to a \"COFU\" or \"Construct on First Use\" idiom in any of [these books](https://jonatack.github.io/articles/books-for-bitcoin-core). The best references online seemed to be:\r\n\r\n- in the isocpp wiki faq starting from https://isocpp.org/wiki/faq/ctors#static-init-order\r\n\r\n- as an exception to https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#i3-avoid-singletons\r\n\r\n- and as idiom 16 in https://upload.wikimedia.org/wikipedia/commons/5/55/MoreCppIdioms.pdf\r\n</p></details>\r\n\r\nand I agree with not suggesting it in general.\r\n",
      "created_at" : "2020-05-07T14:23:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625286358",
      "id" : 625286358,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNTI4NjM1OA==",
      "updated_at" : "2020-05-07T14:23:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625286358",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc -> 6bc686839a7cc09e3586e2a47ae4f16b5d918d3a ([pr18881.05](https://github.com/hebasto/bitcoin/commits/pr18881.05) -> [pr18881.06](https://github.com/hebasto/bitcoin/commits/pr18881.06), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.05..pr18881.06)):\r\n\r\n- only the fix of UB in the `DeleteLock()` function remains",
      "created_at" : "2020-05-07T14:40:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625296903",
      "id" : 625296903,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNTI5NjkwMw==",
      "updated_at" : "2020-05-07T14:40:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625296903",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "created_at" : "2020-05-07T14:41:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625297515",
      "id" : 625297515,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNTI5NzUxNQ==",
      "updated_at" : "2020-05-07T14:41:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625297515",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r421561195"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421561195"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changes to the `developer-notes.md` [dropped](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625296903).",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-07T14:43:39Z",
      "diff_hunk" : "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r421561195",
      "id" : 421561195,
      "in_reply_to_id" : 420242951,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2MTE5NQ==",
      "original_commit_id" : "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "original_line" : 859,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 407544310,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421561195",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r421561551"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421561551"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changes to the `developer-notes.md` [dropped](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625296903).",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-07T14:44:04Z",
      "diff_hunk" : "@@ -839,6 +840,36 @@ namespace {\n #endif // BITCOIN_FOO_BAR_H\n ```\n \n+Construct On First Use\n+------------------------\n+\n+It is not possible to control the order in which non-local static objects in *different* translation units are initialized.\n+This is the so-called \"static initialization order problem\". It could cause the use of an object:\n+- before it is constructed (on program startup)\n+- after it is destructed (at program exit)\n+\n+Both cases lead to undefined behavior.\n+\n+To prevent the static initialization order problem, be sure to Construct On First Use:\n+\n+```C++\n+BCLog::Logger& LogInstance()\n+{\n+    // See doc/developer-notes.md#construct-on-first-use\n+    static BCLog::Logger* g_logger{new BCLog::Logger()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r421561551",
      "id" : 421561551,
      "in_reply_to_id" : 420492795,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU2MTU1MQ==",
      "original_commit_id" : "86ce03c53e22f0ce2c4bfbabd4aae5cf62dcb0fc",
      "original_line" : 859,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 407544702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421561551",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Light code review ACK [6bc6868](https://github.com/bitcoin/bitcoin/commit/6bc686839a7cc09e3586e2a47ae4f16b5d918d3a), this commit appears to be an implementation of the solution in https://isocpp.org/wiki/faq/ctors#static-init-order-on-first-use-members\r\n\r\nTo be exact: https://isocpp.org/wiki/faq/ctors#static-init-order-on-first-use",
      "created_at" : "2020-05-07T15:19:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625320217",
      "id" : 625320217,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNTMyMDIxNw==",
      "updated_at" : "2020-05-07T15:19:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625320217",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> To be exact: https://isocpp.org/wiki/faq/ctors#static-init-order-on-first-use\r\n\r\nYes.",
      "created_at" : "2020-05-07T15:23:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-625322312",
      "id" : 625322312,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNTMyMjMxMg==",
      "updated_at" : "2020-05-07T15:23:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625322312",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r423808117"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423808117"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why is the above UB, but this not?",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-12T15:04:35Z",
      "diff_hunk" : "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r423808117",
      "id" : 423808117,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwODExNw==",
      "original_commit_id" : "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "original_line" : 92,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 410137892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/423808117",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r424187486"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424187486"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The `g_lockstack` variable is involved in locking and unlocking `AnnotatedMixin<>` mutexes.\r\n\r\nBut `lockdata` is used in `AnnotatedMixin<>` destructor:\r\nhttps://github.com/bitcoin/bitcoin/blob/8da1e43b63cb36759eeb1fcfd6768163265c44e2/src/sync.h#L84-L86\r\n\r\n_and_ we have global `AnnotatedMixin<>` mutexes.",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-13T05:52:21Z",
      "diff_hunk" : "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r424187486",
      "id" : 424187486,
      "in_reply_to_id" : 423808117,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE4NzQ4Ng==",
      "original_commit_id" : "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "original_line" : 92,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 410605642,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424187486",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r424344096"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424344096"
         }
      },
      "author_association" : "MEMBER",
      "body" : "So it would make sense to fix both occurrences of UB in one pull",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-13T10:45:53Z",
      "diff_hunk" : "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r424344096",
      "id" : 424344096,
      "in_reply_to_id" : 423808117,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM0NDA5Ng==",
      "original_commit_id" : "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "original_line" : 92,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 410804242,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424344096",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r424369462"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424369462"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sorry for my poor English...\r\nI meant that only `lockdata` could be a source of UB because it is used in the `~AnnotatedMixin<>` and the destroy order itself is not predictable in any way.\r\n\r\nThe destroying of `g_lockstack` couldn't cause UB, IMO.",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-13T11:37:34Z",
      "diff_hunk" : "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r424369462",
      "id" : 424369462,
      "in_reply_to_id" : 423808117,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2OTQ2Mg==",
      "original_commit_id" : "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "original_line" : 92,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 410836911,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424369462",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r424376692"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424376692"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok, I have deleted my comment. Here is the backtrace (same backtrace on master and this pull):\r\n\r\n<details><summary>backtrace</summary>\r\n\r\n```\r\nvalgrind /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn -runs=1 /bitcoin-core/ci/scratch/qa-assets/fuzz_seed_corpus/process_message_blocktxn\r\n==51564== Memcheck, a memory error detector\r\n==51564== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\r\n==51564== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info\r\n==51564== Command: /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn -runs=1 /bitcoin-core/ci/scratch/qa-assets/fuzz_seed_corpus/process_message_blocktxn\r\n==51564== \r\nINFO: Seed: 2408119127\r\nINFO: Loaded 1 modules   (115207 inline 8-bit counters): 115207 [0x1357748, 0x137394f), \r\nINFO: Loaded 1 PC tables (115207 PCs): 115207 [0x1373950,0x15359c0), \r\nINFO:      304 files found in /bitcoin-core/ci/scratch/qa-assets/fuzz_seed_corpus/process_message_blocktxn\r\nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 1007323 bytes\r\nINFO: seed corpus: files: 304 min: 1b max: 1007323b total: 7665972b rss: 245Mb\r\n#64\tpulse  cov: 3446 ft: 4828 corp: 45/2817b exec/s: 32 rss: 271Mb\r\n#128\tpulse  cov: 3507 ft: 6576 corp: 103/13967b exec/s: 42 rss: 277Mb\r\n#256\tpulse  cov: 3511 ft: 8158 corp: 211/121Kb exec/s: 32 rss: 277Mb\r\n#305\tINITED cov: 3511 ft: 8241 corp: 229/480Kb exec/s: 30 rss: 280Mb\r\n#305\tDONE   cov: 3511 ft: 8241 corp: 229/480Kb lim: 301441 exec/s: 30 rss: 280Mb\r\nDone 305 runs in 10 second(s)\r\n==51564== Invalid write of size 8\r\n==51564==    at 0xA5D451: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==    by 0xB05A9D: TestingSetup::~TestingSetup() (setup_common.cpp:174)\r\n==51564==    by 0x4CC5A26: __run_exit_handlers (exit.c:108)\r\n==51564==  Address 0x5170be0 is 0 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 1\r\n==51564==    at 0xA5D505: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==    by 0xB05A9D: TestingSetup::~TestingSetup() (setup_common.cpp:174)\r\n==51564==  Address 0x5170be8 is 8 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0x4991D88: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA5D525: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==  Address 0x5170bf0 is 16 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0x4991DC5: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA5D525: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==  Address 0x5170c00 is 32 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0x4991DB1: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA5D525: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==  Address 0x5170bf8 is 24 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0x4991D88: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA5D540: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==  Address 0x5170c10 is 48 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0x4991DC5: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA5D540: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==  Address 0x5170c20 is 64 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0x4991DB1: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA5D540: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==  Address 0x5170c18 is 56 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 4\r\n==51564==    at 0xA5D54D: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==    by 0xB05A9D: TestingSetup::~TestingSetup() (setup_common.cpp:174)\r\n==51564==  Address 0x5170c38 is 88 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0xA5D555: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==    by 0xB05A9D: TestingSetup::~TestingSetup() (setup_common.cpp:174)\r\n==51564==  Address 0x5170c30 is 80 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid read of size 8\r\n==51564==    at 0xA57487: push_lock(void*, CLockLocation const&) (sync.cpp:138)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA18954: CScheduler::stop(bool) (scheduler.cpp:77)\r\n==51564==    by 0xB05A9D: TestingSetup::~TestingSetup() (setup_common.cpp:174)\r\n==51564==    by 0x4CC5A26: __run_exit_handlers (exit.c:108)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Address 0x5170be0 is 0 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid read of size 8\r\n==51564==    at 0x4991E34: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA57AD0: CLockLocation::~CLockLocation() (sync.cpp:43)\r\n==51564==    by 0xA5C3B9: std::pair<void*, CLockLocation>::~pair() (stl_iterator.h:1286)\r\n==51564==    by 0xA5E64E: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::destroy<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*) (new_allocator.h:153)\r\n==51564==    by 0xA5E5B2: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::destroy<std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*) (alloc_traits.h:497)\r\n==51564==    by 0xA659B5: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::pop_back() (stl_vector.h:1226)\r\n==51564==    by 0xA5855A: pop_lock() (sync.cpp:155)\r\n==51564==    by 0xA584D2: LeaveCritical() (sync.cpp:177)\r\n==51564==    by 0x4DF72C: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::~UniqueLock() (sync.h:169)\r\n==51564==    by 0xA1899E: CScheduler::stop(bool) (scheduler.cpp:82)\r\n==51564==    by 0xB05A9D: TestingSetup::~TestingSetup() (setup_common.cpp:174)\r\n==51564==    by 0x4CC5A26: __run_exit_handlers (exit.c:108)\r\n==51564==  Address 0x5170c10 is 48 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid read of size 8\r\n==51564==    at 0x4991E34: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA57AE0: CLockLocation::~CLockLocation() (sync.cpp:43)\r\n==51564==    by 0xA5C3B9: std::pair<void*, CLockLocation>::~pair() (stl_iterator.h:1286)\r\n==51564==    by 0xA5E64E: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::destroy<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*) (new_allocator.h:153)\r\n==51564==    by 0xA5E5B2: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::destroy<std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*) (alloc_traits.h:497)\r\n==51564==    by 0xA659B5: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::pop_back() (stl_vector.h:1226)\r\n==51564==    by 0xA5855A: pop_lock() (sync.cpp:155)\r\n==51564==    by 0xA584D2: LeaveCritical() (sync.cpp:177)\r\n==51564==    by 0x4DF72C: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::~UniqueLock() (sync.h:169)\r\n==51564==    by 0xA1899E: CScheduler::stop(bool) (scheduler.cpp:82)\r\n==51564==    by 0xB05A9D: TestingSetup::~TestingSetup() (setup_common.cpp:174)\r\n==51564==    by 0x4CC5A26: __run_exit_handlers (exit.c:108)\r\n==51564==  Address 0x5170bf0 is 16 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0x4991D97: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA5D525: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA1A5E8: SingleThreadedSchedulerClient::ProcessQueue() (scheduler.cpp:161)\r\n==51564==  Address 0x5170bf0 is 16 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0x4991D9E: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA5D525: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA1A5E8: SingleThreadedSchedulerClient::ProcessQueue() (scheduler.cpp:161)\r\n==51564==  Address 0x5170c00 is 32 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid read of size 8\r\n==51564==    at 0xA57487: push_lock(void*, CLockLocation const&) (sync.cpp:138)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA1A5E8: SingleThreadedSchedulerClient::ProcessQueue() (scheduler.cpp:161)\r\n==51564==    by 0xA1B0CF: SingleThreadedSchedulerClient::EmptyQueue() (scheduler.cpp:201)\r\n==51564==    by 0x8DE049: CMainSignals::FlushBackgroundCallbacks() (validationinterface.cpp:103)\r\n==51564==    by 0xB05B4A: TestingSetup::~TestingSetup() (setup_common.cpp:177)\r\n==51564==    by 0x4CC5A26: __run_exit_handlers (exit.c:108)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Address 0x5170be0 is 0 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0x4991D97: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA5D540: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA68C2B: CThreadInterrupt::operator()() (threadinterrupt.cpp:25)\r\n==51564==  Address 0x5170c10 is 48 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid write of size 8\r\n==51564==    at 0x4991D9E: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)\r\n==51564==    by 0xA5D540: CLockLocation::CLockLocation(CLockLocation&&) (sync.cpp:43)\r\n==51564==    by 0xA5D467: std::pair<void*, CLockLocation>::pair(std::pair<void*, CLockLocation>&&) (stl_pair.h:304)\r\n==51564==    by 0xA5D3B1: void __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (new_allocator.h:147)\r\n==51564==    by 0xA5D00D: void std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::construct<std::pair<void*, CLockLocation>, std::pair<void*, CLockLocation> >(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, std::pair<void*, CLockLocation>&&) (alloc_traits.h:484)\r\n==51564==    by 0xA5CE86: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:115)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5559B8: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4DF455: UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::UniqueLock(AnnotatedMixin<std::mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA68C2B: CThreadInterrupt::operator()() (threadinterrupt.cpp:25)\r\n==51564==  Address 0x5170c20 is 64 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== Invalid read of size 8\r\n==51564==    at 0xA5EB4A: std::pair<void*, void*>::pair<void*&, true>(void* const&, void*&) (stl_pair.h:326)\r\n==51564==    by 0xA5C46B: std::pair<std::__decay_and_strip<void* const&>::__type, std::__decay_and_strip<void*&>::__type> std::make_pair<void* const&, void*&>(void* const&, void*&) (stl_pair.h:529)\r\n==51564==    by 0xA57515: push_lock(void*, CLockLocation const&) (sync.cpp:141)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0x6C7727: CTxMemPool::clear() (txmempool.cpp:600)\r\n==51564==    by 0x81D4D5: UnloadBlockIndex() (validation.cpp:4584)\r\n==51564==    by 0xB05BF8: TestingSetup::~TestingSetup() (setup_common.cpp:185)\r\n==51564==    by 0x4CC5A26: __run_exit_handlers (exit.c:108)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Address 0x5170be0 is 0 bytes inside a block of size 768 free'd\r\n==51564==    at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E79A: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::deallocate(std::pair<void*, CLockLocation>*, unsigned long) (new_allocator.h:128)\r\n==51564==    by 0xA5E6F2: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::deallocate(std::allocator<std::pair<void*, CLockLocation> >&, std::pair<void*, CLockLocation>*, unsigned long) (alloc_traits.h:470)\r\n==51564==    by 0xA5DB99: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_deallocate(std::pair<void*, CLockLocation>*, unsigned long) (stl_vector.h:351)\r\n==51564==    by 0xA60D20: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~_Vector_base() (stl_vector.h:332)\r\n==51564==    by 0xA57104: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::~vector() (stl_vector.h:680)\r\n==51564==    by 0x4CC643E: __call_tls_dtors (cxa_thread_atexit_impl.c:155)\r\n==51564==    by 0x4CC5B8C: __run_exit_handlers (exit.c:46)\r\n==51564==    by 0x4CC5BDF: exit (exit.c:139)\r\n==51564==    by 0x4236D8: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==    by 0x44C322: main (in /bitcoin-core/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/process_message_blocktxn)\r\n==51564==  Block was alloc'd at\r\n==51564==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==51564==    by 0xA5E095: __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) (new_allocator.h:114)\r\n==51564==    by 0xA5DF94: std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) (alloc_traits.h:444)\r\n==51564==    by 0xA5D90D: std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) (stl_vector.h:343)\r\n==51564==    by 0xA5D17F: void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_realloc_insert<std::pair<void*, CLockLocation> >(__gnu_cxx::__normal_iterator<std::pair<void*, CLockLocation>*, std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > > >, std::pair<void*, CLockLocation>&&) (vector.tcc:440)\r\n==51564==    by 0xA5CED2: std::pair<void*, CLockLocation>& std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) (vector.tcc:121)\r\n==51564==    by 0xA5C255: std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::push_back(std::pair<void*, CLockLocation>&&) (stl_vector.h:1201)\r\n==51564==    by 0xA573FE: push_lock(void*, CLockLocation const&) (sync.cpp:135)\r\n==51564==    by 0xA572A4: EnterCritical(char const*, char const*, int, void*, bool) (sync.cpp:160)\r\n==51564==    by 0x5160A8: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) (sync.h:126)\r\n==51564==    by 0x4BB885: UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) (sync.h:152)\r\n==51564==    by 0xA7479F: ArgsManager::GetSetting(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const (system.cpp:861)\r\n==51564== \r\n==51564== \r\n==51564== HEAP SUMMARY:\r\n==51564==     in use at exit: 23,172,862 bytes in 1,487 blocks\r\n==51564==   total heap usage: 138,583 allocs, 137,096 frees, 324,726,925 bytes allocated\r\n==51564== \r\n==51564== LEAK SUMMARY:\r\n==51564==    definitely lost: 0 bytes in 0 blocks\r\n==51564==    indirectly lost: 0 bytes in 0 blocks\r\n==51564==      possibly lost: 304 bytes in 1 blocks\r\n==51564==    still reachable: 23,172,558 bytes in 1,486 blocks\r\n==51564==         suppressed: 0 bytes in 0 blocks\r\n==51564== Rerun with --leak-check=full to see details of leaked memory\r\n==51564== \r\n==51564== For lists of detected and suppressed errors, rerun with: -s\r\n==51564== ERROR SUMMARY: 167 errors from 19 contexts (suppressed: 0 from 0)\r\n```\r\n\r\n</details>",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-13T11:51:46Z",
      "diff_hunk" : "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r424376692",
      "id" : 424376692,
      "in_reply_to_id" : 423808117,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3NjY5Mg==",
      "original_commit_id" : "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "original_line" : 92,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 410846175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424376692",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r424377871"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424377871"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> - struct desctructor locks the global mutex -> Reads free'd `lockstack`\r\n\r\nI can see only locking of `lockdata.dd_mutex`, or did I miss?\r\n\r\n",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-13T11:54:00Z",
      "diff_hunk" : "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r424377871",
      "id" : 424377871,
      "in_reply_to_id" : 423808117,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM3Nzg3MQ==",
      "original_commit_id" : "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "original_line" : 92,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 410847628,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/424377871",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426153367"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426153367"
         }
      },
      "author_association" : "MEMBER",
      "body" : "So reading from the bt, it looks like `g_lockstack` is initialized on first use. Not sure why, though. Because it is initialized on first use, it leads to invalid memory access.\r\n\r\nDonating the memory to the operating system at the end instead of calling the destructor fixes the problem for me.",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-16T13:24:02Z",
      "diff_hunk" : "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426153367",
      "id" : 426153367,
      "in_reply_to_id" : 423808117,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MzM2Nw==",
      "original_commit_id" : "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "original_line" : 92,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 413076551,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426153367",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426153517"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426153517"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is  this something inherent to `thread_local` to construct on first use?\r\n\r\nRunning this example program:\r\n\r\n```cpp\r\nstruct Foo {\r\n    Mutex m_mut;\r\n    Foo()\r\n    {\r\n        std::cout << __LINE__ << __func__ << std::endl;\r\n        LOCK(m_mut);\r\n    }\r\n    ~Foo()\r\n    {\r\n        std::cout << __LINE__ << __func__ << std::endl;\r\n        LOCK(m_mut);\r\n    }\r\n};\r\n\r\nvoid initialize()\r\n{\r\n}\r\n\r\nvoid test_one_input(const std::vector<uint8_t>& buffer)\r\n{\r\n    static Foo bar;\r\n}\r\n```\r\n\r\ngives me\r\n\r\n```\r\n14Foo\r\n80LockStack\r\n84~LockStack\r\n19~Foo\r\n```",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-16T13:26:09Z",
      "diff_hunk" : "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426153517",
      "id" : 426153517,
      "in_reply_to_id" : 423808117,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MzUxNw==",
      "original_commit_id" : "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "original_line" : 92,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 413076683,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426153517",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426153572"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426153572"
         }
      },
      "author_association" : "MEMBER",
      "body" : "How I expect it to work from reading the code was\r\n\r\n```\r\nLockStack\r\nFoo\r\n~Foo\r\n~LockStack",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-16T13:27:21Z",
      "diff_hunk" : "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426153572",
      "id" : 426153572,
      "in_reply_to_id" : 423808117,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1MzU3Mg==",
      "original_commit_id" : "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "original_line" : 92,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 413076739,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426153572",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426218529"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426218529"
         }
      },
      "author_association" : "MEMBER",
      "body" : "As I understand, `~TestingSetup()` locks `Mutex newTaskMutex`, and, consequently, uses `LockStack g_lockstack`.\r\n\r\nHaving a `static` instance of the `TestingSetup` makes the destroying order unpredictable that leads to UB due to the possible usage of (writing to and reading from) `g_lockstack`.\r\n\r\nI found two cases of a `static` instance of the `TestingSetup`:\r\nhttps://github.com/bitcoin/bitcoin/blob/f8123d483caaee64c28be77fb5b6ae12293ddc4a/src/test/fuzz/process_messages.cpp#L19\r\nhttps://github.com/bitcoin/bitcoin/blob/f8123d483caaee64c28be77fb5b6ae12293ddc4a/src/test/fuzz/process_message.cpp#L44\r\n\r\n\r\n@MarcoFalke \r\n> Donating the memory to the operating system at the end instead of calling the destructor fixes the problem for me.\r\n\r\nWhich object are you talking about?",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-17T05:18:39Z",
      "diff_hunk" : "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426218529",
      "id" : 426218529,
      "in_reply_to_id" : 423808117,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIxODUyOQ==",
      "original_commit_id" : "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "original_line" : 92,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 413127911,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426218529",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426232697"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426232697"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke \r\n\r\nI can confirm that the following patch fixes all of the memory errors mentioned in this pull:\r\n```diff\r\ndiff --git a/src/sync.cpp b/src/sync.cpp\r\nindex 41c75302d..9b99f5cfa 100644\r\n--- a/src/sync.cpp\r\n+++ b/src/sync.cpp\r\n@@ -89,7 +89,12 @@ LockData& GetLockData() {\r\n     return *lockdata;\r\n }\r\n \r\n-static thread_local LockStack g_lockstack;\r\n+LockStack& GetLockStack() {\r\n+    // This approach guarantees that the *lockstack object is not destroyed until after its last use.\r\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\r\n+    static thread_local LockStack* lockstack{new LockStack()};\r\n+    return *lockstack;\r\n+}\r\n \r\n static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch, const LockStack& s1, const LockStack& s2)\r\n {\r\n@@ -126,16 +131,17 @@ static void push_lock(void* c, const CLockLocation& locklocation)\r\n     LockData& lockdata = GetLockData();\r\n     std::lock_guard<std::mutex> lock(lockdata.dd_mutex);\r\n \r\n-    g_lockstack.push_back(std::make_pair(c, locklocation));\r\n+    LockStack& lockstack = GetLockStack();\r\n+    lockstack.push_back(std::make_pair(c, locklocation));\r\n \r\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack) {\r\n+    for (const std::pair<void*, CLockLocation>& i : lockstack) {\r\n         if (i.first == c)\r\n             break;\r\n \r\n         std::pair<void*, void*> p1 = std::make_pair(i.first, c);\r\n         if (lockdata.lockorders.count(p1))\r\n             continue;\r\n-        lockdata.lockorders.emplace(p1, g_lockstack);\r\n+        lockdata.lockorders.emplace(p1, lockstack);\r\n \r\n         std::pair<void*, void*> p2 = std::make_pair(c, i.first);\r\n         lockdata.invlockorders.insert(p2);\r\n@@ -146,7 +152,7 @@ static void push_lock(void* c, const CLockLocation& locklocation)\r\n \r\n static void pop_lock()\r\n {\r\n-    g_lockstack.pop_back();\r\n+    GetLockStack().pop_back();\r\n }\r\n \r\n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry)\r\n@@ -156,8 +162,9 @@ void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs\r\n \r\n void CheckLastCritical(void* cs, std::string& lockname, const char* guardname, const char* file, int line)\r\n {\r\n-    if (!g_lockstack.empty()) {\r\n-        const auto& lastlock = g_lockstack.back();\r\n+    LockStack& lockstack = GetLockStack();\r\n+    if (!lockstack.empty()) {\r\n+        const auto& lastlock = lockstack.back();\r\n         if (lastlock.first == cs) {\r\n             lockname = lastlock.second.Name();\r\n             return;\r\n@@ -174,14 +181,16 @@ void LeaveCritical()\r\n std::string LocksHeld()\r\n {\r\n     std::string result;\r\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack)\r\n+    LockStack& lockstack = GetLockStack();\r\n+    for (const std::pair<void*, CLockLocation>& i : lockstack)\r\n         result += i.second.ToString() + std::string(\"\\n\");\r\n     return result;\r\n }\r\n \r\n void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\r\n {\r\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack)\r\n+    LockStack& lockstack = GetLockStack();\r\n+    for (const std::pair<void*, CLockLocation>& i : lockstack)\r\n         if (i.first == cs)\r\n             return;\r\n     tfm::format(std::cerr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\r\n@@ -190,7 +199,8 @@ void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine,\r\n \r\n void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\r\n {\r\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack) {\r\n+    LockStack& lockstack = GetLockStack();\r\n+    for (const std::pair<void*, CLockLocation>& i : lockstack) {\r\n         if (i.first == cs) {\r\n             tfm::format(std::cerr, \"Assertion failed: lock %s held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\r\n             abort();\r\n```\r\n\r\nGoing to investigate for any regression.",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-17T08:23:24Z",
      "diff_hunk" : "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426232697",
      "id" : 426232697,
      "in_reply_to_id" : 423808117,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzMjY5Nw==",
      "original_commit_id" : "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "original_line" : 92,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 413138747,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426232697",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426245017"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426245017"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Having a static instance of the TestingSetup makes the destroying order unpredictable\r\n\r\nI wasn't aware of that. I assumed that the order globals are destroyed is the inverse order of how they were constructed.",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-17T10:37:19Z",
      "diff_hunk" : "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426245017",
      "id" : 426245017,
      "in_reply_to_id" : 423808117,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NTAxNw==",
      "original_commit_id" : "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "original_line" : 92,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 413148818,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426245017",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426245565"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426245565"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I wasn't aware of that. I assumed that the order globals are destroyed is the inverse order of how they were constructed.\r\n\r\nThat is correct. But if globals are defined in _different_ translation units then the order of how them are constructed is unpredictable.",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-17T10:42:42Z",
      "diff_hunk" : "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426245565",
      "id" : 426245565,
      "in_reply_to_id" : 423808117,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NTU2NQ==",
      "original_commit_id" : "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "original_line" : 92,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 413149300,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426245565",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426246117"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426246117"
         }
      },
      "author_association" : "MEMBER",
      "body" : "TIL\r\n\r\nAnyway, I did the same changes as in your comment and for me that fixed the problems.",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-17T10:48:14Z",
      "diff_hunk" : "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426246117",
      "id" : 426246117,
      "in_reply_to_id" : 423808117,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NjExNw==",
      "original_commit_id" : "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "original_line" : 92,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 413149718,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426246117",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426246120"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426246120"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Lets move them all to same unit :trollface: ",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-17T10:48:16Z",
      "diff_hunk" : "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426246120",
      "id" : 426246120,
      "in_reply_to_id" : 423808117,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NjEyMA==",
      "original_commit_id" : "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "original_line" : 92,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 413149723,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426246120",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426246261"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426246261"
         }
      },
      "author_association" : "MEMBER",
      "body" : "main.cpp, maybe?",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-17T10:49:44Z",
      "diff_hunk" : "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426246261",
      "id" : 426246261,
      "in_reply_to_id" : 423808117,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NjI2MQ==",
      "original_commit_id" : "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "original_line" : 92,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 413149850,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426246261",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426249656"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426249656"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Lets move them all to same unit :trollface:\r\n\r\n> main.cpp, maybe?\r\n\r\nWhat about unit tests?",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-17T11:24:32Z",
      "diff_hunk" : "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426249656",
      "id" : 426249656,
      "in_reply_to_id" : 423808117,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0OTY1Ng==",
      "original_commit_id" : "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "original_line" : 92,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 413152562,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426249656",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 6bc686839a7cc09e3586e2a47ae4f16b5d918d3a -> d34871883ce116b8ba4e3add5d5330215a0b16f3 ([pr18881.06](https://github.com/hebasto/bitcoin/commits/pr18881.06) -> [pr18881.07](https://github.com/hebasto/bitcoin/commits/pr18881.07), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.06..pr18881.07)):\r\n\r\n- add a new commit to address @MarcoFalke's [comment](https://github.com/bitcoin/bitcoin/pull/18881#discussion_r423808117)",
      "created_at" : "2020-05-17T12:11:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-629787071",
      "id" : 629787071,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyOTc4NzA3MQ==",
      "updated_at" : "2020-05-17T12:11:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629787071",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254133"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254133"
         }
      },
      "author_association" : "MEMBER",
      "body" : "[Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-629787071).",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-17T12:11:27Z",
      "diff_hunk" : "@@ -78,21 +78,15 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n static thread_local LockStack g_lockstack;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254133",
      "id" : 426254133,
      "in_reply_to_id" : 423808117,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1NDEzMw==",
      "original_commit_id" : "6bc686839a7cc09e3586e2a47ae4f16b5d918d3a",
      "original_line" : 92,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 413156230,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254133",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254548"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254548"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe also mention that this is only safe to do because the object happens to have a trivial destructor?",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-17T12:15:33Z",
      "diff_hunk" : "@@ -78,24 +78,23 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the *lockdata object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\n+    static LockData* lockdata{new LockData()};\n+    return *lockdata;\n }\n \n-static thread_local LockStack g_lockstack;\n+LockStack& GetLockStack() {\n+    // This approach guarantees that the *lockstack object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254548",
      "id" : 426254548,
      "line" : 97,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1NDU0OA==",
      "original_commit_id" : "d34871883ce116b8ba4e3add5d5330215a0b16f3",
      "original_line" : 97,
      "original_position" : 28,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : 55,
      "pull_request_review_id" : 413156561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254548",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254602"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254602"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    const LockStack& lockstack = GetLockStack();\r\n```",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-17T12:15:58Z",
      "diff_hunk" : "@@ -162,8 +162,9 @@ void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs\n \n void CheckLastCritical(void* cs, std::string& lockname, const char* guardname, const char* file, int line)\n {\n-    if (!g_lockstack.empty()) {\n-        const auto& lastlock = g_lockstack.back();\n+    LockStack& lockstack = GetLockStack();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254602",
      "id" : 426254602,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1NDYwMg==",
      "original_commit_id" : "d34871883ce116b8ba4e3add5d5330215a0b16f3",
      "original_line" : 165,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 413156561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254602",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254613"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254613"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    const LockStack& lockstack = GetLockStack();\r\n```",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-17T12:16:16Z",
      "diff_hunk" : "@@ -180,14 +181,16 @@ void LeaveCritical()\n std::string LocksHeld()\n {\n     std::string result;\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack)\n+    LockStack& lockstack = GetLockStack();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254613",
      "id" : 426254613,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1NDYxMw==",
      "original_commit_id" : "d34871883ce116b8ba4e3add5d5330215a0b16f3",
      "original_line" : 184,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 413156561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254613",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254633"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254633"
         }
      },
      "author_association" : "MEMBER",
      "body" : "same",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-17T12:16:28Z",
      "diff_hunk" : "@@ -180,14 +181,16 @@ void LeaveCritical()\n std::string LocksHeld()\n {\n     std::string result;\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack)\n+    LockStack& lockstack = GetLockStack();\n+    for (const std::pair<void*, CLockLocation>& i : lockstack)\n         result += i.second.ToString() + std::string(\"\\n\");\n     return result;\n }\n \n void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n {\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack)\n+    LockStack& lockstack = GetLockStack();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254633",
      "id" : 426254633,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1NDYzMw==",
      "original_commit_id" : "d34871883ce116b8ba4e3add5d5330215a0b16f3",
      "original_line" : 192,
      "original_position" : 91,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 413156561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254633",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254648"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254648"
         }
      },
      "author_association" : "MEMBER",
      "body" : "same",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-17T12:16:34Z",
      "diff_hunk" : "@@ -196,7 +199,8 @@ void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine,\n \n void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n {\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack) {\n+    LockStack& lockstack = GetLockStack();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426254648",
      "id" : 426254648,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1NDY0OA==",
      "original_commit_id" : "d34871883ce116b8ba4e3add5d5330215a0b16f3",
      "original_line" : 202,
      "original_position" : 101,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : null,
      "pull_request_review_id" : 413156561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426254648",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated d34871883ce116b8ba4e3add5d5330215a0b16f3 -> f5c00ba32a041108d0c7c7c8f4c5709b82e1e91a ([pr18881.07](https://github.com/hebasto/bitcoin/commits/pr18881.07) -> [pr18881.08](https://github.com/hebasto/bitcoin/commits/pr18881.08), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.07..pr18881.08)):\r\n\r\n- addressed recent @MarcoFalke's comments",
      "created_at" : "2020-05-17T13:01:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-629794045",
      "id" : 629794045,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyOTc5NDA0NQ==",
      "updated_at" : "2020-05-17T13:01:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629794045",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK f5c00ba32a041108d0c7c7c8f4c5709b82e1e91a",
      "created_at" : "2020-05-17T13:13:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-629795992",
      "id" : 629795992,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyOTc5NTk5Mg==",
      "updated_at" : "2020-05-17T13:13:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629795992",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "```\r\n=================================================================\r\n\r\n==28222==ERROR: LeakSanitizer: detected memory leaks\r\n\r\nDirect leak of 240 byte(s) in 10 object(s) allocated from:\r\n\r\n    #0 0x5559dd5b8762 in operator new(unsigned long) (/home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/test_bitcoin+0x2e23762)\r\n\r\n    #1 0x5559ded68cff in GetLockStack() /home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/sync.cpp:97:46\r\n\r\n    #2 0x5559ded68eb9 in EnterCritical(char const*, char const*, int, void*, bool) /home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/sync.cpp:162:5\r\n\r\n    #3 0x5559ddcf94f9 in UniqueLock<AnnotatedMixin<std::mutex>, std::unique_lock<std::mutex> >::Enter(char const*, char const*, int) /home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/./sync.h:126:9\r\n\r\nDirect leak of 96 byte(s) in 4 object(s) allocated from:\r\n\r\n    #0 0x5559dd5b8762 in operator new(unsigned long) (/home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/test_bitcoin+0x2e23762)\r\n\r\n    #1 0x5559ded68cff in GetLockStack() /home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/sync.cpp:97:46\r\n\r\n    #2 0x5559ded68eb9 in EnterCritical(char const*, char const*, int, void*, bool) /home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/sync.cpp:162:5\r\n\r\n    #3 0x5559dd8f1455 in CCheckQueueControl<checkqueue_tests::FakeCheck>::CCheckQueueControl(CCheckQueue<checkqueue_tests::FakeCheck>*) /home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/./checkqueue.h:184:13\r\n\r\n    #4 0x7fa81886cbcc  (/usr/lib/x86_64-linux-gnu/libboost_thread.so.1.65.1+0x11bcc)\r\n\r\nDirect leak of 24 byte(s) in 1 object(s) allocated from:\r\n\r\n    #0 0x5559dd5b8762 in operator new(unsigned long) (/home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/test_bitcoin+0x2e23762)\r\n\r\n    #1 0x5559ded68cff in GetLockStack() /home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/sync.cpp:97:46\r\n\r\n    #2 0x5559ded68eb9 in EnterCritical(char const*, char const*, int, void*, bool) /home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/sync.cpp:162:5\r\n\r\n    #3 0x5559dd8ede65 in CCheckQueueControl<checkqueue_tests::FrozenCleanupCheck>::CCheckQueueControl(CCheckQueue<checkqueue_tests::FrozenCleanupCheck>*) /home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/./checkqueue.h:184:13\r\n\r\n    #4 0x5559dd8aa640 in std::__invoke_result<checkqueue_tests::test_CheckQueue_FrozenCleanup::test_method()::$_5>::type std::__invoke<checkqueue_tests::test_CheckQueue_FrozenCleanup::test_method()::$_5>(checkqueue_tests::test_CheckQueue_FrozenCleanup::test_method()::$_5&&) /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/invoke.h:95:14\r\n\r\n    #5 0x5559dd8aa640 in decltype(std::__invoke(_S_declval<0ul>())) std::thread::_Invoker<std::tuple<checkqueue_tests::test_CheckQueue_FrozenCleanup::test_method()::$_5> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/thread:234\r\n\r\n    #6 0x5559dd8aa640 in std::thread::_Invoker<std::tuple<checkqueue_tests::test_CheckQueue_FrozenCleanup::test_method()::$_5> >::operator()() /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/thread:243\r\n\r\n    #7 0x5559dd8aa640 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<checkqueue_tests::test_CheckQueue_FrozenCleanup::test_method()::$_5> > >::_M_run() /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/thread:186\r\n\r\nIndirect leak of 1440 byte(s) in 15 object(s) allocated from:\r\n\r\n    #0 0x5559dd5b8762 in operator new(unsigned long) (/home/travis/build/bitcoin/bitcoin/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/test_bitcoin+0x2e23762)\r\n\r\n    #1 0x5559ded721ff in __gnu_cxx::new_allocator<std::pair<void*, CLockLocation> >::allocate(unsigned long, void const*) /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/ext/new_allocator.h:111:27\r\n\r\n    #2 0x5559ded721ff in std::allocator_traits<std::allocator<std::pair<void*, CLockLocation> > >::allocate(std::allocator<std::pair<void*, CLockLocation> >&, unsigned long) /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/alloc_traits.h:436\r\n\r\n    #3 0x5559ded721ff in std::_Vector_base<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::_M_allocate(unsigned long) /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_vector.h:172\r\n\r\n    #4 0x5559ded70a61 in void std::vector<std::pair<void*, CLockLocation>, std::allocator<std::pair<void*, CLockLocation> > >::emplace_back<std::pair<void*, CLockLocation> >(std::pair<void*, CLockLocation>&&) /usr/bin/../lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/vector.tcc:105:4\r\n\r\nSUMMARY: AddressSanitizer: 1800 byte(s) leaked in 30 allocation(s).\r\n\r\nMakefile:17661: recipe for target 'test/checkqueue_tests.cpp.test' failed\r\n\r\nmake[3]: *** [test/checkqueue_tests.cpp.test] Error 1",
      "created_at" : "2020-05-17T13:30:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-629799100",
      "id" : 629799100,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyOTc5OTEwMA==",
      "updated_at" : "2020-05-17T13:30:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629799100",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Was this a false positive or a true one? If false, we shouldn't change our code for their bug, but add it to the suppressions.",
      "created_at" : "2020-05-18T10:27:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630092888",
      "id" : 630092888,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDA5Mjg4OA==",
      "updated_at" : "2020-05-18T10:27:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630092888",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke \r\n> Was this a false positive or a true one? If false, we shouldn't change our code for their bug, but add it to the suppressions.\r\n\r\nThe main reason why `thread_local` is not usable to track mutexes that are used in destructors is the following statement from https://en.cppreference.com/w/cpp/utility/program/exit:\r\n> The last destructor for thread-local objects is sequenced-before the first destructor for a static object",
      "created_at" : "2020-05-18T10:30:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630094469",
      "id" : 630094469,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDA5NDQ2OQ==",
      "updated_at" : "2020-05-18T10:30:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630094469",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ok, fair enough. I think I am giving up on C++. Is your work based on #18851? If yes, maybe add the comment that the map is append only (theoretically unbounded growth) and optionally a co-author.\r\n\r\nOtherwise Concept ACK. Will test if this fixes my problem when this is ready for review.",
      "created_at" : "2020-05-18T10:43:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630100240",
      "id" : 630100240,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDEwMDI0MA==",
      "updated_at" : "2020-05-18T10:43:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630100240",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Is your work based on #18851?\r\n\r\nYes. The commit message is borrowed from #18851 as I keep improving my English :D\r\n\r\n> If yes, maybe add the comment that the map is append only (theoretically unbounded growth) and optionally a co-author.\r\n\r\nThat is not the case due to the map shrinking: https://github.com/bitcoin/bitcoin/blob/daa2bcc8e55b4ccc41bec55cbd6a7d6f633e9e6f/src/sync.cpp#L163-L165",
      "created_at" : "2020-05-18T10:48:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630102209",
      "id" : 630102209,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDEwMjIwOQ==",
      "updated_at" : "2020-05-18T10:48:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630102209",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated daa2bcc8e55b4ccc41bec55cbd6a7d6f633e9e6f -> 77b41b79d2e09ff774624a73cda7213abf26c420 ([pr18881.09](https://github.com/hebasto/bitcoin/commits/pr18881.09) -> [pr18881.11](https://github.com/hebasto/bitcoin/commits/pr18881.11), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.09..pr18881.11)):\r\n\r\n- addressed @MarcoFalke's [comment](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630100240):\r\n> If yes, maybe add ... a co-author.",
      "created_at" : "2020-05-18T10:53:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630104477",
      "id" : 630104477,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDEwNDQ3Nw==",
      "updated_at" : "2020-05-18T15:28:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630104477",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426645402"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426645402"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Locking a non-recursive mutex that is already locked is undefined behavior",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-18T13:57:09Z",
      "diff_hunk" : "@@ -179,15 +193,23 @@ void LeaveCritical()\n \n std::string LocksHeld()\n {\n+    LockData& lockdata = GetLockData();\n+    std::lock_guard<std::mutex> lock(lockdata.dd_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426645402",
      "id" : 426645402,
      "line" : 200,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY0NTQwMg==",
      "original_commit_id" : "77b41b79d2e09ff774624a73cda7213abf26c420",
      "original_line" : 198,
      "original_position" : 143,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : 152,
      "pull_request_review_id" : 413619527,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426645402",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426710235"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426710235"
         }
      },
      "author_association" : "MEMBER",
      "body" : "[Fixed](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630262961).",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-18T15:27:48Z",
      "diff_hunk" : "@@ -179,15 +193,23 @@ void LeaveCritical()\n \n std::string LocksHeld()\n {\n+    LockData& lockdata = GetLockData();\n+    std::lock_guard<std::mutex> lock(lockdata.dd_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426710235",
      "id" : 426710235,
      "in_reply_to_id" : 426645402,
      "line" : 200,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxMDIzNQ==",
      "original_commit_id" : "77b41b79d2e09ff774624a73cda7213abf26c420",
      "original_line" : 198,
      "original_position" : 143,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : 152,
      "pull_request_review_id" : 413703561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426710235",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 77b41b79d2e09ff774624a73cda7213abf26c420 -> 068264fcbb8af47f0df676cd088154d7956819d2 ([pr18881.11](https://github.com/hebasto/bitcoin/commits/pr18881.11) -> [pr18881.13](https://github.com/hebasto/bitcoin/commits/pr18881.13), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.11..pr18881.13)):\r\n\r\n- addressed @MarcoFalke's [comment](https://github.com/bitcoin/bitcoin/pull/18881#discussion_r426645402):\r\n> Locking a non-recursive mutex that is already locked is undefined behavior",
      "created_at" : "2020-05-18T15:35:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630262961",
      "id" : 630262961,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDI2Mjk2MQ==",
      "updated_at" : "2020-05-18T15:35:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630262961",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 068264fcbb8af47f0df676cd088154d7956819d2 -> 26c093a9957756f3743c2347fe0abd90f81159c4 ([pr18881.13](https://github.com/hebasto/bitcoin/commits/pr18881.13) -> [pr18881.14](https://github.com/hebasto/bitcoin/commits/pr18881.14), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.13..pr18881.14)):\r\n\r\n- dropped technically incorrect mention of \"trivial destructors\"\r\n- replaced the raw pointer to the instance of `LockData` with a reference as we are not going to apply `delete` operator to that pointer",
      "created_at" : "2020-05-18T22:41:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630472810",
      "id" : 630472810,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDQ3MjgxMA==",
      "updated_at" : "2020-05-18T22:41:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630472810",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "What do you mean with \"technically incorrect\"? https://en.cppreference.com/w/cpp/language/destructor#Trivial_destructor",
      "created_at" : "2020-05-18T22:48:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630474924",
      "id" : 630474924,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDQ3NDkyNA==",
      "updated_at" : "2020-05-18T22:48:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630474924",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> What do you mean with \"technically incorrect\"? https://en.cppreference.com/w/cpp/language/destructor#Trivial_destructor\r\n\r\n1) ibid:\r\n> A trivial destructor is a destructor that performs no action. Objects with trivial destructors **don't require a delete-expression** and may be disposed of by simply deallocating their storage.\r\n\r\n2) having a trivial destructor is important for the destroying order. As we are not going to destroy `LockData` instance, this requirement is not relevant\r\n\r\n2) with the latest push the `static` function-local `lock_data` variable is a reference and is not an object\r\n\r\nMore details: https://google.github.io/styleguide/cppguide.html#Static_and_Global_Variables",
      "created_at" : "2020-05-18T23:11:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630481876",
      "id" : 630481876,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDQ4MTg3Ng==",
      "updated_at" : "2020-05-18T23:11:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630481876",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> As we are not going to destroy LockData instance, this requirement is not relevant\r\n\r\nWhy not? Assuming ~LockData had side effects, then not calling the destructor is going to miss those side effects.",
      "created_at" : "2020-05-19T01:00:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630513212",
      "id" : 630513212,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDUxMzIxMg==",
      "updated_at" : "2020-05-19T01:02:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630513212",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18635 (Replace -Wthread-safety-analysis with broader -Wthread-safety by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-05-19T01:27:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630520924",
      "id" : 630520924,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDUyMDkyNA==",
      "updated_at" : "2020-05-19T01:27:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630520924",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "And if this was somehow \"incorrect\" then `LogInstance` should also be adjusted to be consistent",
      "created_at" : "2020-05-19T12:25:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-630784173",
      "id" : 630784173,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDc4NDE3Mw==",
      "updated_at" : "2020-05-19T12:25:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630784173",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'll try to elaborate my opinion :)\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/068264fcbb8af47f0df676cd088154d7956819d2/src/sync.cpp#L98\r\n\r\n@MarcoFalke \r\n\r\n> What do you mean with \"technically incorrect\"? https://en.cppreference.com/w/cpp/language/destructor#Trivial_destructor\r\n\r\n1. I mean that among `LockData` type and its subtypes only `using LockPair = std::pair<void*, void*>;` and `std::mutex` have trivial desctructors. This could be easily verified with the [`std::is_trivially_destructible`](https://en.cppreference.com/w/cpp/types/is_destructible) type trait.\r\n\r\nAn implicitly-defined destructor, i.e., generated by the compiler, is not the same as a trivial one.\r\n\r\n2. Agree that if we are going do not destruct a heap-allocated object until the program termination, it is pointless to provide a user-defined destructor with any side effects. If this statement is required to be added to the code as a comment, that comment should refer to \"not having an explicit desctructor\" or \"having a implicit desctructor\", but not to \"a trivial desctructor\".\r\n\r\n> And if this was somehow \"incorrect\" then `LogInstance` should also be adjusted to be consistent\r\n\r\nThe only difference is that the function-local static `g_logger` is a raw pointer that, in theory, should be `delete`d.\r\n\r\nIn this PR the function-local static `lock_data` is a reference, and this approach explicitly shows our intention do not `delete` the heap-allocated object at all.\r\n\r\nIf the above arguments are convincing for our community, I agree that making `g_logger` a reference is good for consistency.",
      "created_at" : "2020-05-20T05:35:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-631247627",
      "id" : 631247627,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMTI0NzYyNw==",
      "updated_at" : "2020-05-20T05:35:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/631247627",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> If this statement is required to be added to the code as a comment, that comment should refer to \"not having an explicit desctructor\" or \"having a implicit desctructor\", but not to \"a trivial desctructor\".\r\n\r\nThe statement has been added to the logger, so I don't see why it shouldn't be added here.\r\n\r\n> reference, and this approach explicitly shows our intention do not delete the heap-allocated object at all.\r\n\r\nI wasn't aware that this style is used to indicate that `delete` will not be applied, but fine with me. Functionally `*` and `&` are identical.\r\n\r\n```cpp\r\n#include <iostream>\r\n\r\nstruct A {\r\n  A() { std::cout << __func__ << std::endl; }\r\n  ~A() { std::cout << __func__ << std::endl; }\r\n};\r\n\r\nint main() {\r\n  std::cout << \"start \" << __func__ << std::endl;\r\n  static A a;\r\n  static A *b = new A();\r\n  static A &c = *new A();\r\n  std::cout << \"end   \" << __func__ << std::endl;\r\n}\r\n```\r\n\r\n```\r\nstart main\r\nA\r\nA\r\nA\r\nend   main\r\n~A\r\n```",
      "created_at" : "2020-05-22T11:38:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632647820",
      "id" : 632647820,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjY0NzgyMA==",
      "updated_at" : "2020-05-22T11:38:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632647820",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re-ACK 26c093a9957756f3743c2347fe0abd90f81159c4 only change since last review is removing undefined behaviour ð\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nre-ACK 26c093a9957756f3743c2347fe0abd90f81159c4 only change since last review is removing undefined behaviour ð\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUifmwwAs+llsO+ADQ05xZMwCoY0YQ5Zi4w65QVdoRIq9rrajfvDOSyJT09/p2d/\r\nSiJN1SbB1PWFpxW0xPpT9CfAs1AhSnMGtEtm7xsllv5m/X+lsDPHqgsbN0DcfUeE\r\nQ3CnDFklxI7JUOJkcHusmRB9ETxWRJPQ0Hx79OGImUbubdB32rLdsSqfw4oraFzn\r\nbUY1TV76e+IB37zbYiCwiTr1EUOBu1DUV7FBr6AycYRrKMWXO2lPAGqlrOD+Orwo\r\nfyWA2RAcVUbItktWDfy2D9zB8m2DT/HUYr/3DY7P7J6SotirPYQAbaHQO51K4NAo\r\nPAAss/uwkX1zpXhP3hxgLBtKvixOTvZANHf6ch1dSvRrz3XyY0xCT0Z4XuL7dCJk\r\naGE6AcLzer5h46dfM2Bu3exFSRSaSvqLYks0Jv+b50m9U25+2W7XvJ4IhPovPlpY\r\n/DiOQwMX1DteOd4h9PHSFl6BTLr8eDzPnNDpTue4EzQxXV7BtG++d3nyI1Uhp8OX\r\nVVDT2gg9\r\n=UHOn\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `27744a6864db90d25a36be70b128da2a91330c24db6afd49a7dd4c0d2c53111c  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e89294010827744a6864db90d25a36be70b128da2a91330c24db6afd49a7dd4c0d2c53111cf0106bf06a4f48529d2b91a6f6b46e79b3fa08fff01092305126d62c65a89fea5b2ec96bb01408f1045ec7bc84f008f71cef5588a8c0570083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010a6dd8c49f03105a00109ce0f7bf9edff08f1045ec7bc84f0083eaa6bc205667a000083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff010c8a3137edc174f41ad5e21d1e95fdb1a08f1045ec7bc84f008fa87d17d8b0163a70083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6df010e2c4ecd0af52631bbc046d028834ca1008f1045ec7bc84f0086b7803ae35bc50310083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
      "created_at" : "2020-05-22T11:50:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632652222",
      "id" : 632652222,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjY1MjIyMg==",
      "updated_at" : "2020-05-22T11:50:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632652222",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke \r\n> > If this statement is required to be added to the code as a comment, that comment should refer to \"not having an explicit desctructor\" or \"having a implicit desctructor\", but not to \"a trivial desctructor\".\r\n> \r\n> The statement has been added to the logger, so I don't see why it shouldn't be added here.\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/b5c423c48e094bd098e11c3d1f57acae7502a4da/src/logging.cpp#L25-L26\r\n\r\nThat is not the case in so far as the `Logger` class has no trivial destructor. One could check this with a patch:\r\n```diff\r\n--- a/src/logging.cpp\r\n+++ b/src/logging.cpp\r\n@@ -8,6 +8,8 @@\r\n #include <util/time.h>\r\n \r\n #include <mutex>\r\n+#include <type_traits>\r\n+static_assert(std::is_trivially_destructible<BCLog::Logger>::value, \"Logger has no trivial ctor.\");\r\n \r\n const char * const DEFAULT_DEBUGLOGFILE = \"debug.log\";\r\n\r\n```\r\n\r\nand compile with an error:\r\n```\r\nlogging.cpp:12:1: error: static assertion failed: Logger has no trivial ctor.\r\n```",
      "created_at" : "2020-05-22T12:03:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632657505",
      "id" : 632657505,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjY1NzUwNQ==",
      "updated_at" : "2020-05-22T12:03:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632657505",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r429209164"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429209164"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    // The operating system automatically reclaims all the memory in a program's heap when that program exits.\r\n    // Since the destructor is never called, the object and all its members must have an implicit destructor.\r\n```",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-22T12:09:16Z",
      "diff_hunk" : "@@ -78,21 +78,16 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n+\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r429209164",
      "id" : 429209164,
      "line" : 97,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwOTE2NA==",
      "original_commit_id" : "458992b06d80eb568141f60a33d38e12e894e27a",
      "original_line" : 88,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : 55,
      "pull_request_review_id" : 416861130,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:47:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429209164",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated 26c093a9957756f3743c2347fe0abd90f81159c4 -> 90eb027204f5a9d7c00fa97d4112243bd37a9012 ([pr18881.14](https://github.com/hebasto/bitcoin/commits/pr18881.14) -> [pr18881.15](https://github.com/hebasto/bitcoin/commits/pr18881.15), [diff](https://github.com/hebasto/bitcoin/compare/pr18881.14..pr18881.15)):\r\n\r\n- added commit that implements @MarcoFalke's [suggestion](https://github.com/bitcoin/bitcoin/pull/18881#discussion_r429209164)",
      "created_at" : "2020-05-22T12:49:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632674167",
      "id" : 632674167,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjY3NDE2Nw==",
      "updated_at" : "2020-05-22T12:49:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632674167",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r429226654"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429226654"
         }
      },
      "author_association" : "MEMBER",
      "body" : "[Updated](https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632674167).",
      "commit_id" : "90eb027204f5a9d7c00fa97d4112243bd37a9012",
      "created_at" : "2020-05-22T12:49:46Z",
      "diff_hunk" : "@@ -78,21 +78,16 @@ typedef std::map<std::pair<void*, void*>, LockStack> LockOrders;\n typedef std::set<std::pair<void*, void*> > InvLockOrders;\n \n struct LockData {\n-    // Very ugly hack: as the global constructs and destructors run single\n-    // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global RecursiveMutex destructors\n-    // after LockData disappears.\n-    bool available;\n-    LockData() : available(true) {}\n-    ~LockData() { available = false; }\n-\n     LockOrders lockorders;\n     InvLockOrders invlockorders;\n     std::mutex dd_mutex;\n };\n+\n LockData& GetLockData() {\n-    static LockData lockdata;\n-    return lockdata;\n+    // This approach guarantees that the object is not destroyed until after its last use.\n+    // The operating system automatically reclaims all the memory in a program's heap when that program exits.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#discussion_r429226654",
      "id" : 429226654,
      "in_reply_to_id" : 429209164,
      "line" : 97,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNjY1NA==",
      "original_commit_id" : "458992b06d80eb568141f60a33d38e12e894e27a",
      "original_line" : 88,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : 55,
      "pull_request_review_id" : 416884074,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18881",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-22T12:49:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429226654",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re-ACK 90eb027204, only change is new doc commit ð \r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nre-ACK 90eb027204, only change is new doc commit ð \r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjBJQv8D4l/8DutA799ti+iOrxhVDJh48fWd71nn2WKqcyVFJ9Y6G18v2ASlNOz\r\nSrVnXhIUv/8jWgT5kOlqNw+UBMSLxNvv5NvYkchjQNYvHe5UfMrS8kWSqC6BYubc\r\nUuPt+g6wV/Y+I9umkuH46Pk26iwqmVTJh86WbA1syjclNTCm1PEfs6tEbxB5bn7+\r\nfBJQBQaV4J886hy1tRGK1FDNGQ93pNg88fgHdyoVMFsA4kP6utK/E93WshfV238i\r\nQ9d3jiZSVzX5rZSId3Z3cYJMhGcXqC76ZT8tl+v3IX7ErS4Rf+AFyp813L/eWpDD\r\nmHkImUprvIUtNkkZkjBPfAFeKWWG0gsLcfGU4/e+TAZ7R4vIm4v6fVmcunY5WEbE\r\n64Qm5nq7LYOeOXi8XvvHug2l3zS67ZoTeEtGJhEiF0+rcqTgsv/bACr8FksBheu9\r\nSZxUADkbahNnUv+22sEd+Nj2k50dGJOev/H50od1/gvt0E8vydUSz/P+g9NfXJyo\r\nuiKec1Pw\r\n=oyNZ\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `5124182a0b09070ce2424a477f0c8ebc1bc2c756ae24de2a66e6948ffd673c33  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401085124182a0b09070ce2424a477f0c8ebc1bc2c756ae24de2a66e6948ffd673c33f010128b9b2bdc3a8a40c84576c57d67388e08fff010282180fe8f6e06553525e58bd88ad8a008f1045ec7d687f0082af03a27ce7b39a20083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff01033af3ab7e31cbf5fb483b9c835d3ba3308f1045ec7d688f008000bb81609f938930083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff01080d4aac37d76b44e26ac01a01ed30e9908f1045ec7d688f008723fd72c93b081940083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f0109a7531030d12ae4ec8f1cafba994d37908f1045ec7d688f008b43a2a803bc88f460083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6d)\r\n\r\n</details>\r\n",
      "created_at" : "2020-05-22T13:41:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632696415",
      "id" : 632696415,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjY5NjQxNQ==",
      "updated_at" : "2020-05-22T13:41:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632696415",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Would be nice to get this merged soon, so that I don't have to pull in this branch every time for fuzzing.",
      "created_at" : "2020-05-22T13:42:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632696808",
      "id" : 632696808,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjY5NjgwOA==",
      "updated_at" : "2020-05-22T13:42:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632696808",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Several cases of UB are fixed here.\r\n\r\n* The first commit fixes the one described in #18824 \r\n* The  26c093a commit fixes one described in https://github.com/bitcoin/bitcoin/pull/18881#pullrequestreview-410137892",
      "created_at" : "2020-05-22T16:51:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632799978",
      "id" : 632799978,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjc5OTk3OA==",
      "updated_at" : "2020-05-22T16:51:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632799978",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Several cases of UB are fixed here.\r\n> \r\n> * The first commit fixes the one described in #18824\r\n> * The  [26c093a](https://github.com/bitcoin/bitcoin/commit/26c093a9957756f3743c2347fe0abd90f81159c4) commit fixes one described in [#18881 (review)](https://github.com/bitcoin/bitcoin/pull/18881#pullrequestreview-410137892)\r\n\r\nThanks, I definitely think the PR description needs to be improved here and summarize what it is changing and give a clue about how the thread_local change fixes the second problem. If we don't know why the thread local change fixes it, the PR description should say that and not try to be mysterious",
      "created_at" : "2020-05-22T17:05:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632808735",
      "id" : 632808735,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjgwODczNQ==",
      "updated_at" : "2020-05-22T17:05:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632808735",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ryanofsky \r\n> Would suggest updating the PR description to:\r\n> \r\n>  - Summarize what the UB behavior is so it isn't necessary to read a different github issue\r\n> \r\n>  - Give a rationale for replacing the thread_local in the last commit\r\n> \r\n>  - Drop the construct idiom text if it's no longer relevant\r\n> \r\n>  - Link to #18824 and #15233 at the bottom, and clarify if only the first commit is needed to fix bug #18824, or if the thread_local commit is needed too\r\n\r\nThank you for review. The PR description has been updated.\r\nSometimes it seems the C++ is much easier to express ideas than English :)\r\n",
      "created_at" : "2020-05-22T17:05:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632808830",
      "id" : 632808830,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjgwODgzMA==",
      "updated_at" : "2020-05-22T17:05:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632808830",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "re-ACK. Thanks for updating the PR description, this looks good to me. I'm pretty sure there should be a more efficient way to stop referencing the thread_local after it is destroyed (perhaps just resetting the reference in the thread_local destructor) without replacing the thread_local with a map with frequently added & removed entries. But this only affects debugging and probably isn't a big deal.",
      "created_at" : "2020-05-22T17:16:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632813648",
      "id" : 632813648,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjgxMzY0OA==",
      "updated_at" : "2020-05-22T17:16:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632813648",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I am planning to merge this next week unless there are objections or outstanding action items",
      "created_at" : "2020-05-22T18:04:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632833398",
      "id" : 632833398,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjgzMzM5OA==",
      "updated_at" : "2020-05-22T18:04:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632833398",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I am planning to merge this next week unless there are objections or outstanding action items\r\n\r\n:+1: and seems fine to merge earlier, too. None of this code is even compiled unless debugging is turned on.",
      "created_at" : "2020-05-22T18:40:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18881#issuecomment-632847462",
      "id" : 632847462,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18881",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjg0NzQ2Mg==",
      "updated_at" : "2020-05-22T18:40:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632847462",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
