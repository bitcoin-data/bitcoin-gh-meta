[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r419431163"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419431163"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n                if (e.what() != std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) raise e;\r\n```\r\n\r\nCould `expected_code_path` be removed with this fixup? If yes, that seems preferable, as it is less code.",
      "commit_id" : "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "created_at" : "2020-05-04T13:22:40Z",
      "diff_hunk" : "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <optional.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r419431163",
      "id" : 419431163,
      "line" : 65,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzMTE2Mw==",
      "original_commit_id" : "b5f971a16ecbfcb0487b274f09516f17dfa19ab6",
      "original_line" : 65,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/test/fuzz/coins_view.cpp",
      "position" : 65,
      "pull_request_review_id" : 404980944,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-25T10:05:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419431163",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r419432165"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419432165"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n            Coin move_to;\r\n```",
      "commit_id" : "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "created_at" : "2020-05-04T13:24:15Z",
      "diff_hunk" : "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <optional.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 1: {\n+            (void)coins_view_cache.Flush();\n+            break;\n+        }\n+        case 2: {\n+            coins_view_cache.SetBestBlock(ConsumeUInt256(fuzzed_data_provider));\n+            break;\n+        }\n+        case 3: {\n+            Coin coin;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r419432165",
      "id" : 419432165,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQzMjE2NQ==",
      "original_commit_id" : "b5f971a16ecbfcb0487b274f09516f17dfa19ab6",
      "original_line" : 80,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/test/fuzz/coins_view.cpp",
      "position" : null,
      "pull_request_review_id" : 404982232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-25T10:05:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419432165",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r419440744"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419440744"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The current formulation is intentional. The problem with doing it the way you suggest is that the `throw;` line (I assume `raise e;` was a typo :)) will not be covered. That would be bad for `src/test/fuzz/` where I want literally 100% line coverage to be able to see fuzzing harness gaps where our inputs are not able to reach :)",
      "commit_id" : "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "created_at" : "2020-05-04T13:36:09Z",
      "diff_hunk" : "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <optional.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r419440744",
      "id" : 419440744,
      "in_reply_to_id" : 419431163,
      "line" : 65,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ0MDc0NA==",
      "original_commit_id" : "b5f971a16ecbfcb0487b274f09516f17dfa19ab6",
      "original_line" : 65,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/test/fuzz/coins_view.cpp",
      "position" : 65,
      "pull_request_review_id" : 404992786,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-25T10:05:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/419440744",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "nice, Concept ACK",
      "created_at" : "2020-05-04T15:42:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-623541065",
      "id" : 623541065,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18867",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyMzU0MTA2NQ==",
      "updated_at" : "2020-05-04T15:42:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/623541065",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/45598?v=4",
         "events_url" : "https://api.github.com/users/jb55/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jb55/followers",
         "following_url" : "https://api.github.com/users/jb55/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jb55/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jb55",
         "id" : 45598,
         "login" : "jb55",
         "node_id" : "MDQ6VXNlcjQ1NTk4",
         "organizations_url" : "https://api.github.com/users/jb55/orgs",
         "received_events_url" : "https://api.github.com/users/jb55/received_events",
         "repos_url" : "https://api.github.com/users/jb55/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jb55/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jb55/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jb55"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK https://github.com/bitcoin/bitcoin/pull/18867/commits/b5f971a16ecbfcb0487b274f09516f17dfa19ab6",
      "created_at" : "2020-05-13T19:39:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-628204316",
      "id" : 628204316,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18867",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyODIwNDMxNg==",
      "updated_at" : "2020-05-13T19:39:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/628204316",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke Would you mind reviewing? :)",
      "created_at" : "2020-05-18T20:12:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-630410609",
      "id" : 630410609,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18867",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDQxMDYwOQ==",
      "updated_at" : "2020-05-18T20:12:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630410609",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased! :)",
      "created_at" : "2020-05-22T14:50:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-632732323",
      "id" : 632732323,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18867",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMjczMjMyMw==",
      "updated_at" : "2020-05-22T14:50:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/632732323",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429644533"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429644533"
         }
      },
      "author_association" : "MEMBER",
      "body" : "any reason to use static cast here? this seems to silence any sanitizers that check for overflow if the cast value was not 0 or 1",
      "commit_id" : "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "created_at" : "2020-05-24T14:50:16Z",
      "diff_hunk" : "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429644533",
      "id" : 429644533,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NDUzMw==",
      "original_commit_id" : "ab7af9323e55bd035d2680a84e986675c7757ee3",
      "original_line" : 33,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/test/fuzz/coins_view.cpp",
      "position" : null,
      "pull_request_review_id" : 404982232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-25T10:05:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429644533",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429645870"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429645870"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n                coins_view_cache.AddCoin(random_out_point, std::move(coin), possible_overwrite);\r\n```",
      "commit_id" : "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "created_at" : "2020-05-24T15:05:08Z",
      "diff_hunk" : "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), fuzzed_data_provider.ConsumeBool());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429645870",
      "id" : 429645870,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NTg3MA==",
      "original_commit_id" : "ab7af9323e55bd035d2680a84e986675c7757ee3",
      "original_line" : 61,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/test/fuzz/coins_view.cpp",
      "position" : null,
      "pull_request_review_id" : 404982232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-25T10:05:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429645870",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429645933"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429645933"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n                    assert(possible_overwrite);\r\n```\r\n\r\nCould make this check a bit stricter?",
      "commit_id" : "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "created_at" : "2020-05-24T15:05:44Z",
      "diff_hunk" : "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    expected_code_path = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429645933",
      "id" : 429645933,
      "line" : 67,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NTkzMw==",
      "original_commit_id" : "ab7af9323e55bd035d2680a84e986675c7757ee3",
      "original_line" : 67,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/test/fuzz/coins_view.cpp",
      "position" : 67,
      "pull_request_review_id" : 404982232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-25T10:05:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429645933",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429646754"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429646754"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What is this doing? How is this different from the fuzz engine running case 6 -> case 9?",
      "commit_id" : "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "created_at" : "2020-05-24T15:15:02Z",
      "diff_hunk" : "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 1: {\n+            (void)coins_view_cache.Flush();\n+            break;\n+        }\n+        case 2: {\n+            coins_view_cache.SetBestBlock(ConsumeUInt256(fuzzed_data_provider));\n+            break;\n+        }\n+        case 3: {\n+            Coin coin;\n+            (void)coins_view_cache.SpendCoin(random_out_point, fuzzed_data_provider.ConsumeBool() ? &coin : nullptr);\n+            break;\n+        }\n+        case 4: {\n+            coins_view_cache.Uncache(random_out_point);\n+            break;\n+        }\n+        case 5: {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                backend_coins_view = CCoinsView{};\n+            }\n+            coins_view_cache.SetBackend(backend_coins_view);\n+            break;\n+        }\n+        case 6: {\n+            const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!opt_out_point) {\n+                break;\n+            }\n+            random_out_point = *opt_out_point;\n+            break;\n+        }\n+        case 7: {\n+            const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+            if (!opt_coin) {\n+                break;\n+            }\n+            random_coin = *opt_coin;\n+            break;\n+        }\n+        case 8: {\n+            const std::optional<CMutableTransaction> opt_mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!opt_mutable_transaction) {\n+                break;\n+            }\n+            random_mutable_transaction = *opt_mutable_transaction;\n+            break;\n+        }\n+        case 9: {\n+            CCoinsMap coins_map;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                CCoinsCacheEntry coins_cache_entry;\n+                coins_cache_entry.flags = fuzzed_data_provider.ConsumeIntegral<unsigned char>();\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    coins_cache_entry.coin = random_coin;\n+                } else {\n+                    const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                    if (!opt_coin) {\n+                        break;\n+                    }\n+                    coins_cache_entry.coin = *opt_coin;\n+                }\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                    if (!opt_out_point) {\n+                        break;\n+                    }\n+                    random_out_point = *opt_out_point;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429646754",
      "id" : 429646754,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0Njc1NA==",
      "original_commit_id" : "ab7af9323e55bd035d2680a84e986675c7757ee3",
      "original_line" : 138,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "src/test/fuzz/coins_view.cpp",
      "position" : null,
      "pull_request_review_id" : 404982232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-25T10:05:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429646754",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429647249"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429647249"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note to myself only: I thought about putting a more strict assert here, but the exception doesn't give any hints which coin failed, so I don't think this is possible for now.",
      "commit_id" : "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "created_at" : "2020-05-24T15:20:14Z",
      "diff_hunk" : "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 1: {\n+            (void)coins_view_cache.Flush();\n+            break;\n+        }\n+        case 2: {\n+            coins_view_cache.SetBestBlock(ConsumeUInt256(fuzzed_data_provider));\n+            break;\n+        }\n+        case 3: {\n+            Coin coin;\n+            (void)coins_view_cache.SpendCoin(random_out_point, fuzzed_data_provider.ConsumeBool() ? &coin : nullptr);\n+            break;\n+        }\n+        case 4: {\n+            coins_view_cache.Uncache(random_out_point);\n+            break;\n+        }\n+        case 5: {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                backend_coins_view = CCoinsView{};\n+            }\n+            coins_view_cache.SetBackend(backend_coins_view);\n+            break;\n+        }\n+        case 6: {\n+            const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!opt_out_point) {\n+                break;\n+            }\n+            random_out_point = *opt_out_point;\n+            break;\n+        }\n+        case 7: {\n+            const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+            if (!opt_coin) {\n+                break;\n+            }\n+            random_coin = *opt_coin;\n+            break;\n+        }\n+        case 8: {\n+            const std::optional<CMutableTransaction> opt_mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!opt_mutable_transaction) {\n+                break;\n+            }\n+            random_mutable_transaction = *opt_mutable_transaction;\n+            break;\n+        }\n+        case 9: {\n+            CCoinsMap coins_map;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                CCoinsCacheEntry coins_cache_entry;\n+                coins_cache_entry.flags = fuzzed_data_provider.ConsumeIntegral<unsigned char>();\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    coins_cache_entry.coin = random_coin;\n+                } else {\n+                    const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                    if (!opt_coin) {\n+                        break;\n+                    }\n+                    coins_cache_entry.coin = *opt_coin;\n+                }\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                    if (!opt_out_point) {\n+                        break;\n+                    }\n+                    random_out_point = *opt_out_point;\n+                }\n+                coins_map.emplace(random_out_point, std::move(coins_cache_entry));\n+            }\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.BatchWrite(coins_map, fuzzed_data_provider.ConsumeBool() ? ConsumeUInt256(fuzzed_data_provider) : coins_view_cache.GetBestBlock());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"FRESH flag misapplied to coin that exists in parent cache\"}) {\n+                    expected_code_path = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429647249",
      "id" : 429647249,
      "line" : 143,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NzI0OQ==",
      "original_commit_id" : "ab7af9323e55bd035d2680a84e986675c7757ee3",
      "original_line" : 143,
      "original_position" : 148,
      "original_start_line" : null,
      "path" : "src/test/fuzz/coins_view.cpp",
      "position" : 143,
      "pull_request_review_id" : 404982232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-25T10:05:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429647249",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429647975"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429647975"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`                    assert(possible_overwrite);`",
      "commit_id" : "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "created_at" : "2020-05-24T15:28:26Z",
      "diff_hunk" : "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 1: {\n+            (void)coins_view_cache.Flush();\n+            break;\n+        }\n+        case 2: {\n+            coins_view_cache.SetBestBlock(ConsumeUInt256(fuzzed_data_provider));\n+            break;\n+        }\n+        case 3: {\n+            Coin coin;\n+            (void)coins_view_cache.SpendCoin(random_out_point, fuzzed_data_provider.ConsumeBool() ? &coin : nullptr);\n+            break;\n+        }\n+        case 4: {\n+            coins_view_cache.Uncache(random_out_point);\n+            break;\n+        }\n+        case 5: {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                backend_coins_view = CCoinsView{};\n+            }\n+            coins_view_cache.SetBackend(backend_coins_view);\n+            break;\n+        }\n+        case 6: {\n+            const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!opt_out_point) {\n+                break;\n+            }\n+            random_out_point = *opt_out_point;\n+            break;\n+        }\n+        case 7: {\n+            const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+            if (!opt_coin) {\n+                break;\n+            }\n+            random_coin = *opt_coin;\n+            break;\n+        }\n+        case 8: {\n+            const std::optional<CMutableTransaction> opt_mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!opt_mutable_transaction) {\n+                break;\n+            }\n+            random_mutable_transaction = *opt_mutable_transaction;\n+            break;\n+        }\n+        case 9: {\n+            CCoinsMap coins_map;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                CCoinsCacheEntry coins_cache_entry;\n+                coins_cache_entry.flags = fuzzed_data_provider.ConsumeIntegral<unsigned char>();\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    coins_cache_entry.coin = random_coin;\n+                } else {\n+                    const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                    if (!opt_coin) {\n+                        break;\n+                    }\n+                    coins_cache_entry.coin = *opt_coin;\n+                }\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                    if (!opt_out_point) {\n+                        break;\n+                    }\n+                    random_out_point = *opt_out_point;\n+                }\n+                coins_map.emplace(random_out_point, std::move(coins_cache_entry));\n+            }\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.BatchWrite(coins_map, fuzzed_data_provider.ConsumeBool() ? ConsumeUInt256(fuzzed_data_provider) : coins_view_cache.GetBestBlock());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"FRESH flag misapplied to coin that exists in parent cache\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        }\n+    }\n+\n+    {\n+        const Coin& coin_using_access_coin = coins_view_cache.AccessCoin(random_out_point);\n+        const bool exists_using_access_coin = !(coin_using_access_coin == EMPTY_COIN);\n+        const bool exists_using_have_coin = coins_view_cache.HaveCoin(random_out_point);\n+        const bool exists_using_have_coin_in_cache = coins_view_cache.HaveCoinInCache(random_out_point);\n+        Coin coin_using_get_coin;\n+        const bool exists_using_get_coin = coins_view_cache.GetCoin(random_out_point, coin_using_get_coin);\n+        if (exists_using_get_coin) {\n+            assert(coin_using_get_coin == coin_using_access_coin);\n+        }\n+        assert((exists_using_access_coin && exists_using_have_coin_in_cache && exists_using_have_coin && exists_using_get_coin) ||\n+               (!exists_using_access_coin && !exists_using_have_coin_in_cache && !exists_using_have_coin && !exists_using_get_coin));\n+        const bool exists_using_have_coin_in_backend = backend_coins_view.HaveCoin(random_out_point);\n+        if (exists_using_have_coin_in_backend) {\n+            assert(exists_using_have_coin);\n+        }\n+        Coin coin_using_backend_get_coin;\n+        if (backend_coins_view.GetCoin(random_out_point, coin_using_backend_get_coin)) {\n+            assert(exists_using_have_coin_in_backend);\n+            assert(coin_using_get_coin == coin_using_backend_get_coin);\n+        } else {\n+            assert(!exists_using_have_coin_in_backend);\n+        }\n+    }\n+\n+    {\n+        bool expected_code_path = false;\n+        try {\n+            (void)coins_view_cache.Cursor();\n+        } catch (const std::logic_error&) {\n+            expected_code_path = true;\n+        }\n+        assert(expected_code_path);\n+        (void)coins_view_cache.DynamicMemoryUsage();\n+        (void)coins_view_cache.EstimateSize();\n+        (void)coins_view_cache.GetBestBlock();\n+        (void)coins_view_cache.GetCacheSize();\n+        (void)coins_view_cache.GetHeadBlocks();\n+        (void)coins_view_cache.HaveInputs(CTransaction{random_mutable_transaction});\n+    }\n+\n+    {\n+        const CCoinsViewCursor* coins_view_cursor = backend_coins_view.Cursor();\n+        assert(coins_view_cursor == nullptr);\n+        (void)backend_coins_view.EstimateSize();\n+        (void)backend_coins_view.GetBestBlock();\n+        (void)backend_coins_view.GetHeadBlocks();\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 6)) {\n+        case 0: {\n+            const CTransaction transaction{random_mutable_transaction};\n+            bool is_spent = false;\n+            for (const CTxOut& tx_out : transaction.vout) {\n+                if (Coin{tx_out, 0, transaction.IsCoinBase()}.IsSpent()) {\n+                    is_spent = true;\n+                }\n+            }\n+            if (is_spent) {\n+                // Avoid:\n+                // coins.cpp:69: void CCoinsViewCache::AddCoin(const COutPoint &, Coin &&, bool): Assertion `!coin.IsSpent()' failed.\n+                break;\n+            }\n+            bool expected_code_path = false;\n+            try {\n+                AddCoins(coins_view_cache, transaction, fuzzed_data_provider.ConsumeIntegral<int>(), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    expected_code_path = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429647975",
      "id" : 429647975,
      "line" : 225,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0Nzk3NQ==",
      "original_commit_id" : "ab7af9323e55bd035d2680a84e986675c7757ee3",
      "original_line" : 225,
      "original_position" : 227,
      "original_start_line" : null,
      "path" : "src/test/fuzz/coins_view.cpp",
      "position" : 225,
      "pull_request_review_id" : 404982232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-25T10:05:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429647975",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429648160"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429648160"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n            CAmount tx_fee_out;\r\n```",
      "commit_id" : "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "created_at" : "2020-05-24T15:30:45Z",
      "diff_hunk" : "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 1: {\n+            (void)coins_view_cache.Flush();\n+            break;\n+        }\n+        case 2: {\n+            coins_view_cache.SetBestBlock(ConsumeUInt256(fuzzed_data_provider));\n+            break;\n+        }\n+        case 3: {\n+            Coin coin;\n+            (void)coins_view_cache.SpendCoin(random_out_point, fuzzed_data_provider.ConsumeBool() ? &coin : nullptr);\n+            break;\n+        }\n+        case 4: {\n+            coins_view_cache.Uncache(random_out_point);\n+            break;\n+        }\n+        case 5: {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                backend_coins_view = CCoinsView{};\n+            }\n+            coins_view_cache.SetBackend(backend_coins_view);\n+            break;\n+        }\n+        case 6: {\n+            const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!opt_out_point) {\n+                break;\n+            }\n+            random_out_point = *opt_out_point;\n+            break;\n+        }\n+        case 7: {\n+            const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+            if (!opt_coin) {\n+                break;\n+            }\n+            random_coin = *opt_coin;\n+            break;\n+        }\n+        case 8: {\n+            const std::optional<CMutableTransaction> opt_mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!opt_mutable_transaction) {\n+                break;\n+            }\n+            random_mutable_transaction = *opt_mutable_transaction;\n+            break;\n+        }\n+        case 9: {\n+            CCoinsMap coins_map;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                CCoinsCacheEntry coins_cache_entry;\n+                coins_cache_entry.flags = fuzzed_data_provider.ConsumeIntegral<unsigned char>();\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    coins_cache_entry.coin = random_coin;\n+                } else {\n+                    const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                    if (!opt_coin) {\n+                        break;\n+                    }\n+                    coins_cache_entry.coin = *opt_coin;\n+                }\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                    if (!opt_out_point) {\n+                        break;\n+                    }\n+                    random_out_point = *opt_out_point;\n+                }\n+                coins_map.emplace(random_out_point, std::move(coins_cache_entry));\n+            }\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.BatchWrite(coins_map, fuzzed_data_provider.ConsumeBool() ? ConsumeUInt256(fuzzed_data_provider) : coins_view_cache.GetBestBlock());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"FRESH flag misapplied to coin that exists in parent cache\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        }\n+    }\n+\n+    {\n+        const Coin& coin_using_access_coin = coins_view_cache.AccessCoin(random_out_point);\n+        const bool exists_using_access_coin = !(coin_using_access_coin == EMPTY_COIN);\n+        const bool exists_using_have_coin = coins_view_cache.HaveCoin(random_out_point);\n+        const bool exists_using_have_coin_in_cache = coins_view_cache.HaveCoinInCache(random_out_point);\n+        Coin coin_using_get_coin;\n+        const bool exists_using_get_coin = coins_view_cache.GetCoin(random_out_point, coin_using_get_coin);\n+        if (exists_using_get_coin) {\n+            assert(coin_using_get_coin == coin_using_access_coin);\n+        }\n+        assert((exists_using_access_coin && exists_using_have_coin_in_cache && exists_using_have_coin && exists_using_get_coin) ||\n+               (!exists_using_access_coin && !exists_using_have_coin_in_cache && !exists_using_have_coin && !exists_using_get_coin));\n+        const bool exists_using_have_coin_in_backend = backend_coins_view.HaveCoin(random_out_point);\n+        if (exists_using_have_coin_in_backend) {\n+            assert(exists_using_have_coin);\n+        }\n+        Coin coin_using_backend_get_coin;\n+        if (backend_coins_view.GetCoin(random_out_point, coin_using_backend_get_coin)) {\n+            assert(exists_using_have_coin_in_backend);\n+            assert(coin_using_get_coin == coin_using_backend_get_coin);\n+        } else {\n+            assert(!exists_using_have_coin_in_backend);\n+        }\n+    }\n+\n+    {\n+        bool expected_code_path = false;\n+        try {\n+            (void)coins_view_cache.Cursor();\n+        } catch (const std::logic_error&) {\n+            expected_code_path = true;\n+        }\n+        assert(expected_code_path);\n+        (void)coins_view_cache.DynamicMemoryUsage();\n+        (void)coins_view_cache.EstimateSize();\n+        (void)coins_view_cache.GetBestBlock();\n+        (void)coins_view_cache.GetCacheSize();\n+        (void)coins_view_cache.GetHeadBlocks();\n+        (void)coins_view_cache.HaveInputs(CTransaction{random_mutable_transaction});\n+    }\n+\n+    {\n+        const CCoinsViewCursor* coins_view_cursor = backend_coins_view.Cursor();\n+        assert(coins_view_cursor == nullptr);\n+        (void)backend_coins_view.EstimateSize();\n+        (void)backend_coins_view.GetBestBlock();\n+        (void)backend_coins_view.GetHeadBlocks();\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 6)) {\n+        case 0: {\n+            const CTransaction transaction{random_mutable_transaction};\n+            bool is_spent = false;\n+            for (const CTxOut& tx_out : transaction.vout) {\n+                if (Coin{tx_out, 0, transaction.IsCoinBase()}.IsSpent()) {\n+                    is_spent = true;\n+                }\n+            }\n+            if (is_spent) {\n+                // Avoid:\n+                // coins.cpp:69: void CCoinsViewCache::AddCoin(const COutPoint &, Coin &&, bool): Assertion `!coin.IsSpent()' failed.\n+                break;\n+            }\n+            bool expected_code_path = false;\n+            try {\n+                AddCoins(coins_view_cache, transaction, fuzzed_data_provider.ConsumeIntegral<int>(), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 1: {\n+            (void)AreInputsStandard(CTransaction{random_mutable_transaction}, coins_view_cache);\n+            break;\n+        }\n+        case 2: {\n+            TxValidationState state;\n+            CAmount tx_fee;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429648160",
      "id" : 429648160,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0ODE2MA==",
      "original_commit_id" : "ab7af9323e55bd035d2680a84e986675c7757ee3",
      "original_line" : 239,
      "original_position" : 239,
      "original_start_line" : null,
      "path" : "src/test/fuzz/coins_view.cpp",
      "position" : null,
      "pull_request_review_id" : 404982232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-25T10:05:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429648160",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429648269"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429648269"
         }
      },
      "author_association" : "MEMBER",
      "body" : "can `assert(MoneyRange(tx_fee_out));` when check was successful?",
      "commit_id" : "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "created_at" : "2020-05-24T15:32:01Z",
      "diff_hunk" : "@@ -0,0 +1,295 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return static_cast<bool>(a.fCoinBase) == static_cast<bool>(b.fCoinBase) && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.AddCoin(random_out_point, std::move(coin), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 1: {\n+            (void)coins_view_cache.Flush();\n+            break;\n+        }\n+        case 2: {\n+            coins_view_cache.SetBestBlock(ConsumeUInt256(fuzzed_data_provider));\n+            break;\n+        }\n+        case 3: {\n+            Coin coin;\n+            (void)coins_view_cache.SpendCoin(random_out_point, fuzzed_data_provider.ConsumeBool() ? &coin : nullptr);\n+            break;\n+        }\n+        case 4: {\n+            coins_view_cache.Uncache(random_out_point);\n+            break;\n+        }\n+        case 5: {\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                backend_coins_view = CCoinsView{};\n+            }\n+            coins_view_cache.SetBackend(backend_coins_view);\n+            break;\n+        }\n+        case 6: {\n+            const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+            if (!opt_out_point) {\n+                break;\n+            }\n+            random_out_point = *opt_out_point;\n+            break;\n+        }\n+        case 7: {\n+            const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+            if (!opt_coin) {\n+                break;\n+            }\n+            random_coin = *opt_coin;\n+            break;\n+        }\n+        case 8: {\n+            const std::optional<CMutableTransaction> opt_mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (!opt_mutable_transaction) {\n+                break;\n+            }\n+            random_mutable_transaction = *opt_mutable_transaction;\n+            break;\n+        }\n+        case 9: {\n+            CCoinsMap coins_map;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                CCoinsCacheEntry coins_cache_entry;\n+                coins_cache_entry.flags = fuzzed_data_provider.ConsumeIntegral<unsigned char>();\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    coins_cache_entry.coin = random_coin;\n+                } else {\n+                    const std::optional<Coin> opt_coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                    if (!opt_coin) {\n+                        break;\n+                    }\n+                    coins_cache_entry.coin = *opt_coin;\n+                }\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    const std::optional<COutPoint> opt_out_point = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                    if (!opt_out_point) {\n+                        break;\n+                    }\n+                    random_out_point = *opt_out_point;\n+                }\n+                coins_map.emplace(random_out_point, std::move(coins_cache_entry));\n+            }\n+            bool expected_code_path = false;\n+            try {\n+                coins_view_cache.BatchWrite(coins_map, fuzzed_data_provider.ConsumeBool() ? ConsumeUInt256(fuzzed_data_provider) : coins_view_cache.GetBestBlock());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"FRESH flag misapplied to coin that exists in parent cache\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        }\n+    }\n+\n+    {\n+        const Coin& coin_using_access_coin = coins_view_cache.AccessCoin(random_out_point);\n+        const bool exists_using_access_coin = !(coin_using_access_coin == EMPTY_COIN);\n+        const bool exists_using_have_coin = coins_view_cache.HaveCoin(random_out_point);\n+        const bool exists_using_have_coin_in_cache = coins_view_cache.HaveCoinInCache(random_out_point);\n+        Coin coin_using_get_coin;\n+        const bool exists_using_get_coin = coins_view_cache.GetCoin(random_out_point, coin_using_get_coin);\n+        if (exists_using_get_coin) {\n+            assert(coin_using_get_coin == coin_using_access_coin);\n+        }\n+        assert((exists_using_access_coin && exists_using_have_coin_in_cache && exists_using_have_coin && exists_using_get_coin) ||\n+               (!exists_using_access_coin && !exists_using_have_coin_in_cache && !exists_using_have_coin && !exists_using_get_coin));\n+        const bool exists_using_have_coin_in_backend = backend_coins_view.HaveCoin(random_out_point);\n+        if (exists_using_have_coin_in_backend) {\n+            assert(exists_using_have_coin);\n+        }\n+        Coin coin_using_backend_get_coin;\n+        if (backend_coins_view.GetCoin(random_out_point, coin_using_backend_get_coin)) {\n+            assert(exists_using_have_coin_in_backend);\n+            assert(coin_using_get_coin == coin_using_backend_get_coin);\n+        } else {\n+            assert(!exists_using_have_coin_in_backend);\n+        }\n+    }\n+\n+    {\n+        bool expected_code_path = false;\n+        try {\n+            (void)coins_view_cache.Cursor();\n+        } catch (const std::logic_error&) {\n+            expected_code_path = true;\n+        }\n+        assert(expected_code_path);\n+        (void)coins_view_cache.DynamicMemoryUsage();\n+        (void)coins_view_cache.EstimateSize();\n+        (void)coins_view_cache.GetBestBlock();\n+        (void)coins_view_cache.GetCacheSize();\n+        (void)coins_view_cache.GetHeadBlocks();\n+        (void)coins_view_cache.HaveInputs(CTransaction{random_mutable_transaction});\n+    }\n+\n+    {\n+        const CCoinsViewCursor* coins_view_cursor = backend_coins_view.Cursor();\n+        assert(coins_view_cursor == nullptr);\n+        (void)backend_coins_view.EstimateSize();\n+        (void)backend_coins_view.GetBestBlock();\n+        (void)backend_coins_view.GetHeadBlocks();\n+    }\n+\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 6)) {\n+        case 0: {\n+            const CTransaction transaction{random_mutable_transaction};\n+            bool is_spent = false;\n+            for (const CTxOut& tx_out : transaction.vout) {\n+                if (Coin{tx_out, 0, transaction.IsCoinBase()}.IsSpent()) {\n+                    is_spent = true;\n+                }\n+            }\n+            if (is_spent) {\n+                // Avoid:\n+                // coins.cpp:69: void CCoinsViewCache::AddCoin(const COutPoint &, Coin &&, bool): Assertion `!coin.IsSpent()' failed.\n+                break;\n+            }\n+            bool expected_code_path = false;\n+            try {\n+                AddCoins(coins_view_cache, transaction, fuzzed_data_provider.ConsumeIntegral<int>(), fuzzed_data_provider.ConsumeBool());\n+                expected_code_path = true;\n+            } catch (const std::logic_error& e) {\n+                if (e.what() == std::string{\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\"}) {\n+                    expected_code_path = true;\n+                }\n+            }\n+            assert(expected_code_path);\n+            break;\n+        }\n+        case 1: {\n+            (void)AreInputsStandard(CTransaction{random_mutable_transaction}, coins_view_cache);\n+            break;\n+        }\n+        case 2: {\n+            TxValidationState state;\n+            CAmount tx_fee;\n+            const CTransaction transaction{random_mutable_transaction};\n+            if (ContainsSpentInput(transaction, coins_view_cache)) {\n+                // Avoid:\n+                // consensus/tx_verify.cpp:171: bool Consensus::CheckTxInputs(const CTransaction &, TxValidationState &, const CCoinsViewCache &, int, CAmount &): Assertion `!coin.IsSpent()' failed.\n+                break;\n+            }\n+            try {\n+                (void)Consensus::CheckTxInputs(transaction, state, coins_view_cache, fuzzed_data_provider.ConsumeIntegralInRange<int>(0, std::numeric_limits<int>::max()), tx_fee);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r429648269",
      "id" : 429648269,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0ODI2OQ==",
      "original_commit_id" : "ab7af9323e55bd035d2680a84e986675c7757ee3",
      "original_line" : 247,
      "original_position" : 247,
      "original_start_line" : null,
      "path" : "src/test/fuzz/coins_view.cpp",
      "position" : null,
      "pull_request_review_id" : 404982232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-25T10:05:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/429648269",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke Thanks a lot for a very good review! All feedback addressed :)",
      "created_at" : "2020-05-25T10:07:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-633494293",
      "id" : 633494293,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18867",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMzQ5NDI5Mw==",
      "updated_at" : "2020-05-25T10:07:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633494293",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r430331596"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430331596"
         }
      },
      "author_association" : "MEMBER",
      "body" : "why is this needed?",
      "commit_id" : "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "created_at" : "2020-05-26T11:05:48Z",
      "diff_hunk" : "@@ -0,0 +1,294 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return a.fCoinBase == b.fCoinBase && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r430331596",
      "id" : 430331596,
      "line" : 59,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzMTU5Ng==",
      "original_commit_id" : "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "original_line" : 59,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "src/test/fuzz/coins_view.cpp",
      "position" : 59,
      "pull_request_review_id" : 418192323,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-26T11:05:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430331596",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r430332810"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430332810"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Are you saying that the only exception that is allowed to be thrown is the one that is caught by the error string? Fair enough.",
      "commit_id" : "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "created_at" : "2020-05-26T11:08:11Z",
      "diff_hunk" : "@@ -0,0 +1,294 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return a.fCoinBase == b.fCoinBase && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r430332810",
      "id" : 430332810,
      "in_reply_to_id" : 430331596,
      "line" : 59,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzMjgxMA==",
      "original_commit_id" : "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "original_line" : 59,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "src/test/fuzz/coins_view.cpp",
      "position" : 59,
      "pull_request_review_id" : 418193838,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-26T11:08:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430332810",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK f9b22e3bdb",
      "created_at" : "2020-05-26T11:08:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-633959421",
      "id" : 633959421,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18867",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMzk1OTQyMQ==",
      "updated_at" : "2020-05-26T11:08:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633959421",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK f9b22e3bdb ð«\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK f9b22e3bdb ð«\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUhWqQv/XMjZcKGe3IffrT2bXwemMhi9fKPwO9pJcYGnW6+V/8iHWrTF44+knH5Z\r\nk+gO6xywZRkw2LwHFQ2DRK8YYQex+AtAK4gsMu13bGZn6NoJToqgjfN4FZzZafzn\r\nZJmyOlPP2jO2GKAh3ur0ymUVRB5IvuitTnkjHJpFYgv0T+fFEEmrT+IwB6Gj+c9i\r\nvjRTqU1Pg4eYxtS/zygb1faD6IjN2QUK/uiIV6wdy1aXBVxivx3/p7lCgN9J7M16\r\nTrgvkdTX8Ox4mDMHV+bxmmDKPkDM2Z3ZmAlG2fr4l6ZQF57wQZ4InXRLJS/Rqx/Z\r\nR3UzNufWomLHuwvuOyCTuoVuEjk6MmRmBYxa1mTD1JdC1zEdDBCGrB6Yc/TUzHKI\r\noUSIDxnvkOq4NGetBBuR0KwWuMOvpGfywV5zryVeMYvD4FtbrIauzDCF9Khjwqtf\r\nZnhrmdf70sQDm8kU36/w64Iph54oERYYsV4DbhxqeGJQ+K1j6YKzOIvR7bPsS7ZX\r\nk+eVRXEB\r\n=x9vw\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `ead5a215f8a35eb59ebc41b959be5926bd52e9eb70983fd9272038e5d010f341  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e892940108ead5a215f8a35eb59ebc41b959be5926bd52e9eb70983fd9272038e5d010f341f01060f3f2d4d14a0f92ca457cb561f2e18208fff01049422a8ddc924f15f2f0b4b0b6cde07208f1045eccf8daf008a3830298c0ee542c0083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010a50938d5623078cc8f38ecea5fcdad1f08f1045eccf8daf0082dc11e9d1ad5d5e00083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010aac5eab51ff79a51fb0e6828cad998a208f1045eccf8daf0084e7220ac0954ec620083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6df010df86f8e63ed97bba6e242d0a5c7d815108f1045eccf8daf0088090df4b7a8a98380083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6d)\r\n\r\n</details>\r\n",
      "created_at" : "2020-05-26T11:09:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#issuecomment-633959766",
      "id" : 633959766,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18867",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMzk1OTc2Ng==",
      "updated_at" : "2020-05-26T11:09:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/633959766",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r430338853"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430338853"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Exactly :)",
      "commit_id" : "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "created_at" : "2020-05-26T11:20:38Z",
      "diff_hunk" : "@@ -0,0 +1,294 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <coins.h>\n+#include <consensus/tx_verify.h>\n+#include <consensus/validation.h>\n+#include <key.h>\n+#include <node/coinstats.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <pubkey.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <validation.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+const Coin EMPTY_COIN{};\n+\n+bool operator==(const Coin& a, const Coin& b)\n+{\n+    if (a.IsSpent() && b.IsSpent()) return true;\n+    return a.fCoinBase == b.fCoinBase && a.nHeight == b.nHeight && a.out == b.out;\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    CCoinsView backend_coins_view;\n+    CCoinsViewCache coins_view_cache{&backend_coins_view};\n+    COutPoint random_out_point;\n+    Coin random_coin;\n+    CMutableTransaction random_mutable_transaction;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 9)) {\n+        case 0: {\n+            if (random_coin.IsSpent()) {\n+                break;\n+            }\n+            Coin coin = random_coin;\n+            bool expected_code_path = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18867#discussion_r430338853",
      "id" : 430338853,
      "in_reply_to_id" : 430331596,
      "line" : 59,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzODg1Mw==",
      "original_commit_id" : "f9b22e3bdb54acb2f830b3ebbad47ff17dfb5781",
      "original_line" : 59,
      "original_position" : 59,
      "original_start_line" : null,
      "path" : "src/test/fuzz/coins_view.cpp",
      "position" : 59,
      "pull_request_review_id" : 418201764,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18867",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-26T11:20:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/430338853",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
