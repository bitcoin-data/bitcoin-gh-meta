[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Relevant context from Microsoft using this in production: http://lists.llvm.org/pipermail/cfe-dev/2020-April/065244.html",
      "created_at" : "2020-05-05T19:04:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624246811",
      "id" : 624246811,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDI0NjgxMQ==",
      "updated_at" : "2020-05-05T19:04:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624246811",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Doing so would hurt the usefulness of running valgrind on release binaries, which afaik is the only way to test for these kinds of issues being present in unmodified executables that will actually run in production.",
      "created_at" : "2020-05-05T19:08:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624249303",
      "id" : 624249303,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDI0OTMwMw==",
      "updated_at" : "2020-05-05T19:08:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624249303",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Carl's email link mentioned \"pattern initialization\" which seems like an appealing alternative here. Googling it turned up this description: https://reviews.llvm.org/D54604 \"[Pattern initialization] is the recommended initialization approach. Pattern initialization's goal is to initialize automatic variables with values which will likely transform logic bugs into crashes down the line, are easily recognizable in a crash dump, without being values which programmers can rely on for useful program semantics. At the same time, pattern initialization tries to generate code which will optimize well.\"",
      "created_at" : "2020-05-05T19:16:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624253496",
      "id" : 624253496,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDI1MzQ5Ng==",
      "updated_at" : "2020-05-05T19:16:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624253496",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think this is a trade-off between \"cure\" and \"side effect of cure\".\r\n\r\nAssuming the presence of an uninitialized read in our code base: what is the worst-case scenario for our _users_ of a.) using `-ftrivial-auto-var-init=zero` and b.) not using `-ftrivial-auto-var-init=zero` in production builds?\r\n\r\nMy take:\r\n\r\nThe disease we are fighting is uninitialized reads which may be exploited by an attacker to read memory content to bypass ASLR or leak secrets. (Potentially disastrous for our users.)\r\n\r\nA cure (`-ftrivial-auto-var-init=zero`) has been presented.\r\n\r\nUsing it means that the disease is cured (no more reading of uninitialized memory to bypass ASLR or leak secrets), but it comes with a nasty side effect (`valgrind` can no longer be used to detect uninitialized reads in production binaries).\r\n\r\nHow do we handle this trade-off? Personally I share the view of the security engineers in the Chrome, Android, Windows, iOS and macOS teams who have all started using the equivalent of `-ftrivial-auto-var-init=zero` in some form for their production builds: the cure is worth using despite said unfortunate side-effect :)\r\n\r\nAm I missing any negative side effects, or is the description of `-ftrivial-auto-var-init=zero` as a \"cure\" unfair in some way? WDYT? Discussion is healthy :)",
      "created_at" : "2020-05-05T21:19:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624312392",
      "id" : 624312392,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDMxMjM5Mg==",
      "updated_at" : "2020-05-05T21:19:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624312392",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think both use cases are valid (1) wanting to run valgrind on release builds and (2) wanting to run the release build with auto-init. However they are mutually exclusive, as mentioned by me and also sipa.\r\n\r\nA solution would be to offer both builds, but I'd say that puts too much burden on the user to pick the right build. Maybe the \"valgrind release\" should not be offered as prominently as the auto-init release?",
      "created_at" : "2020-05-05T21:39:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624320880",
      "id" : 624320880,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDMyMDg4MA==",
      "updated_at" : "2020-05-05T21:39:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624320880",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke That defeats the purpose - if users aren't going to run the same release binaries as the optimally-valgrindable ones.\r\n\r\nI'm not saying either is preferable - I see both sides too - but there is a tradeoff here.",
      "created_at" : "2020-05-05T21:42:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624322352",
      "id" : 624322352,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDMyMjM1Mg==",
      "updated_at" : "2020-05-05T21:42:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624322352",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ok, in that case I can't follow what the purpose is. I see those use cases:\r\n\r\n* A developer running any version of Bitcoin Core in valgrind: Motivation is to detect and fix bugs.\r\n* A user running a release of Bitcoin Core in valgrind: Motivation is to crash the node before any undefined behaviour could happen in production. Motivation could also be to test the code in valgrind and then run in production without valgrind.\r\n* A user running a release of Bitcoin Core with auto-init: Motivation is to avoid undefined behavior, but opt in to some unknown defined behaviour. This could be an option where the user does not have access to valgrind or similar.\r\n* A user running a release of Bitcoin Core as it is shipped today (without ever running it in valgrind): With the alternatives presented above, I don't see why this would be preferable.",
      "created_at" : "2020-05-05T22:03:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624330949",
      "id" : 624330949,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDMzMDk0OQ==",
      "updated_at" : "2020-05-05T22:03:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624330949",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Is your point that some users running in valgrind are going to make it safer for users not running in valgrind, because they might report bugs they find? If yes, we should make sure that at least one person is actually doing that and actually reporting bugs they find.",
      "created_at" : "2020-05-05T22:10:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624333419",
      "id" : 624333419,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDMzMzQxOQ==",
      "updated_at" : "2020-05-05T22:10:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624333419",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "My point is that discoverability of some bugs depends on the exact compilation. Changing the compilation flags changes the binary, which may make some bugs visible or invisible. This includes -ftrivial-auto-var-init=zero, which may result in bugs being present in the binary that aren't present in a binary without (but won't crash or trigger any other easily detectable sign). People running valgrind on a valgrind-optimized binary without zero initialization may not discover it because it's not present in their binary, and people running valgrind on the zero-initialized version may not discover it because valgrind's ability to detect issues is reduced in those. Just in general, the advantage of valgrind over other analysis tools is that has the ability to detect issues present in the exact binaries we release - introducing a separate valgrind-optimized version removes that advantage.\r\n\r\nThat said, again, I also see the advantage of reducing risk by initializing all variables even if it comes with a reduction in ability to detect issues.",
      "created_at" : "2020-05-05T22:39:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624343610",
      "id" : 624343610,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDM0MzYxMA==",
      "updated_at" : "2020-05-05T22:39:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624343610",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It seems gcc doesn't actually have an -ftrivial-auto-var-init option? So this discussion seems moot, at least for Linux/Windows binaries?",
      "created_at" : "2020-05-05T22:40:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624344055",
      "id" : 624344055,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDM0NDA1NQ==",
      "updated_at" : "2020-05-05T22:40:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624344055",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> It seems gcc doesn't actually have an -ftrivial-auto-var-init option? So this discussion seems moot, at least for Linux/Windows binaries?\r\n\r\nThe version of Clang we use for macOS builds (6.0.1) wont support this either, as it wasn't introduced into Clang until [8.0.0](https://releases.llvm.org/8.0.0/tools/clang/docs/ReleaseNotes.html).",
      "created_at" : "2020-05-05T23:36:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624361185",
      "id" : 624361185,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDM2MTE4NQ==",
      "updated_at" : "2020-05-05T23:36:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624361185",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> people running valgrind on the zero-initialized version may not discover it because valgrind's ability to detect issues is reduced in those\r\n\r\nHopefully you'd run the same set of tests that you'd run when you use valgrind. If neither configuration can detect the bug, then the set of tests is broken or incomplete.\r\nAssuming the set of tests is \"complete\", but the bug is impossible to observe, then the bug does not exist. :thinking: ",
      "created_at" : "2020-05-06T11:32:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624596236",
      "id" : 624596236,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDU5NjIzNg==",
      "updated_at" : "2020-05-06T11:32:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624596236",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> If yes, we should make sure that at least one person is actually doing that and actually reporting bugs they find.\r\n\r\nDo we even ship the Valgrind suppressions file with our release binaries?\r\n\r\nValgrind is largely meaningless without project specific suppressions files. Since I added `valgrind.supp` to our repo back in 2017 the interest in keeping it up to date has been very close to zero:\r\n* https://github.com/bitcoin/bitcoin/commits/52ce396b2a47ed1c5d7d5764bc98a09451001749/contrib/valgrind.supp\r\n\r\nIt seems like I'm a relatively heavy valgrind user in this project and for me personally I run valgrind (and MSAN!) on binaries compiled from scratch and in such cases I would simply just not opt in to `-ftrivial-auto-var-init=zero` when doing so.\r\n\r\nBut enough of my needs as a developer: as an **individual** Bitcoin Core user with funds in my wallet I cannot see why I wouldn't choose binaries with the added protection that `-ftrivial-auto-var-init=zero` brings if I were presented with the choice.\r\n\r\nIs the idea that I should sacrifice my individual security for the \"common good\"? :)",
      "created_at" : "2020-05-06T15:43:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624726843",
      "id" : 624726843,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDcyNjg0Mw==",
      "updated_at" : "2020-05-06T20:05:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624726843",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Do we even ship the Valgrind suppressions file with our release binaries?\r\n\r\nBitcoin Core 0.20.0 should include them, yes. (Haven't checked)",
      "created_at" : "2020-05-06T16:39:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-624758266",
      "id" : 624758266,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNDc1ODI2Ng==",
      "updated_at" : "2020-05-06T16:39:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/624758266",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It is always interesting to see how others are choosing to tackle the same type of problems we are facing:\r\n\r\nYesterday [Joe Bialek](https://twitter.com/JosephBialek) from the Microsoft Security Response Center's Vulnerability & Mitigations team posted this excellent [article on what Microsoft is doing to eliminate uninitialized stack memory vulnerabilities from Windows](https://msrc-blog.microsoft.com/2020/05/13/solving-uninitialized-stack-memory-on-windows/) using the equivalent of `-ftrivial-auto-var-init=zero` (`InitAll`).\r\n\r\nThe results are pretty remarkable: an entire security bug class which has historically accounted for roughly 5-10% of Microsoft's CVE:s is effectively killed from a security perspective through this technique.\r\n\r\nSome interesting quotes:\r\n\r\n> There are really two distinct classes of vulnerabilities here:\r\n> - Uninitialized Memory Disclosure â Uninitialized memory is copied across a trust boundary and its contents are disclosed to a less privileged entity.\r\n> - Uninitialized Memory Use â Uninitialized memory is directly used. For example, an uninitialized pointer is written through.\r\n\r\n> Itâs also important to realize that uninitialized memory problems occur for both stack allocations and heap allocations. This blog is focusing on stack memory and a follow up blog will address heap memory.\r\n\r\n> In recent years, uninitialized memory use bugs have been trending up. This is likely partially attributed to more researchers being interested in this vulnerability class and writing great tools to help identify these issues.\r\n\r\n> - **Between 2017 and 2018, uninitialized memory vulnerabilities have accounted for roughly 5-10% of the CVEâs issued by Microsoft.**\r\n> - There is a near equal split between stack based vulnerabilities and heap/pool based vulnerabilities.\r\n> - Uninitialized memory disclosures outweigh uninitialized memory use bugs.\r\n\r\n> A zero initialization results in:\r\n>\r\n> - NULL pointer, will throw an SEH exception if you dereference it on Windows (i.e., denial of service at worst instead of remote code execution) which will typically crash the program.\r\n> - A zero size, or zero index, if that is what the variable is being used to track. This is expected to minimize the impact of an uninitialized size being passed to a function like memcpy that operates on a buffer based on the size passed.\r\n> - A zero pointer, when tested in a NULL check, will take the path of âthe pointer is NULLâ and not attempt to use the pointer. This at least gives the program the chance of correctly handling the developer forgetting to initialize the pointer (since following a pattern-initialization pointer will always crash).\r\n> - A zero Boolean is false which may indicate âfailureâ.\r\n\r\n> Our peers at Google have done some measurements and proven that on Clang, zero initialization is currently measurably better in code size and runtime performance than pattern initialization.\r\n\r\n> This exposes another benefit of zero initialization: More deterministic results. The initialization cost doesnât depend on if a particular global variable is in the L1 cache, L2 cache, L3 cache, paged out, etc.\r\n\r\n> Windows 10 1903 was the first version of Windows to ship with InitAll enabled (shipped Spring 2019). We havenât had any performance complaints arise related to InitAll since shipping it.\r\n\r\n> **Since shipping InitAll to the world, weâve had multiple vulnerability reports submitted to MSRC that did not reproduce on the latest versions of Windows due to InitAll. This effectively downgrades the vulnerabilities from âsecurity bugsâ to âcode defect that currently has no negative impactsâ. This means we no longer need to ship a security update for the in-market operating systems that have the mitigation installed, saving customers patching pain and Microsoft servicing pain.**\r\n\r\n> We do still fix the issues in our active development branches so that the code is correct going forward and we fix in-market operating systems that donât have InitAll enabled as they are still vulnerable. Over the long term, operating systems that donât have InitAll enabled will fall out of support. Once this occurs, uninitialized memory bugs that are mitigated by InitAll will only need to be fixed in active development branches and this bug class will no longer need to be serviced to in-market operating systems.\r\n\r\n> Longer term we are exploring if itâs possible to eliminate these sorts of issues from the C and C++ language in a standardized way. Leaving variables uninitialized is not typically necessary for performance (especially when the compiler has good redundant store elimination). Instead of defaulting variables to uninitialized, itâd be nice to default to âvariable must be provably initialized before useâ and only allow this rule to be broken if a special uninitialized keyword was used. This could allow developers to keep performance while also saving themselves from unnecessary mistakes.\r\n\r\ntl;dr in clickbait form: \"Black hats hate him: the one weird trick that saved millions of users from losing heaps of money due to nasty memory vulnerabilities!\"",
      "created_at" : "2020-05-14T04:44:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-628383300",
      "id" : 628383300,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyODM4MzMwMA==",
      "updated_at" : "2020-05-14T04:47:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/628383300",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "People interested in avoiding uninitialized reads are highly encouraged to review #18912 which re-enables the valgrind fuzzing job which was recently removed.\r\n\r\nWe are currently running without _any_ uninit read checking (in the form of Valgrind or MSan) in Travis which feels a bit unsafe TBH :\\",
      "created_at" : "2020-05-19T10:52:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/18892#issuecomment-630743081",
      "id" : 630743081,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18892",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYzMDc0MzA4MQ==",
      "updated_at" : "2020-05-19T10:53:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630743081",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
