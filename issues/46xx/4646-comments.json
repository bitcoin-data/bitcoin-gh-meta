[
   {
      "body" : "Updated such that each message is a method.  It is recommended to review each commit rather than the sum of all commits, as this patch series follows the \"equivalent transformation\" method of refactoring code into a more useful form.\r\n\r\nThis should be suitable for updating to use signals or similar (possibly moving back outside of the class if necessary).\r\n",
      "created_at" : "2014-08-07T17:45:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-51506315",
      "id" : 51506315,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2014-08-07T17:45:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/51506315",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4646_aa9ad2895e32dcaedba5e1511f5edead4664c029/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.",
      "created_at" : "2014-08-07T17:58:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-51508028",
      "id" : 51508028,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2014-08-07T17:58:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/51508028",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2110907?v=3",
         "events_url" : "https://api.github.com/users/BitcoinPullTester/events{/privacy}",
         "followers_url" : "https://api.github.com/users/BitcoinPullTester/followers",
         "following_url" : "https://api.github.com/users/BitcoinPullTester/following{/other_user}",
         "gists_url" : "https://api.github.com/users/BitcoinPullTester/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/BitcoinPullTester",
         "id" : 2110907,
         "login" : "BitcoinPullTester",
         "organizations_url" : "https://api.github.com/users/BitcoinPullTester/orgs",
         "received_events_url" : "https://api.github.com/users/BitcoinPullTester/received_events",
         "repos_url" : "https://api.github.com/users/BitcoinPullTester/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/BitcoinPullTester/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/BitcoinPullTester/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/BitcoinPullTester"
      }
   },
   {
      "body" : "Oh, yes, please!\r\nuntested and undiffed ACK. The diffed ack will come later. Maybe the last un-indent commit can be replaced with a \"Pass clang to the new files\". Now that we have a way to automatically format the code, it can be useful for after-diff-sensible commits like that one, should be faster to review just by reproducing it locally.",
      "created_at" : "2014-09-03T10:42:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-54279211",
      "id" : 54279211,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2014-09-03T10:42:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/54279211",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Idea ACK, but this code is pretty much in flux still (askfor/headersfirst/sendmessages/...); I'd propose to delay this until close to the next major release.",
      "created_at" : "2014-09-03T13:00:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-54292468",
      "id" : 54292468,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2014-09-03T13:00:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/54292468",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "After headersfirst has been merged, can we reopen this?",
      "created_at" : "2014-10-18T18:43:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-59625079",
      "id" : 59625079,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2014-10-18T18:43:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/59625079",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "No objection against just moving things like this, but things like #4831 conflict probably with less, and actually go further, as it actually splits processing up completely, rather than just moving it as a whole.",
      "created_at" : "2014-10-19T08:13:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-59642865",
      "id" : 59642865,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2014-10-19T08:13:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/59642865",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Things like ping/pong handling and alert handling can probably be split off in a way similar to #4831.",
      "created_at" : "2014-10-19T08:14:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-59642891",
      "id" : 59642891,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2014-10-19T08:14:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/59642891",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059356"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4646"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/19059356"
         }
      },
      "body" : "Nit: Alphabetical ordering.",
      "commit_id" : "aa9ad2895e32dcaedba5e1511f5edead4664c029",
      "created_at" : "2014-10-19T10:42:30Z",
      "diff_hunk" : "@@ -17,6 +17,7 @@\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"procmsg.h\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059356",
      "id" : 19059356,
      "original_commit_id" : "aa9ad2895e32dcaedba5e1511f5edead4664c029",
      "original_position" : 4,
      "path" : "src/main.cpp",
      "position" : 4,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4646",
      "updated_at" : "2014-10-19T10:42:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/19059356",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059363"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4646"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/19059363"
         }
      },
      "body" : "Nit: Same here.",
      "commit_id" : "aa9ad2895e32dcaedba5e1511f5edead4664c029",
      "created_at" : "2014-10-19T10:43:12Z",
      "diff_hunk" : "@@ -23,6 +23,7 @@\n #include <exception>\n #include <map>\n #include <set>\n+#include <list>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059363",
      "id" : 19059363,
      "original_commit_id" : "aa9ad2895e32dcaedba5e1511f5edead4664c029",
      "original_position" : 4,
      "path" : "src/main.h",
      "position" : 4,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4646",
      "updated_at" : "2014-10-19T10:43:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/19059363",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059375"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4646"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/19059375"
         }
      },
      "body" : "Nit: And for this whole block. Also just MIT license.",
      "commit_id" : "aa9ad2895e32dcaedba5e1511f5edead4664c029",
      "created_at" : "2014-10-19T10:44:04Z",
      "diff_hunk" : "@@ -0,0 +1,1374 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059375",
      "id" : 19059375,
      "original_commit_id" : "aa9ad2895e32dcaedba5e1511f5edead4664c029",
      "original_position" : 6,
      "path" : "src/procmsg.cpp",
      "position" : 6,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4646",
      "updated_at" : "2014-10-19T10:44:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/19059375",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059381"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4646"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/19059381"
         }
      },
      "body" : "Suggestion: remove the unneeded newlines here.",
      "commit_id" : "aa9ad2895e32dcaedba5e1511f5edead4664c029",
      "created_at" : "2014-10-19T10:44:34Z",
      "diff_hunk" : "@@ -0,0 +1,1374 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+#include \"core.h\"\n+#include \"checkpoints.h\"\n+#include \"addrman.h\"\n+#include \"alert.h\"\n+#include \"main.h\"\n+#include \"procmsg.h\"\n+\n+using namespace std;\n+\n+class MessageEngine msgeng;\n+\n+map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n+\n+extern void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash);\n+extern void ProcessBlockAvailability(NodeId nodeid);\n+extern void MarkBlockAsReceived(const uint256 &hash, NodeId nodeFrom = -1);\n+extern bool AddBlockToQueue(NodeId nodeid, const uint256 &hash);\n+extern void MarkBlockAsInFlight(NodeId nodeid, const uint256 &hash);\n+extern CNodeState *State(NodeId pnode);\n+extern map<uint256, NodeId> mapBlockSource;\n+extern uint256 GetOrphanRoot(const uint256& hash);\n+extern struct CMainSignals g_signals;\n+\n+//////////////////////////////////////////////////////////////////////////////\n+//\n+// mapOrphanTransactions\n+//\n+\n+bool AddOrphanTx(const CTransaction& tx)\n+{\n+    uint256 hash = tx.GetHash();\n+    if (mapOrphanTransactions.count(hash))\n+        return false;\n+\n+    // Ignore big transactions, to avoid a\n+    // send-big-orphans memory exhaustion attack. If a peer has a legitimate\n+    // large transaction with a missing parent then we assume\n+    // it will rebroadcast it later, after the parent transaction(s)\n+    // have been mined or received.\n+    // 10,000 orphans, each of which is at most 5,000 bytes big is\n+    // at most 500 megabytes of orphans:\n+    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n+    if (sz > 5000)\n+    {\n+        LogPrint(\"mempool\", \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n+        return false;\n+    }\n+\n+    mapOrphanTransactions[hash] = tx;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        mapOrphanTransactionsByPrev[txin.prevout.hash].insert(hash);\n+\n+    LogPrint(\"mempool\", \"stored orphan tx %s (mapsz %u)\\n\", hash.ToString(),\n+        mapOrphanTransactions.size());\n+    return true;\n+}\n+\n+static void EraseOrphanTx(uint256 hash)\n+{\n+    if (!mapOrphanTransactions.count(hash))\n+        return;\n+    const CTransaction& tx = mapOrphanTransactions[hash];\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        mapOrphanTransactionsByPrev[txin.prevout.hash].erase(hash);\n+        if (mapOrphanTransactionsByPrev[txin.prevout.hash].empty())\n+            mapOrphanTransactionsByPrev.erase(txin.prevout.hash);\n+    }\n+    mapOrphanTransactions.erase(hash);\n+}\n+\n+unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n+{\n+    unsigned int nEvicted = 0;\n+    while (mapOrphanTransactions.size() > nMaxOrphans)\n+    {\n+        // Evict a random orphan:\n+        uint256 randomhash = GetRandHash();\n+        map<uint256, CTransaction>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n+        if (it == mapOrphanTransactions.end())\n+            it = mapOrphanTransactions.begin();\n+        EraseOrphanTx(it->first);\n+        ++nEvicted;\n+    }\n+    return nEvicted;\n+}\n+\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059381",
      "id" : 19059381,
      "original_commit_id" : "aa9ad2895e32dcaedba5e1511f5edead4664c029",
      "original_position" : 94,
      "path" : "src/procmsg.cpp",
      "position" : 94,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4646",
      "updated_at" : "2014-10-19T10:44:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/19059381",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059385"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4646"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/19059385"
         }
      },
      "body" : "Suggestion: Could be a one line-comment?",
      "commit_id" : "aa9ad2895e32dcaedba5e1511f5edead4664c029",
      "created_at" : "2014-10-19T10:45:00Z",
      "diff_hunk" : "@@ -0,0 +1,1374 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+#include \"core.h\"\n+#include \"checkpoints.h\"\n+#include \"addrman.h\"\n+#include \"alert.h\"\n+#include \"main.h\"\n+#include \"procmsg.h\"\n+\n+using namespace std;\n+\n+class MessageEngine msgeng;\n+\n+map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n+\n+extern void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash);\n+extern void ProcessBlockAvailability(NodeId nodeid);\n+extern void MarkBlockAsReceived(const uint256 &hash, NodeId nodeFrom = -1);\n+extern bool AddBlockToQueue(NodeId nodeid, const uint256 &hash);\n+extern void MarkBlockAsInFlight(NodeId nodeid, const uint256 &hash);\n+extern CNodeState *State(NodeId pnode);\n+extern map<uint256, NodeId> mapBlockSource;\n+extern uint256 GetOrphanRoot(const uint256& hash);\n+extern struct CMainSignals g_signals;\n+\n+//////////////////////////////////////////////////////////////////////////////\n+//\n+// mapOrphanTransactions\n+//\n+\n+bool AddOrphanTx(const CTransaction& tx)\n+{\n+    uint256 hash = tx.GetHash();\n+    if (mapOrphanTransactions.count(hash))\n+        return false;\n+\n+    // Ignore big transactions, to avoid a\n+    // send-big-orphans memory exhaustion attack. If a peer has a legitimate\n+    // large transaction with a missing parent then we assume\n+    // it will rebroadcast it later, after the parent transaction(s)\n+    // have been mined or received.\n+    // 10,000 orphans, each of which is at most 5,000 bytes big is\n+    // at most 500 megabytes of orphans:\n+    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n+    if (sz > 5000)\n+    {\n+        LogPrint(\"mempool\", \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n+        return false;\n+    }\n+\n+    mapOrphanTransactions[hash] = tx;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        mapOrphanTransactionsByPrev[txin.prevout.hash].insert(hash);\n+\n+    LogPrint(\"mempool\", \"stored orphan tx %s (mapsz %u)\\n\", hash.ToString(),\n+        mapOrphanTransactions.size());\n+    return true;\n+}\n+\n+static void EraseOrphanTx(uint256 hash)\n+{\n+    if (!mapOrphanTransactions.count(hash))\n+        return;\n+    const CTransaction& tx = mapOrphanTransactions[hash];\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        mapOrphanTransactionsByPrev[txin.prevout.hash].erase(hash);\n+        if (mapOrphanTransactionsByPrev[txin.prevout.hash].empty())\n+            mapOrphanTransactionsByPrev.erase(txin.prevout.hash);\n+    }\n+    mapOrphanTransactions.erase(hash);\n+}\n+\n+unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n+{\n+    unsigned int nEvicted = 0;\n+    while (mapOrphanTransactions.size() > nMaxOrphans)\n+    {\n+        // Evict a random orphan:\n+        uint256 randomhash = GetRandHash();\n+        map<uint256, CTransaction>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n+        if (it == mapOrphanTransactions.end())\n+            it = mapOrphanTransactions.begin();\n+        EraseOrphanTx(it->first);\n+        ++nEvicted;\n+    }\n+    return nEvicted;\n+}\n+\n+\n+\n+\n+\n+\n+bool static AlreadyHave(const CInv& inv)\n+{\n+    switch (inv.type)\n+    {\n+    case MSG_TX:\n+        {\n+            bool txInMap = false;\n+            txInMap = mempool.exists(inv.hash);\n+            return txInMap || mapOrphanTransactions.count(inv.hash) ||\n+                pcoinsTip->HaveCoins(inv.hash);\n+        }\n+    case MSG_BLOCK:\n+        return mapBlockIndex.count(inv.hash) ||\n+               mapOrphanBlocks.count(inv.hash);\n+    }\n+    // Don't know what it is, just say we already got one\n+    return true;\n+}\n+\n+\n+void static ProcessGetData(CNode* pfrom)\n+{\n+    std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n+\n+    vector<CInv> vNotFound;\n+\n+    LOCK(cs_main);\n+\n+    while (it != pfrom->vRecvGetData.end()) {\n+        // Don't bother if send buffer is too full to respond anyway\n+        if (pfrom->nSendSize >= SendBufferSize())\n+            break;\n+\n+        const CInv &inv = *it;\n+        {\n+            boost::this_thread::interruption_point();\n+            it++;\n+\n+            if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n+            {\n+                bool send = false;\n+                map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(inv.hash);\n+                if (mi != mapBlockIndex.end())\n+                {\n+                    // If the requested block is at a height below our last\n+                    // checkpoint, only serve it if it's in the checkpointed chain\n+                    int nHeight = mi->second->nHeight;\n+                    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n+                    if (pcheckpoint && nHeight < pcheckpoint->nHeight) {\n+                        if (!chainActive.Contains(mi->second))\n+                        {\n+                            LogPrintf(\"ProcessGetData(): ignoring request for old block that isn't in the main chain\\n\");\n+                        } else {\n+                            send = true;\n+                        }\n+                    } else {\n+                        send = true;\n+                    }\n+                }\n+                if (send)\n+                {\n+                    // Send block from disk\n+                    CBlock block;\n+                    if (!ReadBlockFromDisk(block, (*mi).second))\n+                        assert(!\"cannot load block from disk\");\n+                    if (inv.type == MSG_BLOCK)\n+                        pfrom->PushMessage(\"block\", block);\n+                    else // MSG_FILTERED_BLOCK)\n+                    {\n+                        LOCK(pfrom->cs_filter);\n+                        if (pfrom->pfilter)\n+                        {\n+                            CMerkleBlock merkleBlock(block, *pfrom->pfilter);\n+                            pfrom->PushMessage(\"merkleblock\", merkleBlock);\n+                            // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n+                            // This avoids hurting performance by pointlessly requiring a round-trip\n+                            // Note that there is currently no way for a node to request any single transactions we didnt send here -\n+                            // they must either disconnect and retry or request the full block.\n+                            // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n+                            // however we MUST always provide at least what the remote peer needs\n+                            typedef std::pair<unsigned int, uint256> PairType;\n+                            BOOST_FOREACH(PairType& pair, merkleBlock.vMatchedTxn)\n+                                if (!pfrom->setInventoryKnown.count(CInv(MSG_TX, pair.second)))\n+                                    pfrom->PushMessage(\"tx\", block.vtx[pair.first]);\n+                        }\n+                        // else",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059385",
      "id" : 19059385,
      "original_commit_id" : "aa9ad2895e32dcaedba5e1511f5edead4664c029",
      "original_position" : 184,
      "path" : "src/procmsg.cpp",
      "position" : 184,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4646",
      "updated_at" : "2014-10-19T10:45:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/19059385",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059390"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4646"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/19059390"
         }
      },
      "body" : "Nit: Unneeded newline.",
      "commit_id" : "aa9ad2895e32dcaedba5e1511f5edead4664c029",
      "created_at" : "2014-10-19T10:45:34Z",
      "diff_hunk" : "@@ -0,0 +1,1374 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+#include \"core.h\"\n+#include \"checkpoints.h\"\n+#include \"addrman.h\"\n+#include \"alert.h\"\n+#include \"main.h\"\n+#include \"procmsg.h\"\n+\n+using namespace std;\n+\n+class MessageEngine msgeng;\n+\n+map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n+\n+extern void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash);\n+extern void ProcessBlockAvailability(NodeId nodeid);\n+extern void MarkBlockAsReceived(const uint256 &hash, NodeId nodeFrom = -1);\n+extern bool AddBlockToQueue(NodeId nodeid, const uint256 &hash);\n+extern void MarkBlockAsInFlight(NodeId nodeid, const uint256 &hash);\n+extern CNodeState *State(NodeId pnode);\n+extern map<uint256, NodeId> mapBlockSource;\n+extern uint256 GetOrphanRoot(const uint256& hash);\n+extern struct CMainSignals g_signals;\n+\n+//////////////////////////////////////////////////////////////////////////////\n+//\n+// mapOrphanTransactions\n+//\n+\n+bool AddOrphanTx(const CTransaction& tx)\n+{\n+    uint256 hash = tx.GetHash();\n+    if (mapOrphanTransactions.count(hash))\n+        return false;\n+\n+    // Ignore big transactions, to avoid a\n+    // send-big-orphans memory exhaustion attack. If a peer has a legitimate\n+    // large transaction with a missing parent then we assume\n+    // it will rebroadcast it later, after the parent transaction(s)\n+    // have been mined or received.\n+    // 10,000 orphans, each of which is at most 5,000 bytes big is\n+    // at most 500 megabytes of orphans:\n+    unsigned int sz = tx.GetSerializeSize(SER_NETWORK, CTransaction::CURRENT_VERSION);\n+    if (sz > 5000)\n+    {\n+        LogPrint(\"mempool\", \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n+        return false;\n+    }\n+\n+    mapOrphanTransactions[hash] = tx;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        mapOrphanTransactionsByPrev[txin.prevout.hash].insert(hash);\n+\n+    LogPrint(\"mempool\", \"stored orphan tx %s (mapsz %u)\\n\", hash.ToString(),\n+        mapOrphanTransactions.size());\n+    return true;\n+}\n+\n+static void EraseOrphanTx(uint256 hash)\n+{\n+    if (!mapOrphanTransactions.count(hash))\n+        return;\n+    const CTransaction& tx = mapOrphanTransactions[hash];\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        mapOrphanTransactionsByPrev[txin.prevout.hash].erase(hash);\n+        if (mapOrphanTransactionsByPrev[txin.prevout.hash].empty())\n+            mapOrphanTransactionsByPrev.erase(txin.prevout.hash);\n+    }\n+    mapOrphanTransactions.erase(hash);\n+}\n+\n+unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n+{\n+    unsigned int nEvicted = 0;\n+    while (mapOrphanTransactions.size() > nMaxOrphans)\n+    {\n+        // Evict a random orphan:\n+        uint256 randomhash = GetRandHash();\n+        map<uint256, CTransaction>::iterator it = mapOrphanTransactions.lower_bound(randomhash);\n+        if (it == mapOrphanTransactions.end())\n+            it = mapOrphanTransactions.begin();\n+        EraseOrphanTx(it->first);\n+        ++nEvicted;\n+    }\n+    return nEvicted;\n+}\n+\n+\n+\n+\n+\n+\n+bool static AlreadyHave(const CInv& inv)\n+{\n+    switch (inv.type)\n+    {\n+    case MSG_TX:\n+        {\n+            bool txInMap = false;\n+            txInMap = mempool.exists(inv.hash);\n+            return txInMap || mapOrphanTransactions.count(inv.hash) ||\n+                pcoinsTip->HaveCoins(inv.hash);\n+        }\n+    case MSG_BLOCK:\n+        return mapBlockIndex.count(inv.hash) ||\n+               mapOrphanBlocks.count(inv.hash);\n+    }\n+    // Don't know what it is, just say we already got one\n+    return true;\n+}\n+\n+\n+void static ProcessGetData(CNode* pfrom)\n+{\n+    std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n+\n+    vector<CInv> vNotFound;\n+\n+    LOCK(cs_main);\n+\n+    while (it != pfrom->vRecvGetData.end()) {\n+        // Don't bother if send buffer is too full to respond anyway\n+        if (pfrom->nSendSize >= SendBufferSize())\n+            break;\n+\n+        const CInv &inv = *it;\n+        {\n+            boost::this_thread::interruption_point();\n+            it++;\n+\n+            if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n+            {\n+                bool send = false;\n+                map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(inv.hash);\n+                if (mi != mapBlockIndex.end())\n+                {\n+                    // If the requested block is at a height below our last\n+                    // checkpoint, only serve it if it's in the checkpointed chain\n+                    int nHeight = mi->second->nHeight;\n+                    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n+                    if (pcheckpoint && nHeight < pcheckpoint->nHeight) {\n+                        if (!chainActive.Contains(mi->second))\n+                        {\n+                            LogPrintf(\"ProcessGetData(): ignoring request for old block that isn't in the main chain\\n\");\n+                        } else {\n+                            send = true;\n+                        }\n+                    } else {\n+                        send = true;\n+                    }\n+                }\n+                if (send)\n+                {\n+                    // Send block from disk\n+                    CBlock block;\n+                    if (!ReadBlockFromDisk(block, (*mi).second))\n+                        assert(!\"cannot load block from disk\");\n+                    if (inv.type == MSG_BLOCK)\n+                        pfrom->PushMessage(\"block\", block);\n+                    else // MSG_FILTERED_BLOCK)\n+                    {\n+                        LOCK(pfrom->cs_filter);\n+                        if (pfrom->pfilter)\n+                        {\n+                            CMerkleBlock merkleBlock(block, *pfrom->pfilter);\n+                            pfrom->PushMessage(\"merkleblock\", merkleBlock);\n+                            // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n+                            // This avoids hurting performance by pointlessly requiring a round-trip\n+                            // Note that there is currently no way for a node to request any single transactions we didnt send here -\n+                            // they must either disconnect and retry or request the full block.\n+                            // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n+                            // however we MUST always provide at least what the remote peer needs\n+                            typedef std::pair<unsigned int, uint256> PairType;\n+                            BOOST_FOREACH(PairType& pair, merkleBlock.vMatchedTxn)\n+                                if (!pfrom->setInventoryKnown.count(CInv(MSG_TX, pair.second)))\n+                                    pfrom->PushMessage(\"tx\", block.vtx[pair.first]);\n+                        }\n+                        // else\n+                            // no response\n+                    }\n+\n+                    // Trigger them to send a getblocks request for the next batch of inventory\n+                    if (inv.hash == pfrom->hashContinue)\n+                    {\n+                        // Bypass PushInventory, this must send even if redundant,\n+                        // and we want it right after the last block so they don't\n+                        // wait for other stuff first.\n+                        vector<CInv> vInv;\n+                        vInv.push_back(CInv(MSG_BLOCK, chainActive.Tip()->GetBlockHash()));\n+                        pfrom->PushMessage(\"inv\", vInv);\n+                        pfrom->hashContinue = 0;\n+                    }\n+                }\n+            }\n+            else if (inv.IsKnownType())\n+            {\n+                // Send stream from relay memory\n+                bool pushed = false;\n+                {\n+                    LOCK(cs_mapRelay);\n+                    map<CInv, CDataStream>::iterator mi = mapRelay.find(inv);\n+                    if (mi != mapRelay.end()) {\n+                        pfrom->PushMessage(inv.GetCommand(), (*mi).second);\n+                        pushed = true;\n+                    }\n+                }\n+                if (!pushed && inv.type == MSG_TX) {\n+                    CTransaction tx;\n+                    if (mempool.lookup(inv.hash, tx)) {\n+                        CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+                        ss.reserve(1000);\n+                        ss << tx;\n+                        pfrom->PushMessage(\"tx\", ss);\n+                        pushed = true;\n+                    }\n+                }\n+                if (!pushed) {\n+                    vNotFound.push_back(inv);\n+                }\n+            }\n+\n+            // Track requests for our stuff.\n+            g_signals.Inventory(inv.hash);\n+\n+            if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n+                break;\n+        }\n+    }\n+\n+    pfrom->vRecvGetData.erase(pfrom->vRecvGetData.begin(), it);\n+\n+    if (!vNotFound.empty()) {\n+        // Let the peer know that we didn't find what it asked for, so it doesn't\n+        // have to wait around forever. Currently only SPV clients actually care\n+        // about this message: it's needed when they are recursively walking the\n+        // dependencies of relevant unconfirmed transactions. SPV clients want to\n+        // do that because they want to know about (and store and rebroadcast and\n+        // risk analyze) the dependencies of transactions relevant to them, without\n+        // having to download the entire memory pool.\n+        pfrom->PushMessage(\"notfound\", vNotFound);\n+    }\n+}\n+\n+bool MessageEngine::ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived)\n+{\n+    RandAddSeedPerfmon();\n+    LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", strCommand, vRecv.size(), pfrom->id);\n+    if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n+    {\n+        LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n+        return true;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        State(pfrom->GetId())->nLastBlockProcess = GetTimeMicros();\n+    }\n+\n+    if (strCommand == \"version\") {\n+        if (!MsgVersion(pfrom, vRecv, nTimeReceived))\n+            return false;\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059390",
      "id" : 19059390,
      "original_commit_id" : "aa9ad2895e32dcaedba5e1511f5edead4664c029",
      "original_position" : 268,
      "path" : "src/procmsg.cpp",
      "position" : 268,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4646",
      "updated_at" : "2014-10-19T10:45:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/19059390",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059396"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4646"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/19059396"
         }
      },
      "body" : "Misses license header!",
      "commit_id" : "aa9ad2895e32dcaedba5e1511f5edead4664c029",
      "created_at" : "2014-10-19T10:46:12Z",
      "diff_hunk" : "@@ -0,0 +1,41 @@\n+#ifndef __BITCOIN_PROCMSG_H__",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059396",
      "id" : 19059396,
      "original_commit_id" : "aa9ad2895e32dcaedba5e1511f5edead4664c029",
      "original_position" : 1,
      "path" : "src/procmsg.h",
      "position" : 1,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4646",
      "updated_at" : "2014-10-19T10:46:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/19059396",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059399"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4646"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/19059399"
         }
      },
      "body" : "Nit: Ordering.",
      "commit_id" : "aa9ad2895e32dcaedba5e1511f5edead4664c029",
      "created_at" : "2014-10-19T10:46:22Z",
      "diff_hunk" : "@@ -0,0 +1,41 @@\n+#ifndef __BITCOIN_PROCMSG_H__\n+#define __BITCOIN_PROCMSG_H__\n+\n+#include <string>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#discussion_r19059399",
      "id" : 19059399,
      "original_commit_id" : "aa9ad2895e32dcaedba5e1511f5edead4664c029",
      "original_position" : 4,
      "path" : "src/procmsg.h",
      "position" : 4,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/4646",
      "updated_at" : "2014-10-19T10:46:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/19059399",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "body" : "Suggestion: Why not let the clang-script fix coding style for this?",
      "created_at" : "2014-10-19T10:47:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-59645959",
      "id" : 59645959,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2014-10-19T10:47:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/59645959",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "body" : "I really like how https://github.com/jgarzik/bitcoin/commit/78edf5cb8cf65caf38080ac57040469cc9c6957f (Split up P2P message processing into MessageEngine methods) improves the readability of the p2p messages.",
      "created_at" : "2014-10-23T06:00:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-60196006",
      "id" : 60196006,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2014-10-23T06:00:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/60196006",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "I felt that this was a good step towards the direction we want to go longer term, which is registering processing methods (signals/hooks), so that the message processing implementation is more de-coupled from network message dispatch.\r\n\r\nIt sounded like @sipa did not like this as an intermediate step, though.\r\n",
      "created_at" : "2014-10-23T13:34:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-60238911",
      "id" : 60238911,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2014-10-23T13:34:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/60238911",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "I would absolutely be in favor of this as intermediate step if not for the review overhead and the fact that it will break existing pull requests that already go further.\r\n\r\nAfterwards I think we can definitely do this for the non-trivial pieces after the trivial ones have been moved out.",
      "created_at" : "2014-10-23T15:37:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-60258533",
      "id" : 60258533,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2014-10-23T15:37:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/60258533",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Needs rebase...\r\nWould this be easier to merge if it only contained one commit equivalent to https://github.com/jgarzik/bitcoin/commit/78edf5cb8cf65caf38080ac57040469cc9c6957f but doing the separation directly in main.cpp and using regular functions instead of method of a new class?\r\nThey can even be static inline functions in which case the commit should produce an identical build unless I'm missing something (meaning no risk with low review overhead).",
      "created_at" : "2015-06-21T13:22:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-113901141",
      "id" : 113901141,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2015-06-21T13:23:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/113901141",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Closing.  I still think this is worth merging and @jtimon seems to agree.  However it has not gained sufficient momentum to get merged for whatever reason.\r\n\r\nAs usual, it is easy to re-open a PR if this turns out to be in error, ACKs suddenly appear, etc.  Applying the \"close old PRs, easy to reopen\" pattern.\r\n\r\nThis code movement change is too large to continue rebasing if it is not getting merged.",
      "created_at" : "2015-07-23T18:01:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124186219",
      "id" : 124186219,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2015-07-23T18:01:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124186219",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "I really think this kind of PR opens the door to many modularity improvements. And I understand that code movements are a burden to reviewers because they need to keep up to date with them after they're merged. This is a very big move on main.cpp that everybody is touching.\r\nBut I seriously don't understand why breaking breaking an overly-nested switch into new functions of a too-large function like ProcessMessage is so difficult when (as you have proven) it can be done with a minimal and review-friendly single commit (https://github.com/jgarzik/bitcoin/commit/78edf5cb8cf65caf38080ac57040469cc9c6957f ). I believe this can be done in a way that results in an identical gitian just prefixing all the new functions with ```static inline```, but I've never tested it. When I tried to do something similar in #5153 for EvalScript  @gmaxwell tested it and the build hash wasn't identical. I didn't add that prefix because, I thought, theoretically, the compiler should be smart enough to tell by itself, but as @sipa  explained me later, non-static (or in an anonymous namespace) things are effectively \"public\" to the compiler, because it doesn't have a per-file way to tell whether you're using ```extern``` somewhere else or not.\r\n \r\nI really think we should break both EvalScript and ProcessMessage with an identical-build single commit. With an identical build you don't even need any tested ACK, utACKS should be enough.\r\nIf I remember correctly @petertodd started a bounty on a python script to check whether the last commit produces an identical build hash or not. I proposed it and I didn't needed the bounty as motivation, but I never did it.This is the tutorial by @laanwj that I was going to use: https://github.com/bitcoin/bitcoin/pull/4180#issuecomment-52148271",
      "created_at" : "2015-07-24T01:31:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124288131",
      "id" : 124288131,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2015-07-24T01:39:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124288131",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "@jtimon I agree.  It is however difficult to produce identical hashes due to minor compiler build differences such as the ones that sipa mentions.\r\n\r\nYou could probably perform some #include tricks to accomplish the first file movement step with equivalent hashes, if you keep ProcessMessage() intact.  Once the individual code blocks move to their own functions/methods, the hashes will unavoidably differ.\r\n\r\nA line-by-line source code comparison tool would be better than a hash check.\r\n",
      "created_at" : "2015-07-24T05:20:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124334871",
      "id" : 124334871,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2015-07-24T05:20:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124334871",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "I have nothing against changes like this, except I think that:\n1) The resulting temporary state is worse than the start due to circular\ndependencies (you don't claim it is, but:)\n2) It does not help anything towards achieving the IMHO correct solution,\nwhich is separate handler modules, like @laanwj's inv/ask transaction\nhandling. In fact, it interferes with it.\n\nI would like to see moving bits of processing out to well-encapsulated\nhandler modules, and would have expected such changes to have happened by\nnow.\n",
      "created_at" : "2015-07-24T05:34:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124335940",
      "id" : 124335940,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2015-07-24T05:34:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124335940",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "> You could probably perform some #include tricks to accomplish the first file movement step with equivalent hashes, if you keep ProcessMessage() intact. \r\n\r\nI was talking about doing the equivalent to that commit without moving anything first.\r\n\r\n> Once the individual code blocks move to their own functions/methods, the hashes will unavoidably differ.\r\n\r\nShouldn't ```static inline``` be enough to in practice keep the code where it was (in ProcessMessage)? \r\n\r\n> A line-by-line source code comparison tool would be better than a hash check.\r\n\r\nWe already have that with git. And by not correcting the indentation at first, the commit can be very readable (specially if the new class is not introduced). But the identical hash eliminates the need for  testing, which is nice.\r\n\r\n@sipa would you oppose to just doing the function separation in main.cpp ? That wouldn't create any circular dependencies and I believe it would help with the later modularization that you want (apart from making ProcessMessage much, much, much more readable [I don't use eclipse anymore but I believe some checkstyle plugins can segfault just by trying to analyze this function {if you first disable the typical \"too long function\" check, obviously}</bad joke>]).\r\n",
      "created_at" : "2015-07-24T13:14:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124516158",
      "id" : 124516158,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2015-07-24T13:16:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124516158",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "I'm talking about something along this lines: https://github.com/bitcoin/bitcoin/compare/bitcoin:master...jtimon:process-message-0.12.99 \r\nBut I now realize that for the build to be identical the return true; at the end of every new function should be introduced before that commit. That little preparation would also be trivial to review, but I'm not sure having an identical build commit would be a great benefit anymore...\r\n\r\nEDIT:\r\nUpdated the branch, now there's a preparation commit and a second one that I believe should result in an identical hash, so please, correct me if I'm wrong. @laanwj assuming it produces an identical hash, would that make it more mergeable or it would be better to squash it with the preparation commit from the beginning?\r\n",
      "created_at" : "2015-07-24T13:48:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124527328",
      "id" : 124527328,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2015-07-24T14:33:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124527328",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "No problem with splitting up processing.\n",
      "created_at" : "2015-07-24T14:02:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124532767",
      "id" : 124532767,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2015-07-24T14:02:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124532767",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@sipa Great, I will eventually open what I started there then, although I believe it would be good to make more things like #6163 first, so that we don't have to work more later (having to add more parameters to the new functions).\r\n\r\nThoughts on the identical build? Could https://github.com/bitcoin/bitcoin/commit/d8e5ff46d31680c1b90abb1d04a7580a2ba48888 theoretically produce an identical build? Is it worth it (given that you need a previous commit at least for the return trues)?",
      "created_at" : "2015-07-24T15:07:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124553071",
      "id" : 124553071,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2015-07-24T15:07:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124553071",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "I think that for refactors like this, you shouldn't aim for identical builds.  \r\n\r\nThe only way to achieve that is by forcing the compiler to inline things, which for such large blocks of code is probably a bad idea.",
      "created_at" : "2015-07-24T15:24:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124558026",
      "id" : 124558026,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2015-07-24T15:25:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124558026",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Thanks, @sipa that's useful. But I don't see why inlining all those new static functions is a bad idea. First, it is no worse than what we currently have, and second, the inline can be removed in a fixup! commit (to be squashed together after \"testing\", just like the preparation commit).\r\n\r\nIn any case, maybe is still not worth it, but what about doing something similar in consensus code, more concretely in EvalScript? To remind you, #5153 was considered too risky (https://github.com/bitcoin/bitcoin/pull/5153#issuecomment-60885271). ",
      "created_at" : "2015-07-25T22:16:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124905673",
      "id" : 124905673,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2015-07-26T22:00:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124905673",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "@jtimon I mean *forcing* the compiler to inline things - just putting the 'inline' keyword may not be enough for that (it may need compiler flags, for example), and even then, the order in the binary may end up being different.\r\n\r\nJust saying that IMHO that's not a good use of your time, but if you think you can make the build identical, so much the better.\r\n\r\nI'm much less concerned about changes here than in script evaluation, as getting some state/variables/processing wrong in message handling should result in immediate failure (some messages not being processed), in script evaluation it could lead to very subtle differences.",
      "created_at" : "2015-07-25T22:35:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124907691",
      "id" : 124907691,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2015-07-25T22:35:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124907691",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Basically the inlining doesn't produce any value.  It doesn't generate identical hashes.  Might as well make them separate functions/methods.\r\n",
      "created_at" : "2015-07-26T00:38:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-124922017",
      "id" : 124922017,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2015-07-26T00:38:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/124922017",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/494411?v=3",
         "events_url" : "https://api.github.com/users/jgarzik/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jgarzik/followers",
         "following_url" : "https://api.github.com/users/jgarzik/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jgarzik/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jgarzik",
         "id" : 494411,
         "login" : "jgarzik",
         "organizations_url" : "https://api.github.com/users/jgarzik/orgs",
         "received_events_url" : "https://api.github.com/users/jgarzik/received_events",
         "repos_url" : "https://api.github.com/users/jgarzik/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jgarzik/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jgarzik"
      }
   },
   {
      "body" : "Thank you very much both of you: this is very helpful.\r\nWhen (if nobody does it before me) I reopen the discussed subset of this PR, I will forget about the identical build. I guess I was too much worried about reusing the IsIdenticalBuild tool for  https://github.com/bitcoin/bitcoin/pull/5153#issuecomment-60885271 , but this seems definitely less risky and more of a priority. \r\n\r\nBut, as said, I would like to see more of those ```Params()``` disappear, and some of those ```const CChainParams&``` and ```const CPolicy&``` moving up first.\r\nThe most current and finished thing I have on this will be in https://github.com/jtimon/bitcoin/commits/process-message-0.12.99 until I open it as a PR in case you want to take a look or cherry pick for finishing.",
      "created_at" : "2015-07-26T22:14:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/4646#issuecomment-125044361",
      "id" : 125044361,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/4646",
      "updated_at" : "2015-07-26T22:14:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/125044361",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   }
]
