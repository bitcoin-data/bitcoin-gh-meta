[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r885064314"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/885064314"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure if this is me being pedantic, but I don't think we're really testing \"default mempool parameters\" if we're configuring the node to `acceptnonstdtxn`. Is there a good reason we need to set this?",
      "commit_id" : "9b825e7eab9e0e642e5014d5c2d94a119037b156",
      "created_at" : "2022-05-30T20:20:34Z",
      "diff_hunk" : "@@ -42,6 +42,10 @@ def set_test_params(self):\n                 \"-limitdescendantcount=200\",\n                 \"-limitdescendantsize=101\",\n             ],\n+            # second node has default mempool parameters\n+            [\n+                \"-acceptnonstdtxn=1\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r885064314",
      "id" : 885064314,
      "line" : 47,
      "node_id" : "PRRC_kwDOABII5840wQJ6",
      "original_commit_id" : "9b825e7eab9e0e642e5014d5c2d94a119037b156",
      "original_line" : 47,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : 15,
      "pull_request_review_id" : 989663536,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/885064314/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-30T20:22:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/885064314",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r885215565"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/885215565"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think the only reason this needs to accept nonstd txs is because there's some left over txs in node 0's mempool from earlier tests, which results in syncing mempools failing when you try to mine a block with node 1. Doing:\r\n\r\n```diff\r\n+        #clear the mempools\r\n+        self.generate(self.nodes[0], 1)\r\n+\r\n         normal_node = self.nodes[1]\r\n         wallet = MiniWallet(normal_node)\r\n         wallet.rescan_utxos()            \r\n```\r\n\r\nLooks to me like it lets you drop the `-acceptnonstdtxn=1`.",
      "commit_id" : "9b825e7eab9e0e642e5014d5c2d94a119037b156",
      "created_at" : "2022-05-31T05:29:04Z",
      "diff_hunk" : "@@ -42,6 +42,10 @@ def set_test_params(self):\n                 \"-limitdescendantcount=200\",\n                 \"-limitdescendantsize=101\",\n             ],\n+            # second node has default mempool parameters\n+            [\n+                \"-acceptnonstdtxn=1\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r885215565",
      "id" : 885215565,
      "in_reply_to_id" : 885064314,
      "line" : 47,
      "node_id" : "PRRC_kwDOABII5840w1FN",
      "original_commit_id" : "9b825e7eab9e0e642e5014d5c2d94a119037b156",
      "original_line" : 47,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : 15,
      "pull_request_review_id" : 989854825,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/885215565/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-31T05:29:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/885215565",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2022-05-31T10:36:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25228#issuecomment-1141964437",
      "id" : 1141964437,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25228",
      "node_id" : "IC_kwDOABII585EEP6V",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1141964437/reactions"
      },
      "updated_at" : "2022-05-31T10:36:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1141964437",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r885618200"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/885618200"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good call @glozow @ajtowns, willfix.",
      "commit_id" : "fd564f3460e5c90a84ae64d64070ec3f0f15f5e2",
      "created_at" : "2022-05-31T13:10:24Z",
      "diff_hunk" : "@@ -42,6 +42,10 @@ def set_test_params(self):\n                 \"-limitdescendantcount=200\",\n                 \"-limitdescendantsize=101\",\n             ],\n+            # second node has default mempool parameters\n+            [\n+                \"-acceptnonstdtxn=1\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r885618200",
      "id" : 885618200,
      "in_reply_to_id" : 885064314,
      "line" : null,
      "node_id" : "PRRC_kwDOABII5840yXYY",
      "original_commit_id" : "9b825e7eab9e0e642e5014d5c2d94a119037b156",
      "original_line" : 47,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : null,
      "pull_request_review_id" : 990420371,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/885618200/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-31T13:10:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/885618200",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2022-06-01T07:06:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25228#issuecomment-1143197061",
      "id" : 1143197061,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25228",
      "node_id" : "IC_kwDOABII585EI82F",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1143197061/reactions"
      },
      "updated_at" : "2022-06-01T07:06:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1143197061",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3072149?v=4",
         "events_url" : "https://api.github.com/users/dunxen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dunxen/followers",
         "following_url" : "https://api.github.com/users/dunxen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dunxen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dunxen",
         "id" : 3072149,
         "login" : "dunxen",
         "node_id" : "MDQ6VXNlcjMwNzIxNDk=",
         "organizations_url" : "https://api.github.com/users/dunxen/orgs",
         "received_events_url" : "https://api.github.com/users/dunxen/received_events",
         "repos_url" : "https://api.github.com/users/dunxen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dunxen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dunxen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dunxen"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. What do you think about also removing the test that uses the non-standard mempool config?",
      "created_at" : "2022-06-01T17:20:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25228#issuecomment-1143904356",
      "id" : 1143904356,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25228",
      "node_id" : "IC_kwDOABII585ELphk",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1143904356/reactions"
      },
      "updated_at" : "2022-06-01T17:20:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1143904356",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r887153076"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887153076"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "small nit: you can avoid setting the sequence number here (the default works as well, `double_tx` doesn't need to be replaced), but if you want to leave it like that it's fine :) ",
      "commit_id" : "fd564f3460e5c90a84ae64d64070ec3f0f15f5e2",
      "created_at" : "2022-06-01T18:02:49Z",
      "diff_hunk" : "@@ -397,6 +403,95 @@ def test_too_many_replacements(self):\n         double_tx_hex = double_tx.serialize().hex()\n         self.nodes[0].sendrawtransaction(double_tx_hex, 0)\n \n+    def test_too_many_replacements_with_default_mempool_params(self):\n+        \"\"\"\n+        Test rule 5 of BIP125 (do not allow replacements that cause more than 100\n+        evictions) without having to rely on non-default mempool parameters.\n+\n+        In order to do this, create a number of \"root\" UTXOs, and then hang\n+        enough transactions off of each root UTXO to exceed the MAX_REPLACEMENT_LIMIT.\n+        Then create a conflicting RBF replacement transaction.\n+        \"\"\"\n+        normal_node = self.nodes[1]\n+        wallet = MiniWallet(normal_node)\n+        wallet.rescan_utxos()\n+        # Clear mempools to avoid cross-node sync failure.\n+        for node in self.nodes:\n+            self.generate(node, 1)\n+\n+        # This has to be chosen so that the total number of transactions can exceed\n+        # MAX_REPLACEMENT_LIMIT without having any one tx graph run into the descendant\n+        # limit; 10 works.\n+        num_tx_graphs = 10\n+\n+        # (Number of transactions per graph, BIP125 rule 5 failure expected)\n+        cases = [\n+            # Test the base case of evicting fewer than MAX_REPLACEMENT_LIMIT\n+            # transactions.\n+            ((MAX_REPLACEMENT_LIMIT // num_tx_graphs) - 1, False),\n+\n+            # Test hitting the rule 5 eviction limit.\n+            (MAX_REPLACEMENT_LIMIT // num_tx_graphs, True),\n+        ]\n+\n+        for (txs_per_graph, failure_expected) in cases:\n+            self.log.debug(f\"txs_per_graph: {txs_per_graph}, failure: {failure_expected}\")\n+            # \"Root\" utxos of each txn graph that we will attempt to double-spend with\n+            # an RBF replacement.\n+            root_utxos = []\n+\n+            # For each root UTXO, create a package that contains the spend of that\n+            # UTXO and `txs_per_graph` children tx.\n+            for graph_num in range(num_tx_graphs):\n+                root_utxos.append(wallet.get_utxo())\n+\n+                optin_parent_tx = wallet.send_self_transfer_multi(\n+                    from_node=normal_node,\n+                    sequence=BIP125_SEQUENCE_NUMBER,\n+                    utxos_to_spend=[root_utxos[graph_num]],\n+                    num_outputs=txs_per_graph,\n+                )\n+                assert_equal(True, normal_node.getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])\n+                new_utxos = optin_parent_tx['new_utxos']\n+\n+                for utxo in new_utxos:\n+                    # Create spends for each output from the \"root\" of this graph.\n+                    child_tx = wallet.send_self_transfer(\n+                        from_node=normal_node,\n+                        utxo_to_spend=utxo,\n+                    )\n+\n+                    assert normal_node.getmempoolentry(child_tx['txid'])\n+\n+            num_txs_invalidated = len(root_utxos) + (num_tx_graphs * txs_per_graph)\n+\n+            if failure_expected:\n+                assert num_txs_invalidated > MAX_REPLACEMENT_LIMIT\n+            else:\n+                assert num_txs_invalidated <= MAX_REPLACEMENT_LIMIT\n+\n+            # Now attempt to submit a tx that double-spends all the root tx inputs, which\n+            # would invalidate `num_txs_invalidated` transactions.\n+            double_tx = wallet.create_self_transfer_multi(\n+                from_node=normal_node,\n+                sequence=BIP125_SEQUENCE_NUMBER,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r887153076",
      "id" : 887153076,
      "line" : 477,
      "node_id" : "PRRC_kwDOABII58404OG0",
      "original_commit_id" : "fd564f3460e5c90a84ae64d64070ec3f0f15f5e2",
      "original_line" : 477,
      "original_position" : 104,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : 104,
      "pull_request_review_id" : 992474347,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887153076/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-01T18:07:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/887153076",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25042473?v=4",
         "events_url" : "https://api.github.com/users/danielabrozzoni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/danielabrozzoni/followers",
         "following_url" : "https://api.github.com/users/danielabrozzoni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/danielabrozzoni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/danielabrozzoni",
         "id" : 25042473,
         "login" : "danielabrozzoni",
         "node_id" : "MDQ6VXNlcjI1MDQyNDcz",
         "organizations_url" : "https://api.github.com/users/danielabrozzoni/orgs",
         "received_events_url" : "https://api.github.com/users/danielabrozzoni/received_events",
         "repos_url" : "https://api.github.com/users/danielabrozzoni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/danielabrozzoni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/danielabrozzoni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/danielabrozzoni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r888018215"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888018215"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed, thanks.",
      "commit_id" : "687addaf136356e0f3698d6345c92d875e0a3362",
      "created_at" : "2022-06-02T14:28:58Z",
      "diff_hunk" : "@@ -397,6 +403,95 @@ def test_too_many_replacements(self):\n         double_tx_hex = double_tx.serialize().hex()\n         self.nodes[0].sendrawtransaction(double_tx_hex, 0)\n \n+    def test_too_many_replacements_with_default_mempool_params(self):\n+        \"\"\"\n+        Test rule 5 of BIP125 (do not allow replacements that cause more than 100\n+        evictions) without having to rely on non-default mempool parameters.\n+\n+        In order to do this, create a number of \"root\" UTXOs, and then hang\n+        enough transactions off of each root UTXO to exceed the MAX_REPLACEMENT_LIMIT.\n+        Then create a conflicting RBF replacement transaction.\n+        \"\"\"\n+        normal_node = self.nodes[1]\n+        wallet = MiniWallet(normal_node)\n+        wallet.rescan_utxos()\n+        # Clear mempools to avoid cross-node sync failure.\n+        for node in self.nodes:\n+            self.generate(node, 1)\n+\n+        # This has to be chosen so that the total number of transactions can exceed\n+        # MAX_REPLACEMENT_LIMIT without having any one tx graph run into the descendant\n+        # limit; 10 works.\n+        num_tx_graphs = 10\n+\n+        # (Number of transactions per graph, BIP125 rule 5 failure expected)\n+        cases = [\n+            # Test the base case of evicting fewer than MAX_REPLACEMENT_LIMIT\n+            # transactions.\n+            ((MAX_REPLACEMENT_LIMIT // num_tx_graphs) - 1, False),\n+\n+            # Test hitting the rule 5 eviction limit.\n+            (MAX_REPLACEMENT_LIMIT // num_tx_graphs, True),\n+        ]\n+\n+        for (txs_per_graph, failure_expected) in cases:\n+            self.log.debug(f\"txs_per_graph: {txs_per_graph}, failure: {failure_expected}\")\n+            # \"Root\" utxos of each txn graph that we will attempt to double-spend with\n+            # an RBF replacement.\n+            root_utxos = []\n+\n+            # For each root UTXO, create a package that contains the spend of that\n+            # UTXO and `txs_per_graph` children tx.\n+            for graph_num in range(num_tx_graphs):\n+                root_utxos.append(wallet.get_utxo())\n+\n+                optin_parent_tx = wallet.send_self_transfer_multi(\n+                    from_node=normal_node,\n+                    sequence=BIP125_SEQUENCE_NUMBER,\n+                    utxos_to_spend=[root_utxos[graph_num]],\n+                    num_outputs=txs_per_graph,\n+                )\n+                assert_equal(True, normal_node.getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])\n+                new_utxos = optin_parent_tx['new_utxos']\n+\n+                for utxo in new_utxos:\n+                    # Create spends for each output from the \"root\" of this graph.\n+                    child_tx = wallet.send_self_transfer(\n+                        from_node=normal_node,\n+                        utxo_to_spend=utxo,\n+                    )\n+\n+                    assert normal_node.getmempoolentry(child_tx['txid'])\n+\n+            num_txs_invalidated = len(root_utxos) + (num_tx_graphs * txs_per_graph)\n+\n+            if failure_expected:\n+                assert num_txs_invalidated > MAX_REPLACEMENT_LIMIT\n+            else:\n+                assert num_txs_invalidated <= MAX_REPLACEMENT_LIMIT\n+\n+            # Now attempt to submit a tx that double-spends all the root tx inputs, which\n+            # would invalidate `num_txs_invalidated` transactions.\n+            double_tx = wallet.create_self_transfer_multi(\n+                from_node=normal_node,\n+                sequence=BIP125_SEQUENCE_NUMBER,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r888018215",
      "id" : 888018215,
      "in_reply_to_id" : 887153076,
      "line" : null,
      "node_id" : "PRRC_kwDOABII58407hUn",
      "original_commit_id" : "fd564f3460e5c90a84ae64d64070ec3f0f15f5e2",
      "original_line" : 477,
      "original_position" : 104,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : null,
      "pull_request_review_id" : 993636695,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888018215/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-02T14:28:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888018215",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Concept ACK. What do you think about also removing the test that uses the non-standard mempool config?\r\n\r\nPersonally I don't think it hurts to have the coverage - the test seems to run pretty fast - but I _did_ think it'd be interesting to add another test case with default params that uses a different (simpler) topology, which could just be uniting >125 individual txns.\r\n\r\nEdit: but IMO might as well just merge this and get the coverage, then think about adding more cases later.",
      "created_at" : "2022-06-02T14:30:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25228#issuecomment-1144934957",
      "id" : 1144934957,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25228",
      "node_id" : "IC_kwDOABII585EPlIt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1144934957/reactions"
      },
      "updated_at" : "2022-06-02T14:31:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1144934957",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r888459178"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888459178"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This PR doesn't seem to require this change, does it? If not, could you mention that in the commit message? That would help reviewers.",
      "commit_id" : "687addaf136356e0f3698d6345c92d875e0a3362",
      "created_at" : "2022-06-02T22:27:53Z",
      "diff_hunk" : "@@ -147,7 +148,7 @@ def get_descriptor(self):\n     def get_address(self):\n         return self._address\n \n-    def get_utxo(self, *, txid: str = '', vout: Optional[int] = None, mark_as_spent=True):\n+    def get_utxo(self, *, txid: str = '', vout: Optional[int] = None, mark_as_spent=True) -> dict:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r888459178",
      "id" : 888459178,
      "line" : 151,
      "node_id" : "PRRC_kwDOABII58409M-q",
      "original_commit_id" : "687addaf136356e0f3698d6345c92d875e0a3362",
      "original_line" : 151,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/wallet.py",
      "position" : 13,
      "pull_request_review_id" : 994254386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888459178/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-02T22:48:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888459178",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r888459650"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888459650"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Same comment, this doesn't seem required; could you mention that in the commit comment?",
      "commit_id" : "687addaf136356e0f3698d6345c92d875e0a3362",
      "created_at" : "2022-06-02T22:29:01Z",
      "diff_hunk" : "@@ -208,14 +209,21 @@ def send_self_transfer_multi(self, **kwargs):\n         return {'new_utxos': [self.get_utxo(txid=txid, vout=vout) for vout in range(len(tx.vout))],\n                 'txid': txid, 'hex': tx.serialize().hex(), 'tx': tx}\n \n-    def create_self_transfer_multi(self, *, from_node, utxos_to_spend=None, num_outputs=1, fee_per_output=1000):\n+    def create_self_transfer_multi(\n+            self, *, from_node,\n+            utxos_to_spend: Optional[List[dict]] = None,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r888459650",
      "id" : 888459650,
      "line" : 214,
      "node_id" : "PRRC_kwDOABII58409NGC",
      "original_commit_id" : "687addaf136356e0f3698d6345c92d875e0a3362",
      "original_line" : 214,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/wallet.py",
      "position" : 24,
      "pull_request_review_id" : 994254386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888459650/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-02T22:48:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888459650",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r888460379"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888460379"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n                utxo_parent_spend = wallet.get_utxo()\r\n                root_utxos.append(utxo_parent_spend)\r\n```\r\nso that code below is simpler",
      "commit_id" : "687addaf136356e0f3698d6345c92d875e0a3362",
      "created_at" : "2022-06-02T22:30:44Z",
      "diff_hunk" : "@@ -397,6 +403,94 @@ def test_too_many_replacements(self):\n         double_tx_hex = double_tx.serialize().hex()\n         self.nodes[0].sendrawtransaction(double_tx_hex, 0)\n \n+    def test_too_many_replacements_with_default_mempool_params(self):\n+        \"\"\"\n+        Test rule 5 of BIP125 (do not allow replacements that cause more than 100\n+        evictions) without having to rely on non-default mempool parameters.\n+\n+        In order to do this, create a number of \"root\" UTXOs, and then hang\n+        enough transactions off of each root UTXO to exceed the MAX_REPLACEMENT_LIMIT.\n+        Then create a conflicting RBF replacement transaction.\n+        \"\"\"\n+        normal_node = self.nodes[1]\n+        wallet = MiniWallet(normal_node)\n+        wallet.rescan_utxos()\n+        # Clear mempools to avoid cross-node sync failure.\n+        for node in self.nodes:\n+            self.generate(node, 1)\n+\n+        # This has to be chosen so that the total number of transactions can exceed\n+        # MAX_REPLACEMENT_LIMIT without having any one tx graph run into the descendant\n+        # limit; 10 works.\n+        num_tx_graphs = 10\n+\n+        # (Number of transactions per graph, BIP125 rule 5 failure expected)\n+        cases = [\n+            # Test the base case of evicting fewer than MAX_REPLACEMENT_LIMIT\n+            # transactions.\n+            ((MAX_REPLACEMENT_LIMIT // num_tx_graphs) - 1, False),\n+\n+            # Test hitting the rule 5 eviction limit.\n+            (MAX_REPLACEMENT_LIMIT // num_tx_graphs, True),\n+        ]\n+\n+        for (txs_per_graph, failure_expected) in cases:\n+            self.log.debug(f\"txs_per_graph: {txs_per_graph}, failure: {failure_expected}\")\n+            # \"Root\" utxos of each txn graph that we will attempt to double-spend with\n+            # an RBF replacement.\n+            root_utxos = []\n+\n+            # For each root UTXO, create a package that contains the spend of that\n+            # UTXO and `txs_per_graph` children tx.\n+            for graph_num in range(num_tx_graphs):\n+                root_utxos.append(wallet.get_utxo())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r888460379",
      "id" : 888460379,
      "line" : 446,
      "node_id" : "PRRC_kwDOABII58409NRb",
      "original_commit_id" : "687addaf136356e0f3698d6345c92d875e0a3362",
      "original_line" : 446,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : 73,
      "pull_request_review_id" : 994254386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888460379/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-02T22:48:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888460379",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r888462312"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888462312"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n                    utxos_to_spend=[utxo_parent_spend],\r\n```\r\nnit, slight readability improvement; I had to stare at the original for a while, the nested braces made me think at first it was some kind of double-nested index lookup! (Maybe it's just me.)",
      "commit_id" : "687addaf136356e0f3698d6345c92d875e0a3362",
      "created_at" : "2022-06-02T22:35:02Z",
      "diff_hunk" : "@@ -397,6 +403,94 @@ def test_too_many_replacements(self):\n         double_tx_hex = double_tx.serialize().hex()\n         self.nodes[0].sendrawtransaction(double_tx_hex, 0)\n \n+    def test_too_many_replacements_with_default_mempool_params(self):\n+        \"\"\"\n+        Test rule 5 of BIP125 (do not allow replacements that cause more than 100\n+        evictions) without having to rely on non-default mempool parameters.\n+\n+        In order to do this, create a number of \"root\" UTXOs, and then hang\n+        enough transactions off of each root UTXO to exceed the MAX_REPLACEMENT_LIMIT.\n+        Then create a conflicting RBF replacement transaction.\n+        \"\"\"\n+        normal_node = self.nodes[1]\n+        wallet = MiniWallet(normal_node)\n+        wallet.rescan_utxos()\n+        # Clear mempools to avoid cross-node sync failure.\n+        for node in self.nodes:\n+            self.generate(node, 1)\n+\n+        # This has to be chosen so that the total number of transactions can exceed\n+        # MAX_REPLACEMENT_LIMIT without having any one tx graph run into the descendant\n+        # limit; 10 works.\n+        num_tx_graphs = 10\n+\n+        # (Number of transactions per graph, BIP125 rule 5 failure expected)\n+        cases = [\n+            # Test the base case of evicting fewer than MAX_REPLACEMENT_LIMIT\n+            # transactions.\n+            ((MAX_REPLACEMENT_LIMIT // num_tx_graphs) - 1, False),\n+\n+            # Test hitting the rule 5 eviction limit.\n+            (MAX_REPLACEMENT_LIMIT // num_tx_graphs, True),\n+        ]\n+\n+        for (txs_per_graph, failure_expected) in cases:\n+            self.log.debug(f\"txs_per_graph: {txs_per_graph}, failure: {failure_expected}\")\n+            # \"Root\" utxos of each txn graph that we will attempt to double-spend with\n+            # an RBF replacement.\n+            root_utxos = []\n+\n+            # For each root UTXO, create a package that contains the spend of that\n+            # UTXO and `txs_per_graph` children tx.\n+            for graph_num in range(num_tx_graphs):\n+                root_utxos.append(wallet.get_utxo())\n+\n+                optin_parent_tx = wallet.send_self_transfer_multi(\n+                    from_node=normal_node,\n+                    sequence=BIP125_SEQUENCE_NUMBER,\n+                    utxos_to_spend=[root_utxos[graph_num]],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r888462312",
      "id" : 888462312,
      "line" : 451,
      "node_id" : "PRRC_kwDOABII58409Nvo",
      "original_commit_id" : "687addaf136356e0f3698d6345c92d875e0a3362",
      "original_line" : 451,
      "original_position" : 78,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : 78,
      "pull_request_review_id" : 994254386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888462312/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-02T22:48:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888462312",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r888462983"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888462983"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n            num_txs_to_invalidate = len(root_utxos) + (num_tx_graphs * txs_per_graph)\r\n```\r\nnit variable rename, they're not invalided yet",
      "commit_id" : "687addaf136356e0f3698d6345c92d875e0a3362",
      "created_at" : "2022-06-02T22:36:36Z",
      "diff_hunk" : "@@ -397,6 +403,94 @@ def test_too_many_replacements(self):\n         double_tx_hex = double_tx.serialize().hex()\n         self.nodes[0].sendrawtransaction(double_tx_hex, 0)\n \n+    def test_too_many_replacements_with_default_mempool_params(self):\n+        \"\"\"\n+        Test rule 5 of BIP125 (do not allow replacements that cause more than 100\n+        evictions) without having to rely on non-default mempool parameters.\n+\n+        In order to do this, create a number of \"root\" UTXOs, and then hang\n+        enough transactions off of each root UTXO to exceed the MAX_REPLACEMENT_LIMIT.\n+        Then create a conflicting RBF replacement transaction.\n+        \"\"\"\n+        normal_node = self.nodes[1]\n+        wallet = MiniWallet(normal_node)\n+        wallet.rescan_utxos()\n+        # Clear mempools to avoid cross-node sync failure.\n+        for node in self.nodes:\n+            self.generate(node, 1)\n+\n+        # This has to be chosen so that the total number of transactions can exceed\n+        # MAX_REPLACEMENT_LIMIT without having any one tx graph run into the descendant\n+        # limit; 10 works.\n+        num_tx_graphs = 10\n+\n+        # (Number of transactions per graph, BIP125 rule 5 failure expected)\n+        cases = [\n+            # Test the base case of evicting fewer than MAX_REPLACEMENT_LIMIT\n+            # transactions.\n+            ((MAX_REPLACEMENT_LIMIT // num_tx_graphs) - 1, False),\n+\n+            # Test hitting the rule 5 eviction limit.\n+            (MAX_REPLACEMENT_LIMIT // num_tx_graphs, True),\n+        ]\n+\n+        for (txs_per_graph, failure_expected) in cases:\n+            self.log.debug(f\"txs_per_graph: {txs_per_graph}, failure: {failure_expected}\")\n+            # \"Root\" utxos of each txn graph that we will attempt to double-spend with\n+            # an RBF replacement.\n+            root_utxos = []\n+\n+            # For each root UTXO, create a package that contains the spend of that\n+            # UTXO and `txs_per_graph` children tx.\n+            for graph_num in range(num_tx_graphs):\n+                root_utxos.append(wallet.get_utxo())\n+\n+                optin_parent_tx = wallet.send_self_transfer_multi(\n+                    from_node=normal_node,\n+                    sequence=BIP125_SEQUENCE_NUMBER,\n+                    utxos_to_spend=[root_utxos[graph_num]],\n+                    num_outputs=txs_per_graph,\n+                )\n+                assert_equal(True, normal_node.getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])\n+                new_utxos = optin_parent_tx['new_utxos']\n+\n+                for utxo in new_utxos:\n+                    # Create spends for each output from the \"root\" of this graph.\n+                    child_tx = wallet.send_self_transfer(\n+                        from_node=normal_node,\n+                        utxo_to_spend=utxo,\n+                    )\n+\n+                    assert normal_node.getmempoolentry(child_tx['txid'])\n+\n+            num_txs_invalidated = len(root_utxos) + (num_tx_graphs * txs_per_graph)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r888462983",
      "id" : 888462983,
      "line" : 466,
      "node_id" : "PRRC_kwDOABII58409N6H",
      "original_commit_id" : "687addaf136356e0f3698d6345c92d875e0a3362",
      "original_line" : 466,
      "original_position" : 93,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : 93,
      "pull_request_review_id" : 994254386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888462983/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-02T22:48:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888462983",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r888463747"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888463747"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "maybe add here (but requires a change below):\r\n```\r\n            assert_equal(num_txs_to_invalidate, normal_node.getmempoolinfo()['size'])\r\n```",
      "commit_id" : "687addaf136356e0f3698d6345c92d875e0a3362",
      "created_at" : "2022-06-02T22:38:27Z",
      "diff_hunk" : "@@ -397,6 +403,94 @@ def test_too_many_replacements(self):\n         double_tx_hex = double_tx.serialize().hex()\n         self.nodes[0].sendrawtransaction(double_tx_hex, 0)\n \n+    def test_too_many_replacements_with_default_mempool_params(self):\n+        \"\"\"\n+        Test rule 5 of BIP125 (do not allow replacements that cause more than 100\n+        evictions) without having to rely on non-default mempool parameters.\n+\n+        In order to do this, create a number of \"root\" UTXOs, and then hang\n+        enough transactions off of each root UTXO to exceed the MAX_REPLACEMENT_LIMIT.\n+        Then create a conflicting RBF replacement transaction.\n+        \"\"\"\n+        normal_node = self.nodes[1]\n+        wallet = MiniWallet(normal_node)\n+        wallet.rescan_utxos()\n+        # Clear mempools to avoid cross-node sync failure.\n+        for node in self.nodes:\n+            self.generate(node, 1)\n+\n+        # This has to be chosen so that the total number of transactions can exceed\n+        # MAX_REPLACEMENT_LIMIT without having any one tx graph run into the descendant\n+        # limit; 10 works.\n+        num_tx_graphs = 10\n+\n+        # (Number of transactions per graph, BIP125 rule 5 failure expected)\n+        cases = [\n+            # Test the base case of evicting fewer than MAX_REPLACEMENT_LIMIT\n+            # transactions.\n+            ((MAX_REPLACEMENT_LIMIT // num_tx_graphs) - 1, False),\n+\n+            # Test hitting the rule 5 eviction limit.\n+            (MAX_REPLACEMENT_LIMIT // num_tx_graphs, True),\n+        ]\n+\n+        for (txs_per_graph, failure_expected) in cases:\n+            self.log.debug(f\"txs_per_graph: {txs_per_graph}, failure: {failure_expected}\")\n+            # \"Root\" utxos of each txn graph that we will attempt to double-spend with\n+            # an RBF replacement.\n+            root_utxos = []\n+\n+            # For each root UTXO, create a package that contains the spend of that\n+            # UTXO and `txs_per_graph` children tx.\n+            for graph_num in range(num_tx_graphs):\n+                root_utxos.append(wallet.get_utxo())\n+\n+                optin_parent_tx = wallet.send_self_transfer_multi(\n+                    from_node=normal_node,\n+                    sequence=BIP125_SEQUENCE_NUMBER,\n+                    utxos_to_spend=[root_utxos[graph_num]],\n+                    num_outputs=txs_per_graph,\n+                )\n+                assert_equal(True, normal_node.getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])\n+                new_utxos = optin_parent_tx['new_utxos']\n+\n+                for utxo in new_utxos:\n+                    # Create spends for each output from the \"root\" of this graph.\n+                    child_tx = wallet.send_self_transfer(\n+                        from_node=normal_node,\n+                        utxo_to_spend=utxo,\n+                    )\n+\n+                    assert normal_node.getmempoolentry(child_tx['txid'])\n+\n+            num_txs_invalidated = len(root_utxos) + (num_tx_graphs * txs_per_graph)\n+\n+            if failure_expected:\n+                assert num_txs_invalidated > MAX_REPLACEMENT_LIMIT\n+            else:\n+                assert num_txs_invalidated <= MAX_REPLACEMENT_LIMIT\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r888463747",
      "id" : 888463747,
      "line" : 472,
      "node_id" : "PRRC_kwDOABII58409OGD",
      "original_commit_id" : "687addaf136356e0f3698d6345c92d875e0a3362",
      "original_line" : 472,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "test/functional/feature_rbf.py",
      "position" : 99,
      "pull_request_review_id" : 994254386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888463747/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-06-02T22:48:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888463747",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r888465328"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888465328"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n                # The replacement tx should have been accepted into the mempool and it\r\n                # should be the only tx in the mempool (having replaced all others).\r\n                txid = normal_node.sendrawtransaction(tx_hex, 0)\r\n                assert normal_node.getmempoolentry(txid)\r\n                assert_equal(normal_node.getmempoolinfo()['size'], 1)\r\n```\r\nnit, just to clarify what is going on (would have helped me review), however the new assertion requires a change below.",
      "commit_id" : "687addaf136356e0f3698d6345c92d875e0a3362",
      "created_at" : "2022-06-02T22:41:58Z",
      "diff_hunk" : "@@ -397,6 +403,94 @@ def test_too_many_replacements(self):\n         double_tx_hex = double_tx.serialize().hex()\n         self.nodes[0].sendrawtransaction(double_tx_hex, 0)\n \n+    def test_too_many_replacements_with_default_mempool_params(self):\n+        \"\"\"\n+        Test rule 5 of BIP125 (do not allow replacements that cause more than 100\n+        evictions) without having to rely on non-default mempool parameters.\n+\n+        In order to do this, create a number of \"root\" UTXOs, and then hang\n+        enough transactions off of each root UTXO to exceed the MAX_REPLACEMENT_LIMIT.\n+        Then create a conflicting RBF replacement transaction.\n+        \"\"\"\n+        normal_node = self.nodes[1]\n+        wallet = MiniWallet(normal_node)\n+        wallet.rescan_utxos()\n+        # Clear mempools to avoid cross-node sync failure.\n+        for node in self.nodes:\n+            self.generate(node, 1)\n+\n+        # This has to be chosen so that the total number of transactions can exceed\n+        # MAX_REPLACEMENT_LIMIT without having any one tx graph run into the descendant\n+        # limit; 10 works.\n+        num_tx_graphs = 10\n+\n+        # (Number of transactions per graph, BIP125 rule 5 failure expected)\n+        cases = [\n+            # Test the base case of evicting fewer than MAX_REPLACEMENT_LIMIT\n+            # transactions.\n+            ((MAX_REPLACEMENT_LIMIT // num_tx_graphs) - 1, False),\n+\n+            # Test hitting the rule 5 eviction limit.\n+            (MAX_REPLACEMENT_LIMIT // num_tx_graphs, True),\n+        ]\n+\n+        for (txs_per_graph, failure_expected) in cases:\n+            self.log.debug(f\"txs_per_graph: {txs_per_graph}, failure: {failure_expected}\")\n+            # \"Root\" utxos of each txn graph that we will attempt to double-spend with\n+            # an RBF replacement.\n+            root_utxos = []\n+\n+            # For each root UTXO, create a package that contains the spend of that\n+            # UTXO and `txs_per_graph` children tx.\n+            for graph_num in range(num_tx_graphs):\n+                root_utxos.append(wallet.get_utxo())\n+\n+                optin_parent_tx = wallet.send_self_transfer_multi(\n+                    from_node=normal_node,\n+                    sequence=BIP125_SEQUENCE_NUMBER,\n+                    utxos_to_spend=[root_utxos[graph_num]],\n+                    num_outputs=txs_per_graph,\n+                )\n+                assert_equal(True, normal_node.getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])\n+                new_utxos = optin_parent_tx['new_utxos']\n+\n+                for utxo in new_utxos:\n+                    # Create spends for each output from the \"root\" of this graph.\n+                    child_tx = wallet.send_self_transfer(\n+                        from_node=normal_node,\n+                        utxo_to_spend=utxo,\n+                    )\n+\n+                    assert normal_node.getmempoolentry(child_tx['txid'])\n+\n+            num_txs_invalidated = len(root_utxos) + (num_tx_graphs * txs_per_graph)\n+\n+            if failure_expected:\n+                assert num_txs_invalidated > MAX_REPLACEMENT_LIMIT\n+            else:\n+                assert num_txs_invalidated <= MAX_REPLACEMENT_LIMIT\n+\n+            # Now attempt to submit a tx that double-spends all the root tx inputs, which\n+            # would invalidate `num_txs_invalidated` transactions.\n+            double_tx = wallet.create_self_transfer_multi(\n+                from_node=normal_node,\n+                utxos_to_spend=root_utxos,\n+                fee_per_output=10_000_000,  # absurdly high feerate\n+            )\n+            tx_hex = double_tx.serialize().hex()\n+\n+            if failure_expected:\n+                assert_raises_rpc_error(\n+                    -26, \"too many potential replacements\", normal_node.sendrawtransaction, tx_hex, 0)\n+            else:\n+                txid = normal_node.sendrawtransaction(tx_hex, 0)\n+                assert normal_node.getmempoolentry(txid)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r888465328",
      "id" : 888465328,
      "line" : 487,
      "node_id" : "PRRC_kwDOABII58409Oew",
      "original_commit_id" : "687addaf136356e0f3698d6345c92d875e0a3362",
      "original_line" : 487,
      "original_position" : 114,
      "original_start_line" : 486,
      "path" : "test/functional/feature_rbf.py",
      "position" : 114,
      "pull_request_review_id" : 994254386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888465328/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 486,
      "start_side" : "RIGHT",
      "updated_at" : "2022-06-02T22:48:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888465328",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r888466244"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888466244"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Indent these lines so the mempool gets cleared out at the end of each test case. Needed only if the assertions I recommended above are taken.",
      "commit_id" : "687addaf136356e0f3698d6345c92d875e0a3362",
      "created_at" : "2022-06-02T22:44:01Z",
      "diff_hunk" : "@@ -397,6 +403,94 @@ def test_too_many_replacements(self):\n         double_tx_hex = double_tx.serialize().hex()\n         self.nodes[0].sendrawtransaction(double_tx_hex, 0)\n \n+    def test_too_many_replacements_with_default_mempool_params(self):\n+        \"\"\"\n+        Test rule 5 of BIP125 (do not allow replacements that cause more than 100\n+        evictions) without having to rely on non-default mempool parameters.\n+\n+        In order to do this, create a number of \"root\" UTXOs, and then hang\n+        enough transactions off of each root UTXO to exceed the MAX_REPLACEMENT_LIMIT.\n+        Then create a conflicting RBF replacement transaction.\n+        \"\"\"\n+        normal_node = self.nodes[1]\n+        wallet = MiniWallet(normal_node)\n+        wallet.rescan_utxos()\n+        # Clear mempools to avoid cross-node sync failure.\n+        for node in self.nodes:\n+            self.generate(node, 1)\n+\n+        # This has to be chosen so that the total number of transactions can exceed\n+        # MAX_REPLACEMENT_LIMIT without having any one tx graph run into the descendant\n+        # limit; 10 works.\n+        num_tx_graphs = 10\n+\n+        # (Number of transactions per graph, BIP125 rule 5 failure expected)\n+        cases = [\n+            # Test the base case of evicting fewer than MAX_REPLACEMENT_LIMIT\n+            # transactions.\n+            ((MAX_REPLACEMENT_LIMIT // num_tx_graphs) - 1, False),\n+\n+            # Test hitting the rule 5 eviction limit.\n+            (MAX_REPLACEMENT_LIMIT // num_tx_graphs, True),\n+        ]\n+\n+        for (txs_per_graph, failure_expected) in cases:\n+            self.log.debug(f\"txs_per_graph: {txs_per_graph}, failure: {failure_expected}\")\n+            # \"Root\" utxos of each txn graph that we will attempt to double-spend with\n+            # an RBF replacement.\n+            root_utxos = []\n+\n+            # For each root UTXO, create a package that contains the spend of that\n+            # UTXO and `txs_per_graph` children tx.\n+            for graph_num in range(num_tx_graphs):\n+                root_utxos.append(wallet.get_utxo())\n+\n+                optin_parent_tx = wallet.send_self_transfer_multi(\n+                    from_node=normal_node,\n+                    sequence=BIP125_SEQUENCE_NUMBER,\n+                    utxos_to_spend=[root_utxos[graph_num]],\n+                    num_outputs=txs_per_graph,\n+                )\n+                assert_equal(True, normal_node.getmempoolentry(optin_parent_tx['txid'])['bip125-replaceable'])\n+                new_utxos = optin_parent_tx['new_utxos']\n+\n+                for utxo in new_utxos:\n+                    # Create spends for each output from the \"root\" of this graph.\n+                    child_tx = wallet.send_self_transfer(\n+                        from_node=normal_node,\n+                        utxo_to_spend=utxo,\n+                    )\n+\n+                    assert normal_node.getmempoolentry(child_tx['txid'])\n+\n+            num_txs_invalidated = len(root_utxos) + (num_tx_graphs * txs_per_graph)\n+\n+            if failure_expected:\n+                assert num_txs_invalidated > MAX_REPLACEMENT_LIMIT\n+            else:\n+                assert num_txs_invalidated <= MAX_REPLACEMENT_LIMIT\n+\n+            # Now attempt to submit a tx that double-spends all the root tx inputs, which\n+            # would invalidate `num_txs_invalidated` transactions.\n+            double_tx = wallet.create_self_transfer_multi(\n+                from_node=normal_node,\n+                utxos_to_spend=root_utxos,\n+                fee_per_output=10_000_000,  # absurdly high feerate\n+            )\n+            tx_hex = double_tx.serialize().hex()\n+\n+            if failure_expected:\n+                assert_raises_rpc_error(\n+                    -26, \"too many potential replacements\", normal_node.sendrawtransaction, tx_hex, 0)\n+            else:\n+                txid = normal_node.sendrawtransaction(tx_hex, 0)\n+                assert normal_node.getmempoolentry(txid)\n+\n+        # Clear the mempool once finished, and rescan the other nodes' wallet\n+        # to account for the spends we've made on `normal_node`.\n+        self.generate(normal_node, 1)\n+        self.wallet.rescan_utxos()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r888466244",
      "id" : 888466244,
      "line" : 492,
      "node_id" : "PRRC_kwDOABII58409OtE",
      "original_commit_id" : "687addaf136356e0f3698d6345c92d875e0a3362",
      "original_line" : 492,
      "original_position" : 119,
      "original_start_line" : 489,
      "path" : "test/functional/feature_rbf.py",
      "position" : 119,
      "pull_request_review_id" : 994254386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888466244/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 489,
      "start_side" : "RIGHT",
      "updated_at" : "2022-06-02T22:48:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/888466244",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I am done making relatively minor changes to this PR. If there are problems with the correctness of the test I will fix them, but otherwise I have other things to do.",
      "created_at" : "2022-06-03T17:14:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25228#issuecomment-1146191146",
      "id" : 1146191146,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25228",
      "node_id" : "IC_kwDOABII585EUX0q",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1146191146/reactions"
      },
      "updated_at" : "2022-06-03T17:14:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1146191146",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Code review ACK 687addaf136356e0f3698d6345c92d875e0a3362\r\n\r\n> I am done making relatively minor changes to this PR\r\n\r\nFair enough, opening a PR doesn't oblige you to incorporate every minor suggestion, i think it's fine like this\r\n",
      "created_at" : "2022-06-07T18:49:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25228#issuecomment-1149042160",
      "id" : 1149042160,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25228",
      "node_id" : "IC_kwDOABII585EfP3w",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1149042160/reactions"
      },
      "updated_at" : "2022-06-07T18:49:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1149042160",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r911654400"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911654400"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Shouldn't this be an array of the same length as `utxos_to_spend`?\r\n\r\n(Might fix in a follow-up)",
      "commit_id" : "687addaf136356e0f3698d6345c92d875e0a3362",
      "created_at" : "2022-07-01T06:32:17Z",
      "diff_hunk" : "@@ -208,14 +209,21 @@ def send_self_transfer_multi(self, **kwargs):\n         return {'new_utxos': [self.get_utxo(txid=txid, vout=vout) for vout in range(len(tx.vout))],\n                 'txid': txid, 'hex': tx.serialize().hex(), 'tx': tx}\n \n-    def create_self_transfer_multi(self, *, from_node, utxos_to_spend=None, num_outputs=1, fee_per_output=1000):\n+    def create_self_transfer_multi(\n+            self, *, from_node,\n+            utxos_to_spend: Optional[List[dict]] = None,\n+            num_outputs=1,\n+            sequence=0,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25228#discussion_r911654400",
      "id" : 911654400,
      "line" : 216,
      "node_id" : "PRRC_kwDOABII5842Vr4A",
      "original_commit_id" : "687addaf136356e0f3698d6345c92d875e0a3362",
      "original_line" : 216,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/wallet.py",
      "position" : 26,
      "pull_request_review_id" : 1025772858,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25228",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911654400/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-07-01T06:32:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/911654400",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
