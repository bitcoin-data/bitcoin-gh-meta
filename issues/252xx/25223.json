{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "This is part of the libbitcoinkernel project: #24303, https://github.com/bitcoin/bitcoin/projects/18\r\n\r\nThis is **_NOT_** dependent on, but is a \"companion-PR\" to #25215.\r\n\r\n### Abstract\r\n\r\nThis PR removes the need to construct `BlockAssembler` with temporary, empty mempools in cases where we don't want to source transactions from the mempool (e.g. in `TestChain100Setup::CreateBlock` and `generateblock`). After this PR, `BlockAssembler` will accept a `CTxMemPool` pointer and handle the `nullptr` case instead of requiring a `CTxMemPool` reference.\r\n\r\nAn overview of the changes is best seen in the changes in the header file:\r\n\r\n```diff\r\ndiff --git a/src/node/miner.h b/src/node/miner.h\r\nindex 7cf8e3fb9e..7e9f503602 100644\r\n--- a/src/node/miner.h\r\n+++ b/src/node/miner.h\r\n@@ -147,7 +147,7 @@ private:\r\n     int64_t m_lock_time_cutoff;\r\n \r\n     const CChainParams& chainparams;\r\n-    const CTxMemPool& m_mempool;\r\n+    const CTxMemPool* m_mempool;\r\n     CChainState& m_chainstate;\r\n \r\n public:\r\n@@ -157,8 +157,8 @@ public:\r\n         CFeeRate blockMinFeeRate;\r\n     };\r\n \r\n-    explicit BlockAssembler(CChainState& chainstate, const CTxMemPool& mempool);\r\n-    explicit BlockAssembler(CChainState& chainstate, const CTxMemPool& mempool, const Options& options);\r\n+    explicit BlockAssembler(CChainState& chainstate, const CTxMemPool* mempool);\r\n+    explicit BlockAssembler(CChainState& chainstate, const CTxMemPool* mempool, const Options& options);\r\n \r\n     /** Construct a new block template with coinbase to scriptPubKeyIn */\r\n     std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn);\r\n@@ -177,7 +177,7 @@ private:\r\n     /** Add transactions based on feerate including unconfirmed ancestors\r\n       * Increments nPackagesSelected / nDescendantsUpdated with corresponding\r\n       * statistics from the package selection (for logging statistics). */\r\n-    void addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated) EXCLUSIVE_LOCKS_REQUIRED(m_mempool.cs);\r\n+    void addPackageTxs(const CTxMemPool& mempool, int& nPackagesSelected, int& nDescendantsUpdated) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs);\r\n \r\n     // helper functions for addPackageTxs()\r\n     /** Remove confirmed (inBlock) entries from given set */\r\n@@ -189,15 +189,8 @@ private:\r\n       * These checks should always succeed, and they're here\r\n       * only as an extra check in case of suboptimal node configuration */\r\n     bool TestPackageTransactions(const CTxMemPool::setEntries& package) const;\r\n-    /** Return true if given transaction from mapTx has already been evaluated,\r\n-      * or if the transaction's cached data in mapTx is incorrect. */\r\n-    bool SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set& mapModifiedTx, CTxMemPool::setEntries& failedTx) EXCLUSIVE_LOCKS_REQUIRED(m_mempool.cs);\r\n     /** Sort the package in an order that is valid to appear in a block */\r\n     void SortForBlock(const CTxMemPool::setEntries& package, std::vector<CTxMemPool::txiter>& sortedEntries);\r\n-    /** Add descendants of given transactions to mapModifiedTx with ancestor\r\n-      * state updated assuming given transactions are inBlock. Returns number\r\n-      * of updated descendants. */\r\n-    int UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded, indexed_modified_transaction_set& mapModifiedTx) EXCLUSIVE_LOCKS_REQUIRED(m_mempool.cs);\r\n };\r\n \r\n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\r\n```\r\n\r\n### Alternatives\r\n\r\nAside from approach in this current PR, we can also take the approach of moving the `CTxMemPool*` argument from the `BlockAssembler` constructor to `BlockAssembler::CreateNewBlock`, since that's where it's needed anyway. I did not push this approach because it requires quite a lot of call sites to be changed. However, I do have it coded up and can do that if people express a strong preference. This would look something like:\r\n\r\n```\r\nBlockAssembler::BlockAssembler(CChainState& chainstate, const Options& options);\r\nBlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn, const CTxMemPool* maybe_mempool);\r\n```\r\n\r\n### Future work\r\n\r\nAlthough wholly out of scope for this PR, we could potentially refine the `BlockAssembler` interface further, so that we have:\r\n\r\n```\r\nBlockAssembler::BlockAssembler(CChainState& chainstate, const Options& options);\r\nBlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn, std::vector<CTransaction>& txs);\r\nBlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn, const CTxMemPool& mempool);\r\n```\r\n\r\nWhereby `TestChain100Setup::CreateBlock` and `generateblock` would call the `BlockAssembler::CreateNewBlock` that takes in `CTransaction`s and we can potentially remove `RegenerateCommitments` altogether. All other callers can use the `CTxMemPool` version.",
   "closed_at" : "2022-06-15T15:41:08Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
      "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
      "followers_url" : "https://api.github.com/users/fanquake/followers",
      "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/fanquake",
      "id" : 863730,
      "login" : "fanquake",
      "node_id" : "MDQ6VXNlcjg2MzczMA==",
      "organizations_url" : "https://api.github.com/users/fanquake/orgs",
      "received_events_url" : "https://api.github.com/users/fanquake/received_events",
      "repos_url" : "https://api.github.com/users/fanquake/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/fanquake"
   },
   "comments" : 19,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25223/comments",
   "created_at" : "2022-05-26T17:57:52Z",
   "draft" : false,
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25223/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/25223",
   "id" : 1249876287,
   "labels" : [
      {
         "color" : "E6F6D6",
         "default" : false,
         "description" : null,
         "id" : 135961,
         "name" : "Refactoring",
         "node_id" : "MDU6TGFiZWwxMzU5NjE=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring"
      },
      {
         "color" : "c7def8",
         "default" : false,
         "description" : null,
         "id" : 118378960,
         "name" : "Mining",
         "node_id" : "MDU6TGFiZWwxMTgzNzg5NjA=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Mining"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25223/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "PR_kwDOABII5844iXdA",
   "number" : 25223,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/25223.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/25223",
      "merged_at" : "2022-06-15T15:41:08Z",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/25223.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/25223"
   },
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25223/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25223/timeline",
   "title" : "[kernel 2e/n] miner: Make `mempool` optional, stop constructing temporary empty mempools",
   "updated_at" : "2022-06-15T17:35:15Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/25223",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
      "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
      "followers_url" : "https://api.github.com/users/dongcarl/followers",
      "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/dongcarl",
      "id" : 3445290,
      "login" : "dongcarl",
      "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
      "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
      "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
      "repos_url" : "https://api.github.com/users/dongcarl/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/dongcarl"
   }
}
