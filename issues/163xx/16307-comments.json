[
   {
      "author_association" : "MEMBER",
      "body" : "I've put together an AppleScript that can reproduce this issue fairly easily. \r\nIt only requires a syncing Bitcoin-Core and creating a wallet named \"test\".\r\n\r\n```applescript\r\ntell application \"System Events\" to tell process \"Bitcoin Core\"\r\n\t-- sane window location and size\r\n\tset position of window 1 to {0, 20}\r\n\tset size of window 1 to {500, 500}\r\n\tset frontmost to true\r\n\t\r\n\trepeat\r\n\t\tclick menu item \"Close Wallet...\" of menu \"File\" of menu bar 1\r\n\t\tclick button \"Yes\" of group 1 of window 1\r\n\t\tdelay 0.2\r\n\t\tclick menu item \"Close Wallet...\" of menu \"File\" of menu bar 1\r\n\t\tclick button \"Yes\" of group 1 of window 1\r\n\t\tdelay 0.2\r\n\t\tclick menu item \"[default wallet]\" of menu \"Open Wallet\" of menu item \"Open Wallet\" of menu \"File\" of menu bar 1\r\n\t\tdelay 0.2\r\n\t\tclick menu item \"test\" of menu \"Open Wallet\" of menu item \"Open Wallet\" of menu \"File\" of menu bar 1\r\n\t\tdelay 0.2\r\n\tend repeat\r\nend tell\r\n```\r\n\r\ncc @promag.",
      "created_at" : "2019-08-08T04:15:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-519355809",
      "id" : 519355809,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxOTM1NTgwOQ==",
      "updated_at" : "2019-08-08T04:15:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/519355809",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "From what I can tell, I've tracked down the cause of this crash. \r\n\r\nA call to `CWallet::BlockConnected` while we are in `wallet->Flush()` phase of `ReleaseWallet` gives the scheduler the `cs_wallet` lock. We then loop calling `SyncTransaction` -> `AddToWalletIfInvolvingMe` which also calls `AssertLockHeld(cs_wallet);`. At some point we'll be done flushing, and call `delete wallet`, which blows up as we are trying to delete `cs_wallet` which is still being held in the scheduler thread.\r\n\r\nYou can cause this crash running `src/bitcoind` and a Python script that is essentially:\r\n```python\r\nwhile 1:\r\n    rpc.unloadwallet('test')\r\n    rpc.unloadwallet('test2')\r\n    rpc.loadwallet('test')\r\n    rpc.loadwallet('test2')\r\n```\r\n\r\n#### debug.log\r\n\r\n```bash\r\n2020-02-21T06:47:47.281600Z [scheduler] [test] SCHED: bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef &, CWalletTx::Confirmation, bool)\r\n2020-02-21T06:47:47.281738Z [scheduler] [test] SCHED: bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef &, CWalletTx::Confirmation, bool)\r\n2020-02-21T06:47:47.281919Z [scheduler] [test] SCHED: bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef &, CWalletTx::Confirmation, bool)\r\n2020-02-21T06:47:47.289817Z [httpworker.3] BerkeleyEnvironment::Flush: wallet.dat closed\r\n2020-02-21T06:47:47.289912Z [msghand] received: inv (541 bytes) peer=4\r\n2020-02-21T06:47:47.290027Z [scheduler] [test] SCHED: bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef &, CWalletTx::Confirmation, bool)\r\n2020-02-21T06:47:47.290102Z [httpworker.3] BerkeleyEnvironment::Flush: Flush(false) took              43ms\r\n2020-02-21T06:47:47.290204Z [scheduler] [test] SCHED: bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef &, CWalletTx::Confirmation, bool)\r\nAssertion failed: (e == 0), function ~recursive_mutex, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/libcxx/libcxx-400.9.4/src/mutex.cpp, line 64.\r\nProcess 72347 stopped\r\n* thread #2, name = 'b-httpworker.3', stop reason = signal SIGABRT\r\n    frame #0: 0x00007fff5c4182c2 libsystem_kernel.dylib`__pthread_kill + 10\r\nlibsystem_kernel.dylib`__pthread_kill:\r\n->  0x7fff5c4182c2 <+10>: jae    0x7fff5c4182cc            ; <+20>\r\n    0x7fff5c4182c4 <+12>: movq   %rax, %rdi\r\n    0x7fff5c4182c7 <+15>: jmp    0x7fff5c412453            ; cerror_nocancel\r\n    0x7fff5c4182cc <+20>: retq   \r\nTarget 0: (bitcoind) stopped.\r\n```\r\n\r\n #### httpworker (unloadwallet) thread\r\n \r\n ```bash\r\n \r\n (AnnotatedMixin<std::__1::recursive_mutex> *) this = 0x000000015b7ccf98\r\n \r\n (lldb) frame select 6\r\nframe #6: 0x00000001000aa6f3 bitcoind`AnnotatedMixin<std::__1::recursive_mutex>::~AnnotatedMixin(this=0x000000015b7ccf98) at sync.h:82:23\r\n   79  \tclass LOCKABLE AnnotatedMixin : public PARENT\r\n   80  \t{\r\n   81  \tpublic:\r\n-> 82  \t    ~AnnotatedMixin() {\r\n   83  \t        DeleteLock((void*)this);\r\n   84  \t    }\r\n   85  \t\r\n\r\n (lldb) frame select 7\r\nframe #7: 0x00000001007d9ea0 bitcoind`CWallet::~CWallet(this=0x000000015b7cce20) at wallet.h:758:5\r\n   755 \t    {\r\n   756 \t        // Should not have slots connected at this point.\r\n   757 \t        assert(NotifyUnload.empty());\r\n-> 758 \t    }\r\n   759 \t\r\n   760 \t    bool IsCrypted() const;\r\n   761 \t    bool IsLocked() const override;\r\n (lldb) frame select 8\r\nframe #8: 0x00000001007c4373 bitcoind`CWallet::~CWallet(this=0x000000015b7cce20) at wallet.h:755:5\r\n   752 \t    }\r\n   753 \t\r\n   754 \t    ~CWallet()\r\n-> 755 \t    {\r\n   756 \t        // Should not have slots connected at this point.\r\n   757 \t        assert(NotifyUnload.empty());\r\n   758 \t    }\r\n ```\r\n \r\n #### scheduler thread (10)\r\n \r\n ```bash\r\n \r\n // in frame 14\r\n frame variable criticalblock27\r\n(DebugLock<decltype(this->cs_wallet)>) criticalblock27 = {\r\n  std::__1::unique_lock<std::__1::recursive_mutex> = {\r\n    __m_ = 0x000000015b7ccf98\r\n    __owns_ = true\r\n  }\r\n}\r\n\r\n \r\n \r\n(lldb) frame select 12\r\nframe #12: 0x00000001007a76b3 bitcoind`CWallet::AddToWalletIfInvolvingMe(this=0x000000015b7cce20, ptx=std::__1::shared_ptr<const CTransaction>::element_type @ 0x000000015c6c3908 strong=1 weak=1, confirm=Confirmation @ 0x0000700007d2ab70, fUpdate=true) at wallet.cpp:914:9\r\n   911 \t{\r\n   912 \t    const CTransaction& tx = *ptx;\r\n   913 \t    {\r\n-> 914 \t        WalletLogPrintf(\"SCHED: %s\\n\", __PRETTY_FUNCTION__);\r\n   915 \t        // This assertion fails?\r\n   916 \t        AssertLockHeld(cs_wallet);\r\n   917\r\n(lldb) frame select 13\r\nframe #13: 0x00000001007a91ca bitcoind`CWallet::SyncTransaction(this=0x000000015b7cce20, ptx=std::__1::shared_ptr<const CTransaction>::element_type @ 0x000000015c6c3908 strong=1 weak=1, confirm=Confirmation @ 0x0000700007d2ac10, update_tx=true) at wallet.cpp:1089:10\r\n   1086\tvoid CWallet::SyncTransaction(const CTransactionRef& ptx, CWalletTx::Confirmation confirm, bool update_tx)\r\n   1087\t{\r\n   1088\t    //WalletLogPrintf(\"SCHED: %s\\n\", __PRETTY_FUNCTION__);\r\n-> 1089\t    if (!AddToWalletIfInvolvingMe(ptx, confirm, update_tx))\r\n   1090\t        return; // Not one of ours\r\n   1091\t\r\n   1092\t    // If a transaction changes 'conflicted' state, that changes the balance\r\n(lldb) frame variable cs_wallet\r\n(RecursiveMutex) cs_wallet = {\r\n  std::__1::recursive_mutex = {\r\n    __m_ = (__sig = 1297437784, __opaque = \"\")\r\n  }\r\n}\r\n(lldb) frame select 14\r\nframe #14: 0x00000001007a99f2 bitcoind`CWallet::BlockConnected(this=0x000000015b7cce20, block=0x000000015c765d28, vtxConflicted=size=0, height=351323) at wallet.cpp:1129:9\r\n   1126\t    m_last_block_processed = block_hash;\r\n   1127\t    for (size_t index = 0; index < block.vtx.size(); index++) {\r\n   1128\t        CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, height, block_hash, index);\r\n-> 1129\t        SyncTransaction(block.vtx[index], confirm);\r\n   1130\t        TransactionRemovedFromMempool(block.vtx[index]);\r\n   1131\t    }\r\n   1132\t    for (const CTransactionRef& ptx : vtxConflicted) {\r\n(lldb) frame variable cs_wallet\r\n(RecursiveMutex) cs_wallet = {\r\n  std::__1::recursive_mutex = {\r\n    __m_ = (__sig = 1297437784, __opaque = \"\")\r\n  }\r\n}\r\n(lldb) frame select 15\r\nframe #15: 0x00000001007a9bb2 bitcoind`non-virtual thunk to CWallet::BlockConnected(this=0x000000015b7cce20, block=0x000000015c765d28, vtxConflicted=size=0, height=351323) at wallet.cpp:0\r\n   1   \t// Copyright (c) 2009-2010 Satoshi Nakamoto\r\n   2   \t// Copyright (c) 2009-2020 The Bitcoin Core developers\r\n   3   \t// Distributed under the MIT software license, see the accompanying\r\n   4   \t// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n   5   \t\r\n   6   \t#include <wallet/wallet.h>\r\n   7   \t\r\n(lldb) frame variable cs_wallet\r\nerror: no variable named 'cs_wallet' found in this frame\r\n ```\r\n\r\n#### httpworker (unloadwallet) bt\r\n```bash\r\n* thread #2, name = 'b-httpworker.3', stop reason = signal SIGABRT\r\n    frame #0: 0x00007fff5c4182c2 libsystem_kernel.dylib`__pthread_kill + 10\r\n    frame #1: 0x00007fff5c4d3bf1 libsystem_pthread.dylib`pthread_kill + 284\r\n    frame #2: 0x00007fff5c3826a6 libsystem_c.dylib`abort + 127\r\n    frame #3: 0x00007fff5c34b20d libsystem_c.dylib`__assert_rtn + 324\r\n    frame #4: 0x00007fff59543092 libc++.1.dylib`std::__1::recursive_mutex::~recursive_mutex() + 46\r\n    frame #5: 0x00000001000f1edb bitcoind`AnnotatedMixin<std::__1::recursive_mutex>::~AnnotatedMixin(this=0x000000015b7ccf98) at sync.h:84:5\r\n  * frame #6: 0x00000001000aa6f3 bitcoind`AnnotatedMixin<std::__1::recursive_mutex>::~AnnotatedMixin(this=0x000000015b7ccf98) at sync.h:82:23\r\n    frame #7: 0x00000001007d9ea0 bitcoind`CWallet::~CWallet(this=0x000000015b7cce20) at wallet.h:758:5\r\n    frame #8: 0x00000001007c4373 bitcoind`CWallet::~CWallet(this=0x000000015b7cce20) at wallet.h:755:5\r\n    frame #9: 0x00000001007c703a bitcoind`CWallet::~CWallet(this=0x000000015b7cce20) at wallet.h:755:5\r\n    frame #10: 0x00000001007c4691 bitcoind`ReleaseWallet(wallet=0x000000015b7cce20) at wallet.cpp:117:5\r\n    frame #11: 0x000000010083115e bitcoind`std::__1::__shared_ptr_pointer<CWallet*, void (*)(CWallet*), std::__1::allocator<CWallet> >::__on_zero_shared(this=0x00000001577e76c0) at memory:3511:5\r\n    frame #12: 0x00000001000ebd1b bitcoind`std::__1::__shared_count::__release_shared(this=0x00000001577e76c0) at memory:3415:9\r\n    frame #13: 0x00000001000ebc8d bitcoind`std::__1::__shared_weak_count::__release_shared(this=0x00000001577e76c0) at memory:3457:27\r\n    frame #14: 0x000000010065a49a bitcoind`std::__1::shared_ptr<CWallet>::~shared_ptr(this=0x0000700007fb9738) at memory:4393:19\r\n    frame #15: 0x000000010065a3f3 bitcoind`std::__1::shared_ptr<CWallet>::~shared_ptr(this=0x0000700007fb9738) at memory:4391:1\r\n    frame #16: 0x0000000100797521 bitcoind`std::__1::shared_ptr<CWallet>::reset(this=0x0000700007fb9938) at memory:4528:5\r\n    frame #17: 0x000000010079740e bitcoind`UnloadWallet(wallet=nullptr) at wallet.cpp:143:12\r\n    frame #18: 0x000000010074f1e2 bitcoind`unloadwallet(request=0x0000700007fba990) at rpcwallet.cpp:2779:5\r\n```\r\n\r\n#### scheduler thread bt\r\n```bash\r\n* thread #10, name = 'b-scheduler'\r\n    frame #0: 0x00007fff5c489799 libsystem_malloc.dylib`tiny_malloc_should_clear + 1176\r\n    frame #1: 0x00007fff5c48920f libsystem_malloc.dylib`szone_malloc_should_clear + 66\r\n    frame #2: 0x00007fff5c487c99 libsystem_malloc.dylib`malloc_zone_malloc + 103\r\n    frame #3: 0x00007fff5c487c15 libsystem_malloc.dylib`malloc + 24\r\n    frame #4: 0x00007fff5955b378 libc++abi.dylib`operator new(unsigned long) + 40\r\n    frame #5: 0x00007fff59509521 libc++.1.dylib`std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__grow_by(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long) + 141\r\n    frame #6: 0x00007fff5950a3d7 libc++.1.dylib`std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::push_back(char) + 85\r\n    frame #7: 0x0000000100a29562 bitcoind`std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::operator+=(this=\"[test] SCHED: bool CWa\", __c='l') at string:992:84\r\n    frame #8: 0x000000010099eccc bitcoind`BCLog::LogEscapeMessage(str=\"[test] SCHED: bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef &, CWalletTx::Confirmation, bool)\\n\") at logging.cpp:253:21\r\n    frame #9: 0x000000010099eef1 bitcoind`BCLog::Logger::LogPrintStr(this=0x0000000103300000, str=\"[test] SCHED: bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef &, CWalletTx::Confirmation, bool)\\n\") at logging.cpp:265:32\r\n    frame #10: 0x00000001007f7c86 bitcoind`void LogPrintf<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, char const*>(fmt=\"%s SCHED: %s\\n\", args=\"[test]\", args=0x0000700007d2a790) at logging.h:173:23\r\n    frame #11: 0x00000001007a7e5e bitcoind`void CWallet::WalletLogPrintf<char const*>(this=0x000000015b7cce20, fmt=\"SCHED: %s\\n\", parameters=\"bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef &, CWalletTx::Confirmation, bool)\") const at wallet.h:1139:9\r\n  * frame #12: 0x00000001007a76b3 bitcoind`CWallet::AddToWalletIfInvolvingMe(this=0x000000015b7cce20, ptx=std::__1::shared_ptr<const CTransaction>::element_type @ 0x000000015c6c3908 strong=1 weak=1, confirm=Confirmation @ 0x0000700007d2ab70, fUpdate=true) at wallet.cpp:914:9\r\n    frame #13: 0x00000001007a91ca bitcoind`CWallet::SyncTransaction(this=0x000000015b7cce20, ptx=std::__1::shared_ptr<const CTransaction>::element_type @ 0x000000015c6c3908 strong=1 weak=1, confirm=Confirmation @ 0x0000700007d2ac10, update_tx=true) at wallet.cpp:1089:10\r\n    frame #14: 0x00000001007a99f2 bitcoind`CWallet::BlockConnected(this=0x000000015b7cce20, block=0x000000015c765d28, vtxConflicted=size=0, height=351323) at wallet.cpp:1129:9\r\n    frame #15: 0x00000001007a9bb2 bitcoind`non-virtual thunk to CWallet::BlockConnected(this=0x000000015b7cce20, block=0x000000015c765d28, vtxConflicted=size=0, height=351323) at wallet.cpp:0\r\n    frame #16: 0x00000001000a1e2e bitcoind`interfaces::(anonymous namespace)::NotificationsHandlerImpl::BlockConnected(this=0x00000001190f2ec0, block=std::__1::shared_ptr<const CBlock>::element_type @ 0x000000015c765d28 strong=2 weak=1, index=0x000000011309fd20, tx_conflicted=size=0) at chain.cpp:179:26\r\n    frame #17: 0x00000001000a2114 bitcoind`non-virtual thunk to interfaces::(anonymous namespace)::NotificationsHandlerImpl::BlockConnected(this=0x00000001190f2ec8, block=std::__1::shared_ptr<const CBlock>::element_type @ 0x000000015c765d28 strong=2 weak=1, index=0x000000011309fd20, tx_conflicted=size=0) at chain.cpp:0\r\n```",
      "created_at" : "2020-02-21T08:00:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-589542229",
      "id" : 589542229,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4OTU0MjIyOQ==",
      "updated_at" : "2020-02-21T08:00:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589542229",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Or as a bash script:\r\n\r\n```sh\r\n#!/bin/bash\r\nwhile [ 1 ]\r\ndo\r\n\tsrc/bitcoin-cli -testnet unloadwallet test\r\n\tsrc/bitcoin-cli -testnet unloadwallet test2\r\n\tsrc/bitcoin-cli -testnet loadwallet test\r\n\tsrc/bitcoin-cli -testnet loadwallet test2\r\ndone\r\n```\r\n\r\nAfter an hour or so, on macOS Catalina:\r\n\r\n```\r\nEXCEPTION: NSt3__112system_errorE       \r\nrecursive_mutex lock failed: Invalid argument       \r\nbitcoin in scheduler       \r\n\r\nlibc++abi.dylib: terminating with uncaught exception of type std::__1::system_error: recursive_mutex lock failed: Invalid argument\r\n```",
      "created_at" : "2020-02-21T10:47:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-589601500",
      "id" : 589601500,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4OTYwMTUwMA==",
      "updated_at" : "2020-02-21T11:43:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589601500",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe the wallet needs to unregister from notifications before flushing (reset `m_chain_notifications_handler` before calling `Flush()` instead of after):\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/ab9de435880c9d77e4137b65050591ef2d14f809/src/wallet/wallet.cpp#L114-L115",
      "created_at" : "2020-02-24T15:45:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-590393308",
      "id" : 590393308,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MDM5MzMwOA==",
      "updated_at" : "2020-02-24T15:45:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/590393308",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Might be good to test this with #18234 if @ryanofsky 's suggestion does not work.",
      "created_at" : "2020-03-05T21:03:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-595445559",
      "id" : 595445559,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NTQ0NTU1OQ==",
      "updated_at" : "2020-03-05T21:03:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/595445559",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Might be good to test this with #18234 \r\n\r\nI've tested with #18234 and can still produce the same crash. I'm not sure the changes there would help.\r\n\r\n> Maybe the wallet needs to unregister from notifications before flushing (reset m_chain_notifications_handler before calling Flush() instead of after):\r\n\r\nI've briefly tested this patch (on top of master):\r\n```diff\r\ndiff --git a/src/wallet/wallet.cpp b/src/wallet/wallet.cpp\r\nindex 5a97f62b7..1a787bc57 100644\r\n--- a/src/wallet/wallet.cpp\r\n+++ b/src/wallet/wallet.cpp\r\n@@ -110,8 +110,8 @@ static void ReleaseWallet(CWallet* wallet)\r\n     const std::string name = wallet->GetName();\r\n     wallet->WalletLogPrintf(\"Releasing wallet\\n\");\r\n     wallet->BlockUntilSyncedToCurrentChain();\r\n-    wallet->Flush();\r\n     wallet->m_chain_notifications_handler.reset();\r\n+    wallet->Flush();\r\n     delete wallet;\r\n     // Wallet is now released, notify UnloadWallet, if any.\r\n```\r\n\r\nand it seems to cause deadlocks. Eventually an `unloadwallet` call times out and threads seem to be stalled on `SyncWithValidationInterfaceQueue`. I can post a backtrace shortly.",
      "created_at" : "2020-03-06T14:15:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-595786198",
      "id" : 595786198,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NTc4NjE5OA==",
      "updated_at" : "2020-03-06T14:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/595786198",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I can clarify what's happen, `BlockUntilSyncedToCurrentChain` does not do what is advertised in its name, it just waits a notification but it not ensures that wallet processed block and tip block are same. Furthermore it makes a race condition in delete wallet since mutex is still held in process thread, it depends of which is faster flush or processing that's why it's not crash always.",
      "created_at" : "2020-03-06T14:40:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-595797342",
      "id" : 595797342,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NTc5NzM0Mg==",
      "updated_at" : "2020-03-06T14:40:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/595797342",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8323581?v=4",
         "events_url" : "https://api.github.com/users/bvbfan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/bvbfan/followers",
         "following_url" : "https://api.github.com/users/bvbfan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/bvbfan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/bvbfan",
         "id" : 8323581,
         "login" : "bvbfan",
         "node_id" : "MDQ6VXNlcjgzMjM1ODE=",
         "organizations_url" : "https://api.github.com/users/bvbfan/orgs",
         "received_events_url" : "https://api.github.com/users/bvbfan/received_events",
         "repos_url" : "https://api.github.com/users/bvbfan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/bvbfan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/bvbfan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/bvbfan"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I can post a backtrace shortly.\r\n\r\n@fanquake or others, it would really help to see a \"thread apply all bt\" backtrace of the deadlock. From @promags's fix #18280 I'm guessing it has something to do with the unload wallet notification, but it's not really clear\r\n\r\n",
      "created_at" : "2020-03-10T16:23:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-597179424",
      "id" : 597179424,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NzE3OTQyNA==",
      "updated_at" : "2020-03-10T16:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597179424",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ryanofsky I think the problem is in https://github.com/bitcoin/bitcoin/blob/5d92ac26ed8984c29eabc4b78bcddd2423e68dac/src/wallet/wallet.cpp#L114-L115\r\nBecause `m_chain_notifications_handler.reset()` disconnects but it's not thread safe - some notification might be on way - and then `delete wallet` will screw that.\r\n\r\nSo I think we need to ensure that after `UnregisterValidationInterface` nothing can be delivered to the wallet.\r\n\r\nBTW, when I say disconnect is not thread safe, I actually think there's 2 problems there. First is that `g_signals.m_internals->m_connMainSignals` stores a raw pointer to the wallet and we are managing it with `shared_ptr` - should be fixed with the above suggestion. Second problem, even though boost::signal is thread safe, it doesn't mean connect/disconnect of multiple signals is atomic which means that, for instance, a notification could be delivered before `RegisterValidationInterface` returns. I'm not sure if this the root of any problem but I suppose that register/unregister could be atomic - and for this I'm trying with #18280.",
      "created_at" : "2020-03-10T16:43:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-597189679",
      "id" : 597189679,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NzE4OTY3OQ==",
      "updated_at" : "2020-03-10T16:58:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597189679",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "It looks like promag found a good and pretty minimal workaround for this problem in #18280\r\n\r\nI don't think #18280 is 100% perfect because BlockUntilSyncedToCurrentChain doesn't always call SyncWithValidationInterfaceQueue (due to the `old_tip == ::ChainActive().Tip()`) so some notifications could still happen after deletion, but the current bug seems already pretty rare so I would expect this to probably be a good enough fix.\r\n\r\nI implemented a change in 06d2b530e57b88c0542e2bd8db00ca0b034b589d ([branch](https://github.com/ryanofsky/bitcoin/commits/pr/notify-shared)), which I think could solve the problem in a more reliable way, and also maybe make unloading faster, since it drops the BlockUntilSyncedToCurrentChain call in ReleaseWallet\r\n\r\nEDIT: Replaced references to #16367 above with #18280",
      "created_at" : "2020-03-10T20:37:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-597302227",
      "id" : 597302227,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NzMwMjIyNw==",
      "updated_at" : "2020-03-11T14:05:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597302227",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I don't think #16367 is 100% perfect because BlockUntilSyncedToCurrentChain doesn't always call SyncWithValidationInterfaceQueue\r\n\r\nRight, I though about just calling `SyncWithValidationInterfaceQueue` (something in `interfaces::Chain` that calls it).",
      "created_at" : "2020-03-10T20:49:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-597307450",
      "id" : 597307450,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NzMwNzQ1MA==",
      "updated_at" : "2020-03-10T20:49:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597307450",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> @fanquake or others, it would really help to see a \"thread apply all bt\" backtrace\r\n\r\n@ryanofsky sorry; I forgot about this. You can find a full backtrace, master + [this patch](https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-590393308) applied, [here](https://gist.github.com/fanquake/f66e3e253440e416aa4d6ac470b2c819).\r\n\r\n> It looks like promag found a good and pretty minimal workaround for this problem in #16367\r\n\r\nI assume you mean #18280?",
      "created_at" : "2020-03-11T08:18:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-597501046",
      "id" : 597501046,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NzUwMTA0Ng==",
      "updated_at" : "2020-03-11T08:18:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597501046",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I assume you mean #18280?\r\n\r\nYes sorry edited comment above\r\n\r\n> You can find a full backtrace, master + [this patch](https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-590393308) applied, [here](https://gist.github.com/fanquake/f66e3e253440e416aa4d6ac470b2c819).\r\n\r\nThis backtrace is really interesting and shows a different deadlock that ~~2a42fc1bdb393f88d72ec4d5c93b43b2b86dcc91 from #18280 will not fix~~, but my change 06d2b530e57b88c0542e2bd8db00ca0b034b589d ([branch](https://github.com/ryanofsky/bitcoin/commits/pr/notify-shared), [comment](https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-597302227)) does fix\r\n\r\nThe backtrace shows SyncWithValidationInterfaceQueue being called in the CScheduler::serviceQueue thread which will always deadlock because the thread that's supposed to be processing notifications can't block waiting for notifications that it should be processing.\r\n\r\nThis happens because MaybeCompactWalletDB accesses the shared_ptr and can trigger ReleaseWallet which calls SyncWithValidationInterfaceQueue\r\n\r\n---\r\n\r\nCorrection for above: 2a42fc1bdb393f88d72ec4d5c93b43b2b86dcc91 from #18280 should actually fix the issue because it deletes the BlockUntilSyncedToCurrentChain call from ReleaseWallet. I was thinking of an earlier version of that fix bba30cb4f4fe4aa99b5fad2420b0cc05527756d0 which didn't do this\r\n\r\n---\r\n\r\nCorrection to correction: 2a42fc1bdb393f88d72ec4d5c93b43b2b86dcc91 from #18280 doesn't fix the issue because it doesn't really delete the BlockUntilSyncedToCurrentChain call from ReleaseWallet, it just replaces it with a `waitForNotifications` call which is effectively the same thing and deadlocks in the same way: https://github.com/bitcoin/bitcoin/pull/18280#discussion_r391814619\r\n",
      "created_at" : "2020-03-11T14:34:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-597669986",
      "id" : 597669986,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NzY2OTk4Ng==",
      "updated_at" : "2020-03-12T18:34:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597669986",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Not on IRC but caught this in logs:\r\n\r\n[23:16:45] \\<promag> re https://github.com/bitcoin/bitcoin/commit/06d2b530e57b88c0542e2bd8db00ca0b034b589d\r\n[23:17:23] \\<promag> AFAICT the problem remains\r\n[23:19:12] \\<promag> m_proxy.reset() races with signal slots right?\r\n[23:19:51] \\<promag> so fix it each slot should have the shared_ptr \r\n[23:20:04] \\<promag> so the last slot would destroy the proxy\r\n\r\n06d2b530e57b88c0542e2bd8db00ca0b034b589d should reference count correctly with no races, not because of slot lifetime but because of callback lifetime. By callback I mean object returned by std::bind that captures the shared pointer. Slot will be deleted when signal is disconnected but callback object should still exist while it is being called",
      "created_at" : "2020-03-11T14:54:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-597681289",
      "id" : 597681289,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NzY4MTI4OQ==",
      "updated_at" : "2020-03-11T14:54:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597681289",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Oh nice one! But what prevents any of those slots to access the wallet concurrently with `delete wallet`?\r\n",
      "created_at" : "2020-03-11T15:26:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-597699195",
      "id" : 597699195,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NzY5OTE5NQ==",
      "updated_at" : "2020-03-11T15:26:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597699195",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Oh nice one! But what prevents any of those slots to access the wallet concurrently with `delete wallet`?\r\n\r\n`delete wallet` is only called while the last shared ptr with refcount 1 is reset or destroyed. Normally this will be during `wallet.reset()` in `UnloadWallet` but in the case where `MaybeCompactWalletDB` or a validationinterface notification is running in another thread, it will happen as soon as the relevant shared_ptrs there are destroyed, at the earliest possible time the wallet can be deleted, but not before.",
      "created_at" : "2020-03-11T17:31:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-597767201",
      "id" : 597767201,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5Nzc2NzIwMQ==",
      "updated_at" : "2020-03-11T17:31:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597767201",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Right right, `RelaseWallet` is called after all `shared_ptr` are gone.",
      "created_at" : "2020-03-11T18:03:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-597783855",
      "id" : 597783855,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5Nzc4Mzg1NQ==",
      "updated_at" : "2020-03-11T18:03:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597783855",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ryanofsky I think you should open a PR as I think your approach is better. Could also add some comments explaining the change to `shared_ptr` and that `std::bind` now guarantees that the wallet is only released after all slots are called.\r\n\r\nOn a side note, we should revisit all `boost::signals2` usages to check for similar issue. ",
      "created_at" : "2020-03-11T18:23:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-597793156",
      "id" : 597793156,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5Nzc5MzE1Ng==",
      "updated_at" : "2020-03-11T18:23:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597793156",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @ryanofsky I think you should open a PR as I think your approach is better. Could also add some comments explaining the change to `shared_ptr` and that `std::bind` now guarantees that the wallet is only released after all slots are called.\r\n> \r\n> On a side note, we should revisit all `boost::signals2` usages to check for similar issue.\r\n\r\nI'dÂ be happy if someone wants to take code from 06d2b530e57b88c0542e2bd8db00ca0b034b589d ([branch](https://github.com/ryanofsky/bitcoin/commits/pr/notify-shared)) and make it a real PR, but right now my plan is just to help get #18280 merged as a straightforward fix to the problem, and leave the pointer change for a future improvement, since it's incomplete (breaks bench and c++ tests) and I haven't really tested it at all (just ran python tests)",
      "created_at" : "2020-03-11T18:58:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-597810664",
      "id" : 597810664,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NzgxMDY2NA==",
      "updated_at" : "2020-03-11T18:58:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/597810664",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This can be closed.",
      "created_at" : "2020-04-02T23:40:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-608148836",
      "id" : 608148836,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYwODE0ODgzNg==",
      "updated_at" : "2020-04-02T23:40:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/608148836",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   }
]
