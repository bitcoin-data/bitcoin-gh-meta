[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300216890"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300216890"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Minor: maybe rename this `rtpassword` or something similar to avoid confusion with `self.password`?",
      "commit_id" : "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "created_at" : "2019-07-04T03:26:27Z",
      "diff_hunk" : "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300216890",
      "id" : 300216890,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDIxNjg5MA==",
      "original_commit_id" : "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "original_position" : 158,
      "path" : "test/functional/rpc_users.py",
      "position" : null,
      "pull_request_review_id" : 257813629,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
      "updated_at" : "2019-07-08T20:13:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300216890",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5808517?v=4",
         "events_url" : "https://api.github.com/users/qmma70/events{/privacy}",
         "followers_url" : "https://api.github.com/users/qmma70/followers",
         "following_url" : "https://api.github.com/users/qmma70/following{/other_user}",
         "gists_url" : "https://api.github.com/users/qmma70/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/qmma70",
         "id" : 5808517,
         "login" : "qmma70",
         "node_id" : "MDQ6VXNlcjU4MDg1MTc=",
         "organizations_url" : "https://api.github.com/users/qmma70/orgs",
         "received_events_url" : "https://api.github.com/users/qmma70/received_events",
         "repos_url" : "https://api.github.com/users/qmma70/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/qmma70/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/qmma70/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/qmma70"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300220844"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300220844"
         }
      },
      "author_association" : "NONE",
      "body" : "Why do we have emojis in the code?",
      "commit_id" : "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "created_at" : "2019-07-04T03:57:20Z",
      "diff_hunk" : "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuserð»:rpcpasswordð\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuserð»\", \"rpcpasswordð\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300220844",
      "id" : 300220844,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDIyMDg0NA==",
      "original_commit_id" : "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "original_position" : 213,
      "path" : "test/functional/rpc_users.py",
      "position" : null,
      "pull_request_review_id" : 257818380,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
      "updated_at" : "2019-07-08T20:13:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300220844",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1562849?v=4",
         "events_url" : "https://api.github.com/users/fqlx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fqlx/followers",
         "following_url" : "https://api.github.com/users/fqlx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fqlx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fqlx",
         "id" : 1562849,
         "login" : "fqlx",
         "node_id" : "MDQ6VXNlcjE1NjI4NDk=",
         "organizations_url" : "https://api.github.com/users/fqlx/orgs",
         "received_events_url" : "https://api.github.com/users/fqlx/received_events",
         "repos_url" : "https://api.github.com/users/fqlx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fqlx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fqlx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fqlx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300342323"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300342323"
         }
      },
      "author_association" : "MEMBER",
      "body" : "it's arbitrary, but the thinking is: if it can handle emoji, it can handle any UTF symbol",
      "commit_id" : "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "created_at" : "2019-07-04T10:45:54Z",
      "diff_hunk" : "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuserð»:rpcpasswordð\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuserð»\", \"rpcpasswordð\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300342323",
      "id" : 300342323,
      "in_reply_to_id" : 300220844,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDM0MjMyMw==",
      "original_commit_id" : "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "original_position" : 213,
      "path" : "test/functional/rpc_users.py",
      "position" : null,
      "pull_request_review_id" : 257970677,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
      "updated_at" : "2019-07-08T20:13:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300342323",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300399720"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300399720"
         }
      },
      "author_association" : "NONE",
      "body" : "Just because it can handle emojis doesn't mean it's a good idea to use. Can we remove them?",
      "commit_id" : "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "created_at" : "2019-07-04T13:30:40Z",
      "diff_hunk" : "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuserð»:rpcpasswordð\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuserð»\", \"rpcpasswordð\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300399720",
      "id" : 300399720,
      "in_reply_to_id" : 300220844,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDM5OTcyMA==",
      "original_commit_id" : "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "original_position" : 213,
      "path" : "test/functional/rpc_users.py",
      "position" : null,
      "pull_request_review_id" : 258044877,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
      "updated_at" : "2019-07-08T20:13:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300399720",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1562849?v=4",
         "events_url" : "https://api.github.com/users/fqlx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fqlx/followers",
         "following_url" : "https://api.github.com/users/fqlx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fqlx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fqlx",
         "id" : 1562849,
         "login" : "fqlx",
         "node_id" : "MDQ6VXNlcjE1NjI4NDk=",
         "organizations_url" : "https://api.github.com/users/fqlx/orgs",
         "received_events_url" : "https://api.github.com/users/fqlx/received_events",
         "repos_url" : "https://api.github.com/users/fqlx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fqlx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fqlx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fqlx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300402590"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300402590"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We are already using emojis elsewhere in the functional test suite.\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/413e438ea9767710d4810c4400fd1242ca52cd1c/test/functional/test_runner.py#L255",
      "commit_id" : "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "created_at" : "2019-07-04T13:37:27Z",
      "diff_hunk" : "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuserð»:rpcpasswordð\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuserð»\", \"rpcpasswordð\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300402590",
      "id" : 300402590,
      "in_reply_to_id" : 300220844,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDQwMjU5MA==",
      "original_commit_id" : "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "original_position" : 213,
      "path" : "test/functional/rpc_users.py",
      "position" : null,
      "pull_request_review_id" : 258048645,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
      "updated_at" : "2019-07-08T20:13:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300402590",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300455609"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300455609"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Emojis are UTF symbols. It is good to test that we are able to handle UTF symbols, especially in places that people may have entered them such as the configuration files where there may be UTF symbols in passwords or file paths. As such, it would be detrimental to remove them as otherwise we are losing the tests for these.",
      "commit_id" : "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "created_at" : "2019-07-04T16:05:31Z",
      "diff_hunk" : "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuserð»:rpcpasswordð\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuserð»\", \"rpcpasswordð\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300455609",
      "id" : 300455609,
      "in_reply_to_id" : 300220844,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDQ1NTYwOQ==",
      "original_commit_id" : "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "original_position" : 213,
      "path" : "test/functional/rpc_users.py",
      "position" : null,
      "pull_request_review_id" : 258115619,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
      "updated_at" : "2019-07-08T20:13:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300455609",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300463085"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300463085"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed.",
      "commit_id" : "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "created_at" : "2019-07-04T16:42:44Z",
      "diff_hunk" : "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300463085",
      "id" : 300463085,
      "in_reply_to_id" : 300216890,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDQ2MzA4NQ==",
      "original_commit_id" : "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "original_position" : 158,
      "path" : "test/functional/rpc_users.py",
      "position" : null,
      "pull_request_review_id" : 258125366,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
      "updated_at" : "2019-07-08T20:13:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300463085",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300801422"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300801422"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "You don't clarify why it is not a good idea, so I am not sure what you are getting at. But in general, I would add that it would be better to have an explicit test for the usage of UTF symbols and not an implicit test within another test.",
      "commit_id" : "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "created_at" : "2019-07-05T21:45:40Z",
      "diff_hunk" : "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuserð»:rpcpasswordð\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuserð»\", \"rpcpasswordð\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300801422",
      "id" : 300801422,
      "in_reply_to_id" : 300220844,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgwMTQyMg==",
      "original_commit_id" : "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "original_position" : 213,
      "path" : "test/functional/rpc_users.py",
      "position" : null,
      "pull_request_review_id" : 258555969,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
      "updated_at" : "2019-07-08T20:13:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300801422",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300803217"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300803217"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "While I agree that separating tests for \"if `rpcuser`/`rpcpassword` works at all\" from \"if `rpcuser`/`rpcpassword` works with UTF-8\" is worthwhile, it is beyond the scope of this PR.\r\n\r\nHowever, this separation looks like an easy enough change, and perhaps if @fjahr or @fqlx feel strongly about this they can take this up in a separate PR.",
      "commit_id" : "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "created_at" : "2019-07-05T22:00:56Z",
      "diff_hunk" : "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuserð»:rpcpasswordð\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuserð»\", \"rpcpasswordð\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300803217",
      "id" : 300803217,
      "in_reply_to_id" : 300220844,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgwMzIxNw==",
      "original_commit_id" : "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "original_position" : 213,
      "path" : "test/functional/rpc_users.py",
      "position" : null,
      "pull_request_review_id" : 258558102,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
      "updated_at" : "2019-07-08T20:13:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300803217",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300841063"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300841063"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: Why do you generate a random username here instead of just hardcoding one?",
      "commit_id" : "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "created_at" : "2019-07-06T19:54:55Z",
      "diff_hunk" : "@@ -28,15 +39,24 @@ def set_test_params(self):\n     def setup_chain(self):\n         super().setup_chain()\n         #Append rpcauth to bitcoin.conf before initialization\n+        self.rtpassword = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n         rpcauth = \"rpcauth=rt:93648e835a54c573682c2eb19f882535$7681e9c5b74bdd85e78166031d2058e1069b3ed7ed967c93fc63abba06f31144\"\n-        rpcauth2 = \"rpcauth=rt2:f8607b1a88861fac29dfccf9b52ff9f$ff36a0c23c8c62b4846112e50fa888416e94c17bfd4c42f88fd8f55ec6a3137e\"\n-        rpcuser = \"rpcuser=rpcuserð»\"\n-        rpcpassword = \"rpcpassword=rpcpasswordð\"\n \n-        self.user = ''.join(SystemRandom().choice(string.ascii_letters + string.digits) for _ in range(10))\n+        self.rpcuser = \"rpcuserð»\"\n+        self.rpcpassword = \"rpcpasswordð\"\n+\n         config = configparser.ConfigParser()\n         config.read_file(open(self.options.configfile))\n         gen_rpcauth = config['environment']['RPCAUTH']\n+\n+        # Generate RPCAUTH with specified password\n+        self.rt2password = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n+        p = subprocess.Popen([sys.executable, gen_rpcauth, 'rt2', self.rt2password], stdout=subprocess.PIPE, universal_newlines=True)\n+        lines = p.stdout.read().splitlines()\n+        rpcauth2 = lines[1]\n+\n+        # Generate RPCAUTH without specifying password\n+        self.user = ''.join(SystemRandom().choice(string.ascii_letters + string.digits) for _ in range(10))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300841063",
      "id" : 300841063,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg0MTA2Mw==",
      "original_commit_id" : "1d5312a9ada85af025f2e92b50a4bdaab3955a11",
      "original_position" : 43,
      "path" : "test/functional/rpc_users.py",
      "position" : 43,
      "pull_request_review_id" : 258600455,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
      "updated_at" : "2019-07-08T20:13:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300841063",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300841084"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300841084"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: Could this not also use the `test_auth` function?",
      "commit_id" : "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "created_at" : "2019-07-06T19:55:45Z",
      "diff_hunk" : "@@ -47,160 +67,42 @@ def setup_chain(self):\n             f.write(rpcauth2+\"\\n\")\n             f.write(rpcauth3+\"\\n\")\n         with open(os.path.join(get_datadir_path(self.options.tmpdir, 1), \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n-            f.write(rpcuser+\"\\n\")\n-            f.write(rpcpassword+\"\\n\")\n-\n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n+            f.write(\"rpcuser={}\\n\".format(self.rpcuser))\n+            f.write(\"rpcpassword={}\\n\".format(self.rpcpassword))\n \n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300841084",
      "id" : 300841084,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg0MTA4NA==",
      "original_commit_id" : "1d5312a9ada85af025f2e92b50a4bdaab3955a11",
      "original_position" : 169,
      "path" : "test/functional/rpc_users.py",
      "position" : null,
      "pull_request_review_id" : 258600455,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
      "updated_at" : "2019-07-08T20:13:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300841084",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300847134"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300847134"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done!",
      "commit_id" : "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "created_at" : "2019-07-07T01:54:25Z",
      "diff_hunk" : "@@ -47,160 +67,42 @@ def setup_chain(self):\n             f.write(rpcauth2+\"\\n\")\n             f.write(rpcauth3+\"\\n\")\n         with open(os.path.join(get_datadir_path(self.options.tmpdir, 1), \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n-            f.write(rpcuser+\"\\n\")\n-            f.write(rpcpassword+\"\\n\")\n-\n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n+            f.write(\"rpcuser={}\\n\".format(self.rpcuser))\n+            f.write(\"rpcpassword={}\\n\".format(self.rpcpassword))\n \n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300847134",
      "id" : 300847134,
      "in_reply_to_id" : 300841084,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg0NzEzNA==",
      "original_commit_id" : "1d5312a9ada85af025f2e92b50a4bdaab3955a11",
      "original_position" : 169,
      "path" : "test/functional/rpc_users.py",
      "position" : null,
      "pull_request_review_id" : 258606666,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
      "updated_at" : "2019-07-08T20:13:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300847134",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300847144"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300847144"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Cuz it was originally done this way. Not really within scope but good catch!",
      "commit_id" : "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "created_at" : "2019-07-07T01:55:01Z",
      "diff_hunk" : "@@ -28,15 +39,24 @@ def set_test_params(self):\n     def setup_chain(self):\n         super().setup_chain()\n         #Append rpcauth to bitcoin.conf before initialization\n+        self.rtpassword = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n         rpcauth = \"rpcauth=rt:93648e835a54c573682c2eb19f882535$7681e9c5b74bdd85e78166031d2058e1069b3ed7ed967c93fc63abba06f31144\"\n-        rpcauth2 = \"rpcauth=rt2:f8607b1a88861fac29dfccf9b52ff9f$ff36a0c23c8c62b4846112e50fa888416e94c17bfd4c42f88fd8f55ec6a3137e\"\n-        rpcuser = \"rpcuser=rpcuserð»\"\n-        rpcpassword = \"rpcpassword=rpcpasswordð\"\n \n-        self.user = ''.join(SystemRandom().choice(string.ascii_letters + string.digits) for _ in range(10))\n+        self.rpcuser = \"rpcuserð»\"\n+        self.rpcpassword = \"rpcpasswordð\"\n+\n         config = configparser.ConfigParser()\n         config.read_file(open(self.options.configfile))\n         gen_rpcauth = config['environment']['RPCAUTH']\n+\n+        # Generate RPCAUTH with specified password\n+        self.rt2password = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n+        p = subprocess.Popen([sys.executable, gen_rpcauth, 'rt2', self.rt2password], stdout=subprocess.PIPE, universal_newlines=True)\n+        lines = p.stdout.read().splitlines()\n+        rpcauth2 = lines[1]\n+\n+        # Generate RPCAUTH without specifying password\n+        self.user = ''.join(SystemRandom().choice(string.ascii_letters + string.digits) for _ in range(10))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300847144",
      "id" : 300847144,
      "in_reply_to_id" : 300841063,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg0NzE0NA==",
      "original_commit_id" : "1d5312a9ada85af025f2e92b50a4bdaab3955a11",
      "original_position" : 43,
      "path" : "test/functional/rpc_users.py",
      "position" : 43,
      "pull_request_review_id" : 258606678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
      "updated_at" : "2019-07-08T20:13:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300847144",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r301096819"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301096819"
         }
      },
      "author_association" : "MEMBER",
      "body" : "UTF handling is not optional in this day and age. I think we should keep this as-is.",
      "commit_id" : "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "created_at" : "2019-07-08T13:36:50Z",
      "diff_hunk" : "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuserð»:rpcpasswordð\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuserð»\", \"rpcpasswordð\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r301096819",
      "id" : 301096819,
      "in_reply_to_id" : 300220844,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTA5NjgxOQ==",
      "original_commit_id" : "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "original_position" : 213,
      "path" : "test/functional/rpc_users.py",
      "position" : null,
      "pull_request_review_id" : 258906214,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
      "updated_at" : "2019-07-08T20:13:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301096819",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Looks like the \"tidy up run_test\" commit was duplicated!\r\n\r\n> Good refactoring! Ran test locally, checked that they could fail, reviewed code.\r\n\r\nThanks for reviewing/testing.",
      "created_at" : "2019-07-08T13:39:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16334#issuecomment-509228982",
      "id" : 509228982,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16334",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwOTIyODk4Mg==",
      "updated_at" : "2019-07-08T13:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/509228982",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Looks like the \"tidy up run_test\" commit was duplicated!\r\n> \r\n> > Good refactoring! Ran test locally, checked that they could fail, reviewed code.\r\n> \r\n> Thanks for reviewing/testing.\r\n\r\nOh they're not duplicates, both tidy-ups but easier to review when separate. :-) I'm gunna squash everything together after review.",
      "created_at" : "2019-07-08T14:05:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16334#issuecomment-509239145",
      "id" : 509239145,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16334",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwOTIzOTE0NQ==",
      "updated_at" : "2019-07-08T14:05:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/509239145",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think they should be kept separate commits, to make review after merge easier and preserve history for future reference.",
      "created_at" : "2019-07-08T17:02:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16334#issuecomment-509308984",
      "id" : 509308984,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16334",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwOTMwODk4NA==",
      "updated_at" : "2019-07-08T17:02:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/509308984",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Since we're not squashing, I reworded the commit messages to be more descriptive and rebased.",
      "created_at" : "2019-07-08T20:14:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16334#issuecomment-509374679",
      "id" : 509374679,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16334",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwOTM3NDY3OQ==",
      "updated_at" : "2019-07-08T20:14:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/509374679",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "created_at" : "2019-07-12T19:28:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16334#issuecomment-511005775",
      "id" : 511005775,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16334",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxMTAwNTc3NQ==",
      "updated_at" : "2019-07-12T19:28:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/511005775",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
