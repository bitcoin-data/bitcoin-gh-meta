[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12120#discussion_r160370858"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12120"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160370858"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ÃÂµnit ``Only use `auto` if it ...``",
      "commit_id" : "9398b3d2dbaa35f1f029d4072dad9282920430c8",
      "created_at" : "2018-01-09T10:36:54Z",
      "diff_hunk" : "@@ -39,6 +39,7 @@ code.\n   - `++i` is preferred over `i++`.\n   - `nullptr` is preferred over `NULL` or `(void*)0`.\n   - `static_assert` is preferred over `assert` where possible. Generally; compile-time checking is preferred over run-time checking.\n+  - Do not use `auto` unless it saves significant typing/reading or in method signatures where it makes the method more flexible.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12120#discussion_r160370858",
      "id" : 160370858,
      "original_commit_id" : "9398b3d2dbaa35f1f029d4072dad9282920430c8",
      "original_position" : 4,
      "path" : "doc/developer-notes.md",
      "position" : 4,
      "pull_request_review_id" : 87473666,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12120",
      "updated_at" : "2018-01-09T10:37:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160370858",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "\"auto\" in method signatures in C++11 is only allowed when still specifying the return type explicitly (auto fn(args...) -> returntype notation). Is that what you're referring to?",
      "created_at" : "2018-01-09T10:45:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12120#issuecomment-356248430",
      "id" : 356248430,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12120",
      "updated_at" : "2018-01-09T10:45:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/356248430",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Ok, amended to say \"or if it is critical to the functionality of the code\", nice big loophole but if it really matters somewhere of course people can use it.",
      "created_at" : "2018-01-09T21:55:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12120#issuecomment-356426756",
      "id" : 356426756,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12120",
      "updated_at" : "2018-01-09T21:55:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/356426756",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 6e1fa4e50d99803b7150891cc53761191303bacf",
      "created_at" : "2018-01-10T10:16:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12120#issuecomment-356558107",
      "id" : 356558107,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12120",
      "updated_at" : "2018-01-10T10:16:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/356558107",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This seems like it would be better if it was a bit more explicit/objective about what's acceptable:\r\n\r\n> Use of `auto` outside of unit tests should be limited to the following circumstances in order to avoid hiding type information:\r\n>      * range-based for loops, eg `for (const auto& i : vFoo)`\r\n>      * when dealing with iterators in general, eg `auto it = vFoo.rbegin()`\r\n>      * when creating a closure/lambda\r\n>      * in templates, where necessary\r\n>      * when using a variable as read-only alias of a long expression, eg `const auto x = long(expression())`\r\n\r\nPresumably overusing auto in unit tests isn't a big deal and the first four bullet points are uncontroversial? \r\n\r\nPresumably the last one is what irritates @TheBlueMatt, so shouldn't be there, and places in the code that currently use it should get converted to specifying an actual type.\r\n\r\nFWIW, in current master, usage of auto seems to pretty much match up with the list above so not having loopholes seems practical:\r\n\r\n* A bunch of uses in C++11 for loops (133):\r\n     - for (const auto& foo : bar) -- 7 in *.h, 94 in *.cpp\r\n     - for (auto&& foo : bar) and for (auto& foo:bar)-- 4 in net.h, 1 in undo.h, 16 in *.cpp\r\n     - for (auto foo : bar) -- 1 in reverse_iterator.h, 9 in *.cpp\r\n     - for (const auto foo : bar) -- 1 in rpc/blockchain.cpp\r\n* A bunch of uses with iterators (72):\r\n     - auto it = foo.find(bar) -- 47 in *.cpp\r\n     - auto it = foo.begin() (or rbegin) -- 11 in *.cpp\r\n     - for (auto x = foo.begin(); ..) (or rbegin) -- 6 in *.cpp\r\n     - another 8 that are probably iterator related: \r\n```\r\n./support/lockedpool.cpp:    auto it = std::find_if(chunks_free.begin(), chunks_free.end(),\r\n./support/lockedpool.cpp:    auto next = chunks_free.upper_bound(freed.first);\r\n./support/lockedpool.cpp:    auto alloced = chunks_used.emplace(it->first + it->second - size, size).first;\r\n./txmempool.cpp:        auto iter = mapNextTx.lower_bound(COutPoint(hash, 0));\r\n./txmempool.cpp:        auto iter = mapNextTx.lower_bound(COutPoint(it->GetTx().GetHash(), 0));\r\n./txmempool.cpp:    auto iters = GetSortedDepthAndScore();\r\n./txmempool.cpp:    auto iters = GetSortedDepthAndScore();\r\n./wallet/wallet.cpp:    auto iter = mapTxSpends.lower_bound(COutPoint(txid, 0));\r\n```\r\n* Shortcuts in bench/ and test/ (48)\r\n     - for (auto x = 0; ...) -- 12 of them.. weird\r\n     - 36 others\r\n* Aliasing (22)\r\n     - const auto foo = bar; -- 22 in *.cpp\r\n* Usage with closures/lambdas (4):\r\n     - auto foo = \\[...\\](...) { ... } -- 4 in *.cpp\r\n* Usage with templates (3):\r\n     - template return values -- 3 in reverse_iterator.h\r\n* And 14 others in non-bench non-test *.cpp:\r\n```\r\n./base58.cpp:    auto bech = bech32::Decode(str);     // pair<string,vector<uint8>>\r\n./httpserver.cpp:    auto req_copy = req;    // struct evhttp_request *\r\n./net_processing.cpp:    auto ret = mapOrphanTransactions.emplace(hash, COrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME});  // pair<iterator,bool>\r\n./net_processing.cpp:                auto txinfo = mempool.info(inv.hash);  // TxMempoolInfo\r\n./net_processing.cpp:                auto vtxinfo = mempool.infoAll();  // vector<TxMempoolInfo>\r\n./net_processing.cpp:                    auto txinfo = mempool.info(hash);  // TxMempoolInfo\r\n./net_processing.cpp:                        auto ret = mapRelay.insert(std::make_pair(hash, std::move(txinfo.tx))); // pair<iterator,bool>\r\n./qt/optionsmodel.cpp:            auto ip_port = GetProxySetting(settings, \"addrProxy\"); // ProxySetting\r\n./qt/optionsmodel.cpp:            auto ip_port = GetProxySetting(settings, \"addrProxy\");\r\n./qt/optionsmodel.cpp:            auto ip_port = GetProxySetting(settings, \"addrSeparateProxyTor\");\r\n./qt/optionsmodel.cpp:            auto ip_port = GetProxySetting(settings, \"addrSeparateProxyTor\");\r\n./qt/paymentserver.cpp:                auto tempChainParams = CreateChainParams(CBaseChainParams::MAIN); // unique_ptr<CChainParams>\r\n./qt/walletmodel.cpp:        auto& resultGroup = mapCoins[QString::fromStdString(EncodeDestination(group.first))]; // COutput\r\n./support/lockedpool.cpp:    auto freed = *i; // pair<char* const, size_t>\r\n```\r\n",
      "created_at" : "2018-01-11T02:15:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12120#issuecomment-356802746",
      "id" : 356802746,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12120",
      "updated_at" : "2018-01-11T02:26:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/356802746",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "* Honestly I'm really not a big fan of use in for loops either.\r\n* I don't think \"iterators in general\" is a reasonable metric, the metric is still readability-based - if the iterator is short (which they rarely are) it could still be more readable to type it out, if the iterator is a mile long (which they usually are) its obviously less readable.\r\n* Same for a lambda.\r\n* I'd strongly prefer if *nothing* used auto in return types, not just in templates. It makes review much, much harder.\r\n* Again, its all about readability. Just because an expression is long does not mean it should use auto, the example I cited was to use auto for this precise reason but I found it quite annoying.\r\n\r\nAs for unit tests, I dont see why unit tests should be an exception, though we often simply dont apply style guidelines on unit tests anyway just because they have a lower bar.",
      "created_at" : "2018-01-11T16:19:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12120#issuecomment-356979104",
      "id" : 356979104,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12120",
      "updated_at" : "2018-01-11T16:19:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/356979104",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The main difference I see between \"auto x = FunctionCall(foo);\" and \"auto x = foo.begin()\" or \"for (auto x : foo)\" is you can get a good expectation of the inferred type locally -- you just have to look back to the recent declaration of foo to know what convention implies the type of x will be; while with the function call you have to search header files for FunctionCall's declaration.\r\n\r\nLambdas/closures are similar in that their definition is right there, with the added problem that they have anonymous types in the first place, and apparently converting them to something you can write out has a performance hit.\r\n\r\nI don't see what's ambiguous or confusing about \"auto begin() const -> decltype(this->m_x.rbegin())\", or how it's hard to review, or how you'd rewrite it to be better? C++14 type inference from the returned value would be worse though.\r\n\r\nI do agree with your rationale here (more so after reviewing how auto's actually used), but \"readability\" is very subjective -- if I weren't following this discussion, I'd probably think \"const auto& x = Blah();\" \"saves significant reading\" compared to \"const std::map<std::string,std::vector<std::string>>& x = Blah();\" and end up violating the style guidelines while trying to comply with them. Getting called out for it during review would then be kind of irritating.\r\n\r\nFor the record, I had a go at a patch to switch unnecessary uses of auto to explicit types, at https://github.com/TheBlueMatt/bitcoin/pull/9",
      "created_at" : "2018-01-12T00:11:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12120#issuecomment-357103288",
      "id" : 357103288,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12120",
      "updated_at" : "2018-01-12T00:11:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/357103288",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I generally disagree with discouraging 'auto' unless it completely obscures away the type.\r\n\r\nSee #12169 for a perfect example of the types of mistakes it can obsolete.",
      "created_at" : "2018-01-12T22:06:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12120#issuecomment-357367726",
      "id" : 357367726,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12120",
      "updated_at" : "2018-01-12T22:06:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/357367726",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "> I generally disagree with discouraging 'auto' unless it completely obscures away the type.\r\n\r\nI agree here. `auto` was a great addition, it both saves typing and verbosity while reading code. Yes, sometimes auto makes reviewing harder, in those specific cases do make a review comment, but right now this is a blanket discouragement that doesn't give any specific advice or rationale. So tend to NACK.\r\n\r\nIf you'd describe in the document specific uses of auto that you disagree with, and why, I think this could be a more useful discussion.",
      "created_at" : "2018-01-15T08:17:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12120#issuecomment-357610697",
      "id" : 357610697,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12120",
      "updated_at" : "2018-01-15T08:21:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/357610697",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : ">  it both saves typing and verbosity while reading code.\r\n> this is a blanket discouragement that doesn't give any specific advice or rationale\r\n\r\nHuh? This isn't a \"blanket discouragement\", it specifically calls out places where readability is better as places where auto is fine. I'm happy to reword it if you think it reads as a blanket discouragement, but that isn't the point.\r\n\r\nOn the other hand, I find the \"readability\" argument suspect except for cases like iterators and anonymous functions, though the \"no implicit conversion\" feature is quite nice, I'm less-than-convinced its worth trading being explicit to get it.",
      "created_at" : "2018-01-15T18:45:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12120#issuecomment-357761227",
      "id" : 357761227,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12120",
      "updated_at" : "2018-01-15T18:45:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/357761227",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "> This isn't a \"blanket discouragement\"\r\n\r\nTo me it reads like a blanket discouragement, because you are just adding a line and not quoting any specific cases. It amounts to \"don't use language feature X unnecessarily\" which should be unnecessary to state.",
      "created_at" : "2018-01-29T13:16:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12120#issuecomment-361242154",
      "id" : 361242154,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12120",
      "updated_at" : "2018-01-29T13:16:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/361242154",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Closing for now due to inactivity",
      "created_at" : "2018-02-10T19:11:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12120#issuecomment-364681551",
      "id" : 364681551,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12120",
      "updated_at" : "2018-02-10T19:11:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364681551",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
