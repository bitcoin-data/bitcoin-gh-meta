[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12152#discussion_r160971211"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160971211"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm not using this. Will remove unless someone wants to keep it.",
      "commit_id" : "8af73179c3fe64eb1ac15ac180598cd7dc1e1c01",
      "created_at" : "2018-01-11T14:20:43Z",
      "diff_hunk" : "@@ -20,17 +22,23 @@ while getopts \":hfrd\" opt; do\n       echo \"  -f   Configure for functional tests\"\n       echo \"  -r   Remove existing directory\"\n       echo \"  -d   Use depends\"\n+      echo \"  -b   configure --with-incompatible-bdb\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12152#discussion_r160971211",
      "id" : 160971211,
      "original_commit_id" : "2d4cce594eabdf82aed10ffc133f977cdc780b51",
      "original_position" : 16,
      "path" : "contrib/devtools/previous_release.sh",
      "position" : null,
      "pull_request_review_id" : 88181768,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12152",
      "updated_at" : "2018-01-11T18:22:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160971211",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12152#discussion_r161035284"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161035284"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@sipa I'm not sure how to interpret scenario 1. It seems that, for keys generated after a backup was made, funds are irretrievable if the user doesn't create the correct address type for each new key. Is this a bug?",
      "commit_id" : "8af73179c3fe64eb1ac15ac180598cd7dc1e1c01",
      "created_at" : "2018-01-11T18:21:10Z",
      "diff_hunk" : "@@ -0,0 +1,212 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Downgrade functional test\n+\n+Test various downgrade scenarios. Compile the previous node binaries:\n+\n+contrib/devtools/previous_release.sh -f v0.15.1 v0.14.2\n+\n+Due to RPC changes introduced in v0.14 the below tests won't work for older\n+versions without some patches or workarounds.\n+\n+Use only the latest patch version of each release, unless a test specifically\n+needs an older patch version.\n+\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_not_equal,\n+    assert_raises,\n+    sync_blocks,\n+    connect_nodes\n+)\n+from shutil import copy2\n+\n+# Node alias:\n+V0_15 = 2\n+V0_14 = 3\n+\n+class DowngradeTest(BitcoinTestFramework):\n+\n+    \n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        # TODO: add new version after each release\n+        self.extra_args = [\n+            [], # Pre-release: use to mine blocks\n+            [], # Pre-release: use to receive coins, swap wallets, etc\n+            [\"-vbparams=segwit:0:0\", \"-vbparams=csv:0:0\"], # v0.15.1\n+            [\"-vbparams=segwit:0:0\", \"-vbparams=csv:0:0\"], # v0.14.2\n+        ]\n+\n+    def setup_nodes(self):\n+        self.add_nodes(self.num_nodes, extra_args=self.extra_args, binary=[\n+            None,\n+            None,\n+            \"build/releases/v0.15.1/src/bitcoind\",\n+            \"build/releases/v0.14.2/src/bitcoind\",\n+        ])\n+        self.start_nodes()\n+    \n+    def node_wallet_path(self, node):\n+        # TODO:\n+        # * make part of test framework\n+        # * avoid hardcoded path\n+        # * don't hardcode node version\n+\n+        if (node < 2): # >= v0.16\n+            return self.nodes[1].datadir + \"/regtest/wallets/wallet.dat\"\n+        else: # <= v0.15\n+            return self.nodes[node].datadir + \"/regtest/wallet.dat\"\n+    \n+    def backup_wallet_push(self, node):\n+        # TODO: actually stack backups\n+        # TODO: use dynamic wallet load / unload once merged\n+        self.stop_node(node)\n+        copy2(self.node_wallet_path(node), self.node_wallet_path(node) + \"-backup\")\n+        self.start_node(node)\n+        connect_nodes(self.nodes[node - 1], node)\n+        connect_nodes(self.nodes[node], node + 1)\n+    \n+    def backup_wallet_pop(self, node):\n+        # TODO: actually pop backup stack\n+        # TODO: use dynamic wallet load / unload once merged\n+        copy2(self.node_wallet_path(node) + \"-backup\", self.node_wallet_path(node))\n+        # TODO: start node and restore connections\n+    \n+    def copy_wallet(self, origin, destination):\n+        # TODO: make part of test framework\n+        # TODO: use dynamic wallet load / unload once merged\n+\n+        self.stop_node(origin)\n+        self.stop_node(destination)\n+        copy2(self.node_wallet_path(origin), self.node_wallet_path(destination))\n+        self.start_node(origin)\n+        self.start_node(destination)\n+        connect_nodes(self.nodes[origin - 1], origin)\n+        connect_nodes(self.nodes[origin], origin + 1)\n+        connect_nodes(self.nodes[destination - 1], destination)\n+        connect_nodes(self.nodes[destination], destination + 1)\n+        sync_blocks(self.nodes)\n+\n+    def run_test(self):\n+        self.nodes[0].generate(101)\n+\n+        sync_blocks(self.nodes)\n+\n+        # Santity check the test framework:\n+        res = self.nodes[self.num_nodes - 1].getblockchaininfo()\n+        assert_equal(res['blocks'], 101)\n+        \n+        # Check that v0.16 wallet can't be used on v0.15 node\n+        # TODO: use v0.16 node after release\n+        self.backup_wallet_push(V0_15)\n+        self.log.debug(\"Expecting bitcoind to fail with:\")\n+        self.log.debug(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin Core\")\n+        # TODO: use something like assert_raises_process_error to check\n+        #       specific bitcoind launch error \n+        assert_raises(AssertionError, lambda: self.copy_wallet(1,V0_15))\n+        self.log.info('Restoring backup')\n+        self.backup_wallet_pop(V0_15)\n+        self.start_node(V0_15)\n+        connect_nodes(self.nodes[V0_15 - 1], V0_15)\n+        connect_nodes(self.nodes[V0_15], V0_15 + 1)\n+        sync_blocks(self.nodes)\n+        \n+        # Upgrade v0.15.1 wallet from node2 on node1\n+        self.copy_wallet(V0_15,1)\n+        \n+        # SegWit wallet related scenarios from gist:\n+        # https://gist.github.com/sipa/125cfa1615946d0c3f3eec2ad7f250a2#segwit-wallet-support\n+        # 1) make backup, upgrade, create segwit address, restore from backup\n+        # 2) upgrade, make backup, downgrade, restore backup\n+        # 3) upgrade, new address, downgrade: P2SH-P2WPKH should still exist\n+        # 4) backup, upgrade, new address, downgrade, restore backup: not supported\n+        # 5) upgrade, backup, new address, receive coins, restore backup, downgrade\n+\n+        # Generate and fund a legacy, segwit-p2sh and bech32 address on node1\n+        address1 = self.nodes[1].getnewaddress(account=\"legacy\", address_type='legacy')\n+        address2 = self.nodes[1].getnewaddress(account=\"p2sh\", address_type='p2sh-segwit')\n+        address3 = self.nodes[1].getnewaddress(account=\"p2sh-nocoin\", address_type='p2sh-segwit')\n+        address4 = self.nodes[1].getnewaddress(account=\"bech32\", address_type='bech32')\n+        self.nodes[0].sendtoaddress(address1, 1)\n+        self.nodes[0].sendtoaddress(address2, 1)\n+        # no coins sent to address3\n+        self.nodes[0].sendtoaddress(address4, 1)\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+        assert_equal(self.nodes[1].getbalance(\"legacy\"), 1)\n+        assert_equal(self.nodes[1].getbalance(\"p2sh\"), 1)\n+        assert_equal(self.nodes[1].getbalance(\"bech32\"), 1)\n+\n+        # Copy node1 wallet to node2 and check v0.15.1 can still spend this:\n+        assert_equal(self.nodes[V0_15].getbalance(\"legacy\"), 0)\n+        assert_equal(self.nodes[V0_15].getbalance(\"p2sh\"), 0)\n+        assert_equal(self.nodes[V0_15].getbalance(\"bech32\"), 0)\n+\n+        self.copy_wallet(1,V0_15)\n+        assert_equal(self.nodes[V0_15].getbalance(\"legacy\"), 1)\n+        assert_equal(self.nodes[V0_15].getbalance(\"p2sh\"), 1) # Scenario 3\n+        \n+        # bech32 account will appear empty:\n+        assert_equal(self.nodes[V0_15].getbalance(\"bech32\"), 0) \n+        \n+        # Check address formats:\n+        assert_equal(self.nodes[V0_15].getaddressesbyaccount(\"legacy\"), [address1]) \n+        assert_equal(self.nodes[V0_15].getaddressesbyaccount(\"p2sh\"), [address2]) \n+        \n+        # bech32 address is corrupted until the next upgrade:\n+        assert_equal(self.nodes[V0_15].getaddressesbyaccount(\"bech32\"), [\"3QJmnh\"])\n+        \n+        # Scenario 1: create and fund address on node 1 before we override with backup\n+        address5 = self.nodes[1].getnewaddress(account=\"p2sh-post-backup\", address_type='p2sh-segwit')\n+        address6 = self.nodes[1].getnewaddress(account=\"bech32-post-backup\", address_type='bech32')\n+        address7 = self.nodes[1].getnewaddress(account=\"p2sh-disappear\", address_type='p2sh-segwit')\n+        self.nodes[0].sendtoaddress(address5, 1)\n+        self.nodes[0].sendtoaddress(address6, 1)\n+        self.nodes[0].sendtoaddress(address7, 1)\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+        assert_equal(self.nodes[1].getbalance(\"p2sh-post-backup\"), 1)\n+        assert_equal(self.nodes[1].getbalance(\"bech32-post-backup\"), 1)\n+        assert_equal(self.nodes[1].getbalance(\"p2sh-disappear\"), 1)\n+\n+        # Upgrade back to v0.16 by copying to node1:\n+        # TODO: use v0.16 node after release\n+        self.copy_wallet(V0_15,1)\n+\n+        assert_equal(self.nodes[1].getbalance(\"legacy\"), 1)\n+        assert_equal(self.nodes[1].getbalance(\"p2sh\"), 1) # Scenerio 5\n+\n+        # Scenario 2\n+        assert_equal(self.nodes[1].getaddressesbyaccount(\"p2sh-nocoin\"), [address3])\n+        \n+        # bech32 account should show funds again (scenerio 2):\n+        assert_equal(self.nodes[1].getbalance(\"bech32\"), 1) \n+        \n+        # bech32 address format should be restored:\n+        assert_equal(self.nodes[1].getaddressesbyaccount(\"bech32\"), [address4])\n+        \n+        # Check scenario 1, SegWit addresses should come back, even if not explictly requested:\n+        self.nodes[1].getnewaddress(account=\"p2sh-post-backup\", address_type='p2sh-segwit')\n+        assert_equal(self.nodes[1].getaddressesbyaccount(\"p2sh-post-backup\"), [address5])\n+        self.nodes[1].getnewaddress(account=\"bech32-post-backup\", address_type='bech32')\n+        assert_equal(self.nodes[1].getaddressesbyaccount(\"bech32-post-backup\"), [address6])\n+        \n+        self.nodes[1].getnewaddress(account=\"p2sh-disappear\", address_type='bech32') # wrong type!\n+        self.nodes[1].getnewaddress(account=\"p2sh-disappear\", address_type='p2sh-segwit') # next key...\n+        assert_not_equal(self.nodes[1].getaddressesbyaccount(\"p2sh-disappear\"), [address7])\n+        assert_equal(self.nodes[1].getbalance(\"p2sh-disappear\"), 0)\n+\n+        # Balance won't immedidately update:\n+        self.nodes[1].rescanblockchain()\n+        assert_equal(self.nodes[1].getbalance(\"p2sh-post-backup\"), 1)\n+        assert_equal(self.nodes[1].getbalance(\"bech32-post-backup\"), 1) \n+        assert_equal(self.nodes[1].getbalance(\"p2sh-disappear\"), 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12152#discussion_r161035284",
      "id" : 161035284,
      "original_commit_id" : "ec4268aaeb4ffb1dff27b06cad5bfea28bde3fdc",
      "original_position" : 209,
      "path" : "test/functional/backwards_compatibility.py",
      "position" : 209,
      "pull_request_review_id" : 88259054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12152",
      "updated_at" : "2018-01-11T18:22:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/161035284",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I need to rewrite these tests so they don't use the account feature. See also [IRC log](https://botbot.me/freenode/bitcoin-core-dev/2018-01-12/?msg=95679098&page=3).",
      "created_at" : "2018-01-12T14:33:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12152#issuecomment-357253552",
      "id" : 357253552,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12152",
      "updated_at" : "2018-01-12T14:33:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/357253552",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Given that this has been work in progress for a few months, and \"I need to rewrite these tests so they don't use the account feature\", I'm closing this for now. Can be re-opened after it's been re-written and rebased. Review can be focussed on #12134 as well.",
      "created_at" : "2018-04-26T12:46:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12152#issuecomment-384628319",
      "id" : 384628319,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12152",
      "updated_at" : "2018-04-26T12:46:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384628319",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   }
]
