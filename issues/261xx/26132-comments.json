[
   {
      "author_association" : "MEMBER",
      "body" : "To reproduce (intermittently) on a fresh install of Ubuntu Kinetic:\r\n\r\nInstall: `export DEBIAN_FRONTEND=noninteractive && apt update && apt install curl wget htop git vim ccache -y && git clone https://github.com/bitcoin/bitcoin.git ./bitcoin-core && cd bitcoin-core && apt install build-essential libtool autotools-dev automake pkg-config bsdmainutils python3-zmq libevent-dev libboost-dev libsqlite3-dev -y && ./autogen.sh && ./configure --with-sanitizers=thread && make -j $(nproc)`\r\n\r\nThen run the functional test, to get an error similar to this one:\r\n\r\n```\r\nstderr:\r\nTraceback (most recent call last):\r\n  File \"/bitcoin-core/test/functional/wallet_taproot.py\", line 477, in <module>\r\n    WalletTaprootTest().main()\r\n  File \"/bitcoin-core/test/functional/test_framework/test_framework.py\", line 156, in main\r\n    exit_code = self.shutdown()\r\n  File \"/bitcoin-core/test/functional/test_framework/test_framework.py\", line 311, in shutdown\r\n    self.stop_nodes()\r\n  File \"/bitcoin-core/test/functional/test_framework/test_framework.py\", line 567, in stop_nodes\r\n    node.stop_node(wait=wait, wait_until_stopped=False)\r\n  File \"/bitcoin-core/test/functional/test_framework/test_node.py\", line 352, in stop_node\r\n    raise AssertionError(\"Unexpected stderr {} != {}\".format(stderr, expected_stderr))\r\nAssertionError: Unexpected stderr ==================\r\nWARNING: ThreadSanitizer: data race (pid=45264)\r\n  Write of size 8 at 0x7b6400010948 by thread T12 (mutexes: write M131954):\r\n    #0 wallet::CWallet::ResubmitWalletTransactions(bool, bool) wallet/wallet.cpp:1940 (bitcoind+0x6651d9)\r\n    #1 operator() wallet/rpc/backup.cpp:1694 (bitcoind+0x74c065)\r\n    #2 __invoke_impl<UniValue, wallet::importdescriptors()::<lambda(const RPCHelpMan&, const JSONRPCRequest&)>&, const RPCHelpMan&, const JSONRPCRequest&> /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x74d224)\r\n    #3 __invoke_r<UniValue, wallet::importdescriptors()::<lambda(const RPCHelpMan&, const JSONRPCRequest&)>&, const RPCHelpMan&, const JSONRPCRequest&> /usr/include/c++/12/bits/invoke.h:116 (bitcoind+0x74d224)\r\n    #4 _M_invoke /usr/include/c++/12/bits/std_function.h:291 (bitcoind+0x74d224)\r\n    #5 std::function<UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) const /usr/include/c++/12/bits/std_function.h:591 (bitcoind+0x88cecb)\r\n    #6 RPCHelpMan::HandleRequest(JSONRPCRequest const&) const rpc/util.cpp:585 (bitcoind+0x88cecb)\r\n    #7 CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}::operator()(JSONRPCRequest const&, UniValue&, bool) const rpc/server.h:109 (bitcoind+0x2f83f7)\r\n    #8 bool std::__invoke_impl<bool, CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}&, JSONRPCRequest const&, UniValue&, bool>(std::__invoke_other, CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}&, JSONRPCRequest const&, UniValue&, bool&&) /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x2f8ad4)\r\n    #9 std::enable_if<is_invocable_r_v<bool, CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}&, JSONRPCRequest const&, UniValue&, bool>, bool>::type std::__invoke_r<bool, CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}&, JSONRPCRequest const&, UniValue&, bool>(CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}&, JSONRPCRequest const&, UniValue&, bool&&) /usr/include/c++/12/bits/invoke.h:114 (bitcoind+0x2f8ad4)\r\n    #10 std::_Function_handler<bool (JSONRPCRequest const&, UniValue&, bool), CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}>::_M_invoke(std::_Any_data const&, JSONRPCRequest const&, UniValue&, bool&&) /usr/include/c++/12/bits/std_function.h:290 (bitcoind+0x2f8ad4)\r\n    #11 std::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/include/c++/12/bits/std_function.h:591 (bitcoind+0x5a5b17)\r\n    #12 operator() wallet/interfaces.cpp:541 (bitcoind+0x5a5b17)\r\n    #13 __invoke_impl<bool, wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::<lambda(const JSONRPCRequest&, UniValue&, bool)>&, const JSONRPCRequest&, UniValue&, bool> /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x5a5d7c)\r\n    #14 __invoke_r<bool, wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::<lambda(const JSONRPCRequest&, UniValue&, bool)>&, const JSONRPCRequest&, UniValue&, bool> /usr/include/c++/12/bits/invoke.h:114 (bitcoind+0x5a5d7c)\r\n    #15 _M_invoke /usr/include/c++/12/bits/std_function.h:290 (bitcoind+0x5a5d7c)\r\n    #16 std::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/include/c++/12/bits/std_function.h:591 (bitcoind+0x275868)\r\n    #17 operator() node/interfaces.cpp:469 (bitcoind+0x275868)\r\n    #18 __invoke_impl<bool, node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(const CRPCCommand&)::<lambda(const JSONRPCRequest&, UniValue&, bool)>&, const JSONRPCRequest&, UniValue&, bool> /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x275868)\r\n    #19 __invoke_r<bool, node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(const CRPCCommand&)::<lambda(const JSONRPCRequest&, UniValue&, bool)>&, const JSONRPCRequest&, UniValue&, bool> /usr/include/c++/12/bits/invoke.h:114 (bitcoind+0x275868)\r\n    #20 _M_invoke /usr/include/c++/12/bits/std_function.h:290 (bitcoind+0x275868)\r\n    #21 std::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/include/c++/12/bits/std_function.h:591 (bitcoind+0x3d76e0)\r\n    #22 ExecuteCommand rpc/server.cpp:476 (bitcoind+0x3d76e0)\r\n    #23 ExecuteCommands rpc/server.cpp:440 (bitcoind+0x3d8916)\r\n    #24 CRPCTable::execute(JSONRPCRequest const&) const rpc/server.cpp:460 (bitcoind+0x3d8916)\r\n    #25 HTTPReq_JSONRPC src/httprpc.cpp:201 (bitcoind+0x533595)\r\n    #26 operator() src/httprpc.cpp:300 (bitcoind+0x534338)\r\n    #27 __invoke_impl<bool, StartHTTPRPC(const std::any&)::<lambda(HTTPRequest*, const std::string&)>&, HTTPRequest*, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&> /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x534338)\r\n    #28 __invoke_r<bool, StartHTTPRPC(const std::any&)::<lambda(HTTPRequest*, const std::string&)>&, HTTPRequest*, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&> /usr/include/c++/12/bits/invoke.h:114 (bitcoind+0x534338)\r\n    #29 _M_invoke /usr/include/c++/12/bits/std_function.h:290 (bitcoind+0x534338)\r\n    #30 std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const /usr/include/c++/12/bits/std_function.h:591 (bitcoind+0x548adb)\r\n    #31 HTTPWorkItem::operator()() src/httpserver.cpp:56 (bitcoind+0x548adb)\r\n    #32 WorkQueue<HTTPClosure>::Run() src/httpserver.cpp:111 (bitcoind+0x548adb)\r\n    #33 HTTPWorkQueueRun src/httpserver.cpp:343 (bitcoind+0x5410ba)\r\n    #34 void std::__invoke_impl<void, void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int>(std::__invoke_other, void (*&&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&&, int&&) /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x547404)\r\n    #35 std::__invoke_result<void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int>::type std::__invoke<void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int>(void (*&&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&&, int&&) /usr/include/c++/12/bits/invoke.h:96 (bitcoind+0x547404)\r\n    #36 void std::thread::_Invoker<std::tuple<void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int> >::_M_invoke<0ul, 1ul, 2ul>(std::_Index_tuple<0ul, 1ul, 2ul>) /usr/include/c++/12/bits/std_thread.h:252 (bitcoind+0x547404)\r\n    #37 std::thread::_Invoker<std::tuple<void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int> >::operator()() /usr/include/c++/12/bits/std_thread.h:259 (bitcoind+0x547404)\r\n    #38 std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int> > >::_M_run() /usr/include/c++/12/bits/std_thread.h:210 (bitcoind+0x547404)\r\n    #39 <null> <null> (libstdc++.so.6+0xdc3a2)\r\n\r\n  Previous read of size 8 at 0x7b6400010948 by thread T8:\r\n    #0 wallet::CWallet::ResubmitWalletTransactions(bool, bool) wallet/wallet.cpp:1938 (bitcoind+0x6651af)\r\n    #1 wallet::MaybeResendWalletTxs(wallet::WalletContext&) wallet/wallet.cpp:1976 (bitcoind+0x665626)\r\n    #2 operator() wallet/load.cpp:154 (bitcoind+0x5c57f5)\r\n    #3 __invoke_impl<void, wallet::StartWallets(WalletContext&, CScheduler&)::<lambda()>&> /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x5c57f5)\r\n    #4 __invoke_r<void, wallet::StartWallets(WalletContext&, CScheduler&)::<lambda()>&> /usr/include/c++/12/bits/invoke.h:111 (bitcoind+0x5c57f5)\r\n    #5 _M_invoke /usr/include/c++/12/bits/std_function.h:290 (bitcoind+0x5c57f5)\r\n    #6 std::function<void ()>::operator()() const /usr/include/c++/12/bits/std_function.h:591 (bitcoind+0x893653)\r\n    #7 Repeat src/scheduler.cpp:106 (bitcoind+0x893653)\r\n    #8 operator() src/scheduler.cpp:107 (bitcoind+0x893c60)\r\n    #9 __invoke_impl<void, Repeat(CScheduler&, CScheduler::Function, std::chrono::milliseconds)::<lambda()>&> /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x893c60)\r\n    #10 __invoke_r<void, Repeat(CScheduler&, CScheduler::Function, std::chrono::milliseconds)::<lambda()>&> /usr/include/c++/12/bits/invoke.h:111 (bitcoind+0x893c60)\r\n    #11 _M_invoke /usr/include/c++/12/bits/std_function.h:290 (bitcoind+0x893c60)\r\n    #12 std::function<void ()>::operator()() const /usr/include/c++/12/bits/std_function.h:591 (bitcoind+0x893184)\r\n    #13 CScheduler::serviceQueue() src/scheduler.cpp:62 (bitcoind+0x893184)\r\n    #14 operator() src/init.cpp:1154 (bitcoind+0x123c28)\r\n    #15 __invoke_impl<void, AppInitMain(node::NodeContext&, interfaces::BlockAndHeaderTipInfo*)::<lambda()>&> /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x123c28)\r\n    #16 __invoke_r<void, AppInitMain(node::NodeContext&, interfaces::BlockAndHeaderTipInfo*)::<lambda()>&> /usr/include/c++/12/bits/invoke.h:111 (bitcoind+0x123c28)\r\n    #17 _M_invoke /usr/include/c++/12/bits/std_function.h:290 (bitcoind+0x123c28)\r\n    #18 std::function<void ()>::operator()() const /usr/include/c++/12/bits/std_function.h:591 (bitcoind+0x96e362)\r\n    #19 util::TraceThread(std::basic_string_view<char, std::char_traits<char> >, std::function<void ()>) util/thread.cpp:21 (bitcoind+0x96e362)\r\n    #20 __invoke_impl<void, void (*)(std::basic_string_view<char>, std::function<void()>), char const*, AppInitMain(node::NodeContext&, interfaces::BlockAndHeaderTipInfo*)::<lambda()> > /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x128ca6)\r\n    #21 __invoke<void (*)(std::basic_string_view<char>, std::function<void()>), char const*, AppInitMain(node::NodeContext&, interfaces::BlockAndHeaderTipInfo*)::<lambda()> > /usr/include/c++/12/bits/invoke.h:96 (bitcoind+0x128ca6)\r\n    #22 _M_invoke<0, 1, 2> /usr/include/c++/12/bits/std_thread.h:252 (bitcoind+0x128ca6)\r\n    #23 operator() /usr/include/c++/12/bits/std_thread.h:259 (bitcoind+0x128ca6)\r\n    #24 _M_run /usr/include/c++/12/bits/std_thread.h:210 (bitcoind+0x128ca6)\r\n    #25 <null> <null> (libstdc++.so.6+0xdc3a2)\r\n\r\n  Location is heap block of size 1048 at 0x7b6400010900 allocated by thread T10:\r\n    #0 operator new(unsigned long) ../../../../src/libsanitizer/tsan/tsan_new_delete.cpp:64 (libtsan.so.2+0x8d659)\r\n    #1 wallet::CWallet::Create(wallet::WalletContext&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<wallet::WalletDatabase, std::default_delete<wallet::WalletDatabase> >, unsigned long, bilingual_str&, std::vector<bilingual_str, std::allocator<bilingual_str> >&) wallet/wallet.cpp:2792 (bitcoind+0x6870e4)\r\n    #2 wallet::CreateWallet(wallet::WalletContext&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::optional<bool>, wallet::DatabaseOptions&, wallet::DatabaseStatus&, bilingual_str&, std::vector<bilingual_str, std::allocator<bilingual_str> >&) wallet/wallet.cpp:324 (bitcoind+0x68b40b)\r\n    #3 operator() wallet/rpc/wallet.cpp:392 (bitcoind+0x5e5d9e)\r\n    #4 __invoke_impl<UniValue, wallet::createwallet()::<lambda(const RPCHelpMan&, const JSONRPCRequest&)>&, const RPCHelpMan&, const JSONRPCRequest&> /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x5e6de4)\r\n    #5 __invoke_r<UniValue, wallet::createwallet()::<lambda(const RPCHelpMan&, const JSONRPCRequest&)>&, const RPCHelpMan&, const JSONRPCRequest&> /usr/include/c++/12/bits/invoke.h:116 (bitcoind+0x5e6de4)\r\n    #6 _M_invoke /usr/include/c++/12/bits/std_function.h:291 (bitcoind+0x5e6de4)\r\n    #7 std::function<UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) const /usr/include/c++/12/bits/std_function.h:591 (bitcoind+0x88cecb)\r\n    #8 RPCHelpMan::HandleRequest(JSONRPCRequest const&) const rpc/util.cpp:585 (bitcoind+0x88cecb)\r\n    #9 CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}::operator()(JSONRPCRequest const&, UniValue&, bool) const rpc/server.h:109 (bitcoind+0x2f83f7)\r\n    #10 bool std::__invoke_impl<bool, CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}&, JSONRPCRequest const&, UniValue&, bool>(std::__invoke_other, CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}&, JSONRPCRequest const&, UniValue&, bool&&) /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x2f8ad4)\r\n    #11 std::enable_if<is_invocable_r_v<bool, CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}&, JSONRPCRequest const&, UniValue&, bool>, bool>::type std::__invoke_r<bool, CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}&, JSONRPCRequest const&, UniValue&, bool>(CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}&, JSONRPCRequest const&, UniValue&, bool&&) /usr/include/c++/12/bits/invoke.h:114 (bitcoind+0x2f8ad4)\r\n    #12 std::_Function_handler<bool (JSONRPCRequest const&, UniValue&, bool), CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}>::_M_invoke(std::_Any_data const&, JSONRPCRequest const&, UniValue&, bool&&) /usr/include/c++/12/bits/std_function.h:290 (bitcoind+0x2f8ad4)\r\n    #13 std::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/include/c++/12/bits/std_function.h:591 (bitcoind+0x5a5b17)\r\n    #14 operator() wallet/interfaces.cpp:541 (bitcoind+0x5a5b17)\r\n    #15 __invoke_impl<bool, wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::<lambda(const JSONRPCRequest&, UniValue&, bool)>&, const JSONRPCRequest&, UniValue&, bool> /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x5a5d7c)\r\n    #16 __invoke_r<bool, wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::<lambda(const JSONRPCRequest&, UniValue&, bool)>&, const JSONRPCRequest&, UniValue&, bool> /usr/include/c++/12/bits/invoke.h:114 (bitcoind+0x5a5d7c)\r\n    #17 _M_invoke /usr/include/c++/12/bits/std_function.h:290 (bitcoind+0x5a5d7c)\r\n    #18 std::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/include/c++/12/bits/std_function.h:591 (bitcoind+0x275868)\r\n    #19 operator() node/interfaces.cpp:469 (bitcoind+0x275868)\r\n    #20 __invoke_impl<bool, node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(const CRPCCommand&)::<lambda(const JSONRPCRequest&, UniValue&, bool)>&, const JSONRPCRequest&, UniValue&, bool> /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x275868)\r\n    #21 __invoke_r<bool, node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(const CRPCCommand&)::<lambda(const JSONRPCRequest&, UniValue&, bool)>&, const JSONRPCRequest&, UniValue&, bool> /usr/include/c++/12/bits/invoke.h:114 (bitcoind+0x275868)\r\n    #22 _M_invoke /usr/include/c++/12/bits/std_function.h:290 (bitcoind+0x275868)\r\n    #23 std::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/include/c++/12/bits/std_function.h:591 (bitcoind+0x3d76e0)\r\n    #24 ExecuteCommand rpc/server.cpp:476 (bitcoind+0x3d76e0)\r\n    #25 ExecuteCommands rpc/server.cpp:440 (bitcoind+0x3d8916)\r\n    #26 CRPCTable::execute(JSONRPCRequest const&) const rpc/server.cpp:460 (bitcoind+0x3d8916)\r\n    #27 HTTPReq_JSONRPC src/httprpc.cpp:201 (bitcoind+0x533595)\r\n    #28 operator() src/httprpc.cpp:300 (bitcoind+0x534338)\r\n    #29 __invoke_impl<bool, StartHTTPRPC(const std::any&)::<lambda(HTTPRequest*, const std::string&)>&, HTTPRequest*, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&> /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x534338)\r\n    #30 __invoke_r<bool, StartHTTPRPC(const std::any&)::<lambda(HTTPRequest*, const std::string&)>&, HTTPRequest*, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&> /usr/include/c++/12/bits/invoke.h:114 (bitcoind+0x534338)\r\n    #31 _M_invoke /usr/include/c++/12/bits/std_function.h:290 (bitcoind+0x534338)\r\n    #32 std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const /usr/include/c++/12/bits/std_function.h:591 (bitcoind+0x548adb)\r\n    #33 HTTPWorkItem::operator()() src/httpserver.cpp:56 (bitcoind+0x548adb)\r\n    #34 WorkQueue<HTTPClosure>::Run() src/httpserver.cpp:111 (bitcoind+0x548adb)\r\n    #35 HTTPWorkQueueRun src/httpserver.cpp:343 (bitcoind+0x5410ba)\r\n    #36 void std::__invoke_impl<void, void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int>(std::__invoke_other, void (*&&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&&, int&&) /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x547404)\r\n    #37 std::__invoke_result<void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int>::type std::__invoke<void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int>(void (*&&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&&, int&&) /usr/include/c++/12/bits/invoke.h:96 (bitcoind+0x547404)\r\n    #38 void std::thread::_Invoker<std::tuple<void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int> >::_M_invoke<0ul, 1ul, 2ul>(std::_Index_tuple<0ul, 1ul, 2ul>) /usr/include/c++/12/bits/std_thread.h:252 (bitcoind+0x547404)\r\n    #39 std::thread::_Invoker<std::tuple<void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int> >::operator()() /usr/include/c++/12/bits/std_thread.h:259 (bitcoind+0x547404)\r\n    #40 std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int> > >::_M_run() /usr/include/c++/12/bits/std_thread.h:210 (bitcoind+0x547404)\r\n    #41 <null> <null> (libstdc++.so.6+0xdc3a2)\r\n\r\n  Mutex M131954 (0x7b6400010aa0) created at:\r\n    #0 pthread_mutex_lock ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:4324 (libtsan.so.2+0x59bcf)\r\n    #1 __gthread_mutex_lock /usr/include/x86_64-linux-gnu/c++/12/bits/gthr-default.h:749 (bitcoind+0x664e34)\r\n    #2 __gthread_recursive_mutex_lock /usr/include/x86_64-linux-gnu/c++/12/bits/gthr-default.h:811 (bitcoind+0x664e34)\r\n    #3 std::recursive_mutex::lock() /usr/include/c++/12/mutex:108 (bitcoind+0x664e34)\r\n    #4 std::unique_lock<std::recursive_mutex>::lock() /usr/include/c++/12/bits/unique_lock.h:139 (bitcoind+0x664e34)\r\n    #5 UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::Enter(char const*, char const*, int) sync.h:162 (bitcoind+0x664e34)\r\n    #6 UniqueLock<AnnotatedMixin<std::recursive_mutex>, std::unique_lock<std::recursive_mutex> >::UniqueLock(AnnotatedMixin<std::recursive_mutex>&, char const*, char const*, int, bool) sync.h:181 (bitcoind+0x664e34)\r\n    #7 wallet::CWallet::LoadWallet() wallet/wallet.cpp:2219 (bitcoind+0x665f04)\r\n    #8 wallet::CWallet::Create(wallet::WalletContext&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::unique_ptr<wallet::WalletDatabase, std::default_delete<wallet::WalletDatabase> >, unsigned long, bilingual_str&, std::vector<bilingual_str, std::allocator<bilingual_str> >&) wallet/wallet.cpp:2794 (bitcoind+0x6871b8)\r\n    #9 wallet::CreateWallet(wallet::WalletContext&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::optional<bool>, wallet::DatabaseOptions&, wallet::DatabaseStatus&, bilingual_str&, std::vector<bilingual_str, std::allocator<bilingual_str> >&) wallet/wallet.cpp:324 (bitcoind+0x68b40b)\r\n    #10 operator() wallet/rpc/wallet.cpp:392 (bitcoind+0x5e5d9e)\r\n    #11 __invoke_impl<UniValue, wallet::createwallet()::<lambda(const RPCHelpMan&, const JSONRPCRequest&)>&, const RPCHelpMan&, const JSONRPCRequest&> /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x5e6de4)\r\n    #12 __invoke_r<UniValue, wallet::createwallet()::<lambda(const RPCHelpMan&, const JSONRPCRequest&)>&, const RPCHelpMan&, const JSONRPCRequest&> /usr/include/c++/12/bits/invoke.h:116 (bitcoind+0x5e6de4)\r\n    #13 _M_invoke /usr/include/c++/12/bits/std_function.h:291 (bitcoind+0x5e6de4)\r\n    #14 std::function<UniValue (RPCHelpMan const&, JSONRPCRequest const&)>::operator()(RPCHelpMan const&, JSONRPCRequest const&) const /usr/include/c++/12/bits/std_function.h:591 (bitcoind+0x88cecb)\r\n    #15 RPCHelpMan::HandleRequest(JSONRPCRequest const&) const rpc/util.cpp:585 (bitcoind+0x88cecb)\r\n    #16 CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}::operator()(JSONRPCRequest const&, UniValue&, bool) const rpc/server.h:109 (bitcoind+0x2f83f7)\r\n    #17 bool std::__invoke_impl<bool, CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}&, JSONRPCRequest const&, UniValue&, bool>(std::__invoke_other, CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}&, JSONRPCRequest const&, UniValue&, bool&&) /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x2f8ad4)\r\n    #18 std::enable_if<is_invocable_r_v<bool, CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}&, JSONRPCRequest const&, UniValue&, bool>, bool>::type std::__invoke_r<bool, CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}&, JSONRPCRequest const&, UniValue&, bool>(CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}&, JSONRPCRequest const&, UniValue&, bool&&) /usr/include/c++/12/bits/invoke.h:114 (bitcoind+0x2f8ad4)\r\n    #19 std::_Function_handler<bool (JSONRPCRequest const&, UniValue&, bool), CRPCCommand::CRPCCommand(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPCHelpMan (*)())::{lambda(JSONRPCRequest const&, UniValue&, bool)#1}>::_M_invoke(std::_Any_data const&, JSONRPCRequest const&, UniValue&, bool&&) /usr/include/c++/12/bits/std_function.h:290 (bitcoind+0x2f8ad4)\r\n    #20 std::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/include/c++/12/bits/std_function.h:591 (bitcoind+0x5a5b17)\r\n    #21 operator() wallet/interfaces.cpp:541 (bitcoind+0x5a5b17)\r\n    #22 __invoke_impl<bool, wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::<lambda(const JSONRPCRequest&, UniValue&, bool)>&, const JSONRPCRequest&, UniValue&, bool> /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x5a5d7c)\r\n    #23 __invoke_r<bool, wallet::(anonymous namespace)::WalletLoaderImpl::registerRpcs()::<lambda(const JSONRPCRequest&, UniValue&, bool)>&, const JSONRPCRequest&, UniValue&, bool> /usr/include/c++/12/bits/invoke.h:114 (bitcoind+0x5a5d7c)\r\n    #24 _M_invoke /usr/include/c++/12/bits/std_function.h:290 (bitcoind+0x5a5d7c)\r\n    #25 std::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/include/c++/12/bits/std_function.h:591 (bitcoind+0x275868)\r\n    #26 operator() node/interfaces.cpp:469 (bitcoind+0x275868)\r\n    #27 __invoke_impl<bool, node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(const CRPCCommand&)::<lambda(const JSONRPCRequest&, UniValue&, bool)>&, const JSONRPCRequest&, UniValue&, bool> /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x275868)\r\n    #28 __invoke_r<bool, node::(anonymous namespace)::RpcHandlerImpl::RpcHandlerImpl(const CRPCCommand&)::<lambda(const JSONRPCRequest&, UniValue&, bool)>&, const JSONRPCRequest&, UniValue&, bool> /usr/include/c++/12/bits/invoke.h:114 (bitcoind+0x275868)\r\n    #29 _M_invoke /usr/include/c++/12/bits/std_function.h:290 (bitcoind+0x275868)\r\n    #30 std::function<bool (JSONRPCRequest const&, UniValue&, bool)>::operator()(JSONRPCRequest const&, UniValue&, bool) const /usr/include/c++/12/bits/std_function.h:591 (bitcoind+0x3d76e0)\r\n    #31 ExecuteCommand rpc/server.cpp:476 (bitcoind+0x3d76e0)\r\n    #32 ExecuteCommands rpc/server.cpp:440 (bitcoind+0x3d8916)\r\n    #33 CRPCTable::execute(JSONRPCRequest const&) const rpc/server.cpp:460 (bitcoind+0x3d8916)\r\n    #34 HTTPReq_JSONRPC src/httprpc.cpp:201 (bitcoind+0x533595)\r\n    #35 operator() src/httprpc.cpp:300 (bitcoind+0x534338)\r\n    #36 __invoke_impl<bool, StartHTTPRPC(const std::any&)::<lambda(HTTPRequest*, const std::string&)>&, HTTPRequest*, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&> /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x534338)\r\n    #37 __invoke_r<bool, StartHTTPRPC(const std::any&)::<lambda(HTTPRequest*, const std::string&)>&, HTTPRequest*, const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&> /usr/include/c++/12/bits/invoke.h:114 (bitcoind+0x534338)\r\n    #38 _M_invoke /usr/include/c++/12/bits/std_function.h:290 (bitcoind+0x534338)\r\n    #39 std::function<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>::operator()(HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const /usr/include/c++/12/bits/std_function.h:591 (bitcoind+0x548adb)\r\n    #40 HTTPWorkItem::operator()() src/httpserver.cpp:56 (bitcoind+0x548adb)\r\n    #41 WorkQueue<HTTPClosure>::Run() src/httpserver.cpp:111 (bitcoind+0x548adb)\r\n    #42 HTTPWorkQueueRun src/httpserver.cpp:343 (bitcoind+0x5410ba)\r\n    #43 void std::__invoke_impl<void, void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int>(std::__invoke_other, void (*&&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&&, int&&) /usr/include/c++/12/bits/invoke.h:61 (bitcoind+0x547404)\r\n    #44 std::__invoke_result<void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int>::type std::__invoke<void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int>(void (*&&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&&, int&&) /usr/include/c++/12/bits/invoke.h:96 (bitcoind+0x547404)\r\n    #45 void std::thread::_Invoker<std::tuple<void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int> >::_M_invoke<0ul, 1ul, 2ul>(std::_Index_tuple<0ul, 1ul, 2ul>) /usr/include/c++/12/bits/std_thread.h:252 (bitcoind+0x547404)\r\n    #46 std::thread::_Invoker<std::tuple<void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int> >::operator()() /usr/include/c++/12/bits/std_thread.h:259 (bitcoind+0x547404)\r\n    #47 std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int> > >::_M_run() /usr/include/c++/12/bits/std_thread.h:210 (bitcoind+0x547404)\r\n    #48 <null> <null> (libstdc++.so.6+0xdc3a2)\r\n\r\n  Thread T12 'b-httpworker.2' (tid=45400, running) created by main thread at:\r\n    #0 pthread_create ../../../../src/libsanitizer/tsan/tsan_interceptors_posix.cpp:1001 (libtsan.so.2+0x63a69)\r\n    #1 std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) <null> (libstdc++.so.6+0xdc478)\r\n    #2 std::thread& std::vector<std::thread, std::allocator<std::thread> >::emplace_back<void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int&>(void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&&, int&) /usr/include/c++/12/bits/vector.tcc:123 (bitcoind+0x5415c1)\r\n    #3 StartHTTPServer() src/httpserver.cpp:433 (bitcoind+0x5415c1)\r\n    #4 AppInitServers src/init.cpp:650 (bitcoind+0x128924)\r\n    #5 AppInitMain(node::NodeContext&, interfaces::BlockAndHeaderTipInfo*) src/init.cpp:1188 (bitcoind+0x13bed7)\r\n    #6 AppInit src/bitcoind.cpp:234 (bitcoind+0x104de2)\r\n    #7 main src/bitcoind.cpp:278 (bitcoind+0x104de2)\r\n\r\n  Thread T8 'b-scheduler' (tid=45361, running) created by main thread at:\r\n    #0 pthread_create ../../../../src/libsanitizer/tsan/tsan_interceptors_posix.cpp:1001 (libtsan.so.2+0x63a69)\r\n    #1 std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) <null> (libstdc++.so.6+0xdc478)\r\n    #2 AppInit src/bitcoind.cpp:234 (bitcoind+0x104de2)\r\n    #3 main src/bitcoind.cpp:278 (bitcoind+0x104de2)\r\n\r\n  Thread T10 'b-httpworker.0' (tid=45398, running) created by main thread at:\r\n    #0 pthread_create ../../../../src/libsanitizer/tsan/tsan_interceptors_posix.cpp:1001 (libtsan.so.2+0x63a69)\r\n    #1 std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)()) <null> (libstdc++.so.6+0xdc478)\r\n    #2 std::thread& std::vector<std::thread, std::allocator<std::thread> >::emplace_back<void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int&>(void (&)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*&&, int&) /usr/include/c++/12/bits/vector.tcc:123 (bitcoind+0x5415c1)\r\n    #3 StartHTTPServer() src/httpserver.cpp:433 (bitcoind+0x5415c1)\r\n    #4 AppInitServers src/init.cpp:650 (bitcoind+0x128924)\r\n    #5 AppInitMain(node::NodeContext&, interfaces::BlockAndHeaderTipInfo*) src/init.cpp:1188 (bitcoind+0x13bed7)\r\n    #6 AppInit src/bitcoind.cpp:234 (bitcoind+0x104de2)\r\n    #7 main src/bitcoind.cpp:278 (bitcoind+0x104de2)\r\n\r\nSUMMARY: ThreadSanitizer: data race wallet/wallet.cpp:1940 in wallet::CWallet::ResubmitWalletTransactions(bool, bool)\r\n",
      "created_at" : "2022-09-20T10:03:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26132#issuecomment-1252125950",
      "id" : 1252125950,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26132",
      "node_id" : "IC_kwDOABII585Koez-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1252125950/reactions"
      },
      "updated_at" : "2022-09-20T10:03:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1252125950",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> we wouldn't want two simultaneous threads to be able to both resubmit\r\n\r\nI don't think this can be prevented. There is still only one scheduler thread, so the only way this could happen is when another thread calls this with `force=True`. In that case the scheduler thread might run this first, then the thread with `force=True`, thus it will be run twice successively.\r\n\r\nIt is true that a mutex will avoid a successive double-call if the thread with `force=True` runs first, then the scheduler thread. With `std::atomic` you might run into a (very) rare race where it is called twice. Though, given that this generally can't be avoided I don't think it is worth it to put under a mutex.\r\n\r\nPutting it under the cs_wallet mutex (and reverting fbba4a131647c991afc53b6a3dfb9721f5c430b2) would likely cause a performance regression.\r\n\r\nHowever, I am happy to switch to a dedicated mutes if reviewers think it is worth it.",
      "created_at" : "2022-09-20T15:31:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26132#issuecomment-1252532884",
      "id" : 1252532884,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26132",
      "node_id" : "IC_kwDOABII585KqCKU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1252532884/reactions"
      },
      "updated_at" : "2022-09-20T15:31:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1252532884",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK fad61573ed547615f73710cb59b2fb0ecafed127",
      "created_at" : "2022-09-20T22:38:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26132#issuecomment-1252987353",
      "id" : 1252987353,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26132",
      "node_id" : "IC_kwDOABII585KrxHZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1252987353/reactions"
      },
      "updated_at" : "2022-09-20T22:38:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1252987353",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   }
]
