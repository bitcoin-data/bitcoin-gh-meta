{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "A bad interaction between valgrind and clang 6.0.0-1ubuntu2 with -O2 optimizations makes valgrind misleadingly imply C++ code is reading an uninitialized blockheight value in `rest_blockhash_by_height` just because that's what clang optimized code is doing. The C++ code looks like:\r\n\r\n```c++\r\nint32_t blockheight;\r\nif (!ParseInt32(height_str, &blockheight) || blockheight < 0) {\r\n```\r\n\r\nwhile the optimized code looks like:\r\n\r\n```\r\n0x00000000000f97ab <+123>:   callq  0x4f8860 <ParseInt32(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int*)>\r\n0x00000000000f97b0 <+128>:   mov    0xc(%rsp),%ebx\r\n0x00000000000f97b4 <+132>:   test   %ebx,%ebx\r\n0x00000000000f97b6 <+134>:   js     0xf98aa <rest_blockhash_by_height(util::Ref const&, HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+378>\r\n0x00000000000f97bc <+140>:   xor    $0x1,%al\r\n0x00000000000f97be <+142>:   jne    0xf98aa <rest_blockhash_by_height(util::Ref const&, HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+378>\r\n```\r\n\r\nDuring the rest_interface.py test:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/eef90c14ed0f559e3f6e187341009270b84f45cb/test/functional/interface_rest.py#L266\r\n\r\nwhen `height_str` is empty, `ParseInt32` returns false and `blockheight` value is never assigned. The optimized code reads the uninitialized `blockheight` value in `0xc(%rsp)` before the checking the `ParseInt32` return value in `%al`, which is harmless, but triggers the following error from valgrind:\r\n\r\n```\r\n==30660== Thread 13 b-httpworker.2:\r\n==30660== Conditional jump or move depends on uninitialised value(s)\r\n==30660==    at 0x2017B6: rest_blockhash_by_height(util::Ref const&, HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (rest.cpp:614)\r\n==30660==    by 0x2041B9: operator() (rest.cpp:670)\r\n==30660==    by 0x2041B9: std::_Function_handler<bool (HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), StartREST(util::Ref const&)::$_1>::_M_invoke(std::_Any_data const&, HTTPRequest*&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (std_function.h:301)\r\n==30660==    by 0x3EC994: operator() (std_function.h:706)\r\n==30660==    by 0x3EC994: HTTPWorkItem::operator()() (httpserver.cpp:55)\r\n==30660==    by 0x3ED16D: WorkQueue<HTTPClosure>::Run() (httpserver.cpp:114)\r\n==30660==    by 0x3E9168: HTTPWorkQueueRun(WorkQueue<HTTPClosure>*, int) (httpserver.cpp:342)\r\n==30660==    by 0x3EDAAA: __invoke_impl<void, void (*)(WorkQueue<HTTPClosure> *, int), WorkQueue<HTTPClosure> *, int> (invoke.h:60)\r\n==30660==    by 0x3EDAAA: __invoke<void (*)(WorkQueue<HTTPClosure> *, int), WorkQueue<HTTPClosure> *, int> (invoke.h:95)\r\n==30660==    by 0x3EDAAA: _M_invoke<0, 1, 2> (thread:234)\r\n==30660==    by 0x3EDAAA: operator() (thread:243)\r\n==30660==    by 0x3EDAAA: std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (*)(WorkQueue<HTTPClosure>*, int), WorkQueue<HTTPClosure>*, int> > >::_M_run() (thread:186)\r\n==30660==    by 0x64256DE: ??? (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)\r\n==30660==    by 0x54876DA: start_thread (pthread_create.c:463)\r\n==30660==    by 0x6DC888E: clone (clone.S:95)\r\n==30660==  Uninitialised value was created by a stack allocation\r\n==30660==    at 0x20173A: rest_blockhash_by_height(util::Ref const&, HTTPRequest*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (rest.cpp:608)\r\n==30660==\r\n{\r\n   <insert_a_suppression_name_here>\r\n   Memcheck:Cond\r\n   fun:_ZL24rest_blockhash_by_heightRKN4util3RefEP11HTTPRequestRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE\r\n   fun:operator()\r\n   fun:_ZNSt17_Function_handlerIFbP11HTTPRequestRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEZ9StartRESTRKN4util3RefEE3$_1E9_M_invokeERKSt9_Any_dataOS1_S9_\r\n   fun:operator()\r\n   fun:_ZN12HTTPWorkItemclEv\r\n   fun:_ZN9WorkQueueI11HTTPClosureE3RunEv\r\n   fun:_ZL16HTTPWorkQueueRunP9WorkQueueI11HTTPClosureEi\r\n   fun:__invoke_impl<void, void (*)(WorkQueue<HTTPClosure> *, int), WorkQueue<HTTPClosure> *, int>\r\n   fun:__invoke<void (*)(WorkQueue<HTTPClosure> *, int), WorkQueue<HTTPClosure> *, int>\r\n   fun:_M_invoke<0, 1, 2>\r\n   fun:operator()\r\n   fun:_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP9WorkQueueI11HTTPClosureEiES6_iEEEEE6_M_runEv\r\n   obj:/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25\r\n   fun:start_thread\r\n   fun:clone\r\n}\r\n```\r\n\r\nThis is a known bad interaction between clang and valgrind. The clang optimized code is correct but valgrind has no way of knowing that accessing the uninitialized value isn't a problem. Issue has been reported previously:\r\n\r\n- https://bugs.llvm.org/show_bug.cgi?id=32604#c4\r\n- https://github.com/Z3Prover/z3/issues/972\r\n\r\nThis commit just sets blockheight to -1 as a workaround.\r\n\r\nThis change was originally made in 41d5d651594c6c939add7a58b7e30c97dccdf24a from #18740 to fix the travis error there (https://travis-ci.org/github/bitcoin/bitcoin/jobs/678453061#L7157) but MarcoFalke suggested https://github.com/bitcoin/bitcoin/pull/18740#discussion_r414772851 moving to a new PR, since apparently the error's been seen on travis previously",
   "closed_at" : "2020-04-29T12:24:11Z",
   "closed_by" : {
      "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
      "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
      "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/MarcoFalke",
      "id" : 6399679,
      "login" : "MarcoFalke",
      "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
      "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
      "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
      "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/MarcoFalke"
   },
   "comments" : 3,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18785/comments",
   "created_at" : "2020-04-27T19:20:45Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18785/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/18785",
   "id" : 607789609,
   "labels" : [
      {
         "color" : "0052cc",
         "default" : false,
         "description" : null,
         "id" : 98279177,
         "name" : "RPC/REST/ZMQ",
         "node_id" : "MDU6TGFiZWw5ODI3OTE3Nw==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18785/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDExOlB1bGxSZXF1ZXN0NDA5Njk0NzQw",
   "number" : 18785,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/18785.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18785",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/18785.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18785"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "title" : "Prevent valgrind false positive in rest_blockhash_by_height",
   "updated_at" : "2020-04-29T12:24:11Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18785",
   "user" : {
      "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
      "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
      "followers_url" : "https://api.github.com/users/ryanofsky/followers",
      "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/ryanofsky",
      "id" : 7133040,
      "login" : "ryanofsky",
      "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
      "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
      "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
      "repos_url" : "https://api.github.com/users/ryanofsky/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/ryanofsky"
   }
}
