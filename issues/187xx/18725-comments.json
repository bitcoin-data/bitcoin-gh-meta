[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, let's do this as soon as possible.\r\n\r\nBut Concept NACK for now. The mempool project (which I've added this to) needs to make more progress before something like this is remotely feasible. Added this to the tracker for that project for when the time comes!",
      "created_at" : "2020-04-21T19:08:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18725#issuecomment-617356761",
      "id" : 617356761,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18725",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNzM1Njc2MQ==",
      "updated_at" : "2020-04-21T19:08:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/617356761",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18725#discussion_r412569079"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18725"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412569079"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "A 1000vbyte size * 100 seems enough to one party owning multiple carve-out outputs to decrease feerate of unconfirmed parent tx enough to stuck it in the mempool. I think that's already a risk today but right now custodial service, being broadcaster, can iterative batch on its own output to reach first DEFAULT_DESCENDANT_LIMIT and avoid any junk-feerate squatting branch.\r\n\r\nThat said the batching case MAY be far less adversarial that LN one, and worst-case scenario may be just few more blocks to wait instead of a fund loss like in LN.",
      "commit_id" : "84ac4a1122e444094125f515d064428586fe9446",
      "created_at" : "2020-04-21T23:50:56Z",
      "diff_hunk" : "@@ -744,22 +744,28 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     std::string errString;\n     if (!m_pool.CalculateMemPoolAncestors(*entry, setAncestors, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants, m_limit_descendant_size, errString)) {\n-        setAncestors.clear();\n-        // If CalculateMemPoolAncestors fails second time, we want the original error string.\n-        std::string dummy_err_string;\n         // Contracting/payment channels CPFP carve-out:\n         // If the new transaction is relatively small (up to 40k weight)\n         // and has at most one ancestor (ie ancestor limit of 2, including\n-        // the new transaction), allow it if its parent has exactly the\n-        // descendant limit descendants.\n+        // the new transaction), allow it if its parent is at descendant limits\n+        // up to an additional EXTRA_DESCENDANT_TX_COUNT_LIMIT small tx limit.\n         //\n         // This allows protocols which rely on distrusting counterparties\n         // being able to broadcast descendants of an unconfirmed transaction\n-        // to be secure by simply only having two immediately-spendable\n-        // outputs - one for each counterparty. For more info on the uses for\n+        // to be secure by simply only having N immediately-spendable\n+        // outputs - one for each counterparty. This is also a handy anti-pinning\n+        // rule for transaction batching and other custodial payout schemes. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+\n+        // Immediately bail from carve-out logic if transaction isn't relatively small\n+        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18725#discussion_r412569079",
      "id" : 412569079,
      "line" : 761,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2OTA3OQ==",
      "original_commit_id" : "84ac4a1122e444094125f515d064428586fe9446",
      "original_line" : 761,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 27,
      "pull_request_review_id" : 397752042,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18725",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-21T23:54:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412569079",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18725#discussion_r412951743"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18725"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412951743"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The batching case, AFAICT is less *complicated*, and outright theft is not a result if somehow things go wrong. Instead it may simply result in certain processors not batching, or doing smaller batches to avoid pinning hundreds of user payouts, or simply paying a much higher feerate to avoid the situation.\r\n\r\nIt's a practical problem in real-world deployments today to make sure that the more general case of https://github.com/bitcoin/bitcoin/issues/15046 can be true. To be clear I find these counter-arguments persuasive:\r\n1) We don't have a principled enough view of these changes and it may become a DoS\r\n2) Actually this doesn't work for the stated use-case because X\r\n\r\nThe fact that LN is 1000x more complicated and the original carve-out was insufficient is less persuasive imo.\r\n\r\n",
      "commit_id" : "84ac4a1122e444094125f515d064428586fe9446",
      "created_at" : "2020-04-22T12:48:29Z",
      "diff_hunk" : "@@ -744,22 +744,28 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     std::string errString;\n     if (!m_pool.CalculateMemPoolAncestors(*entry, setAncestors, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants, m_limit_descendant_size, errString)) {\n-        setAncestors.clear();\n-        // If CalculateMemPoolAncestors fails second time, we want the original error string.\n-        std::string dummy_err_string;\n         // Contracting/payment channels CPFP carve-out:\n         // If the new transaction is relatively small (up to 40k weight)\n         // and has at most one ancestor (ie ancestor limit of 2, including\n-        // the new transaction), allow it if its parent has exactly the\n-        // descendant limit descendants.\n+        // the new transaction), allow it if its parent is at descendant limits\n+        // up to an additional EXTRA_DESCENDANT_TX_COUNT_LIMIT small tx limit.\n         //\n         // This allows protocols which rely on distrusting counterparties\n         // being able to broadcast descendants of an unconfirmed transaction\n-        // to be secure by simply only having two immediately-spendable\n-        // outputs - one for each counterparty. For more info on the uses for\n+        // to be secure by simply only having N immediately-spendable\n+        // outputs - one for each counterparty. This is also a handy anti-pinning\n+        // rule for transaction batching and other custodial payout schemes. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+\n+        // Immediately bail from carve-out logic if transaction isn't relatively small\n+        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18725#discussion_r412951743",
      "id" : 412951743,
      "in_reply_to_id" : 412569079,
      "line" : 761,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk1MTc0Mw==",
      "original_commit_id" : "84ac4a1122e444094125f515d064428586fe9446",
      "original_line" : 761,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 27,
      "pull_request_review_id" : 398154241,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18725",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-22T12:48:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412951743",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18725#discussion_r413300736"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18725"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413300736"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "That's inaccurate with batching because people can pay out to contracts that contain HTLCs (not that they should, but the payments are still timing sensitive potentially).\r\n\r\nOne space of a solution would be to have a defined eviction order in the transaction; e.g., spends from output S n+1 > output n or outputs are ordered by value spent with order tiebreaker. I think the decision rule should not look at the spending transaction itself (e.g. for feerate) because it introduces a bunch of problems. The issue with a solution like this is it's economically irrational, a miner should take the highest fee paying transaction. So these policies can be a stopgap convenience so that people have a better UX with behaving nodes, but it can't be expected to be followed longer term.\r\n\r\nIMO the only real solution is a larger mempool reworking, which decouples accepting and storing a transaction from eviction and from mining more aggressively. That way we can dumbly accept transactions if they connect with no computational risk, evict whenever required, and mine on a best effort understanding of fee rates. The first step in accomplishing this is finishing the MemPool Project first batch of refactors which improve all of our traversal algorithms. Once that is done, we'll have a better understanding of what we can tolerably raise the limits to with the current architecture (including better carve out limits). Following that, some of these bigger picture modularization refactors can be done as needed. There's not a strict ordering between these, but it's easy to change a \"pure function\" to another equivalent \"pure function\", and harder to re architect an entire data structure that will have new behaviors.",
      "commit_id" : "84ac4a1122e444094125f515d064428586fe9446",
      "created_at" : "2020-04-22T20:18:54Z",
      "diff_hunk" : "@@ -744,22 +744,28 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     std::string errString;\n     if (!m_pool.CalculateMemPoolAncestors(*entry, setAncestors, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants, m_limit_descendant_size, errString)) {\n-        setAncestors.clear();\n-        // If CalculateMemPoolAncestors fails second time, we want the original error string.\n-        std::string dummy_err_string;\n         // Contracting/payment channels CPFP carve-out:\n         // If the new transaction is relatively small (up to 40k weight)\n         // and has at most one ancestor (ie ancestor limit of 2, including\n-        // the new transaction), allow it if its parent has exactly the\n-        // descendant limit descendants.\n+        // the new transaction), allow it if its parent is at descendant limits\n+        // up to an additional EXTRA_DESCENDANT_TX_COUNT_LIMIT small tx limit.\n         //\n         // This allows protocols which rely on distrusting counterparties\n         // being able to broadcast descendants of an unconfirmed transaction\n-        // to be secure by simply only having two immediately-spendable\n-        // outputs - one for each counterparty. For more info on the uses for\n+        // to be secure by simply only having N immediately-spendable\n+        // outputs - one for each counterparty. This is also a handy anti-pinning\n+        // rule for transaction batching and other custodial payout schemes. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+\n+        // Immediately bail from carve-out logic if transaction isn't relatively small\n+        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18725#discussion_r413300736",
      "id" : 413300736,
      "in_reply_to_id" : 412569079,
      "line" : 761,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwMDczNg==",
      "original_commit_id" : "84ac4a1122e444094125f515d064428586fe9446",
      "original_line" : 761,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 27,
      "pull_request_review_id" : 398554312,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18725",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-22T20:18:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413300736",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18725#discussion_r413303560"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18725"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413303560"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> That's inaccurate with batching because people can pay out to contracts that contain HTLCs (not that they should, but the payments are still timing sensitive potentially).\r\n\r\nfair enough, people may be building really bad ideas on top",
      "commit_id" : "84ac4a1122e444094125f515d064428586fe9446",
      "created_at" : "2020-04-22T20:23:26Z",
      "diff_hunk" : "@@ -744,22 +744,28 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     std::string errString;\n     if (!m_pool.CalculateMemPoolAncestors(*entry, setAncestors, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants, m_limit_descendant_size, errString)) {\n-        setAncestors.clear();\n-        // If CalculateMemPoolAncestors fails second time, we want the original error string.\n-        std::string dummy_err_string;\n         // Contracting/payment channels CPFP carve-out:\n         // If the new transaction is relatively small (up to 40k weight)\n         // and has at most one ancestor (ie ancestor limit of 2, including\n-        // the new transaction), allow it if its parent has exactly the\n-        // descendant limit descendants.\n+        // the new transaction), allow it if its parent is at descendant limits\n+        // up to an additional EXTRA_DESCENDANT_TX_COUNT_LIMIT small tx limit.\n         //\n         // This allows protocols which rely on distrusting counterparties\n         // being able to broadcast descendants of an unconfirmed transaction\n-        // to be secure by simply only having two immediately-spendable\n-        // outputs - one for each counterparty. For more info on the uses for\n+        // to be secure by simply only having N immediately-spendable\n+        // outputs - one for each counterparty. This is also a handy anti-pinning\n+        // rule for transaction batching and other custodial payout schemes. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+\n+        // Immediately bail from carve-out logic if transaction isn't relatively small\n+        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18725#discussion_r413303560",
      "id" : 413303560,
      "in_reply_to_id" : 412569079,
      "line" : 761,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwMzU2MA==",
      "original_commit_id" : "84ac4a1122e444094125f515d064428586fe9446",
      "original_line" : 761,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 27,
      "pull_request_review_id" : 398557266,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18725",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-22T20:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413303560",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18725#discussion_r413404885"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18725"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413404885"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> That's inaccurate with batching because people can pay out to contracts that contain HTLCs (not that they should, but the payments are still timing sensitive potentially).\r\n\r\nThat would be a zero-conf channel which is already under a double-spend threat, at least understood by people who implemented it. But yes we shouldn't make it easier to build insecure protocol..",
      "commit_id" : "84ac4a1122e444094125f515d064428586fe9446",
      "created_at" : "2020-04-22T23:38:31Z",
      "diff_hunk" : "@@ -744,22 +744,28 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     std::string errString;\n     if (!m_pool.CalculateMemPoolAncestors(*entry, setAncestors, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants, m_limit_descendant_size, errString)) {\n-        setAncestors.clear();\n-        // If CalculateMemPoolAncestors fails second time, we want the original error string.\n-        std::string dummy_err_string;\n         // Contracting/payment channels CPFP carve-out:\n         // If the new transaction is relatively small (up to 40k weight)\n         // and has at most one ancestor (ie ancestor limit of 2, including\n-        // the new transaction), allow it if its parent has exactly the\n-        // descendant limit descendants.\n+        // the new transaction), allow it if its parent is at descendant limits\n+        // up to an additional EXTRA_DESCENDANT_TX_COUNT_LIMIT small tx limit.\n         //\n         // This allows protocols which rely on distrusting counterparties\n         // being able to broadcast descendants of an unconfirmed transaction\n-        // to be secure by simply only having two immediately-spendable\n-        // outputs - one for each counterparty. For more info on the uses for\n+        // to be secure by simply only having N immediately-spendable\n+        // outputs - one for each counterparty. This is also a handy anti-pinning\n+        // rule for transaction batching and other custodial payout schemes. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+\n+        // Immediately bail from carve-out logic if transaction isn't relatively small\n+        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18725#discussion_r413404885",
      "id" : 413404885,
      "in_reply_to_id" : 412569079,
      "line" : 761,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwNDg4NQ==",
      "original_commit_id" : "84ac4a1122e444094125f515d064428586fe9446",
      "original_line" : 761,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 27,
      "pull_request_review_id" : 398663492,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18725",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-22T23:38:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413404885",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18725#discussion_r413445539"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18725"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413445539"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Well the issues come up in other contexts too where it's expressly not an issue if it's known the parent cannot be malleated, such as a batch where you are 1 of N parties to have signed the N of N, but the outputs are independent. Perfectly safe to use those HTLCs between any of the N people, but pinning can still be an issue.",
      "commit_id" : "84ac4a1122e444094125f515d064428586fe9446",
      "created_at" : "2020-04-23T01:36:26Z",
      "diff_hunk" : "@@ -744,22 +744,28 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     std::string errString;\n     if (!m_pool.CalculateMemPoolAncestors(*entry, setAncestors, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants, m_limit_descendant_size, errString)) {\n-        setAncestors.clear();\n-        // If CalculateMemPoolAncestors fails second time, we want the original error string.\n-        std::string dummy_err_string;\n         // Contracting/payment channels CPFP carve-out:\n         // If the new transaction is relatively small (up to 40k weight)\n         // and has at most one ancestor (ie ancestor limit of 2, including\n-        // the new transaction), allow it if its parent has exactly the\n-        // descendant limit descendants.\n+        // the new transaction), allow it if its parent is at descendant limits\n+        // up to an additional EXTRA_DESCENDANT_TX_COUNT_LIMIT small tx limit.\n         //\n         // This allows protocols which rely on distrusting counterparties\n         // being able to broadcast descendants of an unconfirmed transaction\n-        // to be secure by simply only having two immediately-spendable\n-        // outputs - one for each counterparty. For more info on the uses for\n+        // to be secure by simply only having N immediately-spendable\n+        // outputs - one for each counterparty. This is also a handy anti-pinning\n+        // rule for transaction batching and other custodial payout schemes. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+\n+        // Immediately bail from carve-out logic if transaction isn't relatively small\n+        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18725#discussion_r413445539",
      "id" : 413445539,
      "in_reply_to_id" : 412569079,
      "line" : 761,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ0NTUzOQ==",
      "original_commit_id" : "84ac4a1122e444094125f515d064428586fe9446",
      "original_line" : 761,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 27,
      "pull_request_review_id" : 398701232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18725",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-23T01:36:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/413445539",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #17383 (Refactor: Move consts to their correct translation units by jnewbery)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-04-23T20:51:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18725#issuecomment-618662699",
      "id" : 618662699,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18725",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxODY2MjY5OQ==",
      "updated_at" : "2020-04-23T20:51:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/618662699",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-04-25T13:09:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18725#issuecomment-619377363",
      "id" : 619377363,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18725",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxOTM3NzM2Mw==",
      "updated_at" : "2020-04-25T13:09:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619377363",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   }
]
