{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "master @ 5f19155e5bca37bf1fe14515758c6f589f6806ae\r\n\r\n```bash\r\n./autogen.sh\r\nCC=/usr/local/opt/llvm/bin/clang-10 CXX=/usr/local/opt/llvm/bin/clang-10 ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\r\nmake -j8\r\nsrc/test/fuzz/script ../qa-assets/fuzz_seed_corpus/script\r\n```\r\n\r\n```bash\r\nsrc/test/fuzz/script ../qa-assets/fuzz_seed_corpus/script      \r\nINFO: Seed: 3976253095\r\nINFO: Loaded 1 modules   (864437 inline 8-bit counters): 864437 [0x10ea10588, 0x10eae363d), \r\nINFO: Loaded 1 PC tables (864437 PCs): 864437 [0x10eae3640,0x10f814190), \r\nINFO:     1807 files found in ../qa-assets/fuzz_seed_corpus/script\r\nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 105885 bytes\r\nINFO: seed corpus: files: 1807 min: 1b max: 105885b total: 947502b rss: 61Mb\r\n=================================================================\r\n==7371==ERROR: AddressSanitizer: container-overflow on address 0x612000006d30 at pc 0x00010d8bebbc bp 0x7ffee346bfc0 sp 0x7ffee346bfb8\r\nWRITE of size 4 at 0x612000006d30 thread T0\r\n    #0 0x10d8bebbb in UniValue::UniValue(UniValue const&) univalue.h:19\r\n    #1 0x10da8cb95 in UniValue::pushKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, UniValue const&) univalue.cpp:142\r\n    #2 0x10d554e2f in UniValue::pushKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) univalue.h:117\r\n    #3 0x10d5550ef in UniValue::pushKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, char const*) univalue.h:121\r\n    #4 0x10d55582a in ScriptPubKeyToUniv(CScript const&, UniValue&, bool) core_write.cpp:169\r\n    #5 0x10c7956b8 in test_one_input(std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > const&) script.cpp:87\r\n    #6 0x10d9fc2ed in LLVMFuzzerTestOneInput fuzz.cpp:38\r\n    #7 0x10dc6c220 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) FuzzerLoop.cpp:556\r\n    #8 0x10dc6b965 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool*) FuzzerLoop.cpp:470\r\n    #9 0x10dc6e007 in fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::__1::vector<fuzzer::SizedFile, fuzzer::fuzzer_allocator<fuzzer::SizedFile> >&) FuzzerLoop.cpp:765\r\n    #10 0x10dc6e369 in fuzzer::Fuzzer::Loop(std::__1::vector<fuzzer::SizedFile, fuzzer::fuzzer_allocator<fuzzer::SizedFile> >&) FuzzerLoop.cpp:792\r\n    #11 0x10dc5b82d in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) FuzzerDriver.cpp:829\r\n    #12 0x10dc87502 in main FuzzerMain.cpp:19\r\n    #13 0x7fff7049ccc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)\r\n\r\n0x612000006d30 is located 240 bytes inside of 320-byte region [0x612000006c40,0x612000006d80)\r\nallocated by thread T0 here:\r\n    #0 0x1109e7bed in wrap__Znwm+0x7d (libclang_rt.asan_osx_dynamic.dylib:x86_64+0x50bed)\r\n    #1 0x10d8c2c0f in std::__1::__split_buffer<UniValue, std::__1::allocator<UniValue>&>::__split_buffer(unsigned long, unsigned long, std::__1::allocator<UniValue>&) __split_buffer:318\r\n    #2 0x10d8bdc26 in void std::__1::vector<UniValue, std::__1::allocator<UniValue> >::__push_back_slow_path<UniValue const&>(UniValue const&) vector:1623\r\n    #3 0x10da8cbae in UniValue::pushKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, UniValue const&) univalue.cpp:142\r\n    #4 0x10d55626b in UniValue::pushKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) univalue.h:137\r\n    #5 0x10d555793 in ScriptPubKeyToUniv(CScript const&, UniValue&, bool) core_write.cpp:168\r\n    #6 0x10c7956b8 in test_one_input(std::__1::vector<unsigned char, std::__1::allocator<unsigned char> > const&) script.cpp:87\r\n    #7 0x10d9fc2ed in LLVMFuzzerTestOneInput fuzz.cpp:38\r\n    #8 0x10dc6c220 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) FuzzerLoop.cpp:556\r\n    #9 0x10dc6b965 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool*) FuzzerLoop.cpp:470\r\n    #10 0x10dc6e007 in fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::__1::vector<fuzzer::SizedFile, fuzzer::fuzzer_allocator<fuzzer::SizedFile> >&) FuzzerLoop.cpp:765\r\n    #11 0x10dc6e369 in fuzzer::Fuzzer::Loop(std::__1::vector<fuzzer::SizedFile, fuzzer::fuzzer_allocator<fuzzer::SizedFile> >&) FuzzerLoop.cpp:792\r\n    #12 0x10dc5b82d in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) FuzzerDriver.cpp:829\r\n    #13 0x10dc87502 in main FuzzerMain.cpp:19\r\n    #14 0x7fff7049ccc8 in start+0x0 (libdyld.dylib:x86_64+0x1acc8)\r\n\r\n# HINT: if you don't care about these errors you may set # ASAN_OPTIONS=detect_container_overflow=0.\r\n# If you suspect a false positive see also: https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow.\r\nSUMMARY: AddressSanitizer: container-overflow univalue.h:19 in UniValue::UniValue(UniValue const&)\r\nShadow bytes around the buggy address:\r\n  0x1c2400000d50: fa fa fa fa fa fa fa fa fd fd fd fd fd fd fd fd\r\n  0x1c2400000d60: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\r\n  0x1c2400000d70: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd\r\n  0x1c2400000d80: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00\r\n  0x1c2400000d90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\r\n=>0x1c2400000da0: 00 00 00 00 00 00[fc]fc fc fc fc fc fc fc fc fc\r\n  0x1c2400000db0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x1c2400000dc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x1c2400000dd0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x1c2400000de0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\n  0x1c2400000df0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\r\nShadow byte legend (one shadow byte represents 8 application bytes):\r\n  Addressable:           00\r\n  Partially addressable: 01 02 03 04 05 06 07 \r\n  Heap left redzone:       fa\r\n  Freed heap region:       fd\r\n  Stack left redzone:      f1\r\n  Stack mid redzone:       f2\r\n  Stack right redzone:     f3\r\n  Stack after return:      f5\r\n  Stack use after scope:   f8\r\n  Global redzone:          f9\r\n  Global init order:       f6\r\n  Poisoned by user:        f7\r\n  Container overflow:      fc\r\n  Array cookie:            ac\r\n  Intra object redzone:    bb\r\n  ASan internal:           fe\r\n  Left alloca redzone:     ca\r\n  Right alloca redzone:    cb\r\n  Shadow gap:              cc\r\n==7371==ABORTING\r\nMS: 0 ; base unit: 0000000000000000000000000000000000000000\r\n0x4,0x55,0x2,0x2,0x55,\r\n\\x04U\\x02\\x02U\r\nartifact_prefix='./'; Test unit written to ./crash-93576ec9789bbd8ab4f8293a224f86d0e59bc5a7\r\nBase64: BFUCAlU=\r\n[1]    7371 abort      src/test/fuzz/script ../qa-assets/fuzz_seed_corpus/script\r\n```",
   "closed_at" : "2022-03-25T07:41:25Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
      "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
      "followers_url" : "https://api.github.com/users/fanquake/followers",
      "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/fanquake",
      "id" : 863730,
      "login" : "fanquake",
      "node_id" : "MDQ6VXNlcjg2MzczMA==",
      "organizations_url" : "https://api.github.com/users/fanquake/orgs",
      "received_events_url" : "https://api.github.com/users/fanquake/received_events",
      "repos_url" : "https://api.github.com/users/fanquake/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/fanquake"
   },
   "comments" : 3,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18763/comments",
   "created_at" : "2020-04-25T09:17:48Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18763/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/18763",
   "id" : 606727959,
   "labels" : [
      {
         "color" : "d4c5f9",
         "default" : false,
         "description" : null,
         "id" : 62963516,
         "name" : "Tests",
         "node_id" : "MDU6TGFiZWw2Mjk2MzUxNg==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18763/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU2MDY3Mjc5NTk=",
   "number" : 18763,
   "performed_via_github_app" : null,
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18763/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18763/timeline",
   "title" : "fuzz: AddressSanitizer: container-overflow in /script fuzzer",
   "updated_at" : "2022-03-25T07:41:25Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18763",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
      "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
      "followers_url" : "https://api.github.com/users/fanquake/followers",
      "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/fanquake",
      "id" : 863730,
      "login" : "fanquake",
      "node_id" : "MDQ6VXNlcjg2MzczMA==",
      "organizations_url" : "https://api.github.com/users/fanquake/orgs",
      "received_events_url" : "https://api.github.com/users/fanquake/received_events",
      "repos_url" : "https://api.github.com/users/fanquake/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/fanquake"
   }
}
