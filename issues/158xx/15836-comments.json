[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276238077"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276238077"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Instead of this parameter, it could have `fee_histogram_bins` (that defaults to `[]` which means no histogram is included in the response). This would replace the above `feelimits` and also avoids breaking clients implementation.",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2019-04-17T13:24:14Z",
      "diff_hunk" : "@@ -1496,16 +1496,76 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        LOCK(pool.cs);\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; //fee per byte\n+            CAmount afpb = afees / asize; //fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; //fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // distribute feerates into feelimits\n+            for (size_t i = 0; i < feelimits.size(); i++) {\n+                if (feeperbyte >= feelimits[i] && (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])) {\n+                    sizes[i] += size;\n+                    count[i]++;\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+        CAmount total_fees = 0; //track total amount of available fees in mempool\n+        UniValue info(UniValue::VOBJ);\n+        for (size_t i = 0; i < feelimits.size(); i++) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"sizes\", sizes[i]);\n+            info_sub.pushKV(\"count\", count[i]);\n+            info_sub.pushKV(\"fees\", fees[i]);\n+            info_sub.pushKV(\"from_feerate\", feelimits[i]);\n+            info_sub.pushKV(\"to_feerate\", i == feelimits.size() - 1 ? std::numeric_limits<int64_t>::max() : feelimits[i + 1]);\n+            total_fees += fees[i];\n+            info.pushKV(std::to_string(feelimits[i]), info_sub);\n+        }\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static UniValue getmempoolinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n+    if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n             RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"with_fee_histogram\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for including the fee histogram in the response\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276238077",
      "id" : 276238077,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjIzODA3Nw==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 83,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 79,
      "pull_request_review_id" : 227749976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-07-17T09:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276238077",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276239167"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276239167"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I believe we should move this up (done in #15474).",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2019-04-17T13:26:29Z",
      "diff_hunk" : "@@ -1496,16 +1496,76 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        LOCK(pool.cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276239167",
      "id" : 276239167,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjIzOTE2Nw==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 30,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 227749976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-07-17T09:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276239167",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276239801"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276239801"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can't we just start to use query parameters?",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2019-04-17T13:27:48Z",
      "diff_hunk" : "@@ -629,7 +639,8 @@ static const struct {\n       {\"/rest/block/notxdetails/\", rest_block_notxdetails},\n       {\"/rest/block/\", rest_block_extended},\n       {\"/rest/chaininfo\", rest_chaininfo},\n-      {\"/rest/mempool/info\", rest_mempool_info},\n+      {\"/rest/mempool/info\", rest_mempool_info_basic},\n+      {\"/rest/mempool/info/with_fee_histogram\", rest_mempool_info_with_fee_histogram},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276239801",
      "id" : 276239801,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjIzOTgwMQ==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 41,
      "path" : "src/rest.cpp",
      "position" : 41,
      "pull_request_review_id" : 227749976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-07-17T09:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276239801",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276246250"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276246250"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Correct me if I'm wrong but if `feelimits` is sorted then `&& (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])` is not necessary.",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2019-04-17T13:40:36Z",
      "diff_hunk" : "@@ -1496,16 +1496,76 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        LOCK(pool.cs);\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; //fee per byte\n+            CAmount afpb = afees / asize; //fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; //fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // distribute feerates into feelimits\n+            for (size_t i = 0; i < feelimits.size(); i++) {\n+                if (feeperbyte >= feelimits[i] && (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276246250",
      "id" : 276246250,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjI0NjI1MA==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 47,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 46,
      "pull_request_review_id" : 227759760,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-07-17T09:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276246250",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276246713"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276246713"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Beside, it could avoid linear search by using `std::find`.",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2019-04-17T13:41:36Z",
      "diff_hunk" : "@@ -1496,16 +1496,76 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        LOCK(pool.cs);\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; //fee per byte\n+            CAmount afpb = afees / asize; //fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; //fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // distribute feerates into feelimits\n+            for (size_t i = 0; i < feelimits.size(); i++) {\n+                if (feeperbyte >= feelimits[i] && (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276246713",
      "id" : 276246713,
      "in_reply_to_id" : 276246250,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjI0NjcxMw==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 47,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 46,
      "pull_request_review_id" : 227760339,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-07-17T09:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276246713",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276262032"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276262032"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would it be efficient to memoize `feelimits.size() - 1` ? (if the compiler doesn't optimize it automatically, my C++ is rusty)",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2019-04-17T14:13:04Z",
      "diff_hunk" : "@@ -1496,16 +1496,76 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        LOCK(pool.cs);\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; //fee per byte\n+            CAmount afpb = afees / asize; //fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; //fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // distribute feerates into feelimits\n+            for (size_t i = 0; i < feelimits.size(); i++) {\n+                if (feeperbyte >= feelimits[i] && (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276262032",
      "id" : 276262032,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjI2MjAzMg==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 47,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 46,
      "pull_request_review_id" : 227780197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-07-17T09:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276262032",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276263273"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276263273"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If `&& (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])` can be removed, the dependency on `feelimits` being sorted would need a regression test.",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2019-04-17T14:15:32Z",
      "diff_hunk" : "@@ -1496,16 +1496,76 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        LOCK(pool.cs);\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; //fee per byte\n+            CAmount afpb = afees / asize; //fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; //fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // distribute feerates into feelimits\n+            for (size_t i = 0; i < feelimits.size(); i++) {\n+                if (feeperbyte >= feelimits[i] && (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276263273",
      "id" : 276263273,
      "in_reply_to_id" : 276262032,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjI2MzI3Mw==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 47,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 46,
      "pull_request_review_id" : 227780197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-07-17T09:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276263273",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276296561"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276296561"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That pull was merged, please rebase and remove this lock.",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2019-04-17T15:18:52Z",
      "diff_hunk" : "@@ -1496,16 +1496,76 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        LOCK(pool.cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276296561",
      "id" : 276296561,
      "in_reply_to_id" : 276239167,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjI5NjU2MQ==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 30,
      "path" : "src/rpc/blockchain.cpp",
      "position" : null,
      "pull_request_review_id" : 227824069,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-07-17T09:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276296561",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276298339"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276298339"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would eventually be better but not scope of this PR (following the current scheme).",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2019-04-17T15:22:32Z",
      "diff_hunk" : "@@ -629,7 +639,8 @@ static const struct {\n       {\"/rest/block/notxdetails/\", rest_block_notxdetails},\n       {\"/rest/block/\", rest_block_extended},\n       {\"/rest/chaininfo\", rest_chaininfo},\n-      {\"/rest/mempool/info\", rest_mempool_info},\n+      {\"/rest/mempool/info\", rest_mempool_info_basic},\n+      {\"/rest/mempool/info/with_fee_histogram\", rest_mempool_info_with_fee_histogram},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276298339",
      "id" : 276298339,
      "in_reply_to_id" : 276239801,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjI5ODMzOQ==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 41,
      "path" : "src/rest.cpp",
      "position" : 41,
      "pull_request_review_id" : 227826416,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-07-17T09:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276298339",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17564](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17564.html) (rpc: Use mempool from node context instead of global by MarcoFalke)\n* [#16365](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16365.html) (Log RPC parameters (arguments) if -debug=rpcparams by LarryRuane)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-04-18T15:14:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-484552109",
      "id" : 484552109,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15836",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4NDU1MjEwOQ==",
      "updated_at" : "2019-11-23T01:54:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/484552109",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276792640"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276792640"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Would it be efficient to memoize `feelimits.size() - 1` ? (if the compiler doesn't optimize it automatically, my C++ is rusty)\r\n\r\nIt shouldn't impact performance either way.",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2019-04-18T18:57:20Z",
      "diff_hunk" : "@@ -1496,16 +1496,76 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        LOCK(pool.cs);\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; //fee per byte\n+            CAmount afpb = afees / asize; //fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; //fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // distribute feerates into feelimits\n+            for (size_t i = 0; i < feelimits.size(); i++) {\n+                if (feeperbyte >= feelimits[i] && (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276792640",
      "id" : 276792640,
      "in_reply_to_id" : 276262032,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Njc5MjY0MA==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 47,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 46,
      "pull_request_review_id" : 228453396,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-07-17T09:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276792640",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276834438"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276834438"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe move this directly into `getmempoolinfo`? Or another helper?",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2019-04-18T21:07:29Z",
      "diff_hunk" : "@@ -1496,16 +1496,76 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276834438",
      "id" : 276834438,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjgzNDQzOA==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 13,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 13,
      "pull_request_review_id" : 228506896,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-07-17T09:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276834438",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276834809"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276834809"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: braces or single line",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2019-04-18T21:08:42Z",
      "diff_hunk" : "@@ -1522,7 +1593,10 @@ static UniValue getmempoolinfo(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n-    return MempoolInfoToJSON(::mempool);\n+    bool with_fee_histogram = false;\n+    if (!request.params[0].isNull())\n+        with_fee_histogram = request.params[0].get_bool();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276834809",
      "id" : 276834809,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjgzNDgwOQ==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 113,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 109,
      "pull_request_review_id" : 228507367,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-07-17T09:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276834809",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r277994666"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277994666"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I thought about another call, but extending `mempoolinfo` with an option for \"more data\" seems to be most allied with other calls where one can get more extended infos on option.",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2019-04-24T07:50:14Z",
      "diff_hunk" : "@@ -1496,16 +1496,76 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r277994666",
      "id" : 277994666,
      "in_reply_to_id" : 276834438,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Nzk5NDY2Ng==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 13,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 13,
      "pull_request_review_id" : 229947357,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-07-17T09:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277994666",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r277996292"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277996292"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2019-04-24T07:54:44Z",
      "diff_hunk" : "@@ -1522,7 +1593,10 @@ static UniValue getmempoolinfo(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n-    return MempoolInfoToJSON(::mempool);\n+    bool with_fee_histogram = false;\n+    if (!request.params[0].isNull())\n+        with_fee_histogram = request.params[0].get_bool();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r277996292",
      "id" : 277996292,
      "in_reply_to_id" : 276834809,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Nzk5NjI5Mg==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 113,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 109,
      "pull_request_review_id" : 229949335,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-07-17T09:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277996292",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r278028394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/278028394"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I mean just have the code outside this function. The RPC would then call both `MempoolInfoToJSON` and also `JSONMempoolInfoAddHistogram` (or whatever this code gets called)",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2019-04-24T09:13:17Z",
      "diff_hunk" : "@@ -1496,16 +1496,76 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r278028394",
      "id" : 278028394,
      "in_reply_to_id" : 276834438,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3ODAyODM5NA==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 13,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 13,
      "pull_request_review_id" : 229988191,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-07-17T09:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/278028394",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK / tACK 9ef932513f0c606d019524983a238def3a300810",
      "created_at" : "2019-05-14T21:06:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-492409851",
      "id" : 492409851,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15836",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5MjQwOTg1MQ==",
      "updated_at" : "2019-05-14T21:06:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/492409851",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r291592001"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/291592001"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Still voting against query parameters. With REST the general preference seems to be to turn parameters into URL segments, and query parameters tend to be avoided because they look ugly and are hard to remember.",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2019-06-07T13:29:22Z",
      "diff_hunk" : "@@ -629,7 +639,8 @@ static const struct {\n       {\"/rest/block/notxdetails/\", rest_block_notxdetails},\n       {\"/rest/block/\", rest_block_extended},\n       {\"/rest/chaininfo\", rest_chaininfo},\n-      {\"/rest/mempool/info\", rest_mempool_info},\n+      {\"/rest/mempool/info\", rest_mempool_info_basic},\n+      {\"/rest/mempool/info/with_fee_histogram\", rest_mempool_info_with_fee_histogram},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r291592001",
      "id" : 291592001,
      "in_reply_to_id" : 276239801,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MTU5MjAwMQ==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 41,
      "path" : "src/rest.cpp",
      "position" : 41,
      "pull_request_review_id" : 247094801,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-07-17T09:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/291592001",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. This gives me a new warning on build:\r\n```\r\n/home/user/src/bitcoin/src/rpc/blockchain.cpp:1550:9: warning: acquiring mutex 'pool.cs' that is already held [-Wthread-safety-analysis]\r\n        LOCK(pool.cs);\r\n        ^\r\n/home/user/src/bitcoin/src/sync.h:182:42: note: expanded from macro 'LOCK'\r\n#define LOCK(cs) DebugLock<decltype(cs)> PASTE2(criticalblock, __COUNTER__)(cs, #cs, __FILE__, __LINE__)\r\n                                         ^\r\n/home/user/src/bitcoin/src/sync.h:180:22: note: expanded from macro 'PASTE2'\r\n#define PASTE2(x, y) PASTE(x, y)\r\n                     ^\r\n/home/user/src/bitcoin/src/sync.h:179:21: note: expanded from macro 'PASTE'\r\n#define PASTE(x, y) x ## y\r\n                    ^\r\n<scratch space>:138:1: note: expanded from here\r\ncriticalblock23\r\n^\r\n1 warning generated.\r\n```",
      "created_at" : "2019-06-07T13:34:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-499886548",
      "id" : 499886548,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15836",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5OTg4NjU0OA==",
      "updated_at" : "2019-06-07T13:34:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/499886548",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r291598239"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/291598239"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think there's a \"standard\" here but with REST usually the URL path identifies a resource, a collection of resources, or an action - the verb is also relevant. But parameters are usually set in the URL query, order independent and can be optional. I also think this is more flexible, for instance, you could support `...?verbose=true` in all endpoints (just an example).",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2019-06-07T13:44:21Z",
      "diff_hunk" : "@@ -629,7 +639,8 @@ static const struct {\n       {\"/rest/block/notxdetails/\", rest_block_notxdetails},\n       {\"/rest/block/\", rest_block_extended},\n       {\"/rest/chaininfo\", rest_chaininfo},\n-      {\"/rest/mempool/info\", rest_mempool_info},\n+      {\"/rest/mempool/info\", rest_mempool_info_basic},\n+      {\"/rest/mempool/info/with_fee_histogram\", rest_mempool_info_with_fee_histogram},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r291598239",
      "id" : 291598239,
      "in_reply_to_id" : 276239801,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5MTU5ODIzOQ==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 41,
      "path" : "src/rest.cpp",
      "position" : 41,
      "pull_request_review_id" : 247102876,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-07-17T09:44:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/291598239",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Fixed the lock issue.\r\nRebased.",
      "created_at" : "2019-07-17T09:43:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-512182997",
      "id" : 512182997,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15836",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxMjE4Mjk5Nw==",
      "updated_at" : "2019-07-17T09:43:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/512182997",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r304327165"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/304327165"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Remove these files and maybe update .gitignore?",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2019-07-17T10:22:07Z",
      "diff_hunk" : "@@ -0,0 +1,2 @@\n+// Add predefined macros for your project here. For example:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r304327165",
      "id" : 304327165,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNDMyNzE2NQ==",
      "original_commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "original_position" : 1,
      "path" : "Bitcoin-Qt.config",
      "position" : 1,
      "pull_request_review_id" : 262934461,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-07-17T11:19:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/304327165",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r304346834"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/304346834"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This must be before the above line (order is important) otherwise `rest_mempool_info_with_fee_histogram ` is never called.",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2019-07-17T11:15:43Z",
      "diff_hunk" : "@@ -629,7 +639,8 @@ static const struct {\n       {\"/rest/block/notxdetails/\", rest_block_notxdetails},\n       {\"/rest/block/\", rest_block_extended},\n       {\"/rest/chaininfo\", rest_chaininfo},\n-      {\"/rest/mempool/info\", rest_mempool_info},\n+      {\"/rest/mempool/info\", rest_mempool_info_basic},\n+      {\"/rest/mempool/info/with_fee_histogram\", rest_mempool_info_with_fee_histogram},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r304346834",
      "id" : 304346834,
      "in_reply_to_id" : 276239801,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwNDM0NjgzNA==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 41,
      "path" : "src/rest.cpp",
      "position" : 41,
      "pull_request_review_id" : 262934461,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-07-17T12:29:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/304346834",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-12-16T21:54:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-566261646",
      "id" : 566261646,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15836",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NjI2MTY0Ng==",
      "updated_at" : "2019-12-16T21:54:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/566261646",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r437788703"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437788703"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should change this to use `ToString`",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2020-06-10T00:07:08Z",
      "diff_hunk" : "@@ -1490,14 +1490,73 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; //fee per byte\n+            CAmount afpb = afees / asize; //fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; //fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // distribute feerates into feelimits\n+            for (size_t i = 0; i < feelimits.size(); i++) {\n+                if (feeperbyte >= feelimits[i] && (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])) {\n+                    sizes[i] += size;\n+                    count[i]++;\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+        CAmount total_fees = 0; //track total amount of available fees in mempool\n+        UniValue info(UniValue::VOBJ);\n+        for (size_t i = 0; i < feelimits.size(); i++) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"sizes\", sizes[i]);\n+            info_sub.pushKV(\"count\", count[i]);\n+            info_sub.pushKV(\"fees\", fees[i]);\n+            info_sub.pushKV(\"from_feerate\", feelimits[i]);\n+            info_sub.pushKV(\"to_feerate\", i == feelimits.size() - 1 ? std::numeric_limits<int64_t>::max() : feelimits[i + 1]);\n+            total_fees += fees[i];\n+            info.pushKV(std::to_string(feelimits[i]), info_sub);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r437788703",
      "id" : 437788703,
      "line" : 1544,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4ODcwMw==",
      "original_commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "original_line" : 1544,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 64,
      "pull_request_review_id" : 427626459,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-06-10T00:07:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/437788703",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK, it would be super useful",
      "created_at" : "2020-10-12T09:55:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-707016447",
      "id" : 707016447,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15836",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwNzAxNjQ0Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-12T09:55:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/707016447",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/3020646?v=4",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "node_id" : "MDQ6VXNlcjMwMjA2NDY=",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r528352743"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528352743"
         }
      },
      "author_association" : "NONE",
      "body" : "JSON objects are unordered collections, so maybe using an array for \"fee_histogram\" would make more sense since it would always stay sorted.",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2020-11-22T15:40:40Z",
      "diff_hunk" : "@@ -1490,14 +1490,73 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; //fee per byte\n+            CAmount afpb = afees / asize; //fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; //fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // distribute feerates into feelimits\n+            for (size_t i = 0; i < feelimits.size(); i++) {\n+                if (feeperbyte >= feelimits[i] && (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])) {\n+                    sizes[i] += size;\n+                    count[i]++;\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+        CAmount total_fees = 0; //track total amount of available fees in mempool\n+        UniValue info(UniValue::VOBJ);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r528352743",
      "id" : 528352743,
      "line" : 1535,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODM1Mjc0Mw==",
      "original_commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "original_line" : 1535,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 55,
      "pull_request_review_id" : 536073777,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-22T15:41:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/528352743",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK, I will be using this if available for both [bwt](https://github.com/bwt-dev/bwt) and [esplora/electrs](https://github.com/blockstream/esplora). Electrum Personal Server can [also benefit from it](https://github.com/chris-belcher/electrum-personal-server/issues/96).",
      "created_at" : "2021-01-19T18:20:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-763030901",
      "id" : 763030901,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15836",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2MzAzMDkwMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-19T18:23:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/763030901",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/877904?v=4",
         "events_url" : "https://api.github.com/users/shesek/events{/privacy}",
         "followers_url" : "https://api.github.com/users/shesek/followers",
         "following_url" : "https://api.github.com/users/shesek/following{/other_user}",
         "gists_url" : "https://api.github.com/users/shesek/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/shesek",
         "id" : 877904,
         "login" : "shesek",
         "node_id" : "MDQ6VXNlcjg3NzkwNA==",
         "organizations_url" : "https://api.github.com/users/shesek/orgs",
         "received_events_url" : "https://api.github.com/users/shesek/received_events",
         "repos_url" : "https://api.github.com/users/shesek/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/shesek/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/shesek/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/shesek"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r588927756"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/588927756"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Correct me if I'm wrong but if `feelimits` is sorted then `&& (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])` is not necessary.\r\n\r\nYes, but then it should be with for loop in form `for (size_t i = feelimits.size() - 1; i >= 0 ; i--) {` ",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2021-03-06T20:32:18Z",
      "diff_hunk" : "@@ -1496,16 +1496,76 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        LOCK(pool.cs);\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; //fee per byte\n+            CAmount afpb = afees / asize; //fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; //fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // distribute feerates into feelimits\n+            for (size_t i = 0; i < feelimits.size(); i++) {\n+                if (feeperbyte >= feelimits[i] && (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r588927756",
      "id" : 588927756,
      "in_reply_to_id" : 276246250,
      "line" : 1526,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkyNzc1Ng==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_line" : 1526,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 46,
      "pull_request_review_id" : 605785795,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-06T20:32:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/588927756",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r588933214"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/588933214"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Correct me if I'm wrong but if `feelimits` is sorted then `&& (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])` is not necessary.\r\n\r\nYes, but then then for loop on line 1532 should be in reverse order: `for (int i = feelimits.size() - 1; i >= 0; i--) {`",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2021-03-06T21:28:06Z",
      "diff_hunk" : "@@ -1496,16 +1496,76 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        LOCK(pool.cs);\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; //fee per byte\n+            CAmount afpb = afees / asize; //fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; //fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // distribute feerates into feelimits\n+            for (size_t i = 0; i < feelimits.size(); i++) {\n+                if (feeperbyte >= feelimits[i] && (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r588933214",
      "id" : 588933214,
      "in_reply_to_id" : 276246250,
      "line" : 1526,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkzMzIxNA==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_line" : 1526,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 46,
      "pull_request_review_id" : 605789123,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-06T21:34:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/588933214",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jonasschnelli This https://github.com/kiminuo/bitcoin/tree/feature/2021-03-Feerate-histogram is an attempt to do the rebase work and apply a few review comments:\r\n\r\n**Applied review comments**\r\n\r\n* https://github.com/bitcoin/bitcoin/pull/15836#discussion_r304327165 - \"Remove these files and maybe update .gitignore?\"\r\n* https://github.com/bitcoin/bitcoin/pull/15836#discussion_r304346834 - \"This must be before the above line (order is important) otherwise `rest_mempool_info_with_fee_histogram` is never called.\"\r\n* https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-499886548 - \"This gives me a new warning on build: [...]\" This is already addressed, I believe.\r\n* https://github.com/bitcoin/bitcoin/pull/15836#discussion_r588927756 - Simplify `if (feeperbyte >= feelimits[i] && (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])) {`\r\n* https://github.com/bitcoin/bitcoin/commit/0b6ba66238c377116bc6c21e19cffbf1b6dfc788 - Test proposed by @promag\r\n\r\n**Test commands**\r\n\r\n```bash\r\n$ ./bitcoin-cli -testnet getmempoolinfo true # To test the new behavior\r\n```\r\n\r\n```bash\r\n$ test/functional/test_runner.py mempool_fee_histogram.py # To run the new test\r\n```\r\n\r\n```bash\r\n$ ./bitcoin-cli -testnet help getmempoolinfo # bitcoind has to run for this command to succeed :(\r\ngetmempoolinfo ( with_fee_histogram )\r\n\r\nReturns details on the active state of the TX memory pool.\r\n\r\nArguments:\r\n1. with_fee_histogram    (boolean, optional, default=false) True for including the fee histogram in the response\r\n\r\nResult:\r\n{                            (json object)\r\n  \"loaded\" : true|false,     (boolean) True if the mempool is fully loaded\r\n  \"size\" : n,                (numeric) Current tx count\r\n  \"bytes\" : n,               (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\r\n  \"usage\" : n,               (numeric) Total memory usage for the mempool\r\n  \"total_fee\" : n,           (numeric) Total fees for the mempool in BTC, ignoring modified fees through prioritizetransaction\r\n  \"maxmempool\" : n,          (numeric) Maximum memory usage for the mempool\r\n  \"mempoolminfee\" : n,       (numeric) Minimum fee rate in BTC/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\r\n  \"minrelaytxfee\" : n,       (numeric) Current minimum relay fee for transactions\r\n  \"unbroadcastcount\" : n,    (numeric) Current number of transactions that haven't passed initial broadcast yet\r\n  \"fee_histogram\" : {        (json object)\r\n    \"<feerate-group>\" : {    (json object) Object per feerate group\r\n      \"sizes\" : n,           (numeric) Cumulated size of all transactions in feerate group\r\n      \"count\" : n,           (numeric) Amount of transactions in feerate group\r\n      \"fees\" : n,            (numeric) Cumulated fee of all transactions in feerate group\r\n      \"from_feerate\" : n,    (numeric) Group contains transaction with feerates equal or greater than this value\r\n      \"to_feerate\" : n       (numeric) Group contains transaction with feerates less than than this value\r\n    },\r\n    \"total_fees\" : n         (numeric) Total available fees in mempool\r\n  }\r\n}\r\n\r\nExamples:\r\n> bitcoin-cli getmempoolinfo\r\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"getmempoolinfo\", \"params\": []}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\r\n```\r\n\r\n**Output on testnet (2021-03-07)**\r\n\r\n```bash\r\n./bitcoin-cli -testnet getmempoolinfo true\r\n```\r\n\r\n<details>\r\n  <summary>JSON output</summary>\r\n\r\n  ```json\r\n    {\r\n      \"loaded\": true,\r\n      \"size\": 73,\r\n      \"bytes\": 19620,\r\n      \"usage\": 108816,\r\n      \"total_fee\": 0.00833952,\r\n      \"maxmempool\": 300000000,\r\n      \"mempoolminfee\": 0.00001000,\r\n      \"minrelaytxfee\": 0.00001000,\r\n      \"unbroadcastcount\": 0,\r\n      \"fee_histogram\": {\r\n        \"1\": {\r\n          \"sizes\": 6615,\r\n          \"count\": 38,\r\n          \"fees\": 7817,\r\n          \"from_feerate\": 1,\r\n          \"to_feerate\": 2\r\n        },\r\n        \"2\": {\r\n          \"sizes\": 1553,\r\n          \"count\": 5,\r\n          \"fees\": 3852,\r\n          \"from_feerate\": 2,\r\n          \"to_feerate\": 3\r\n        },\r\n        \"3\": {\r\n          \"sizes\": 251,\r\n          \"count\": 2,\r\n          \"fees\": 784,\r\n          \"from_feerate\": 3,\r\n          \"to_feerate\": 4\r\n        },\r\n        \"4\": {\r\n          \"sizes\": 285,\r\n          \"count\": 2,\r\n          \"fees\": 1356,\r\n          \"from_feerate\": 4,\r\n          \"to_feerate\": 5\r\n        },\r\n        \"5\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 5,\r\n          \"to_feerate\": 6\r\n        },\r\n        \"6\": {\r\n          \"sizes\": 166,\r\n          \"count\": 1,\r\n          \"fees\": 1130,\r\n          \"from_feerate\": 6,\r\n          \"to_feerate\": 7\r\n        },\r\n        \"7\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 7,\r\n          \"to_feerate\": 8\r\n        },\r\n        \"8\": {\r\n          \"sizes\": 225,\r\n          \"count\": 1,\r\n          \"fees\": 2000,\r\n          \"from_feerate\": 8,\r\n          \"to_feerate\": 10\r\n        },\r\n        \"10\": {\r\n          \"sizes\": 168,\r\n          \"count\": 1,\r\n          \"fees\": 1808,\r\n          \"from_feerate\": 10,\r\n          \"to_feerate\": 12\r\n        },\r\n        \"12\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 12,\r\n          \"to_feerate\": 14\r\n        },\r\n        \"14\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 14,\r\n          \"to_feerate\": 17\r\n        },\r\n        \"17\": {\r\n          \"sizes\": 1581,\r\n          \"count\": 1,\r\n          \"fees\": 31200,\r\n          \"from_feerate\": 17,\r\n          \"to_feerate\": 20\r\n        },\r\n        \"20\": {\r\n          \"sizes\": 332,\r\n          \"count\": 2,\r\n          \"fees\": 8040,\r\n          \"from_feerate\": 20,\r\n          \"to_feerate\": 25\r\n        },\r\n        \"25\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 25,\r\n          \"to_feerate\": 30\r\n        },\r\n        \"30\": {\r\n          \"sizes\": 2037,\r\n          \"count\": 4,\r\n          \"fees\": 64410,\r\n          \"from_feerate\": 30,\r\n          \"to_feerate\": 40\r\n        },\r\n        \"40\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 40,\r\n          \"to_feerate\": 50\r\n        },\r\n        \"50\": {\r\n          \"sizes\": 2768,\r\n          \"count\": 4,\r\n          \"fees\": 143913,\r\n          \"from_feerate\": 50,\r\n          \"to_feerate\": 60\r\n        },\r\n        \"60\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 60,\r\n          \"to_feerate\": 70\r\n        },\r\n        \"70\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 70,\r\n          \"to_feerate\": 80\r\n        },\r\n        \"80\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 80,\r\n          \"to_feerate\": 100\r\n        },\r\n        \"100\": {\r\n          \"sizes\": 1079,\r\n          \"count\": 7,\r\n          \"fees\": 110042,\r\n          \"from_feerate\": 100,\r\n          \"to_feerate\": 120\r\n        },\r\n        \"120\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 120,\r\n          \"to_feerate\": 140\r\n        },\r\n        \"140\": {\r\n          \"sizes\": 1998,\r\n          \"count\": 3,\r\n          \"fees\": 300000,\r\n          \"from_feerate\": 140,\r\n          \"to_feerate\": 170\r\n        },\r\n        \"170\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 170,\r\n          \"to_feerate\": 200\r\n        },\r\n        \"200\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 200,\r\n          \"to_feerate\": 250\r\n        },\r\n        \"250\": {\r\n          \"sizes\": 371,\r\n          \"count\": 1,\r\n          \"fees\": 100000,\r\n          \"from_feerate\": 250,\r\n          \"to_feerate\": 300\r\n        },\r\n        \"300\": {\r\n          \"sizes\": 191,\r\n          \"count\": 1,\r\n          \"fees\": 57600,\r\n          \"from_feerate\": 300,\r\n          \"to_feerate\": 400\r\n        },\r\n        \"400\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 400,\r\n          \"to_feerate\": 500\r\n        },\r\n        \"500\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 500,\r\n          \"to_feerate\": 600\r\n        },\r\n        \"600\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 600,\r\n          \"to_feerate\": 700\r\n        },\r\n        \"700\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 700,\r\n          \"to_feerate\": 800\r\n        },\r\n        \"800\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 800,\r\n          \"to_feerate\": 1000\r\n        },\r\n        \"1000\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 1000,\r\n          \"to_feerate\": 1200\r\n        },\r\n        \"1200\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 1200,\r\n          \"to_feerate\": 1400\r\n        },\r\n        \"1400\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 1400,\r\n          \"to_feerate\": 1700\r\n        },\r\n        \"1700\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 1700,\r\n          \"to_feerate\": 2000\r\n        },\r\n        \"2000\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 2000,\r\n          \"to_feerate\": 2500\r\n        },\r\n        \"2500\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 2500,\r\n          \"to_feerate\": 3000\r\n        },\r\n        \"3000\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 3000,\r\n          \"to_feerate\": 4000\r\n        },\r\n        \"4000\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 4000,\r\n          \"to_feerate\": 5000\r\n        },\r\n        \"5000\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 5000,\r\n          \"to_feerate\": 6000\r\n        },\r\n        \"6000\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 6000,\r\n          \"to_feerate\": 7000\r\n        },\r\n        \"7000\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 7000,\r\n          \"to_feerate\": 8000\r\n        },\r\n        \"8000\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 8000,\r\n          \"to_feerate\": 10000\r\n        },\r\n        \"10000\": {\r\n          \"sizes\": 0,\r\n          \"count\": 0,\r\n          \"fees\": 0,\r\n          \"from_feerate\": 10000,\r\n          \"to_feerate\": 9223372036854775807\r\n        },\r\n        \"total_fees\": 833952\r\n      }\r\n    }\r\n  ```\r\n</details>",
      "created_at" : "2021-03-06T21:57:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-792070533",
      "id" : 792070533,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15836",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc5MjA3MDUzMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-12T14:37:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/792070533",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I have forked this PR: #21422 and I'm willing to continue working on that.",
      "created_at" : "2021-03-12T14:58:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-797543170",
      "id" : 797543170,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15836",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc5NzU0MzE3MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-12T14:58:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797543170",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r608159325"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608159325"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "what is sizes? I've noticed that when adding up all the sizes when the mempool is full, that the number doesn't stay fixed as I would have expected when the mempool is full - so it's not the number of bytes used in memory to store the tx - so, what is it?",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2021-04-06T20:29:47Z",
      "diff_hunk" : "@@ -1490,14 +1490,73 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; //fee per byte\n+            CAmount afpb = afees / asize; //fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; //fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // distribute feerates into feelimits\n+            for (size_t i = 0; i < feelimits.size(); i++) {\n+                if (feeperbyte >= feelimits[i] && (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])) {\n+                    sizes[i] += size;\n+                    count[i]++;\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+        CAmount total_fees = 0; //track total amount of available fees in mempool\n+        UniValue info(UniValue::VOBJ);\n+        for (size_t i = 0; i < feelimits.size(); i++) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"sizes\", sizes[i]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r608159325",
      "id" : 608159325,
      "line" : 1538,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODE1OTMyNQ==",
      "original_commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "original_line" : 1538,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 58,
      "pull_request_review_id" : 629382235,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-06T20:29:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608159325",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=4",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "node_id" : "MDQ6VXNlcjE1MzAyODM=",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r608680611"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608680611"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "So the histogram is based on fee rates intervals. The histogram is modeled using three vectors:\r\n\r\n```cpp\r\n        std::vector<uint64_t> sizes(feelimits.size(), 0);\r\n        std::vector<uint64_t> count(feelimits.size(), 0);\r\n        std::vector<uint64_t> fees(feelimits.size(), 0);\r\n```\r\n\r\nwhere `sizes[0]` represents cumulative size of txs belonging to the first fee rate interval `[1, 2)`, `sizes[1]` represents  cumulative size of txs belonging to the second fee rate interval `[2, 3)`, etc.\r\n\r\n[Line 1527](https://github.com/bitcoin/bitcoin/pull/15836/files#diff-decae4be02fb8a47ab4557fe74a9cb853bdfa3ec0fa1b515c0a1e5de91f4ad0bR1527) shows that we add `size` to `sizes[i]` where `size` is defined as `int size = (int)e.GetTxSize();` which is defined as:\r\n\r\n```cpp\r\nsize_t CTxMemPoolEntry::GetTxSize() const\r\n{\r\n    return GetVirtualTransactionSize(nTxWeight, sigOpCost);\r\n}\r\n```\r\n\r\nWhat is virtual size of a transaction? This is explained here: https://bitcoin.stackexchange.com/questions/92689/how-is-the-size-of-a-bitcoin-transaction-calculated.\r\n\r\nHTH!\r\n\r\npromo: You may have a look at #21422 too. :)",
      "commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "created_at" : "2021-04-07T13:58:32Z",
      "diff_hunk" : "@@ -1490,14 +1490,73 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; //fee per byte\n+            CAmount afpb = afees / asize; //fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; //fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // distribute feerates into feelimits\n+            for (size_t i = 0; i < feelimits.size(); i++) {\n+                if (feeperbyte >= feelimits[i] && (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])) {\n+                    sizes[i] += size;\n+                    count[i]++;\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+        CAmount total_fees = 0; //track total amount of available fees in mempool\n+        UniValue info(UniValue::VOBJ);\n+        for (size_t i = 0; i < feelimits.size(); i++) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"sizes\", sizes[i]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r608680611",
      "id" : 608680611,
      "in_reply_to_id" : 608159325,
      "line" : 1538,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODY4MDYxMQ==",
      "original_commit_id" : "b94292a7cb18f0ea482ec62c08d1050c77de04b2",
      "original_line" : 1538,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 58,
      "pull_request_review_id" : 630042696,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-07T13:58:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608680611",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm chasing \"concept ACK\"s for the reborn version of this PR - namely #21422. \r\n\r\nAny other feedback is welcome, I have time to do modifications if needed to increase the chance of getting the PR to be merged.",
      "created_at" : "2021-04-14T14:41:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-819572017",
      "id" : 819572017,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15836",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxOTU3MjAxNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-14T14:41:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819572017",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jonasschnelli the simple plot example doesn't display (seems the website is down).",
      "created_at" : "2021-04-18T20:20:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-822054599",
      "id" : 822054599,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15836",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMjA1NDU5OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-18T20:20:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822054599",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=4",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "node_id" : "MDQ6VXNlcjE1MzAyODM=",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@rebroad The link redirects to https://bitcoin.jonasschnelli.ch/mempool-histogram/ but there is a bug (missing slash). Anyway, there are no data at the moment.",
      "created_at" : "2021-04-18T20:23:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-822055018",
      "id" : 822055018,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15836",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMjA1NTAxOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-18T20:23:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822055018",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Closing this, given it's been taken over in #21422.",
      "created_at" : "2021-08-18T07:51:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-900899200",
      "id" : 900899200,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15836",
      "node_id" : "IC_kwDOABII5841sqGA",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-18T07:51:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/900899200",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   }
]
