[
   {
      "author_association" : "MEMBER",
      "body" : "Nice! This has been on my list for a long time. Thanks for doing it!\r\n\r\nÃ°ÂÂÂ concept ACK ",
      "created_at" : "2019-04-19T20:33:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#issuecomment-485007223",
      "id" : 485007223,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15858",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4NTAwNzIyMw==",
      "updated_at" : "2019-04-19T20:33:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/485007223",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This is an impressive improvement in speed!\r\nACK fad26ed5fa5bf9fc0cf60e84a135e7d03c934000\r\n\r\na test here:\r\n```\r\nALL                                   | Ã¢ÂÂ Passed  | 1788 s (accumulated)\r\nRuntime: 472 s\r\n```\r\n```\r\nALL                                   | Ã¢ÂÂ Passed  | 1516 s (accumulated)\r\nRuntime: 388 s\r\n```",
      "created_at" : "2019-04-20T12:20:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#issuecomment-485107509",
      "id" : 485107509,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15858",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4NTEwNzUwOQ==",
      "updated_at" : "2019-04-20T12:20:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/485107509",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277184364"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277184364"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could assert error \"insufficient fee\"?",
      "commit_id" : "faac5a8ff6c9966daa880bc8c02951fea804589d",
      "created_at" : "2019-04-21T23:02:05Z",
      "diff_hunk" : "@@ -390,15 +390,63 @@ def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n         time.sleep(wait)\n     raise AssertionError(\"Block sync timed out:{}\".format(\"\".join(\"\\n  {!r}\".format(b) for b in best_hash)))\n \n-def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n+def sync_mempools(rpc_connections, *, wait=1, timeout=60, use_rpc_sync=False, flush_scheduler=True):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n     pools\n     \"\"\"\n+\n+    class TxInfo:\n+        def __init__(self, *, raw, ancestors):\n+            self.raw = raw\n+            self.ancestors = ancestors\n+\n+    def topo_send(txs, rpc, pool_add):\n+        for i in txs:\n+            topo_send(txs[i].ancestors, rpc, pool_add)\n+            if i not in pool_add:\n+                try:\n+                    assert_equal(i, rpc.sendrawtransaction(txs[i].raw))\n+                    pool_add.add(i)\n+                    # Note that conflicted txs (due to RBF) are not removed\n+                    # from the pool\n+                except JSONRPCException:\n+                    # This transaction violates policy (e.g. RBF policy). The\n+                    # mempools should still converge when the high-fee\n+                    # replacement is synced in a later call\n+                    pass",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277184364",
      "id" : 277184364,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzE4NDM2NA==",
      "original_commit_id" : "fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
      "original_position" : 29,
      "path" : "test/functional/test_framework/util.py",
      "position" : null,
      "pull_request_review_id" : 228929644,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858",
      "updated_at" : "2019-04-22T20:12:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277184364",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277184430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277184430"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could skip when `i_remove == i_target`?",
      "commit_id" : "faac5a8ff6c9966daa880bc8c02951fea804589d",
      "created_at" : "2019-04-21T23:04:49Z",
      "diff_hunk" : "@@ -390,15 +390,63 @@ def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n         time.sleep(wait)\n     raise AssertionError(\"Block sync timed out:{}\".format(\"\".join(\"\\n  {!r}\".format(b) for b in best_hash)))\n \n-def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n+def sync_mempools(rpc_connections, *, wait=1, timeout=60, use_rpc_sync=False, flush_scheduler=True):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n     pools\n     \"\"\"\n+\n+    class TxInfo:\n+        def __init__(self, *, raw, ancestors):\n+            self.raw = raw\n+            self.ancestors = ancestors\n+\n+    def topo_send(txs, rpc, pool_add):\n+        for i in txs:\n+            topo_send(txs[i].ancestors, rpc, pool_add)\n+            if i not in pool_add:\n+                try:\n+                    assert_equal(i, rpc.sendrawtransaction(txs[i].raw))\n+                    pool_add.add(i)\n+                    # Note that conflicted txs (due to RBF) are not removed\n+                    # from the pool\n+                except JSONRPCException:\n+                    # This transaction violates policy (e.g. RBF policy). The\n+                    # mempools should still converge when the high-fee\n+                    # replacement is synced in a later call\n+                    pass\n+\n     stop_time = time.time() + timeout\n     while time.time() <= stop_time:\n         pool = [set(r.getrawmempool()) for r in rpc_connections]\n-        if pool.count(pool[0]) == len(rpc_connections):\n+        sync_done = pool.count(pool[0]) == len(rpc_connections)\n+        if use_rpc_sync and not sync_done:\n+            for i_remote, rpc_remote in enumerate(rpc_connections):\n+                pool_remote = {\n+                    txid: TxInfo(raw=rpc_remote.getrawtransaction(txid), ancestors=info['depends'])\n+                    for txid, info in rpc_remote.getrawmempool(verbose=True).items()\n+                }\n+                # Create \"recursive pools\" for ancestors\n+                for tx in pool_remote:\n+                    pool_remote[tx].ancestors = {a: pool_remote[a] for a in pool_remote[tx].ancestors}\n+\n+                # Push this pool to all targets\n+                for i_target, rpc_target in enumerate(rpc_connections):\n+                    missing_txids = pool[i_remote].difference(pool[i_target])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277184430",
      "id" : 277184430,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzE4NDQzMA==",
      "original_commit_id" : "fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
      "original_position" : 48,
      "path" : "test/functional/test_framework/util.py",
      "position" : null,
      "pull_request_review_id" : 228929644,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858",
      "updated_at" : "2019-04-22T20:12:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277184430",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277184625"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277184625"
         }
      },
      "author_association" : "MEMBER",
      "body" : "A brief description of the following algorithm would be handy.",
      "commit_id" : "faac5a8ff6c9966daa880bc8c02951fea804589d",
      "created_at" : "2019-04-21T23:14:46Z",
      "diff_hunk" : "@@ -390,15 +390,63 @@ def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n         time.sleep(wait)\n     raise AssertionError(\"Block sync timed out:{}\".format(\"\".join(\"\\n  {!r}\".format(b) for b in best_hash)))\n \n-def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n+def sync_mempools(rpc_connections, *, wait=1, timeout=60, use_rpc_sync=False, flush_scheduler=True):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n     pools\n     \"\"\"\n+\n+    class TxInfo:\n+        def __init__(self, *, raw, ancestors):\n+            self.raw = raw\n+            self.ancestors = ancestors\n+\n+    def topo_send(txs, rpc, pool_add):\n+        for i in txs:\n+            topo_send(txs[i].ancestors, rpc, pool_add)\n+            if i not in pool_add:\n+                try:\n+                    assert_equal(i, rpc.sendrawtransaction(txs[i].raw))\n+                    pool_add.add(i)\n+                    # Note that conflicted txs (due to RBF) are not removed\n+                    # from the pool\n+                except JSONRPCException:\n+                    # This transaction violates policy (e.g. RBF policy). The\n+                    # mempools should still converge when the high-fee\n+                    # replacement is synced in a later call\n+                    pass\n+\n     stop_time = time.time() + timeout\n     while time.time() <= stop_time:\n         pool = [set(r.getrawmempool()) for r in rpc_connections]\n-        if pool.count(pool[0]) == len(rpc_connections):\n+        sync_done = pool.count(pool[0]) == len(rpc_connections)\n+        if use_rpc_sync and not sync_done:\n+            for i_remote, rpc_remote in enumerate(rpc_connections):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277184625",
      "id" : 277184625,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzE4NDYyNQ==",
      "original_commit_id" : "fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
      "original_position" : 37,
      "path" : "test/functional/test_framework/util.py",
      "position" : null,
      "pull_request_review_id" : 228929644,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858",
      "updated_at" : "2019-04-22T20:12:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277184625",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277243663"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277243663"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Adding code documentation in the docstring here would be great, detailling `use_rpc_sync` purpose and use.",
      "commit_id" : "faac5a8ff6c9966daa880bc8c02951fea804589d",
      "created_at" : "2019-04-22T09:04:38Z",
      "diff_hunk" : "@@ -390,15 +390,63 @@ def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n         time.sleep(wait)\n     raise AssertionError(\"Block sync timed out:{}\".format(\"\".join(\"\\n  {!r}\".format(b) for b in best_hash)))\n \n-def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n+def sync_mempools(rpc_connections, *, wait=1, timeout=60, use_rpc_sync=False, flush_scheduler=True):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277243663",
      "id" : 277243663,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzI0MzY2Mw==",
      "original_commit_id" : "fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
      "original_position" : 5,
      "path" : "test/functional/test_framework/util.py",
      "position" : 5,
      "pull_request_review_id" : 229002026,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858",
      "updated_at" : "2019-04-22T20:12:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277243663",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277243742"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277243742"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes -- code docs here would be helpful.",
      "commit_id" : "fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
      "created_at" : "2019-04-22T09:05:05Z",
      "diff_hunk" : "@@ -390,15 +390,63 @@ def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n         time.sleep(wait)\n     raise AssertionError(\"Block sync timed out:{}\".format(\"\".join(\"\\n  {!r}\".format(b) for b in best_hash)))\n \n-def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n+def sync_mempools(rpc_connections, *, wait=1, timeout=60, use_rpc_sync=False, flush_scheduler=True):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n     pools\n     \"\"\"\n+\n+    class TxInfo:\n+        def __init__(self, *, raw, ancestors):\n+            self.raw = raw\n+            self.ancestors = ancestors\n+\n+    def topo_send(txs, rpc, pool_add):\n+        for i in txs:\n+            topo_send(txs[i].ancestors, rpc, pool_add)\n+            if i not in pool_add:\n+                try:\n+                    assert_equal(i, rpc.sendrawtransaction(txs[i].raw))\n+                    pool_add.add(i)\n+                    # Note that conflicted txs (due to RBF) are not removed\n+                    # from the pool\n+                except JSONRPCException:\n+                    # This transaction violates policy (e.g. RBF policy). The\n+                    # mempools should still converge when the high-fee\n+                    # replacement is synced in a later call\n+                    pass\n+\n     stop_time = time.time() + timeout\n     while time.time() <= stop_time:\n         pool = [set(r.getrawmempool()) for r in rpc_connections]\n-        if pool.count(pool[0]) == len(rpc_connections):\n+        sync_done = pool.count(pool[0]) == len(rpc_connections)\n+        if use_rpc_sync and not sync_done:\n+            for i_remote, rpc_remote in enumerate(rpc_connections):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277243742",
      "id" : 277243742,
      "in_reply_to_id" : 277184625,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzI0Mzc0Mg==",
      "original_commit_id" : "fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
      "original_position" : 37,
      "path" : "test/functional/test_framework/util.py",
      "position" : 37,
      "pull_request_review_id" : 229002026,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858",
      "updated_at" : "2019-04-22T09:17:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277243742",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Added a commit to extend the docstring, as requested by @promag and @jonatack",
      "created_at" : "2019-04-22T12:35:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#issuecomment-485407600",
      "id" : 485407600,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15858",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4NTQwNzYwMA==",
      "updated_at" : "2019-04-22T12:35:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/485407600",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277408817"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277408817"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It seems slightly odd to me that this code, which we only ever expect to run once, should be in a `while` loop. I think it'd be clearer to split it out into its own function. Something like:\r\n\r\n```python\r\ndef sync_mempools(rpc_connections, *, wait=1, timeout=60, use_rpc_sync=False, flush_scheduler=True):\r\n    \"\"\"\r\n    Wait until everybody has the same transactions in their memory\r\n    pools. If use_rpc_sync is set, sync all transactions right away.\r\n    \"\"\"\r\n    if use_rpc_sync:\r\n        force_sync_mempools(rpc_connections)\r\n    else:\r\n        stop_time = time.time() + timeout\r\n        while time.time() <= stop_time:\r\n            pool = [set(r.getrawmempool()) for r in rpc_connections]\r\n            if pool.count(pool[0]) == len(rpc_connections):\r\n                break\r\n            time.sleep(wait)\r\n        else:\r\n            raise AssertionError(\"Mempool sync timed out:{}\".format(\"\".join(\"\\n  {!r}\".format(m) for m in pool)))\r\n\r\n    if flush_scheduler:\r\n        for r in rpc_connections:\r\n            r.syncwithvalidationinterfacequeue()\r\n\r\ndef force_sync_mempools(rpc_connections):\r\n\r\n    class TxInfo:\r\n        def __init__(self, *, raw, ancestors):\r\n            self.raw = raw\r\n            self.ancestors = ancestors\r\n\r\n    def topo_send(txs, rpc, pool_add):\r\n        for i in txs:\r\n            topo_send(txs[i].ancestors, rpc, pool_add)\r\n            if i not in pool_add:\r\n                try:\r\n                    assert_equal(i, rpc.sendrawtransaction(txs[i].raw))\r\n                    pool_add.add(i)\r\n                    # Note that conflicted txs (due to RBF) are not removed\r\n                    # from the pool\r\n                except JSONRPCException as e:\r\n                    # This transaction violates policy (e.g. RBF policy). The\r\n                    # mempools should still converge when the high-fee\r\n                    # replacement is synced in a later call\r\n                    assert 'insufficient fee' in e.error['message']\r\n\r\n    pool = [set(r.getrawmempool()) for r in rpc_connections]\r\n    # Iterate over all nodes, get their raw mempool and send the\r\n    # missing txs to all other nodes\r\n    for i_remote, rpc_remote in enumerate(rpc_connections):\r\n        pool_remote = {\r\n            txid: TxInfo(raw=rpc_remote.getrawtransaction(txid), ancestors=info['depends'])\r\n            for txid, info in rpc_remote.getrawmempool(verbose=True).items()\r\n        }\r\n        # Create \"recursive pools\" for ancestors\r\n        for tx in pool_remote:\r\n            pool_remote[tx].ancestors = {a: pool_remote[a] for a in pool_remote[tx].ancestors}\r\n\r\n        # Push this pool to all targets\r\n        for i_target, rpc_target in enumerate(rpc_connections):\r\n            missing_txids = pool[i_remote].difference(pool[i_target])\r\n            # Send missing txs\r\n            topo_send(\r\n                txs={txid: pool_remote[txid]\r\n                     for txid in pool_remote if txid in missing_txids},\r\n                rpc=rpc_target,\r\n                pool_add=pool[i_target],\r\n            )\r\n    # If the sync fails there is a logic error in the sync or test code\r\n    pool = [set(r.getrawmempool()) for r in rpc_connections]\r\n    assert pool.count(pool[0]) == len(rpc_connections)\r\n```",
      "commit_id" : "faac5a8ff6c9966daa880bc8c02951fea804589d",
      "created_at" : "2019-04-22T19:39:29Z",
      "diff_hunk" : "@@ -390,15 +390,63 @@ def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n         time.sleep(wait)\n     raise AssertionError(\"Block sync timed out:{}\".format(\"\".join(\"\\n  {!r}\".format(b) for b in best_hash)))\n \n-def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n+def sync_mempools(rpc_connections, *, wait=1, timeout=60, use_rpc_sync=False, flush_scheduler=True):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n-    pools\n+    pools. If use_rpc_sync is set, sync all transactions right away.\n     \"\"\"\n+\n+    class TxInfo:\n+        def __init__(self, *, raw, ancestors):\n+            self.raw = raw\n+            self.ancestors = ancestors\n+\n+    def topo_send(txs, rpc, pool_add):\n+        for i in txs:\n+            topo_send(txs[i].ancestors, rpc, pool_add)\n+            if i not in pool_add:\n+                try:\n+                    assert_equal(i, rpc.sendrawtransaction(txs[i].raw))\n+                    pool_add.add(i)\n+                    # Note that conflicted txs (due to RBF) are not removed\n+                    # from the pool\n+                except JSONRPCException as e:\n+                    # This transaction violates policy (e.g. RBF policy). The\n+                    # mempools should still converge when the high-fee\n+                    # replacement is synced in a later call\n+                    assert 'insufficient fee' in e.error['message']\n+\n     stop_time = time.time() + timeout\n     while time.time() <= stop_time:\n         pool = [set(r.getrawmempool()) for r in rpc_connections]\n-        if pool.count(pool[0]) == len(rpc_connections):\n+        sync_done = pool.count(pool[0]) == len(rpc_connections)\n+        if use_rpc_sync and not sync_done:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277408817",
      "id" : 277408817,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQwODgxNw==",
      "original_commit_id" : "fa1680d748e5166622f7d100a721f550d71253e1",
      "original_position" : 37,
      "path" : "test/functional/test_framework/util.py",
      "position" : 37,
      "pull_request_review_id" : 229212744,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858",
      "updated_at" : "2019-04-22T20:12:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277408817",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277409123"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277409123"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: `remote` and `target` don't seem like very descriptive names to me `from` and `to` seem more intuitive to me as the node you're sync'ing from and to.",
      "commit_id" : "faac5a8ff6c9966daa880bc8c02951fea804589d",
      "created_at" : "2019-04-22T19:40:27Z",
      "diff_hunk" : "@@ -390,15 +390,63 @@ def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n         time.sleep(wait)\n     raise AssertionError(\"Block sync timed out:{}\".format(\"\".join(\"\\n  {!r}\".format(b) for b in best_hash)))\n \n-def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n+def sync_mempools(rpc_connections, *, wait=1, timeout=60, use_rpc_sync=False, flush_scheduler=True):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n-    pools\n+    pools. If use_rpc_sync is set, sync all transactions right away.\n     \"\"\"\n+\n+    class TxInfo:\n+        def __init__(self, *, raw, ancestors):\n+            self.raw = raw\n+            self.ancestors = ancestors\n+\n+    def topo_send(txs, rpc, pool_add):\n+        for i in txs:\n+            topo_send(txs[i].ancestors, rpc, pool_add)\n+            if i not in pool_add:\n+                try:\n+                    assert_equal(i, rpc.sendrawtransaction(txs[i].raw))\n+                    pool_add.add(i)\n+                    # Note that conflicted txs (due to RBF) are not removed\n+                    # from the pool\n+                except JSONRPCException as e:\n+                    # This transaction violates policy (e.g. RBF policy). The\n+                    # mempools should still converge when the high-fee\n+                    # replacement is synced in a later call\n+                    assert 'insufficient fee' in e.error['message']\n+\n     stop_time = time.time() + timeout\n     while time.time() <= stop_time:\n         pool = [set(r.getrawmempool()) for r in rpc_connections]\n-        if pool.count(pool[0]) == len(rpc_connections):\n+        sync_done = pool.count(pool[0]) == len(rpc_connections)\n+        if use_rpc_sync and not sync_done:\n+            # Iterate over all nodes, get their raw mempool and send the\n+            # missing txs to all other nodes\n+            for i_remote, rpc_remote in enumerate(rpc_connections):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277409123",
      "id" : 277409123,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQwOTEyMw==",
      "original_commit_id" : "fa1680d748e5166622f7d100a721f550d71253e1",
      "original_position" : 40,
      "path" : "test/functional/test_framework/util.py",
      "position" : null,
      "pull_request_review_id" : 229212744,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858",
      "updated_at" : "2019-04-22T20:12:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277409123",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277409494"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277409494"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: can you make this comment more explicit? What is a \"recursive pool\"?",
      "commit_id" : "faac5a8ff6c9966daa880bc8c02951fea804589d",
      "created_at" : "2019-04-22T19:41:38Z",
      "diff_hunk" : "@@ -390,15 +390,63 @@ def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n         time.sleep(wait)\n     raise AssertionError(\"Block sync timed out:{}\".format(\"\".join(\"\\n  {!r}\".format(b) for b in best_hash)))\n \n-def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n+def sync_mempools(rpc_connections, *, wait=1, timeout=60, use_rpc_sync=False, flush_scheduler=True):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n-    pools\n+    pools. If use_rpc_sync is set, sync all transactions right away.\n     \"\"\"\n+\n+    class TxInfo:\n+        def __init__(self, *, raw, ancestors):\n+            self.raw = raw\n+            self.ancestors = ancestors\n+\n+    def topo_send(txs, rpc, pool_add):\n+        for i in txs:\n+            topo_send(txs[i].ancestors, rpc, pool_add)\n+            if i not in pool_add:\n+                try:\n+                    assert_equal(i, rpc.sendrawtransaction(txs[i].raw))\n+                    pool_add.add(i)\n+                    # Note that conflicted txs (due to RBF) are not removed\n+                    # from the pool\n+                except JSONRPCException as e:\n+                    # This transaction violates policy (e.g. RBF policy). The\n+                    # mempools should still converge when the high-fee\n+                    # replacement is synced in a later call\n+                    assert 'insufficient fee' in e.error['message']\n+\n     stop_time = time.time() + timeout\n     while time.time() <= stop_time:\n         pool = [set(r.getrawmempool()) for r in rpc_connections]\n-        if pool.count(pool[0]) == len(rpc_connections):\n+        sync_done = pool.count(pool[0]) == len(rpc_connections)\n+        if use_rpc_sync and not sync_done:\n+            # Iterate over all nodes, get their raw mempool and send the\n+            # missing txs to all other nodes\n+            for i_remote, rpc_remote in enumerate(rpc_connections):\n+                pool_remote = {\n+                    txid: TxInfo(raw=rpc_remote.getrawtransaction(txid), ancestors=info['depends'])\n+                    for txid, info in rpc_remote.getrawmempool(verbose=True).items()\n+                }\n+                # Create \"recursive pools\" for ancestors",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277409494",
      "id" : 277409494,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQwOTQ5NA==",
      "original_commit_id" : "fa1680d748e5166622f7d100a721f550d71253e1",
      "original_position" : 45,
      "path" : "test/functional/test_framework/util.py",
      "position" : null,
      "pull_request_review_id" : 229212744,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858",
      "updated_at" : "2019-04-22T20:12:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277409494",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277418142"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277418142"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd rather not use a while-else, which I have to look up what it does every time I encounter it. I opted for a smaller diff and added an `assert`, so the diff should be easier to review and it should be clear that it is only run once via the assert.",
      "commit_id" : "faac5a8ff6c9966daa880bc8c02951fea804589d",
      "created_at" : "2019-04-22T20:08:56Z",
      "diff_hunk" : "@@ -390,15 +390,63 @@ def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n         time.sleep(wait)\n     raise AssertionError(\"Block sync timed out:{}\".format(\"\".join(\"\\n  {!r}\".format(b) for b in best_hash)))\n \n-def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n+def sync_mempools(rpc_connections, *, wait=1, timeout=60, use_rpc_sync=False, flush_scheduler=True):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n-    pools\n+    pools. If use_rpc_sync is set, sync all transactions right away.\n     \"\"\"\n+\n+    class TxInfo:\n+        def __init__(self, *, raw, ancestors):\n+            self.raw = raw\n+            self.ancestors = ancestors\n+\n+    def topo_send(txs, rpc, pool_add):\n+        for i in txs:\n+            topo_send(txs[i].ancestors, rpc, pool_add)\n+            if i not in pool_add:\n+                try:\n+                    assert_equal(i, rpc.sendrawtransaction(txs[i].raw))\n+                    pool_add.add(i)\n+                    # Note that conflicted txs (due to RBF) are not removed\n+                    # from the pool\n+                except JSONRPCException as e:\n+                    # This transaction violates policy (e.g. RBF policy). The\n+                    # mempools should still converge when the high-fee\n+                    # replacement is synced in a later call\n+                    assert 'insufficient fee' in e.error['message']\n+\n     stop_time = time.time() + timeout\n     while time.time() <= stop_time:\n         pool = [set(r.getrawmempool()) for r in rpc_connections]\n-        if pool.count(pool[0]) == len(rpc_connections):\n+        sync_done = pool.count(pool[0]) == len(rpc_connections)\n+        if use_rpc_sync and not sync_done:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277418142",
      "id" : 277418142,
      "in_reply_to_id" : 277408817,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQxODE0Mg==",
      "original_commit_id" : "fa1680d748e5166622f7d100a721f550d71253e1",
      "original_position" : 37,
      "path" : "test/functional/test_framework/util.py",
      "position" : 37,
      "pull_request_review_id" : 229225325,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858",
      "updated_at" : "2019-04-22T20:12:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277418142",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277419678"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277419678"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Renamed to `to` and `from`",
      "commit_id" : "faac5a8ff6c9966daa880bc8c02951fea804589d",
      "created_at" : "2019-04-22T20:13:39Z",
      "diff_hunk" : "@@ -390,15 +390,63 @@ def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n         time.sleep(wait)\n     raise AssertionError(\"Block sync timed out:{}\".format(\"\".join(\"\\n  {!r}\".format(b) for b in best_hash)))\n \n-def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n+def sync_mempools(rpc_connections, *, wait=1, timeout=60, use_rpc_sync=False, flush_scheduler=True):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n-    pools\n+    pools. If use_rpc_sync is set, sync all transactions right away.\n     \"\"\"\n+\n+    class TxInfo:\n+        def __init__(self, *, raw, ancestors):\n+            self.raw = raw\n+            self.ancestors = ancestors\n+\n+    def topo_send(txs, rpc, pool_add):\n+        for i in txs:\n+            topo_send(txs[i].ancestors, rpc, pool_add)\n+            if i not in pool_add:\n+                try:\n+                    assert_equal(i, rpc.sendrawtransaction(txs[i].raw))\n+                    pool_add.add(i)\n+                    # Note that conflicted txs (due to RBF) are not removed\n+                    # from the pool\n+                except JSONRPCException as e:\n+                    # This transaction violates policy (e.g. RBF policy). The\n+                    # mempools should still converge when the high-fee\n+                    # replacement is synced in a later call\n+                    assert 'insufficient fee' in e.error['message']\n+\n     stop_time = time.time() + timeout\n     while time.time() <= stop_time:\n         pool = [set(r.getrawmempool()) for r in rpc_connections]\n-        if pool.count(pool[0]) == len(rpc_connections):\n+        sync_done = pool.count(pool[0]) == len(rpc_connections)\n+        if use_rpc_sync and not sync_done:\n+            # Iterate over all nodes, get their raw mempool and send the\n+            # missing txs to all other nodes\n+            for i_remote, rpc_remote in enumerate(rpc_connections):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277419678",
      "id" : 277419678,
      "in_reply_to_id" : 277409123,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQxOTY3OA==",
      "original_commit_id" : "fa1680d748e5166622f7d100a721f550d71253e1",
      "original_position" : 40,
      "path" : "test/functional/test_framework/util.py",
      "position" : null,
      "pull_request_review_id" : 229227345,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858",
      "updated_at" : "2019-04-22T20:13:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277419678",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277419747"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277419747"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed mention of \"recursive\"",
      "commit_id" : "faac5a8ff6c9966daa880bc8c02951fea804589d",
      "created_at" : "2019-04-22T20:13:53Z",
      "diff_hunk" : "@@ -390,15 +390,63 @@ def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n         time.sleep(wait)\n     raise AssertionError(\"Block sync timed out:{}\".format(\"\".join(\"\\n  {!r}\".format(b) for b in best_hash)))\n \n-def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n+def sync_mempools(rpc_connections, *, wait=1, timeout=60, use_rpc_sync=False, flush_scheduler=True):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n-    pools\n+    pools. If use_rpc_sync is set, sync all transactions right away.\n     \"\"\"\n+\n+    class TxInfo:\n+        def __init__(self, *, raw, ancestors):\n+            self.raw = raw\n+            self.ancestors = ancestors\n+\n+    def topo_send(txs, rpc, pool_add):\n+        for i in txs:\n+            topo_send(txs[i].ancestors, rpc, pool_add)\n+            if i not in pool_add:\n+                try:\n+                    assert_equal(i, rpc.sendrawtransaction(txs[i].raw))\n+                    pool_add.add(i)\n+                    # Note that conflicted txs (due to RBF) are not removed\n+                    # from the pool\n+                except JSONRPCException as e:\n+                    # This transaction violates policy (e.g. RBF policy). The\n+                    # mempools should still converge when the high-fee\n+                    # replacement is synced in a later call\n+                    assert 'insufficient fee' in e.error['message']\n+\n     stop_time = time.time() + timeout\n     while time.time() <= stop_time:\n         pool = [set(r.getrawmempool()) for r in rpc_connections]\n-        if pool.count(pool[0]) == len(rpc_connections):\n+        sync_done = pool.count(pool[0]) == len(rpc_connections)\n+        if use_rpc_sync and not sync_done:\n+            # Iterate over all nodes, get their raw mempool and send the\n+            # missing txs to all other nodes\n+            for i_remote, rpc_remote in enumerate(rpc_connections):\n+                pool_remote = {\n+                    txid: TxInfo(raw=rpc_remote.getrawtransaction(txid), ancestors=info['depends'])\n+                    for txid, info in rpc_remote.getrawmempool(verbose=True).items()\n+                }\n+                # Create \"recursive pools\" for ancestors",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277419747",
      "id" : 277419747,
      "in_reply_to_id" : 277409494,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQxOTc0Nw==",
      "original_commit_id" : "fa1680d748e5166622f7d100a721f550d71253e1",
      "original_position" : 45,
      "path" : "test/functional/test_framework/util.py",
      "position" : null,
      "pull_request_review_id" : 229227431,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858",
      "updated_at" : "2019-04-22T20:13:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277419747",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277420191"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277420191"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I opted for code brevity. Calculating the empty set as a difference from two equal sets should take negligible time compared to an rpc call",
      "commit_id" : "faac5a8ff6c9966daa880bc8c02951fea804589d",
      "created_at" : "2019-04-22T20:15:16Z",
      "diff_hunk" : "@@ -390,15 +390,63 @@ def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n         time.sleep(wait)\n     raise AssertionError(\"Block sync timed out:{}\".format(\"\".join(\"\\n  {!r}\".format(b) for b in best_hash)))\n \n-def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n+def sync_mempools(rpc_connections, *, wait=1, timeout=60, use_rpc_sync=False, flush_scheduler=True):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n     pools\n     \"\"\"\n+\n+    class TxInfo:\n+        def __init__(self, *, raw, ancestors):\n+            self.raw = raw\n+            self.ancestors = ancestors\n+\n+    def topo_send(txs, rpc, pool_add):\n+        for i in txs:\n+            topo_send(txs[i].ancestors, rpc, pool_add)\n+            if i not in pool_add:\n+                try:\n+                    assert_equal(i, rpc.sendrawtransaction(txs[i].raw))\n+                    pool_add.add(i)\n+                    # Note that conflicted txs (due to RBF) are not removed\n+                    # from the pool\n+                except JSONRPCException:\n+                    # This transaction violates policy (e.g. RBF policy). The\n+                    # mempools should still converge when the high-fee\n+                    # replacement is synced in a later call\n+                    pass\n+\n     stop_time = time.time() + timeout\n     while time.time() <= stop_time:\n         pool = [set(r.getrawmempool()) for r in rpc_connections]\n-        if pool.count(pool[0]) == len(rpc_connections):\n+        sync_done = pool.count(pool[0]) == len(rpc_connections)\n+        if use_rpc_sync and not sync_done:\n+            for i_remote, rpc_remote in enumerate(rpc_connections):\n+                pool_remote = {\n+                    txid: TxInfo(raw=rpc_remote.getrawtransaction(txid), ancestors=info['depends'])\n+                    for txid, info in rpc_remote.getrawmempool(verbose=True).items()\n+                }\n+                # Create \"recursive pools\" for ancestors\n+                for tx in pool_remote:\n+                    pool_remote[tx].ancestors = {a: pool_remote[a] for a in pool_remote[tx].ancestors}\n+\n+                # Push this pool to all targets\n+                for i_target, rpc_target in enumerate(rpc_connections):\n+                    missing_txids = pool[i_remote].difference(pool[i_target])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277420191",
      "id" : 277420191,
      "in_reply_to_id" : 277184430,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQyMDE5MQ==",
      "original_commit_id" : "fad26ed5fa5bf9fc0cf60e84a135e7d03c934000",
      "original_position" : 48,
      "path" : "test/functional/test_framework/util.py",
      "position" : null,
      "pull_request_review_id" : 229228015,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858",
      "updated_at" : "2019-04-22T20:15:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277420191",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277420863"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277420863"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Also rewriting the function would invalidate previous review",
      "commit_id" : "faac5a8ff6c9966daa880bc8c02951fea804589d",
      "created_at" : "2019-04-22T20:17:20Z",
      "diff_hunk" : "@@ -390,15 +390,63 @@ def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n         time.sleep(wait)\n     raise AssertionError(\"Block sync timed out:{}\".format(\"\".join(\"\\n  {!r}\".format(b) for b in best_hash)))\n \n-def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n+def sync_mempools(rpc_connections, *, wait=1, timeout=60, use_rpc_sync=False, flush_scheduler=True):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n-    pools\n+    pools. If use_rpc_sync is set, sync all transactions right away.\n     \"\"\"\n+\n+    class TxInfo:\n+        def __init__(self, *, raw, ancestors):\n+            self.raw = raw\n+            self.ancestors = ancestors\n+\n+    def topo_send(txs, rpc, pool_add):\n+        for i in txs:\n+            topo_send(txs[i].ancestors, rpc, pool_add)\n+            if i not in pool_add:\n+                try:\n+                    assert_equal(i, rpc.sendrawtransaction(txs[i].raw))\n+                    pool_add.add(i)\n+                    # Note that conflicted txs (due to RBF) are not removed\n+                    # from the pool\n+                except JSONRPCException as e:\n+                    # This transaction violates policy (e.g. RBF policy). The\n+                    # mempools should still converge when the high-fee\n+                    # replacement is synced in a later call\n+                    assert 'insufficient fee' in e.error['message']\n+\n     stop_time = time.time() + timeout\n     while time.time() <= stop_time:\n         pool = [set(r.getrawmempool()) for r in rpc_connections]\n-        if pool.count(pool[0]) == len(rpc_connections):\n+        sync_done = pool.count(pool[0]) == len(rpc_connections)\n+        if use_rpc_sync and not sync_done:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277420863",
      "id" : 277420863,
      "in_reply_to_id" : 277408817,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQyMDg2Mw==",
      "original_commit_id" : "fa1680d748e5166622f7d100a721f550d71253e1",
      "original_position" : 37,
      "path" : "test/functional/test_framework/util.py",
      "position" : 37,
      "pull_request_review_id" : 229228870,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858",
      "updated_at" : "2019-04-22T20:17:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277420863",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277443342"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277443342"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm surprised you think Python's `while-else` syntax is confusing. I don't think I've ever had a problem with it: https://stackoverflow.com/a/3295949. I certainly think it's clearer than the existing code, which has a `return` buried in a conditional in the `while` loop, but hidden under the `flush_scheduler` cleanup code.\r\n\r\nI'm pretty sure you've been pushed into this weird construction (execute-once code within a while loop) because of the `flush_scheduler` cleanup code being inside the loop. Restructuring the function so the loop breaks and then does the cleanup allows the RPC sync to be separated from the while loop, which seems clearer to me.",
      "commit_id" : "faac5a8ff6c9966daa880bc8c02951fea804589d",
      "created_at" : "2019-04-22T21:25:29Z",
      "diff_hunk" : "@@ -390,15 +390,63 @@ def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n         time.sleep(wait)\n     raise AssertionError(\"Block sync timed out:{}\".format(\"\".join(\"\\n  {!r}\".format(b) for b in best_hash)))\n \n-def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n+def sync_mempools(rpc_connections, *, wait=1, timeout=60, use_rpc_sync=False, flush_scheduler=True):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n-    pools\n+    pools. If use_rpc_sync is set, sync all transactions right away.\n     \"\"\"\n+\n+    class TxInfo:\n+        def __init__(self, *, raw, ancestors):\n+            self.raw = raw\n+            self.ancestors = ancestors\n+\n+    def topo_send(txs, rpc, pool_add):\n+        for i in txs:\n+            topo_send(txs[i].ancestors, rpc, pool_add)\n+            if i not in pool_add:\n+                try:\n+                    assert_equal(i, rpc.sendrawtransaction(txs[i].raw))\n+                    pool_add.add(i)\n+                    # Note that conflicted txs (due to RBF) are not removed\n+                    # from the pool\n+                except JSONRPCException as e:\n+                    # This transaction violates policy (e.g. RBF policy). The\n+                    # mempools should still converge when the high-fee\n+                    # replacement is synced in a later call\n+                    assert 'insufficient fee' in e.error['message']\n+\n     stop_time = time.time() + timeout\n     while time.time() <= stop_time:\n         pool = [set(r.getrawmempool()) for r in rpc_connections]\n-        if pool.count(pool[0]) == len(rpc_connections):\n+        sync_done = pool.count(pool[0]) == len(rpc_connections)\n+        if use_rpc_sync and not sync_done:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277443342",
      "id" : 277443342,
      "in_reply_to_id" : 277408817,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQ0MzM0Mg==",
      "original_commit_id" : "fa1680d748e5166622f7d100a721f550d71253e1",
      "original_position" : 37,
      "path" : "test/functional/test_framework/util.py",
      "position" : 37,
      "pull_request_review_id" : 229257583,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858",
      "updated_at" : "2019-04-22T21:25:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277443342",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Aesthetic disagreements aside, this is a great improvement. utACK faac5a8ff6c9966daa880bc8c02951fea804589d",
      "created_at" : "2019-04-22T21:26:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#issuecomment-485558503",
      "id" : 485558503,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15858",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4NTU1ODUwMw==",
      "updated_at" : "2019-04-22T21:26:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/485558503",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277454926"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277454926"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unlike `if-else`, where only *one* branch is executed, the `while-else` (or `for-else`) generally execute *both* branches. To make it even more confusing, it won't execute the else branch when you `break`.",
      "commit_id" : "faac5a8ff6c9966daa880bc8c02951fea804589d",
      "created_at" : "2019-04-22T22:06:43Z",
      "diff_hunk" : "@@ -390,15 +390,63 @@ def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n         time.sleep(wait)\n     raise AssertionError(\"Block sync timed out:{}\".format(\"\".join(\"\\n  {!r}\".format(b) for b in best_hash)))\n \n-def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n+def sync_mempools(rpc_connections, *, wait=1, timeout=60, use_rpc_sync=False, flush_scheduler=True):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n-    pools\n+    pools. If use_rpc_sync is set, sync all transactions right away.\n     \"\"\"\n+\n+    class TxInfo:\n+        def __init__(self, *, raw, ancestors):\n+            self.raw = raw\n+            self.ancestors = ancestors\n+\n+    def topo_send(txs, rpc, pool_add):\n+        for i in txs:\n+            topo_send(txs[i].ancestors, rpc, pool_add)\n+            if i not in pool_add:\n+                try:\n+                    assert_equal(i, rpc.sendrawtransaction(txs[i].raw))\n+                    pool_add.add(i)\n+                    # Note that conflicted txs (due to RBF) are not removed\n+                    # from the pool\n+                except JSONRPCException as e:\n+                    # This transaction violates policy (e.g. RBF policy). The\n+                    # mempools should still converge when the high-fee\n+                    # replacement is synced in a later call\n+                    assert 'insufficient fee' in e.error['message']\n+\n     stop_time = time.time() + timeout\n     while time.time() <= stop_time:\n         pool = [set(r.getrawmempool()) for r in rpc_connections]\n-        if pool.count(pool[0]) == len(rpc_connections):\n+        sync_done = pool.count(pool[0]) == len(rpc_connections)\n+        if use_rpc_sync and not sync_done:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277454926",
      "id" : 277454926,
      "in_reply_to_id" : 277408817,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQ1NDkyNg==",
      "original_commit_id" : "fa1680d748e5166622f7d100a721f550d71253e1",
      "original_position" : 37,
      "path" : "test/functional/test_framework/util.py",
      "position" : 37,
      "pull_request_review_id" : 229272048,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858",
      "updated_at" : "2019-04-22T22:06:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277454926",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277455581"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277455581"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Anyway, I am happy to review a follow-up pull that switches both sync_ helpers to the `while-else` syntax. But, I'd rather not do it here.",
      "commit_id" : "faac5a8ff6c9966daa880bc8c02951fea804589d",
      "created_at" : "2019-04-22T22:09:19Z",
      "diff_hunk" : "@@ -390,15 +390,63 @@ def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n         time.sleep(wait)\n     raise AssertionError(\"Block sync timed out:{}\".format(\"\".join(\"\\n  {!r}\".format(b) for b in best_hash)))\n \n-def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n+def sync_mempools(rpc_connections, *, wait=1, timeout=60, use_rpc_sync=False, flush_scheduler=True):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory\n-    pools\n+    pools. If use_rpc_sync is set, sync all transactions right away.\n     \"\"\"\n+\n+    class TxInfo:\n+        def __init__(self, *, raw, ancestors):\n+            self.raw = raw\n+            self.ancestors = ancestors\n+\n+    def topo_send(txs, rpc, pool_add):\n+        for i in txs:\n+            topo_send(txs[i].ancestors, rpc, pool_add)\n+            if i not in pool_add:\n+                try:\n+                    assert_equal(i, rpc.sendrawtransaction(txs[i].raw))\n+                    pool_add.add(i)\n+                    # Note that conflicted txs (due to RBF) are not removed\n+                    # from the pool\n+                except JSONRPCException as e:\n+                    # This transaction violates policy (e.g. RBF policy). The\n+                    # mempools should still converge when the high-fee\n+                    # replacement is synced in a later call\n+                    assert 'insufficient fee' in e.error['message']\n+\n     stop_time = time.time() + timeout\n     while time.time() <= stop_time:\n         pool = [set(r.getrawmempool()) for r in rpc_connections]\n-        if pool.count(pool[0]) == len(rpc_connections):\n+        sync_done = pool.count(pool[0]) == len(rpc_connections)\n+        if use_rpc_sync and not sync_done:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277455581",
      "id" : 277455581,
      "in_reply_to_id" : 277408817,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzQ1NTU4MQ==",
      "original_commit_id" : "fa1680d748e5166622f7d100a721f550d71253e1",
      "original_position" : 37,
      "path" : "test/functional/test_framework/util.py",
      "position" : 37,
      "pull_request_review_id" : 229272874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858",
      "updated_at" : "2019-04-22T22:09:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277455581",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277712902"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277712902"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Curious, as the improvement is mostly gained by bypassing Poisson feature, why don't disable it via parameter e.,g,`-enablepoisson=0`, which would be allowed only in regtest? In this case, nodes behave closer to a real scenario, we have cleaner logs as txs are exchanged via P2P only (no race condition), would work even if `sync_mempool` hasn't been called and no need to maintain a custom tx exchange function.",
      "commit_id" : "faac5a8ff6c9966daa880bc8c02951fea804589d",
      "created_at" : "2019-04-23T14:38:14Z",
      "diff_hunk" : "@@ -95,6 +95,7 @@ def __init__(self):\n         self.nodes = []\n         self.network_thread = None\n         self.rpc_timeout = 60  # Wait for up to 60 seconds for the RPC server to respond\n+        self.use_rpc_sync = False",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277712902",
      "id" : 277712902,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NzcxMjkwMg==",
      "original_commit_id" : "faac5a8ff6c9966daa880bc8c02951fea804589d",
      "original_position" : 4,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 4,
      "pull_request_review_id" : 229595171,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858",
      "updated_at" : "2019-04-23T14:38:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277712902",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/296795?v=4",
         "events_url" : "https://api.github.com/users/kostyantyn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kostyantyn/followers",
         "following_url" : "https://api.github.com/users/kostyantyn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kostyantyn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kostyantyn",
         "id" : 296795,
         "login" : "kostyantyn",
         "node_id" : "MDQ6VXNlcjI5Njc5NQ==",
         "organizations_url" : "https://api.github.com/users/kostyantyn/orgs",
         "received_events_url" : "https://api.github.com/users/kostyantyn/received_events",
         "repos_url" : "https://api.github.com/users/kostyantyn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kostyantyn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kostyantyn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kostyantyn"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277870423"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277870423"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@kostyantyn Good point! Done in\r\n\r\n* net: Send txs without delay on regtest #15881 ",
      "commit_id" : "faac5a8ff6c9966daa880bc8c02951fea804589d",
      "created_at" : "2019-04-23T21:02:09Z",
      "diff_hunk" : "@@ -95,6 +95,7 @@ def __init__(self):\n         self.nodes = []\n         self.network_thread = None\n         self.rpc_timeout = 60  # Wait for up to 60 seconds for the RPC server to respond\n+        self.use_rpc_sync = False",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#discussion_r277870423",
      "id" : 277870423,
      "in_reply_to_id" : 277712902,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3Nzg3MDQyMw==",
      "original_commit_id" : "faac5a8ff6c9966daa880bc8c02951fea804589d",
      "original_position" : 4,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 4,
      "pull_request_review_id" : 229794759,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15858",
      "updated_at" : "2019-04-23T21:02:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/277870423",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Going back to this approach, since modifying bitcoind is interpreted as too controversial",
      "created_at" : "2019-04-24T15:20:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#issuecomment-486287647",
      "id" : 486287647,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15858",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4NjI4NzY0Nw==",
      "updated_at" : "2019-04-24T15:20:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/486287647",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Unless there are objections this will be merged on Monday",
      "created_at" : "2019-04-24T15:20:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#issuecomment-486287775",
      "id" : 486287775,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15858",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4NjI4Nzc3NQ==",
      "updated_at" : "2019-04-24T15:20:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/486287775",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Could make sense to skip this optimization in one of the travis job?",
      "created_at" : "2019-04-24T15:26:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#issuecomment-486290266",
      "id" : 486290266,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15858",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4NjI5MDI2Ng==",
      "updated_at" : "2019-04-24T15:26:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/486290266",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15911](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15911.html) (Use wallet RBF default for walletcreatefundedpsbt by Sjors)\n* [#15891](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15891.html) (test: Require standard txs in regtest by default by MarcoFalke)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-04-25T16:28:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#issuecomment-486744481",
      "id" : 486744481,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15858",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4Njc0NDQ4MQ==",
      "updated_at" : "2019-04-29T15:17:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/486744481",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Functional tests on master at 8da1aa4 with Linux Debian 4.19.28-2 (2019-03-15) x86/64\r\n\r\nALL                                   | Ã¢ÂÂ Passed  | 1824 s (accumulated)\r\nRuntime: 466 s\r\n\r\nALL                                   | Ã¢ÂÂ Passed  | 1867 s (accumulated) \r\nRuntime: 476 s\r\n\r\nALL                                   | Ã¢ÂÂ Passed  | 1856 s (accumulated) \r\nRuntime: 473 s\r\n\r\nALL                                   | Ã¢ÂÂ Passed  | 1774 s (accumulated) \r\nRuntime: 453 s\r\n\r\n-----\r\n\r\nFunctional tests with this PR at https://github.com/bitcoin/bitcoin/pull/15858/commits/faac5a8ff6c9966daa880bc8c02951fea804589d rebased on master at 8da1aa4\r\n\r\nALL                                   | Ã¢ÂÂ Passed  | 1372 s (accumulated) \r\nRuntime: 352 s\r\n\r\nALL                                   | Ã¢ÂÂ Passed  | 1388 s (accumulated) \r\nRuntime: 357 s\r\n\r\nALL                                   | Ã¢ÂÂ Passed  | 1472 s (accumulated) \r\nRuntime: 377 s\r\n\r\nALL                                   | Ã¢ÂÂ Passed  | 1449 s (accumulated) \r\nRuntime: 373 s\r\n\r\n",
      "created_at" : "2019-04-29T22:55:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#issuecomment-487772015",
      "id" : 487772015,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15858",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4Nzc3MjAxNQ==",
      "updated_at" : "2019-04-29T22:55:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/487772015",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Going back to this approach, since modifying bitcoind is interpreted as too controversial\r\n\r\nI prefer this approach as well. I think the only use for this, ever, is the tests, so I'd prefer not to change `bitcoind` with a special case for it.",
      "created_at" : "2019-04-30T20:19:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15858#issuecomment-488100037",
      "id" : 488100037,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15858",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4ODEwMDAzNw==",
      "updated_at" : "2019-04-30T20:19:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/488100037",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
