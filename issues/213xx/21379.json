{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "NONE",
   "body" : "**Summary** \r\nWhen block downloads restart after a reindex of block files, spurious bytes are inserted in the blk.dat file.  A subsequent reindex will show a deserialization error in the log file.\r\n\r\n**Test system** \r\nCentOS 7, Bitcoin Core v0.21.0 pre-built binaries and reproduced going back to 0.10.3!\r\n\r\n**Problem Description**\r\nPerforming a reindex of the block files reliably introduces spurious bytes, resulting in subsequent deserialization errors.  \r\n\r\nAt the point where block downloads resume and are added to the blk.dat file, 8 extra bytes are introduced in front of the first new data block.  Depending on the scenario, these 8 bytes are either all 0's, or a valid message start string (0xf9beb4d9 \"magic\" sequence) followed by 4 more bytes.  Normal blocks of \\<magic> \\<length> \\<raw block> resume after these 8 bytes.\r\n\r\nInvestigation revealed that the 4 bytes after the magic were actually the length of a previously existing block in the blk.dat file that had been overwritten.\r\n\r\nIt appears what is happening is that after reindexing, a file position is calculated for adding newly downloaded blocks, and this position is incorrectly computed to be 8 bytes beyond the proper place.  If the insert position is at the end of the file, the intervening 8 bytes are zero filled.  If the insert position overwrites pre-existing blocks, the first 8 bytes of the overwritten block(s) are left behind.\r\n\r\nIt appears the problem results from an inconsistency in the operation of FindBlockPos during reindexing, when it returns file positions at the beginning of the raw block, as opposed to the end of previous block/beginning of the magic.\r\n\r\nThe block reading algorithm is apparently able to recover and continue, so this problem is not fatal.  Inspection of the debug.log shows \"LoadExternalBlockFile: Deserialize or I/O error\" when it occurs.  To be clear, the first reindex doesn't show this error, but causes the problem such that a subsequent reindex will generate it.\r\n\r\nResearching old issues, I suspect this problem contributed to symptoms observed in issues #6492 and #14933.  It also looks like like #5864 might have been an attempt to address this or a similar problem.\r\n\r\n**Reproduction Scenarios**\r\nThese scenarios are rather contrived, but are the simplest ones I could come up with to quickly and reliably demonstrate the issue.\r\n\r\n**Scenario 1**\r\nTo create a deterministic scenario, this example uses what I'll refer to as \"canonical\" block files.  That is, block files where the chain blocks are stored in-order up to the file size limit of 128M.  Thus, the canonical blk00000.dat file has the following properties:\r\n\r\nsize: 134214363\r\nblocks: 119965 (up to height 119964)\r\nSHA-256: fe4b764e0ce523cfce6d9e4f326e0d0977ee317a51b4a129cda707cfa4699dd7  \r\n\r\n1) Start with a \"canonical\" blk00000.dat as the only file in a new data dir\r\n2) Start up bitcoin-qt with -reindex.  \r\n3) Once the reindex completes and block downloads resume over the network, terminate the process.\r\n\r\nIn the debug.log, you should see:\r\n2021-03-06T21:41:52Z Leaving block file 0: CBlockFileInfo(blocks=119965, size=134214371, heights=0...119964, time=2009-01-03...2011-04-24)\r\n\r\nNote that the size has grown by 8 bytes.  Inspection of hexdumps show 8 extra zero bytes at the end of the file.\r\n\r\nBefore reindex:\r\n```\r\n07fff2c0  14 9f ce 4e af a6 17 17  d9 24 b1 d0 9b 30 28 3d  |...N.....$...0(=|\r\n07fff2d0  ee a3 f1 e3 fd 88 ac 00  00 00 00                 |...........|\r\n```\r\n\r\nAfter reindex:\r\n```\r\n07fff2c0  14 9f ce 4e af a6 17 17  d9 24 b1 d0 9b 30 28 3d  |...N.....$...0(=|\r\n07fff2d0  ee a3 f1 e3 fd 88 ac 00  00 00 00 00 00 00 00 00  |................|\r\n07fff2e0  00 00 00                                          |...|\r\n```\r\nIn this scenario, blk00000.dat is \"full\", so the new block will go in blk00001.dat.  But, in the process of testing blk00000.dat to see if the new block can be appended, it appears an incorrect file pointer offset winds up adding 8 bytes to the file.\r\n\r\n**Scenario 2 part 1**\r\nThe results of this scenario are more variable due to the random ordering of blocks resulting from parallel block downloads.\r\n\r\n1) Start with a blk00000.dat and blk00001.dat containing out-of-order blocks from a parallel block download.\r\n2) Perform a reindex on these block files.  \r\n3) Wait past header synchronization until new block downloads resume over the network (blk00002.dat is created), then shut the process down.\r\n\r\nWhat you should discover upon inspection of blk00001.dat is that the file has been changed, and at the point where the content changes, the spurious magic and length bytes will appear.  This will be somewhere near but not at the end of the file.  (It appears that the insert point is after the last block that could be verified to be part of the main chain; because of parallel block downloads, some remaining blocks that couldn't be attached are overwritten.)  An example from my run:\r\n\r\nBefore reindex:\r\n```\r\n07f788d0  88 ac 00 00 00 00 f9 be  b4 d9 ad bf 00 00 01 00  |................|\r\n07f788e0  00 00 ea 8d fd 5c 0e 23  08 c8 b3 a6 73 61 5d fa  |.....\\.#....sa].|\r\n```\r\nNote magic at offset 0x07f788d6, block length of 0x0000bfad, version 0x01 byte from raw block\r\n\r\nAfter reindex:\r\n```\r\n07f788d0  88 ac 00 00 00 00 f9 be  b4 d9 ad bf 00 00 f9 be  |................|\r\n07f788e0  b4 d9 61 bf 00 00 01 00  00 00 c3 70 ca 79 eb ed  |..a........p.y..|\r\n```\r\nNote magic at offset 0x07f788d6, length of 0x0000bfad as before, but now followed by another magic and a length 0x0000bf61 before getting to the version 0x01.\r\n\r\n\r\n**Scenario 2 part 2**\r\n1) Save a copy of the block files resulting from the end of the previous scenario.\r\n2) Start another reindex using those files.  Again, wait until new block downloads resume, then shut down.\r\n\r\nIn the debug.log, you should find the following where the corrupted block file was processed:\r\n2021-03-06T22:19:55Z LoadExternalBlockFile: Deserialize or I/O error - ReadCompactSize(): size too large: iostream error\r\n\r\nDepending on exactly how things go off the rails, the error could appear as:\r\n2021-03-06T23:07:48Z LoadExternalBlockFile: Deserialize or I/O error - Read attempted past buffer limit: iostream error\r\n\r\nIf you inspect your last block file from the first reindex and compare it to its state after the second reindex, you should find a second instance of the spurious magic+length bytes.\r\n\r\nIf you perform another reindex with the block files as they stand now, you'll get two deserialize errors in the debug log.  Each additional reindex will add another instance.\r\n\r\n",
   "closed_at" : "2022-10-12T18:14:41Z",
   "closed_by" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
      "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
      "followers_url" : "https://api.github.com/users/glozow/followers",
      "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/glozow",
      "id" : 25183001,
      "login" : "glozow",
      "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
      "organizations_url" : "https://api.github.com/users/glozow/orgs",
      "received_events_url" : "https://api.github.com/users/glozow/received_events",
      "repos_url" : "https://api.github.com/users/glozow/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/glozow"
   },
   "comments" : 2,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21379/comments",
   "created_at" : "2021-03-07T03:55:03Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21379/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/21379",
   "id" : 823821871,
   "labels" : [
      {
         "color" : "FBBAAB",
         "default" : false,
         "description" : null,
         "id" : 64585,
         "name" : "Bug",
         "node_id" : "MDU6TGFiZWw2NDU4NQ==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug"
      },
      {
         "color" : "000000",
         "default" : false,
         "description" : null,
         "id" : 219890555,
         "name" : "Block storage",
         "node_id" : "MDU6TGFiZWwyMTk4OTA1NTU=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Block%20storage"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21379/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU4MjM4MjE4NzE=",
   "number" : 21379,
   "performed_via_github_app" : null,
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21379/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "closed",
   "state_reason" : "completed",
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21379/timeline",
   "title" : "Reindex subtly corrupts blknnnnn.dat files and causes subsequent deserialization errors",
   "updated_at" : "2022-10-12T18:14:41Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21379",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/4017794?v=4",
      "events_url" : "https://api.github.com/users/prairiefalcon/events{/privacy}",
      "followers_url" : "https://api.github.com/users/prairiefalcon/followers",
      "following_url" : "https://api.github.com/users/prairiefalcon/following{/other_user}",
      "gists_url" : "https://api.github.com/users/prairiefalcon/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/prairiefalcon",
      "id" : 4017794,
      "login" : "prairiefalcon",
      "node_id" : "MDQ6VXNlcjQwMTc3OTQ=",
      "organizations_url" : "https://api.github.com/users/prairiefalcon/orgs",
      "received_events_url" : "https://api.github.com/users/prairiefalcon/received_events",
      "repos_url" : "https://api.github.com/users/prairiefalcon/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/prairiefalcon/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/prairiefalcon/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/prairiefalcon"
   }
}
