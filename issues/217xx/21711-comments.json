[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r615129019"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615129019"
         }
      },
      "author_association" : "NONE",
      "body" : "dostane btc",
      "commit_id" : "57684eda890c01f9d188313b4012bcddfc8c1191",
      "created_at" : "2021-04-16T21:23:20Z",
      "diff_hunk" : "@@ -1,5 +1,7 @@\n # Bootstrappable Bitcoin Core Builds",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r615129019",
      "id" : 615129019,
      "line" : 1,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTEyOTAxOQ==",
      "original_commit_id" : "57684eda890c01f9d188313b4012bcddfc8c1191",
      "original_line" : 1,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "contrib/guix/README.md",
      "position" : 1,
      "pull_request_review_id" : 638093205,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-16T21:27:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615129019",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/37097169?v=4",
         "events_url" : "https://api.github.com/users/78051301012/events{/privacy}",
         "followers_url" : "https://api.github.com/users/78051301012/followers",
         "following_url" : "https://api.github.com/users/78051301012/following{/other_user}",
         "gists_url" : "https://api.github.com/users/78051301012/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/78051301012",
         "id" : 37097169,
         "login" : "78051301012",
         "node_id" : "MDQ6VXNlcjM3MDk3MTY5",
         "organizations_url" : "https://api.github.com/users/78051301012/orgs",
         "received_events_url" : "https://api.github.com/users/78051301012/received_events",
         "repos_url" : "https://api.github.com/users/78051301012/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/78051301012/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/78051301012/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/78051301012"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r615203071"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615203071"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: s/effect/affect/",
      "commit_id" : "57684eda890c01f9d188313b4012bcddfc8c1191",
      "created_at" : "2021-04-17T04:06:08Z",
      "diff_hunk" : "@@ -9,79 +11,835 @@ downloads.\n \n We achieve bootstrappability by using Guix as a functional package manager.\n \n-## Requirements\n+# Requirements\n \n Conservatively, a x86_64 machine with:\n \n - 16GB of free disk space on the partition that /gnu/store will reside in\n - 8GB of free disk space per platform triple you're planning on building (see\n   the `HOSTS` environment variable description)\n \n-## Setup\n+# Installation and Setup\n+\n+At the time of writing, the latest Guix release is v1.2.0, which has a known\n+problems w/re building GnuTLS from source. Solutions and workarounds are\n+documented [here](), but I would recommend that you install v1.2.1 (planned for\n+release on April 18th, 2021) or later if your choice of installation option\n+allows.\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](#usage).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions]()\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section]()\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on distribution\n+5. Building **from source** [â¤ skip to section]()\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Option 1: Using the official shell installer script\n+\n+The shell installer script provided by the Guix maintainers automates the\n+download, installation, and initial configuration steps detailed\n+[here](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+To install Guix using this method, do the following as `root` (e.g. via `su -`):\n+\n+```sh\n+# Use /tmp as the working directory\n+cd /tmp\n+\n+# Download the script\n+wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n+\n+# Inspect the script\n+less guix-install.sh\n+\n+# Make the script executable\n+chmod +x guix-install.sh\n+\n+# Run the script\n+./guix-install.sh\n+```\n+\n+\n+## Option 2: Using the official binary tarball\n+\n+Follow the binary installation instructions step-by-step in the Guix Reference\n+Manual\n+[here](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+Ignore the note about using the shell installer script since that does not\n+apply. This is largely equivalent to maually performing what the shell installer\n+script does.\n+\n+## Option 3: TODO fanquake docker\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian/Ubuntu\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) (\"bullseye\") and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix) (Hirsute Hippo).\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+### Installing common build tools\n+\n+There are a few basic build tools that are required for most things we'll build,\n+so let's install them now:\n+\n+Text transformation/i18n:\n+- `autopoint` (sometimes packaged in `gettext`)\n+- `help2man`\n+- `po4a`\n+- `texinfo`\n+\n+Build system tools:\n+- `g++` w/ C++11 support\n+- `libtool`\n+- `autoconf`\n+- `automake`\n+- `pkg-config` (sometimes packaged as `pkgconf`)\n+- `make`\n+- `cmake`\n+\n+Miscellaneous:\n+- `git`\n+- `gnupg`\n+- `python3`\n+\n+### Building and Installing Guix's dependencies\n+\n+In order to build Guix itself from source, we need to first make sure that the\n+necessary dependencies are installed and discoverable. The most up-to-date list\n+of Guix's dependencies is kept in the [\"Requirements\"\n+section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n+Reference Manual.\n+\n+Depending on your distribution, most or all of these dependencies may already be\n+packaged and installable without manually building and installing.\n+\n+#### Guile\n+\n+##### Choosing a Guile version and sticking to it\n+\n+One of the first things you need to decide is which Guile version you want to\n+use: Guile v2.2 or Guile v3.0. Unlike the python2 to python3 transition, Guile\n+v2.2 and Guile v3.0 are largely compatible, as evidenced by the fact that most\n+Guile packages and even [Guix\n+itself](https://guix.gnu.org/en/blog/2020/guile-3-and-guix/) support running on\n+both.\n+\n+What is important here is that you **choose one**, and you **remain consistent**\n+with your choice throughout **all Guile-related packages**, no matter if they\n+are installed via the distribution's package manager or installed from source.\n+This is because the files for Guile packages are installed to directories which\n+are separated based on the Guile version.\n+\n+###### Example: Checking that Ubuntu's `guile-git` is compatible with your chosen Guile version\n+\n+On Ubuntu Focal:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-2.2, guile-bytestructures, libgit2-dev\n+...\n+```\n+\n+As you can see, the package `guile-git` depends on `guile-2.2`, meaning that it\n+was likely built for Guile v2.2. This means that if you decided to use Guile\n+v3.0 on Ubuntu Focal, you would need to build guile-git from source instead of\n+using the distribution package.\n+\n+On Ubuntu Hirsute:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-3.0 | guile-2.2, guile-bytestructures (>= 1.0.7-3~), libgit2-dev (>= 1.0)\n+...\n+```\n+\n+In this case, `guile-git` depends on either `guile-3.0` or `guile-2.2`, meaning\n+that it would work no matter what Guile version you decided to use.\n+\n+###### Corner case: Multiple versions of Guile on one system\n+\n+It is recommended to only install one version of Guile, so that build systems do\n+not get confused about which Guile to use.\n+\n+However, if you insist on having both Guile v2.2 and Guile v3.0 installed on\n+your system, then you need to **consistently** specify one of\n+`GUILE_EFFECTIVE_VERSION=3.0` or `GUILE_EFFECTIVE_VERSION=2.2` to all\n+`./configure` invocations for Guix and its dependencies.\n+\n+##### Installing Guile\n+\n+Guile is most likely already packaged for your distribution, so after you have\n+[chosen a Guile version](), install it via your distribution's package manager.\n+\n+If your distribution splits packages into `-dev`-suffixed and\n+non-`-dev`-suffixed sub-packages (as is the case for debian-derived\n+distributions), please make sure to install both. For example, to install Guile\n+v2.2 on Debian/Ubuntu:\n+\n+```sh\n+apt install guile-2.2 guile-2.2-dev\n+```\n+\n+#### Mixing distribution packages and source-built packages\n+\n+At the time of writing, most distributions have _some_ of Guix's dependencies\n+packaged, but not all. This means that you may want to install the distribution\n+package for some dependencies, and manually build-from-source for others.\n+\n+Distribution packages usually install to `/usr`, which is different from the\n+default `./configure` prefix of source-built packages: `/usr/local`.\n+\n+This means that if you mix-and-match distribution packages and source-built\n+packages and do not specify exactly `--prefix=/usr` to `./configure` for\n+source-built packages, you will need to augment the `GUILE_LOAD_PATH` and\n+`GUILE_LOAD_COMPILED_PATH` environment variables so that Guile will look\n+under the right prefix and find your source-built packages.\n+\n+For example, if you are using Guile v2.2, and have Guile packages in the\n+`/usr/local` prefix, either add the following lines to your `.profile` or\n+`.bash_profile` so that the environment variable is properly set for all future\n+shell logins, or paste the lines into a POSIX-style shell to temporarily modify\n+the environment variables of your current shell session.\n+\n+```sh\n+# Help Guile v2.2.x find packages in /usr/local\n+export GUILE_LOAD_PATH=\"/usr/local/share/guile/site/2.2${GUILE_LOAD_PATH:+:}$GUILE_LOAD_PATH\"\n+export GUILE_LOAD_COMPILED_PATH=\"/usr/local/lib/guile/2.2/site-ccache${GUILE_LOAD_COMPILED_PATH:+:}$GUILE_COMPILED_LOAD_PATH\"\n+```\n+\n+Note that these environment variables are used to check for packages during\n+`./configure`, so they should be set as soon as possible should you want to use\n+a prefix other than `/usr`.\n+\n+<!-- ##### Example: Consistently using Guile 3.0 on Ubuntu -->\n+\n+<!-- For example, on Ubuntu, if you choose to use Guile 3.0 and install the -->\n+<!-- `guile-3.0` package, you want to make sure that if you also want to install the -->\n+<!-- `guile-git` package with `apt` that said `guile-git` package was built for Guile -->\n+<!-- v3.0. This can be checked by invoking the following: -->\n+\n+<!-- ``` -->\n+<!-- apt update -->\n+<!-- apt show guile-git -->\n+<!-- ``` -->\n+\n+#### Building and installing source-built packages\n+\n+*A few dependencies have non-obvious quirks/erratas which are documented in the\n+sub-sections immediately below. Please read these sections before proceeding to\n+build and install these packages.*\n+\n+Although you should always refer to the README or INSTALL files for the most\n+accurate information, most of these dependencies use autoconf-style build\n+systems (check if there's a `configure.ac` file), and will likely do the right\n+thing with this simple routine:\n+\n+```sh\n+git clone <git-repo-of-dependency>/<dependency>.git\n+cd <dependency>\n+git tag -l  # check for the latest release\n+git checkout <latest-release>\n+\n+autoreconf -vfi\n+./configure --prefix=<prefix>\n+make\n+sudo make install\n+```\n+\n+If you choose not to specify exactly `--prefix=/usr` to `./configure`, please\n+make sure you've carefully read the [previous section] on mixing distribution\n+packages and source-built packages.\n+\n+##### Binding packages require `-dev`-suffixed packages\n+\n+Relevant for:\n+- Everyone\n+\n+When building bindings, the `-dev`-suffixed version of the original package\n+needs to be installed. For example, building `Guile-zlib` requires that a\n+debian-derived distribution has `zlib1g-dev` installed.\n+\n+When using bindings, the `-dev`-suffixed version of the original package still\n+needs to be installed. This is particularly problematic when distribution\n+packages are mispackaged like `guile-sqlite3` is in Ubuntu Focal such that\n+installing `guile-sqlite3` does not automatically install `libsqlite3-dev` as a\n+dependency.\n+\n+Below is a list of relevant Guile bindings and their corresponding `-dev`\n+packages in Debian at the time of writing.\n+\n+| Guile binding package | -dev Debian package |\n+|-----------------------|---------------------|\n+| guile-gcrypt          | libgcrypt-dev       |\n+| guile-git             | libgit2-dev         |\n+| guile-lzlib           | liblz-dev           |\n+| guile-ssh             | libssh-dev          |\n+| guile-sqlite3         | libsqlite3-dev      |\n+| guile-zlib            | zlib1g-dev          |\n+\n+##### `guile-git` actually depends on `libgit2 >= 1.1`\n+\n+Relevant for:\n+- Those building `guile-git` from source against `libgit2 < 1.1`\n+- Those installing `guile-git` from their distribution where `guile-git` is\n+  built against `libgit2 < 1.1`\n+\n+As of v0.4.0, `guile-git` claims to only require `libgit2 >= 0.28.0`, however,\n+it actually requires `libgit2 >= 1.1`, otherwise, it will be confused by a\n+reference of `origin/keyring`: instead of interpreting the reference as \"the\n+'keyring' branch of the 'origin' remote\", the reference is interpreted as \"the\n+branch literally named 'origin/keyring'\"\n+\n+This is especially notable because Ubuntu Focal packages `libgit2 v0.28.4`, and\n+`guile-git` is built against it.\n+\n+Should you be in this situation, you need to build both `libgit2 v1.1.x` and\n+`guile-git` from source.\n+\n+Source: http://logs.guix.gnu.org/guix/2020-11-12.log#232527\n+\n+##### `{scheme,guile}-bytestructures` v1.0.8 and v1.0.9 are broken for Guile v2.2\n+\n+Relevant for:\n+- Those building `{scheme,guile}-bytestructures` from source against Guile v2.2\n+\n+Commit\n+[707eea3](https://github.com/TaylanUB/scheme-bytestructures/commit/707eea3a85e1e375e86702229ebf73d496377669)\n+introduced a regression for Guile v2.2 and was first included in v1.0.8, this\n+was later corrected in commit\n+[ec9a721](https://github.com/TaylanUB/scheme-bytestructures/commit/ec9a721957c17bcda13148f8faa5f06934431ff7)\n+and included in v1.1.0.\n+\n+TL;DR If you decided to use Guile v2.2, do not use `{scheme,guile}-bytestructures` v1.0.8 or v1.0.9.\n+\n+### Building and Installing Guix itself\n+\n+Start by cloning Guix:\n+\n+```\n+git clone https://git.savannah.gnu.org/git/guix.git\n+cd guix\n+```\n+\n+You will likely want to build the latest release, however, if the latest release\n+when you're reading this is still 1.2.0 then you may want to use 95aca29 instead\n+to avoid a problem in the GnuTLS test suite.\n+\n+```\n+git branch -a -l 'origin/version-*'  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+Bootstrap the build system:\n+```\n+./bootstrap\n+```\n+\n+Configure with the recommended `--localstatedir` flag:\n+```\n+./configure --localstatedir=/var\n+```\n+\n+Note: If you intend to hack on Guix in the future, you will need to supply the\n+same `--localstatedir=` flag for all future Guix `./configure` invocations. See\n+the last paragraph of this\n+[section](https://guix.gnu.org/manual/en/html_node/Requirements.html) for more\n+details.\n+\n+Build Guix (this will take a while):\n+```\n+make -j$(nproc)\n+```\n+\n+Install Guix:\n+\n+```\n+sudo make install\n+```\n+\n+##### Setting Up the Daemon\n+\n+###### Fixing `argv[0]`\n+\n+At this point, guix will be installed to `${bindir}`, which is likely\n+`/usr/local/bin` if you did not override directory variables at\n+`./configure`-time. More information on standard Automake directory variables\n+can be found\n+[here](https://www.gnu.org/software/automake/manual/html_node/Standard-Directory-Variables.html).\n+\n+However, the Guix init scripts and service configurations for Upstart, systemd,\n+SysV, and OpenRC are installed to launch\n+`${localstatedir}/guix/profiles/per-user/root/current-guix/bin/guix-daemon`,\n+which does not yet exist, and will only exist after `root` performs their first\n+`guix pull`.\n+\n+We need to create a `-original` version of these init scripts that's pointed to\n+binaries in `${bindir}` (normally, `/usr/local/bin`).\n+\n+Example for `systemd`, run as `root`:\n+\n+```sh\n+# Create guix-daemon-original.service by modifying guix-daemon.service\n+bindir=\"$(dirname $(command -v guix-daemon))\"\n+sed -E -e \"s|/\\S*/guix/profiles/per-user/root/current-guix/bin/guix-daemon|${bindir}/guix-daemon|\" /etc/systemd/system/guix-daemon.service > /etc/systemd/system/guix-daemon-original.service\n+chmod 664 /etc/systemd/system/guix-daemon-original.service\n+\n+# Make systemd recognize the new service\n+systemctl daemon-reload\n+\n+# Make sure that the non-working guix-daemon.service is stopped and disabled\n+systemctl stop guix-daemon\n+systemctl disable guix-daemon\n+\n+# Make sure that the working guix-daemon-original.service is started and enabled\n+systemctl enable guix-daemon-original\n+systemctl start guix-daemon-original\n+```\n+\n+###### Create guix-daemon users / groups\n+\n+Please see the [relevant\n+section](https://guix.gnu.org/manual/en/html_node/Build-Environment-Setup.html)\n+in the Guix Reference Manual for more details.\n+\n+## Optional setup\n+\n+At this point, you are set up to [use Guix to build bitcoin](). However, if you\n+want to polish your setup a bit and make it \"what Guix intended\", then read the\n+next few subsections.\n+\n+### Add an `/etc/profile.d` entry\n+\n+Although Guix knows how to update itself and its packages, it does so in a\n+non-invasive way (it does not modify `/usr/local/bin/guix`).\n+\n+Instead, it does the following:\n+\n+- After a `guix pull`, it updates\n+  `/var/guix/profiles/per-user/$USER/current-guix`, and creates a symlink\n+  targeting this directory at `$HOME/.config/guix/current`\n+\n+- After a `guix install`, it updates\n+  `/var/guix/profiles/per-user/$USER/guix-profile`, and creates a symlink\n+  targeting this directory at `$HOME/.guix-profile`\n+\n+Therefore, in order for these operations to effect your shell/desktop sessions",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r615203071",
      "id" : 615203071,
      "line" : 504,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTIwMzA3MQ==",
      "original_commit_id" : "57684eda890c01f9d188313b4012bcddfc8c1191",
      "original_line" : 504,
      "original_position" : 504,
      "original_start_line" : null,
      "path" : "contrib/guix/README.md",
      "position" : 504,
      "pull_request_review_id" : 638195828,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-17T04:33:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615203071",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r615205208"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615205208"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you mean `guix-daemon` here.",
      "commit_id" : "57684eda890c01f9d188313b4012bcddfc8c1191",
      "created_at" : "2021-04-17T04:30:19Z",
      "diff_hunk" : "@@ -9,79 +11,835 @@ downloads.\n \n We achieve bootstrappability by using Guix as a functional package manager.\n \n-## Requirements\n+# Requirements\n \n Conservatively, a x86_64 machine with:\n \n - 16GB of free disk space on the partition that /gnu/store will reside in\n - 8GB of free disk space per platform triple you're planning on building (see\n   the `HOSTS` environment variable description)\n \n-## Setup\n+# Installation and Setup\n+\n+At the time of writing, the latest Guix release is v1.2.0, which has a known\n+problems w/re building GnuTLS from source. Solutions and workarounds are\n+documented [here](), but I would recommend that you install v1.2.1 (planned for\n+release on April 18th, 2021) or later if your choice of installation option\n+allows.\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](#usage).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions]()\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section]()\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on distribution\n+5. Building **from source** [â¤ skip to section]()\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Option 1: Using the official shell installer script\n+\n+The shell installer script provided by the Guix maintainers automates the\n+download, installation, and initial configuration steps detailed\n+[here](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+To install Guix using this method, do the following as `root` (e.g. via `su -`):\n+\n+```sh\n+# Use /tmp as the working directory\n+cd /tmp\n+\n+# Download the script\n+wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n+\n+# Inspect the script\n+less guix-install.sh\n+\n+# Make the script executable\n+chmod +x guix-install.sh\n+\n+# Run the script\n+./guix-install.sh\n+```\n+\n+\n+## Option 2: Using the official binary tarball\n+\n+Follow the binary installation instructions step-by-step in the Guix Reference\n+Manual\n+[here](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+Ignore the note about using the shell installer script since that does not\n+apply. This is largely equivalent to maually performing what the shell installer\n+script does.\n+\n+## Option 3: TODO fanquake docker\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian/Ubuntu\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) (\"bullseye\") and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix) (Hirsute Hippo).\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+### Installing common build tools\n+\n+There are a few basic build tools that are required for most things we'll build,\n+so let's install them now:\n+\n+Text transformation/i18n:\n+- `autopoint` (sometimes packaged in `gettext`)\n+- `help2man`\n+- `po4a`\n+- `texinfo`\n+\n+Build system tools:\n+- `g++` w/ C++11 support\n+- `libtool`\n+- `autoconf`\n+- `automake`\n+- `pkg-config` (sometimes packaged as `pkgconf`)\n+- `make`\n+- `cmake`\n+\n+Miscellaneous:\n+- `git`\n+- `gnupg`\n+- `python3`\n+\n+### Building and Installing Guix's dependencies\n+\n+In order to build Guix itself from source, we need to first make sure that the\n+necessary dependencies are installed and discoverable. The most up-to-date list\n+of Guix's dependencies is kept in the [\"Requirements\"\n+section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n+Reference Manual.\n+\n+Depending on your distribution, most or all of these dependencies may already be\n+packaged and installable without manually building and installing.\n+\n+#### Guile\n+\n+##### Choosing a Guile version and sticking to it\n+\n+One of the first things you need to decide is which Guile version you want to\n+use: Guile v2.2 or Guile v3.0. Unlike the python2 to python3 transition, Guile\n+v2.2 and Guile v3.0 are largely compatible, as evidenced by the fact that most\n+Guile packages and even [Guix\n+itself](https://guix.gnu.org/en/blog/2020/guile-3-and-guix/) support running on\n+both.\n+\n+What is important here is that you **choose one**, and you **remain consistent**\n+with your choice throughout **all Guile-related packages**, no matter if they\n+are installed via the distribution's package manager or installed from source.\n+This is because the files for Guile packages are installed to directories which\n+are separated based on the Guile version.\n+\n+###### Example: Checking that Ubuntu's `guile-git` is compatible with your chosen Guile version\n+\n+On Ubuntu Focal:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-2.2, guile-bytestructures, libgit2-dev\n+...\n+```\n+\n+As you can see, the package `guile-git` depends on `guile-2.2`, meaning that it\n+was likely built for Guile v2.2. This means that if you decided to use Guile\n+v3.0 on Ubuntu Focal, you would need to build guile-git from source instead of\n+using the distribution package.\n+\n+On Ubuntu Hirsute:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-3.0 | guile-2.2, guile-bytestructures (>= 1.0.7-3~), libgit2-dev (>= 1.0)\n+...\n+```\n+\n+In this case, `guile-git` depends on either `guile-3.0` or `guile-2.2`, meaning\n+that it would work no matter what Guile version you decided to use.\n+\n+###### Corner case: Multiple versions of Guile on one system\n+\n+It is recommended to only install one version of Guile, so that build systems do\n+not get confused about which Guile to use.\n+\n+However, if you insist on having both Guile v2.2 and Guile v3.0 installed on\n+your system, then you need to **consistently** specify one of\n+`GUILE_EFFECTIVE_VERSION=3.0` or `GUILE_EFFECTIVE_VERSION=2.2` to all\n+`./configure` invocations for Guix and its dependencies.\n+\n+##### Installing Guile\n+\n+Guile is most likely already packaged for your distribution, so after you have\n+[chosen a Guile version](), install it via your distribution's package manager.\n+\n+If your distribution splits packages into `-dev`-suffixed and\n+non-`-dev`-suffixed sub-packages (as is the case for debian-derived\n+distributions), please make sure to install both. For example, to install Guile\n+v2.2 on Debian/Ubuntu:\n+\n+```sh\n+apt install guile-2.2 guile-2.2-dev\n+```\n+\n+#### Mixing distribution packages and source-built packages\n+\n+At the time of writing, most distributions have _some_ of Guix's dependencies\n+packaged, but not all. This means that you may want to install the distribution\n+package for some dependencies, and manually build-from-source for others.\n+\n+Distribution packages usually install to `/usr`, which is different from the\n+default `./configure` prefix of source-built packages: `/usr/local`.\n+\n+This means that if you mix-and-match distribution packages and source-built\n+packages and do not specify exactly `--prefix=/usr` to `./configure` for\n+source-built packages, you will need to augment the `GUILE_LOAD_PATH` and\n+`GUILE_LOAD_COMPILED_PATH` environment variables so that Guile will look\n+under the right prefix and find your source-built packages.\n+\n+For example, if you are using Guile v2.2, and have Guile packages in the\n+`/usr/local` prefix, either add the following lines to your `.profile` or\n+`.bash_profile` so that the environment variable is properly set for all future\n+shell logins, or paste the lines into a POSIX-style shell to temporarily modify\n+the environment variables of your current shell session.\n+\n+```sh\n+# Help Guile v2.2.x find packages in /usr/local\n+export GUILE_LOAD_PATH=\"/usr/local/share/guile/site/2.2${GUILE_LOAD_PATH:+:}$GUILE_LOAD_PATH\"\n+export GUILE_LOAD_COMPILED_PATH=\"/usr/local/lib/guile/2.2/site-ccache${GUILE_LOAD_COMPILED_PATH:+:}$GUILE_COMPILED_LOAD_PATH\"\n+```\n+\n+Note that these environment variables are used to check for packages during\n+`./configure`, so they should be set as soon as possible should you want to use\n+a prefix other than `/usr`.\n+\n+<!-- ##### Example: Consistently using Guile 3.0 on Ubuntu -->\n+\n+<!-- For example, on Ubuntu, if you choose to use Guile 3.0 and install the -->\n+<!-- `guile-3.0` package, you want to make sure that if you also want to install the -->\n+<!-- `guile-git` package with `apt` that said `guile-git` package was built for Guile -->\n+<!-- v3.0. This can be checked by invoking the following: -->\n+\n+<!-- ``` -->\n+<!-- apt update -->\n+<!-- apt show guile-git -->\n+<!-- ``` -->\n+\n+#### Building and installing source-built packages\n+\n+*A few dependencies have non-obvious quirks/erratas which are documented in the\n+sub-sections immediately below. Please read these sections before proceeding to\n+build and install these packages.*\n+\n+Although you should always refer to the README or INSTALL files for the most\n+accurate information, most of these dependencies use autoconf-style build\n+systems (check if there's a `configure.ac` file), and will likely do the right\n+thing with this simple routine:\n+\n+```sh\n+git clone <git-repo-of-dependency>/<dependency>.git\n+cd <dependency>\n+git tag -l  # check for the latest release\n+git checkout <latest-release>\n+\n+autoreconf -vfi\n+./configure --prefix=<prefix>\n+make\n+sudo make install\n+```\n+\n+If you choose not to specify exactly `--prefix=/usr` to `./configure`, please\n+make sure you've carefully read the [previous section] on mixing distribution\n+packages and source-built packages.\n+\n+##### Binding packages require `-dev`-suffixed packages\n+\n+Relevant for:\n+- Everyone\n+\n+When building bindings, the `-dev`-suffixed version of the original package\n+needs to be installed. For example, building `Guile-zlib` requires that a\n+debian-derived distribution has `zlib1g-dev` installed.\n+\n+When using bindings, the `-dev`-suffixed version of the original package still\n+needs to be installed. This is particularly problematic when distribution\n+packages are mispackaged like `guile-sqlite3` is in Ubuntu Focal such that\n+installing `guile-sqlite3` does not automatically install `libsqlite3-dev` as a\n+dependency.\n+\n+Below is a list of relevant Guile bindings and their corresponding `-dev`\n+packages in Debian at the time of writing.\n+\n+| Guile binding package | -dev Debian package |\n+|-----------------------|---------------------|\n+| guile-gcrypt          | libgcrypt-dev       |\n+| guile-git             | libgit2-dev         |\n+| guile-lzlib           | liblz-dev           |\n+| guile-ssh             | libssh-dev          |\n+| guile-sqlite3         | libsqlite3-dev      |\n+| guile-zlib            | zlib1g-dev          |\n+\n+##### `guile-git` actually depends on `libgit2 >= 1.1`\n+\n+Relevant for:\n+- Those building `guile-git` from source against `libgit2 < 1.1`\n+- Those installing `guile-git` from their distribution where `guile-git` is\n+  built against `libgit2 < 1.1`\n+\n+As of v0.4.0, `guile-git` claims to only require `libgit2 >= 0.28.0`, however,\n+it actually requires `libgit2 >= 1.1`, otherwise, it will be confused by a\n+reference of `origin/keyring`: instead of interpreting the reference as \"the\n+'keyring' branch of the 'origin' remote\", the reference is interpreted as \"the\n+branch literally named 'origin/keyring'\"\n+\n+This is especially notable because Ubuntu Focal packages `libgit2 v0.28.4`, and\n+`guile-git` is built against it.\n+\n+Should you be in this situation, you need to build both `libgit2 v1.1.x` and\n+`guile-git` from source.\n+\n+Source: http://logs.guix.gnu.org/guix/2020-11-12.log#232527\n+\n+##### `{scheme,guile}-bytestructures` v1.0.8 and v1.0.9 are broken for Guile v2.2\n+\n+Relevant for:\n+- Those building `{scheme,guile}-bytestructures` from source against Guile v2.2\n+\n+Commit\n+[707eea3](https://github.com/TaylanUB/scheme-bytestructures/commit/707eea3a85e1e375e86702229ebf73d496377669)\n+introduced a regression for Guile v2.2 and was first included in v1.0.8, this\n+was later corrected in commit\n+[ec9a721](https://github.com/TaylanUB/scheme-bytestructures/commit/ec9a721957c17bcda13148f8faa5f06934431ff7)\n+and included in v1.1.0.\n+\n+TL;DR If you decided to use Guile v2.2, do not use `{scheme,guile}-bytestructures` v1.0.8 or v1.0.9.\n+\n+### Building and Installing Guix itself\n+\n+Start by cloning Guix:\n+\n+```\n+git clone https://git.savannah.gnu.org/git/guix.git\n+cd guix\n+```\n+\n+You will likely want to build the latest release, however, if the latest release\n+when you're reading this is still 1.2.0 then you may want to use 95aca29 instead\n+to avoid a problem in the GnuTLS test suite.\n+\n+```\n+git branch -a -l 'origin/version-*'  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+Bootstrap the build system:\n+```\n+./bootstrap\n+```\n+\n+Configure with the recommended `--localstatedir` flag:\n+```\n+./configure --localstatedir=/var\n+```\n+\n+Note: If you intend to hack on Guix in the future, you will need to supply the\n+same `--localstatedir=` flag for all future Guix `./configure` invocations. See\n+the last paragraph of this\n+[section](https://guix.gnu.org/manual/en/html_node/Requirements.html) for more\n+details.\n+\n+Build Guix (this will take a while):\n+```\n+make -j$(nproc)\n+```\n+\n+Install Guix:\n+\n+```\n+sudo make install\n+```\n+\n+##### Setting Up the Daemon\n+\n+###### Fixing `argv[0]`\n+\n+At this point, guix will be installed to `${bindir}`, which is likely\n+`/usr/local/bin` if you did not override directory variables at\n+`./configure`-time. More information on standard Automake directory variables\n+can be found\n+[here](https://www.gnu.org/software/automake/manual/html_node/Standard-Directory-Variables.html).\n+\n+However, the Guix init scripts and service configurations for Upstart, systemd,\n+SysV, and OpenRC are installed to launch\n+`${localstatedir}/guix/profiles/per-user/root/current-guix/bin/guix-daemon`,\n+which does not yet exist, and will only exist after `root` performs their first\n+`guix pull`.\n+\n+We need to create a `-original` version of these init scripts that's pointed to\n+binaries in `${bindir}` (normally, `/usr/local/bin`).\n+\n+Example for `systemd`, run as `root`:\n+\n+```sh\n+# Create guix-daemon-original.service by modifying guix-daemon.service\n+bindir=\"$(dirname $(command -v guix-daemon))\"\n+sed -E -e \"s|/\\S*/guix/profiles/per-user/root/current-guix/bin/guix-daemon|${bindir}/guix-daemon|\" /etc/systemd/system/guix-daemon.service > /etc/systemd/system/guix-daemon-original.service\n+chmod 664 /etc/systemd/system/guix-daemon-original.service\n+\n+# Make systemd recognize the new service\n+systemctl daemon-reload\n+\n+# Make sure that the non-working guix-daemon.service is stopped and disabled\n+systemctl stop guix-daemon\n+systemctl disable guix-daemon\n+\n+# Make sure that the working guix-daemon-original.service is started and enabled\n+systemctl enable guix-daemon-original\n+systemctl start guix-daemon-original\n+```\n+\n+###### Create guix-daemon users / groups\n+\n+Please see the [relevant\n+section](https://guix.gnu.org/manual/en/html_node/Build-Environment-Setup.html)\n+in the Guix Reference Manual for more details.\n+\n+## Optional setup\n+\n+At this point, you are set up to [use Guix to build bitcoin](). However, if you\n+want to polish your setup a bit and make it \"what Guix intended\", then read the\n+next few subsections.\n+\n+### Add an `/etc/profile.d` entry\n+\n+Although Guix knows how to update itself and its packages, it does so in a\n+non-invasive way (it does not modify `/usr/local/bin/guix`).\n+\n+Instead, it does the following:\n+\n+- After a `guix pull`, it updates\n+  `/var/guix/profiles/per-user/$USER/current-guix`, and creates a symlink\n+  targeting this directory at `$HOME/.config/guix/current`\n+\n+- After a `guix install`, it updates\n+  `/var/guix/profiles/per-user/$USER/guix-profile`, and creates a symlink\n+  targeting this directory at `$HOME/.guix-profile`\n+\n+Therefore, in order for these operations to effect your shell/desktop sessions\n+(and for the principle of least astonishment to hold), their corresponding\n+directories have to be added to well-known environment variables like `$PATH`,\n+`$INFOPATH`, `$XDG_DATA_DIRS`, etc.\n+\n+In other words, if `$HOME/.config/guix/current/bin` does not exist in your\n+`$PATH`, a `guix pull` will have no effect on what `guix` you are using. Same\n+goes for `$HOME/.guix-profile/bin`, `guix install`, and installed packages.\n+\n+Helpfully, after a `guix pull` or `guix install`, a message will be printed like\n+so:\n+\n+```\n+hint: Consider setting the necessary environment variables by running:\n+\n+     GUIX_PROFILE=\"$HOME/.guix-profile\"\n+     . \"$GUIX_PROFILE/etc/profile\"\n+\n+Alternately, see `guix package --search-paths -p \"$HOME/.guix-profile\"'.\n+```\n+\n+However, this is somewhat tedious to do for both `guix pull` and `guix install`\n+for each user on the system that wants to properly use `guix`. I recommend that\n+you instead add an entry to `/etc/profile.d` instead. This is done by default\n+when installing the Debian package later than 1.2.0-4 and when using the shell\n+script installer.\n+\n+Create `/etc/profile.d/guix.sh` with the following content:\n+```sh\n+# _GUIX_PROFILE: `guix pull` profile\n+_GUIX_PROFILE=\"$HOME/.config/guix/current\"\n+if [ -L $_GUIX_PROFILE ]; then\n+  export PATH=\"$_GUIX_PROFILE/bin${PATH:+:}$PATH\"\n+  # Export INFOPATH so that the updated info pages can be found\n+  # and read by both /usr/bin/info and/or $GUIX_PROFILE/bin/info\n+  # When INFOPATH is unset, add a trailing colon so that Emacs\n+  # searches 'Info-default-directory-list'.\n+  export INFOPATH=\"$_GUIX_PROFILE/share/info:$INFOPATH\"\n+fi\n+\n+# GUIX_PROFILE: User's default profile\n+GUIX_PROFILE=\"$HOME/.guix-profile\"\n+[ -L $GUIX_PROFILE ] || return\n+GUIX_LOCPATH=\"$GUIX_PROFILE/lib/locale\"\n+export GUIX_PROFILE GUIX_LOCPATH\n+\n+[ -f \"$GUIX_PROFILE/etc/profile\" ] && . \"$GUIX_PROFILE/etc/profile\"\n+\n+# set XDG_DATA_DIRS to include Guix installations\n+export XDG_DATA_DIRS=\"$GUIX_PROFILE/share:${XDG_DATA_DIRS:-/usr/local/share/:/usr/share/}\"\n+```\n+\n+Please note that this will not take effect until the next shell or desktop\n+session (log out and log back in).\n+\n+### `guix pull` as root\n+\n+Before you do this, you need to read [choose your security model]() and adjust\n+`guix` and `guix-daemon` flags according to your choice, as invoking `guix pull`\n+may pull substitutes from substitute servers (which you may not want).\n+\n+As mentioned in a previous section, Guix expects\n+`${localstatedir}/guix/profiles/per-user/root/current-guix` to be populated with\n+`root`'s Guix profile, `guix pull`-ed and built by some former version of Guix.\n+However, this is not the case when we build from source. Therefore, we need to\n+perform a `guix pull` as `root`:\n+\n+```sh\n+sudo --login guix pull --branch=version-<latest-release-version>\n+# or\n+sudo --login guix pull --commit=<particular-commit>\n+```\n+\n+`guix pull` is quite a long process (espcially if you're using\n+`--no-substitute`). If you encounter build problems, please refer to the\n+[troubleshooting section]().\n+\n+Note that running a bare `guix pull` with no commit or branch specified will\n+pull the latest commit on Guix's master branch, which is likely fine, but not\n+recommended.\n+\n+If you installed Guix from source, you may get an error like the following:\n+```sh\n+error: while creating symlink '/root/.config/guix/current' No such file or directory\n+```\n+To resolve this, simply:\n+```\n+sudo mkdir -p /root/.config/guix\n+```\n+Then try the `guix pull` command again.\n+\n+After the `guix pull` finishes successfully,\n+`${localstatedir}/guix/profiles/per-user/root/current-guix` should be populated.\n+\n+### Restarting the daemon\n+\n+If you built Guix from source and followed the instructions for [fixing argv\\[0\\]](), you can\n+now do the following:\n+\n+```sh\n+systemctl stop guix-daemon-original\n+systemctl disable guix-daemon-original\n+\n+systemctl enable guix-daemon\n+systemctl start guix-daemon\n+```\n+\n+Otherwise, simply do:\n \n-### Installing Guix\n+```sh\n+systemctl restart guix-daemon\n+```\n+\n+### Checking everything\n+\n+If you followed all the steps above to make your Guix setup \"prim and proper,\"\n+you can check that you did everything properly by running through this\n+checklist.\n+\n+1. `/etc/profile.d/guix.sh` should exist and be sourced at each shell login\n \n-If you're just testing this out, you can use the\n-[Dockerfile][fanquake/guix-docker] for convenience. It automatically speeds up\n-your builds by [using substitutes](#speeding-up-builds-with-substitute-servers).\n-If you don't want this behaviour, refer to the [next\n-section](#choosing-your-security-model).\n+2. `guix describe` should not print `guix describe: error: failed to determine\n+   origin`, but rather something like:\n \n-Otherwise, follow the [Guix installation guide][guix/bin-install].\n+   ```\n+   Generation 38   Feb 22 2021 16:39:31    (current)\n+     guix f350df4\n+       repository URL: https://git.savannah.gnu.org/git/guix.git\n+       branch: version-1.2.0\n+       commit: f350df405fbcd5b9e27e6b6aa500da7f101f41e7\n+   ```\n \n-> Note: For those who like to keep their filesystems clean, Guix is designed to\n-> be very standalone and _will not_ conflict with your system's package\n-> manager/existing setup. It _only_ touches `/var/guix`, `/gnu`, and\n-> `~/.config/guix`.\n+3. `guix-daemon` should be running from `${localstatedir}/guix/profiles/per-user/root/current-guix`\n \n-### Choosing your security model\n+\n+# Choosing your security model\n+\n+No matter how you installed Guix, you need to now decide on your security model\n+for building packages with Guix.\n \n Guix allows us to achieve better binary security by using our CPU time to build\n everything from scratch. However, it doesn't sacrifice user choice in pursuit of\n-this: users can decide whether or not to bootstrap and to use substitutes\n-(pre-built packages).\n+this: users can decide whether or not to use substitutes (pre-built packages).\n+\n+## Option 1: Building with substitutes\n+\n+### Step 1: Authorize the signing keys\n+\n+Depending on the installation procedure you followed, you may have already\n+authorized the Guix build farm key. In particular, the official shell installer\n+script asks you if you want the key installed, and the debian distribution\n+package authorized the key during installation.\n+\n+You can check the current list of authorized keys at `/etc/guix/acl`.\n+\n+At the time of writing, a `/etc/guix/acl` with just the Guix build farm key\n+authorized looks something like:\n+```lisp\n+(acl\n+ (entry\n+  (public-key\n+   (ecc\n+    (curve Ed25519)\n+    (q #8D156F295D24B0D9A86FA5741A840FF2D24F60F7B6C4134814AD55625971B394#)\n+    )\n+   )\n+  (tag\n+   (guix import)\n+   )\n+  )\n+ )\n+```\n \n-After installation, you may want to consider [adding substitute\n-servers](#speeding-up-builds-with-substitute-servers) from which to download\n-pre-built packages to speed up your build if that fits your security model (say,\n-if you're just testing that this works). Substitute servers are set up by\n-default if you're using the [Dockerfile][fanquake/guix-docker].\n+If you've determined that the official Guix build farm key hasn't been\n+authorized, and you would like to authorize it, run the following as root:\n+\n+```\n+guix archive --authorize < /var/guix/profiles/per-user/root/current-guix/share/guix/ci.guix.gnu.org.pub\n+```\n+\n+If\n+`/var/guix/profiles/per-user/root/current-guix/share/guix/ci.guix.gnu.org.pub`\n+doesn't exist, try:\n+\n+```sh\n+guix archive --authorize < <PREFIX>/share/guix/ci.guix.gnu.org.pub\n+```\n+\n+Where <PREFIX> is likely:\n+- `/usr` if you installed from a distribution package\n+- `/usr/local` if you installed Guix from source and didn't supply any\n+  prefix-modifying flags to Guix's `./configure`\n+\n+For dongcarl's substitute server at https://guix.carldong.io, run as root:\n+\n+```sh\n+wget -qO- 'https://guix.carldong.io/signing-key.pub' | guix archive --authorize\n+```\n+\n+### Step 2: Specify the substitute servers\n+\n+Once its key is authorized, the official Guix build farm at\n+https://ci.guix.gnu.org is automatically used unless the `--no-substitutes` flag\n+is supplied. This behaviour is overridable. See examples below for the various\n+ways of adding dongcarl's substitute server after having [authorized his signing\n+key](#authorize-the-signing-keys).\n+\n+Change the default list of substitute servers by starting `guix-daemon` with the\n+`--substitute-urls` option:\n+```\n+guix <cmd> --substitute-urls=\"https://guix.carldong.io https://ci.guix.gnu.org\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r615205208",
      "id" : 615205208,
      "line" : 714,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTIwNTIwOA==",
      "original_commit_id" : "57684eda890c01f9d188313b4012bcddfc8c1191",
      "original_line" : 714,
      "original_position" : 733,
      "original_start_line" : null,
      "path" : "contrib/guix/README.md",
      "position" : 733,
      "pull_request_review_id" : 638195828,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-17T04:33:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615205208",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r615296503"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615296503"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: s/maually/manually/",
      "commit_id" : "57684eda890c01f9d188313b4012bcddfc8c1191",
      "created_at" : "2021-04-17T19:41:40Z",
      "diff_hunk" : "@@ -9,79 +11,835 @@ downloads.\n \n We achieve bootstrappability by using Guix as a functional package manager.\n \n-## Requirements\n+# Requirements\n \n Conservatively, a x86_64 machine with:\n \n - 16GB of free disk space on the partition that /gnu/store will reside in\n - 8GB of free disk space per platform triple you're planning on building (see\n   the `HOSTS` environment variable description)\n \n-## Setup\n+# Installation and Setup\n+\n+At the time of writing, the latest Guix release is v1.2.0, which has a known\n+problems w/re building GnuTLS from source. Solutions and workarounds are\n+documented [here](), but I would recommend that you install v1.2.1 (planned for\n+release on April 18th, 2021) or later if your choice of installation option\n+allows.\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](#usage).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions]()\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section]()\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on distribution\n+5. Building **from source** [â¤ skip to section]()\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Option 1: Using the official shell installer script\n+\n+The shell installer script provided by the Guix maintainers automates the\n+download, installation, and initial configuration steps detailed\n+[here](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+To install Guix using this method, do the following as `root` (e.g. via `su -`):\n+\n+```sh\n+# Use /tmp as the working directory\n+cd /tmp\n+\n+# Download the script\n+wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n+\n+# Inspect the script\n+less guix-install.sh\n+\n+# Make the script executable\n+chmod +x guix-install.sh\n+\n+# Run the script\n+./guix-install.sh\n+```\n+\n+\n+## Option 2: Using the official binary tarball\n+\n+Follow the binary installation instructions step-by-step in the Guix Reference\n+Manual\n+[here](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+Ignore the note about using the shell installer script since that does not\n+apply. This is largely equivalent to maually performing what the shell installer",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r615296503",
      "id" : 615296503,
      "line" : 102,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTI5NjUwMw==",
      "original_commit_id" : "57684eda890c01f9d188313b4012bcddfc8c1191",
      "original_line" : 102,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "contrib/guix/README.md",
      "position" : 102,
      "pull_request_review_id" : 638270471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-17T19:52:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615296503",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
         "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
         "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheCharlatan",
         "id" : 8421793,
         "login" : "TheCharlatan",
         "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
         "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
         "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
         "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheCharlatan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r615297055"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615297055"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: s/espcially/especially/",
      "commit_id" : "57684eda890c01f9d188313b4012bcddfc8c1191",
      "created_at" : "2021-04-17T19:47:10Z",
      "diff_hunk" : "@@ -9,79 +11,835 @@ downloads.\n \n We achieve bootstrappability by using Guix as a functional package manager.\n \n-## Requirements\n+# Requirements\n \n Conservatively, a x86_64 machine with:\n \n - 16GB of free disk space on the partition that /gnu/store will reside in\n - 8GB of free disk space per platform triple you're planning on building (see\n   the `HOSTS` environment variable description)\n \n-## Setup\n+# Installation and Setup\n+\n+At the time of writing, the latest Guix release is v1.2.0, which has a known\n+problems w/re building GnuTLS from source. Solutions and workarounds are\n+documented [here](), but I would recommend that you install v1.2.1 (planned for\n+release on April 18th, 2021) or later if your choice of installation option\n+allows.\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](#usage).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions]()\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section]()\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on distribution\n+5. Building **from source** [â¤ skip to section]()\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Option 1: Using the official shell installer script\n+\n+The shell installer script provided by the Guix maintainers automates the\n+download, installation, and initial configuration steps detailed\n+[here](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+To install Guix using this method, do the following as `root` (e.g. via `su -`):\n+\n+```sh\n+# Use /tmp as the working directory\n+cd /tmp\n+\n+# Download the script\n+wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n+\n+# Inspect the script\n+less guix-install.sh\n+\n+# Make the script executable\n+chmod +x guix-install.sh\n+\n+# Run the script\n+./guix-install.sh\n+```\n+\n+\n+## Option 2: Using the official binary tarball\n+\n+Follow the binary installation instructions step-by-step in the Guix Reference\n+Manual\n+[here](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+Ignore the note about using the shell installer script since that does not\n+apply. This is largely equivalent to maually performing what the shell installer\n+script does.\n+\n+## Option 3: TODO fanquake docker\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian/Ubuntu\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) (\"bullseye\") and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix) (Hirsute Hippo).\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+### Installing common build tools\n+\n+There are a few basic build tools that are required for most things we'll build,\n+so let's install them now:\n+\n+Text transformation/i18n:\n+- `autopoint` (sometimes packaged in `gettext`)\n+- `help2man`\n+- `po4a`\n+- `texinfo`\n+\n+Build system tools:\n+- `g++` w/ C++11 support\n+- `libtool`\n+- `autoconf`\n+- `automake`\n+- `pkg-config` (sometimes packaged as `pkgconf`)\n+- `make`\n+- `cmake`\n+\n+Miscellaneous:\n+- `git`\n+- `gnupg`\n+- `python3`\n+\n+### Building and Installing Guix's dependencies\n+\n+In order to build Guix itself from source, we need to first make sure that the\n+necessary dependencies are installed and discoverable. The most up-to-date list\n+of Guix's dependencies is kept in the [\"Requirements\"\n+section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n+Reference Manual.\n+\n+Depending on your distribution, most or all of these dependencies may already be\n+packaged and installable without manually building and installing.\n+\n+#### Guile\n+\n+##### Choosing a Guile version and sticking to it\n+\n+One of the first things you need to decide is which Guile version you want to\n+use: Guile v2.2 or Guile v3.0. Unlike the python2 to python3 transition, Guile\n+v2.2 and Guile v3.0 are largely compatible, as evidenced by the fact that most\n+Guile packages and even [Guix\n+itself](https://guix.gnu.org/en/blog/2020/guile-3-and-guix/) support running on\n+both.\n+\n+What is important here is that you **choose one**, and you **remain consistent**\n+with your choice throughout **all Guile-related packages**, no matter if they\n+are installed via the distribution's package manager or installed from source.\n+This is because the files for Guile packages are installed to directories which\n+are separated based on the Guile version.\n+\n+###### Example: Checking that Ubuntu's `guile-git` is compatible with your chosen Guile version\n+\n+On Ubuntu Focal:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-2.2, guile-bytestructures, libgit2-dev\n+...\n+```\n+\n+As you can see, the package `guile-git` depends on `guile-2.2`, meaning that it\n+was likely built for Guile v2.2. This means that if you decided to use Guile\n+v3.0 on Ubuntu Focal, you would need to build guile-git from source instead of\n+using the distribution package.\n+\n+On Ubuntu Hirsute:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-3.0 | guile-2.2, guile-bytestructures (>= 1.0.7-3~), libgit2-dev (>= 1.0)\n+...\n+```\n+\n+In this case, `guile-git` depends on either `guile-3.0` or `guile-2.2`, meaning\n+that it would work no matter what Guile version you decided to use.\n+\n+###### Corner case: Multiple versions of Guile on one system\n+\n+It is recommended to only install one version of Guile, so that build systems do\n+not get confused about which Guile to use.\n+\n+However, if you insist on having both Guile v2.2 and Guile v3.0 installed on\n+your system, then you need to **consistently** specify one of\n+`GUILE_EFFECTIVE_VERSION=3.0` or `GUILE_EFFECTIVE_VERSION=2.2` to all\n+`./configure` invocations for Guix and its dependencies.\n+\n+##### Installing Guile\n+\n+Guile is most likely already packaged for your distribution, so after you have\n+[chosen a Guile version](), install it via your distribution's package manager.\n+\n+If your distribution splits packages into `-dev`-suffixed and\n+non-`-dev`-suffixed sub-packages (as is the case for debian-derived\n+distributions), please make sure to install both. For example, to install Guile\n+v2.2 on Debian/Ubuntu:\n+\n+```sh\n+apt install guile-2.2 guile-2.2-dev\n+```\n+\n+#### Mixing distribution packages and source-built packages\n+\n+At the time of writing, most distributions have _some_ of Guix's dependencies\n+packaged, but not all. This means that you may want to install the distribution\n+package for some dependencies, and manually build-from-source for others.\n+\n+Distribution packages usually install to `/usr`, which is different from the\n+default `./configure` prefix of source-built packages: `/usr/local`.\n+\n+This means that if you mix-and-match distribution packages and source-built\n+packages and do not specify exactly `--prefix=/usr` to `./configure` for\n+source-built packages, you will need to augment the `GUILE_LOAD_PATH` and\n+`GUILE_LOAD_COMPILED_PATH` environment variables so that Guile will look\n+under the right prefix and find your source-built packages.\n+\n+For example, if you are using Guile v2.2, and have Guile packages in the\n+`/usr/local` prefix, either add the following lines to your `.profile` or\n+`.bash_profile` so that the environment variable is properly set for all future\n+shell logins, or paste the lines into a POSIX-style shell to temporarily modify\n+the environment variables of your current shell session.\n+\n+```sh\n+# Help Guile v2.2.x find packages in /usr/local\n+export GUILE_LOAD_PATH=\"/usr/local/share/guile/site/2.2${GUILE_LOAD_PATH:+:}$GUILE_LOAD_PATH\"\n+export GUILE_LOAD_COMPILED_PATH=\"/usr/local/lib/guile/2.2/site-ccache${GUILE_LOAD_COMPILED_PATH:+:}$GUILE_COMPILED_LOAD_PATH\"\n+```\n+\n+Note that these environment variables are used to check for packages during\n+`./configure`, so they should be set as soon as possible should you want to use\n+a prefix other than `/usr`.\n+\n+<!-- ##### Example: Consistently using Guile 3.0 on Ubuntu -->\n+\n+<!-- For example, on Ubuntu, if you choose to use Guile 3.0 and install the -->\n+<!-- `guile-3.0` package, you want to make sure that if you also want to install the -->\n+<!-- `guile-git` package with `apt` that said `guile-git` package was built for Guile -->\n+<!-- v3.0. This can be checked by invoking the following: -->\n+\n+<!-- ``` -->\n+<!-- apt update -->\n+<!-- apt show guile-git -->\n+<!-- ``` -->\n+\n+#### Building and installing source-built packages\n+\n+*A few dependencies have non-obvious quirks/erratas which are documented in the\n+sub-sections immediately below. Please read these sections before proceeding to\n+build and install these packages.*\n+\n+Although you should always refer to the README or INSTALL files for the most\n+accurate information, most of these dependencies use autoconf-style build\n+systems (check if there's a `configure.ac` file), and will likely do the right\n+thing with this simple routine:\n+\n+```sh\n+git clone <git-repo-of-dependency>/<dependency>.git\n+cd <dependency>\n+git tag -l  # check for the latest release\n+git checkout <latest-release>\n+\n+autoreconf -vfi\n+./configure --prefix=<prefix>\n+make\n+sudo make install\n+```\n+\n+If you choose not to specify exactly `--prefix=/usr` to `./configure`, please\n+make sure you've carefully read the [previous section] on mixing distribution\n+packages and source-built packages.\n+\n+##### Binding packages require `-dev`-suffixed packages\n+\n+Relevant for:\n+- Everyone\n+\n+When building bindings, the `-dev`-suffixed version of the original package\n+needs to be installed. For example, building `Guile-zlib` requires that a\n+debian-derived distribution has `zlib1g-dev` installed.\n+\n+When using bindings, the `-dev`-suffixed version of the original package still\n+needs to be installed. This is particularly problematic when distribution\n+packages are mispackaged like `guile-sqlite3` is in Ubuntu Focal such that\n+installing `guile-sqlite3` does not automatically install `libsqlite3-dev` as a\n+dependency.\n+\n+Below is a list of relevant Guile bindings and their corresponding `-dev`\n+packages in Debian at the time of writing.\n+\n+| Guile binding package | -dev Debian package |\n+|-----------------------|---------------------|\n+| guile-gcrypt          | libgcrypt-dev       |\n+| guile-git             | libgit2-dev         |\n+| guile-lzlib           | liblz-dev           |\n+| guile-ssh             | libssh-dev          |\n+| guile-sqlite3         | libsqlite3-dev      |\n+| guile-zlib            | zlib1g-dev          |\n+\n+##### `guile-git` actually depends on `libgit2 >= 1.1`\n+\n+Relevant for:\n+- Those building `guile-git` from source against `libgit2 < 1.1`\n+- Those installing `guile-git` from their distribution where `guile-git` is\n+  built against `libgit2 < 1.1`\n+\n+As of v0.4.0, `guile-git` claims to only require `libgit2 >= 0.28.0`, however,\n+it actually requires `libgit2 >= 1.1`, otherwise, it will be confused by a\n+reference of `origin/keyring`: instead of interpreting the reference as \"the\n+'keyring' branch of the 'origin' remote\", the reference is interpreted as \"the\n+branch literally named 'origin/keyring'\"\n+\n+This is especially notable because Ubuntu Focal packages `libgit2 v0.28.4`, and\n+`guile-git` is built against it.\n+\n+Should you be in this situation, you need to build both `libgit2 v1.1.x` and\n+`guile-git` from source.\n+\n+Source: http://logs.guix.gnu.org/guix/2020-11-12.log#232527\n+\n+##### `{scheme,guile}-bytestructures` v1.0.8 and v1.0.9 are broken for Guile v2.2\n+\n+Relevant for:\n+- Those building `{scheme,guile}-bytestructures` from source against Guile v2.2\n+\n+Commit\n+[707eea3](https://github.com/TaylanUB/scheme-bytestructures/commit/707eea3a85e1e375e86702229ebf73d496377669)\n+introduced a regression for Guile v2.2 and was first included in v1.0.8, this\n+was later corrected in commit\n+[ec9a721](https://github.com/TaylanUB/scheme-bytestructures/commit/ec9a721957c17bcda13148f8faa5f06934431ff7)\n+and included in v1.1.0.\n+\n+TL;DR If you decided to use Guile v2.2, do not use `{scheme,guile}-bytestructures` v1.0.8 or v1.0.9.\n+\n+### Building and Installing Guix itself\n+\n+Start by cloning Guix:\n+\n+```\n+git clone https://git.savannah.gnu.org/git/guix.git\n+cd guix\n+```\n+\n+You will likely want to build the latest release, however, if the latest release\n+when you're reading this is still 1.2.0 then you may want to use 95aca29 instead\n+to avoid a problem in the GnuTLS test suite.\n+\n+```\n+git branch -a -l 'origin/version-*'  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+Bootstrap the build system:\n+```\n+./bootstrap\n+```\n+\n+Configure with the recommended `--localstatedir` flag:\n+```\n+./configure --localstatedir=/var\n+```\n+\n+Note: If you intend to hack on Guix in the future, you will need to supply the\n+same `--localstatedir=` flag for all future Guix `./configure` invocations. See\n+the last paragraph of this\n+[section](https://guix.gnu.org/manual/en/html_node/Requirements.html) for more\n+details.\n+\n+Build Guix (this will take a while):\n+```\n+make -j$(nproc)\n+```\n+\n+Install Guix:\n+\n+```\n+sudo make install\n+```\n+\n+##### Setting Up the Daemon\n+\n+###### Fixing `argv[0]`\n+\n+At this point, guix will be installed to `${bindir}`, which is likely\n+`/usr/local/bin` if you did not override directory variables at\n+`./configure`-time. More information on standard Automake directory variables\n+can be found\n+[here](https://www.gnu.org/software/automake/manual/html_node/Standard-Directory-Variables.html).\n+\n+However, the Guix init scripts and service configurations for Upstart, systemd,\n+SysV, and OpenRC are installed to launch\n+`${localstatedir}/guix/profiles/per-user/root/current-guix/bin/guix-daemon`,\n+which does not yet exist, and will only exist after `root` performs their first\n+`guix pull`.\n+\n+We need to create a `-original` version of these init scripts that's pointed to\n+binaries in `${bindir}` (normally, `/usr/local/bin`).\n+\n+Example for `systemd`, run as `root`:\n+\n+```sh\n+# Create guix-daemon-original.service by modifying guix-daemon.service\n+bindir=\"$(dirname $(command -v guix-daemon))\"\n+sed -E -e \"s|/\\S*/guix/profiles/per-user/root/current-guix/bin/guix-daemon|${bindir}/guix-daemon|\" /etc/systemd/system/guix-daemon.service > /etc/systemd/system/guix-daemon-original.service\n+chmod 664 /etc/systemd/system/guix-daemon-original.service\n+\n+# Make systemd recognize the new service\n+systemctl daemon-reload\n+\n+# Make sure that the non-working guix-daemon.service is stopped and disabled\n+systemctl stop guix-daemon\n+systemctl disable guix-daemon\n+\n+# Make sure that the working guix-daemon-original.service is started and enabled\n+systemctl enable guix-daemon-original\n+systemctl start guix-daemon-original\n+```\n+\n+###### Create guix-daemon users / groups\n+\n+Please see the [relevant\n+section](https://guix.gnu.org/manual/en/html_node/Build-Environment-Setup.html)\n+in the Guix Reference Manual for more details.\n+\n+## Optional setup\n+\n+At this point, you are set up to [use Guix to build bitcoin](). However, if you\n+want to polish your setup a bit and make it \"what Guix intended\", then read the\n+next few subsections.\n+\n+### Add an `/etc/profile.d` entry\n+\n+Although Guix knows how to update itself and its packages, it does so in a\n+non-invasive way (it does not modify `/usr/local/bin/guix`).\n+\n+Instead, it does the following:\n+\n+- After a `guix pull`, it updates\n+  `/var/guix/profiles/per-user/$USER/current-guix`, and creates a symlink\n+  targeting this directory at `$HOME/.config/guix/current`\n+\n+- After a `guix install`, it updates\n+  `/var/guix/profiles/per-user/$USER/guix-profile`, and creates a symlink\n+  targeting this directory at `$HOME/.guix-profile`\n+\n+Therefore, in order for these operations to effect your shell/desktop sessions\n+(and for the principle of least astonishment to hold), their corresponding\n+directories have to be added to well-known environment variables like `$PATH`,\n+`$INFOPATH`, `$XDG_DATA_DIRS`, etc.\n+\n+In other words, if `$HOME/.config/guix/current/bin` does not exist in your\n+`$PATH`, a `guix pull` will have no effect on what `guix` you are using. Same\n+goes for `$HOME/.guix-profile/bin`, `guix install`, and installed packages.\n+\n+Helpfully, after a `guix pull` or `guix install`, a message will be printed like\n+so:\n+\n+```\n+hint: Consider setting the necessary environment variables by running:\n+\n+     GUIX_PROFILE=\"$HOME/.guix-profile\"\n+     . \"$GUIX_PROFILE/etc/profile\"\n+\n+Alternately, see `guix package --search-paths -p \"$HOME/.guix-profile\"'.\n+```\n+\n+However, this is somewhat tedious to do for both `guix pull` and `guix install`\n+for each user on the system that wants to properly use `guix`. I recommend that\n+you instead add an entry to `/etc/profile.d` instead. This is done by default\n+when installing the Debian package later than 1.2.0-4 and when using the shell\n+script installer.\n+\n+Create `/etc/profile.d/guix.sh` with the following content:\n+```sh\n+# _GUIX_PROFILE: `guix pull` profile\n+_GUIX_PROFILE=\"$HOME/.config/guix/current\"\n+if [ -L $_GUIX_PROFILE ]; then\n+  export PATH=\"$_GUIX_PROFILE/bin${PATH:+:}$PATH\"\n+  # Export INFOPATH so that the updated info pages can be found\n+  # and read by both /usr/bin/info and/or $GUIX_PROFILE/bin/info\n+  # When INFOPATH is unset, add a trailing colon so that Emacs\n+  # searches 'Info-default-directory-list'.\n+  export INFOPATH=\"$_GUIX_PROFILE/share/info:$INFOPATH\"\n+fi\n+\n+# GUIX_PROFILE: User's default profile\n+GUIX_PROFILE=\"$HOME/.guix-profile\"\n+[ -L $GUIX_PROFILE ] || return\n+GUIX_LOCPATH=\"$GUIX_PROFILE/lib/locale\"\n+export GUIX_PROFILE GUIX_LOCPATH\n+\n+[ -f \"$GUIX_PROFILE/etc/profile\" ] && . \"$GUIX_PROFILE/etc/profile\"\n+\n+# set XDG_DATA_DIRS to include Guix installations\n+export XDG_DATA_DIRS=\"$GUIX_PROFILE/share:${XDG_DATA_DIRS:-/usr/local/share/:/usr/share/}\"\n+```\n+\n+Please note that this will not take effect until the next shell or desktop\n+session (log out and log back in).\n+\n+### `guix pull` as root\n+\n+Before you do this, you need to read [choose your security model]() and adjust\n+`guix` and `guix-daemon` flags according to your choice, as invoking `guix pull`\n+may pull substitutes from substitute servers (which you may not want).\n+\n+As mentioned in a previous section, Guix expects\n+`${localstatedir}/guix/profiles/per-user/root/current-guix` to be populated with\n+`root`'s Guix profile, `guix pull`-ed and built by some former version of Guix.\n+However, this is not the case when we build from source. Therefore, we need to\n+perform a `guix pull` as `root`:\n+\n+```sh\n+sudo --login guix pull --branch=version-<latest-release-version>\n+# or\n+sudo --login guix pull --commit=<particular-commit>\n+```\n+\n+`guix pull` is quite a long process (espcially if you're using",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r615297055",
      "id" : 615297055,
      "line" : 577,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTI5NzA1NQ==",
      "original_commit_id" : "57684eda890c01f9d188313b4012bcddfc8c1191",
      "original_line" : 577,
      "original_position" : 577,
      "original_start_line" : null,
      "path" : "contrib/guix/README.md",
      "position" : 577,
      "pull_request_review_id" : 638270471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-17T19:52:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615297055",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
         "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
         "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheCharlatan",
         "id" : 8421793,
         "login" : "TheCharlatan",
         "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
         "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
         "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
         "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheCharlatan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r615297288"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615297288"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: s/subsitutes/substitutes/",
      "commit_id" : "57684eda890c01f9d188313b4012bcddfc8c1191",
      "created_at" : "2021-04-17T19:49:00Z",
      "diff_hunk" : "@@ -9,79 +11,835 @@ downloads.\n \n We achieve bootstrappability by using Guix as a functional package manager.\n \n-## Requirements\n+# Requirements\n \n Conservatively, a x86_64 machine with:\n \n - 16GB of free disk space on the partition that /gnu/store will reside in\n - 8GB of free disk space per platform triple you're planning on building (see\n   the `HOSTS` environment variable description)\n \n-## Setup\n+# Installation and Setup\n+\n+At the time of writing, the latest Guix release is v1.2.0, which has a known\n+problems w/re building GnuTLS from source. Solutions and workarounds are\n+documented [here](), but I would recommend that you install v1.2.1 (planned for\n+release on April 18th, 2021) or later if your choice of installation option\n+allows.\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](#usage).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions]()\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section]()\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on distribution\n+5. Building **from source** [â¤ skip to section]()\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Option 1: Using the official shell installer script\n+\n+The shell installer script provided by the Guix maintainers automates the\n+download, installation, and initial configuration steps detailed\n+[here](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+To install Guix using this method, do the following as `root` (e.g. via `su -`):\n+\n+```sh\n+# Use /tmp as the working directory\n+cd /tmp\n+\n+# Download the script\n+wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n+\n+# Inspect the script\n+less guix-install.sh\n+\n+# Make the script executable\n+chmod +x guix-install.sh\n+\n+# Run the script\n+./guix-install.sh\n+```\n+\n+\n+## Option 2: Using the official binary tarball\n+\n+Follow the binary installation instructions step-by-step in the Guix Reference\n+Manual\n+[here](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+Ignore the note about using the shell installer script since that does not\n+apply. This is largely equivalent to maually performing what the shell installer\n+script does.\n+\n+## Option 3: TODO fanquake docker\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian/Ubuntu\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) (\"bullseye\") and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix) (Hirsute Hippo).\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+### Installing common build tools\n+\n+There are a few basic build tools that are required for most things we'll build,\n+so let's install them now:\n+\n+Text transformation/i18n:\n+- `autopoint` (sometimes packaged in `gettext`)\n+- `help2man`\n+- `po4a`\n+- `texinfo`\n+\n+Build system tools:\n+- `g++` w/ C++11 support\n+- `libtool`\n+- `autoconf`\n+- `automake`\n+- `pkg-config` (sometimes packaged as `pkgconf`)\n+- `make`\n+- `cmake`\n+\n+Miscellaneous:\n+- `git`\n+- `gnupg`\n+- `python3`\n+\n+### Building and Installing Guix's dependencies\n+\n+In order to build Guix itself from source, we need to first make sure that the\n+necessary dependencies are installed and discoverable. The most up-to-date list\n+of Guix's dependencies is kept in the [\"Requirements\"\n+section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n+Reference Manual.\n+\n+Depending on your distribution, most or all of these dependencies may already be\n+packaged and installable without manually building and installing.\n+\n+#### Guile\n+\n+##### Choosing a Guile version and sticking to it\n+\n+One of the first things you need to decide is which Guile version you want to\n+use: Guile v2.2 or Guile v3.0. Unlike the python2 to python3 transition, Guile\n+v2.2 and Guile v3.0 are largely compatible, as evidenced by the fact that most\n+Guile packages and even [Guix\n+itself](https://guix.gnu.org/en/blog/2020/guile-3-and-guix/) support running on\n+both.\n+\n+What is important here is that you **choose one**, and you **remain consistent**\n+with your choice throughout **all Guile-related packages**, no matter if they\n+are installed via the distribution's package manager or installed from source.\n+This is because the files for Guile packages are installed to directories which\n+are separated based on the Guile version.\n+\n+###### Example: Checking that Ubuntu's `guile-git` is compatible with your chosen Guile version\n+\n+On Ubuntu Focal:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-2.2, guile-bytestructures, libgit2-dev\n+...\n+```\n+\n+As you can see, the package `guile-git` depends on `guile-2.2`, meaning that it\n+was likely built for Guile v2.2. This means that if you decided to use Guile\n+v3.0 on Ubuntu Focal, you would need to build guile-git from source instead of\n+using the distribution package.\n+\n+On Ubuntu Hirsute:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-3.0 | guile-2.2, guile-bytestructures (>= 1.0.7-3~), libgit2-dev (>= 1.0)\n+...\n+```\n+\n+In this case, `guile-git` depends on either `guile-3.0` or `guile-2.2`, meaning\n+that it would work no matter what Guile version you decided to use.\n+\n+###### Corner case: Multiple versions of Guile on one system\n+\n+It is recommended to only install one version of Guile, so that build systems do\n+not get confused about which Guile to use.\n+\n+However, if you insist on having both Guile v2.2 and Guile v3.0 installed on\n+your system, then you need to **consistently** specify one of\n+`GUILE_EFFECTIVE_VERSION=3.0` or `GUILE_EFFECTIVE_VERSION=2.2` to all\n+`./configure` invocations for Guix and its dependencies.\n+\n+##### Installing Guile\n+\n+Guile is most likely already packaged for your distribution, so after you have\n+[chosen a Guile version](), install it via your distribution's package manager.\n+\n+If your distribution splits packages into `-dev`-suffixed and\n+non-`-dev`-suffixed sub-packages (as is the case for debian-derived\n+distributions), please make sure to install both. For example, to install Guile\n+v2.2 on Debian/Ubuntu:\n+\n+```sh\n+apt install guile-2.2 guile-2.2-dev\n+```\n+\n+#### Mixing distribution packages and source-built packages\n+\n+At the time of writing, most distributions have _some_ of Guix's dependencies\n+packaged, but not all. This means that you may want to install the distribution\n+package for some dependencies, and manually build-from-source for others.\n+\n+Distribution packages usually install to `/usr`, which is different from the\n+default `./configure` prefix of source-built packages: `/usr/local`.\n+\n+This means that if you mix-and-match distribution packages and source-built\n+packages and do not specify exactly `--prefix=/usr` to `./configure` for\n+source-built packages, you will need to augment the `GUILE_LOAD_PATH` and\n+`GUILE_LOAD_COMPILED_PATH` environment variables so that Guile will look\n+under the right prefix and find your source-built packages.\n+\n+For example, if you are using Guile v2.2, and have Guile packages in the\n+`/usr/local` prefix, either add the following lines to your `.profile` or\n+`.bash_profile` so that the environment variable is properly set for all future\n+shell logins, or paste the lines into a POSIX-style shell to temporarily modify\n+the environment variables of your current shell session.\n+\n+```sh\n+# Help Guile v2.2.x find packages in /usr/local\n+export GUILE_LOAD_PATH=\"/usr/local/share/guile/site/2.2${GUILE_LOAD_PATH:+:}$GUILE_LOAD_PATH\"\n+export GUILE_LOAD_COMPILED_PATH=\"/usr/local/lib/guile/2.2/site-ccache${GUILE_LOAD_COMPILED_PATH:+:}$GUILE_COMPILED_LOAD_PATH\"\n+```\n+\n+Note that these environment variables are used to check for packages during\n+`./configure`, so they should be set as soon as possible should you want to use\n+a prefix other than `/usr`.\n+\n+<!-- ##### Example: Consistently using Guile 3.0 on Ubuntu -->\n+\n+<!-- For example, on Ubuntu, if you choose to use Guile 3.0 and install the -->\n+<!-- `guile-3.0` package, you want to make sure that if you also want to install the -->\n+<!-- `guile-git` package with `apt` that said `guile-git` package was built for Guile -->\n+<!-- v3.0. This can be checked by invoking the following: -->\n+\n+<!-- ``` -->\n+<!-- apt update -->\n+<!-- apt show guile-git -->\n+<!-- ``` -->\n+\n+#### Building and installing source-built packages\n+\n+*A few dependencies have non-obvious quirks/erratas which are documented in the\n+sub-sections immediately below. Please read these sections before proceeding to\n+build and install these packages.*\n+\n+Although you should always refer to the README or INSTALL files for the most\n+accurate information, most of these dependencies use autoconf-style build\n+systems (check if there's a `configure.ac` file), and will likely do the right\n+thing with this simple routine:\n+\n+```sh\n+git clone <git-repo-of-dependency>/<dependency>.git\n+cd <dependency>\n+git tag -l  # check for the latest release\n+git checkout <latest-release>\n+\n+autoreconf -vfi\n+./configure --prefix=<prefix>\n+make\n+sudo make install\n+```\n+\n+If you choose not to specify exactly `--prefix=/usr` to `./configure`, please\n+make sure you've carefully read the [previous section] on mixing distribution\n+packages and source-built packages.\n+\n+##### Binding packages require `-dev`-suffixed packages\n+\n+Relevant for:\n+- Everyone\n+\n+When building bindings, the `-dev`-suffixed version of the original package\n+needs to be installed. For example, building `Guile-zlib` requires that a\n+debian-derived distribution has `zlib1g-dev` installed.\n+\n+When using bindings, the `-dev`-suffixed version of the original package still\n+needs to be installed. This is particularly problematic when distribution\n+packages are mispackaged like `guile-sqlite3` is in Ubuntu Focal such that\n+installing `guile-sqlite3` does not automatically install `libsqlite3-dev` as a\n+dependency.\n+\n+Below is a list of relevant Guile bindings and their corresponding `-dev`\n+packages in Debian at the time of writing.\n+\n+| Guile binding package | -dev Debian package |\n+|-----------------------|---------------------|\n+| guile-gcrypt          | libgcrypt-dev       |\n+| guile-git             | libgit2-dev         |\n+| guile-lzlib           | liblz-dev           |\n+| guile-ssh             | libssh-dev          |\n+| guile-sqlite3         | libsqlite3-dev      |\n+| guile-zlib            | zlib1g-dev          |\n+\n+##### `guile-git` actually depends on `libgit2 >= 1.1`\n+\n+Relevant for:\n+- Those building `guile-git` from source against `libgit2 < 1.1`\n+- Those installing `guile-git` from their distribution where `guile-git` is\n+  built against `libgit2 < 1.1`\n+\n+As of v0.4.0, `guile-git` claims to only require `libgit2 >= 0.28.0`, however,\n+it actually requires `libgit2 >= 1.1`, otherwise, it will be confused by a\n+reference of `origin/keyring`: instead of interpreting the reference as \"the\n+'keyring' branch of the 'origin' remote\", the reference is interpreted as \"the\n+branch literally named 'origin/keyring'\"\n+\n+This is especially notable because Ubuntu Focal packages `libgit2 v0.28.4`, and\n+`guile-git` is built against it.\n+\n+Should you be in this situation, you need to build both `libgit2 v1.1.x` and\n+`guile-git` from source.\n+\n+Source: http://logs.guix.gnu.org/guix/2020-11-12.log#232527\n+\n+##### `{scheme,guile}-bytestructures` v1.0.8 and v1.0.9 are broken for Guile v2.2\n+\n+Relevant for:\n+- Those building `{scheme,guile}-bytestructures` from source against Guile v2.2\n+\n+Commit\n+[707eea3](https://github.com/TaylanUB/scheme-bytestructures/commit/707eea3a85e1e375e86702229ebf73d496377669)\n+introduced a regression for Guile v2.2 and was first included in v1.0.8, this\n+was later corrected in commit\n+[ec9a721](https://github.com/TaylanUB/scheme-bytestructures/commit/ec9a721957c17bcda13148f8faa5f06934431ff7)\n+and included in v1.1.0.\n+\n+TL;DR If you decided to use Guile v2.2, do not use `{scheme,guile}-bytestructures` v1.0.8 or v1.0.9.\n+\n+### Building and Installing Guix itself\n+\n+Start by cloning Guix:\n+\n+```\n+git clone https://git.savannah.gnu.org/git/guix.git\n+cd guix\n+```\n+\n+You will likely want to build the latest release, however, if the latest release\n+when you're reading this is still 1.2.0 then you may want to use 95aca29 instead\n+to avoid a problem in the GnuTLS test suite.\n+\n+```\n+git branch -a -l 'origin/version-*'  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+Bootstrap the build system:\n+```\n+./bootstrap\n+```\n+\n+Configure with the recommended `--localstatedir` flag:\n+```\n+./configure --localstatedir=/var\n+```\n+\n+Note: If you intend to hack on Guix in the future, you will need to supply the\n+same `--localstatedir=` flag for all future Guix `./configure` invocations. See\n+the last paragraph of this\n+[section](https://guix.gnu.org/manual/en/html_node/Requirements.html) for more\n+details.\n+\n+Build Guix (this will take a while):\n+```\n+make -j$(nproc)\n+```\n+\n+Install Guix:\n+\n+```\n+sudo make install\n+```\n+\n+##### Setting Up the Daemon\n+\n+###### Fixing `argv[0]`\n+\n+At this point, guix will be installed to `${bindir}`, which is likely\n+`/usr/local/bin` if you did not override directory variables at\n+`./configure`-time. More information on standard Automake directory variables\n+can be found\n+[here](https://www.gnu.org/software/automake/manual/html_node/Standard-Directory-Variables.html).\n+\n+However, the Guix init scripts and service configurations for Upstart, systemd,\n+SysV, and OpenRC are installed to launch\n+`${localstatedir}/guix/profiles/per-user/root/current-guix/bin/guix-daemon`,\n+which does not yet exist, and will only exist after `root` performs their first\n+`guix pull`.\n+\n+We need to create a `-original` version of these init scripts that's pointed to\n+binaries in `${bindir}` (normally, `/usr/local/bin`).\n+\n+Example for `systemd`, run as `root`:\n+\n+```sh\n+# Create guix-daemon-original.service by modifying guix-daemon.service\n+bindir=\"$(dirname $(command -v guix-daemon))\"\n+sed -E -e \"s|/\\S*/guix/profiles/per-user/root/current-guix/bin/guix-daemon|${bindir}/guix-daemon|\" /etc/systemd/system/guix-daemon.service > /etc/systemd/system/guix-daemon-original.service\n+chmod 664 /etc/systemd/system/guix-daemon-original.service\n+\n+# Make systemd recognize the new service\n+systemctl daemon-reload\n+\n+# Make sure that the non-working guix-daemon.service is stopped and disabled\n+systemctl stop guix-daemon\n+systemctl disable guix-daemon\n+\n+# Make sure that the working guix-daemon-original.service is started and enabled\n+systemctl enable guix-daemon-original\n+systemctl start guix-daemon-original\n+```\n+\n+###### Create guix-daemon users / groups\n+\n+Please see the [relevant\n+section](https://guix.gnu.org/manual/en/html_node/Build-Environment-Setup.html)\n+in the Guix Reference Manual for more details.\n+\n+## Optional setup\n+\n+At this point, you are set up to [use Guix to build bitcoin](). However, if you\n+want to polish your setup a bit and make it \"what Guix intended\", then read the\n+next few subsections.\n+\n+### Add an `/etc/profile.d` entry\n+\n+Although Guix knows how to update itself and its packages, it does so in a\n+non-invasive way (it does not modify `/usr/local/bin/guix`).\n+\n+Instead, it does the following:\n+\n+- After a `guix pull`, it updates\n+  `/var/guix/profiles/per-user/$USER/current-guix`, and creates a symlink\n+  targeting this directory at `$HOME/.config/guix/current`\n+\n+- After a `guix install`, it updates\n+  `/var/guix/profiles/per-user/$USER/guix-profile`, and creates a symlink\n+  targeting this directory at `$HOME/.guix-profile`\n+\n+Therefore, in order for these operations to effect your shell/desktop sessions\n+(and for the principle of least astonishment to hold), their corresponding\n+directories have to be added to well-known environment variables like `$PATH`,\n+`$INFOPATH`, `$XDG_DATA_DIRS`, etc.\n+\n+In other words, if `$HOME/.config/guix/current/bin` does not exist in your\n+`$PATH`, a `guix pull` will have no effect on what `guix` you are using. Same\n+goes for `$HOME/.guix-profile/bin`, `guix install`, and installed packages.\n+\n+Helpfully, after a `guix pull` or `guix install`, a message will be printed like\n+so:\n+\n+```\n+hint: Consider setting the necessary environment variables by running:\n+\n+     GUIX_PROFILE=\"$HOME/.guix-profile\"\n+     . \"$GUIX_PROFILE/etc/profile\"\n+\n+Alternately, see `guix package --search-paths -p \"$HOME/.guix-profile\"'.\n+```\n+\n+However, this is somewhat tedious to do for both `guix pull` and `guix install`\n+for each user on the system that wants to properly use `guix`. I recommend that\n+you instead add an entry to `/etc/profile.d` instead. This is done by default\n+when installing the Debian package later than 1.2.0-4 and when using the shell\n+script installer.\n+\n+Create `/etc/profile.d/guix.sh` with the following content:\n+```sh\n+# _GUIX_PROFILE: `guix pull` profile\n+_GUIX_PROFILE=\"$HOME/.config/guix/current\"\n+if [ -L $_GUIX_PROFILE ]; then\n+  export PATH=\"$_GUIX_PROFILE/bin${PATH:+:}$PATH\"\n+  # Export INFOPATH so that the updated info pages can be found\n+  # and read by both /usr/bin/info and/or $GUIX_PROFILE/bin/info\n+  # When INFOPATH is unset, add a trailing colon so that Emacs\n+  # searches 'Info-default-directory-list'.\n+  export INFOPATH=\"$_GUIX_PROFILE/share/info:$INFOPATH\"\n+fi\n+\n+# GUIX_PROFILE: User's default profile\n+GUIX_PROFILE=\"$HOME/.guix-profile\"\n+[ -L $GUIX_PROFILE ] || return\n+GUIX_LOCPATH=\"$GUIX_PROFILE/lib/locale\"\n+export GUIX_PROFILE GUIX_LOCPATH\n+\n+[ -f \"$GUIX_PROFILE/etc/profile\" ] && . \"$GUIX_PROFILE/etc/profile\"\n+\n+# set XDG_DATA_DIRS to include Guix installations\n+export XDG_DATA_DIRS=\"$GUIX_PROFILE/share:${XDG_DATA_DIRS:-/usr/local/share/:/usr/share/}\"\n+```\n+\n+Please note that this will not take effect until the next shell or desktop\n+session (log out and log back in).\n+\n+### `guix pull` as root\n+\n+Before you do this, you need to read [choose your security model]() and adjust\n+`guix` and `guix-daemon` flags according to your choice, as invoking `guix pull`\n+may pull substitutes from substitute servers (which you may not want).\n+\n+As mentioned in a previous section, Guix expects\n+`${localstatedir}/guix/profiles/per-user/root/current-guix` to be populated with\n+`root`'s Guix profile, `guix pull`-ed and built by some former version of Guix.\n+However, this is not the case when we build from source. Therefore, we need to\n+perform a `guix pull` as `root`:\n+\n+```sh\n+sudo --login guix pull --branch=version-<latest-release-version>\n+# or\n+sudo --login guix pull --commit=<particular-commit>\n+```\n+\n+`guix pull` is quite a long process (espcially if you're using\n+`--no-substitute`). If you encounter build problems, please refer to the\n+[troubleshooting section]().\n+\n+Note that running a bare `guix pull` with no commit or branch specified will\n+pull the latest commit on Guix's master branch, which is likely fine, but not\n+recommended.\n+\n+If you installed Guix from source, you may get an error like the following:\n+```sh\n+error: while creating symlink '/root/.config/guix/current' No such file or directory\n+```\n+To resolve this, simply:\n+```\n+sudo mkdir -p /root/.config/guix\n+```\n+Then try the `guix pull` command again.\n+\n+After the `guix pull` finishes successfully,\n+`${localstatedir}/guix/profiles/per-user/root/current-guix` should be populated.\n+\n+### Restarting the daemon\n+\n+If you built Guix from source and followed the instructions for [fixing argv\\[0\\]](), you can\n+now do the following:\n+\n+```sh\n+systemctl stop guix-daemon-original\n+systemctl disable guix-daemon-original\n+\n+systemctl enable guix-daemon\n+systemctl start guix-daemon\n+```\n+\n+Otherwise, simply do:\n \n-### Installing Guix\n+```sh\n+systemctl restart guix-daemon\n+```\n+\n+### Checking everything\n+\n+If you followed all the steps above to make your Guix setup \"prim and proper,\"\n+you can check that you did everything properly by running through this\n+checklist.\n+\n+1. `/etc/profile.d/guix.sh` should exist and be sourced at each shell login\n \n-If you're just testing this out, you can use the\n-[Dockerfile][fanquake/guix-docker] for convenience. It automatically speeds up\n-your builds by [using substitutes](#speeding-up-builds-with-substitute-servers).\n-If you don't want this behaviour, refer to the [next\n-section](#choosing-your-security-model).\n+2. `guix describe` should not print `guix describe: error: failed to determine\n+   origin`, but rather something like:\n \n-Otherwise, follow the [Guix installation guide][guix/bin-install].\n+   ```\n+   Generation 38   Feb 22 2021 16:39:31    (current)\n+     guix f350df4\n+       repository URL: https://git.savannah.gnu.org/git/guix.git\n+       branch: version-1.2.0\n+       commit: f350df405fbcd5b9e27e6b6aa500da7f101f41e7\n+   ```\n \n-> Note: For those who like to keep their filesystems clean, Guix is designed to\n-> be very standalone and _will not_ conflict with your system's package\n-> manager/existing setup. It _only_ touches `/var/guix`, `/gnu`, and\n-> `~/.config/guix`.\n+3. `guix-daemon` should be running from `${localstatedir}/guix/profiles/per-user/root/current-guix`\n \n-### Choosing your security model\n+\n+# Choosing your security model\n+\n+No matter how you installed Guix, you need to now decide on your security model\n+for building packages with Guix.\n \n Guix allows us to achieve better binary security by using our CPU time to build\n everything from scratch. However, it doesn't sacrifice user choice in pursuit of\n-this: users can decide whether or not to bootstrap and to use substitutes\n-(pre-built packages).\n+this: users can decide whether or not to use substitutes (pre-built packages).\n+\n+## Option 1: Building with substitutes\n+\n+### Step 1: Authorize the signing keys\n+\n+Depending on the installation procedure you followed, you may have already\n+authorized the Guix build farm key. In particular, the official shell installer\n+script asks you if you want the key installed, and the debian distribution\n+package authorized the key during installation.\n+\n+You can check the current list of authorized keys at `/etc/guix/acl`.\n+\n+At the time of writing, a `/etc/guix/acl` with just the Guix build farm key\n+authorized looks something like:\n+```lisp\n+(acl\n+ (entry\n+  (public-key\n+   (ecc\n+    (curve Ed25519)\n+    (q #8D156F295D24B0D9A86FA5741A840FF2D24F60F7B6C4134814AD55625971B394#)\n+    )\n+   )\n+  (tag\n+   (guix import)\n+   )\n+  )\n+ )\n+```\n \n-After installation, you may want to consider [adding substitute\n-servers](#speeding-up-builds-with-substitute-servers) from which to download\n-pre-built packages to speed up your build if that fits your security model (say,\n-if you're just testing that this works). Substitute servers are set up by\n-default if you're using the [Dockerfile][fanquake/guix-docker].\n+If you've determined that the official Guix build farm key hasn't been\n+authorized, and you would like to authorize it, run the following as root:\n+\n+```\n+guix archive --authorize < /var/guix/profiles/per-user/root/current-guix/share/guix/ci.guix.gnu.org.pub\n+```\n+\n+If\n+`/var/guix/profiles/per-user/root/current-guix/share/guix/ci.guix.gnu.org.pub`\n+doesn't exist, try:\n+\n+```sh\n+guix archive --authorize < <PREFIX>/share/guix/ci.guix.gnu.org.pub\n+```\n+\n+Where <PREFIX> is likely:\n+- `/usr` if you installed from a distribution package\n+- `/usr/local` if you installed Guix from source and didn't supply any\n+  prefix-modifying flags to Guix's `./configure`\n+\n+For dongcarl's substitute server at https://guix.carldong.io, run as root:\n+\n+```sh\n+wget -qO- 'https://guix.carldong.io/signing-key.pub' | guix archive --authorize\n+```\n+\n+### Step 2: Specify the substitute servers\n+\n+Once its key is authorized, the official Guix build farm at\n+https://ci.guix.gnu.org is automatically used unless the `--no-substitutes` flag\n+is supplied. This behaviour is overridable. See examples below for the various\n+ways of adding dongcarl's substitute server after having [authorized his signing\n+key](#authorize-the-signing-keys).\n+\n+Change the default list of substitute servers by starting `guix-daemon` with the\n+`--substitute-urls` option:\n+```\n+guix <cmd> --substitute-urls=\"https://guix.carldong.io https://ci.guix.gnu.org\"\n+```\n+\n+Override the default list of substitute servers by passing the\n+`--substitute-urls` option for invocations of `guix` commands:\n+```\n+guix <cmd> --substitute-urls=\"https://guix.carldong.io https://ci.guix.gnu.org\"\n+```\n+\n+For scripts under `./contrib/guix`, set the `SUBSTITUTE_URLS` environment\n+variable:\n+```\n+export SUBSTITUTE_URLS='https://guix.carldong.io https://ci.guix.gnu.org'\n+```\n+\n+## Option 2: Disabling subsitutes on an ad-hoc basis",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r615297288",
      "id" : 615297288,
      "line" : 729,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTI5NzI4OA==",
      "original_commit_id" : "57684eda890c01f9d188313b4012bcddfc8c1191",
      "original_line" : 729,
      "original_position" : 748,
      "original_start_line" : null,
      "path" : "contrib/guix/README.md",
      "position" : 748,
      "pull_request_review_id" : 638270471,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-17T19:52:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615297288",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8421793?v=4",
         "events_url" : "https://api.github.com/users/TheCharlatan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheCharlatan/followers",
         "following_url" : "https://api.github.com/users/TheCharlatan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheCharlatan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheCharlatan",
         "id" : 8421793,
         "login" : "TheCharlatan",
         "node_id" : "MDQ6VXNlcjg0MjE3OTM=",
         "organizations_url" : "https://api.github.com/users/TheCharlatan/orgs",
         "received_events_url" : "https://api.github.com/users/TheCharlatan/received_events",
         "repos_url" : "https://api.github.com/users/TheCharlatan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheCharlatan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheCharlatan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheCharlatan"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@dongcarl can you rebase this and address the current batch of comments?",
      "created_at" : "2021-06-17T05:11:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#issuecomment-862930855",
      "id" : 862930855,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MjkzMDg1NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-17T05:11:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862930855",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Pushed 57684eda89...5ae2760f61\r\n- Rebased over master\r\n- Addressed https://github.com/bitcoin/bitcoin/pull/21711#pullrequestreview-638195828, https://github.com/bitcoin/bitcoin/pull/21711#pullrequestreview-638270471\r\n",
      "created_at" : "2021-06-17T22:07:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#issuecomment-863594271",
      "id" : 863594271,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MzU5NDI3MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-17T22:07:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/863594271",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22418 by fanquake\n* #21851 by fanquake\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-06-18T02:21:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#issuecomment-863705564",
      "id" : 863705564,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MzcwNTU2NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-09T04:43:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/863705564",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Shouldn't this also update `release-process.md`?",
      "created_at" : "2021-06-18T06:22:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#issuecomment-863788905",
      "id" : 863788905,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2Mzc4ODkwNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-18T06:22:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/863788905",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r654651996"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654651996"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 5ae2760f614c0872a2289574477543070243e236 \"guix: Overhaul README\"\r\n\r\nLatest release is 1.3.0 which fixes the GnuTLS issue, so I think this paragraph is no longer needed.",
      "commit_id" : "5ae2760f614c0872a2289574477543070243e236",
      "created_at" : "2021-06-18T20:00:03Z",
      "diff_hunk" : "@@ -9,79 +11,835 @@ downloads.\n \n We achieve bootstrappability by using Guix as a functional package manager.\n \n-## Requirements\n+# Requirements\n \n Conservatively, a x86_64 machine with:\n \n - 16GB of free disk space on the partition that /gnu/store will reside in\n - 8GB of free disk space per platform triple you're planning on building (see\n   the `HOSTS` environment variable description)\n \n-## Setup\n+# Installation and Setup\n+\n+At the time of writing, the latest Guix release is v1.2.0, which has a known",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r654651996",
      "id" : 654651996,
      "line" : 24,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NDY1MTk5Ng==",
      "original_commit_id" : "5ae2760f614c0872a2289574477543070243e236",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "contrib/guix/README.md",
      "position" : 24,
      "pull_request_review_id" : 687696205,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-18T20:07:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/654651996",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r662671824"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/662671824"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think we should list the systems that have a guix package available. This will quickly diverge from reality. For example, a quick search shows openSuse should be added to the list: https://software.opensuse.org/package/guix",
      "commit_id" : "5ae2760f614c0872a2289574477543070243e236",
      "created_at" : "2021-07-02T01:00:46Z",
      "diff_hunk" : "@@ -9,79 +11,835 @@ downloads.\n \n We achieve bootstrappability by using Guix as a functional package manager.\n \n-## Requirements\n+# Requirements\n \n Conservatively, a x86_64 machine with:\n \n - 16GB of free disk space on the partition that /gnu/store will reside in\n - 8GB of free disk space per platform triple you're planning on building (see\n   the `HOSTS` environment variable description)\n \n-## Setup\n+# Installation and Setup\n+\n+At the time of writing, the latest Guix release is v1.2.0, which has a known\n+problems w/re building GnuTLS from source. Solutions and workarounds are\n+documented [here](), but I would recommend that you install v1.2.1 (planned for\n+release on April 18th, 2021) or later if your choice of installation option\n+allows.\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](#usage).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions]()\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section]()\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r662671824",
      "id" : 662671824,
      "line" : 57,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjY3MTgyNA==",
      "original_commit_id" : "5ae2760f614c0872a2289574477543070243e236",
      "original_line" : 57,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "contrib/guix/README.md",
      "position" : 57,
      "pull_request_review_id" : 697749991,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-02T01:10:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/662671824",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23396902?v=4",
         "events_url" : "https://api.github.com/users/jarolrod/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jarolrod/followers",
         "following_url" : "https://api.github.com/users/jarolrod/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jarolrod/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jarolrod",
         "id" : 23396902,
         "login" : "jarolrod",
         "node_id" : "MDQ6VXNlcjIzMzk2OTAy",
         "organizations_url" : "https://api.github.com/users/jarolrod/orgs",
         "received_events_url" : "https://api.github.com/users/jarolrod/received_events",
         "repos_url" : "https://api.github.com/users/jarolrod/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jarolrod/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jarolrod"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r662673945"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/662673945"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This link contains the instructions that are found in section `Option 1: Using the official shell installer script`. \r\n\r\nSeems as though this section and the first (Option 1 & 2) can be condensed in some way.\r\n\r\nFor `Option 1`, i don't like that we are re-writing the instructions when we could just point to this section of the mentioned link:\r\n![guix-install-script](https://user-images.githubusercontent.com/23396902/124206049-87a88680-dab0-11eb-865b-aa4d0bbc3f11.png)",
      "commit_id" : "5ae2760f614c0872a2289574477543070243e236",
      "created_at" : "2021-07-02T01:09:15Z",
      "diff_hunk" : "@@ -9,79 +11,835 @@ downloads.\n \n We achieve bootstrappability by using Guix as a functional package manager.\n \n-## Requirements\n+# Requirements\n \n Conservatively, a x86_64 machine with:\n \n - 16GB of free disk space on the partition that /gnu/store will reside in\n - 8GB of free disk space per platform triple you're planning on building (see\n   the `HOSTS` environment variable description)\n \n-## Setup\n+# Installation and Setup\n+\n+At the time of writing, the latest Guix release is v1.2.0, which has a known\n+problems w/re building GnuTLS from source. Solutions and workarounds are\n+documented [here](), but I would recommend that you install v1.2.1 (planned for\n+release on April 18th, 2021) or later if your choice of installation option\n+allows.\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](#usage).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions]()\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section]()\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on distribution\n+5. Building **from source** [â¤ skip to section]()\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Option 1: Using the official shell installer script\n+\n+The shell installer script provided by the Guix maintainers automates the\n+download, installation, and initial configuration steps detailed\n+[here](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+To install Guix using this method, do the following as `root` (e.g. via `su -`):\n+\n+```sh\n+# Use /tmp as the working directory\n+cd /tmp\n+\n+# Download the script\n+wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n+\n+# Inspect the script\n+less guix-install.sh\n+\n+# Make the script executable\n+chmod +x guix-install.sh\n+\n+# Run the script\n+./guix-install.sh\n+```\n+\n+\n+## Option 2: Using the official binary tarball\n+\n+Follow the binary installation instructions step-by-step in the Guix Reference\n+Manual\n+[here](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r662673945",
      "id" : 662673945,
      "line" : 100,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjY3Mzk0NQ==",
      "original_commit_id" : "5ae2760f614c0872a2289574477543070243e236",
      "original_line" : 100,
      "original_position" : 100,
      "original_start_line" : null,
      "path" : "contrib/guix/README.md",
      "position" : 100,
      "pull_request_review_id" : 697749991,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-02T01:10:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/662673945",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23396902?v=4",
         "events_url" : "https://api.github.com/users/jarolrod/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jarolrod/followers",
         "following_url" : "https://api.github.com/users/jarolrod/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jarolrod/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jarolrod",
         "id" : 23396902,
         "login" : "jarolrod",
         "node_id" : "MDQ6VXNlcjIzMzk2OTAy",
         "organizations_url" : "https://api.github.com/users/jarolrod/orgs",
         "received_events_url" : "https://api.github.com/users/jarolrod/received_events",
         "repos_url" : "https://api.github.com/users/jarolrod/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jarolrod/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jarolrod"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r663286051"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/663286051"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I do think that we can give facts \"at time of writing,\" sometimes it's better than nothing. However, in this particular case, perhaps we can simply link to https://repology.org/project/guix/versions ?",
      "commit_id" : "33fe784fe5f89f5b0dd2f9343338841ea78e4920",
      "created_at" : "2021-07-02T23:47:27Z",
      "diff_hunk" : "@@ -9,79 +11,835 @@ downloads.\n \n We achieve bootstrappability by using Guix as a functional package manager.\n \n-## Requirements\n+# Requirements\n \n Conservatively, a x86_64 machine with:\n \n - 16GB of free disk space on the partition that /gnu/store will reside in\n - 8GB of free disk space per platform triple you're planning on building (see\n   the `HOSTS` environment variable description)\n \n-## Setup\n+# Installation and Setup\n+\n+At the time of writing, the latest Guix release is v1.2.0, which has a known\n+problems w/re building GnuTLS from source. Solutions and workarounds are\n+documented [here](), but I would recommend that you install v1.2.1 (planned for\n+release on April 18th, 2021) or later if your choice of installation option\n+allows.\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](#usage).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions]()\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section]()\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r663286051",
      "id" : 663286051,
      "in_reply_to_id" : 662671824,
      "line" : 51,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzI4NjA1MQ==",
      "original_commit_id" : "5ae2760f614c0872a2289574477543070243e236",
      "original_line" : 57,
      "original_position" : 57,
      "original_start_line" : null,
      "path" : "contrib/guix/README.md",
      "position" : 51,
      "pull_request_review_id" : 698542917,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-02T23:47:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/663286051",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r663286835"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/663286835"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "You're right, I'm not too happy with the current situation either... Will fix! Clearer = better",
      "commit_id" : "33fe784fe5f89f5b0dd2f9343338841ea78e4920",
      "created_at" : "2021-07-02T23:51:59Z",
      "diff_hunk" : "@@ -9,79 +11,835 @@ downloads.\n \n We achieve bootstrappability by using Guix as a functional package manager.\n \n-## Requirements\n+# Requirements\n \n Conservatively, a x86_64 machine with:\n \n - 16GB of free disk space on the partition that /gnu/store will reside in\n - 8GB of free disk space per platform triple you're planning on building (see\n   the `HOSTS` environment variable description)\n \n-## Setup\n+# Installation and Setup\n+\n+At the time of writing, the latest Guix release is v1.2.0, which has a known\n+problems w/re building GnuTLS from source. Solutions and workarounds are\n+documented [here](), but I would recommend that you install v1.2.1 (planned for\n+release on April 18th, 2021) or later if your choice of installation option\n+allows.\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](#usage).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions]()\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section]()\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on distribution\n+5. Building **from source** [â¤ skip to section]()\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Option 1: Using the official shell installer script\n+\n+The shell installer script provided by the Guix maintainers automates the\n+download, installation, and initial configuration steps detailed\n+[here](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+To install Guix using this method, do the following as `root` (e.g. via `su -`):\n+\n+```sh\n+# Use /tmp as the working directory\n+cd /tmp\n+\n+# Download the script\n+wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n+\n+# Inspect the script\n+less guix-install.sh\n+\n+# Make the script executable\n+chmod +x guix-install.sh\n+\n+# Run the script\n+./guix-install.sh\n+```\n+\n+\n+## Option 2: Using the official binary tarball\n+\n+Follow the binary installation instructions step-by-step in the Guix Reference\n+Manual\n+[here](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r663286835",
      "id" : 663286835,
      "in_reply_to_id" : 662673945,
      "line" : 94,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzI4NjgzNQ==",
      "original_commit_id" : "5ae2760f614c0872a2289574477543070243e236",
      "original_line" : 100,
      "original_position" : 100,
      "original_start_line" : null,
      "path" : "contrib/guix/README.md",
      "position" : 94,
      "pull_request_review_id" : 698543647,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-02T23:52:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/663286835",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The documentation is very close to being done, just some final polishing and making the links work. Please let me know if I'm missing any crucial details!",
      "created_at" : "2021-07-06T18:52:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#issuecomment-875003055",
      "id" : 875003055,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg3NTAwMzA1NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-06T18:52:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/875003055",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r664932122"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/664932122"
         }
      },
      "author_association" : "MEMBER",
      "body" : "commit 1e3f8d6e23bf1deb27af762e73e9666f8785e62d can really be broken off into its own and focused PR",
      "commit_id" : "d66c110f9415114f03bd0fb3f7f59505bc11532f",
      "created_at" : "2021-07-06T23:10:00Z",
      "diff_hunk" : "@@ -18,7 +18,7 @@ source \"$(dirname \"${BASH_SOURCE[0]}\")/libexec/prelude.bash\"\n # Required non-builtin commands should be invocable\n ################\n \n-check_tools cat mkdir make git guix\n+check_tools cat mkdir make getent git guix",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r664932122",
      "id" : 664932122,
      "line" : 21,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDkzMjEyMg==",
      "original_commit_id" : "d66c110f9415114f03bd0fb3f7f59505bc11532f",
      "original_line" : 21,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "contrib/guix/guix-build",
      "position" : 5,
      "pull_request_review_id" : 700448987,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-07T00:45:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/664932122",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23396902?v=4",
         "events_url" : "https://api.github.com/users/jarolrod/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jarolrod/followers",
         "following_url" : "https://api.github.com/users/jarolrod/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jarolrod/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jarolrod",
         "id" : 23396902,
         "login" : "jarolrod",
         "node_id" : "MDQ6VXNlcjIzMzk2OTAy",
         "organizations_url" : "https://api.github.com/users/jarolrod/orgs",
         "received_events_url" : "https://api.github.com/users/jarolrod/received_events",
         "repos_url" : "https://api.github.com/users/jarolrod/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jarolrod/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jarolrod"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r664940455"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/664940455"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit ð¯\r\n```suggestion\r\n   - Source or binary installation depending on the distribution\r\n```",
      "commit_id" : "d66c110f9415114f03bd0fb3f7f59505bc11532f",
      "created_at" : "2021-07-06T23:34:38Z",
      "diff_hunk" : "@@ -0,0 +1,679 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions]()\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section]()\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on distribution",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r664940455",
      "id" : 664940455,
      "line" : 35,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDk0MDQ1NQ==",
      "original_commit_id" : "d66c110f9415114f03bd0fb3f7f59505bc11532f",
      "original_line" : 35,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 35,
      "pull_request_review_id" : 700448987,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-07T00:45:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/664940455",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23396902?v=4",
         "events_url" : "https://api.github.com/users/jarolrod/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jarolrod/followers",
         "following_url" : "https://api.github.com/users/jarolrod/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jarolrod/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jarolrod",
         "id" : 23396902,
         "login" : "jarolrod",
         "node_id" : "MDQ6VXNlcjIzMzk2OTAy",
         "organizations_url" : "https://api.github.com/users/jarolrod/orgs",
         "received_events_url" : "https://api.github.com/users/jarolrod/received_events",
         "repos_url" : "https://api.github.com/users/jarolrod/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jarolrod/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jarolrod"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r664958689"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/664958689"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\nThe installation instructions for both the official shell installer script and the\r\n```",
      "commit_id" : "d66c110f9415114f03bd0fb3f7f59505bc11532f",
      "created_at" : "2021-07-07T00:33:33Z",
      "diff_hunk" : "@@ -0,0 +1,679 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions]()\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section]()\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on distribution\n+5. Building **from source** [â¤ skip to section]()\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The instructions for both using the offical shell installer script and using",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r664958689",
      "id" : 664958689,
      "line" : 45,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDk1ODY4OQ==",
      "original_commit_id" : "d66c110f9415114f03bd0fb3f7f59505bc11532f",
      "original_line" : 45,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 45,
      "pull_request_review_id" : 700448987,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-07T00:45:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/664958689",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23396902?v=4",
         "events_url" : "https://api.github.com/users/jarolrod/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jarolrod/followers",
         "following_url" : "https://api.github.com/users/jarolrod/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jarolrod/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jarolrod",
         "id" : 23396902,
         "login" : "jarolrod",
         "node_id" : "MDQ6VXNlcjIzMzk2OTAy",
         "organizations_url" : "https://api.github.com/users/jarolrod/orgs",
         "received_events_url" : "https://api.github.com/users/jarolrod/received_events",
         "repos_url" : "https://api.github.com/users/jarolrod/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jarolrod/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jarolrod"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r664958829"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/664958829"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\nbinary tarballs can be found in the GNU Guix Manual's [Binary Installation\r\n```",
      "commit_id" : "d66c110f9415114f03bd0fb3f7f59505bc11532f",
      "created_at" : "2021-07-07T00:34:01Z",
      "diff_hunk" : "@@ -0,0 +1,679 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions]()\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section]()\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on distribution\n+5. Building **from source** [â¤ skip to section]()\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The instructions for both using the offical shell installer script and using\n+binary tarballs are both found in the GNU Guix Manual's [Binary Installation",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r664958829",
      "id" : 664958829,
      "line" : 46,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDk1ODgyOQ==",
      "original_commit_id" : "d66c110f9415114f03bd0fb3f7f59505bc11532f",
      "original_line" : 46,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 46,
      "pull_request_review_id" : 700448987,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-07T00:45:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/664958829",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23396902?v=4",
         "events_url" : "https://api.github.com/users/jarolrod/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jarolrod/followers",
         "following_url" : "https://api.github.com/users/jarolrod/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jarolrod/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jarolrod",
         "id" : 23396902,
         "login" : "jarolrod",
         "node_id" : "MDQ6VXNlcjIzMzk2OTAy",
         "organizations_url" : "https://api.github.com/users/jarolrod/orgs",
         "received_events_url" : "https://api.github.com/users/jarolrod/received_events",
         "repos_url" : "https://api.github.com/users/jarolrod/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jarolrod/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jarolrod"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r664959329"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/664959329"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit\r\n```suggestion\r\n### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute)\r\n```",
      "commit_id" : "d66c110f9415114f03bd0fb3f7f59505bc11532f",
      "created_at" : "2021-07-07T00:35:50Z",
      "diff_hunk" : "@@ -0,0 +1,679 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions]()\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section]()\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on distribution\n+5. Building **from source** [â¤ skip to section]()\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The instructions for both using the offical shell installer script and using\n+binary tarballs are both found in the GNU Guix Manual's [Binary Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this section]() for\n+instructions on how to add a `/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian 11 (\"Bullseye\")/Ubuntu 21.04 (\"Hirsute\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r664959329",
      "id" : 664959329,
      "line" : 72,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDk1OTMyOQ==",
      "original_commit_id" : "d66c110f9415114f03bd0fb3f7f59505bc11532f",
      "original_line" : 72,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 72,
      "pull_request_review_id" : 700448987,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-07T00:45:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/664959329",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23396902?v=4",
         "events_url" : "https://api.github.com/users/jarolrod/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jarolrod/followers",
         "following_url" : "https://api.github.com/users/jarolrod/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jarolrod/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jarolrod",
         "id" : 23396902,
         "login" : "jarolrod",
         "node_id" : "MDQ6VXNlcjIzMzk2OTAy",
         "organizations_url" : "https://api.github.com/users/jarolrod/orgs",
         "received_events_url" : "https://api.github.com/users/jarolrod/received_events",
         "repos_url" : "https://api.github.com/users/jarolrod/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jarolrod/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jarolrod"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r664960427"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/664960427"
         }
      },
      "author_association" : "MEMBER",
      "body" : "no opinion, but we don't provide Arch Linux specific instructions anywhere else",
      "commit_id" : "d66c110f9415114f03bd0fb3f7f59505bc11532f",
      "created_at" : "2021-07-07T00:39:54Z",
      "diff_hunk" : "@@ -0,0 +1,679 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions]()\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section]()\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on distribution\n+5. Building **from source** [â¤ skip to section]()\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The instructions for both using the offical shell installer script and using\n+binary tarballs are both found in the GNU Guix Manual's [Binary Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this section]() for\n+instructions on how to add a `/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian 11 (\"Bullseye\")/Ubuntu 21.04 (\"Hirsute\")\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) (\"bullseye\") and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix) (Hirsute Hippo).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here]()), v1.2.0 has a known problems when building GnuTLS from source.\n+Solutions and workarounds are documented [here]().\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r664960427",
      "id" : 664960427,
      "line" : 92,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDk2MDQyNw==",
      "original_commit_id" : "d66c110f9415114f03bd0fb3f7f59505bc11532f",
      "original_line" : 92,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 92,
      "pull_request_review_id" : 700448987,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-07T00:45:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/664960427",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23396902?v=4",
         "events_url" : "https://api.github.com/users/jarolrod/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jarolrod/followers",
         "following_url" : "https://api.github.com/users/jarolrod/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jarolrod/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jarolrod",
         "id" : 23396902,
         "login" : "jarolrod",
         "node_id" : "MDQ6VXNlcjIzMzk2OTAy",
         "organizations_url" : "https://api.github.com/users/jarolrod/orgs",
         "received_events_url" : "https://api.github.com/users/jarolrod/received_events",
         "repos_url" : "https://api.github.com/users/jarolrod/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jarolrod/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jarolrod"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r664961046"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/664961046"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If the nickname is already mentioned in the header along with the os version, we don't need to reiterate it here\r\n```suggestion\r\n11](https://packages.debian.org/bullseye/guix) and [Ubuntu\r\n```",
      "commit_id" : "d66c110f9415114f03bd0fb3f7f59505bc11532f",
      "created_at" : "2021-07-07T00:41:53Z",
      "diff_hunk" : "@@ -0,0 +1,679 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions]()\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section]()\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on distribution\n+5. Building **from source** [â¤ skip to section]()\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The instructions for both using the offical shell installer script and using\n+binary tarballs are both found in the GNU Guix Manual's [Binary Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this section]() for\n+instructions on how to add a `/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian 11 (\"Bullseye\")/Ubuntu 21.04 (\"Hirsute\")\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) (\"bullseye\") and [Ubuntu",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r664961046",
      "id" : 664961046,
      "line" : 75,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDk2MTA0Ng==",
      "original_commit_id" : "d66c110f9415114f03bd0fb3f7f59505bc11532f",
      "original_line" : 75,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 75,
      "pull_request_review_id" : 700448987,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-07T00:45:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/664961046",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23396902?v=4",
         "events_url" : "https://api.github.com/users/jarolrod/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jarolrod/followers",
         "following_url" : "https://api.github.com/users/jarolrod/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jarolrod/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jarolrod",
         "id" : 23396902,
         "login" : "jarolrod",
         "node_id" : "MDQ6VXNlcjIzMzk2OTAy",
         "organizations_url" : "https://api.github.com/users/jarolrod/orgs",
         "received_events_url" : "https://api.github.com/users/jarolrod/received_events",
         "repos_url" : "https://api.github.com/users/jarolrod/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jarolrod/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jarolrod"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r664961091"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/664961091"
         }
      },
      "author_association" : "MEMBER",
      "body" : "and here\r\n\r\n```suggestion\r\n21.04](https://packages.ubuntu.com/hirsute/guix).\r\n```",
      "commit_id" : "d66c110f9415114f03bd0fb3f7f59505bc11532f",
      "created_at" : "2021-07-07T00:42:06Z",
      "diff_hunk" : "@@ -0,0 +1,679 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions]()\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section]()\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on distribution\n+5. Building **from source** [â¤ skip to section]()\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The instructions for both using the offical shell installer script and using\n+binary tarballs are both found in the GNU Guix Manual's [Binary Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this section]() for\n+instructions on how to add a `/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian 11 (\"Bullseye\")/Ubuntu 21.04 (\"Hirsute\")\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) (\"bullseye\") and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix) (Hirsute Hippo).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r664961091",
      "id" : 664961091,
      "line" : 76,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDk2MTA5MQ==",
      "original_commit_id" : "d66c110f9415114f03bd0fb3f7f59505bc11532f",
      "original_line" : 76,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 76,
      "pull_request_review_id" : 700448987,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-07T00:45:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/664961091",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23396902?v=4",
         "events_url" : "https://api.github.com/users/jarolrod/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jarolrod/followers",
         "following_url" : "https://api.github.com/users/jarolrod/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jarolrod/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jarolrod",
         "id" : 23396902,
         "login" : "jarolrod",
         "node_id" : "MDQ6VXNlcjIzMzk2OTAy",
         "organizations_url" : "https://api.github.com/users/jarolrod/orgs",
         "received_events_url" : "https://api.github.com/users/jarolrod/received_events",
         "repos_url" : "https://api.github.com/users/jarolrod/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jarolrod/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jarolrod"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This PR is ready for review as of 5016091dd8b827c74fe28212be43d3b22014c5b6\r\n\r\nThanks @jarolrod for the diligent reviews, I will address the nits after others agree that I haven't missed anything crucial!",
      "created_at" : "2021-07-07T20:37:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#issuecomment-875915638",
      "id" : 875915638,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg3NTkxNTYzOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-07T20:37:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/875915638",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r665740973"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665740973"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 5016091dd8b827c74fe28212be43d3b22014c5b6 \"guix: Adapt release-process.md to new Guix process\"\r\n\r\nI think this should refer to `contrib/guix/INSTALL.md`",
      "commit_id" : "5016091dd8b827c74fe28212be43d3b22014c5b6",
      "created_at" : "2021-07-07T22:17:21Z",
      "diff_hunk" : "@@ -64,14 +60,14 @@ This will perform a few last-minute consistency checks in the build system files\n \n ### First time / New builders\n \n-If you're using the automated script (found in [contrib/gitian-build.py](/contrib/gitian-build.py)), then at this point you should run it with the \"--setup\" command. Otherwise ignore this.\n+Install Guix using one of the installation methods detailed in\n+[contrib/guix/README.md](contrib/guix/README.md).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r665740973",
      "id" : 665740973,
      "line" : 64,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTc0MDk3Mw==",
      "original_commit_id" : "5016091dd8b827c74fe28212be43d3b22014c5b6",
      "original_line" : 64,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "doc/release-process.md",
      "position" : 17,
      "pull_request_review_id" : 701491426,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-07T22:22:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665740973",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r665920924"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665920924"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think doing this in this PR is fine. However this also needs to be updated to add `curl`, otherwise on a bare system we'll fail when we try and invoke `make -C depends` below.",
      "commit_id" : "781812a9cd2b85485e300db58a1ca577a0749849",
      "created_at" : "2021-07-08T06:58:50Z",
      "diff_hunk" : "@@ -18,7 +18,7 @@ source \"$(dirname \"${BASH_SOURCE[0]}\")/libexec/prelude.bash\"\n # Required non-builtin commands should be invocable\n ################\n \n-check_tools cat mkdir make git guix\n+check_tools cat mkdir make getent git guix",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r665920924",
      "id" : 665920924,
      "in_reply_to_id" : 664932122,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NTkyMDkyNA==",
      "original_commit_id" : "d66c110f9415114f03bd0fb3f7f59505bc11532f",
      "original_line" : 21,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "contrib/guix/guix-build",
      "position" : null,
      "pull_request_review_id" : 701702503,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-08T08:27:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/665920924",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Finished the from-scratch-build in the Alpine container:\r\n```bash\r\nreal\t210m14.468s\r\nuser\t700m13.502s\r\nsys\t51m25.176s\r\nbash-5.1# find guix-build-$(git rev-parse --short=12 HEAD)/output/ -type f -print0 | env LC_ALL=C sort -z | xargs -r0 sha256sum\r\nceaf2111053d48d1024e9c0c7336fc9ee6b081172eca35259b2ee9c3de2b5eec  guix-build-4129134e844f/output/aarch64-linux-gnu/SHA256SUMS.part\r\nd564c8ce3c2132bb1304e75a49b1e9860189b98745ed35e540d7c6ef9f0e5323  guix-build-4129134e844f/output/aarch64-linux-gnu/bitcoin-4129134e844f-aarch64-linux-gnu-debug.tar.gz\r\n8c2cc0b1046d6518b7445a19b775735b688db32b1eefc8bbcd2d3aded3937fd7  guix-build-4129134e844f/output/aarch64-linux-gnu/bitcoin-4129134e844f-aarch64-linux-gnu.tar.gz\r\n3084de9527e95ef9bc074820e190cfacdd1962fa04cef1a79f8ccd42bab0dc6b  guix-build-4129134e844f/output/arm-linux-gnueabihf/SHA256SUMS.part\r\n9b2d147ec30ecd1573d6cd82343cccbd35375eb5ffa269edf34b4404fca8744c  guix-build-4129134e844f/output/arm-linux-gnueabihf/bitcoin-4129134e844f-arm-linux-gnueabihf-debug.tar.gz\r\nbd8da7121fdf38b2da885a53b10103b3a53dfef2d68e38e5ca5dde8db61af641  guix-build-4129134e844f/output/arm-linux-gnueabihf/bitcoin-4129134e844f-arm-linux-gnueabihf.tar.gz\r\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855  guix-build-4129134e844f/output/dist-archive/SKIPATTEST.TAG\r\n5b1ee87a8833130eee8f7c32b0537618b90ac3db815298cc734660bd1821bcd8  guix-build-4129134e844f/output/dist-archive/bitcoin-4129134e844f.tar.gz\r\n78d3c3a94773e3d461ee8797a6d6043c5e48c607ed8cfe5ccaf7aa7f751cd553  guix-build-4129134e844f/output/powerpc64-linux-gnu/SHA256SUMS.part\r\naad00c9521d461871c33d9f68a41d2a8ba9ec8e962edb93bb846d77c05b3eda1  guix-build-4129134e844f/output/powerpc64-linux-gnu/bitcoin-4129134e844f-powerpc64-linux-gnu-debug.tar.gz\r\n1a326af20ced546fe2d03bd0d5d3b446c81c8c8dfcbde49852d39764748a0524  guix-build-4129134e844f/output/powerpc64-linux-gnu/bitcoin-4129134e844f-powerpc64-linux-gnu.tar.gz\r\n06e409cfefc4add776479b0b70482a0ec684e991685f715a732f85516da40981  guix-build-4129134e844f/output/powerpc64le-linux-gnu/SHA256SUMS.part\r\n237b9ee0ddb60e47b86e505011a9c17b5e898e1c5bfba59abd0e863cfcf03f5b  guix-build-4129134e844f/output/powerpc64le-linux-gnu/bitcoin-4129134e844f-powerpc64le-linux-gnu-debug.tar.gz\r\n98de1dec19a8b6f98f045aa93bc29370b3acd5148a0acd96e9c091e6bdda1e9c  guix-build-4129134e844f/output/powerpc64le-linux-gnu/bitcoin-4129134e844f-powerpc64le-linux-gnu.tar.gz\r\n4855cf747c23dd1d60f6b8af6933ebe464820bbc840e364d4ede5d94677cd3fe  guix-build-4129134e844f/output/riscv64-linux-gnu/SHA256SUMS.part\r\n6e0e781bbd611ad72c085d4e00686b48dff1baf29637c481b11534f9b9bf56f2  guix-build-4129134e844f/output/riscv64-linux-gnu/bitcoin-4129134e844f-riscv64-linux-gnu-debug.tar.gz\r\n96cff3df87b6f62542293a63d169aa29a88dc795d499168273a86c81560ccecb  guix-build-4129134e844f/output/riscv64-linux-gnu/bitcoin-4129134e844f-riscv64-linux-gnu.tar.gz\r\nb40a1645c1601d6afbac60192789ec054ce750dc6eeb5a3f25612f4231c3d7e5  guix-build-4129134e844f/output/x86_64-apple-darwin18/SHA256SUMS.part\r\n4dd21a03916bd42e0369e59aa0f8fb88921ed7b86fc5a1e6702389bda98a8def  guix-build-4129134e844f/output/x86_64-apple-darwin18/bitcoin-4129134e844f-osx-unsigned.dmg\r\nff3602163bce9934457c031831828dbd016a97d596d5aa76c42b21d9d479c2c2  guix-build-4129134e844f/output/x86_64-apple-darwin18/bitcoin-4129134e844f-osx-unsigned.tar.gz\r\n50b1b0f6f8b8eb16d8c381fb1b66e5fc844d24f2625269f7bb28c80b20eaf125  guix-build-4129134e844f/output/x86_64-apple-darwin18/bitcoin-4129134e844f-osx64.tar.gz\r\naf318a441f563abf1b9e1b3321b13e3a14a857216238133f9f3d923e34fc081e  guix-build-4129134e844f/output/x86_64-linux-gnu/SHA256SUMS.part\r\n3912bb99acf83778aae12d522a0d8c567371754cb31f2f13712284fc5954a443  guix-build-4129134e844f/output/x86_64-linux-gnu/bitcoin-4129134e844f-x86_64-linux-gnu-debug.tar.gz\r\neb0edfa33b57ecb723b80dfc6a994af7a9cbdde72e7cf05026e98085a7dcb018  guix-build-4129134e844f/output/x86_64-linux-gnu/bitcoin-4129134e844f-x86_64-linux-gnu.tar.gz\r\nc5cf1c6985c1c430df4839db7310ac0a46fd7da79e7de1e5cfc761523900d190  guix-build-4129134e844f/output/x86_64-w64-mingw32/SHA256SUMS.part\r\n59721ac4abcebb51b7c011785e0701e13cb90926437ef60014078889dbec5e22  guix-build-4129134e844f/output/x86_64-w64-mingw32/bitcoin-4129134e844f-win-unsigned.tar.gz\r\nd6f919dd523c407deaf38fc842e7a84240b64bc5c759796965b5b20618e15e2a  guix-build-4129134e844f/output/x86_64-w64-mingw32/bitcoin-4129134e844f-win64-debug.zip\r\n96dc1c8f917b086c2a7eb84a780d4ee718eb1a608c17dfe8c29c07825f057ab6  guix-build-4129134e844f/output/x86_64-w64-mingw32/bitcoin-4129134e844f-win64-setup-unsigned.exe\r\ne0e5925b0a898b9cc963f7a69bf9b4ada766332fffd939db142f357ee294b514  guix-build-4129134e844f/output/x86_64-w64-mingw32/bitcoin-4129134e844f-win64.zip\r\n```\r\n\r\nThen ran a `bash-5.1# ./contrib/guix/guix-clean` and built again, getting the same results in ~80 minutes iirc.\r\n\r\nUnfortunately the `--no-substitutes` Hirsute build has bombed out, one of the unit tests run at the end of compiling coreutils 8.32 seems to be failing. Something to follow up on later:\r\n```bash\r\n================================================\r\n   GNU coreutils 8.32: ./tests/test-suite.log\r\n================================================\r\n\r\n# TOTAL: 621\r\n# PASS:  477\r\n# SKIP:  143\r\n# XFAIL: 0\r\n# FAIL:  1\r\n# XPASS: 0\r\n# ERROR: 0\r\n\r\n.. contents:: :depth: 2\r\n...\r\nFAIL: tests/tail-2/inotify-dir-recreate\r\n...\r\n inotify\r\n-tail: 'dir/file' has become inaccessible: No such file or directory\r\n-tail: directory containing watched file was removed\r\n-tail: inotify cannot be used, reverting to polling\r\n-tail: 'dir/file' has appeared;  following new file\r\n+ fail=1\r\n+ Exit 1\r\n```\r\n\r\n[Full log](https://gist.github.com/fanquake/0fa8349c0bfd9c3381de4ec434c2ddb4).",
      "created_at" : "2021-07-08T12:57:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#issuecomment-876416679",
      "id" : 876416679,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg3NjQxNjY3OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-08T12:57:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/876416679",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r666335067"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666335067"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed, thanks!",
      "commit_id" : "781812a9cd2b85485e300db58a1ca577a0749849",
      "created_at" : "2021-07-08T16:11:50Z",
      "diff_hunk" : "@@ -64,14 +60,14 @@ This will perform a few last-minute consistency checks in the build system files\n \n ### First time / New builders\n \n-If you're using the automated script (found in [contrib/gitian-build.py](/contrib/gitian-build.py)), then at this point you should run it with the \"--setup\" command. Otherwise ignore this.\n+Install Guix using one of the installation methods detailed in\n+[contrib/guix/README.md](contrib/guix/README.md).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r666335067",
      "id" : 666335067,
      "in_reply_to_id" : 665740973,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjMzNTA2Nw==",
      "original_commit_id" : "5016091dd8b827c74fe28212be43d3b22014c5b6",
      "original_line" : 64,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "doc/release-process.md",
      "position" : null,
      "pull_request_review_id" : 702257085,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-08T16:11:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666335067",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Pushed 739556bfd4...781812a9cd\r\n- Various fixups\r\n- Add coreutils/inotify-dir-recreate troubleshooting information\r\n\r\n-----\r\n\r\n> In `release-process.md`, there are still two mentions of gitian in the `Update packaging repo` section.\r\n\r\nFixed!\r\n\r\n> In `guix-attest`, can you address [this comment](https://github.com/bitcoin/bitcoin/pull/22182#issuecomment-862869410) from #22182.\r\n\r\nFixed!\r\n\r\n> I am running through doing a build using a Ubuntu:Hirsute container, using the following...\r\n\r\nThanks for testing!\r\n\r\n> I've also updated [my Alpine based dockerfile](https://github.com/fanquake/core-review/blob/master/guix) to use Alpine 3.14, and am currently running through a from-scratch build using that. Using a build invocation like:\r\n> `time BASE_CACHE=\"/guix/base_cache\" SOURCES_PATH=\"/guix/sources\" SDK_PATH=\"/guix/SDKs\" ./contrib/guix/guix-build`.\r\n\r\nGreat to test with a musl-based system too!\r\n\r\n> Unfortunately the --no-substitutes Hirsute build has bombed out, one of the unit tests run at the end of compiling coreutils 8.32 seems to be failing. Something to follow up on later...\r\n\r\nThis one I've encountered before when testing Guix's v1.3.0 release. I've added some troubleshooting documentation in the last commit of the latest push: https://github.com/bitcoin/bitcoin/pull/21711/commits/781812a9cd2b85485e300db58a1ca577a0749849",
      "created_at" : "2021-07-08T16:15:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#issuecomment-876569698",
      "id" : 876569698,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg3NjU2OTY5OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-08T16:15:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/876569698",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r666564511"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666564511"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: missed TODO? :)",
      "commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "created_at" : "2021-07-08T22:49:03Z",
      "diff_hunk" : "@@ -0,0 +1,811 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [â¤ skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both using the offical shell installer script\n+and using binary tarballs can be found in the GNU Guix Manual's [Binary\n+Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this\n+section](#add-an-etcprofiled-entry) for instructions on how to add a\n+`/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute Hippo)\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here][security-model]), v1.2.0 has a known problems when building\n+GnuTLS from source. Solutions and workarounds are documented\n+[here](#gnutls-test-suite-fail-status-request-revoked).\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+I strongly urge you to at least skim through the entire section once before you\n+start issuing commands, as it will save you a lot of unncessary pain and\n+anguish.\n+\n+### Installing common build tools\n+\n+There are a few basic build tools that are required for most things we'll build,\n+so let's install them now:\n+\n+Text transformation/i18n:\n+- `autopoint` (sometimes packaged in `gettext`)\n+- `help2man`\n+- `po4a`\n+- `texinfo`\n+\n+Build system tools:\n+- `g++` w/ C++11 support\n+- `libtool`\n+- `autoconf`\n+- `automake`\n+- `pkg-config` (sometimes packaged as `pkgconf`)\n+- `make`\n+- `cmake`\n+\n+Miscellaneous:\n+- `git`\n+- `gnupg`\n+- `python3`\n+\n+### Building and Installing Guix's dependencies\n+\n+In order to build Guix itself from source, we need to first make sure that the\n+necessary dependencies are installed and discoverable. The most up-to-date list\n+of Guix's dependencies is kept in the [\"Requirements\"\n+section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n+Reference Manual.\n+\n+Depending on your distribution, most or all of these dependencies may already be\n+packaged and installable without manually building and installing.\n+\n+For reference, the graphic below outlines Guix v1.3.0's dependency graph:\n+\n+![boostrap map](guix-v1.3.0-bootstrap.png)\n+\n+#### Guile\n+\n+##### Choosing a Guile version and sticking to it\n+\n+One of the first things you need to decide is which Guile version you want to\n+use: Guile v2.2 or Guile v3.0. Unlike the python2 to python3 transition, Guile\n+v2.2 and Guile v3.0 are largely compatible, as evidenced by the fact that most\n+Guile packages and even [Guix\n+itself](https://guix.gnu.org/en/blog/2020/guile-3-and-guix/) support running on\n+both.\n+\n+What is important here is that you **choose one**, and you **remain consistent**\n+with your choice throughout **all Guile-related packages**, no matter if they\n+are installed via the distribution's package manager or installed from source.\n+This is because the files for Guile packages are installed to directories which\n+are separated based on the Guile version.\n+\n+###### Example: Checking that Ubuntu's `guile-git` is compatible with your chosen Guile version\n+\n+On Ubuntu Focal:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-2.2, guile-bytestructures, libgit2-dev\n+...\n+```\n+\n+As you can see, the package `guile-git` depends on `guile-2.2`, meaning that it\n+was likely built for Guile v2.2. This means that if you decided to use Guile\n+v3.0 on Ubuntu Focal, you would need to build guile-git from source instead of\n+using the distribution package.\n+\n+On Ubuntu Hirsute:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-3.0 | guile-2.2, guile-bytestructures (>= 1.0.7-3~), libgit2-dev (>= 1.0)\n+...\n+```\n+\n+In this case, `guile-git` depends on either `guile-3.0` or `guile-2.2`, meaning\n+that it would work no matter what Guile version you decided to use.\n+\n+###### Corner case: Multiple versions of Guile on one system\n+\n+It is recommended to only install one version of Guile, so that build systems do\n+not get confused about which Guile to use.\n+\n+However, if you insist on having both Guile v2.2 and Guile v3.0 installed on\n+your system, then you need to **consistently** specify one of\n+`GUILE_EFFECTIVE_VERSION=3.0` or `GUILE_EFFECTIVE_VERSION=2.2` to all\n+`./configure` invocations for Guix and its dependencies.\n+\n+##### Installing Guile\n+\n+Guile is most likely already packaged for your distribution, so after you have\n+[chosen a Guile version](#choosing-a-guile-version-and-sticking-to-it), install\n+it via your distribution's package manager.\n+\n+If your distribution splits packages into `-dev`-suffixed and\n+non-`-dev`-suffixed sub-packages (as is the case for Debian-derived\n+distributions), please make sure to install both. For example, to install Guile\n+v2.2 on Debian/Ubuntu:\n+\n+```sh\n+apt install guile-2.2 guile-2.2-dev\n+```\n+\n+#### Mixing distribution packages and source-built packages\n+\n+At the time of writing, most distributions have _some_ of Guix's dependencies\n+packaged, but not all. This means that you may want to install the distribution\n+package for some dependencies, and manually build-from-source for others.\n+\n+Distribution packages usually install to `/usr`, which is different from the\n+default `./configure` prefix of source-built packages: `/usr/local`.\n+\n+This means that if you mix-and-match distribution packages and source-built\n+packages and do not specify exactly `--prefix=/usr` to `./configure` for\n+source-built packages, you will need to augment the `GUILE_LOAD_PATH` and\n+`GUILE_LOAD_COMPILED_PATH` environment variables so that Guile will look\n+under the right prefix and find your source-built packages.\n+\n+For example, if you are using Guile v2.2, and have Guile packages in the\n+`/usr/local` prefix, either add the following lines to your `.profile` or\n+`.bash_profile` so that the environment variable is properly set for all future\n+shell logins, or paste the lines into a POSIX-style shell to temporarily modify\n+the environment variables of your current shell session.\n+\n+```sh\n+# Help Guile v2.2.x find packages in /usr/local\n+export GUILE_LOAD_PATH=\"/usr/local/share/guile/site/2.2${GUILE_LOAD_PATH:+:}$GUILE_LOAD_PATH\"\n+export GUILE_LOAD_COMPILED_PATH=\"/usr/local/lib/guile/2.2/site-ccache${GUILE_LOAD_COMPILED_PATH:+:}$GUILE_COMPILED_LOAD_PATH\"\n+```\n+\n+Note that these environment variables are used to check for packages during\n+`./configure`, so they should be set as soon as possible should you want to use\n+a prefix other than `/usr`.\n+\n+<!-- ##### Example: Consistently using Guile 3.0 on Ubuntu -->\n+\n+<!-- For example, on Ubuntu, if you choose to use Guile 3.0 and install the -->\n+<!-- `guile-3.0` package, you want to make sure that if you also want to install the -->\n+<!-- `guile-git` package with `apt` that said `guile-git` package was built for Guile -->\n+<!-- v3.0. This can be checked by invoking the following: -->\n+\n+<!-- ``` -->\n+<!-- apt update -->\n+<!-- apt show guile-git -->\n+<!-- ``` -->\n+\n+#### Building and installing source-built packages\n+\n+***IMPORTANT**: A few dependencies have non-obvious quirks/erratas which are documented in the\n+sub-sections immediately below. Please read these sections before proceeding to\n+build and install these packages.*\n+\n+Although you should always refer to the README or INSTALL files for the most\n+accurate information, most of these dependencies use autoconf-style build\n+systems (check if there's a `configure.ac` file), and will likely do the right\n+thing with the following:\n+\n+Clone the repository and check out the latest release:\n+```sh\n+git clone <git-repo-of-dependency>/<dependency>.git\n+cd <dependency>\n+git tag -l  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+For autoconf-based build systems (if `./autogen.sh` or `configure.ac` exists at\n+the root of the repository):\n+\n+```sh\n+./autogen.sh || autoreconf -vfi\n+./configure --prefix=<prefix>\n+make\n+sudo make install\n+```\n+\n+For CMake-based build systems (if `CMakeLists.txt` exists at the root of the\n+repository):\n+\n+```sh\n+mkdir build && cd build\n+cmake .. -DCMAKE_INSTALL_PREFIX=<prefix>\n+sudo cmake --build . --target install\n+```\n+\n+If you choose not to specify exactly `--prefix=/usr` to `./configure`, please\n+make sure you've carefully read the [previous section] on mixing distribution\n+packages and source-built packages.\n+\n+##### Binding packages require `-dev`-suffixed packages\n+\n+Relevant for:\n+- Everyone\n+\n+When building bindings, the `-dev`-suffixed version of the original package\n+needs to be installed. For example, building `Guile-zlib` on Debian-derived\n+distributions requires that `zlib1g-dev` is installed.\n+\n+When using bindings, the `-dev`-suffixed version of the original package still\n+needs to be installed. This is particularly problematic when distribution\n+packages are mispackaged like `guile-sqlite3` is in Ubuntu Focal such that\n+installing `guile-sqlite3` does not automatically install `libsqlite3-dev` as a\n+dependency.\n+\n+Below is a list of relevant Guile bindings and their corresponding `-dev`\n+packages in Debian at the time of writing.\n+\n+| Guile binding package | -dev Debian package |\n+|-----------------------|---------------------|\n+| guile-gcrypt          | libgcrypt-dev       |\n+| guile-git             | libgit2-dev         |\n+| guile-lzlib           | liblz-dev           |\n+| guile-ssh             | libssh-dev          |\n+| guile-sqlite3         | libsqlite3-dev      |\n+| guile-zlib            | zlib1g-dev          |\n+\n+##### `guile-git` actually depends on `libgit2 >= 1.1`\n+\n+Relevant for:\n+- Those building `guile-git` from source against `libgit2 < 1.1`\n+- Those installing `guile-git` from their distribution where `guile-git` is\n+  built against `libgit2 < 1.1`\n+\n+As of v0.4.0, `guile-git` claims to only require `libgit2 >= 0.28.0`, however,\n+it actually requires `libgit2 >= 1.1`, otherwise, it will be confused by a\n+reference of `origin/keyring`: instead of interpreting the reference as \"the\n+'keyring' branch of the 'origin' remote\", the reference is interpreted as \"the\n+branch literally named 'origin/keyring'\"\n+\n+This is especially notable because Ubuntu Focal packages `libgit2 v0.28.4`, and\n+`guile-git` is built against it.\n+\n+Should you be in this situation, you need to build both `libgit2 v1.1.x` and\n+`guile-git` from source.\n+\n+Source: http://logs.guix.gnu.org/guix/2020-11-12.log#232527\n+\n+##### `{scheme,guile}-bytestructures` v1.0.8 and v1.0.9 are broken for Guile v2.2\n+\n+Relevant for:\n+- Those building `{scheme,guile}-bytestructures` from source against Guile v2.2\n+\n+Commit\n+[707eea3](https://github.com/TaylanUB/scheme-bytestructures/commit/707eea3a85e1e375e86702229ebf73d496377669)\n+introduced a regression for Guile v2.2 and was first included in v1.0.8, this\n+was later corrected in commit\n+[ec9a721](https://github.com/TaylanUB/scheme-bytestructures/commit/ec9a721957c17bcda13148f8faa5f06934431ff7)\n+and included in v1.1.0.\n+\n+TL;DR If you decided to use Guile v2.2, do not use `{scheme,guile}-bytestructures` v1.0.8 or v1.0.9.\n+\n+### Building and Installing Guix itself\n+\n+Start by cloning Guix:\n+\n+```\n+git clone https://git.savannah.gnu.org/git/guix.git\n+cd guix\n+```\n+\n+You will likely want to build the latest release, however, if the latest release\n+when you're reading this is still 1.2.0 then you may want to use 95aca29 instead\n+to avoid a problem in the GnuTLS test suite.\n+\n+```\n+git branch -a -l 'origin/version-*'  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+Bootstrap the build system:\n+```\n+./bootstrap\n+```\n+\n+Configure with the recommended `--localstatedir` flag:\n+```\n+./configure --localstatedir=/var\n+```\n+\n+Note: If you intend to hack on Guix in the future, you will need to supply the\n+same `--localstatedir=` flag for all future Guix `./configure` invocations. See\n+the last paragraph of this\n+[section](https://guix.gnu.org/manual/en/html_node/Requirements.html) for more\n+details.\n+\n+Build Guix (this will take a while):\n+```\n+make -j$(nproc)\n+```\n+\n+Install Guix:\n+\n+```\n+sudo make install\n+```\n+\n+### Post-\"build from source\" Setup\n+\n+#### Creating and starting a `guix-daemon-original` service with a fixed `argv[0]`\n+\n+At this point, guix will be installed to `${bindir}`, which is likely\n+`/usr/local/bin` if you did not override directory variables at\n+`./configure`-time. More information on standard Automake directory variables\n+can be found\n+[here](https://www.gnu.org/software/automake/manual/html_node/Standard-Directory-Variables.html).\n+\n+However, the Guix init scripts and service configurations for Upstart, systemd,\n+SysV, and OpenRC are installed to launch\n+`${localstatedir}/guix/profiles/per-user/root/current-guix/bin/guix-daemon`,\n+which does not yet exist, and will only exist after `root` performs their first\n+`guix pull`. TODO: Link to `guix pull` as root section",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r666564511",
      "id" : 666564511,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjU2NDUxMQ==",
      "original_commit_id" : "781812a9cd2b85485e300db58a1ca577a0749849",
      "original_line" : 447,
      "original_position" : 447,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : null,
      "pull_request_review_id" : 702557161,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-09T14:16:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666564511",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r666566690"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666566690"
         }
      },
      "author_association" : "MEMBER",
      "body" : "But `guix-daemon.service` was never created in this section? Maybe prepand with:\r\n\r\n```\r\n# From the root of the source tree\r\ncp etc/guix-daemon.service /etc/systemd/system/\r\nchmod 644 /etc/systemd/system/guix-daemon.service\r\n```",
      "commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "created_at" : "2021-07-08T22:55:25Z",
      "diff_hunk" : "@@ -0,0 +1,811 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [â¤ skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both using the offical shell installer script\n+and using binary tarballs can be found in the GNU Guix Manual's [Binary\n+Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this\n+section](#add-an-etcprofiled-entry) for instructions on how to add a\n+`/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute Hippo)\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here][security-model]), v1.2.0 has a known problems when building\n+GnuTLS from source. Solutions and workarounds are documented\n+[here](#gnutls-test-suite-fail-status-request-revoked).\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+I strongly urge you to at least skim through the entire section once before you\n+start issuing commands, as it will save you a lot of unncessary pain and\n+anguish.\n+\n+### Installing common build tools\n+\n+There are a few basic build tools that are required for most things we'll build,\n+so let's install them now:\n+\n+Text transformation/i18n:\n+- `autopoint` (sometimes packaged in `gettext`)\n+- `help2man`\n+- `po4a`\n+- `texinfo`\n+\n+Build system tools:\n+- `g++` w/ C++11 support\n+- `libtool`\n+- `autoconf`\n+- `automake`\n+- `pkg-config` (sometimes packaged as `pkgconf`)\n+- `make`\n+- `cmake`\n+\n+Miscellaneous:\n+- `git`\n+- `gnupg`\n+- `python3`\n+\n+### Building and Installing Guix's dependencies\n+\n+In order to build Guix itself from source, we need to first make sure that the\n+necessary dependencies are installed and discoverable. The most up-to-date list\n+of Guix's dependencies is kept in the [\"Requirements\"\n+section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n+Reference Manual.\n+\n+Depending on your distribution, most or all of these dependencies may already be\n+packaged and installable without manually building and installing.\n+\n+For reference, the graphic below outlines Guix v1.3.0's dependency graph:\n+\n+![boostrap map](guix-v1.3.0-bootstrap.png)\n+\n+#### Guile\n+\n+##### Choosing a Guile version and sticking to it\n+\n+One of the first things you need to decide is which Guile version you want to\n+use: Guile v2.2 or Guile v3.0. Unlike the python2 to python3 transition, Guile\n+v2.2 and Guile v3.0 are largely compatible, as evidenced by the fact that most\n+Guile packages and even [Guix\n+itself](https://guix.gnu.org/en/blog/2020/guile-3-and-guix/) support running on\n+both.\n+\n+What is important here is that you **choose one**, and you **remain consistent**\n+with your choice throughout **all Guile-related packages**, no matter if they\n+are installed via the distribution's package manager or installed from source.\n+This is because the files for Guile packages are installed to directories which\n+are separated based on the Guile version.\n+\n+###### Example: Checking that Ubuntu's `guile-git` is compatible with your chosen Guile version\n+\n+On Ubuntu Focal:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-2.2, guile-bytestructures, libgit2-dev\n+...\n+```\n+\n+As you can see, the package `guile-git` depends on `guile-2.2`, meaning that it\n+was likely built for Guile v2.2. This means that if you decided to use Guile\n+v3.0 on Ubuntu Focal, you would need to build guile-git from source instead of\n+using the distribution package.\n+\n+On Ubuntu Hirsute:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-3.0 | guile-2.2, guile-bytestructures (>= 1.0.7-3~), libgit2-dev (>= 1.0)\n+...\n+```\n+\n+In this case, `guile-git` depends on either `guile-3.0` or `guile-2.2`, meaning\n+that it would work no matter what Guile version you decided to use.\n+\n+###### Corner case: Multiple versions of Guile on one system\n+\n+It is recommended to only install one version of Guile, so that build systems do\n+not get confused about which Guile to use.\n+\n+However, if you insist on having both Guile v2.2 and Guile v3.0 installed on\n+your system, then you need to **consistently** specify one of\n+`GUILE_EFFECTIVE_VERSION=3.0` or `GUILE_EFFECTIVE_VERSION=2.2` to all\n+`./configure` invocations for Guix and its dependencies.\n+\n+##### Installing Guile\n+\n+Guile is most likely already packaged for your distribution, so after you have\n+[chosen a Guile version](#choosing-a-guile-version-and-sticking-to-it), install\n+it via your distribution's package manager.\n+\n+If your distribution splits packages into `-dev`-suffixed and\n+non-`-dev`-suffixed sub-packages (as is the case for Debian-derived\n+distributions), please make sure to install both. For example, to install Guile\n+v2.2 on Debian/Ubuntu:\n+\n+```sh\n+apt install guile-2.2 guile-2.2-dev\n+```\n+\n+#### Mixing distribution packages and source-built packages\n+\n+At the time of writing, most distributions have _some_ of Guix's dependencies\n+packaged, but not all. This means that you may want to install the distribution\n+package for some dependencies, and manually build-from-source for others.\n+\n+Distribution packages usually install to `/usr`, which is different from the\n+default `./configure` prefix of source-built packages: `/usr/local`.\n+\n+This means that if you mix-and-match distribution packages and source-built\n+packages and do not specify exactly `--prefix=/usr` to `./configure` for\n+source-built packages, you will need to augment the `GUILE_LOAD_PATH` and\n+`GUILE_LOAD_COMPILED_PATH` environment variables so that Guile will look\n+under the right prefix and find your source-built packages.\n+\n+For example, if you are using Guile v2.2, and have Guile packages in the\n+`/usr/local` prefix, either add the following lines to your `.profile` or\n+`.bash_profile` so that the environment variable is properly set for all future\n+shell logins, or paste the lines into a POSIX-style shell to temporarily modify\n+the environment variables of your current shell session.\n+\n+```sh\n+# Help Guile v2.2.x find packages in /usr/local\n+export GUILE_LOAD_PATH=\"/usr/local/share/guile/site/2.2${GUILE_LOAD_PATH:+:}$GUILE_LOAD_PATH\"\n+export GUILE_LOAD_COMPILED_PATH=\"/usr/local/lib/guile/2.2/site-ccache${GUILE_LOAD_COMPILED_PATH:+:}$GUILE_COMPILED_LOAD_PATH\"\n+```\n+\n+Note that these environment variables are used to check for packages during\n+`./configure`, so they should be set as soon as possible should you want to use\n+a prefix other than `/usr`.\n+\n+<!-- ##### Example: Consistently using Guile 3.0 on Ubuntu -->\n+\n+<!-- For example, on Ubuntu, if you choose to use Guile 3.0 and install the -->\n+<!-- `guile-3.0` package, you want to make sure that if you also want to install the -->\n+<!-- `guile-git` package with `apt` that said `guile-git` package was built for Guile -->\n+<!-- v3.0. This can be checked by invoking the following: -->\n+\n+<!-- ``` -->\n+<!-- apt update -->\n+<!-- apt show guile-git -->\n+<!-- ``` -->\n+\n+#### Building and installing source-built packages\n+\n+***IMPORTANT**: A few dependencies have non-obvious quirks/erratas which are documented in the\n+sub-sections immediately below. Please read these sections before proceeding to\n+build and install these packages.*\n+\n+Although you should always refer to the README or INSTALL files for the most\n+accurate information, most of these dependencies use autoconf-style build\n+systems (check if there's a `configure.ac` file), and will likely do the right\n+thing with the following:\n+\n+Clone the repository and check out the latest release:\n+```sh\n+git clone <git-repo-of-dependency>/<dependency>.git\n+cd <dependency>\n+git tag -l  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+For autoconf-based build systems (if `./autogen.sh` or `configure.ac` exists at\n+the root of the repository):\n+\n+```sh\n+./autogen.sh || autoreconf -vfi\n+./configure --prefix=<prefix>\n+make\n+sudo make install\n+```\n+\n+For CMake-based build systems (if `CMakeLists.txt` exists at the root of the\n+repository):\n+\n+```sh\n+mkdir build && cd build\n+cmake .. -DCMAKE_INSTALL_PREFIX=<prefix>\n+sudo cmake --build . --target install\n+```\n+\n+If you choose not to specify exactly `--prefix=/usr` to `./configure`, please\n+make sure you've carefully read the [previous section] on mixing distribution\n+packages and source-built packages.\n+\n+##### Binding packages require `-dev`-suffixed packages\n+\n+Relevant for:\n+- Everyone\n+\n+When building bindings, the `-dev`-suffixed version of the original package\n+needs to be installed. For example, building `Guile-zlib` on Debian-derived\n+distributions requires that `zlib1g-dev` is installed.\n+\n+When using bindings, the `-dev`-suffixed version of the original package still\n+needs to be installed. This is particularly problematic when distribution\n+packages are mispackaged like `guile-sqlite3` is in Ubuntu Focal such that\n+installing `guile-sqlite3` does not automatically install `libsqlite3-dev` as a\n+dependency.\n+\n+Below is a list of relevant Guile bindings and their corresponding `-dev`\n+packages in Debian at the time of writing.\n+\n+| Guile binding package | -dev Debian package |\n+|-----------------------|---------------------|\n+| guile-gcrypt          | libgcrypt-dev       |\n+| guile-git             | libgit2-dev         |\n+| guile-lzlib           | liblz-dev           |\n+| guile-ssh             | libssh-dev          |\n+| guile-sqlite3         | libsqlite3-dev      |\n+| guile-zlib            | zlib1g-dev          |\n+\n+##### `guile-git` actually depends on `libgit2 >= 1.1`\n+\n+Relevant for:\n+- Those building `guile-git` from source against `libgit2 < 1.1`\n+- Those installing `guile-git` from their distribution where `guile-git` is\n+  built against `libgit2 < 1.1`\n+\n+As of v0.4.0, `guile-git` claims to only require `libgit2 >= 0.28.0`, however,\n+it actually requires `libgit2 >= 1.1`, otherwise, it will be confused by a\n+reference of `origin/keyring`: instead of interpreting the reference as \"the\n+'keyring' branch of the 'origin' remote\", the reference is interpreted as \"the\n+branch literally named 'origin/keyring'\"\n+\n+This is especially notable because Ubuntu Focal packages `libgit2 v0.28.4`, and\n+`guile-git` is built against it.\n+\n+Should you be in this situation, you need to build both `libgit2 v1.1.x` and\n+`guile-git` from source.\n+\n+Source: http://logs.guix.gnu.org/guix/2020-11-12.log#232527\n+\n+##### `{scheme,guile}-bytestructures` v1.0.8 and v1.0.9 are broken for Guile v2.2\n+\n+Relevant for:\n+- Those building `{scheme,guile}-bytestructures` from source against Guile v2.2\n+\n+Commit\n+[707eea3](https://github.com/TaylanUB/scheme-bytestructures/commit/707eea3a85e1e375e86702229ebf73d496377669)\n+introduced a regression for Guile v2.2 and was first included in v1.0.8, this\n+was later corrected in commit\n+[ec9a721](https://github.com/TaylanUB/scheme-bytestructures/commit/ec9a721957c17bcda13148f8faa5f06934431ff7)\n+and included in v1.1.0.\n+\n+TL;DR If you decided to use Guile v2.2, do not use `{scheme,guile}-bytestructures` v1.0.8 or v1.0.9.\n+\n+### Building and Installing Guix itself\n+\n+Start by cloning Guix:\n+\n+```\n+git clone https://git.savannah.gnu.org/git/guix.git\n+cd guix\n+```\n+\n+You will likely want to build the latest release, however, if the latest release\n+when you're reading this is still 1.2.0 then you may want to use 95aca29 instead\n+to avoid a problem in the GnuTLS test suite.\n+\n+```\n+git branch -a -l 'origin/version-*'  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+Bootstrap the build system:\n+```\n+./bootstrap\n+```\n+\n+Configure with the recommended `--localstatedir` flag:\n+```\n+./configure --localstatedir=/var\n+```\n+\n+Note: If you intend to hack on Guix in the future, you will need to supply the\n+same `--localstatedir=` flag for all future Guix `./configure` invocations. See\n+the last paragraph of this\n+[section](https://guix.gnu.org/manual/en/html_node/Requirements.html) for more\n+details.\n+\n+Build Guix (this will take a while):\n+```\n+make -j$(nproc)\n+```\n+\n+Install Guix:\n+\n+```\n+sudo make install\n+```\n+\n+### Post-\"build from source\" Setup\n+\n+#### Creating and starting a `guix-daemon-original` service with a fixed `argv[0]`\n+\n+At this point, guix will be installed to `${bindir}`, which is likely\n+`/usr/local/bin` if you did not override directory variables at\n+`./configure`-time. More information on standard Automake directory variables\n+can be found\n+[here](https://www.gnu.org/software/automake/manual/html_node/Standard-Directory-Variables.html).\n+\n+However, the Guix init scripts and service configurations for Upstart, systemd,\n+SysV, and OpenRC are installed to launch\n+`${localstatedir}/guix/profiles/per-user/root/current-guix/bin/guix-daemon`,\n+which does not yet exist, and will only exist after `root` performs their first\n+`guix pull`. TODO: Link to `guix pull` as root section\n+\n+We need to create a `-original` version of these init scripts that's pointed to\n+the binaries we just built and `make install`'ed in `${bindir}` (normally,\n+`/usr/local/bin`).\n+\n+Example for `systemd`, run as `root`:\n+\n+```sh\n+# Create guix-daemon-original.service by modifying guix-daemon.service",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r666566690",
      "id" : 666566690,
      "line" : 456,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjU2NjY5MA==",
      "original_commit_id" : "781812a9cd2b85485e300db58a1ca577a0749849",
      "original_line" : 456,
      "original_position" : 456,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 456,
      "pull_request_review_id" : 702557161,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-09T14:16:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666566690",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r666794330"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666794330"
         }
      },
      "author_association" : "MEMBER",
      "body" : "12 hours and counting :p",
      "commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "created_at" : "2021-07-09T09:03:12Z",
      "diff_hunk" : "@@ -0,0 +1,811 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [â¤ skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both using the offical shell installer script\n+and using binary tarballs can be found in the GNU Guix Manual's [Binary\n+Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this\n+section](#add-an-etcprofiled-entry) for instructions on how to add a\n+`/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute Hippo)\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here][security-model]), v1.2.0 has a known problems when building\n+GnuTLS from source. Solutions and workarounds are documented\n+[here](#gnutls-test-suite-fail-status-request-revoked).\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+I strongly urge you to at least skim through the entire section once before you\n+start issuing commands, as it will save you a lot of unncessary pain and\n+anguish.\n+\n+### Installing common build tools\n+\n+There are a few basic build tools that are required for most things we'll build,\n+so let's install them now:\n+\n+Text transformation/i18n:\n+- `autopoint` (sometimes packaged in `gettext`)\n+- `help2man`\n+- `po4a`\n+- `texinfo`\n+\n+Build system tools:\n+- `g++` w/ C++11 support\n+- `libtool`\n+- `autoconf`\n+- `automake`\n+- `pkg-config` (sometimes packaged as `pkgconf`)\n+- `make`\n+- `cmake`\n+\n+Miscellaneous:\n+- `git`\n+- `gnupg`\n+- `python3`\n+\n+### Building and Installing Guix's dependencies\n+\n+In order to build Guix itself from source, we need to first make sure that the\n+necessary dependencies are installed and discoverable. The most up-to-date list\n+of Guix's dependencies is kept in the [\"Requirements\"\n+section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n+Reference Manual.\n+\n+Depending on your distribution, most or all of these dependencies may already be\n+packaged and installable without manually building and installing.\n+\n+For reference, the graphic below outlines Guix v1.3.0's dependency graph:\n+\n+![boostrap map](guix-v1.3.0-bootstrap.png)\n+\n+#### Guile\n+\n+##### Choosing a Guile version and sticking to it\n+\n+One of the first things you need to decide is which Guile version you want to\n+use: Guile v2.2 or Guile v3.0. Unlike the python2 to python3 transition, Guile\n+v2.2 and Guile v3.0 are largely compatible, as evidenced by the fact that most\n+Guile packages and even [Guix\n+itself](https://guix.gnu.org/en/blog/2020/guile-3-and-guix/) support running on\n+both.\n+\n+What is important here is that you **choose one**, and you **remain consistent**\n+with your choice throughout **all Guile-related packages**, no matter if they\n+are installed via the distribution's package manager or installed from source.\n+This is because the files for Guile packages are installed to directories which\n+are separated based on the Guile version.\n+\n+###### Example: Checking that Ubuntu's `guile-git` is compatible with your chosen Guile version\n+\n+On Ubuntu Focal:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-2.2, guile-bytestructures, libgit2-dev\n+...\n+```\n+\n+As you can see, the package `guile-git` depends on `guile-2.2`, meaning that it\n+was likely built for Guile v2.2. This means that if you decided to use Guile\n+v3.0 on Ubuntu Focal, you would need to build guile-git from source instead of\n+using the distribution package.\n+\n+On Ubuntu Hirsute:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-3.0 | guile-2.2, guile-bytestructures (>= 1.0.7-3~), libgit2-dev (>= 1.0)\n+...\n+```\n+\n+In this case, `guile-git` depends on either `guile-3.0` or `guile-2.2`, meaning\n+that it would work no matter what Guile version you decided to use.\n+\n+###### Corner case: Multiple versions of Guile on one system\n+\n+It is recommended to only install one version of Guile, so that build systems do\n+not get confused about which Guile to use.\n+\n+However, if you insist on having both Guile v2.2 and Guile v3.0 installed on\n+your system, then you need to **consistently** specify one of\n+`GUILE_EFFECTIVE_VERSION=3.0` or `GUILE_EFFECTIVE_VERSION=2.2` to all\n+`./configure` invocations for Guix and its dependencies.\n+\n+##### Installing Guile\n+\n+Guile is most likely already packaged for your distribution, so after you have\n+[chosen a Guile version](#choosing-a-guile-version-and-sticking-to-it), install\n+it via your distribution's package manager.\n+\n+If your distribution splits packages into `-dev`-suffixed and\n+non-`-dev`-suffixed sub-packages (as is the case for Debian-derived\n+distributions), please make sure to install both. For example, to install Guile\n+v2.2 on Debian/Ubuntu:\n+\n+```sh\n+apt install guile-2.2 guile-2.2-dev\n+```\n+\n+#### Mixing distribution packages and source-built packages\n+\n+At the time of writing, most distributions have _some_ of Guix's dependencies\n+packaged, but not all. This means that you may want to install the distribution\n+package for some dependencies, and manually build-from-source for others.\n+\n+Distribution packages usually install to `/usr`, which is different from the\n+default `./configure` prefix of source-built packages: `/usr/local`.\n+\n+This means that if you mix-and-match distribution packages and source-built\n+packages and do not specify exactly `--prefix=/usr` to `./configure` for\n+source-built packages, you will need to augment the `GUILE_LOAD_PATH` and\n+`GUILE_LOAD_COMPILED_PATH` environment variables so that Guile will look\n+under the right prefix and find your source-built packages.\n+\n+For example, if you are using Guile v2.2, and have Guile packages in the\n+`/usr/local` prefix, either add the following lines to your `.profile` or\n+`.bash_profile` so that the environment variable is properly set for all future\n+shell logins, or paste the lines into a POSIX-style shell to temporarily modify\n+the environment variables of your current shell session.\n+\n+```sh\n+# Help Guile v2.2.x find packages in /usr/local\n+export GUILE_LOAD_PATH=\"/usr/local/share/guile/site/2.2${GUILE_LOAD_PATH:+:}$GUILE_LOAD_PATH\"\n+export GUILE_LOAD_COMPILED_PATH=\"/usr/local/lib/guile/2.2/site-ccache${GUILE_LOAD_COMPILED_PATH:+:}$GUILE_COMPILED_LOAD_PATH\"\n+```\n+\n+Note that these environment variables are used to check for packages during\n+`./configure`, so they should be set as soon as possible should you want to use\n+a prefix other than `/usr`.\n+\n+<!-- ##### Example: Consistently using Guile 3.0 on Ubuntu -->\n+\n+<!-- For example, on Ubuntu, if you choose to use Guile 3.0 and install the -->\n+<!-- `guile-3.0` package, you want to make sure that if you also want to install the -->\n+<!-- `guile-git` package with `apt` that said `guile-git` package was built for Guile -->\n+<!-- v3.0. This can be checked by invoking the following: -->\n+\n+<!-- ``` -->\n+<!-- apt update -->\n+<!-- apt show guile-git -->\n+<!-- ``` -->\n+\n+#### Building and installing source-built packages\n+\n+***IMPORTANT**: A few dependencies have non-obvious quirks/erratas which are documented in the\n+sub-sections immediately below. Please read these sections before proceeding to\n+build and install these packages.*\n+\n+Although you should always refer to the README or INSTALL files for the most\n+accurate information, most of these dependencies use autoconf-style build\n+systems (check if there's a `configure.ac` file), and will likely do the right\n+thing with the following:\n+\n+Clone the repository and check out the latest release:\n+```sh\n+git clone <git-repo-of-dependency>/<dependency>.git\n+cd <dependency>\n+git tag -l  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+For autoconf-based build systems (if `./autogen.sh` or `configure.ac` exists at\n+the root of the repository):\n+\n+```sh\n+./autogen.sh || autoreconf -vfi\n+./configure --prefix=<prefix>\n+make\n+sudo make install\n+```\n+\n+For CMake-based build systems (if `CMakeLists.txt` exists at the root of the\n+repository):\n+\n+```sh\n+mkdir build && cd build\n+cmake .. -DCMAKE_INSTALL_PREFIX=<prefix>\n+sudo cmake --build . --target install\n+```\n+\n+If you choose not to specify exactly `--prefix=/usr` to `./configure`, please\n+make sure you've carefully read the [previous section] on mixing distribution\n+packages and source-built packages.\n+\n+##### Binding packages require `-dev`-suffixed packages\n+\n+Relevant for:\n+- Everyone\n+\n+When building bindings, the `-dev`-suffixed version of the original package\n+needs to be installed. For example, building `Guile-zlib` on Debian-derived\n+distributions requires that `zlib1g-dev` is installed.\n+\n+When using bindings, the `-dev`-suffixed version of the original package still\n+needs to be installed. This is particularly problematic when distribution\n+packages are mispackaged like `guile-sqlite3` is in Ubuntu Focal such that\n+installing `guile-sqlite3` does not automatically install `libsqlite3-dev` as a\n+dependency.\n+\n+Below is a list of relevant Guile bindings and their corresponding `-dev`\n+packages in Debian at the time of writing.\n+\n+| Guile binding package | -dev Debian package |\n+|-----------------------|---------------------|\n+| guile-gcrypt          | libgcrypt-dev       |\n+| guile-git             | libgit2-dev         |\n+| guile-lzlib           | liblz-dev           |\n+| guile-ssh             | libssh-dev          |\n+| guile-sqlite3         | libsqlite3-dev      |\n+| guile-zlib            | zlib1g-dev          |\n+\n+##### `guile-git` actually depends on `libgit2 >= 1.1`\n+\n+Relevant for:\n+- Those building `guile-git` from source against `libgit2 < 1.1`\n+- Those installing `guile-git` from their distribution where `guile-git` is\n+  built against `libgit2 < 1.1`\n+\n+As of v0.4.0, `guile-git` claims to only require `libgit2 >= 0.28.0`, however,\n+it actually requires `libgit2 >= 1.1`, otherwise, it will be confused by a\n+reference of `origin/keyring`: instead of interpreting the reference as \"the\n+'keyring' branch of the 'origin' remote\", the reference is interpreted as \"the\n+branch literally named 'origin/keyring'\"\n+\n+This is especially notable because Ubuntu Focal packages `libgit2 v0.28.4`, and\n+`guile-git` is built against it.\n+\n+Should you be in this situation, you need to build both `libgit2 v1.1.x` and\n+`guile-git` from source.\n+\n+Source: http://logs.guix.gnu.org/guix/2020-11-12.log#232527\n+\n+##### `{scheme,guile}-bytestructures` v1.0.8 and v1.0.9 are broken for Guile v2.2\n+\n+Relevant for:\n+- Those building `{scheme,guile}-bytestructures` from source against Guile v2.2\n+\n+Commit\n+[707eea3](https://github.com/TaylanUB/scheme-bytestructures/commit/707eea3a85e1e375e86702229ebf73d496377669)\n+introduced a regression for Guile v2.2 and was first included in v1.0.8, this\n+was later corrected in commit\n+[ec9a721](https://github.com/TaylanUB/scheme-bytestructures/commit/ec9a721957c17bcda13148f8faa5f06934431ff7)\n+and included in v1.1.0.\n+\n+TL;DR If you decided to use Guile v2.2, do not use `{scheme,guile}-bytestructures` v1.0.8 or v1.0.9.\n+\n+### Building and Installing Guix itself\n+\n+Start by cloning Guix:\n+\n+```\n+git clone https://git.savannah.gnu.org/git/guix.git\n+cd guix\n+```\n+\n+You will likely want to build the latest release, however, if the latest release\n+when you're reading this is still 1.2.0 then you may want to use 95aca29 instead\n+to avoid a problem in the GnuTLS test suite.\n+\n+```\n+git branch -a -l 'origin/version-*'  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+Bootstrap the build system:\n+```\n+./bootstrap\n+```\n+\n+Configure with the recommended `--localstatedir` flag:\n+```\n+./configure --localstatedir=/var\n+```\n+\n+Note: If you intend to hack on Guix in the future, you will need to supply the\n+same `--localstatedir=` flag for all future Guix `./configure` invocations. See\n+the last paragraph of this\n+[section](https://guix.gnu.org/manual/en/html_node/Requirements.html) for more\n+details.\n+\n+Build Guix (this will take a while):\n+```\n+make -j$(nproc)\n+```\n+\n+Install Guix:\n+\n+```\n+sudo make install\n+```\n+\n+### Post-\"build from source\" Setup\n+\n+#### Creating and starting a `guix-daemon-original` service with a fixed `argv[0]`\n+\n+At this point, guix will be installed to `${bindir}`, which is likely\n+`/usr/local/bin` if you did not override directory variables at\n+`./configure`-time. More information on standard Automake directory variables\n+can be found\n+[here](https://www.gnu.org/software/automake/manual/html_node/Standard-Directory-Variables.html).\n+\n+However, the Guix init scripts and service configurations for Upstart, systemd,\n+SysV, and OpenRC are installed to launch\n+`${localstatedir}/guix/profiles/per-user/root/current-guix/bin/guix-daemon`,\n+which does not yet exist, and will only exist after `root` performs their first\n+`guix pull`. TODO: Link to `guix pull` as root section\n+\n+We need to create a `-original` version of these init scripts that's pointed to\n+the binaries we just built and `make install`'ed in `${bindir}` (normally,\n+`/usr/local/bin`).\n+\n+Example for `systemd`, run as `root`:\n+\n+```sh\n+# Create guix-daemon-original.service by modifying guix-daemon.service\n+bindir=\"$(dirname $(command -v guix-daemon))\"\n+sed -E -e \"s|/\\S*/guix/profiles/per-user/root/current-guix/bin/guix-daemon|${bindir}/guix-daemon|\" /etc/systemd/system/guix-daemon.service > /etc/systemd/system/guix-daemon-original.service\n+chmod 664 /etc/systemd/system/guix-daemon-original.service\n+\n+# Make systemd recognize the new service\n+systemctl daemon-reload\n+\n+# Make sure that the non-working guix-daemon.service is stopped and disabled\n+systemctl stop guix-daemon\n+systemctl disable guix-daemon\n+\n+# Make sure that the working guix-daemon-original.service is started and enabled\n+systemctl enable guix-daemon-original\n+systemctl start guix-daemon-original\n+```\n+\n+#### Creating `guix-daemon` users / groups\n+\n+Please see the [relevant\n+section](https://guix.gnu.org/manual/en/html_node/Build-Environment-Setup.html)\n+in the Guix Reference Manual for more details.\n+\n+## Optional setup\n+\n+At this point, you are set up to [use Guix to build bitcoin](./README.md#usage).\n+However, if you want to polish your setup a bit and make it \"what Guix\n+intended\", then read the next few subsections.\n+\n+### Add an `/etc/profile.d` entry\n+\n+This section definitely does not apply to you if you installed Guix using:\n+1. The shell installer script\n+2. fanquake's Docker image\n+3. Debian's `guix` package\n+\n+#### Background\n+\n+Although Guix knows how to update itself and its packages, it does so in a\n+non-invasive way (it does not modify `/usr/local/bin/guix`).\n+\n+Instead, it does the following:\n+\n+- After a `guix pull`, it updates\n+  `/var/guix/profiles/per-user/$USER/current-guix`, and creates a symlink\n+  targeting this directory at `$HOME/.config/guix/current`\n+\n+- After a `guix install`, it updates\n+  `/var/guix/profiles/per-user/$USER/guix-profile`, and creates a symlink\n+  targeting this directory at `$HOME/.guix-profile`\n+\n+Therefore, in order for these operations to affect your shell/desktop sessions\n+(and for the principle of least astonishment to hold), their corresponding\n+directories have to be added to well-known environment variables like `$PATH`,\n+`$INFOPATH`, `$XDG_DATA_DIRS`, etc.\n+\n+In other words, if `$HOME/.config/guix/current/bin` does not exist in your\n+`$PATH`, a `guix pull` will have no effect on what `guix` you are using. Same\n+goes for `$HOME/.guix-profile/bin`, `guix install`, and installed packages.\n+\n+Helpfully, after a `guix pull` or `guix install`, a message will be printed like\n+so:\n+\n+```\n+hint: Consider setting the necessary environment variables by running:\n+\n+     GUIX_PROFILE=\"$HOME/.guix-profile\"\n+     . \"$GUIX_PROFILE/etc/profile\"\n+\n+Alternately, see `guix package --search-paths -p \"$HOME/.guix-profile\"'.\n+```\n+\n+However, this is somewhat tedious to do for both `guix pull` and `guix install`\n+for each user on the system that wants to properly use `guix`. I recommend that\n+you instead add an entry to `/etc/profile.d` instead. This is done by default\n+when installing the Debian package later than 1.2.0-4 and when using the shell\n+script installer.\n+\n+#### Instructions\n+\n+Create `/etc/profile.d/guix.sh` with the following content:\n+```sh\n+# _GUIX_PROFILE: `guix pull` profile\n+_GUIX_PROFILE=\"$HOME/.config/guix/current\"\n+if [ -L $_GUIX_PROFILE ]; then\n+  export PATH=\"$_GUIX_PROFILE/bin${PATH:+:}$PATH\"\n+  # Export INFOPATH so that the updated info pages can be found\n+  # and read by both /usr/bin/info and/or $GUIX_PROFILE/bin/info\n+  # When INFOPATH is unset, add a trailing colon so that Emacs\n+  # searches 'Info-default-directory-list'.\n+  export INFOPATH=\"$_GUIX_PROFILE/share/info:$INFOPATH\"\n+fi\n+\n+# GUIX_PROFILE: User's default profile\n+GUIX_PROFILE=\"$HOME/.guix-profile\"\n+[ -L $GUIX_PROFILE ] || return\n+GUIX_LOCPATH=\"$GUIX_PROFILE/lib/locale\"\n+export GUIX_PROFILE GUIX_LOCPATH\n+\n+[ -f \"$GUIX_PROFILE/etc/profile\" ] && . \"$GUIX_PROFILE/etc/profile\"\n+\n+# set XDG_DATA_DIRS to include Guix installations\n+export XDG_DATA_DIRS=\"$GUIX_PROFILE/share:${XDG_DATA_DIRS:-/usr/local/share/:/usr/share/}\"\n+```\n+\n+Please note that this will not take effect until the next shell or desktop\n+session (log out and log back in).\n+\n+### `guix pull` as root\n+\n+Before you do this, you need to read the section on [choosing your security\n+model][security-model] and adjust `guix` and `guix-daemon` flags according to\n+your choice, as invoking `guix pull` may pull substitutes from substitute\n+servers (which you may not want).\n+\n+As mentioned in a previous section, Guix expects\n+`${localstatedir}/guix/profiles/per-user/root/current-guix` to be populated with\n+`root`'s Guix profile, `guix pull`-ed and built by some former version of Guix.\n+However, this is not the case when we build from source. Therefore, we need to\n+perform a `guix pull` as `root`:\n+\n+```sh\n+sudo --login guix pull --branch=version-<latest-release-version>\n+# or\n+sudo --login guix pull --commit=<particular-commit>\n+```\n+\n+`guix pull` is quite a long process (especially if you're using",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r666794330",
      "id" : 666794330,
      "line" : 584,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2Njc5NDMzMA==",
      "original_commit_id" : "781812a9cd2b85485e300db58a1ca577a0749849",
      "original_line" : 584,
      "original_position" : 583,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 584,
      "pull_request_review_id" : 702557161,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-09T14:16:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666794330",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r666844825"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666844825"
         }
      },
      "author_association" : "MEMBER",
      "body" : "4a6d7454e8a2a666216ff0d6f7260922bb72296d:\r\n\r\n\"build Bitcoin Core\"",
      "commit_id" : "781812a9cd2b85485e300db58a1ca577a0749849",
      "created_at" : "2021-07-09T10:23:33Z",
      "diff_hunk" : "@@ -0,0 +1,787 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [â¤ skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both using the offical shell installer script\n+and using binary tarballs can be found in the GNU Guix Manual's [Binary\n+Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this\n+section](#add-an-etcprofiled-entry) for instructions on how to add a\n+`/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute Hippo)\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here][security-model]), v1.2.0 has a known problems when building\n+GnuTLS from source. Solutions and workarounds are documented\n+[here](#gnutls-test-suite-fail-status-request-revoked).\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+I strongly urge you to at least skim through the entire section once before you\n+start issuing commands, as it will save you a lot of unncessary pain and\n+anguish.\n+\n+### Installing common build tools\n+\n+There are a few basic build tools that are required for most things we'll build,\n+so let's install them now:\n+\n+Text transformation/i18n:\n+- `autopoint` (sometimes packaged in `gettext`)\n+- `help2man`\n+- `po4a`\n+- `texinfo`\n+\n+Build system tools:\n+- `g++` w/ C++11 support\n+- `libtool`\n+- `autoconf`\n+- `automake`\n+- `pkg-config` (sometimes packaged as `pkgconf`)\n+- `make`\n+- `cmake`\n+\n+Miscellaneous:\n+- `git`\n+- `gnupg`\n+- `python3`\n+\n+### Building and Installing Guix's dependencies\n+\n+In order to build Guix itself from source, we need to first make sure that the\n+necessary dependencies are installed and discoverable. The most up-to-date list\n+of Guix's dependencies is kept in the [\"Requirements\"\n+section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n+Reference Manual.\n+\n+Depending on your distribution, most or all of these dependencies may already be\n+packaged and installable without manually building and installing.\n+\n+For reference, the graphic below outlines Guix v1.3.0's dependency graph:\n+\n+![boostrap map](guix-v1.3.0-bootstrap.png)\n+\n+#### Guile\n+\n+##### Choosing a Guile version and sticking to it\n+\n+One of the first things you need to decide is which Guile version you want to\n+use: Guile v2.2 or Guile v3.0. Unlike the python2 to python3 transition, Guile\n+v2.2 and Guile v3.0 are largely compatible, as evidenced by the fact that most\n+Guile packages and even [Guix\n+itself](https://guix.gnu.org/en/blog/2020/guile-3-and-guix/) support running on\n+both.\n+\n+What is important here is that you **choose one**, and you **remain consistent**\n+with your choice throughout **all Guile-related packages**, no matter if they\n+are installed via the distribution's package manager or installed from source.\n+This is because the files for Guile packages are installed to directories which\n+are separated based on the Guile version.\n+\n+###### Example: Checking that Ubuntu's `guile-git` is compatible with your chosen Guile version\n+\n+On Ubuntu Focal:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-2.2, guile-bytestructures, libgit2-dev\n+...\n+```\n+\n+As you can see, the package `guile-git` depends on `guile-2.2`, meaning that it\n+was likely built for Guile v2.2. This means that if you decided to use Guile\n+v3.0 on Ubuntu Focal, you would need to build guile-git from source instead of\n+using the distribution package.\n+\n+On Ubuntu Hirsute:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-3.0 | guile-2.2, guile-bytestructures (>= 1.0.7-3~), libgit2-dev (>= 1.0)\n+...\n+```\n+\n+In this case, `guile-git` depends on either `guile-3.0` or `guile-2.2`, meaning\n+that it would work no matter what Guile version you decided to use.\n+\n+###### Corner case: Multiple versions of Guile on one system\n+\n+It is recommended to only install one version of Guile, so that build systems do\n+not get confused about which Guile to use.\n+\n+However, if you insist on having both Guile v2.2 and Guile v3.0 installed on\n+your system, then you need to **consistently** specify one of\n+`GUILE_EFFECTIVE_VERSION=3.0` or `GUILE_EFFECTIVE_VERSION=2.2` to all\n+`./configure` invocations for Guix and its dependencies.\n+\n+##### Installing Guile\n+\n+Guile is most likely already packaged for your distribution, so after you have\n+[chosen a Guile version](#choosing-a-guile-version-and-sticking-to-it), install\n+it via your distribution's package manager.\n+\n+If your distribution splits packages into `-dev`-suffixed and\n+non-`-dev`-suffixed sub-packages (as is the case for Debian-derived\n+distributions), please make sure to install both. For example, to install Guile\n+v2.2 on Debian/Ubuntu:\n+\n+```sh\n+apt install guile-2.2 guile-2.2-dev\n+```\n+\n+#### Mixing distribution packages and source-built packages\n+\n+At the time of writing, most distributions have _some_ of Guix's dependencies\n+packaged, but not all. This means that you may want to install the distribution\n+package for some dependencies, and manually build-from-source for others.\n+\n+Distribution packages usually install to `/usr`, which is different from the\n+default `./configure` prefix of source-built packages: `/usr/local`.\n+\n+This means that if you mix-and-match distribution packages and source-built\n+packages and do not specify exactly `--prefix=/usr` to `./configure` for\n+source-built packages, you will need to augment the `GUILE_LOAD_PATH` and\n+`GUILE_LOAD_COMPILED_PATH` environment variables so that Guile will look\n+under the right prefix and find your source-built packages.\n+\n+For example, if you are using Guile v2.2, and have Guile packages in the\n+`/usr/local` prefix, either add the following lines to your `.profile` or\n+`.bash_profile` so that the environment variable is properly set for all future\n+shell logins, or paste the lines into a POSIX-style shell to temporarily modify\n+the environment variables of your current shell session.\n+\n+```sh\n+# Help Guile v2.2.x find packages in /usr/local\n+export GUILE_LOAD_PATH=\"/usr/local/share/guile/site/2.2${GUILE_LOAD_PATH:+:}$GUILE_LOAD_PATH\"\n+export GUILE_LOAD_COMPILED_PATH=\"/usr/local/lib/guile/2.2/site-ccache${GUILE_LOAD_COMPILED_PATH:+:}$GUILE_COMPILED_LOAD_PATH\"\n+```\n+\n+Note that these environment variables are used to check for packages during\n+`./configure`, so they should be set as soon as possible should you want to use\n+a prefix other than `/usr`.\n+\n+<!-- ##### Example: Consistently using Guile 3.0 on Ubuntu -->\n+\n+<!-- For example, on Ubuntu, if you choose to use Guile 3.0 and install the -->\n+<!-- `guile-3.0` package, you want to make sure that if you also want to install the -->\n+<!-- `guile-git` package with `apt` that said `guile-git` package was built for Guile -->\n+<!-- v3.0. This can be checked by invoking the following: -->\n+\n+<!-- ``` -->\n+<!-- apt update -->\n+<!-- apt show guile-git -->\n+<!-- ``` -->\n+\n+#### Building and installing source-built packages\n+\n+***IMPORTANT**: A few dependencies have non-obvious quirks/erratas which are documented in the\n+sub-sections immediately below. Please read these sections before proceeding to\n+build and install these packages.*\n+\n+Although you should always refer to the README or INSTALL files for the most\n+accurate information, most of these dependencies use autoconf-style build\n+systems (check if there's a `configure.ac` file), and will likely do the right\n+thing with the following:\n+\n+Clone the repository and check out the latest release:\n+```sh\n+git clone <git-repo-of-dependency>/<dependency>.git\n+cd <dependency>\n+git tag -l  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+For autoconf-based build systems (if `./autogen.sh` or `configure.ac` exists at\n+the root of the repository):\n+\n+```sh\n+./autogen.sh || autoreconf -vfi\n+./configure --prefix=<prefix>\n+make\n+sudo make install\n+```\n+\n+For CMake-based build systems (if `CMakeLists.txt` exists at the root of the\n+repository):\n+\n+```sh\n+mkdir build && cd build\n+cmake .. -DCMAKE_INSTALL_PREFIX=<prefix>\n+sudo cmake --build . --target install\n+```\n+\n+If you choose not to specify exactly `--prefix=/usr` to `./configure`, please\n+make sure you've carefully read the [previous section] on mixing distribution\n+packages and source-built packages.\n+\n+##### Binding packages require `-dev`-suffixed packages\n+\n+Relevant for:\n+- Everyone\n+\n+When building bindings, the `-dev`-suffixed version of the original package\n+needs to be installed. For example, building `Guile-zlib` on Debian-derived\n+distributions requires that `zlib1g-dev` is installed.\n+\n+When using bindings, the `-dev`-suffixed version of the original package still\n+needs to be installed. This is particularly problematic when distribution\n+packages are mispackaged like `guile-sqlite3` is in Ubuntu Focal such that\n+installing `guile-sqlite3` does not automatically install `libsqlite3-dev` as a\n+dependency.\n+\n+Below is a list of relevant Guile bindings and their corresponding `-dev`\n+packages in Debian at the time of writing.\n+\n+| Guile binding package | -dev Debian package |\n+|-----------------------|---------------------|\n+| guile-gcrypt          | libgcrypt-dev       |\n+| guile-git             | libgit2-dev         |\n+| guile-lzlib           | liblz-dev           |\n+| guile-ssh             | libssh-dev          |\n+| guile-sqlite3         | libsqlite3-dev      |\n+| guile-zlib            | zlib1g-dev          |\n+\n+##### `guile-git` actually depends on `libgit2 >= 1.1`\n+\n+Relevant for:\n+- Those building `guile-git` from source against `libgit2 < 1.1`\n+- Those installing `guile-git` from their distribution where `guile-git` is\n+  built against `libgit2 < 1.1`\n+\n+As of v0.4.0, `guile-git` claims to only require `libgit2 >= 0.28.0`, however,\n+it actually requires `libgit2 >= 1.1`, otherwise, it will be confused by a\n+reference of `origin/keyring`: instead of interpreting the reference as \"the\n+'keyring' branch of the 'origin' remote\", the reference is interpreted as \"the\n+branch literally named 'origin/keyring'\"\n+\n+This is especially notable because Ubuntu Focal packages `libgit2 v0.28.4`, and\n+`guile-git` is built against it.\n+\n+Should you be in this situation, you need to build both `libgit2 v1.1.x` and\n+`guile-git` from source.\n+\n+Source: http://logs.guix.gnu.org/guix/2020-11-12.log#232527\n+\n+##### `{scheme,guile}-bytestructures` v1.0.8 and v1.0.9 are broken for Guile v2.2\n+\n+Relevant for:\n+- Those building `{scheme,guile}-bytestructures` from source against Guile v2.2\n+\n+Commit\n+[707eea3](https://github.com/TaylanUB/scheme-bytestructures/commit/707eea3a85e1e375e86702229ebf73d496377669)\n+introduced a regression for Guile v2.2 and was first included in v1.0.8, this\n+was later corrected in commit\n+[ec9a721](https://github.com/TaylanUB/scheme-bytestructures/commit/ec9a721957c17bcda13148f8faa5f06934431ff7)\n+and included in v1.1.0.\n+\n+TL;DR If you decided to use Guile v2.2, do not use `{scheme,guile}-bytestructures` v1.0.8 or v1.0.9.\n+\n+### Building and Installing Guix itself\n+\n+Start by cloning Guix:\n+\n+```\n+git clone https://git.savannah.gnu.org/git/guix.git\n+cd guix\n+```\n+\n+You will likely want to build the latest release, however, if the latest release\n+when you're reading this is still 1.2.0 then you may want to use 95aca29 instead\n+to avoid a problem in the GnuTLS test suite.\n+\n+```\n+git branch -a -l 'origin/version-*'  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+Bootstrap the build system:\n+```\n+./bootstrap\n+```\n+\n+Configure with the recommended `--localstatedir` flag:\n+```\n+./configure --localstatedir=/var\n+```\n+\n+Note: If you intend to hack on Guix in the future, you will need to supply the\n+same `--localstatedir=` flag for all future Guix `./configure` invocations. See\n+the last paragraph of this\n+[section](https://guix.gnu.org/manual/en/html_node/Requirements.html) for more\n+details.\n+\n+Build Guix (this will take a while):\n+```\n+make -j$(nproc)\n+```\n+\n+Install Guix:\n+\n+```\n+sudo make install\n+```\n+\n+### Post-\"build from source\" Setup\n+\n+#### Creating and starting a `guix-daemon-original` service with a fixed `argv[0]`\n+\n+At this point, guix will be installed to `${bindir}`, which is likely\n+`/usr/local/bin` if you did not override directory variables at\n+`./configure`-time. More information on standard Automake directory variables\n+can be found\n+[here](https://www.gnu.org/software/automake/manual/html_node/Standard-Directory-Variables.html).\n+\n+However, the Guix init scripts and service configurations for Upstart, systemd,\n+SysV, and OpenRC are installed to launch\n+`${localstatedir}/guix/profiles/per-user/root/current-guix/bin/guix-daemon`,\n+which does not yet exist, and will only exist after `root` performs their first\n+`guix pull`. TODO: Link to `guix pull` as root section\n+\n+We need to create a `-original` version of these init scripts that's pointed to\n+the binaries we just built and `make install`'ed in `${bindir}` (normally,\n+`/usr/local/bin`).\n+\n+Example for `systemd`, run as `root`:\n+\n+```sh\n+# Create guix-daemon-original.service by modifying guix-daemon.service\n+bindir=\"$(dirname $(command -v guix-daemon))\"\n+sed -E -e \"s|/\\S*/guix/profiles/per-user/root/current-guix/bin/guix-daemon|${bindir}/guix-daemon|\" /etc/systemd/system/guix-daemon.service > /etc/systemd/system/guix-daemon-original.service\n+chmod 664 /etc/systemd/system/guix-daemon-original.service\n+\n+# Make systemd recognize the new service\n+systemctl daemon-reload\n+\n+# Make sure that the non-working guix-daemon.service is stopped and disabled\n+systemctl stop guix-daemon\n+systemctl disable guix-daemon\n+\n+# Make sure that the working guix-daemon-original.service is started and enabled\n+systemctl enable guix-daemon-original\n+systemctl start guix-daemon-original\n+```\n+\n+#### Creating `guix-daemon` users / groups\n+\n+Please see the [relevant\n+section](https://guix.gnu.org/manual/en/html_node/Build-Environment-Setup.html)\n+in the Guix Reference Manual for more details.\n+\n+## Optional setup\n+\n+At this point, you are set up to [use Guix to build bitcoin](./README.md#usage).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r666844825",
      "id" : 666844825,
      "line" : 481,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2Njg0NDgyNQ==",
      "original_commit_id" : "4a6d7454e8a2a666216ff0d6f7260922bb72296d",
      "original_line" : 481,
      "original_position" : 481,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 481,
      "pull_request_review_id" : 702907608,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-09T10:40:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666844825",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r666846667"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666846667"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same commit: Is it really needed to add a 0.2 MB binary blob to the git tree? Is it expected that the blob is updated on every new guix version? Background is that `.git` has to store the file forever, even if it is removed in a later commit.\r\n\r\nIt could be an external link or at least optimized (still 0.1 MB, though)\r\n\r\n```\r\n![boostrap map](https://user-images.githubusercontent.com/6399679/125064185-a9a59880-e0b0-11eb-82c1-9b8e5dc9950d.png)\r\n",
      "commit_id" : "781812a9cd2b85485e300db58a1ca577a0749849",
      "created_at" : "2021-07-09T10:26:54Z",
      "diff_hunk" : "@@ -0,0 +1,787 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [â¤ skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both using the offical shell installer script\n+and using binary tarballs can be found in the GNU Guix Manual's [Binary\n+Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this\n+section](#add-an-etcprofiled-entry) for instructions on how to add a\n+`/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute Hippo)\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here][security-model]), v1.2.0 has a known problems when building\n+GnuTLS from source. Solutions and workarounds are documented\n+[here](#gnutls-test-suite-fail-status-request-revoked).\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+I strongly urge you to at least skim through the entire section once before you\n+start issuing commands, as it will save you a lot of unncessary pain and\n+anguish.\n+\n+### Installing common build tools\n+\n+There are a few basic build tools that are required for most things we'll build,\n+so let's install them now:\n+\n+Text transformation/i18n:\n+- `autopoint` (sometimes packaged in `gettext`)\n+- `help2man`\n+- `po4a`\n+- `texinfo`\n+\n+Build system tools:\n+- `g++` w/ C++11 support\n+- `libtool`\n+- `autoconf`\n+- `automake`\n+- `pkg-config` (sometimes packaged as `pkgconf`)\n+- `make`\n+- `cmake`\n+\n+Miscellaneous:\n+- `git`\n+- `gnupg`\n+- `python3`\n+\n+### Building and Installing Guix's dependencies\n+\n+In order to build Guix itself from source, we need to first make sure that the\n+necessary dependencies are installed and discoverable. The most up-to-date list\n+of Guix's dependencies is kept in the [\"Requirements\"\n+section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n+Reference Manual.\n+\n+Depending on your distribution, most or all of these dependencies may already be\n+packaged and installable without manually building and installing.\n+\n+For reference, the graphic below outlines Guix v1.3.0's dependency graph:\n+\n+![boostrap map](guix-v1.3.0-bootstrap.png)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r666846667",
      "id" : 666846667,
      "line" : 167,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2Njg0NjY2Nw==",
      "original_commit_id" : "4a6d7454e8a2a666216ff0d6f7260922bb72296d",
      "original_line" : 167,
      "original_position" : 167,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 167,
      "pull_request_review_id" : 702907608,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-09T11:05:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666846667",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r666854727"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666854727"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(I used https://github.com/bitcoin-core/bitcoin-maintainer-tools/blob/master/optimize-pngs.py for this)",
      "commit_id" : "781812a9cd2b85485e300db58a1ca577a0749849",
      "created_at" : "2021-07-09T10:41:29Z",
      "diff_hunk" : "@@ -0,0 +1,787 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [â¤ skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both using the offical shell installer script\n+and using binary tarballs can be found in the GNU Guix Manual's [Binary\n+Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this\n+section](#add-an-etcprofiled-entry) for instructions on how to add a\n+`/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute Hippo)\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here][security-model]), v1.2.0 has a known problems when building\n+GnuTLS from source. Solutions and workarounds are documented\n+[here](#gnutls-test-suite-fail-status-request-revoked).\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+I strongly urge you to at least skim through the entire section once before you\n+start issuing commands, as it will save you a lot of unncessary pain and\n+anguish.\n+\n+### Installing common build tools\n+\n+There are a few basic build tools that are required for most things we'll build,\n+so let's install them now:\n+\n+Text transformation/i18n:\n+- `autopoint` (sometimes packaged in `gettext`)\n+- `help2man`\n+- `po4a`\n+- `texinfo`\n+\n+Build system tools:\n+- `g++` w/ C++11 support\n+- `libtool`\n+- `autoconf`\n+- `automake`\n+- `pkg-config` (sometimes packaged as `pkgconf`)\n+- `make`\n+- `cmake`\n+\n+Miscellaneous:\n+- `git`\n+- `gnupg`\n+- `python3`\n+\n+### Building and Installing Guix's dependencies\n+\n+In order to build Guix itself from source, we need to first make sure that the\n+necessary dependencies are installed and discoverable. The most up-to-date list\n+of Guix's dependencies is kept in the [\"Requirements\"\n+section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n+Reference Manual.\n+\n+Depending on your distribution, most or all of these dependencies may already be\n+packaged and installable without manually building and installing.\n+\n+For reference, the graphic below outlines Guix v1.3.0's dependency graph:\n+\n+![boostrap map](guix-v1.3.0-bootstrap.png)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r666854727",
      "id" : 666854727,
      "in_reply_to_id" : 666846667,
      "line" : 167,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2Njg1NDcyNw==",
      "original_commit_id" : "4a6d7454e8a2a666216ff0d6f7260922bb72296d",
      "original_line" : 167,
      "original_position" : 167,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 167,
      "pull_request_review_id" : 702920803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-09T10:41:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/666854727",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r667188444"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/667188444"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think this'll be much less relevant once `guix` is available as a package on most stable distros.\r\n\r\nI don't mind how it's hosted so long as people can access it. Where would be a place that makes sense?",
      "commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "created_at" : "2021-07-09T20:12:24Z",
      "diff_hunk" : "@@ -0,0 +1,787 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [â¤ skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both using the offical shell installer script\n+and using binary tarballs can be found in the GNU Guix Manual's [Binary\n+Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this\n+section](#add-an-etcprofiled-entry) for instructions on how to add a\n+`/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute Hippo)\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here][security-model]), v1.2.0 has a known problems when building\n+GnuTLS from source. Solutions and workarounds are documented\n+[here](#gnutls-test-suite-fail-status-request-revoked).\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+I strongly urge you to at least skim through the entire section once before you\n+start issuing commands, as it will save you a lot of unncessary pain and\n+anguish.\n+\n+### Installing common build tools\n+\n+There are a few basic build tools that are required for most things we'll build,\n+so let's install them now:\n+\n+Text transformation/i18n:\n+- `autopoint` (sometimes packaged in `gettext`)\n+- `help2man`\n+- `po4a`\n+- `texinfo`\n+\n+Build system tools:\n+- `g++` w/ C++11 support\n+- `libtool`\n+- `autoconf`\n+- `automake`\n+- `pkg-config` (sometimes packaged as `pkgconf`)\n+- `make`\n+- `cmake`\n+\n+Miscellaneous:\n+- `git`\n+- `gnupg`\n+- `python3`\n+\n+### Building and Installing Guix's dependencies\n+\n+In order to build Guix itself from source, we need to first make sure that the\n+necessary dependencies are installed and discoverable. The most up-to-date list\n+of Guix's dependencies is kept in the [\"Requirements\"\n+section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n+Reference Manual.\n+\n+Depending on your distribution, most or all of these dependencies may already be\n+packaged and installable without manually building and installing.\n+\n+For reference, the graphic below outlines Guix v1.3.0's dependency graph:\n+\n+![boostrap map](guix-v1.3.0-bootstrap.png)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r667188444",
      "id" : 667188444,
      "in_reply_to_id" : 666846667,
      "line" : 167,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzE4ODQ0NA==",
      "original_commit_id" : "4a6d7454e8a2a666216ff0d6f7260922bb72296d",
      "original_line" : 167,
      "original_position" : 167,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 167,
      "pull_request_review_id" : 703363707,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-09T21:42:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/667188444",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r667734907"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/667734907"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agree. I think the main reason to leave `-debug` out has been because the files are huge, and due to determinism can be generated on demand anyway by anyone with enough dev expertise to need them. But not confusing users with a lot of files makes sense too.",
      "commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "created_at" : "2021-07-12T08:36:44Z",
      "diff_hunk" : "@@ -212,93 +154,84 @@ Codesigner only: Sign the windows binaries:\n \n Codesigner only: Commit the detached codesign payloads:\n \n-    cd ~/bitcoin-detached-sigs\n-    checkout the appropriate branch for this release series\n-    rm -rf *\n-    tar xf signature-osx.tar.gz\n-    tar xf signature-win.tar.gz\n-    git add -A\n-    git commit -m \"point to ${VERSION}\"\n-    git tag -s v${VERSION} HEAD\n-    git push the current branch and new tag\n+```sh\n+pushd ./bitcoin-detached-sigs\n+# checkout the appropriate branch for this release series\n+rm -rf ./*\n+tar xf signature-osx.tar.gz\n+tar xf signature-win.tar.gz\n+git add -A\n+git commit -m \"point to ${VERSION}\"\n+git tag -s \"v${VERSION}\" HEAD\n+git push the current branch and new tag\n+popd\n+```\n \n Non-codesigners: wait for Windows/macOS detached signatures:\n \n - Once the Windows/macOS builds each have 3 matching signatures, they will be signed with their respective release keys.\n - Detached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin-core/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n \n-Create (and optionally verify) the signed macOS binary:\n+Create (and optionally verify) the codesigned outputs:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    mv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n-    popd\n+- [Codesigning](/contrib/guix/README.md#codesigning)\n \n-Create (and optionally verify) the signed Windows binaries:\n+Commit your signature for the signed macOS/Windows binaries:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    mv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n-    popd\n+```sh\n+pushd ./guix.sigs\n+git add \"${VERSION}/${SIGNER}\"/all.SHA256SUMS{,.asc}\n+git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n+git push  # Assuming you can push to the guix.sigs tree\n+popd\n+```\n \n-Commit your signature for the signed macOS/Windows binaries:\n+### After 3 or more people have guix-built and their results match:\n \n-    pushd gitian.sigs\n-    git add ${VERSION}-osx-signed/\"${SIGNER}\"\n-    git add ${VERSION}-win-signed/\"${SIGNER}\"\n-    git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n-    git push  # Assuming you can push to the gitian.sigs tree\n-    popd\n+Combine `all.SHA256SUMS` and `all.SHA256SUMS.asc` into a clear-signed\n+`SHA256SUMS.asc` message:\n \n-### After 3 or more people have gitian-built and their results match:\n+```sh\n+echo -e \"-----BEGIN PGP SIGNED MESSAGE-----\\nHash: SHA256\\n\\n$(cat all.SHA256SUMS)\\n$(cat filename.txt.asc)\" > SHA256SUMS.asc\n+```\n \n-- Create `SHA256SUMS.asc` for the builds, and GPG-sign it:\n+Here's an equivalent, more readable command if you're confident that you won't\n+mess up whitespaces when copy-pasting:\n \n ```bash\n-sha256sum * > SHA256SUMS\n-```\n+cat << EOF > SHA256SUMS.asc\n+-----BEGIN PGP SIGNED MESSAGE-----\n+Hash: SHA256\n \n-The list of files should be:\n-```\n-bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz\n-bitcoin-${VERSION}-riscv64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-x86_64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-osx64.tar.gz\n-bitcoin-${VERSION}-osx.dmg\n-bitcoin-${VERSION}.tar.gz\n-bitcoin-${VERSION}-win64-setup.exe\n-bitcoin-${VERSION}-win64.zip\n+$(cat all.SHA256SUMS)\n+$(cat all.SHA256SUMS.asc)\n+EOF\n ```\n-The `*-debug*` files generated by the gitian build contain debug symbols\n-for troubleshooting by developers. It is assumed that anyone that is interested\n-in debugging can run gitian to generate the files for themselves. To avoid\n-end-user confusion about which file to pick, as well as save storage\n-space *do not upload these to the bitcoincore.org server, nor put them in the torrent*.\n \n-- GPG-sign it, delete the unsigned file:\n-```\n-gpg --digest-algo sha256 --clearsign SHA256SUMS # outputs SHA256SUMS.asc\n-rm SHA256SUMS\n-```\n-(the digest algorithm is forced to sha256 to avoid confusion of the `Hash:` header that GPG adds with the SHA256 used for the files)\n-Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spurious/nonsensical entry.\n+- Upload to the bitcoincore.org server (`/var/www/bin/bitcoin-core-${VERSION}`):\n+    1. The contents of `./bitcoin/guix-build-${VERSION}/output`, except for\n+       `*-debug*` files.\n \n-- Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoincore.org server\n-  into `/var/www/bin/bitcoin-core-${VERSION}`\n+       The `*-debug*` files generated by the guix build contain debug symbols\n+       for troubleshooting by developers. It is assumed that anyone that is\n+       interested in debugging can run guix to generate the files for\n+       themselves. To avoid end-user confusion about which file to pick, as well\n+       as save storage space *do not upload these to the bitcoincore.org server,\n+       nor put them in the torrent*.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r667734907",
      "id" : 667734907,
      "line" : 220,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzczNDkwNw==",
      "original_commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "original_line" : 220,
      "original_position" : 310,
      "original_start_line" : null,
      "path" : "doc/release-process.md",
      "position" : 310,
      "pull_request_review_id" : 703856231,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T08:36:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/667734907",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r667739011"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/667739011"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Speaking of filenames, I have one manual rename left in my release script (which prepares the distribution directory for upload to bitcoincore[.]org) at the moment:\r\n```bash\r\nmv ${SOURCEDIR}/bitcoin-osx-signed.dmg ${DESTDIR}/bitcoin-${VERSIONTO}-osx.dmg\r\n```\r\nI guess this is no longer needed with the GUIX build, as the signed output will contain the version number?",
      "commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "created_at" : "2021-07-12T08:42:26Z",
      "diff_hunk" : "@@ -212,93 +154,84 @@ Codesigner only: Sign the windows binaries:\n \n Codesigner only: Commit the detached codesign payloads:\n \n-    cd ~/bitcoin-detached-sigs\n-    checkout the appropriate branch for this release series\n-    rm -rf *\n-    tar xf signature-osx.tar.gz\n-    tar xf signature-win.tar.gz\n-    git add -A\n-    git commit -m \"point to ${VERSION}\"\n-    git tag -s v${VERSION} HEAD\n-    git push the current branch and new tag\n+```sh\n+pushd ./bitcoin-detached-sigs\n+# checkout the appropriate branch for this release series\n+rm -rf ./*\n+tar xf signature-osx.tar.gz\n+tar xf signature-win.tar.gz\n+git add -A\n+git commit -m \"point to ${VERSION}\"\n+git tag -s \"v${VERSION}\" HEAD\n+git push the current branch and new tag\n+popd\n+```\n \n Non-codesigners: wait for Windows/macOS detached signatures:\n \n - Once the Windows/macOS builds each have 3 matching signatures, they will be signed with their respective release keys.\n - Detached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin-core/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n \n-Create (and optionally verify) the signed macOS binary:\n+Create (and optionally verify) the codesigned outputs:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    mv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n-    popd\n+- [Codesigning](/contrib/guix/README.md#codesigning)\n \n-Create (and optionally verify) the signed Windows binaries:\n+Commit your signature for the signed macOS/Windows binaries:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    mv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n-    popd\n+```sh\n+pushd ./guix.sigs\n+git add \"${VERSION}/${SIGNER}\"/all.SHA256SUMS{,.asc}\n+git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n+git push  # Assuming you can push to the guix.sigs tree\n+popd\n+```\n \n-Commit your signature for the signed macOS/Windows binaries:\n+### After 3 or more people have guix-built and their results match:\n \n-    pushd gitian.sigs\n-    git add ${VERSION}-osx-signed/\"${SIGNER}\"\n-    git add ${VERSION}-win-signed/\"${SIGNER}\"\n-    git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n-    git push  # Assuming you can push to the gitian.sigs tree\n-    popd\n+Combine `all.SHA256SUMS` and `all.SHA256SUMS.asc` into a clear-signed\n+`SHA256SUMS.asc` message:\n \n-### After 3 or more people have gitian-built and their results match:\n+```sh\n+echo -e \"-----BEGIN PGP SIGNED MESSAGE-----\\nHash: SHA256\\n\\n$(cat all.SHA256SUMS)\\n$(cat filename.txt.asc)\" > SHA256SUMS.asc\n+```\n \n-- Create `SHA256SUMS.asc` for the builds, and GPG-sign it:\n+Here's an equivalent, more readable command if you're confident that you won't\n+mess up whitespaces when copy-pasting:\n \n ```bash\n-sha256sum * > SHA256SUMS\n-```\n+cat << EOF > SHA256SUMS.asc\n+-----BEGIN PGP SIGNED MESSAGE-----\n+Hash: SHA256\n \n-The list of files should be:\n-```\n-bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz\n-bitcoin-${VERSION}-riscv64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-x86_64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-osx64.tar.gz\n-bitcoin-${VERSION}-osx.dmg\n-bitcoin-${VERSION}.tar.gz\n-bitcoin-${VERSION}-win64-setup.exe\n-bitcoin-${VERSION}-win64.zip\n+$(cat all.SHA256SUMS)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r667739011",
      "id" : 667739011,
      "line" : 206,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NzczOTAxMQ==",
      "original_commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "original_line" : 206,
      "original_position" : 282,
      "original_start_line" : null,
      "path" : "doc/release-process.md",
      "position" : 282,
      "pull_request_review_id" : 703861515,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T08:42:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/667739011",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r667743780"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/667743780"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`bitcoincore.org` does not have functionality to automatically generate torrents. This has been done manually (I use `transmission-gtk`) for a long time.",
      "commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "created_at" : "2021-07-12T08:49:10Z",
      "diff_hunk" : "@@ -212,93 +154,84 @@ Codesigner only: Sign the windows binaries:\n \n Codesigner only: Commit the detached codesign payloads:\n \n-    cd ~/bitcoin-detached-sigs\n-    checkout the appropriate branch for this release series\n-    rm -rf *\n-    tar xf signature-osx.tar.gz\n-    tar xf signature-win.tar.gz\n-    git add -A\n-    git commit -m \"point to ${VERSION}\"\n-    git tag -s v${VERSION} HEAD\n-    git push the current branch and new tag\n+```sh\n+pushd ./bitcoin-detached-sigs\n+# checkout the appropriate branch for this release series\n+rm -rf ./*\n+tar xf signature-osx.tar.gz\n+tar xf signature-win.tar.gz\n+git add -A\n+git commit -m \"point to ${VERSION}\"\n+git tag -s \"v${VERSION}\" HEAD\n+git push the current branch and new tag\n+popd\n+```\n \n Non-codesigners: wait for Windows/macOS detached signatures:\n \n - Once the Windows/macOS builds each have 3 matching signatures, they will be signed with their respective release keys.\n - Detached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin-core/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n \n-Create (and optionally verify) the signed macOS binary:\n+Create (and optionally verify) the codesigned outputs:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    mv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n-    popd\n+- [Codesigning](/contrib/guix/README.md#codesigning)\n \n-Create (and optionally verify) the signed Windows binaries:\n+Commit your signature for the signed macOS/Windows binaries:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    mv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n-    popd\n+```sh\n+pushd ./guix.sigs\n+git add \"${VERSION}/${SIGNER}\"/all.SHA256SUMS{,.asc}\n+git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n+git push  # Assuming you can push to the guix.sigs tree\n+popd\n+```\n \n-Commit your signature for the signed macOS/Windows binaries:\n+### After 3 or more people have guix-built and their results match:\n \n-    pushd gitian.sigs\n-    git add ${VERSION}-osx-signed/\"${SIGNER}\"\n-    git add ${VERSION}-win-signed/\"${SIGNER}\"\n-    git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n-    git push  # Assuming you can push to the gitian.sigs tree\n-    popd\n+Combine `all.SHA256SUMS` and `all.SHA256SUMS.asc` into a clear-signed\n+`SHA256SUMS.asc` message:\n \n-### After 3 or more people have gitian-built and their results match:\n+```sh\n+echo -e \"-----BEGIN PGP SIGNED MESSAGE-----\\nHash: SHA256\\n\\n$(cat all.SHA256SUMS)\\n$(cat filename.txt.asc)\" > SHA256SUMS.asc\n+```\n \n-- Create `SHA256SUMS.asc` for the builds, and GPG-sign it:\n+Here's an equivalent, more readable command if you're confident that you won't\n+mess up whitespaces when copy-pasting:\n \n ```bash\n-sha256sum * > SHA256SUMS\n-```\n+cat << EOF > SHA256SUMS.asc\n+-----BEGIN PGP SIGNED MESSAGE-----\n+Hash: SHA256\n \n-The list of files should be:\n-```\n-bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz\n-bitcoin-${VERSION}-riscv64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-x86_64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-osx64.tar.gz\n-bitcoin-${VERSION}-osx.dmg\n-bitcoin-${VERSION}.tar.gz\n-bitcoin-${VERSION}-win64-setup.exe\n-bitcoin-${VERSION}-win64.zip\n+$(cat all.SHA256SUMS)\n+$(cat all.SHA256SUMS.asc)\n+EOF\n ```\n-The `*-debug*` files generated by the gitian build contain debug symbols\n-for troubleshooting by developers. It is assumed that anyone that is interested\n-in debugging can run gitian to generate the files for themselves. To avoid\n-end-user confusion about which file to pick, as well as save storage\n-space *do not upload these to the bitcoincore.org server, nor put them in the torrent*.\n \n-- GPG-sign it, delete the unsigned file:\n-```\n-gpg --digest-algo sha256 --clearsign SHA256SUMS # outputs SHA256SUMS.asc\n-rm SHA256SUMS\n-```\n-(the digest algorithm is forced to sha256 to avoid confusion of the `Hash:` header that GPG adds with the SHA256 used for the files)\n-Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spurious/nonsensical entry.\n+- Upload to the bitcoincore.org server (`/var/www/bin/bitcoin-core-${VERSION}`):\n+    1. The contents of `./bitcoin/guix-build-${VERSION}/output`, except for\n+       `*-debug*` files.\n \n-- Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoincore.org server\n-  into `/var/www/bin/bitcoin-core-${VERSION}`\n+       The `*-debug*` files generated by the guix build contain debug symbols\n+       for troubleshooting by developers. It is assumed that anyone that is\n+       interested in debugging can run guix to generate the files for\n+       themselves. To avoid end-user confusion about which file to pick, as well\n+       as save storage space *do not upload these to the bitcoincore.org server,\n+       nor put them in the torrent*.\n \n-- A `.torrent` will appear in the directory after a few minutes. Optionally help seed this torrent. To get the `magnet:` URI use:\n-```bash\n-transmission-show -m <torrent file>\n-```\n-Insert the magnet URI into the announcement sent to mailing lists. This permits\n-people without access to `bitcoincore.org` to download the binary distribution.\n-Also put it into the `optional_magnetlink:` slot in the YAML file for\n-bitcoincore.org.\n+    2. The combined clear-signed message you just created `SHA256SUMS.asc`\n+\n+- A `.torrent` will appear in the directory after a few minutes. Optionally help",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r667743780",
      "id" : 667743780,
      "line" : 224,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2Nzc0Mzc4MA==",
      "original_commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "original_line" : 224,
      "original_position" : 322,
      "original_start_line" : null,
      "path" : "doc/release-process.md",
      "position" : 322,
      "pull_request_review_id" : 703867743,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T08:49:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/667743780",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r667759673"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/667759673"
         }
      },
      "author_association" : "MEMBER",
      "body" : "FWIW, I use the following trackers:\r\n```\r\nudp://tracker.openbittorrent.com:80\r\nudp://tracker.opentrackr.org:1337/announce\r\nudp://tracker.coppersurfer.tk:6969/announce\r\n\r\nudp://tracker.leechers-paradise.org:6969/announce\r\nudp://explodie.org:6969/announce\r\nudp://tracker.torrent.eu.org:451/announce\r\n\r\nudp://tracker.bitcoin.sprovoost.nl:6969\r\n```\r\nAfter adding @Sjors's tracker, you need to ping him with the magnet hash so he  can whitelist it.\r\n(I don't think these details make sense to document in the release process, it seems to be kind of transient information suspect to change, but just FYI)",
      "commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "created_at" : "2021-07-12T09:10:33Z",
      "diff_hunk" : "@@ -212,93 +154,84 @@ Codesigner only: Sign the windows binaries:\n \n Codesigner only: Commit the detached codesign payloads:\n \n-    cd ~/bitcoin-detached-sigs\n-    checkout the appropriate branch for this release series\n-    rm -rf *\n-    tar xf signature-osx.tar.gz\n-    tar xf signature-win.tar.gz\n-    git add -A\n-    git commit -m \"point to ${VERSION}\"\n-    git tag -s v${VERSION} HEAD\n-    git push the current branch and new tag\n+```sh\n+pushd ./bitcoin-detached-sigs\n+# checkout the appropriate branch for this release series\n+rm -rf ./*\n+tar xf signature-osx.tar.gz\n+tar xf signature-win.tar.gz\n+git add -A\n+git commit -m \"point to ${VERSION}\"\n+git tag -s \"v${VERSION}\" HEAD\n+git push the current branch and new tag\n+popd\n+```\n \n Non-codesigners: wait for Windows/macOS detached signatures:\n \n - Once the Windows/macOS builds each have 3 matching signatures, they will be signed with their respective release keys.\n - Detached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin-core/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n \n-Create (and optionally verify) the signed macOS binary:\n+Create (and optionally verify) the codesigned outputs:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    mv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n-    popd\n+- [Codesigning](/contrib/guix/README.md#codesigning)\n \n-Create (and optionally verify) the signed Windows binaries:\n+Commit your signature for the signed macOS/Windows binaries:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    mv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n-    popd\n+```sh\n+pushd ./guix.sigs\n+git add \"${VERSION}/${SIGNER}\"/all.SHA256SUMS{,.asc}\n+git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n+git push  # Assuming you can push to the guix.sigs tree\n+popd\n+```\n \n-Commit your signature for the signed macOS/Windows binaries:\n+### After 3 or more people have guix-built and their results match:\n \n-    pushd gitian.sigs\n-    git add ${VERSION}-osx-signed/\"${SIGNER}\"\n-    git add ${VERSION}-win-signed/\"${SIGNER}\"\n-    git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n-    git push  # Assuming you can push to the gitian.sigs tree\n-    popd\n+Combine `all.SHA256SUMS` and `all.SHA256SUMS.asc` into a clear-signed\n+`SHA256SUMS.asc` message:\n \n-### After 3 or more people have gitian-built and their results match:\n+```sh\n+echo -e \"-----BEGIN PGP SIGNED MESSAGE-----\\nHash: SHA256\\n\\n$(cat all.SHA256SUMS)\\n$(cat filename.txt.asc)\" > SHA256SUMS.asc\n+```\n \n-- Create `SHA256SUMS.asc` for the builds, and GPG-sign it:\n+Here's an equivalent, more readable command if you're confident that you won't\n+mess up whitespaces when copy-pasting:\n \n ```bash\n-sha256sum * > SHA256SUMS\n-```\n+cat << EOF > SHA256SUMS.asc\n+-----BEGIN PGP SIGNED MESSAGE-----\n+Hash: SHA256\n \n-The list of files should be:\n-```\n-bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz\n-bitcoin-${VERSION}-riscv64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-x86_64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-osx64.tar.gz\n-bitcoin-${VERSION}-osx.dmg\n-bitcoin-${VERSION}.tar.gz\n-bitcoin-${VERSION}-win64-setup.exe\n-bitcoin-${VERSION}-win64.zip\n+$(cat all.SHA256SUMS)\n+$(cat all.SHA256SUMS.asc)\n+EOF\n ```\n-The `*-debug*` files generated by the gitian build contain debug symbols\n-for troubleshooting by developers. It is assumed that anyone that is interested\n-in debugging can run gitian to generate the files for themselves. To avoid\n-end-user confusion about which file to pick, as well as save storage\n-space *do not upload these to the bitcoincore.org server, nor put them in the torrent*.\n \n-- GPG-sign it, delete the unsigned file:\n-```\n-gpg --digest-algo sha256 --clearsign SHA256SUMS # outputs SHA256SUMS.asc\n-rm SHA256SUMS\n-```\n-(the digest algorithm is forced to sha256 to avoid confusion of the `Hash:` header that GPG adds with the SHA256 used for the files)\n-Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spurious/nonsensical entry.\n+- Upload to the bitcoincore.org server (`/var/www/bin/bitcoin-core-${VERSION}`):\n+    1. The contents of `./bitcoin/guix-build-${VERSION}/output`, except for\n+       `*-debug*` files.\n \n-- Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoincore.org server\n-  into `/var/www/bin/bitcoin-core-${VERSION}`\n+       The `*-debug*` files generated by the guix build contain debug symbols\n+       for troubleshooting by developers. It is assumed that anyone that is\n+       interested in debugging can run guix to generate the files for\n+       themselves. To avoid end-user confusion about which file to pick, as well\n+       as save storage space *do not upload these to the bitcoincore.org server,\n+       nor put them in the torrent*.\n \n-- A `.torrent` will appear in the directory after a few minutes. Optionally help seed this torrent. To get the `magnet:` URI use:\n-```bash\n-transmission-show -m <torrent file>\n-```\n-Insert the magnet URI into the announcement sent to mailing lists. This permits\n-people without access to `bitcoincore.org` to download the binary distribution.\n-Also put it into the `optional_magnetlink:` slot in the YAML file for\n-bitcoincore.org.\n+    2. The combined clear-signed message you just created `SHA256SUMS.asc`\n+\n+- A `.torrent` will appear in the directory after a few minutes. Optionally help",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r667759673",
      "id" : 667759673,
      "in_reply_to_id" : 667743780,
      "line" : 224,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2Nzc1OTY3Mw==",
      "original_commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "original_line" : 224,
      "original_position" : 322,
      "original_start_line" : null,
      "path" : "doc/release-process.md",
      "position" : 322,
      "pull_request_review_id" : 703888176,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T09:10:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/667759673",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r667776836"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/667776836"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks for highlighting that this is per platform tuple :smile: ",
      "commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "created_at" : "2021-07-12T09:34:22Z",
      "diff_hunk" : "@@ -9,83 +9,171 @@ downloads.\n \n We achieve bootstrappability by using Guix as a functional package manager.\n \n-## Requirements\n+# Requirements\n \n Conservatively, a x86_64 machine with:\n \n - 16GB of free disk space on the partition that /gnu/store will reside in\n-- 8GB of free disk space per platform triple you're planning on building (see\n-  the `HOSTS` environment variable description)\n+- 8GB of free disk space **per platform triple** you're planning on building",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r667776836",
      "id" : 667776836,
      "line" : 17,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2Nzc3NjgzNg==",
      "original_commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "original_line" : 17,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "contrib/guix/README.md",
      "position" : 12,
      "pull_request_review_id" : 703910194,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T09:34:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/667776836",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668019146"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668019146"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed in 5e23466e04e8c46aba39a1e3bf297d1947455740",
      "commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "created_at" : "2021-07-12T15:11:26Z",
      "diff_hunk" : "@@ -0,0 +1,811 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [â¤ skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both using the offical shell installer script\n+and using binary tarballs can be found in the GNU Guix Manual's [Binary\n+Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this\n+section](#add-an-etcprofiled-entry) for instructions on how to add a\n+`/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute Hippo)\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here][security-model]), v1.2.0 has a known problems when building\n+GnuTLS from source. Solutions and workarounds are documented\n+[here](#gnutls-test-suite-fail-status-request-revoked).\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+I strongly urge you to at least skim through the entire section once before you\n+start issuing commands, as it will save you a lot of unncessary pain and\n+anguish.\n+\n+### Installing common build tools\n+\n+There are a few basic build tools that are required for most things we'll build,\n+so let's install them now:\n+\n+Text transformation/i18n:\n+- `autopoint` (sometimes packaged in `gettext`)\n+- `help2man`\n+- `po4a`\n+- `texinfo`\n+\n+Build system tools:\n+- `g++` w/ C++11 support\n+- `libtool`\n+- `autoconf`\n+- `automake`\n+- `pkg-config` (sometimes packaged as `pkgconf`)\n+- `make`\n+- `cmake`\n+\n+Miscellaneous:\n+- `git`\n+- `gnupg`\n+- `python3`\n+\n+### Building and Installing Guix's dependencies\n+\n+In order to build Guix itself from source, we need to first make sure that the\n+necessary dependencies are installed and discoverable. The most up-to-date list\n+of Guix's dependencies is kept in the [\"Requirements\"\n+section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n+Reference Manual.\n+\n+Depending on your distribution, most or all of these dependencies may already be\n+packaged and installable without manually building and installing.\n+\n+For reference, the graphic below outlines Guix v1.3.0's dependency graph:\n+\n+![boostrap map](guix-v1.3.0-bootstrap.png)\n+\n+#### Guile\n+\n+##### Choosing a Guile version and sticking to it\n+\n+One of the first things you need to decide is which Guile version you want to\n+use: Guile v2.2 or Guile v3.0. Unlike the python2 to python3 transition, Guile\n+v2.2 and Guile v3.0 are largely compatible, as evidenced by the fact that most\n+Guile packages and even [Guix\n+itself](https://guix.gnu.org/en/blog/2020/guile-3-and-guix/) support running on\n+both.\n+\n+What is important here is that you **choose one**, and you **remain consistent**\n+with your choice throughout **all Guile-related packages**, no matter if they\n+are installed via the distribution's package manager or installed from source.\n+This is because the files for Guile packages are installed to directories which\n+are separated based on the Guile version.\n+\n+###### Example: Checking that Ubuntu's `guile-git` is compatible with your chosen Guile version\n+\n+On Ubuntu Focal:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-2.2, guile-bytestructures, libgit2-dev\n+...\n+```\n+\n+As you can see, the package `guile-git` depends on `guile-2.2`, meaning that it\n+was likely built for Guile v2.2. This means that if you decided to use Guile\n+v3.0 on Ubuntu Focal, you would need to build guile-git from source instead of\n+using the distribution package.\n+\n+On Ubuntu Hirsute:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-3.0 | guile-2.2, guile-bytestructures (>= 1.0.7-3~), libgit2-dev (>= 1.0)\n+...\n+```\n+\n+In this case, `guile-git` depends on either `guile-3.0` or `guile-2.2`, meaning\n+that it would work no matter what Guile version you decided to use.\n+\n+###### Corner case: Multiple versions of Guile on one system\n+\n+It is recommended to only install one version of Guile, so that build systems do\n+not get confused about which Guile to use.\n+\n+However, if you insist on having both Guile v2.2 and Guile v3.0 installed on\n+your system, then you need to **consistently** specify one of\n+`GUILE_EFFECTIVE_VERSION=3.0` or `GUILE_EFFECTIVE_VERSION=2.2` to all\n+`./configure` invocations for Guix and its dependencies.\n+\n+##### Installing Guile\n+\n+Guile is most likely already packaged for your distribution, so after you have\n+[chosen a Guile version](#choosing-a-guile-version-and-sticking-to-it), install\n+it via your distribution's package manager.\n+\n+If your distribution splits packages into `-dev`-suffixed and\n+non-`-dev`-suffixed sub-packages (as is the case for Debian-derived\n+distributions), please make sure to install both. For example, to install Guile\n+v2.2 on Debian/Ubuntu:\n+\n+```sh\n+apt install guile-2.2 guile-2.2-dev\n+```\n+\n+#### Mixing distribution packages and source-built packages\n+\n+At the time of writing, most distributions have _some_ of Guix's dependencies\n+packaged, but not all. This means that you may want to install the distribution\n+package for some dependencies, and manually build-from-source for others.\n+\n+Distribution packages usually install to `/usr`, which is different from the\n+default `./configure` prefix of source-built packages: `/usr/local`.\n+\n+This means that if you mix-and-match distribution packages and source-built\n+packages and do not specify exactly `--prefix=/usr` to `./configure` for\n+source-built packages, you will need to augment the `GUILE_LOAD_PATH` and\n+`GUILE_LOAD_COMPILED_PATH` environment variables so that Guile will look\n+under the right prefix and find your source-built packages.\n+\n+For example, if you are using Guile v2.2, and have Guile packages in the\n+`/usr/local` prefix, either add the following lines to your `.profile` or\n+`.bash_profile` so that the environment variable is properly set for all future\n+shell logins, or paste the lines into a POSIX-style shell to temporarily modify\n+the environment variables of your current shell session.\n+\n+```sh\n+# Help Guile v2.2.x find packages in /usr/local\n+export GUILE_LOAD_PATH=\"/usr/local/share/guile/site/2.2${GUILE_LOAD_PATH:+:}$GUILE_LOAD_PATH\"\n+export GUILE_LOAD_COMPILED_PATH=\"/usr/local/lib/guile/2.2/site-ccache${GUILE_LOAD_COMPILED_PATH:+:}$GUILE_COMPILED_LOAD_PATH\"\n+```\n+\n+Note that these environment variables are used to check for packages during\n+`./configure`, so they should be set as soon as possible should you want to use\n+a prefix other than `/usr`.\n+\n+<!-- ##### Example: Consistently using Guile 3.0 on Ubuntu -->\n+\n+<!-- For example, on Ubuntu, if you choose to use Guile 3.0 and install the -->\n+<!-- `guile-3.0` package, you want to make sure that if you also want to install the -->\n+<!-- `guile-git` package with `apt` that said `guile-git` package was built for Guile -->\n+<!-- v3.0. This can be checked by invoking the following: -->\n+\n+<!-- ``` -->\n+<!-- apt update -->\n+<!-- apt show guile-git -->\n+<!-- ``` -->\n+\n+#### Building and installing source-built packages\n+\n+***IMPORTANT**: A few dependencies have non-obvious quirks/erratas which are documented in the\n+sub-sections immediately below. Please read these sections before proceeding to\n+build and install these packages.*\n+\n+Although you should always refer to the README or INSTALL files for the most\n+accurate information, most of these dependencies use autoconf-style build\n+systems (check if there's a `configure.ac` file), and will likely do the right\n+thing with the following:\n+\n+Clone the repository and check out the latest release:\n+```sh\n+git clone <git-repo-of-dependency>/<dependency>.git\n+cd <dependency>\n+git tag -l  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+For autoconf-based build systems (if `./autogen.sh` or `configure.ac` exists at\n+the root of the repository):\n+\n+```sh\n+./autogen.sh || autoreconf -vfi\n+./configure --prefix=<prefix>\n+make\n+sudo make install\n+```\n+\n+For CMake-based build systems (if `CMakeLists.txt` exists at the root of the\n+repository):\n+\n+```sh\n+mkdir build && cd build\n+cmake .. -DCMAKE_INSTALL_PREFIX=<prefix>\n+sudo cmake --build . --target install\n+```\n+\n+If you choose not to specify exactly `--prefix=/usr` to `./configure`, please\n+make sure you've carefully read the [previous section] on mixing distribution\n+packages and source-built packages.\n+\n+##### Binding packages require `-dev`-suffixed packages\n+\n+Relevant for:\n+- Everyone\n+\n+When building bindings, the `-dev`-suffixed version of the original package\n+needs to be installed. For example, building `Guile-zlib` on Debian-derived\n+distributions requires that `zlib1g-dev` is installed.\n+\n+When using bindings, the `-dev`-suffixed version of the original package still\n+needs to be installed. This is particularly problematic when distribution\n+packages are mispackaged like `guile-sqlite3` is in Ubuntu Focal such that\n+installing `guile-sqlite3` does not automatically install `libsqlite3-dev` as a\n+dependency.\n+\n+Below is a list of relevant Guile bindings and their corresponding `-dev`\n+packages in Debian at the time of writing.\n+\n+| Guile binding package | -dev Debian package |\n+|-----------------------|---------------------|\n+| guile-gcrypt          | libgcrypt-dev       |\n+| guile-git             | libgit2-dev         |\n+| guile-lzlib           | liblz-dev           |\n+| guile-ssh             | libssh-dev          |\n+| guile-sqlite3         | libsqlite3-dev      |\n+| guile-zlib            | zlib1g-dev          |\n+\n+##### `guile-git` actually depends on `libgit2 >= 1.1`\n+\n+Relevant for:\n+- Those building `guile-git` from source against `libgit2 < 1.1`\n+- Those installing `guile-git` from their distribution where `guile-git` is\n+  built against `libgit2 < 1.1`\n+\n+As of v0.4.0, `guile-git` claims to only require `libgit2 >= 0.28.0`, however,\n+it actually requires `libgit2 >= 1.1`, otherwise, it will be confused by a\n+reference of `origin/keyring`: instead of interpreting the reference as \"the\n+'keyring' branch of the 'origin' remote\", the reference is interpreted as \"the\n+branch literally named 'origin/keyring'\"\n+\n+This is especially notable because Ubuntu Focal packages `libgit2 v0.28.4`, and\n+`guile-git` is built against it.\n+\n+Should you be in this situation, you need to build both `libgit2 v1.1.x` and\n+`guile-git` from source.\n+\n+Source: http://logs.guix.gnu.org/guix/2020-11-12.log#232527\n+\n+##### `{scheme,guile}-bytestructures` v1.0.8 and v1.0.9 are broken for Guile v2.2\n+\n+Relevant for:\n+- Those building `{scheme,guile}-bytestructures` from source against Guile v2.2\n+\n+Commit\n+[707eea3](https://github.com/TaylanUB/scheme-bytestructures/commit/707eea3a85e1e375e86702229ebf73d496377669)\n+introduced a regression for Guile v2.2 and was first included in v1.0.8, this\n+was later corrected in commit\n+[ec9a721](https://github.com/TaylanUB/scheme-bytestructures/commit/ec9a721957c17bcda13148f8faa5f06934431ff7)\n+and included in v1.1.0.\n+\n+TL;DR If you decided to use Guile v2.2, do not use `{scheme,guile}-bytestructures` v1.0.8 or v1.0.9.\n+\n+### Building and Installing Guix itself\n+\n+Start by cloning Guix:\n+\n+```\n+git clone https://git.savannah.gnu.org/git/guix.git\n+cd guix\n+```\n+\n+You will likely want to build the latest release, however, if the latest release\n+when you're reading this is still 1.2.0 then you may want to use 95aca29 instead\n+to avoid a problem in the GnuTLS test suite.\n+\n+```\n+git branch -a -l 'origin/version-*'  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+Bootstrap the build system:\n+```\n+./bootstrap\n+```\n+\n+Configure with the recommended `--localstatedir` flag:\n+```\n+./configure --localstatedir=/var\n+```\n+\n+Note: If you intend to hack on Guix in the future, you will need to supply the\n+same `--localstatedir=` flag for all future Guix `./configure` invocations. See\n+the last paragraph of this\n+[section](https://guix.gnu.org/manual/en/html_node/Requirements.html) for more\n+details.\n+\n+Build Guix (this will take a while):\n+```\n+make -j$(nproc)\n+```\n+\n+Install Guix:\n+\n+```\n+sudo make install\n+```\n+\n+### Post-\"build from source\" Setup\n+\n+#### Creating and starting a `guix-daemon-original` service with a fixed `argv[0]`\n+\n+At this point, guix will be installed to `${bindir}`, which is likely\n+`/usr/local/bin` if you did not override directory variables at\n+`./configure`-time. More information on standard Automake directory variables\n+can be found\n+[here](https://www.gnu.org/software/automake/manual/html_node/Standard-Directory-Variables.html).\n+\n+However, the Guix init scripts and service configurations for Upstart, systemd,\n+SysV, and OpenRC are installed to launch\n+`${localstatedir}/guix/profiles/per-user/root/current-guix/bin/guix-daemon`,\n+which does not yet exist, and will only exist after `root` performs their first\n+`guix pull`. TODO: Link to `guix pull` as root section",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668019146",
      "id" : 668019146,
      "in_reply_to_id" : 666564511,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODAxOTE0Ng==",
      "original_commit_id" : "781812a9cd2b85485e300db58a1ca577a0749849",
      "original_line" : 447,
      "original_position" : 447,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : null,
      "pull_request_review_id" : 704232614,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T15:11:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668019146",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668019262"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668019262"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed in 5e23466e04e8c46aba39a1e3bf297d1947455740",
      "commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "created_at" : "2021-07-12T15:11:35Z",
      "diff_hunk" : "@@ -0,0 +1,811 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [â¤ skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both using the offical shell installer script\n+and using binary tarballs can be found in the GNU Guix Manual's [Binary\n+Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this\n+section](#add-an-etcprofiled-entry) for instructions on how to add a\n+`/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute Hippo)\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here][security-model]), v1.2.0 has a known problems when building\n+GnuTLS from source. Solutions and workarounds are documented\n+[here](#gnutls-test-suite-fail-status-request-revoked).\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+I strongly urge you to at least skim through the entire section once before you\n+start issuing commands, as it will save you a lot of unncessary pain and\n+anguish.\n+\n+### Installing common build tools\n+\n+There are a few basic build tools that are required for most things we'll build,\n+so let's install them now:\n+\n+Text transformation/i18n:\n+- `autopoint` (sometimes packaged in `gettext`)\n+- `help2man`\n+- `po4a`\n+- `texinfo`\n+\n+Build system tools:\n+- `g++` w/ C++11 support\n+- `libtool`\n+- `autoconf`\n+- `automake`\n+- `pkg-config` (sometimes packaged as `pkgconf`)\n+- `make`\n+- `cmake`\n+\n+Miscellaneous:\n+- `git`\n+- `gnupg`\n+- `python3`\n+\n+### Building and Installing Guix's dependencies\n+\n+In order to build Guix itself from source, we need to first make sure that the\n+necessary dependencies are installed and discoverable. The most up-to-date list\n+of Guix's dependencies is kept in the [\"Requirements\"\n+section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n+Reference Manual.\n+\n+Depending on your distribution, most or all of these dependencies may already be\n+packaged and installable without manually building and installing.\n+\n+For reference, the graphic below outlines Guix v1.3.0's dependency graph:\n+\n+![boostrap map](guix-v1.3.0-bootstrap.png)\n+\n+#### Guile\n+\n+##### Choosing a Guile version and sticking to it\n+\n+One of the first things you need to decide is which Guile version you want to\n+use: Guile v2.2 or Guile v3.0. Unlike the python2 to python3 transition, Guile\n+v2.2 and Guile v3.0 are largely compatible, as evidenced by the fact that most\n+Guile packages and even [Guix\n+itself](https://guix.gnu.org/en/blog/2020/guile-3-and-guix/) support running on\n+both.\n+\n+What is important here is that you **choose one**, and you **remain consistent**\n+with your choice throughout **all Guile-related packages**, no matter if they\n+are installed via the distribution's package manager or installed from source.\n+This is because the files for Guile packages are installed to directories which\n+are separated based on the Guile version.\n+\n+###### Example: Checking that Ubuntu's `guile-git` is compatible with your chosen Guile version\n+\n+On Ubuntu Focal:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-2.2, guile-bytestructures, libgit2-dev\n+...\n+```\n+\n+As you can see, the package `guile-git` depends on `guile-2.2`, meaning that it\n+was likely built for Guile v2.2. This means that if you decided to use Guile\n+v3.0 on Ubuntu Focal, you would need to build guile-git from source instead of\n+using the distribution package.\n+\n+On Ubuntu Hirsute:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-3.0 | guile-2.2, guile-bytestructures (>= 1.0.7-3~), libgit2-dev (>= 1.0)\n+...\n+```\n+\n+In this case, `guile-git` depends on either `guile-3.0` or `guile-2.2`, meaning\n+that it would work no matter what Guile version you decided to use.\n+\n+###### Corner case: Multiple versions of Guile on one system\n+\n+It is recommended to only install one version of Guile, so that build systems do\n+not get confused about which Guile to use.\n+\n+However, if you insist on having both Guile v2.2 and Guile v3.0 installed on\n+your system, then you need to **consistently** specify one of\n+`GUILE_EFFECTIVE_VERSION=3.0` or `GUILE_EFFECTIVE_VERSION=2.2` to all\n+`./configure` invocations for Guix and its dependencies.\n+\n+##### Installing Guile\n+\n+Guile is most likely already packaged for your distribution, so after you have\n+[chosen a Guile version](#choosing-a-guile-version-and-sticking-to-it), install\n+it via your distribution's package manager.\n+\n+If your distribution splits packages into `-dev`-suffixed and\n+non-`-dev`-suffixed sub-packages (as is the case for Debian-derived\n+distributions), please make sure to install both. For example, to install Guile\n+v2.2 on Debian/Ubuntu:\n+\n+```sh\n+apt install guile-2.2 guile-2.2-dev\n+```\n+\n+#### Mixing distribution packages and source-built packages\n+\n+At the time of writing, most distributions have _some_ of Guix's dependencies\n+packaged, but not all. This means that you may want to install the distribution\n+package for some dependencies, and manually build-from-source for others.\n+\n+Distribution packages usually install to `/usr`, which is different from the\n+default `./configure` prefix of source-built packages: `/usr/local`.\n+\n+This means that if you mix-and-match distribution packages and source-built\n+packages and do not specify exactly `--prefix=/usr` to `./configure` for\n+source-built packages, you will need to augment the `GUILE_LOAD_PATH` and\n+`GUILE_LOAD_COMPILED_PATH` environment variables so that Guile will look\n+under the right prefix and find your source-built packages.\n+\n+For example, if you are using Guile v2.2, and have Guile packages in the\n+`/usr/local` prefix, either add the following lines to your `.profile` or\n+`.bash_profile` so that the environment variable is properly set for all future\n+shell logins, or paste the lines into a POSIX-style shell to temporarily modify\n+the environment variables of your current shell session.\n+\n+```sh\n+# Help Guile v2.2.x find packages in /usr/local\n+export GUILE_LOAD_PATH=\"/usr/local/share/guile/site/2.2${GUILE_LOAD_PATH:+:}$GUILE_LOAD_PATH\"\n+export GUILE_LOAD_COMPILED_PATH=\"/usr/local/lib/guile/2.2/site-ccache${GUILE_LOAD_COMPILED_PATH:+:}$GUILE_COMPILED_LOAD_PATH\"\n+```\n+\n+Note that these environment variables are used to check for packages during\n+`./configure`, so they should be set as soon as possible should you want to use\n+a prefix other than `/usr`.\n+\n+<!-- ##### Example: Consistently using Guile 3.0 on Ubuntu -->\n+\n+<!-- For example, on Ubuntu, if you choose to use Guile 3.0 and install the -->\n+<!-- `guile-3.0` package, you want to make sure that if you also want to install the -->\n+<!-- `guile-git` package with `apt` that said `guile-git` package was built for Guile -->\n+<!-- v3.0. This can be checked by invoking the following: -->\n+\n+<!-- ``` -->\n+<!-- apt update -->\n+<!-- apt show guile-git -->\n+<!-- ``` -->\n+\n+#### Building and installing source-built packages\n+\n+***IMPORTANT**: A few dependencies have non-obvious quirks/erratas which are documented in the\n+sub-sections immediately below. Please read these sections before proceeding to\n+build and install these packages.*\n+\n+Although you should always refer to the README or INSTALL files for the most\n+accurate information, most of these dependencies use autoconf-style build\n+systems (check if there's a `configure.ac` file), and will likely do the right\n+thing with the following:\n+\n+Clone the repository and check out the latest release:\n+```sh\n+git clone <git-repo-of-dependency>/<dependency>.git\n+cd <dependency>\n+git tag -l  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+For autoconf-based build systems (if `./autogen.sh` or `configure.ac` exists at\n+the root of the repository):\n+\n+```sh\n+./autogen.sh || autoreconf -vfi\n+./configure --prefix=<prefix>\n+make\n+sudo make install\n+```\n+\n+For CMake-based build systems (if `CMakeLists.txt` exists at the root of the\n+repository):\n+\n+```sh\n+mkdir build && cd build\n+cmake .. -DCMAKE_INSTALL_PREFIX=<prefix>\n+sudo cmake --build . --target install\n+```\n+\n+If you choose not to specify exactly `--prefix=/usr` to `./configure`, please\n+make sure you've carefully read the [previous section] on mixing distribution\n+packages and source-built packages.\n+\n+##### Binding packages require `-dev`-suffixed packages\n+\n+Relevant for:\n+- Everyone\n+\n+When building bindings, the `-dev`-suffixed version of the original package\n+needs to be installed. For example, building `Guile-zlib` on Debian-derived\n+distributions requires that `zlib1g-dev` is installed.\n+\n+When using bindings, the `-dev`-suffixed version of the original package still\n+needs to be installed. This is particularly problematic when distribution\n+packages are mispackaged like `guile-sqlite3` is in Ubuntu Focal such that\n+installing `guile-sqlite3` does not automatically install `libsqlite3-dev` as a\n+dependency.\n+\n+Below is a list of relevant Guile bindings and their corresponding `-dev`\n+packages in Debian at the time of writing.\n+\n+| Guile binding package | -dev Debian package |\n+|-----------------------|---------------------|\n+| guile-gcrypt          | libgcrypt-dev       |\n+| guile-git             | libgit2-dev         |\n+| guile-lzlib           | liblz-dev           |\n+| guile-ssh             | libssh-dev          |\n+| guile-sqlite3         | libsqlite3-dev      |\n+| guile-zlib            | zlib1g-dev          |\n+\n+##### `guile-git` actually depends on `libgit2 >= 1.1`\n+\n+Relevant for:\n+- Those building `guile-git` from source against `libgit2 < 1.1`\n+- Those installing `guile-git` from their distribution where `guile-git` is\n+  built against `libgit2 < 1.1`\n+\n+As of v0.4.0, `guile-git` claims to only require `libgit2 >= 0.28.0`, however,\n+it actually requires `libgit2 >= 1.1`, otherwise, it will be confused by a\n+reference of `origin/keyring`: instead of interpreting the reference as \"the\n+'keyring' branch of the 'origin' remote\", the reference is interpreted as \"the\n+branch literally named 'origin/keyring'\"\n+\n+This is especially notable because Ubuntu Focal packages `libgit2 v0.28.4`, and\n+`guile-git` is built against it.\n+\n+Should you be in this situation, you need to build both `libgit2 v1.1.x` and\n+`guile-git` from source.\n+\n+Source: http://logs.guix.gnu.org/guix/2020-11-12.log#232527\n+\n+##### `{scheme,guile}-bytestructures` v1.0.8 and v1.0.9 are broken for Guile v2.2\n+\n+Relevant for:\n+- Those building `{scheme,guile}-bytestructures` from source against Guile v2.2\n+\n+Commit\n+[707eea3](https://github.com/TaylanUB/scheme-bytestructures/commit/707eea3a85e1e375e86702229ebf73d496377669)\n+introduced a regression for Guile v2.2 and was first included in v1.0.8, this\n+was later corrected in commit\n+[ec9a721](https://github.com/TaylanUB/scheme-bytestructures/commit/ec9a721957c17bcda13148f8faa5f06934431ff7)\n+and included in v1.1.0.\n+\n+TL;DR If you decided to use Guile v2.2, do not use `{scheme,guile}-bytestructures` v1.0.8 or v1.0.9.\n+\n+### Building and Installing Guix itself\n+\n+Start by cloning Guix:\n+\n+```\n+git clone https://git.savannah.gnu.org/git/guix.git\n+cd guix\n+```\n+\n+You will likely want to build the latest release, however, if the latest release\n+when you're reading this is still 1.2.0 then you may want to use 95aca29 instead\n+to avoid a problem in the GnuTLS test suite.\n+\n+```\n+git branch -a -l 'origin/version-*'  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+Bootstrap the build system:\n+```\n+./bootstrap\n+```\n+\n+Configure with the recommended `--localstatedir` flag:\n+```\n+./configure --localstatedir=/var\n+```\n+\n+Note: If you intend to hack on Guix in the future, you will need to supply the\n+same `--localstatedir=` flag for all future Guix `./configure` invocations. See\n+the last paragraph of this\n+[section](https://guix.gnu.org/manual/en/html_node/Requirements.html) for more\n+details.\n+\n+Build Guix (this will take a while):\n+```\n+make -j$(nproc)\n+```\n+\n+Install Guix:\n+\n+```\n+sudo make install\n+```\n+\n+### Post-\"build from source\" Setup\n+\n+#### Creating and starting a `guix-daemon-original` service with a fixed `argv[0]`\n+\n+At this point, guix will be installed to `${bindir}`, which is likely\n+`/usr/local/bin` if you did not override directory variables at\n+`./configure`-time. More information on standard Automake directory variables\n+can be found\n+[here](https://www.gnu.org/software/automake/manual/html_node/Standard-Directory-Variables.html).\n+\n+However, the Guix init scripts and service configurations for Upstart, systemd,\n+SysV, and OpenRC are installed to launch\n+`${localstatedir}/guix/profiles/per-user/root/current-guix/bin/guix-daemon`,\n+which does not yet exist, and will only exist after `root` performs their first\n+`guix pull`. TODO: Link to `guix pull` as root section\n+\n+We need to create a `-original` version of these init scripts that's pointed to\n+the binaries we just built and `make install`'ed in `${bindir}` (normally,\n+`/usr/local/bin`).\n+\n+Example for `systemd`, run as `root`:\n+\n+```sh\n+# Create guix-daemon-original.service by modifying guix-daemon.service",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668019262",
      "id" : 668019262,
      "in_reply_to_id" : 666566690,
      "line" : 456,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODAxOTI2Mg==",
      "original_commit_id" : "781812a9cd2b85485e300db58a1ca577a0749849",
      "original_line" : 456,
      "original_position" : 456,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 456,
      "pull_request_review_id" : 704232778,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T15:11:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668019262",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668019406"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668019406"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : ":crossed_fingers: ",
      "commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "created_at" : "2021-07-12T15:11:45Z",
      "diff_hunk" : "@@ -0,0 +1,811 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [â¤ skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both using the offical shell installer script\n+and using binary tarballs can be found in the GNU Guix Manual's [Binary\n+Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this\n+section](#add-an-etcprofiled-entry) for instructions on how to add a\n+`/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute Hippo)\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here][security-model]), v1.2.0 has a known problems when building\n+GnuTLS from source. Solutions and workarounds are documented\n+[here](#gnutls-test-suite-fail-status-request-revoked).\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+I strongly urge you to at least skim through the entire section once before you\n+start issuing commands, as it will save you a lot of unncessary pain and\n+anguish.\n+\n+### Installing common build tools\n+\n+There are a few basic build tools that are required for most things we'll build,\n+so let's install them now:\n+\n+Text transformation/i18n:\n+- `autopoint` (sometimes packaged in `gettext`)\n+- `help2man`\n+- `po4a`\n+- `texinfo`\n+\n+Build system tools:\n+- `g++` w/ C++11 support\n+- `libtool`\n+- `autoconf`\n+- `automake`\n+- `pkg-config` (sometimes packaged as `pkgconf`)\n+- `make`\n+- `cmake`\n+\n+Miscellaneous:\n+- `git`\n+- `gnupg`\n+- `python3`\n+\n+### Building and Installing Guix's dependencies\n+\n+In order to build Guix itself from source, we need to first make sure that the\n+necessary dependencies are installed and discoverable. The most up-to-date list\n+of Guix's dependencies is kept in the [\"Requirements\"\n+section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n+Reference Manual.\n+\n+Depending on your distribution, most or all of these dependencies may already be\n+packaged and installable without manually building and installing.\n+\n+For reference, the graphic below outlines Guix v1.3.0's dependency graph:\n+\n+![boostrap map](guix-v1.3.0-bootstrap.png)\n+\n+#### Guile\n+\n+##### Choosing a Guile version and sticking to it\n+\n+One of the first things you need to decide is which Guile version you want to\n+use: Guile v2.2 or Guile v3.0. Unlike the python2 to python3 transition, Guile\n+v2.2 and Guile v3.0 are largely compatible, as evidenced by the fact that most\n+Guile packages and even [Guix\n+itself](https://guix.gnu.org/en/blog/2020/guile-3-and-guix/) support running on\n+both.\n+\n+What is important here is that you **choose one**, and you **remain consistent**\n+with your choice throughout **all Guile-related packages**, no matter if they\n+are installed via the distribution's package manager or installed from source.\n+This is because the files for Guile packages are installed to directories which\n+are separated based on the Guile version.\n+\n+###### Example: Checking that Ubuntu's `guile-git` is compatible with your chosen Guile version\n+\n+On Ubuntu Focal:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-2.2, guile-bytestructures, libgit2-dev\n+...\n+```\n+\n+As you can see, the package `guile-git` depends on `guile-2.2`, meaning that it\n+was likely built for Guile v2.2. This means that if you decided to use Guile\n+v3.0 on Ubuntu Focal, you would need to build guile-git from source instead of\n+using the distribution package.\n+\n+On Ubuntu Hirsute:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-3.0 | guile-2.2, guile-bytestructures (>= 1.0.7-3~), libgit2-dev (>= 1.0)\n+...\n+```\n+\n+In this case, `guile-git` depends on either `guile-3.0` or `guile-2.2`, meaning\n+that it would work no matter what Guile version you decided to use.\n+\n+###### Corner case: Multiple versions of Guile on one system\n+\n+It is recommended to only install one version of Guile, so that build systems do\n+not get confused about which Guile to use.\n+\n+However, if you insist on having both Guile v2.2 and Guile v3.0 installed on\n+your system, then you need to **consistently** specify one of\n+`GUILE_EFFECTIVE_VERSION=3.0` or `GUILE_EFFECTIVE_VERSION=2.2` to all\n+`./configure` invocations for Guix and its dependencies.\n+\n+##### Installing Guile\n+\n+Guile is most likely already packaged for your distribution, so after you have\n+[chosen a Guile version](#choosing-a-guile-version-and-sticking-to-it), install\n+it via your distribution's package manager.\n+\n+If your distribution splits packages into `-dev`-suffixed and\n+non-`-dev`-suffixed sub-packages (as is the case for Debian-derived\n+distributions), please make sure to install both. For example, to install Guile\n+v2.2 on Debian/Ubuntu:\n+\n+```sh\n+apt install guile-2.2 guile-2.2-dev\n+```\n+\n+#### Mixing distribution packages and source-built packages\n+\n+At the time of writing, most distributions have _some_ of Guix's dependencies\n+packaged, but not all. This means that you may want to install the distribution\n+package for some dependencies, and manually build-from-source for others.\n+\n+Distribution packages usually install to `/usr`, which is different from the\n+default `./configure` prefix of source-built packages: `/usr/local`.\n+\n+This means that if you mix-and-match distribution packages and source-built\n+packages and do not specify exactly `--prefix=/usr` to `./configure` for\n+source-built packages, you will need to augment the `GUILE_LOAD_PATH` and\n+`GUILE_LOAD_COMPILED_PATH` environment variables so that Guile will look\n+under the right prefix and find your source-built packages.\n+\n+For example, if you are using Guile v2.2, and have Guile packages in the\n+`/usr/local` prefix, either add the following lines to your `.profile` or\n+`.bash_profile` so that the environment variable is properly set for all future\n+shell logins, or paste the lines into a POSIX-style shell to temporarily modify\n+the environment variables of your current shell session.\n+\n+```sh\n+# Help Guile v2.2.x find packages in /usr/local\n+export GUILE_LOAD_PATH=\"/usr/local/share/guile/site/2.2${GUILE_LOAD_PATH:+:}$GUILE_LOAD_PATH\"\n+export GUILE_LOAD_COMPILED_PATH=\"/usr/local/lib/guile/2.2/site-ccache${GUILE_LOAD_COMPILED_PATH:+:}$GUILE_COMPILED_LOAD_PATH\"\n+```\n+\n+Note that these environment variables are used to check for packages during\n+`./configure`, so they should be set as soon as possible should you want to use\n+a prefix other than `/usr`.\n+\n+<!-- ##### Example: Consistently using Guile 3.0 on Ubuntu -->\n+\n+<!-- For example, on Ubuntu, if you choose to use Guile 3.0 and install the -->\n+<!-- `guile-3.0` package, you want to make sure that if you also want to install the -->\n+<!-- `guile-git` package with `apt` that said `guile-git` package was built for Guile -->\n+<!-- v3.0. This can be checked by invoking the following: -->\n+\n+<!-- ``` -->\n+<!-- apt update -->\n+<!-- apt show guile-git -->\n+<!-- ``` -->\n+\n+#### Building and installing source-built packages\n+\n+***IMPORTANT**: A few dependencies have non-obvious quirks/erratas which are documented in the\n+sub-sections immediately below. Please read these sections before proceeding to\n+build and install these packages.*\n+\n+Although you should always refer to the README or INSTALL files for the most\n+accurate information, most of these dependencies use autoconf-style build\n+systems (check if there's a `configure.ac` file), and will likely do the right\n+thing with the following:\n+\n+Clone the repository and check out the latest release:\n+```sh\n+git clone <git-repo-of-dependency>/<dependency>.git\n+cd <dependency>\n+git tag -l  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+For autoconf-based build systems (if `./autogen.sh` or `configure.ac` exists at\n+the root of the repository):\n+\n+```sh\n+./autogen.sh || autoreconf -vfi\n+./configure --prefix=<prefix>\n+make\n+sudo make install\n+```\n+\n+For CMake-based build systems (if `CMakeLists.txt` exists at the root of the\n+repository):\n+\n+```sh\n+mkdir build && cd build\n+cmake .. -DCMAKE_INSTALL_PREFIX=<prefix>\n+sudo cmake --build . --target install\n+```\n+\n+If you choose not to specify exactly `--prefix=/usr` to `./configure`, please\n+make sure you've carefully read the [previous section] on mixing distribution\n+packages and source-built packages.\n+\n+##### Binding packages require `-dev`-suffixed packages\n+\n+Relevant for:\n+- Everyone\n+\n+When building bindings, the `-dev`-suffixed version of the original package\n+needs to be installed. For example, building `Guile-zlib` on Debian-derived\n+distributions requires that `zlib1g-dev` is installed.\n+\n+When using bindings, the `-dev`-suffixed version of the original package still\n+needs to be installed. This is particularly problematic when distribution\n+packages are mispackaged like `guile-sqlite3` is in Ubuntu Focal such that\n+installing `guile-sqlite3` does not automatically install `libsqlite3-dev` as a\n+dependency.\n+\n+Below is a list of relevant Guile bindings and their corresponding `-dev`\n+packages in Debian at the time of writing.\n+\n+| Guile binding package | -dev Debian package |\n+|-----------------------|---------------------|\n+| guile-gcrypt          | libgcrypt-dev       |\n+| guile-git             | libgit2-dev         |\n+| guile-lzlib           | liblz-dev           |\n+| guile-ssh             | libssh-dev          |\n+| guile-sqlite3         | libsqlite3-dev      |\n+| guile-zlib            | zlib1g-dev          |\n+\n+##### `guile-git` actually depends on `libgit2 >= 1.1`\n+\n+Relevant for:\n+- Those building `guile-git` from source against `libgit2 < 1.1`\n+- Those installing `guile-git` from their distribution where `guile-git` is\n+  built against `libgit2 < 1.1`\n+\n+As of v0.4.0, `guile-git` claims to only require `libgit2 >= 0.28.0`, however,\n+it actually requires `libgit2 >= 1.1`, otherwise, it will be confused by a\n+reference of `origin/keyring`: instead of interpreting the reference as \"the\n+'keyring' branch of the 'origin' remote\", the reference is interpreted as \"the\n+branch literally named 'origin/keyring'\"\n+\n+This is especially notable because Ubuntu Focal packages `libgit2 v0.28.4`, and\n+`guile-git` is built against it.\n+\n+Should you be in this situation, you need to build both `libgit2 v1.1.x` and\n+`guile-git` from source.\n+\n+Source: http://logs.guix.gnu.org/guix/2020-11-12.log#232527\n+\n+##### `{scheme,guile}-bytestructures` v1.0.8 and v1.0.9 are broken for Guile v2.2\n+\n+Relevant for:\n+- Those building `{scheme,guile}-bytestructures` from source against Guile v2.2\n+\n+Commit\n+[707eea3](https://github.com/TaylanUB/scheme-bytestructures/commit/707eea3a85e1e375e86702229ebf73d496377669)\n+introduced a regression for Guile v2.2 and was first included in v1.0.8, this\n+was later corrected in commit\n+[ec9a721](https://github.com/TaylanUB/scheme-bytestructures/commit/ec9a721957c17bcda13148f8faa5f06934431ff7)\n+and included in v1.1.0.\n+\n+TL;DR If you decided to use Guile v2.2, do not use `{scheme,guile}-bytestructures` v1.0.8 or v1.0.9.\n+\n+### Building and Installing Guix itself\n+\n+Start by cloning Guix:\n+\n+```\n+git clone https://git.savannah.gnu.org/git/guix.git\n+cd guix\n+```\n+\n+You will likely want to build the latest release, however, if the latest release\n+when you're reading this is still 1.2.0 then you may want to use 95aca29 instead\n+to avoid a problem in the GnuTLS test suite.\n+\n+```\n+git branch -a -l 'origin/version-*'  # check for the latest release\n+git checkout <latest-release>\n+```\n+\n+Bootstrap the build system:\n+```\n+./bootstrap\n+```\n+\n+Configure with the recommended `--localstatedir` flag:\n+```\n+./configure --localstatedir=/var\n+```\n+\n+Note: If you intend to hack on Guix in the future, you will need to supply the\n+same `--localstatedir=` flag for all future Guix `./configure` invocations. See\n+the last paragraph of this\n+[section](https://guix.gnu.org/manual/en/html_node/Requirements.html) for more\n+details.\n+\n+Build Guix (this will take a while):\n+```\n+make -j$(nproc)\n+```\n+\n+Install Guix:\n+\n+```\n+sudo make install\n+```\n+\n+### Post-\"build from source\" Setup\n+\n+#### Creating and starting a `guix-daemon-original` service with a fixed `argv[0]`\n+\n+At this point, guix will be installed to `${bindir}`, which is likely\n+`/usr/local/bin` if you did not override directory variables at\n+`./configure`-time. More information on standard Automake directory variables\n+can be found\n+[here](https://www.gnu.org/software/automake/manual/html_node/Standard-Directory-Variables.html).\n+\n+However, the Guix init scripts and service configurations for Upstart, systemd,\n+SysV, and OpenRC are installed to launch\n+`${localstatedir}/guix/profiles/per-user/root/current-guix/bin/guix-daemon`,\n+which does not yet exist, and will only exist after `root` performs their first\n+`guix pull`. TODO: Link to `guix pull` as root section\n+\n+We need to create a `-original` version of these init scripts that's pointed to\n+the binaries we just built and `make install`'ed in `${bindir}` (normally,\n+`/usr/local/bin`).\n+\n+Example for `systemd`, run as `root`:\n+\n+```sh\n+# Create guix-daemon-original.service by modifying guix-daemon.service\n+bindir=\"$(dirname $(command -v guix-daemon))\"\n+sed -E -e \"s|/\\S*/guix/profiles/per-user/root/current-guix/bin/guix-daemon|${bindir}/guix-daemon|\" /etc/systemd/system/guix-daemon.service > /etc/systemd/system/guix-daemon-original.service\n+chmod 664 /etc/systemd/system/guix-daemon-original.service\n+\n+# Make systemd recognize the new service\n+systemctl daemon-reload\n+\n+# Make sure that the non-working guix-daemon.service is stopped and disabled\n+systemctl stop guix-daemon\n+systemctl disable guix-daemon\n+\n+# Make sure that the working guix-daemon-original.service is started and enabled\n+systemctl enable guix-daemon-original\n+systemctl start guix-daemon-original\n+```\n+\n+#### Creating `guix-daemon` users / groups\n+\n+Please see the [relevant\n+section](https://guix.gnu.org/manual/en/html_node/Build-Environment-Setup.html)\n+in the Guix Reference Manual for more details.\n+\n+## Optional setup\n+\n+At this point, you are set up to [use Guix to build bitcoin](./README.md#usage).\n+However, if you want to polish your setup a bit and make it \"what Guix\n+intended\", then read the next few subsections.\n+\n+### Add an `/etc/profile.d` entry\n+\n+This section definitely does not apply to you if you installed Guix using:\n+1. The shell installer script\n+2. fanquake's Docker image\n+3. Debian's `guix` package\n+\n+#### Background\n+\n+Although Guix knows how to update itself and its packages, it does so in a\n+non-invasive way (it does not modify `/usr/local/bin/guix`).\n+\n+Instead, it does the following:\n+\n+- After a `guix pull`, it updates\n+  `/var/guix/profiles/per-user/$USER/current-guix`, and creates a symlink\n+  targeting this directory at `$HOME/.config/guix/current`\n+\n+- After a `guix install`, it updates\n+  `/var/guix/profiles/per-user/$USER/guix-profile`, and creates a symlink\n+  targeting this directory at `$HOME/.guix-profile`\n+\n+Therefore, in order for these operations to affect your shell/desktop sessions\n+(and for the principle of least astonishment to hold), their corresponding\n+directories have to be added to well-known environment variables like `$PATH`,\n+`$INFOPATH`, `$XDG_DATA_DIRS`, etc.\n+\n+In other words, if `$HOME/.config/guix/current/bin` does not exist in your\n+`$PATH`, a `guix pull` will have no effect on what `guix` you are using. Same\n+goes for `$HOME/.guix-profile/bin`, `guix install`, and installed packages.\n+\n+Helpfully, after a `guix pull` or `guix install`, a message will be printed like\n+so:\n+\n+```\n+hint: Consider setting the necessary environment variables by running:\n+\n+     GUIX_PROFILE=\"$HOME/.guix-profile\"\n+     . \"$GUIX_PROFILE/etc/profile\"\n+\n+Alternately, see `guix package --search-paths -p \"$HOME/.guix-profile\"'.\n+```\n+\n+However, this is somewhat tedious to do for both `guix pull` and `guix install`\n+for each user on the system that wants to properly use `guix`. I recommend that\n+you instead add an entry to `/etc/profile.d` instead. This is done by default\n+when installing the Debian package later than 1.2.0-4 and when using the shell\n+script installer.\n+\n+#### Instructions\n+\n+Create `/etc/profile.d/guix.sh` with the following content:\n+```sh\n+# _GUIX_PROFILE: `guix pull` profile\n+_GUIX_PROFILE=\"$HOME/.config/guix/current\"\n+if [ -L $_GUIX_PROFILE ]; then\n+  export PATH=\"$_GUIX_PROFILE/bin${PATH:+:}$PATH\"\n+  # Export INFOPATH so that the updated info pages can be found\n+  # and read by both /usr/bin/info and/or $GUIX_PROFILE/bin/info\n+  # When INFOPATH is unset, add a trailing colon so that Emacs\n+  # searches 'Info-default-directory-list'.\n+  export INFOPATH=\"$_GUIX_PROFILE/share/info:$INFOPATH\"\n+fi\n+\n+# GUIX_PROFILE: User's default profile\n+GUIX_PROFILE=\"$HOME/.guix-profile\"\n+[ -L $GUIX_PROFILE ] || return\n+GUIX_LOCPATH=\"$GUIX_PROFILE/lib/locale\"\n+export GUIX_PROFILE GUIX_LOCPATH\n+\n+[ -f \"$GUIX_PROFILE/etc/profile\" ] && . \"$GUIX_PROFILE/etc/profile\"\n+\n+# set XDG_DATA_DIRS to include Guix installations\n+export XDG_DATA_DIRS=\"$GUIX_PROFILE/share:${XDG_DATA_DIRS:-/usr/local/share/:/usr/share/}\"\n+```\n+\n+Please note that this will not take effect until the next shell or desktop\n+session (log out and log back in).\n+\n+### `guix pull` as root\n+\n+Before you do this, you need to read the section on [choosing your security\n+model][security-model] and adjust `guix` and `guix-daemon` flags according to\n+your choice, as invoking `guix pull` may pull substitutes from substitute\n+servers (which you may not want).\n+\n+As mentioned in a previous section, Guix expects\n+`${localstatedir}/guix/profiles/per-user/root/current-guix` to be populated with\n+`root`'s Guix profile, `guix pull`-ed and built by some former version of Guix.\n+However, this is not the case when we build from source. Therefore, we need to\n+perform a `guix pull` as `root`:\n+\n+```sh\n+sudo --login guix pull --branch=version-<latest-release-version>\n+# or\n+sudo --login guix pull --commit=<particular-commit>\n+```\n+\n+`guix pull` is quite a long process (especially if you're using",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668019406",
      "id" : 668019406,
      "in_reply_to_id" : 666794330,
      "line" : 584,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODAxOTQwNg==",
      "original_commit_id" : "781812a9cd2b85485e300db58a1ca577a0749849",
      "original_line" : 584,
      "original_position" : 583,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 584,
      "pull_request_review_id" : 704232997,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T15:11:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668019406",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668021028"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668021028"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yup! To be clear here, it was you who originally wrote this comment 5 years ago :-)",
      "commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "created_at" : "2021-07-12T15:13:43Z",
      "diff_hunk" : "@@ -212,93 +154,84 @@ Codesigner only: Sign the windows binaries:\n \n Codesigner only: Commit the detached codesign payloads:\n \n-    cd ~/bitcoin-detached-sigs\n-    checkout the appropriate branch for this release series\n-    rm -rf *\n-    tar xf signature-osx.tar.gz\n-    tar xf signature-win.tar.gz\n-    git add -A\n-    git commit -m \"point to ${VERSION}\"\n-    git tag -s v${VERSION} HEAD\n-    git push the current branch and new tag\n+```sh\n+pushd ./bitcoin-detached-sigs\n+# checkout the appropriate branch for this release series\n+rm -rf ./*\n+tar xf signature-osx.tar.gz\n+tar xf signature-win.tar.gz\n+git add -A\n+git commit -m \"point to ${VERSION}\"\n+git tag -s \"v${VERSION}\" HEAD\n+git push the current branch and new tag\n+popd\n+```\n \n Non-codesigners: wait for Windows/macOS detached signatures:\n \n - Once the Windows/macOS builds each have 3 matching signatures, they will be signed with their respective release keys.\n - Detached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin-core/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n \n-Create (and optionally verify) the signed macOS binary:\n+Create (and optionally verify) the codesigned outputs:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    mv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n-    popd\n+- [Codesigning](/contrib/guix/README.md#codesigning)\n \n-Create (and optionally verify) the signed Windows binaries:\n+Commit your signature for the signed macOS/Windows binaries:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    mv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n-    popd\n+```sh\n+pushd ./guix.sigs\n+git add \"${VERSION}/${SIGNER}\"/all.SHA256SUMS{,.asc}\n+git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n+git push  # Assuming you can push to the guix.sigs tree\n+popd\n+```\n \n-Commit your signature for the signed macOS/Windows binaries:\n+### After 3 or more people have guix-built and their results match:\n \n-    pushd gitian.sigs\n-    git add ${VERSION}-osx-signed/\"${SIGNER}\"\n-    git add ${VERSION}-win-signed/\"${SIGNER}\"\n-    git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n-    git push  # Assuming you can push to the gitian.sigs tree\n-    popd\n+Combine `all.SHA256SUMS` and `all.SHA256SUMS.asc` into a clear-signed\n+`SHA256SUMS.asc` message:\n \n-### After 3 or more people have gitian-built and their results match:\n+```sh\n+echo -e \"-----BEGIN PGP SIGNED MESSAGE-----\\nHash: SHA256\\n\\n$(cat all.SHA256SUMS)\\n$(cat filename.txt.asc)\" > SHA256SUMS.asc\n+```\n \n-- Create `SHA256SUMS.asc` for the builds, and GPG-sign it:\n+Here's an equivalent, more readable command if you're confident that you won't\n+mess up whitespaces when copy-pasting:\n \n ```bash\n-sha256sum * > SHA256SUMS\n-```\n+cat << EOF > SHA256SUMS.asc\n+-----BEGIN PGP SIGNED MESSAGE-----\n+Hash: SHA256\n \n-The list of files should be:\n-```\n-bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz\n-bitcoin-${VERSION}-riscv64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-x86_64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-osx64.tar.gz\n-bitcoin-${VERSION}-osx.dmg\n-bitcoin-${VERSION}.tar.gz\n-bitcoin-${VERSION}-win64-setup.exe\n-bitcoin-${VERSION}-win64.zip\n+$(cat all.SHA256SUMS)\n+$(cat all.SHA256SUMS.asc)\n+EOF\n ```\n-The `*-debug*` files generated by the gitian build contain debug symbols\n-for troubleshooting by developers. It is assumed that anyone that is interested\n-in debugging can run gitian to generate the files for themselves. To avoid\n-end-user confusion about which file to pick, as well as save storage\n-space *do not upload these to the bitcoincore.org server, nor put them in the torrent*.\n \n-- GPG-sign it, delete the unsigned file:\n-```\n-gpg --digest-algo sha256 --clearsign SHA256SUMS # outputs SHA256SUMS.asc\n-rm SHA256SUMS\n-```\n-(the digest algorithm is forced to sha256 to avoid confusion of the `Hash:` header that GPG adds with the SHA256 used for the files)\n-Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spurious/nonsensical entry.\n+- Upload to the bitcoincore.org server (`/var/www/bin/bitcoin-core-${VERSION}`):\n+    1. The contents of `./bitcoin/guix-build-${VERSION}/output`, except for\n+       `*-debug*` files.\n \n-- Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoincore.org server\n-  into `/var/www/bin/bitcoin-core-${VERSION}`\n+       The `*-debug*` files generated by the guix build contain debug symbols\n+       for troubleshooting by developers. It is assumed that anyone that is\n+       interested in debugging can run guix to generate the files for\n+       themselves. To avoid end-user confusion about which file to pick, as well\n+       as save storage space *do not upload these to the bitcoincore.org server,\n+       nor put them in the torrent*.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668021028",
      "id" : 668021028,
      "in_reply_to_id" : 667734907,
      "line" : 220,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODAyMTAyOA==",
      "original_commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "original_line" : 220,
      "original_position" : 310,
      "original_start_line" : null,
      "path" : "doc/release-process.md",
      "position" : 310,
      "pull_request_review_id" : 704235442,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T15:13:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668021028",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668022162"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668022162"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes I believe so!",
      "commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "created_at" : "2021-07-12T15:15:05Z",
      "diff_hunk" : "@@ -212,93 +154,84 @@ Codesigner only: Sign the windows binaries:\n \n Codesigner only: Commit the detached codesign payloads:\n \n-    cd ~/bitcoin-detached-sigs\n-    checkout the appropriate branch for this release series\n-    rm -rf *\n-    tar xf signature-osx.tar.gz\n-    tar xf signature-win.tar.gz\n-    git add -A\n-    git commit -m \"point to ${VERSION}\"\n-    git tag -s v${VERSION} HEAD\n-    git push the current branch and new tag\n+```sh\n+pushd ./bitcoin-detached-sigs\n+# checkout the appropriate branch for this release series\n+rm -rf ./*\n+tar xf signature-osx.tar.gz\n+tar xf signature-win.tar.gz\n+git add -A\n+git commit -m \"point to ${VERSION}\"\n+git tag -s \"v${VERSION}\" HEAD\n+git push the current branch and new tag\n+popd\n+```\n \n Non-codesigners: wait for Windows/macOS detached signatures:\n \n - Once the Windows/macOS builds each have 3 matching signatures, they will be signed with their respective release keys.\n - Detached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin-core/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n \n-Create (and optionally verify) the signed macOS binary:\n+Create (and optionally verify) the codesigned outputs:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    mv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n-    popd\n+- [Codesigning](/contrib/guix/README.md#codesigning)\n \n-Create (and optionally verify) the signed Windows binaries:\n+Commit your signature for the signed macOS/Windows binaries:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    mv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n-    popd\n+```sh\n+pushd ./guix.sigs\n+git add \"${VERSION}/${SIGNER}\"/all.SHA256SUMS{,.asc}\n+git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n+git push  # Assuming you can push to the guix.sigs tree\n+popd\n+```\n \n-Commit your signature for the signed macOS/Windows binaries:\n+### After 3 or more people have guix-built and their results match:\n \n-    pushd gitian.sigs\n-    git add ${VERSION}-osx-signed/\"${SIGNER}\"\n-    git add ${VERSION}-win-signed/\"${SIGNER}\"\n-    git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n-    git push  # Assuming you can push to the gitian.sigs tree\n-    popd\n+Combine `all.SHA256SUMS` and `all.SHA256SUMS.asc` into a clear-signed\n+`SHA256SUMS.asc` message:\n \n-### After 3 or more people have gitian-built and their results match:\n+```sh\n+echo -e \"-----BEGIN PGP SIGNED MESSAGE-----\\nHash: SHA256\\n\\n$(cat all.SHA256SUMS)\\n$(cat filename.txt.asc)\" > SHA256SUMS.asc\n+```\n \n-- Create `SHA256SUMS.asc` for the builds, and GPG-sign it:\n+Here's an equivalent, more readable command if you're confident that you won't\n+mess up whitespaces when copy-pasting:\n \n ```bash\n-sha256sum * > SHA256SUMS\n-```\n+cat << EOF > SHA256SUMS.asc\n+-----BEGIN PGP SIGNED MESSAGE-----\n+Hash: SHA256\n \n-The list of files should be:\n-```\n-bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz\n-bitcoin-${VERSION}-riscv64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-x86_64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-osx64.tar.gz\n-bitcoin-${VERSION}-osx.dmg\n-bitcoin-${VERSION}.tar.gz\n-bitcoin-${VERSION}-win64-setup.exe\n-bitcoin-${VERSION}-win64.zip\n+$(cat all.SHA256SUMS)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668022162",
      "id" : 668022162,
      "in_reply_to_id" : 667739011,
      "line" : 206,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODAyMjE2Mg==",
      "original_commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "original_line" : 206,
      "original_position" : 282,
      "original_start_line" : null,
      "path" : "doc/release-process.md",
      "position" : 282,
      "pull_request_review_id" : 704237049,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T15:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668022162",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668025386"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668025386"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good to have these written down even if it's in a review comment :-)\r\nDo you think there's any torrent-related instruction that **does** belong in release-process.md?",
      "commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "created_at" : "2021-07-12T15:19:02Z",
      "diff_hunk" : "@@ -212,93 +154,84 @@ Codesigner only: Sign the windows binaries:\n \n Codesigner only: Commit the detached codesign payloads:\n \n-    cd ~/bitcoin-detached-sigs\n-    checkout the appropriate branch for this release series\n-    rm -rf *\n-    tar xf signature-osx.tar.gz\n-    tar xf signature-win.tar.gz\n-    git add -A\n-    git commit -m \"point to ${VERSION}\"\n-    git tag -s v${VERSION} HEAD\n-    git push the current branch and new tag\n+```sh\n+pushd ./bitcoin-detached-sigs\n+# checkout the appropriate branch for this release series\n+rm -rf ./*\n+tar xf signature-osx.tar.gz\n+tar xf signature-win.tar.gz\n+git add -A\n+git commit -m \"point to ${VERSION}\"\n+git tag -s \"v${VERSION}\" HEAD\n+git push the current branch and new tag\n+popd\n+```\n \n Non-codesigners: wait for Windows/macOS detached signatures:\n \n - Once the Windows/macOS builds each have 3 matching signatures, they will be signed with their respective release keys.\n - Detached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin-core/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n \n-Create (and optionally verify) the signed macOS binary:\n+Create (and optionally verify) the codesigned outputs:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    mv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n-    popd\n+- [Codesigning](/contrib/guix/README.md#codesigning)\n \n-Create (and optionally verify) the signed Windows binaries:\n+Commit your signature for the signed macOS/Windows binaries:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    mv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n-    popd\n+```sh\n+pushd ./guix.sigs\n+git add \"${VERSION}/${SIGNER}\"/all.SHA256SUMS{,.asc}\n+git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n+git push  # Assuming you can push to the guix.sigs tree\n+popd\n+```\n \n-Commit your signature for the signed macOS/Windows binaries:\n+### After 3 or more people have guix-built and their results match:\n \n-    pushd gitian.sigs\n-    git add ${VERSION}-osx-signed/\"${SIGNER}\"\n-    git add ${VERSION}-win-signed/\"${SIGNER}\"\n-    git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n-    git push  # Assuming you can push to the gitian.sigs tree\n-    popd\n+Combine `all.SHA256SUMS` and `all.SHA256SUMS.asc` into a clear-signed\n+`SHA256SUMS.asc` message:\n \n-### After 3 or more people have gitian-built and their results match:\n+```sh\n+echo -e \"-----BEGIN PGP SIGNED MESSAGE-----\\nHash: SHA256\\n\\n$(cat all.SHA256SUMS)\\n$(cat filename.txt.asc)\" > SHA256SUMS.asc\n+```\n \n-- Create `SHA256SUMS.asc` for the builds, and GPG-sign it:\n+Here's an equivalent, more readable command if you're confident that you won't\n+mess up whitespaces when copy-pasting:\n \n ```bash\n-sha256sum * > SHA256SUMS\n-```\n+cat << EOF > SHA256SUMS.asc\n+-----BEGIN PGP SIGNED MESSAGE-----\n+Hash: SHA256\n \n-The list of files should be:\n-```\n-bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz\n-bitcoin-${VERSION}-riscv64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-x86_64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-osx64.tar.gz\n-bitcoin-${VERSION}-osx.dmg\n-bitcoin-${VERSION}.tar.gz\n-bitcoin-${VERSION}-win64-setup.exe\n-bitcoin-${VERSION}-win64.zip\n+$(cat all.SHA256SUMS)\n+$(cat all.SHA256SUMS.asc)\n+EOF\n ```\n-The `*-debug*` files generated by the gitian build contain debug symbols\n-for troubleshooting by developers. It is assumed that anyone that is interested\n-in debugging can run gitian to generate the files for themselves. To avoid\n-end-user confusion about which file to pick, as well as save storage\n-space *do not upload these to the bitcoincore.org server, nor put them in the torrent*.\n \n-- GPG-sign it, delete the unsigned file:\n-```\n-gpg --digest-algo sha256 --clearsign SHA256SUMS # outputs SHA256SUMS.asc\n-rm SHA256SUMS\n-```\n-(the digest algorithm is forced to sha256 to avoid confusion of the `Hash:` header that GPG adds with the SHA256 used for the files)\n-Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spurious/nonsensical entry.\n+- Upload to the bitcoincore.org server (`/var/www/bin/bitcoin-core-${VERSION}`):\n+    1. The contents of `./bitcoin/guix-build-${VERSION}/output`, except for\n+       `*-debug*` files.\n \n-- Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoincore.org server\n-  into `/var/www/bin/bitcoin-core-${VERSION}`\n+       The `*-debug*` files generated by the guix build contain debug symbols\n+       for troubleshooting by developers. It is assumed that anyone that is\n+       interested in debugging can run guix to generate the files for\n+       themselves. To avoid end-user confusion about which file to pick, as well\n+       as save storage space *do not upload these to the bitcoincore.org server,\n+       nor put them in the torrent*.\n \n-- A `.torrent` will appear in the directory after a few minutes. Optionally help seed this torrent. To get the `magnet:` URI use:\n-```bash\n-transmission-show -m <torrent file>\n-```\n-Insert the magnet URI into the announcement sent to mailing lists. This permits\n-people without access to `bitcoincore.org` to download the binary distribution.\n-Also put it into the `optional_magnetlink:` slot in the YAML file for\n-bitcoincore.org.\n+    2. The combined clear-signed message you just created `SHA256SUMS.asc`\n+\n+- A `.torrent` will appear in the directory after a few minutes. Optionally help",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668025386",
      "id" : 668025386,
      "in_reply_to_id" : 667743780,
      "line" : 224,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODAyNTM4Ng==",
      "original_commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "original_line" : 224,
      "original_position" : 322,
      "original_start_line" : null,
      "path" : "doc/release-process.md",
      "position" : 322,
      "pull_request_review_id" : 704241583,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T15:19:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668025386",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668087899"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668087899"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You can use above link `![boostrap map](https://user-images.githubusercontent.com/6399679/125064185-a9a59880-e0b0-11eb-82c1-9b8e5dc9950d.png)` if you don't want to upload it anywhere else.",
      "commit_id" : "d766580dfcdc0192e4d2421af9406f758a82fa77",
      "created_at" : "2021-07-12T16:38:34Z",
      "diff_hunk" : "@@ -0,0 +1,787 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [â¤ skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both using the offical shell installer script\n+and using binary tarballs can be found in the GNU Guix Manual's [Binary\n+Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this\n+section](#add-an-etcprofiled-entry) for instructions on how to add a\n+`/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute Hippo)\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here][security-model]), v1.2.0 has a known problems when building\n+GnuTLS from source. Solutions and workarounds are documented\n+[here](#gnutls-test-suite-fail-status-request-revoked).\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+I strongly urge you to at least skim through the entire section once before you\n+start issuing commands, as it will save you a lot of unncessary pain and\n+anguish.\n+\n+### Installing common build tools\n+\n+There are a few basic build tools that are required for most things we'll build,\n+so let's install them now:\n+\n+Text transformation/i18n:\n+- `autopoint` (sometimes packaged in `gettext`)\n+- `help2man`\n+- `po4a`\n+- `texinfo`\n+\n+Build system tools:\n+- `g++` w/ C++11 support\n+- `libtool`\n+- `autoconf`\n+- `automake`\n+- `pkg-config` (sometimes packaged as `pkgconf`)\n+- `make`\n+- `cmake`\n+\n+Miscellaneous:\n+- `git`\n+- `gnupg`\n+- `python3`\n+\n+### Building and Installing Guix's dependencies\n+\n+In order to build Guix itself from source, we need to first make sure that the\n+necessary dependencies are installed and discoverable. The most up-to-date list\n+of Guix's dependencies is kept in the [\"Requirements\"\n+section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n+Reference Manual.\n+\n+Depending on your distribution, most or all of these dependencies may already be\n+packaged and installable without manually building and installing.\n+\n+For reference, the graphic below outlines Guix v1.3.0's dependency graph:\n+\n+![boostrap map](guix-v1.3.0-bootstrap.png)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668087899",
      "id" : 668087899,
      "in_reply_to_id" : 666846667,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODA4Nzg5OQ==",
      "original_commit_id" : "4a6d7454e8a2a666216ff0d6f7260922bb72296d",
      "original_line" : 167,
      "original_position" : 167,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : null,
      "pull_request_review_id" : 704323559,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T16:38:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668087899",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668090935"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668090935"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done!",
      "commit_id" : "d766580dfcdc0192e4d2421af9406f758a82fa77",
      "created_at" : "2021-07-12T16:42:49Z",
      "diff_hunk" : "@@ -0,0 +1,787 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [â¤ skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both using the offical shell installer script\n+and using binary tarballs can be found in the GNU Guix Manual's [Binary\n+Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this\n+section](#add-an-etcprofiled-entry) for instructions on how to add a\n+`/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute Hippo)\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here][security-model]), v1.2.0 has a known problems when building\n+GnuTLS from source. Solutions and workarounds are documented\n+[here](#gnutls-test-suite-fail-status-request-revoked).\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+I strongly urge you to at least skim through the entire section once before you\n+start issuing commands, as it will save you a lot of unncessary pain and\n+anguish.\n+\n+### Installing common build tools\n+\n+There are a few basic build tools that are required for most things we'll build,\n+so let's install them now:\n+\n+Text transformation/i18n:\n+- `autopoint` (sometimes packaged in `gettext`)\n+- `help2man`\n+- `po4a`\n+- `texinfo`\n+\n+Build system tools:\n+- `g++` w/ C++11 support\n+- `libtool`\n+- `autoconf`\n+- `automake`\n+- `pkg-config` (sometimes packaged as `pkgconf`)\n+- `make`\n+- `cmake`\n+\n+Miscellaneous:\n+- `git`\n+- `gnupg`\n+- `python3`\n+\n+### Building and Installing Guix's dependencies\n+\n+In order to build Guix itself from source, we need to first make sure that the\n+necessary dependencies are installed and discoverable. The most up-to-date list\n+of Guix's dependencies is kept in the [\"Requirements\"\n+section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n+Reference Manual.\n+\n+Depending on your distribution, most or all of these dependencies may already be\n+packaged and installable without manually building and installing.\n+\n+For reference, the graphic below outlines Guix v1.3.0's dependency graph:\n+\n+![boostrap map](guix-v1.3.0-bootstrap.png)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668090935",
      "id" : 668090935,
      "in_reply_to_id" : 666846667,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODA5MDkzNQ==",
      "original_commit_id" : "4a6d7454e8a2a666216ff0d6f7260922bb72296d",
      "original_line" : 167,
      "original_position" : 167,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : null,
      "pull_request_review_id" : 704327578,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T16:42:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668090935",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668095427"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668095427"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed in fc4f8449f34e32b0b9ac9d218d6c3264b02467ba",
      "commit_id" : "d766580dfcdc0192e4d2421af9406f758a82fa77",
      "created_at" : "2021-07-12T16:49:11Z",
      "diff_hunk" : "@@ -18,7 +18,7 @@ source \"$(dirname \"${BASH_SOURCE[0]}\")/libexec/prelude.bash\"\n # Required non-builtin commands should be invocable\n ################\n \n-check_tools cat mkdir make git guix\n+check_tools cat mkdir make getent git guix",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668095427",
      "id" : 668095427,
      "in_reply_to_id" : 664932122,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODA5NTQyNw==",
      "original_commit_id" : "d66c110f9415114f03bd0fb3f7f59505bc11532f",
      "original_line" : 21,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "contrib/guix/guix-build",
      "position" : null,
      "pull_request_review_id" : 704333539,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T16:49:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668095427",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668096247"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668096247"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think we do here: https://github.com/bitcoin/bitcoin/blob/master/doc/build-unix.md#setup-and-build-example-arch-linux",
      "commit_id" : "d766580dfcdc0192e4d2421af9406f758a82fa77",
      "created_at" : "2021-07-12T16:50:28Z",
      "diff_hunk" : "@@ -0,0 +1,679 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section]()\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions]()\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section]()\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on distribution\n+5. Building **from source** [â¤ skip to section]()\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The instructions for both using the offical shell installer script and using\n+binary tarballs are both found in the GNU Guix Manual's [Binary Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this section]() for\n+instructions on how to add a `/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+### Debian 11 (\"Bullseye\")/Ubuntu 21.04 (\"Hirsute\")\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) (\"bullseye\") and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix) (Hirsute Hippo).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here]()), v1.2.0 has a known problems when building GnuTLS from source.\n+Solutions and workarounds are documented [here]().\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668096247",
      "id" : 668096247,
      "in_reply_to_id" : 664960427,
      "line" : 99,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODA5NjI0Nw==",
      "original_commit_id" : "d66c110f9415114f03bd0fb3f7f59505bc11532f",
      "original_line" : 99,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 99,
      "pull_request_review_id" : 704334686,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T16:50:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668096247",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668754244"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668754244"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe that we create the torrent from the `bitcoin-core-x.x.x` directory (so the directory itself is in the torrent, with in it the archives for every platform as well as the `SHA256SUMS.asc`).\r\nWhen you do this in `transmission-gtk` it makes a torrent file called `bitcoin-core-x.y.z.torrent` which I've had to rename manually to `bitcoin-x.y.z.torrent` before uploading, as that has been the naming scheme e.g. https://bitcoincore.org/bin/bitcoin-core-0.21.1/bitcoin-0.21.1.torrent.\r\n\r\nSomewhat amusing: A commonly asked question is why the `SHA256SUMS.asc` doesn't contain a hash of the torrent, but this is because that would create a chicken-egg problem :smile: ",
      "commit_id" : "d766580dfcdc0192e4d2421af9406f758a82fa77",
      "created_at" : "2021-07-13T13:17:54Z",
      "diff_hunk" : "@@ -212,93 +154,84 @@ Codesigner only: Sign the windows binaries:\n \n Codesigner only: Commit the detached codesign payloads:\n \n-    cd ~/bitcoin-detached-sigs\n-    checkout the appropriate branch for this release series\n-    rm -rf *\n-    tar xf signature-osx.tar.gz\n-    tar xf signature-win.tar.gz\n-    git add -A\n-    git commit -m \"point to ${VERSION}\"\n-    git tag -s v${VERSION} HEAD\n-    git push the current branch and new tag\n+```sh\n+pushd ./bitcoin-detached-sigs\n+# checkout the appropriate branch for this release series\n+rm -rf ./*\n+tar xf signature-osx.tar.gz\n+tar xf signature-win.tar.gz\n+git add -A\n+git commit -m \"point to ${VERSION}\"\n+git tag -s \"v${VERSION}\" HEAD\n+git push the current branch and new tag\n+popd\n+```\n \n Non-codesigners: wait for Windows/macOS detached signatures:\n \n - Once the Windows/macOS builds each have 3 matching signatures, they will be signed with their respective release keys.\n - Detached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin-core/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n \n-Create (and optionally verify) the signed macOS binary:\n+Create (and optionally verify) the codesigned outputs:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    mv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n-    popd\n+- [Codesigning](/contrib/guix/README.md#codesigning)\n \n-Create (and optionally verify) the signed Windows binaries:\n+Commit your signature for the signed macOS/Windows binaries:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    mv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n-    popd\n+```sh\n+pushd ./guix.sigs\n+git add \"${VERSION}/${SIGNER}\"/all.SHA256SUMS{,.asc}\n+git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n+git push  # Assuming you can push to the guix.sigs tree\n+popd\n+```\n \n-Commit your signature for the signed macOS/Windows binaries:\n+### After 3 or more people have guix-built and their results match:\n \n-    pushd gitian.sigs\n-    git add ${VERSION}-osx-signed/\"${SIGNER}\"\n-    git add ${VERSION}-win-signed/\"${SIGNER}\"\n-    git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n-    git push  # Assuming you can push to the gitian.sigs tree\n-    popd\n+Combine `all.SHA256SUMS` and `all.SHA256SUMS.asc` into a clear-signed\n+`SHA256SUMS.asc` message:\n \n-### After 3 or more people have gitian-built and their results match:\n+```sh\n+echo -e \"-----BEGIN PGP SIGNED MESSAGE-----\\nHash: SHA256\\n\\n$(cat all.SHA256SUMS)\\n$(cat filename.txt.asc)\" > SHA256SUMS.asc\n+```\n \n-- Create `SHA256SUMS.asc` for the builds, and GPG-sign it:\n+Here's an equivalent, more readable command if you're confident that you won't\n+mess up whitespaces when copy-pasting:\n \n ```bash\n-sha256sum * > SHA256SUMS\n-```\n+cat << EOF > SHA256SUMS.asc\n+-----BEGIN PGP SIGNED MESSAGE-----\n+Hash: SHA256\n \n-The list of files should be:\n-```\n-bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz\n-bitcoin-${VERSION}-riscv64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-x86_64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-osx64.tar.gz\n-bitcoin-${VERSION}-osx.dmg\n-bitcoin-${VERSION}.tar.gz\n-bitcoin-${VERSION}-win64-setup.exe\n-bitcoin-${VERSION}-win64.zip\n+$(cat all.SHA256SUMS)\n+$(cat all.SHA256SUMS.asc)\n+EOF\n ```\n-The `*-debug*` files generated by the gitian build contain debug symbols\n-for troubleshooting by developers. It is assumed that anyone that is interested\n-in debugging can run gitian to generate the files for themselves. To avoid\n-end-user confusion about which file to pick, as well as save storage\n-space *do not upload these to the bitcoincore.org server, nor put them in the torrent*.\n \n-- GPG-sign it, delete the unsigned file:\n-```\n-gpg --digest-algo sha256 --clearsign SHA256SUMS # outputs SHA256SUMS.asc\n-rm SHA256SUMS\n-```\n-(the digest algorithm is forced to sha256 to avoid confusion of the `Hash:` header that GPG adds with the SHA256 used for the files)\n-Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spurious/nonsensical entry.\n+- Upload to the bitcoincore.org server (`/var/www/bin/bitcoin-core-${VERSION}`):\n+    1. The contents of `./bitcoin/guix-build-${VERSION}/output`, except for\n+       `*-debug*` files.\n \n-- Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoincore.org server\n-  into `/var/www/bin/bitcoin-core-${VERSION}`\n+       The `*-debug*` files generated by the guix build contain debug symbols\n+       for troubleshooting by developers. It is assumed that anyone that is\n+       interested in debugging can run guix to generate the files for\n+       themselves. To avoid end-user confusion about which file to pick, as well\n+       as save storage space *do not upload these to the bitcoincore.org server,\n+       nor put them in the torrent*.\n \n-- A `.torrent` will appear in the directory after a few minutes. Optionally help seed this torrent. To get the `magnet:` URI use:\n-```bash\n-transmission-show -m <torrent file>\n-```\n-Insert the magnet URI into the announcement sent to mailing lists. This permits\n-people without access to `bitcoincore.org` to download the binary distribution.\n-Also put it into the `optional_magnetlink:` slot in the YAML file for\n-bitcoincore.org.\n+    2. The combined clear-signed message you just created `SHA256SUMS.asc`\n+\n+- A `.torrent` will appear in the directory after a few minutes. Optionally help",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r668754244",
      "id" : 668754244,
      "in_reply_to_id" : 667743780,
      "line" : 224,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODc1NDI0NA==",
      "original_commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "original_line" : 224,
      "original_position" : 322,
      "original_start_line" : null,
      "path" : "doc/release-process.md",
      "position" : 322,
      "pull_request_review_id" : 705174168,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-13T13:17:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668754244",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r669143414"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/669143414"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@( * O * )@\r\n\r\n```suggestion\r\nThe installation instructions for both the official shell installer script and\r\n```",
      "commit_id" : "181ba751f278f5aac94c5ba1b8beeb6b3ec4629e",
      "created_at" : "2021-07-13T22:09:24Z",
      "diff_hunk" : "@@ -0,0 +1,816 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [â¤ skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both the offical shell installer script and",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r669143414",
      "id" : 669143414,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTE0MzQxNA==",
      "original_commit_id" : "d766580dfcdc0192e4d2421af9406f758a82fa77",
      "original_line" : 45,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : null,
      "pull_request_review_id" : 705688831,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-14T04:08:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/669143414",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23396902?v=4",
         "events_url" : "https://api.github.com/users/jarolrod/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jarolrod/followers",
         "following_url" : "https://api.github.com/users/jarolrod/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jarolrod/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jarolrod",
         "id" : 23396902,
         "login" : "jarolrod",
         "node_id" : "MDQ6VXNlcjIzMzk2OTAy",
         "organizations_url" : "https://api.github.com/users/jarolrod/orgs",
         "received_events_url" : "https://api.github.com/users/jarolrod/received_events",
         "repos_url" : "https://api.github.com/users/jarolrod/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jarolrod/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jarolrod"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r669145892"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/669145892"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We link to [repology](https://repology.org/project/guix/versions) which provides the reader insight into what distributions package `guix`. I think doing this makes including a list of what distros include Guix at time of writing here. This list could be misleading as in it could make an `openSUSE` user believe that there is no distro package for them (if they don't look too much into it).\r\n\r\n```suggestion\r\n   - Works only on distributions with Guix packaged\r\n```",
      "commit_id" : "181ba751f278f5aac94c5ba1b8beeb6b3ec4629e",
      "created_at" : "2021-07-13T22:15:04Z",
      "diff_hunk" : "@@ -0,0 +1,816 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r669145892",
      "id" : 669145892,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTE0NTg5Mg==",
      "original_commit_id" : "d766580dfcdc0192e4d2421af9406f758a82fa77",
      "original_line" : 30,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : null,
      "pull_request_review_id" : 705688831,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-14T04:08:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/669145892",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23396902?v=4",
         "events_url" : "https://api.github.com/users/jarolrod/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jarolrod/followers",
         "following_url" : "https://api.github.com/users/jarolrod/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jarolrod/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jarolrod",
         "id" : 23396902,
         "login" : "jarolrod",
         "node_id" : "MDQ6VXNlcjIzMzk2OTAy",
         "organizations_url" : "https://api.github.com/users/jarolrod/orgs",
         "received_events_url" : "https://api.github.com/users/jarolrod/received_events",
         "repos_url" : "https://api.github.com/users/jarolrod/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jarolrod/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jarolrod"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r669147011"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/669147011"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think that this section is necessary here\r\n\r\n```suggestion\r\n\r\n```",
      "commit_id" : "181ba751f278f5aac94c5ba1b8beeb6b3ec4629e",
      "created_at" : "2021-07-13T22:17:40Z",
      "diff_hunk" : "@@ -0,0 +1,816 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [â¤ skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both the offical shell installer script and\n+the binary tarballs can be found in the GNU Guix Manual's [Binary Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this\n+section](#add-an-etcprofiled-entry) for instructions on how to add a\n+`/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+Note that this section is based on the distro packaging situation at the time of\n+writing (July 2021). Guix is expected to be more widely packaged over time. For\n+an up-to-date view on Guix's package status/version across distros, please see:\n+https://repology.org/project/guix/versions\n+\n+### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute Hippo)\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here][security-model]), v1.2.0 has a known problems when building\n+GnuTLS from source. Solutions and workarounds are documented\n+[here](#gnutls-test-suite-fail-status-request-revoked).\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r669147011",
      "id" : 669147011,
      "line" : 92,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2OTE0NzAxMQ==",
      "original_commit_id" : "d766580dfcdc0192e4d2421af9406f758a82fa77",
      "original_line" : 92,
      "original_position" : 95,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 92,
      "pull_request_review_id" : 705688831,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-14T04:08:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/669147011",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23396902?v=4",
         "events_url" : "https://api.github.com/users/jarolrod/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jarolrod/followers",
         "following_url" : "https://api.github.com/users/jarolrod/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jarolrod/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jarolrod",
         "id" : 23396902,
         "login" : "jarolrod",
         "node_id" : "MDQ6VXNlcjIzMzk2OTAy",
         "organizations_url" : "https://api.github.com/users/jarolrod/orgs",
         "received_events_url" : "https://api.github.com/users/jarolrod/received_events",
         "repos_url" : "https://api.github.com/users/jarolrod/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jarolrod/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jarolrod"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r670043979"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670043979"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added some info in 181ba751f278f5aac94c5ba1b8beeb6b3ec4629e, let me know if I'm missing anything",
      "commit_id" : "181ba751f278f5aac94c5ba1b8beeb6b3ec4629e",
      "created_at" : "2021-07-15T00:40:36Z",
      "diff_hunk" : "@@ -212,93 +154,84 @@ Codesigner only: Sign the windows binaries:\n \n Codesigner only: Commit the detached codesign payloads:\n \n-    cd ~/bitcoin-detached-sigs\n-    checkout the appropriate branch for this release series\n-    rm -rf *\n-    tar xf signature-osx.tar.gz\n-    tar xf signature-win.tar.gz\n-    git add -A\n-    git commit -m \"point to ${VERSION}\"\n-    git tag -s v${VERSION} HEAD\n-    git push the current branch and new tag\n+```sh\n+pushd ./bitcoin-detached-sigs\n+# checkout the appropriate branch for this release series\n+rm -rf ./*\n+tar xf signature-osx.tar.gz\n+tar xf signature-win.tar.gz\n+git add -A\n+git commit -m \"point to ${VERSION}\"\n+git tag -s \"v${VERSION}\" HEAD\n+git push the current branch and new tag\n+popd\n+```\n \n Non-codesigners: wait for Windows/macOS detached signatures:\n \n - Once the Windows/macOS builds each have 3 matching signatures, they will be signed with their respective release keys.\n - Detached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin-core/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n \n-Create (and optionally verify) the signed macOS binary:\n+Create (and optionally verify) the codesigned outputs:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    mv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n-    popd\n+- [Codesigning](/contrib/guix/README.md#codesigning)\n \n-Create (and optionally verify) the signed Windows binaries:\n+Commit your signature for the signed macOS/Windows binaries:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    mv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n-    popd\n+```sh\n+pushd ./guix.sigs\n+git add \"${VERSION}/${SIGNER}\"/all.SHA256SUMS{,.asc}\n+git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n+git push  # Assuming you can push to the guix.sigs tree\n+popd\n+```\n \n-Commit your signature for the signed macOS/Windows binaries:\n+### After 3 or more people have guix-built and their results match:\n \n-    pushd gitian.sigs\n-    git add ${VERSION}-osx-signed/\"${SIGNER}\"\n-    git add ${VERSION}-win-signed/\"${SIGNER}\"\n-    git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n-    git push  # Assuming you can push to the gitian.sigs tree\n-    popd\n+Combine `all.SHA256SUMS` and `all.SHA256SUMS.asc` into a clear-signed\n+`SHA256SUMS.asc` message:\n \n-### After 3 or more people have gitian-built and their results match:\n+```sh\n+echo -e \"-----BEGIN PGP SIGNED MESSAGE-----\\nHash: SHA256\\n\\n$(cat all.SHA256SUMS)\\n$(cat filename.txt.asc)\" > SHA256SUMS.asc\n+```\n \n-- Create `SHA256SUMS.asc` for the builds, and GPG-sign it:\n+Here's an equivalent, more readable command if you're confident that you won't\n+mess up whitespaces when copy-pasting:\n \n ```bash\n-sha256sum * > SHA256SUMS\n-```\n+cat << EOF > SHA256SUMS.asc\n+-----BEGIN PGP SIGNED MESSAGE-----\n+Hash: SHA256\n \n-The list of files should be:\n-```\n-bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz\n-bitcoin-${VERSION}-riscv64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-x86_64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-osx64.tar.gz\n-bitcoin-${VERSION}-osx.dmg\n-bitcoin-${VERSION}.tar.gz\n-bitcoin-${VERSION}-win64-setup.exe\n-bitcoin-${VERSION}-win64.zip\n+$(cat all.SHA256SUMS)\n+$(cat all.SHA256SUMS.asc)\n+EOF\n ```\n-The `*-debug*` files generated by the gitian build contain debug symbols\n-for troubleshooting by developers. It is assumed that anyone that is interested\n-in debugging can run gitian to generate the files for themselves. To avoid\n-end-user confusion about which file to pick, as well as save storage\n-space *do not upload these to the bitcoincore.org server, nor put them in the torrent*.\n \n-- GPG-sign it, delete the unsigned file:\n-```\n-gpg --digest-algo sha256 --clearsign SHA256SUMS # outputs SHA256SUMS.asc\n-rm SHA256SUMS\n-```\n-(the digest algorithm is forced to sha256 to avoid confusion of the `Hash:` header that GPG adds with the SHA256 used for the files)\n-Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spurious/nonsensical entry.\n+- Upload to the bitcoincore.org server (`/var/www/bin/bitcoin-core-${VERSION}`):\n+    1. The contents of `./bitcoin/guix-build-${VERSION}/output`, except for\n+       `*-debug*` files.\n \n-- Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoincore.org server\n-  into `/var/www/bin/bitcoin-core-${VERSION}`\n+       The `*-debug*` files generated by the guix build contain debug symbols\n+       for troubleshooting by developers. It is assumed that anyone that is\n+       interested in debugging can run guix to generate the files for\n+       themselves. To avoid end-user confusion about which file to pick, as well\n+       as save storage space *do not upload these to the bitcoincore.org server,\n+       nor put them in the torrent*.\n \n-- A `.torrent` will appear in the directory after a few minutes. Optionally help seed this torrent. To get the `magnet:` URI use:\n-```bash\n-transmission-show -m <torrent file>\n-```\n-Insert the magnet URI into the announcement sent to mailing lists. This permits\n-people without access to `bitcoincore.org` to download the binary distribution.\n-Also put it into the `optional_magnetlink:` slot in the YAML file for\n-bitcoincore.org.\n+    2. The combined clear-signed message you just created `SHA256SUMS.asc`\n+\n+- A `.torrent` will appear in the directory after a few minutes. Optionally help",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r670043979",
      "id" : 670043979,
      "in_reply_to_id" : 667743780,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDA0Mzk3OQ==",
      "original_commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "original_line" : 224,
      "original_position" : 322,
      "original_start_line" : null,
      "path" : "doc/release-process.md",
      "position" : null,
      "pull_request_review_id" : 706826227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-15T00:40:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670043979",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r670044071"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670044071"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Right, fixed!",
      "commit_id" : "181ba751f278f5aac94c5ba1b8beeb6b3ec4629e",
      "created_at" : "2021-07-15T00:40:56Z",
      "diff_hunk" : "@@ -0,0 +1,816 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r670044071",
      "id" : 670044071,
      "in_reply_to_id" : 669145892,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDA0NDA3MQ==",
      "original_commit_id" : "d766580dfcdc0192e4d2421af9406f758a82fa77",
      "original_line" : 30,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : null,
      "pull_request_review_id" : 706826333,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-15T00:40:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670044071",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r670044176"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670044176"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ð° Fixed!",
      "commit_id" : "181ba751f278f5aac94c5ba1b8beeb6b3ec4629e",
      "created_at" : "2021-07-15T00:41:09Z",
      "diff_hunk" : "@@ -0,0 +1,816 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [â¤ skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both the offical shell installer script and",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r670044176",
      "id" : 670044176,
      "in_reply_to_id" : 669143414,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDA0NDE3Ng==",
      "original_commit_id" : "d766580dfcdc0192e4d2421af9406f758a82fa77",
      "original_line" : 45,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : null,
      "pull_request_review_id" : 706826430,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-15T00:41:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670044176",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r670044454"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670044454"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Going to leave it there since it doesn't hurt and in case people don't know how Debian/Ubuntu versioning works (\"I have bionic, but is that after hirsute or before?\")",
      "commit_id" : "181ba751f278f5aac94c5ba1b8beeb6b3ec4629e",
      "created_at" : "2021-07-15T00:42:02Z",
      "diff_hunk" : "@@ -0,0 +1,816 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, at time of writing:\n+     - Debian Bullseye or later\n+     - Ubuntu Hirsute or later\n+     - Arch Linux (via AUR)\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [â¤ skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both the offical shell installer script and\n+the binary tarballs can be found in the GNU Guix Manual's [Binary Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this\n+section](#add-an-etcprofiled-entry) for instructions on how to add a\n+`/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+Note that this section is based on the distro packaging situation at the time of\n+writing (July 2021). Guix is expected to be more widely packaged over time. For\n+an up-to-date view on Guix's package status/version across distros, please see:\n+https://repology.org/project/guix/versions\n+\n+### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute Hippo)\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here][security-model]), v1.2.0 has a known problems when building\n+GnuTLS from source. Solutions and workarounds are documented\n+[here](#gnutls-test-suite-fail-status-request-revoked).\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r670044454",
      "id" : 670044454,
      "in_reply_to_id" : 669147011,
      "line" : 92,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDA0NDQ1NA==",
      "original_commit_id" : "d766580dfcdc0192e4d2421af9406f758a82fa77",
      "original_line" : 92,
      "original_position" : 95,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 92,
      "pull_request_review_id" : 706826707,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-15T00:42:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670044454",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 181ba751f278f5aac94c5ba1b8beeb6b3ec4629e",
      "created_at" : "2021-07-15T13:12:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#issuecomment-880683239",
      "id" : 880683239,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21711",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg4MDY4MzIzOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-15T13:12:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880683239",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r670448520"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670448520"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Looks good to me now!",
      "commit_id" : "181ba751f278f5aac94c5ba1b8beeb6b3ec4629e",
      "created_at" : "2021-07-15T13:12:57Z",
      "diff_hunk" : "@@ -212,93 +154,84 @@ Codesigner only: Sign the windows binaries:\n \n Codesigner only: Commit the detached codesign payloads:\n \n-    cd ~/bitcoin-detached-sigs\n-    checkout the appropriate branch for this release series\n-    rm -rf *\n-    tar xf signature-osx.tar.gz\n-    tar xf signature-win.tar.gz\n-    git add -A\n-    git commit -m \"point to ${VERSION}\"\n-    git tag -s v${VERSION} HEAD\n-    git push the current branch and new tag\n+```sh\n+pushd ./bitcoin-detached-sigs\n+# checkout the appropriate branch for this release series\n+rm -rf ./*\n+tar xf signature-osx.tar.gz\n+tar xf signature-win.tar.gz\n+git add -A\n+git commit -m \"point to ${VERSION}\"\n+git tag -s \"v${VERSION}\" HEAD\n+git push the current branch and new tag\n+popd\n+```\n \n Non-codesigners: wait for Windows/macOS detached signatures:\n \n - Once the Windows/macOS builds each have 3 matching signatures, they will be signed with their respective release keys.\n - Detached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin-core/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n \n-Create (and optionally verify) the signed macOS binary:\n+Create (and optionally verify) the codesigned outputs:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    mv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n-    popd\n+- [Codesigning](/contrib/guix/README.md#codesigning)\n \n-Create (and optionally verify) the signed Windows binaries:\n+Commit your signature for the signed macOS/Windows binaries:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    mv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n-    popd\n+```sh\n+pushd ./guix.sigs\n+git add \"${VERSION}/${SIGNER}\"/all.SHA256SUMS{,.asc}\n+git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n+git push  # Assuming you can push to the guix.sigs tree\n+popd\n+```\n \n-Commit your signature for the signed macOS/Windows binaries:\n+### After 3 or more people have guix-built and their results match:\n \n-    pushd gitian.sigs\n-    git add ${VERSION}-osx-signed/\"${SIGNER}\"\n-    git add ${VERSION}-win-signed/\"${SIGNER}\"\n-    git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n-    git push  # Assuming you can push to the gitian.sigs tree\n-    popd\n+Combine `all.SHA256SUMS` and `all.SHA256SUMS.asc` into a clear-signed\n+`SHA256SUMS.asc` message:\n \n-### After 3 or more people have gitian-built and their results match:\n+```sh\n+echo -e \"-----BEGIN PGP SIGNED MESSAGE-----\\nHash: SHA256\\n\\n$(cat all.SHA256SUMS)\\n$(cat filename.txt.asc)\" > SHA256SUMS.asc\n+```\n \n-- Create `SHA256SUMS.asc` for the builds, and GPG-sign it:\n+Here's an equivalent, more readable command if you're confident that you won't\n+mess up whitespaces when copy-pasting:\n \n ```bash\n-sha256sum * > SHA256SUMS\n-```\n+cat << EOF > SHA256SUMS.asc\n+-----BEGIN PGP SIGNED MESSAGE-----\n+Hash: SHA256\n \n-The list of files should be:\n-```\n-bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz\n-bitcoin-${VERSION}-riscv64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-x86_64-linux-gnu.tar.gz\n-bitcoin-${VERSION}-osx64.tar.gz\n-bitcoin-${VERSION}-osx.dmg\n-bitcoin-${VERSION}.tar.gz\n-bitcoin-${VERSION}-win64-setup.exe\n-bitcoin-${VERSION}-win64.zip\n+$(cat all.SHA256SUMS)\n+$(cat all.SHA256SUMS.asc)\n+EOF\n ```\n-The `*-debug*` files generated by the gitian build contain debug symbols\n-for troubleshooting by developers. It is assumed that anyone that is interested\n-in debugging can run gitian to generate the files for themselves. To avoid\n-end-user confusion about which file to pick, as well as save storage\n-space *do not upload these to the bitcoincore.org server, nor put them in the torrent*.\n \n-- GPG-sign it, delete the unsigned file:\n-```\n-gpg --digest-algo sha256 --clearsign SHA256SUMS # outputs SHA256SUMS.asc\n-rm SHA256SUMS\n-```\n-(the digest algorithm is forced to sha256 to avoid confusion of the `Hash:` header that GPG adds with the SHA256 used for the files)\n-Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spurious/nonsensical entry.\n+- Upload to the bitcoincore.org server (`/var/www/bin/bitcoin-core-${VERSION}`):\n+    1. The contents of `./bitcoin/guix-build-${VERSION}/output`, except for\n+       `*-debug*` files.\n \n-- Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoincore.org server\n-  into `/var/www/bin/bitcoin-core-${VERSION}`\n+       The `*-debug*` files generated by the guix build contain debug symbols\n+       for troubleshooting by developers. It is assumed that anyone that is\n+       interested in debugging can run guix to generate the files for\n+       themselves. To avoid end-user confusion about which file to pick, as well\n+       as save storage space *do not upload these to the bitcoincore.org server,\n+       nor put them in the torrent*.\n \n-- A `.torrent` will appear in the directory after a few minutes. Optionally help seed this torrent. To get the `magnet:` URI use:\n-```bash\n-transmission-show -m <torrent file>\n-```\n-Insert the magnet URI into the announcement sent to mailing lists. This permits\n-people without access to `bitcoincore.org` to download the binary distribution.\n-Also put it into the `optional_magnetlink:` slot in the YAML file for\n-bitcoincore.org.\n+    2. The combined clear-signed message you just created `SHA256SUMS.asc`\n+\n+- A `.torrent` will appear in the directory after a few minutes. Optionally help",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r670448520",
      "id" : 670448520,
      "in_reply_to_id" : 667743780,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDQ0ODUyMA==",
      "original_commit_id" : "5e23466e04e8c46aba39a1e3bf297d1947455740",
      "original_line" : 224,
      "original_position" : 322,
      "original_start_line" : null,
      "path" : "doc/release-process.md",
      "position" : null,
      "pull_request_review_id" : 707334284,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-15T13:12:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670448520",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r670970289"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670970289"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Commit bf244f908ec92d223fc8272cda66a4dc13545d8c\r\n\r\nWorks on Mac and (I think) Windows too.",
      "commit_id" : "181ba751f278f5aac94c5ba1b8beeb6b3ec4629e",
      "created_at" : "2021-07-16T05:12:22Z",
      "diff_hunk" : "@@ -0,0 +1,788 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works on most Linux distributions",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r670970289",
      "id" : 670970289,
      "line" : 24,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDk3MDI4OQ==",
      "original_commit_id" : "bf244f908ec92d223fc8272cda66a4dc13545d8c",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 24,
      "pull_request_review_id" : 708012424,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-16T05:21:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670970289",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r673141596"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673141596"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What is this?",
      "commit_id" : "fac4814106c796b8786dd90053513cc35142dfe5",
      "created_at" : "2021-07-20T13:50:44Z",
      "diff_hunk" : "@@ -0,0 +1,813 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works wherever Docker images work\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, see: https://repology.org/project/guix/versions\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [â¤ skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both the official shell installer script and\n+the binary tarballs can be found in the GNU Guix Manual's [Binary Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this\n+section](#add-an-etcprofiled-entry) for instructions on how to add a\n+`/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+Note that this section is based on the distro packaging situation at the time of\n+writing (July 2021). Guix is expected to be more widely packaged over time. For\n+an up-to-date view on Guix's package status/version across distros, please see:\n+https://repology.org/project/guix/versions\n+\n+### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute Hippo)\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here][security-model]), v1.2.0 has a known problems when building\n+GnuTLS from source. Solutions and workarounds are documented\n+[here](#gnutls-test-suite-fail-status-request-revoked).\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+I strongly urge you to at least skim through the entire section once before you\n+start issuing commands, as it will save you a lot of unncessary pain and\n+anguish.\n+\n+### Installing common build tools\n+\n+There are a few basic build tools that are required for most things we'll build,\n+so let's install them now:\n+\n+Text transformation/i18n:\n+- `autopoint` (sometimes packaged in `gettext`)\n+- `help2man`\n+- `po4a`\n+- `texinfo`\n+\n+Build system tools:\n+- `g++` w/ C++11 support\n+- `libtool`\n+- `autoconf`\n+- `automake`\n+- `pkg-config` (sometimes packaged as `pkgconf`)\n+- `make`\n+- `cmake`\n+\n+Miscellaneous:\n+- `git`\n+- `gnupg`\n+- `python3`\n+\n+### Building and Installing Guix's dependencies\n+\n+In order to build Guix itself from source, we need to first make sure that the\n+necessary dependencies are installed and discoverable. The most up-to-date list\n+of Guix's dependencies is kept in the [\"Requirements\"\n+section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n+Reference Manual.\n+\n+Depending on your distribution, most or all of these dependencies may already be\n+packaged and installable without manually building and installing.\n+\n+For reference, the graphic below outlines Guix v1.3.0's dependency graph:\n+\n+![boostrap map](https://user-images.githubusercontent.com/6399679/125064185-a9a59880-e0b0-11eb-82c1-9b8e5dc9950d.png)\n+\n+#### Guile\n+\n+##### Choosing a Guile version and sticking to it\n+\n+One of the first things you need to decide is which Guile version you want to\n+use: Guile v2.2 or Guile v3.0. Unlike the python2 to python3 transition, Guile\n+v2.2 and Guile v3.0 are largely compatible, as evidenced by the fact that most\n+Guile packages and even [Guix\n+itself](https://guix.gnu.org/en/blog/2020/guile-3-and-guix/) support running on\n+both.\n+\n+What is important here is that you **choose one**, and you **remain consistent**\n+with your choice throughout **all Guile-related packages**, no matter if they\n+are installed via the distribution's package manager or installed from source.\n+This is because the files for Guile packages are installed to directories which\n+are separated based on the Guile version.\n+\n+###### Example: Checking that Ubuntu's `guile-git` is compatible with your chosen Guile version\n+\n+On Ubuntu Focal:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-2.2, guile-bytestructures, libgit2-dev\n+...\n+```\n+\n+As you can see, the package `guile-git` depends on `guile-2.2`, meaning that it\n+was likely built for Guile v2.2. This means that if you decided to use Guile\n+v3.0 on Ubuntu Focal, you would need to build guile-git from source instead of\n+using the distribution package.\n+\n+On Ubuntu Hirsute:\n+\n+```sh\n+$ apt show guile-git\n+Package: guile-git\n+...\n+Depends: guile-3.0 | guile-2.2, guile-bytestructures (>= 1.0.7-3~), libgit2-dev (>= 1.0)\n+...\n+```\n+\n+In this case, `guile-git` depends on either `guile-3.0` or `guile-2.2`, meaning\n+that it would work no matter what Guile version you decided to use.\n+\n+###### Corner case: Multiple versions of Guile on one system\n+\n+It is recommended to only install one version of Guile, so that build systems do\n+not get confused about which Guile to use.\n+\n+However, if you insist on having both Guile v2.2 and Guile v3.0 installed on\n+your system, then you need to **consistently** specify one of\n+`GUILE_EFFECTIVE_VERSION=3.0` or `GUILE_EFFECTIVE_VERSION=2.2` to all\n+`./configure` invocations for Guix and its dependencies.\n+\n+##### Installing Guile\n+\n+Guile is most likely already packaged for your distribution, so after you have\n+[chosen a Guile version](#choosing-a-guile-version-and-sticking-to-it), install\n+it via your distribution's package manager.\n+\n+If your distribution splits packages into `-dev`-suffixed and\n+non-`-dev`-suffixed sub-packages (as is the case for Debian-derived\n+distributions), please make sure to install both. For example, to install Guile\n+v2.2 on Debian/Ubuntu:\n+\n+```sh\n+apt install guile-2.2 guile-2.2-dev\n+```\n+\n+#### Mixing distribution packages and source-built packages\n+\n+At the time of writing, most distributions have _some_ of Guix's dependencies\n+packaged, but not all. This means that you may want to install the distribution\n+package for some dependencies, and manually build-from-source for others.\n+\n+Distribution packages usually install to `/usr`, which is different from the\n+default `./configure` prefix of source-built packages: `/usr/local`.\n+\n+This means that if you mix-and-match distribution packages and source-built\n+packages and do not specify exactly `--prefix=/usr` to `./configure` for\n+source-built packages, you will need to augment the `GUILE_LOAD_PATH` and\n+`GUILE_LOAD_COMPILED_PATH` environment variables so that Guile will look\n+under the right prefix and find your source-built packages.\n+\n+For example, if you are using Guile v2.2, and have Guile packages in the\n+`/usr/local` prefix, either add the following lines to your `.profile` or\n+`.bash_profile` so that the environment variable is properly set for all future\n+shell logins, or paste the lines into a POSIX-style shell to temporarily modify\n+the environment variables of your current shell session.\n+\n+```sh\n+# Help Guile v2.2.x find packages in /usr/local\n+export GUILE_LOAD_PATH=\"/usr/local/share/guile/site/2.2${GUILE_LOAD_PATH:+:}$GUILE_LOAD_PATH\"\n+export GUILE_LOAD_COMPILED_PATH=\"/usr/local/lib/guile/2.2/site-ccache${GUILE_LOAD_COMPILED_PATH:+:}$GUILE_COMPILED_LOAD_PATH\"\n+```\n+\n+Note that these environment variables are used to check for packages during\n+`./configure`, so they should be set as soon as possible should you want to use\n+a prefix other than `/usr`.\n+\n+<!-- ##### Example: Consistently using Guile 3.0 on Ubuntu -->\n+\n+<!-- For example, on Ubuntu, if you choose to use Guile 3.0 and install the -->\n+<!-- `guile-3.0` package, you want to make sure that if you also want to install the -->\n+<!-- `guile-git` package with `apt` that said `guile-git` package was built for Guile -->\n+<!-- v3.0. This can be checked by invoking the following: -->\n+\n+<!-- ``` -->\n+<!-- apt update -->\n+<!-- apt show guile-git -->\n+<!-- ``` -->",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r673141596",
      "id" : 673141596,
      "line" : 283,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MzE0MTU5Ng==",
      "original_commit_id" : "fac4814106c796b8786dd90053513cc35142dfe5",
      "original_line" : 283,
      "original_position" : 283,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 283,
      "pull_request_review_id" : 710604005,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-20T14:01:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673141596",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r673260115"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673260115"
         }
      },
      "author_association" : "MEMBER",
      "body" : "typo: unncessary ==> unnecessary",
      "commit_id" : "fac4814106c796b8786dd90053513cc35142dfe5",
      "created_at" : "2021-07-20T16:03:55Z",
      "diff_hunk" : "@@ -0,0 +1,813 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works wherever Docker images work\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, see: https://repology.org/project/guix/versions\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [â¤ skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both the official shell installer script and\n+the binary tarballs can be found in the GNU Guix Manual's [Binary Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this\n+section](#add-an-etcprofiled-entry) for instructions on how to add a\n+`/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+Note that this section is based on the distro packaging situation at the time of\n+writing (July 2021). Guix is expected to be more widely packaged over time. For\n+an up-to-date view on Guix's package status/version across distros, please see:\n+https://repology.org/project/guix/versions\n+\n+### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute Hippo)\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here][security-model]), v1.2.0 has a known problems when building\n+GnuTLS from source. Solutions and workarounds are documented\n+[here](#gnutls-test-suite-fail-status-request-revoked).\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+I strongly urge you to at least skim through the entire section once before you\n+start issuing commands, as it will save you a lot of unncessary pain and",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r673260115",
      "id" : 673260115,
      "line" : 127,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MzI2MDExNQ==",
      "original_commit_id" : "fac4814106c796b8786dd90053513cc35142dfe5",
      "original_line" : 127,
      "original_position" : 127,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 127,
      "pull_request_review_id" : 710760594,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-20T16:04:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673260115",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r673260544"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673260544"
         }
      },
      "author_association" : "MEMBER",
      "body" : "typo: boostrap ==> bootstrap",
      "commit_id" : "fac4814106c796b8786dd90053513cc35142dfe5",
      "created_at" : "2021-07-20T16:04:29Z",
      "diff_hunk" : "@@ -0,0 +1,813 @@\n+# Guix Installation and Setup\n+\n+This only needs to be done once per machine. If you have already completed the\n+installation and setup, please proceed to [perform a build](./README.md).\n+\n+Otherwise, you may choose from one of the following options to install Guix:\n+\n+1. Using the official **shell installer script** [â¤ skip to section][install-script]\n+   - Maintained by Guix developers\n+   - Easiest (automatically performs *most* setup)\n+   - Works on nearly all Linux distributions\n+   - Only installs latest release\n+   - Binary installation only, requires high level of trust\n+   - Note: The script needs to be run as root, so it should be inspected before it's run\n+2. Using the official **binary tarball** [â¤ skip to section][install-bin-tarball]\n+   - Maintained by Guix developers\n+   - Normal difficulty (full manual setup required)\n+   - Works on nearly all Linux distributions\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+3. Using fanquake's **Docker image** [âï¸ external instructions][install-fanquake-docker]\n+   - Maintained by fanquake\n+   - Easy (automatically performs *some* setup)\n+   - Works wherever Docker images work\n+   - Installs any release\n+   - Binary installation only, requires high level of trust\n+4. Using a **distribution-maintained package** [â¤ skip to section][install-distro-pkg]\n+   - Maintained by distribution's Guix package maintainer\n+   - Normal difficulty (manual setup required)\n+   - Works only on distributions with Guix packaged, see: https://repology.org/project/guix/versions\n+   - Installs a release decided on by package maintainer\n+   - Source or binary installation depending on the distribution\n+5. Building **from source** [â¤ skip to section][install-source]\n+   - Maintained by you\n+   - Hard, but rewarding\n+   - Can be made to work on most Linux distributions\n+   - Installs any commit (more granular)\n+   - Source installation, requires lower level of trust\n+\n+## Options 1 and 2: Using the official shell installer script or binary tarball\n+\n+The installation instructions for both the official shell installer script and\n+the binary tarballs can be found in the GNU Guix Manual's [Binary Installation\n+section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n+\n+Note that running through the binary tarball installation steps is largely\n+equivalent to manually performing what the shell installer script does.\n+\n+Note that at the time of writing (July 5th, 2021), the shell installer script\n+automatically creates an `/etc/profile.d` entry which the binary tarball\n+installation instructions do not ask you to create. However, you will likely\n+need this entry for better desktop integration. Please see [this\n+section](#add-an-etcprofiled-entry) for instructions on how to add a\n+`/etc/profile.d/guix.sh` entry.\n+\n+Regardless of which installation option you chose, the changes to\n+`/etc/profile.d` will not take effect until the next shell or desktop session,\n+so you should log out and log back in.\n+\n+## Option 3: Using fanquake's Docker image\n+\n+Please refer to fanquake's instructions\n+[here](https://github.com/fanquake/core-review/tree/master/guix).\n+\n+Note that the `Dockerfile` is largely equivalent to running through the binary\n+tarball installation steps.\n+\n+## Option 4: Using a distribution-maintained package\n+\n+Note that this section is based on the distro packaging situation at the time of\n+writing (July 2021). Guix is expected to be more widely packaged over time. For\n+an up-to-date view on Guix's package status/version across distros, please see:\n+https://repology.org/project/guix/versions\n+\n+### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute Hippo)\n+\n+Guix v1.2.0 is available as a distribution package starting in [Debian\n+11](https://packages.debian.org/bullseye/guix) and [Ubuntu\n+21.04](https://packages.ubuntu.com/hirsute/guix).\n+\n+Note that if you intend on using Guix without using any substitutes (more\n+details [here][security-model]), v1.2.0 has a known problems when building\n+GnuTLS from source. Solutions and workarounds are documented\n+[here](#gnutls-test-suite-fail-status-request-revoked).\n+\n+\n+To install:\n+```sh\n+sudo apt install guix\n+```\n+\n+For up-to-date information on Debian and Ubuntu's release history:\n+- [Debian release history](https://www.debian.org/releases/)\n+- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n+\n+### Arch Linux\n+\n+Guix is available in the AUR as\n+[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n+installation instructions in the Arch Linux Wiki ([live\n+link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n+[2021/03/30\n+permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n+to install Guix.\n+\n+At the time of writing (2021/03/30), the `check` phase will fail if the path to\n+guix's build directory is longer than 36 characters due to an anachronistic\n+character limit on the shebang line. Since the `check` phase happens after the\n+`build` phase, which may take quite a long time, it is recommended that users\n+either:\n+\n+1. Skip the `check` phase\n+    - For `makepkg`: `makepkg --nocheck ...`\n+    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n+    - For `paru`: `paru --nocheck ...`\n+2. Or, check their build directory's length beforehand\n+    - For those building with `makepkg`: `pwd | wc -c`\n+\n+## Option 5: Building from source\n+\n+Building Guix from source is a rather involved process but a rewarding one for\n+those looking to minimize trust and maximize customizability (e.g. building a\n+particular commit of Guix). Previous experience with using autotools-style build\n+systems to build packages from source will be helpful. *hic sunt dracones.*\n+\n+I strongly urge you to at least skim through the entire section once before you\n+start issuing commands, as it will save you a lot of unncessary pain and\n+anguish.\n+\n+### Installing common build tools\n+\n+There are a few basic build tools that are required for most things we'll build,\n+so let's install them now:\n+\n+Text transformation/i18n:\n+- `autopoint` (sometimes packaged in `gettext`)\n+- `help2man`\n+- `po4a`\n+- `texinfo`\n+\n+Build system tools:\n+- `g++` w/ C++11 support\n+- `libtool`\n+- `autoconf`\n+- `automake`\n+- `pkg-config` (sometimes packaged as `pkgconf`)\n+- `make`\n+- `cmake`\n+\n+Miscellaneous:\n+- `git`\n+- `gnupg`\n+- `python3`\n+\n+### Building and Installing Guix's dependencies\n+\n+In order to build Guix itself from source, we need to first make sure that the\n+necessary dependencies are installed and discoverable. The most up-to-date list\n+of Guix's dependencies is kept in the [\"Requirements\"\n+section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n+Reference Manual.\n+\n+Depending on your distribution, most or all of these dependencies may already be\n+packaged and installable without manually building and installing.\n+\n+For reference, the graphic below outlines Guix v1.3.0's dependency graph:\n+\n+![boostrap map](https://user-images.githubusercontent.com/6399679/125064185-a9a59880-e0b0-11eb-82c1-9b8e5dc9950d.png)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21711#discussion_r673260544",
      "id" : 673260544,
      "line" : 168,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MzI2MDU0NA==",
      "original_commit_id" : "fac4814106c796b8786dd90053513cc35142dfe5",
      "original_line" : 168,
      "original_position" : 168,
      "original_start_line" : null,
      "path" : "contrib/guix/INSTALL.md",
      "position" : 168,
      "pull_request_review_id" : 710760594,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21711",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-20T16:04:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673260544",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   }
]
