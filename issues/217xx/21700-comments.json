[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Wow great work @vasild! Love it. Will review.\r\n\r\nSuper strong Concept ACK obviously :)",
      "created_at" : "2021-04-15T15:18:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21700#issuecomment-820512046",
      "id" : 820512046,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21700",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMDUxMjA0Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-15T15:18:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820512046",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21515 (Erlay: bandwidth-efficient transaction relay protocol by naumenkogs)\n* #21506 (p2p, refactor: make NetPermissionFlags an enum class by jonatack)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-04-15T19:26:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21700#issuecomment-820677437",
      "id" : 820677437,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21700",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMDY3NzQzNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-21T17:48:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820677437",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`386676a9f...6b86187a8`: use the proper socket variable after `std::move`",
      "created_at" : "2021-04-16T06:19:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21700#issuecomment-820938399",
      "id" : 820938399,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21700",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMDkzODM5OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-16T06:19:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820938399",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Random note:\r\n\r\nAFAICT the only remaining non-test usage of `SOCKET Socket::Get()` after this PR is this call in `CreateSockTCP(â¦)`:\r\n\r\n```\r\n    // Set the non-blocking option on the socket.\r\n    if (!SetSocketNonBlocking(sock->Get(), true)) {\r\n```\r\n\r\nWhat about adding `Socket::SetNonBlocking(bool)` as part of this PR? That would allow us to drop `Socket::Get` (from `sock.h` at least), which in turn would mean that there is no risk of a `SOCKET` \"escaping\" `Socket` (other than using `Socket::Release`, and `Socket::Release` makes is clear that the responsibility of closing is taken over by the caller).\r\n\r\nWDYT? :)",
      "created_at" : "2021-04-16T09:34:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21700#issuecomment-821051430",
      "id" : 821051430,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21700",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMTA1MTQzMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-16T09:34:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821051430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I actually did that, but then removed this change because I realized it is not necessary - `CreateSockTCP()` is never supposed to be fuzz- or unit- tested. In fuzz/unit tests we override the global `CreateSock()` to do something else than the real `CreateSockTCP()`.\r\n\r\nI think it is still useful to have `Get()`. If removed then what about the unit tests that use it? Maybe if at some point `Sock` is used all over the place, then both `Get()` and `Release()` could be removed.",
      "created_at" : "2021-04-16T10:05:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21700#issuecomment-821068471",
      "id" : 821068471,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21700",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMTA2ODQ3MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-16T10:05:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821068471",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "More random notes:\r\n\r\nThese are the direct uses of socket related syscalls and library functions with this PR applied:\r\n\r\n```\r\n$ git grep -E '[^a-z_:.](accept|bind|connect|getsockopt|listen|poll|recv|select|send|setsockopt|socket)\\(' -- \\\r\n      \"src/\" \":(exclude)src/compat/stdin.cpp\" \":(exclude)src/qt/\" \":(exclude)src/test/\" \\\r\n      \":(exclude)src/wallet/\" | grep -vE \"\\.(cpp|h): *(//|\\*|Log|\\\"|ListenSocket|throw|strprintf)\"\r\nsrc/net.cpp:            nBytes = send(node.hSocket, reinterpret_cast<const char*>(data.data()) + node.nSendOffset, data.size() - node.nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\r\nsrc/net.cpp:    SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\r\nsrc/net.cpp:    if (poll(vpollfds.data(), vpollfds.size(), SELECT_TIMEOUT_MILLISECONDS) < 0) return;\r\nsrc/net.cpp:    int nSelect = select(hSocketMax + 1, &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\r\nsrc/net.cpp:                nBytes = recv(pnode->hSocket, (char*)pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\r\nsrc/netbase.cpp:    SOCKET hSocket = socket(((struct sockaddr*)&sockaddr)->sa_family, SOCK_STREAM, IPPROTO_TCP);\r\nsrc/util/sock.cpp:    return send(m_socket, static_cast<const char*>(data), len, flags);\r\nsrc/util/sock.cpp:    return recv(m_socket, static_cast<char*>(buf), len, flags);\r\nsrc/util/sock.cpp:    return connect(m_socket, addr, addr_len);\r\nsrc/util/sock.cpp:    return bind(m_socket, addr, addr_len);\r\nsrc/util/sock.cpp:    return listen(m_socket, backlog);\r\nsrc/util/sock.cpp:    return getsockopt(m_socket, level, opt_name, static_cast<char*>(opt_val), opt_len);\r\nsrc/util/sock.cpp:    return setsockopt(m_socket, level, opt_name, static_cast<const char*>(opt_val), opt_len);\r\nsrc/util/sock.cpp:    if (poll(&fd, 1, count_milliseconds(timeout)) == SOCKET_ERROR) {\r\nsrc/util/sock.cpp:    if (select(m_socket + 1, &fdset_recv, &fdset_send, nullptr, &timeout_struct) == SOCKET_ERROR) {\r\n```\r\n\r\nGreat to see our socket related syscalls and library functions being further encapsulated by `Socket` (`src/util/sock.cpp`). It simplifies fuzzing, it simplifies syscall analysis and generally makes our socket use easier to reason about. Great stuff! :)\r\n\r\nThe remaining `src/net.cpp` cases are probably out of scope for this PR, but what about moving `CreateSockTCP` from `src/netbase.{cpp,h}` to `src/util/sock.{cpp,h}`. I think it belongs there and it would then make `src/net.cpp` the only remaining place where we make direct use of socket related syscalls and library functions without using `Socket`. WDYT @vasild?",
      "created_at" : "2021-04-16T10:19:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21700#issuecomment-821075605",
      "id" : 821075605,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21700",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMTA3NTYwNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-16T10:19:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821075605",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Moving `CreateSockTCP()` - it makes sense if it works (e.g. does not create a circular dependency).\r\n\r\nLooking at the above list - it is not that many left! :) (btw `close(2)` is missing)",
      "created_at" : "2021-04-16T10:40:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21700#issuecomment-821086342",
      "id" : 821086342,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21700",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMTA4NjM0Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-16T10:40:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821086342",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`6b86187a8...9155dee01`: use pointers to `Sock` so that mocking via inheritance works properly",
      "created_at" : "2021-04-16T14:44:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21700#issuecomment-821227891",
      "id" : 821227891,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21700",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMTIyNzg5MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-16T14:44:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821227891",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Here is a patch that removes some unused code (+22 -30), further encapsulates socket operations to `Sock` (`src/util/sock.{cpp,h}`) and gets rid of the last non-test use of `Sock::Get`.\r\n\r\nFeel free to use as you wish! :)\r\n\r\n```diff\r\ndiff --git a/src/netbase.cpp b/src/netbase.cpp\r\nindex b03fd1028..69ef63b0e 100644\r\n--- a/src/netbase.cpp\r\n+++ b/src/netbase.cpp\r\n@@ -303,8 +303,7 @@ enum class IntrRecvError {\r\n  *          read.\r\n  *\r\n  * @see This function can be interrupted by calling InterruptSocks5(bool).\r\n- *      Sockets can be made non-blocking with SetSocketNonBlocking(const\r\n- *      SOCKET&, bool).\r\n+ *      Sockets can be made non-blocking with Sock::SetNonBlocking().\r\n  */\r\n static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, const Sock& sock)\r\n {\r\n@@ -520,7 +519,7 @@ std::unique_ptr<Sock> CreateSockTCP(const CService& address_family)\r\n     }\r\n\r\n     // Set the non-blocking option on the socket.\r\n-    if (!SetSocketNonBlocking(sock->Get(), true)) {\r\n+    if (!sock->SetNonBlocking()) {\r\n         LogPrintf(\"Error setting socket to non-blocking: %s\\n\", NetworkErrorString(WSAGetLastError()));\r\n         return nullptr;\r\n     }\r\n@@ -718,33 +717,6 @@ bool LookupSubNet(const std::string& strSubnet, CSubNet& ret, DNSLookupFn dns_lo\r\n     return false;\r\n }\r\n\r\n-bool SetSocketNonBlocking(const SOCKET& hSocket, bool fNonBlocking)\r\n-{\r\n-    if (fNonBlocking) {\r\n-#ifdef WIN32\r\n-        u_long nOne = 1;\r\n-        if (ioctlsocket(hSocket, FIONBIO, &nOne) == SOCKET_ERROR) {\r\n-#else\r\n-        int fFlags = fcntl(hSocket, F_GETFL, 0);\r\n-        if (fcntl(hSocket, F_SETFL, fFlags | O_NONBLOCK) == SOCKET_ERROR) {\r\n-#endif\r\n-            return false;\r\n-        }\r\n-    } else {\r\n-#ifdef WIN32\r\n-        u_long nZero = 0;\r\n-        if (ioctlsocket(hSocket, FIONBIO, &nZero) == SOCKET_ERROR) {\r\n-#else\r\n-        int fFlags = fcntl(hSocket, F_GETFL, 0);\r\n-        if (fcntl(hSocket, F_SETFL, fFlags & ~O_NONBLOCK) == SOCKET_ERROR) {\r\n-#endif\r\n-            return false;\r\n-        }\r\n-    }\r\n-\r\n-    return true;\r\n-}\r\n-\r\n void InterruptSocks5(bool interrupt)\r\n {\r\n     interruptSocks5Recv = interrupt;\r\ndiff --git a/src/util/sock.cpp b/src/util/sock.cpp\r\nindex e560f5b90..7f9b6d17c 100644\r\n--- a/src/util/sock.cpp\r\n+++ b/src/util/sock.cpp\r\n@@ -107,6 +107,20 @@ bool Sock::SetNoDelay() const\r\n     return SetSockOpt(IPPROTO_TCP, TCP_NODELAY, &on, sizeof(on)) == 0;\r\n }\r\n\r\n+bool Sock::SetNonBlocking() const\r\n+{\r\n+#ifdef WIN32\r\n+    const u_long one{1};\r\n+    if (ioctlsocket(m_socket, FIONBIO, &nOne) == SOCKET_ERROR) {\r\n+#else\r\n+    const int flags{fcntl(m_socket, F_GETFL, 0)};\r\n+    if (fcntl(m_socket, F_SETFL, flags | O_NONBLOCK) == SOCKET_ERROR) {\r\n+#endif\r\n+        return false;\r\n+    }\r\n+    return true;\r\n+}\r\n+\r\n bool Sock::IsSelectable() const\r\n {\r\n #if defined(USE_POLL) || defined(WIN32)\r\ndiff --git a/src/util/sock.h b/src/util/sock.h\r\nindex 0ce2decd8..9e33b9159 100644\r\n--- a/src/util/sock.h\r\n+++ b/src/util/sock.h\r\n@@ -140,6 +140,12 @@ public:\r\n      */\r\n     [[nodiscard]] virtual bool SetNoDelay() const;\r\n\r\n+    /**\r\n+     * Set the non-blocking option on the socket.\r\n+     * @return true if set successfully\r\n+     */\r\n+    [[nodiscard]] virtual bool SetNonBlocking() const;\r\n+\r\n     /**\r\n      * Check if the underlying socket can be used for `select(2)` (or the `Wait()` method).\r\n      * @return true if selectable\r\n```",
      "created_at" : "2021-04-18T21:23:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21700#issuecomment-822064126",
      "id" : 822064126,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21700",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMjA2NDEyNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-18T21:27:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822064126",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`9155dee01...6a91cac15`:\r\n* take the [above patch](https://github.com/bitcoin/bitcoin/pull/21700#issuecomment-822064126) that adds `Sock::SetNonBlocking()`\r\n* remove the newly added tests - they require \"all or nothing\" - to remove all occurrences of `Sock::Get()` and `Sock::Release()` otherwise dummy values of `Sock::m_socket` from the mocked `Sock` implementation leak into the main code during fuzzing.\r\n\r\nThis PR is reviewable and mergeable in its current state. I will see what it takes to remove `Sock::Get()` and `Sock::Release()` and decide whether to append to this PR or file a separate one.",
      "created_at" : "2021-04-19T12:53:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21700#issuecomment-822443198",
      "id" : 822443198,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21700",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMjQ0MzE5OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-19T12:53:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822443198",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`6a91cac15...67097b29c`: fix Windows compilation",
      "created_at" : "2021-04-21T12:52:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21700#issuecomment-824035395",
      "id" : 824035395,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21700",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNDAzNTM5NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-21T12:52:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/824035395",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2021-04-27T17:32:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21700#issuecomment-827783940",
      "id" : 827783940,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21700",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNzc4Mzk0MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-27T17:32:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/827783940",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   }
]
