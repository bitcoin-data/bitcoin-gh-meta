[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept NACK | [michaelfolkson](https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1015042793), [ghost](https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1015058338), [AmadeusK525](https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1116161982), [BitcoinErrorLog](https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1335764227) |\n| Concept ACK | [RobinLinus](https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-832378018), [jonatack](https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-918060312), [jaybny](https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-938082090), [ProofOfKeags](https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-963667962), [vincenzopalazzo](https://github.com/bitcoin/bitcoin/pull/21702#pullrequestreview-943764399), [1440000bytes](https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1106757162), [vicariousdrama](https://github.com/bitcoin/bitcoin/pull/21702#pullrequestreview-953866667), [cryptoquick](https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1108009815) |\n| Stale ACK | [benthecarman](https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-833874616), [josediegorobles](https://github.com/bitcoin/bitcoin/pull/21702#pullrequestreview-844007499), [Rspigler](https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1106795814) |\n\nIf your review is incorrectly listed, please react with ð to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#24897](https://github.com/bitcoin/bitcoin/pull/24897) ([Draft / POC] Silent Payments by w0xlt)\n* [#24737](https://github.com/bitcoin/bitcoin/pull/24737) (Remove taproot chain param by MarcoFalke)\n* [#24595](https://github.com/bitcoin/bitcoin/pull/24595) (deploymentstatus: move g_versionbitscache global to ChainstateManager by ajtowns)\n* [#24149](https://github.com/bitcoin/bitcoin/pull/24149) (Signing support for Miniscript Descriptors by darosior)\n* [#22954](https://github.com/bitcoin/bitcoin/pull/22954) ([TESTS] Allow tx_invalid.json tests to include flag rules for if_unset: [A,B,C] then_unset: [D] by JeremyRubin)\n* [#22793](https://github.com/bitcoin/bitcoin/pull/22793) (Simplify BaseSignatureChecker virtual functions and GenericTransactionSignatureChecker constructors by achow101)\n* [#21283](https://github.com/bitcoin/bitcoin/pull/21283) (Implement BIP 370 PSBTv2 by achow101)\n* [#19426](https://github.com/bitcoin/bitcoin/pull/19426) (refactor: Change * to & in MutableTransactionSignatureCreator by MarcoFalke)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.<!--2502f1a698b3751726fa55edcda76cd3-->\n\n### Coverage\n\n| Coverage  | Change ([pull 21702](https://drahtbot.space/host_reports/DrahtBot/reports/coverage/bitcoin/bitcoin/21702/total.coverage/index.html), a4b9a55240a0ab0c58f75e99398e56ceed8a3d35) | Reference ([master](https://drahtbot.space/host_reports/DrahtBot/reports/coverage/bitcoin/bitcoin/e2c4ac7cfb58e741/total.coverage/index.html), e2c4ac7cfb58e741)   |\n|-----------|-------------------------|--------------------|\n| Lines     | +0.0319 %            | 83.9750 %        |\n| Functions | +0.0211 %            | 75.8508 %        |\n| Branches  | +0.0242 %            | 52.5419 %        |\n\n<sup>Updated at: 2021-07-15T07:47:36.255429.</sup>\n",
      "created_at" : "2021-04-15T19:24:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-820676054",
      "id" : 820676054,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMDY3NjA1NA==",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820676054/reactions"
      },
      "updated_at" : "2022-12-02T19:52:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820676054",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "concept ACK.",
      "created_at" : "2021-04-19T15:54:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-822579606",
      "id" : 822579606,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMjU3OTYwNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-19T15:54:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822579606",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13668451?v=4",
         "events_url" : "https://api.github.com/users/rn-g/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rn-g/followers",
         "following_url" : "https://api.github.com/users/rn-g/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rn-g/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rn-g",
         "id" : 13668451,
         "login" : "rn-g",
         "node_id" : "MDQ6VXNlcjEzNjY4NDUx",
         "organizations_url" : "https://api.github.com/users/rn-g/orgs",
         "received_events_url" : "https://api.github.com/users/rn-g/received_events",
         "repos_url" : "https://api.github.com/users/rn-g/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rn-g/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rn-g/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rn-g"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616625177"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616625177"
         }
      },
      "author_association" : "NONE",
      "body" : "As the TODO says, should be improved",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-20T12:15:07Z",
      "diff_hunk" : "@@ -1433,6 +1513,9 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n     // Determine which precomputation-impacting features this transaction uses.\n     bool uses_bip143_segwit = false;\n     bool uses_bip341_taproot = false;\n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616625177",
      "id" : 616625177,
      "line" : 1517,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjYyNTE3Nw==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 1517,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 111,
      "pull_request_review_id" : 639871313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616625177",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/9665963?v=4",
         "events_url" : "https://api.github.com/users/pyskell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pyskell/followers",
         "following_url" : "https://api.github.com/users/pyskell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pyskell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pyskell",
         "id" : 9665963,
         "login" : "pyskell",
         "node_id" : "MDQ6VXNlcjk2NjU5NjM=",
         "organizations_url" : "https://api.github.com/users/pyskell/orgs",
         "received_events_url" : "https://api.github.com/users/pyskell/received_events",
         "repos_url" : "https://api.github.com/users/pyskell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pyskell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pyskell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pyskell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616625350"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616625350"
         }
      },
      "author_association" : "NONE",
      "body" : "Can this assert just be moved to the start of the function?",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-20T12:15:19Z",
      "diff_hunk" : "@@ -1804,6 +1905,30 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckStandardTemplateHash(const std::vector<unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        // if nIn == 0, then we've already cached this and can directly check\n+        if (nIn == 0) {\n+            return std::equal(txdata->m_standard_template_single_hash.begin(), txdata->m_standard_template_single_hash.end(), hash.data());\n+        } else {\n+            // otherwise we still have *most* of the hash cached,\n+            // so just re-compute the correct one and compare\n+            assert(txTo != nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616625350",
      "id" : 616625350,
      "line" : 1920,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjYyNTM1MA==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 1920,
      "original_position" : 179,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 179,
      "pull_request_review_id" : 639871498,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616625350",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/9665963?v=4",
         "events_url" : "https://api.github.com/users/pyskell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pyskell/followers",
         "following_url" : "https://api.github.com/users/pyskell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pyskell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pyskell",
         "id" : 9665963,
         "login" : "pyskell",
         "node_id" : "MDQ6VXNlcjk2NjU5NjM=",
         "organizations_url" : "https://api.github.com/users/pyskell/orgs",
         "received_events_url" : "https://api.github.com/users/pyskell/received_events",
         "repos_url" : "https://api.github.com/users/pyskell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pyskell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pyskell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pyskell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616627150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616627150"
         }
      },
      "author_association" : "NONE",
      "body" : "Minor bike shedding but \"Basic Standard\" and \"Standard Template\" are somewhat confusing terms. Are there non-standard templates?",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-20T12:17:36Z",
      "diff_hunk" : "@@ -198,6 +198,13 @@ unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const\n     return subscript.GetSigOpCount(true);\n }\n \n+bool CScript::IsPayToBasicStandardTemplate() const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616627150",
      "id" : 616627150,
      "line" : 201,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjYyNzE1MA==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 201,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/script/script.cpp",
      "position" : 4,
      "pull_request_review_id" : 639873700,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616627150",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/9665963?v=4",
         "events_url" : "https://api.github.com/users/pyskell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pyskell/followers",
         "following_url" : "https://api.github.com/users/pyskell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pyskell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pyskell",
         "id" : 9665963,
         "login" : "pyskell",
         "node_id" : "MDQ6VXNlcjk2NjU5NjM=",
         "organizations_url" : "https://api.github.com/users/pyskell/orgs",
         "received_events_url" : "https://api.github.com/users/pyskell/received_events",
         "repos_url" : "https://api.github.com/users/pyskell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pyskell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pyskell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pyskell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616853690"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616853690"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "yes; this became a TODO post taproot because we started doing much more aggressive/expensive heuristics, scanning to see if it's a taproot spend. We used to just IIRC always compute all caches.\r\n\r\n\r\nIt's not clear to me the performance benefit of scanning v.s. always computing the hashes @sipa. 50% of transactions are SegWit these days (https://charts.woobull.com/bitcoin-segwit-adoption/), and CTV only does extra non O(1) hashing in the event that it's a transaction that uses non segwit inputs.\r\n\r\nIt'd be also possible to just *never* cache CTV, if the extra work seems not worth it. Or to only cache for single input txns, only cache for txns with a bare script standard CTV, only cache for segwit or has bare CTV, etc. It's kinda hard to say what the optimal caching policy is and it's bikesheddable + non consensus, so I chose to just leave it for now as the extra work is not terrible, and more advanced policies open up the potential for quadratic hashing bugs (e.g., txn has a scriptSig on every input except the CTV one and the CTV one is <H> CTV CTV... and we don't cache).",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-20T16:34:06Z",
      "diff_hunk" : "@@ -1433,6 +1513,9 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n     // Determine which precomputation-impacting features this transaction uses.\n     bool uses_bip143_segwit = false;\n     bool uses_bip341_taproot = false;\n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616853690",
      "id" : 616853690,
      "in_reply_to_id" : 616625177,
      "line" : 1517,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjg1MzY5MA==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 1517,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 111,
      "pull_request_review_id" : 640183576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616853690",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616858194"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616858194"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "These asserts can technically just be deleted looking at the surrounded code, txTo will already be able to deref nullptr from many other functions.\r\n\r\nI put them close to where the deref's actually occur as I think that's best practice, but yes they could go at the start.\r\n\r\nI'd actually be more excited about changing the representation internally to a reference as follow up work so we get rid of all these unchecked derefs...",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-20T16:40:07Z",
      "diff_hunk" : "@@ -1804,6 +1905,30 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckStandardTemplateHash(const std::vector<unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        // if nIn == 0, then we've already cached this and can directly check\n+        if (nIn == 0) {\n+            return std::equal(txdata->m_standard_template_single_hash.begin(), txdata->m_standard_template_single_hash.end(), hash.data());\n+        } else {\n+            // otherwise we still have *most* of the hash cached,\n+            // so just re-compute the correct one and compare\n+            assert(txTo != nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616858194",
      "id" : 616858194,
      "in_reply_to_id" : 616625350,
      "line" : 1920,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjg1ODE5NA==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 1920,
      "original_position" : 179,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 179,
      "pull_request_review_id" : 640192946,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616858194",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616863828"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616863828"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes... Perhaps \"standard\" and \"basic\" should be flipped terminology wise, but as is:\r\n\r\n- Standard is the 32 byte argument form interpreted as the StandardTemplateHash defined in this PR\r\n- Basic is the ScriptType that is just a script with a single <h:32> CTV. \r\n\r\nCTV as a NOP is extensible in the future to support different templates via having a different length arg + whatever rules around that you want.\r\n\r\nBasicStandardTemplate is just for enabling relaying of a single special cased barescript type (for congestion control uses). TBH it *could* be dropped from this PR and handled separately, although it makes testing more painful.",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-20T16:45:13Z",
      "diff_hunk" : "@@ -198,6 +198,13 @@ unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const\n     return subscript.GetSigOpCount(true);\n }\n \n+bool CScript::IsPayToBasicStandardTemplate() const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616863828",
      "id" : 616863828,
      "in_reply_to_id" : 616627150,
      "line" : 201,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjg2MzgyOA==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 201,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/script/script.cpp",
      "position" : 4,
      "pull_request_review_id" : 640201332,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616863828",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r617174074"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617174074"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "One last thing on caching: CTV was designed so that if you're expecting to operate the same CTV at diff input indexes, you can cache the sha256 midstate because index is the final field. However, I think that it's relatively rare you'd want CTV scripts at indexes other than 0.",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-21T03:24:15Z",
      "diff_hunk" : "@@ -1433,6 +1513,9 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n     // Determine which precomputation-impacting features this transaction uses.\n     bool uses_bip143_segwit = false;\n     bool uses_bip341_taproot = false;\n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r617174074",
      "id" : 617174074,
      "in_reply_to_id" : 616625177,
      "line" : 1517,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzE3NDA3NA==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 1517,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 111,
      "pull_request_review_id" : 640596808,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617174074",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618645483"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618645483"
         }
      },
      "author_association" : "MEMBER",
      "body" : "please enumerate the exact permission flags needed. Whitelist is deprecated",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-22T18:31:04Z",
      "diff_hunk" : "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618645483",
      "id" : 618645483,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY0NTQ4Mw==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 74,
      "original_position" : 74,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 642545443,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618645483",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618646394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618646394"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I know this is just the tests, but it would be nice to not use floating point",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-22T18:32:28Z",
      "diff_hunk" : "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        self.nodes[0].submitblock(block)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - SegWit OP_CTV\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 110\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        self.coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(BLOCKS)]\n+\n+        self.log.info(\"Creating setup transactions\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount = (sum(out.nValue for out in outputs)+200*500) /100e6",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618646394",
      "id" : 618646394,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY0NjM5NA==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 126,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 642546676,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618646394",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618651655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618651655"
         }
      },
      "author_association" : "MEMBER",
      "body" : "100e6 refers to the COIN constant?",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-22T18:40:42Z",
      "diff_hunk" : "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        self.nodes[0].submitblock(block)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - SegWit OP_CTV\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 110\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        self.coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(BLOCKS)]\n+\n+        self.log.info(\"Creating setup transactions\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount = (sum(out.nValue for out in outputs)+200*500) /100e6",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618651655",
      "id" : 618651655,
      "in_reply_to_id" : 618646394,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY1MTY1NQ==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 126,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 642546676,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618651655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618666993"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618666993"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What's the replacement -- tbh don't know if this is even needed anymore?",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-22T19:04:37Z",
      "diff_hunk" : "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618666993",
      "id" : 618666993,
      "in_reply_to_id" : 618645483,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY2Njk5Mw==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 74,
      "original_position" : 74,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 642573083,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618666993",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618668363"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618668363"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "yeah I think it kinda has to be floating point because the RPCs use BTC and we have sats... if I used a non float I would truncate?\r\n\r\nBut I can refactor it to be COIN? Or maybe preserve the values as sats for longer and only convert to BTC in one place?",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-22T19:06:56Z",
      "diff_hunk" : "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        self.nodes[0].submitblock(block)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - SegWit OP_CTV\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 110\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        self.coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(BLOCKS)]\n+\n+        self.log.info(\"Creating setup transactions\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount = (sum(out.nValue for out in outputs)+200*500) /100e6",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618668363",
      "id" : 618668363,
      "in_reply_to_id" : 618646394,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY2ODM2Mw==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 126,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 642574885,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618668363",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618675048"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618675048"
         }
      },
      "author_association" : "MEMBER",
      "body" : "For example `-whitelist=noban@ip`",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-22T19:17:45Z",
      "diff_hunk" : "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618675048",
      "id" : 618675048,
      "in_reply_to_id" : 618645483,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY3NTA0OA==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 74,
      "original_position" : 74,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 642583770,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618675048",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618675290"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618675290"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There is decimal.Decimal",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-22T19:18:09Z",
      "diff_hunk" : "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        self.nodes[0].submitblock(block)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - SegWit OP_CTV\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 110\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        self.coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(BLOCKS)]\n+\n+        self.log.info(\"Creating setup transactions\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount = (sum(out.nValue for out in outputs)+200*500) /100e6",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618675290",
      "id" : 618675290,
      "in_reply_to_id" : 618646394,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY3NTI5MA==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 126,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 642584071,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618675290",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I think CTV is interesting and will likely be a candidate for a future soft fork whether that be a standalone CTV soft fork or a soft fork with a bundle of features. But at least for me I feel it is premature to even look at this with Taproot not yet activated and zero discussion (mere speculation) on the form of the next soft fork after Taproot has (hopefully) activated. I guess there is no harm in opening this but personally I feel it is *extremely* early. I look forward to those discussions on the next soft fork and digging into this at some point in the future though.",
      "created_at" : "2021-04-22T21:49:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825207430",
      "id" : 825207430,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNTIwNzQzMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-22T21:49:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825207430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "You're free to review or not review any PR you like whenever you like. No one is \"in charge\" of the roadmap for Bitcoin development. All changes -- soft forks or not -- proceed when they have rough consensus and the code is ready.\r\n\r\nThis PR is for code review of BIP-119 OP_CTV's implementation. If you wish to discuss Bitcoin Project management please take it to an appropriate venue such as the mailing list.",
      "created_at" : "2021-04-23T01:06:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825312007",
      "id" : 825312007,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNTMxMjAwNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-23T01:06:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825312007",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618888207"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618888207"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I removed it and it still runs fine... presumably this is helpful during testing if we're trying to connect some sort of malicious peer, but I think I don't need it here.",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-23T02:02:09Z",
      "diff_hunk" : "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618888207",
      "id" : 618888207,
      "in_reply_to_id" : 618645483,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODg4ODIwNw==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 74,
      "original_position" : 74,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 642869537,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618888207",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@JeremyRubin:\r\n\r\n> All changes -- soft forks or not -- proceed when they have rough consensus and the code is ready.\r\n\r\nOn this we are definitely in strong disagreement. A soft fork (or hard fork) requires overwhelming consensus not only in this repo but in the wider community. Taproot reached that bar (there was one NACK from a long term contributor due to quantum concerns I believe in this repo and overwhelming community support) and I expect the next soft fork, whatever it contains, to also reach that bar. To the extent that it appears you disagree with that worries me immensely. But indeed when Taproot has (hopefully) activated I will continue on the mailing list.\r\n\r\nThis has a hard Concept NACK from me until then. All long term contributors to this repository should have the chance to review this and there should be overwhelming consensus within this repo and in the wider community that this should be included in the next soft fork as is. In my opinion we are a long, long way away from that. And this is from someone who finds CTV extremely interesting and is looking forward (once Taproot has activated) to examining in greater detail the use cases of it (ie CTV and ANYPREVOUT's use in vaults).\r\n\r\n",
      "created_at" : "2021-04-23T10:17:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825557354",
      "id" : 825557354,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNTU1NzM1NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-23T10:17:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825557354",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Please, again, take the metaphysics to the mailing list. This is a PR for people who *want to* review BIP-119 CTV.",
      "created_at" : "2021-04-23T12:17:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825618060",
      "id" : 825618060,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNTYxODA2MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-23T12:17:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825618060",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Apologies for the line noise -- I hit an issue with GH tracking the tip of my branch and had to use https://github.com/isaacs/github/issues/361#issuecomment-114300645 workaround.",
      "created_at" : "2021-04-23T17:48:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825818936",
      "id" : 825818936,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNTgxODkzNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-23T17:48:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825818936",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\nðµï¸ @sipa has been requested to review this pull request as specified in the REVIEWERS file.",
      "created_at" : "2021-05-03T09:32:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-831141697",
      "id" : 831141697,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMTE0MTY5Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-03T09:32:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/831141697",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "concept ACK. Covenants would open up lots of exciting new use cases.\r\nWhat are the next steps? \r\n\r\n",
      "created_at" : "2021-05-05T02:52:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-832378018",
      "id" : 832378018,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMjM3ODAxOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-05T02:55:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832378018",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/12780394?v=4",
         "events_url" : "https://api.github.com/users/RobinLinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RobinLinus/followers",
         "following_url" : "https://api.github.com/users/RobinLinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RobinLinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RobinLinus",
         "id" : 12780394,
         "login" : "RobinLinus",
         "node_id" : "MDQ6VXNlcjEyNzgwMzk0",
         "organizations_url" : "https://api.github.com/users/RobinLinus/orgs",
         "received_events_url" : "https://api.github.com/users/RobinLinus/received_events",
         "repos_url" : "https://api.github.com/users/RobinLinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RobinLinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RobinLinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RobinLinus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r627765572"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627765572"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: unneeded spacing",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-05-06T21:07:55Z",
      "diff_hunk" : "@@ -1585,8 +1683,11 @@ bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata\n \n     hash_out = ss.GetSHA256();\n     return true;\n+\n }\n \n+\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r627765572",
      "id" : 627765572,
      "line" : 1690,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzc2NTU3Mg==",
      "original_commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "original_line" : 1690,
      "original_position" : 159,
      "original_start_line" : 1685,
      "path" : "src/script/interpreter.cpp",
      "position" : 159,
      "pull_request_review_id" : 653897195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 1685,
      "start_side" : "RIGHT",
      "updated_at" : "2021-05-06T21:07:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627765572",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "CR-ACK 491804c589c5f3e68dc17516377930e18986cb19\r\n\r\nbesides the nit on spacing\r\n\r\nStill need to look through tests",
      "created_at" : "2021-05-06T21:19:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-833874616",
      "id" : 833874616,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMzg3NDYxNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-06T21:19:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/833874616",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r628407410"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628407410"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "discussion of this moved here https://github.com/bitcoin/bips/pull/1118",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-05-07T17:59:26Z",
      "diff_hunk" : "@@ -198,6 +198,13 @@ unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const\n     return subscript.GetSigOpCount(true);\n }\n \n+bool CScript::IsPayToBasicStandardTemplate() const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r628407410",
      "id" : 628407410,
      "in_reply_to_id" : 616627150,
      "line" : 201,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODQwNzQxMA==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 201,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/script/script.cpp",
      "position" : 4,
      "pull_request_review_id" : 654731943,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-07T17:59:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628407410",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634008499"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634008499"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "piconit: 2 spaces after the `=` here",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-05-18T03:12:24Z",
      "diff_hunk" : "@@ -1416,9 +1453,52 @@ uint256 GetSpentScriptsSHA256(const std::vector<CTxOut>& outputs_spent)\n     return ss.GetSHA256();\n }\n \n+/* Not Exported, just convenience */\n+template<typename TxType>\n+uint256 GetStandardTemplateHashWithScript(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n+                                const uint256& scriptSig_hash, const uint32_t input_index) {\n+    auto h =  CHashWriter(SER_GETHASH, 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634008499",
      "id" : 634008499,
      "line" : 1460,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDAwODQ5OQ==",
      "original_commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "original_line" : 1460,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 61,
      "pull_request_review_id" : 661595892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-18T03:26:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634008499",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634008538"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634008538"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "same here",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-05-18T03:12:31Z",
      "diff_hunk" : "@@ -1416,9 +1453,52 @@ uint256 GetSpentScriptsSHA256(const std::vector<CTxOut>& outputs_spent)\n     return ss.GetSHA256();\n }\n \n+/* Not Exported, just convenience */\n+template<typename TxType>\n+uint256 GetStandardTemplateHashWithScript(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n+                                const uint256& scriptSig_hash, const uint32_t input_index) {\n+    auto h =  CHashWriter(SER_GETHASH, 0)\n+        << tx.nVersion\n+        << tx.nLockTime\n+        << scriptSig_hash\n+        << uint32_t(tx.vin.size())\n+        << sequences_hash\n+        << uint32_t(tx.vout.size())\n+        << outputs_hash\n+        << input_index;\n+    return h.GetSHA256();\n+}\n+\n+template<typename TxType>\n+uint256 GetStandardTemplateHashEmptyScript(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n+                                const uint32_t input_index) {\n+    auto h =  CHashWriter(SER_GETHASH, 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634008538",
      "id" : 634008538,
      "line" : 1475,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDAwODUzOA==",
      "original_commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "original_line" : 1475,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 76,
      "pull_request_review_id" : 661595892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-18T03:26:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634008538",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634011655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634011655"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would it be safer to set `input_index` here to `uint32_t`'s max value? That way if there is less of a chance that we miss in a test the handling of a changing `input_index` since most likely the tested `input_index` will be `0`",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-05-18T03:23:32Z",
      "diff_hunk" : "@@ -1452,11 +1535,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();\n+        if (skip_scriptSigs) {\n+            // 0 hash used to signal if we should skip scriptSigs\n+            // when re-computing for different indexes.\n+            m_scriptSigs_single_hash = uint256{};\n+            // TODO: Cache midstate?\n+            m_standard_template_single_hash = GetStandardTemplateHashEmptyScript(txTo, m_outputs_single_hash, m_sequences_single_hash, 0);\n+        } else {\n+            m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\n+            m_standard_template_single_hash = GetStandardTemplateHashWithScript(txTo, m_outputs_single_hash, m_sequences_single_hash, m_scriptSigs_single_hash, 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634011655",
      "id" : 634011655,
      "line" : 1554,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDAxMTY1NQ==",
      "original_commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "original_line" : 1554,
      "original_position" : 137,
      "original_start_line" : 1551,
      "path" : "src/script/interpreter.cpp",
      "position" : 137,
      "pull_request_review_id" : 661595892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 1551,
      "start_side" : "RIGHT",
      "updated_at" : "2021-05-18T03:26:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634011655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634012540"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634012540"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "We do lose the effiency of always having the `0`th input cached however",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-05-18T03:27:09Z",
      "diff_hunk" : "@@ -1452,11 +1535,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();\n+        if (skip_scriptSigs) {\n+            // 0 hash used to signal if we should skip scriptSigs\n+            // when re-computing for different indexes.\n+            m_scriptSigs_single_hash = uint256{};\n+            // TODO: Cache midstate?\n+            m_standard_template_single_hash = GetStandardTemplateHashEmptyScript(txTo, m_outputs_single_hash, m_sequences_single_hash, 0);\n+        } else {\n+            m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\n+            m_standard_template_single_hash = GetStandardTemplateHashWithScript(txTo, m_outputs_single_hash, m_sequences_single_hash, m_scriptSigs_single_hash, 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634012540",
      "id" : 634012540,
      "in_reply_to_id" : 634011655,
      "line" : 1554,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDAxMjU0MA==",
      "original_commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "original_line" : 1554,
      "original_position" : 137,
      "original_start_line" : 1551,
      "path" : "src/script/interpreter.cpp",
      "position" : 137,
      "pull_request_review_id" : 661600561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 1551,
      "start_side" : "RIGHT",
      "updated_at" : "2021-05-18T03:27:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634012540",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634412955"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634412955"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "yeah the whole point is caching the most common case -- we could also cache the midstate without index and just finalize with an index in consensus.",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-05-18T14:00:50Z",
      "diff_hunk" : "@@ -1452,11 +1535,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();\n+        if (skip_scriptSigs) {\n+            // 0 hash used to signal if we should skip scriptSigs\n+            // when re-computing for different indexes.\n+            m_scriptSigs_single_hash = uint256{};\n+            // TODO: Cache midstate?\n+            m_standard_template_single_hash = GetStandardTemplateHashEmptyScript(txTo, m_outputs_single_hash, m_sequences_single_hash, 0);\n+        } else {\n+            m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\n+            m_standard_template_single_hash = GetStandardTemplateHashWithScript(txTo, m_outputs_single_hash, m_sequences_single_hash, m_scriptSigs_single_hash, 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634412955",
      "id" : 634412955,
      "in_reply_to_id" : 634011655,
      "line" : 1554,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDQxMjk1NQ==",
      "original_commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "original_line" : 1554,
      "original_position" : 137,
      "original_start_line" : 1551,
      "path" : "src/script/interpreter.cpp",
      "position" : 137,
      "pull_request_review_id" : 662126257,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 1551,
      "start_side" : "RIGHT",
      "updated_at" : "2021-05-18T14:00:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634412955",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@RobinLinus \r\n> What are the next steps?\r\n\r\nI think the taproot process is an exemplar to build off of, for all future upgrades.\r\n\r\nDocumentation, review workshops, tutorial media, and gradually building press exposure all attract devs who want to understand and review it well.  Without review workshops, it's too easy to fall into a bad habit of gauging consensus by noticing bellwether reviewers.  Tutorial media make it easier to see the consequences of new technology and get excited enough to put effort in.\r\n\r\nThere are several things that we want to know from reviewers of new features:\r\n\r\n  - How can this concept hurt those in Bitcoin who do not upgrade at all?\r\n\r\n  - How can this concept hurt those in Bitcoin who validate blocks with the feature, but who do not use it for their transactions?\r\n\r\n  - Does this look like clean and correct code?\r\n\r\n  - Do the tests prove that the code is correct?\r\n\r\n  - Do people who willingly experiment with this have clear boundaries to keep their other funds safe if the feature has a bug?\r\n\r\n  - How is this feature important to keep Bitcoin relevant?\r\n\r\n  - Why can't this need be completely served in other layers?  (eg. L2/L3)\r\n\r\n  - Are there other approaches to solve this need in Bitcoin's consensus layer?\r\n\r\n  - What makes this pull request the simplest and safest way to do this feature in Bitcoin's consensus layer?\r\n\r\nFor all upgrades, I'd eventually like to see a semi-standardized table of consequences for ecosystem participants, similar to the hazmat fire diamond.\r\n\r\n  https://en.wikipedia.org/wiki/NFPA_704\r\n\r\nFor OP_CTV, best-practice reviews might work through a toy problem on either regtest or the mainnet (using the available signing servers).\r\n\r\nHere are my answers on the questions above, as they relate to this pull request:\r\n\r\n  - How can this concept hurt those in Bitcoin who do not upgrade at all?\r\n\r\n      If the code has bugs, it could introduce a security flaw.  However it does not even introduce a new address type, so it is very safe.\r\n\r\n  - How can this concept hurt those in Bitcoin who validate blocks with the feature, but who do not use it for their transactions?\r\n\r\n      Again, if the code has bugs, it could introduce a security flaw.\r\n\r\n  - Does this look like clean and correct code?\r\n\r\n      I'd like to test the code more before giving my answer here.  It looks like clean code.\r\n\r\n  - Do the tests prove that the code is correct?\r\n\r\n      The external compiler with the Sapio language is generating a very wide variety of tests.  I think this offers high confidence.\r\n\r\n  - Do people who willingly experiment with this have clear boundaries to keep their other funds safe if the feature has a bug?\r\n\r\n      Two answers here: yes and no.\r\n\r\n      Yes, in that it's easy to not lock UTXOs into OP_CTV trees.\r\n\r\n      No, in that someone could pay your address in an OP_CTV tree of transactions, without your consent.  Your software might not be able to recognize longer chains of CPFP dependencies, or might consider unconfirmed transactions below a confirmed root as weaker than they really are, depending on the branching structure of the OP_CTV tree.  I would consider both of these failures as small disruptions, since the transactions are a few confirmations away from appearing normal in any wallet, but we should test whether any wallets don't show them at all until the leaf transactions are confirmed.\r\n\r\n  - How is this feature important to keep Bitcoin relevant?\r\n\r\n      It enables a broad class of smart contracts, including: unchangeable efficient batching of exchange payouts; better custody control using vaults; and even decentralization improvements to mining pool payouts.\r\n\r\n  - Why can't this need be completely served in other layers?  (eg. L2/L3)\r\n\r\n      Using the L2 Lightning Network as a solution require a counterparty who is willing to enter into an HTLC.  Using the L2 Liquid Network requires trusting the federated sidechain.  \"L3\" solutions such as RGB require a counterparty who is consensually running the same client version, to define the asset tip.\r\n\r\n      OP_CTV works with script that you can apply to create your own addresses, adding no additional counterparty risk over Bitcoin's proof-of-work model.  This makes it the only way to do batched payouts and advanced custody vaults for L1 on-chain UTXOs, without requiring fancy trust-pushing tricks like deleting keys or using external signing oracles.\r\n\r\n  - Are there other approaches to solve this need in Bitcoin's consensus layer?\r\n\r\n      Simplicity is one, but there is no current plan to use it on Bitcoin's consensus layer.\r\n\r\n  - What makes this pull request the simplest and safest way to do this feature in Bitcoin's consensus layer?\r\n\r\n      It has remained remarkably stable throughout the entire Taproot rollout, which indicates it's a mature concept.  It is only a few lines of consensus code.  The testing infrastructure (which includes a compiler outside of bitcoind) already includes very different styles of contracts.\r\n\r\n(edit: wrapping)",
      "created_at" : "2021-05-27T03:24:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-849289433",
      "id" : 849289433,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0OTI4OTQzMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-27T03:30:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849289433",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6995442?v=4",
         "events_url" : "https://api.github.com/users/rxgrant/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rxgrant/followers",
         "following_url" : "https://api.github.com/users/rxgrant/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rxgrant/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rxgrant",
         "id" : 6995442,
         "login" : "rxgrant",
         "node_id" : "MDQ6VXNlcjY5OTU0NDI=",
         "organizations_url" : "https://api.github.com/users/rxgrant/orgs",
         "received_events_url" : "https://api.github.com/users/rxgrant/received_events",
         "repos_url" : "https://api.github.com/users/rxgrant/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rxgrant/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rxgrant/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rxgrant"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> * How can this concept hurt those in Bitcoin who do not upgrade at all?\r\n\r\nIs it relevant to mention here that it's possible to activate `OP_CTV` with a softfork because it could overwrite some `OP_NOOP`?\r\n \r\n> * How is this feature important to keep Bitcoin relevant?\r\n>   It enables a broad class of smart contracts, including: unchangeable efficient batching of exchange payouts; better custody control using vaults; and even decentralization improvements to mining pool payouts.\r\n\r\nMaybe it's worth mentioning that it enables permissionless sidechain consensus mechanisms such as [Spacechains](https://bitcoin.stackexchange.com/questions/100537/what-is-spacechain) and [Stakechains](https://coins.github.io/research/coins.pdf).\r\n",
      "created_at" : "2021-05-27T22:15:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-849976995",
      "id" : 849976995,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0OTk3Njk5NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-28T17:16:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/849976995",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/12780394?v=4",
         "events_url" : "https://api.github.com/users/RobinLinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RobinLinus/followers",
         "following_url" : "https://api.github.com/users/RobinLinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RobinLinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RobinLinus",
         "id" : 12780394,
         "login" : "RobinLinus",
         "node_id" : "MDQ6VXNlcjEyNzgwMzk0",
         "organizations_url" : "https://api.github.com/users/RobinLinus/orgs",
         "received_events_url" : "https://api.github.com/users/RobinLinus/received_events",
         "repos_url" : "https://api.github.com/users/RobinLinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RobinLinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RobinLinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RobinLinus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I really don't have the answers for what the pipeline of accepting soft forks to Bitcoin should look like. I think these sorts of conversations are better suited for the mailing list or for an IRC chat room (although given recent IRC system disruptions IDK how logging is functioning), and GitHub is better suited to discuss the technical merits of the code.\r\n\r\n\r\nthat said, short of a perfect venue for this discussion, and to respond to some of the above:\r\n\r\nIt seems to me that there's a bit of an Abilene Paradox where people (whether CTV, anyprevout, sigagg, or something else) all don't know what the process could/should be or what would be ok and we settle on something that (most everyone?) doesn't want, which is arbitrary delay because it seems that's what other people want. It's not that _delay_ is not appropriate at all, but the arbitrariness that is confusing. A further complaint I've seen raised is around the notion of \"nextness\". That \"CTV should be next\", \"anyprevout next\", \"sigagg next\", etc, implying that Bitcoin is inherently a serial development process. I think that it's natural to have multiple development fronts that can proceed independently (to the extent they are independent) and do things as they are \"ready\" rather than some sort of order enforced by \"<T> has to be next\". We should have our fingers in more pies when it comes to securing the future of the bitcoin network. \r\n\r\nI'll reiterate: I don't have the answers on what the pipeline should look like, so I can only do a best effort job at being a sherpa through the review process for changes I think convey a large benefit to Bitcoin users. If anyone feels that I've misjudged or made an error in advocacy, I'm happy to accept the criticism and improve.\r\n\r\n\r\n--------\r\n\r\n\r\nThe main action item I'm seeing from @rxgrant is some easy to understand risk/reward section for upgrades (I think that's a great idea!) and to get some more reviewers to try solving some problems with CTV/Sapio. I think that's doable. I'm working on more resources for builders, but [the sapio book](https://learn.sapio-lang.org) is a decent place to start if you're motivated.",
      "created_at" : "2021-05-30T17:51:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-851036640",
      "id" : 851036640,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1MTAzNjY0MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-30T17:51:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/851036640",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> * Are there other approaches to solve this need in Bitcoin's consensus layer?\r\n\r\nAnswers here should also reference SIGHASH_ANYPREVOUTANYSCRIPT and OP_CAT [as discussed in bip119](https://github.com/bitcoin/bips/blob/master/bip-0119.mediawiki#feature-redundancy).  SIGHASH_ANYPREVOUT helps LN state updates require less stored state, and OP_CTV does complex contracts in fewer bytes (including settling comlpex LN HTLCs using many UTXOs in fewer bytes onchain), so both of them are good ideas.",
      "created_at" : "2021-05-31T00:11:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-851085931",
      "id" : 851085931,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1MTA4NTkzMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-31T00:11:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/851085931",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6995442?v=4",
         "events_url" : "https://api.github.com/users/rxgrant/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rxgrant/followers",
         "following_url" : "https://api.github.com/users/rxgrant/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rxgrant/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rxgrant",
         "id" : 6995442,
         "login" : "rxgrant",
         "node_id" : "MDQ6VXNlcjY5OTU0NDI=",
         "organizations_url" : "https://api.github.com/users/rxgrant/orgs",
         "received_events_url" : "https://api.github.com/users/rxgrant/received_events",
         "repos_url" : "https://api.github.com/users/rxgrant/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rxgrant/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rxgrant/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rxgrant"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r642149506"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642149506"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\r\n```",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-05-31T00:18:05Z",
      "diff_hunk" : "@@ -91,6 +91,13 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1628640000; // August 11th, 2021\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 709632; // Approximately November 12th, 2021\n \n+        // Deployment of CTV (BIP 119)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].bit = 5;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime =Consensus::BIP9Deployment::NEVER_ACTIVE;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r642149506",
      "id" : 642149506,
      "line" : 96,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjE0OTUwNg==",
      "original_commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "original_line" : 96,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 6,
      "pull_request_review_id" : 671880403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-31T00:18:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642149506",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6995442?v=4",
         "events_url" : "https://api.github.com/users/rxgrant/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rxgrant/followers",
         "following_url" : "https://api.github.com/users/rxgrant/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rxgrant/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rxgrant",
         "id" : 6995442,
         "login" : "rxgrant",
         "node_id" : "MDQ6VXNlcjY5OTU0NDI=",
         "organizations_url" : "https://api.github.com/users/rxgrant/orgs",
         "received_events_url" : "https://api.github.com/users/rxgrant/received_events",
         "repos_url" : "https://api.github.com/users/rxgrant/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rxgrant/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rxgrant/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rxgrant"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r642149551"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642149551"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\r\n```",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-05-31T00:18:27Z",
      "diff_hunk" : "@@ -210,6 +217,12 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1628640000; // August 11th, 2021\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 0; // No activation delay\n \n+        // Deployment of CTV (BIP 119)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].bit = 5;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime =Consensus::BIP9Deployment::NEVER_ACTIVE;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r642149551",
      "id" : 642149551,
      "line" : 222,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjE0OTU1MQ==",
      "original_commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "original_line" : 222,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 20,
      "pull_request_review_id" : 671880450,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-31T00:18:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642149551",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6995442?v=4",
         "events_url" : "https://api.github.com/users/rxgrant/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rxgrant/followers",
         "following_url" : "https://api.github.com/users/rxgrant/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rxgrant/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rxgrant",
         "id" : 6995442,
         "login" : "rxgrant",
         "node_id" : "MDQ6VXNlcjY5OTU0NDI=",
         "organizations_url" : "https://api.github.com/users/rxgrant/orgs",
         "received_events_url" : "https://api.github.com/users/rxgrant/received_events",
         "repos_url" : "https://api.github.com/users/rxgrant/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rxgrant/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rxgrant/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rxgrant"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r642149582"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642149582"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime = Consensus::BIP9Deployment::NEVER_ACTIVE;\r\n```",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-05-31T00:18:45Z",
      "diff_hunk" : "@@ -347,6 +360,12 @@ class SigNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 0; // No activation delay\n \n+        // Deployment of CTV (BIP 119)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].bit = 5;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime =Consensus::BIP9Deployment::NEVER_ACTIVE;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r642149582",
      "id" : 642149582,
      "line" : 365,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjE0OTU4Mg==",
      "original_commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "original_line" : 365,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 33,
      "pull_request_review_id" : 671880487,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-31T00:18:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642149582",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6995442?v=4",
         "events_url" : "https://api.github.com/users/rxgrant/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rxgrant/followers",
         "following_url" : "https://api.github.com/users/rxgrant/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rxgrant/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rxgrant",
         "id" : 6995442,
         "login" : "rxgrant",
         "node_id" : "MDQ6VXNlcjY5OTU0NDI=",
         "organizations_url" : "https://api.github.com/users/rxgrant/orgs",
         "received_events_url" : "https://api.github.com/users/rxgrant/received_events",
         "repos_url" : "https://api.github.com/users/rxgrant/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rxgrant/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rxgrant/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rxgrant"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r642149616"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642149616"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\r\n```",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-05-31T00:19:00Z",
      "diff_hunk" : "@@ -415,6 +434,12 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 0; // No activation delay\n \n+        // Deployment of CTV (BIP 119)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].bit = 5;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].nStartTime =Consensus::BIP9Deployment::ALWAYS_ACTIVE;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r642149616",
      "id" : 642149616,
      "line" : 439,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MjE0OTYxNg==",
      "original_commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "original_line" : 439,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 46,
      "pull_request_review_id" : 671880521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-31T00:19:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/642149616",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6995442?v=4",
         "events_url" : "https://api.github.com/users/rxgrant/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rxgrant/followers",
         "following_url" : "https://api.github.com/users/rxgrant/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rxgrant/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rxgrant",
         "id" : 6995442,
         "login" : "rxgrant",
         "node_id" : "MDQ6VXNlcjY5OTU0NDI=",
         "organizations_url" : "https://api.github.com/users/rxgrant/orgs",
         "received_events_url" : "https://api.github.com/users/rxgrant/received_events",
         "repos_url" : "https://api.github.com/users/rxgrant/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rxgrant/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rxgrant/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rxgrant"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-06-17T21:59:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-863590294",
      "id" : 863590294,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2MzU5MDI5NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-17T21:59:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/863590294",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Strong Concept ACK\r\n\r\nEdit:  I should note that the implementation details are above my paygrade, and I am ACK'ing the use-case improvements, with the condition that it passes review and gains consensus",
      "created_at" : "2021-06-21T04:30:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-864718834",
      "id" : 864718834,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2NDcxODgzNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-21T04:35:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864718834",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased to fix conflicts, whitespace issues fixed, and squashed the fixups to the tests.",
      "created_at" : "2021-06-26T05:03:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-868948722",
      "id" : 868948722,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg2ODk0ODcyMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-26T05:03:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/868948722",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-07-01T19:13:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-872487922",
      "id" : 872487922,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg3MjQ4NzkyMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-01T19:13:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/872487922",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "rebased!\r\n\r\n@ajtowns might you be able to check commit 0141eb4d7d8c35088287353b92813575ce9b79a7 since I had some non obvious rebasing to do following https://github.com/bitcoin/bitcoin/pull/19438",
      "created_at" : "2021-07-07T06:30:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-875324670",
      "id" : 875324670,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg3NTMyNDY3MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-07T06:30:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/875324670",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668206692"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668206692"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If I comment out these 2 lines `feature_checktemplateverify.py` still passes",
      "commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "created_at" : "2021-07-12T19:43:55Z",
      "diff_hunk" : "@@ -616,7 +616,32 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_STANDARD_TEMPLATE)) break;\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668206692",
      "id" : 668206692,
      "line" : 625,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIwNjY5Mg==",
      "original_commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "original_line" : 625,
      "original_position" : 11,
      "original_start_line" : 624,
      "path" : "src/script/interpreter.cpp",
      "position" : 11,
      "pull_request_review_id" : 704479139,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 624,
      "start_side" : "RIGHT",
      "updated_at" : "2021-07-12T19:53:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668206692",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668207732"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668207732"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "replacing this with a `break` has `feature_checktemplateverify.py` still passing",
      "commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "created_at" : "2021-07-12T19:45:49Z",
      "diff_hunk" : "@@ -616,7 +616,32 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_STANDARD_TEMPLATE)) break;\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    // If the argument was not 32 bytes, treat as OP_NOP4:\n+                    switch (stack.back().size()) {\n+                        case 32:\n+                            if (!checker.CheckStandardTemplateHash(stack.back())) {\n+                                return set_error(serror, SCRIPT_ERR_TEMPLATE_MISMATCH);\n+                            }\n+                            break;\n+                        default:\n+                            // future upgrade can add semantics for this opcode with different length args\n+                            // so discourage use when applicable\n+                            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n+                                return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n+                            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668207732",
      "id" : 668207732,
      "line" : 639,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIwNzczMg==",
      "original_commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "original_line" : 639,
      "original_position" : 25,
      "original_start_line" : 635,
      "path" : "src/script/interpreter.cpp",
      "position" : 25,
      "pull_request_review_id" : 704479139,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 635,
      "start_side" : "RIGHT",
      "updated_at" : "2021-07-12T19:53:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668207732",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668209161"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668209161"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "setting this to `false` still has `feature_checktemplateverify.py` passing",
      "commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "created_at" : "2021-07-12T19:47:56Z",
      "diff_hunk" : "@@ -1430,6 +1510,8 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_outputs_ready = true;\n     }\n \n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668209161",
      "id" : 668209161,
      "line" : 1514,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIwOTE2MQ==",
      "original_commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "original_line" : 1514,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 111,
      "pull_request_review_id" : 704479139,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T19:53:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668209161",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668211185"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668211185"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "changing the `input_index` param to `100` in either of these causes the tests to fail which seems concerncing to me as this is just a cache",
      "commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "created_at" : "2021-07-12T19:51:19Z",
      "diff_hunk" : "@@ -1452,11 +1534,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();\n+        if (skip_scriptSigs) {\n+            // 0 hash used to signal if we should skip scriptSigs\n+            // when re-computing for different indexes.\n+            m_scriptSigs_single_hash = uint256{};\n+            // TODO: Cache midstate?\n+            m_standard_template_single_hash = GetStandardTemplateHashEmptyScript(txTo, m_outputs_single_hash, m_sequences_single_hash, 0);\n+        } else {\n+            m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\n+            m_standard_template_single_hash = GetStandardTemplateHashWithScript(txTo, m_outputs_single_hash, m_sequences_single_hash, m_scriptSigs_single_hash, 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668211185",
      "id" : 668211185,
      "line" : 1553,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIxMTE4NQ==",
      "original_commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "original_line" : 1553,
      "original_position" : 136,
      "original_start_line" : 1550,
      "path" : "src/script/interpreter.cpp",
      "position" : 136,
      "pull_request_review_id" : 704479139,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 1550,
      "start_side" : "RIGHT",
      "updated_at" : "2021-07-12T19:55:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668211185",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668211774"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668211774"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "changing this to false has `feature_checktemplateverify` still pass",
      "commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "created_at" : "2021-07-12T19:52:16Z",
      "diff_hunk" : "@@ -1452,11 +1534,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();\n+        if (skip_scriptSigs) {\n+            // 0 hash used to signal if we should skip scriptSigs\n+            // when re-computing for different indexes.\n+            m_scriptSigs_single_hash = uint256{};\n+            // TODO: Cache midstate?\n+            m_standard_template_single_hash = GetStandardTemplateHashEmptyScript(txTo, m_outputs_single_hash, m_sequences_single_hash, 0);\n+        } else {\n+            m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\n+            m_standard_template_single_hash = GetStandardTemplateHashWithScript(txTo, m_outputs_single_hash, m_sequences_single_hash, m_scriptSigs_single_hash, 0);\n+        }\n+        m_bip119_ctv_ready = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668211774",
      "id" : 668211774,
      "line" : 1555,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIxMTc3NA==",
      "original_commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "original_line" : 1555,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 138,
      "pull_request_review_id" : 704479139,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T19:53:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668211774",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668230043"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668230043"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yep, that's normal.\r\n\r\nIf the cache is disabled (which making ready = false does), then the cache isn't used.",
      "commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "created_at" : "2021-07-12T20:22:54Z",
      "diff_hunk" : "@@ -1452,11 +1534,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();\n+        if (skip_scriptSigs) {\n+            // 0 hash used to signal if we should skip scriptSigs\n+            // when re-computing for different indexes.\n+            m_scriptSigs_single_hash = uint256{};\n+            // TODO: Cache midstate?\n+            m_standard_template_single_hash = GetStandardTemplateHashEmptyScript(txTo, m_outputs_single_hash, m_sequences_single_hash, 0);\n+        } else {\n+            m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\n+            m_standard_template_single_hash = GetStandardTemplateHashWithScript(txTo, m_outputs_single_hash, m_sequences_single_hash, m_scriptSigs_single_hash, 0);\n+        }\n+        m_bip119_ctv_ready = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668230043",
      "id" : 668230043,
      "in_reply_to_id" : 668211774,
      "line" : 1555,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIzMDA0Mw==",
      "original_commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "original_line" : 1555,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 138,
      "pull_request_review_id" : 704509649,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T20:22:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668230043",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668231716"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668231716"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "That's to be expected -- the cached precompute expects input_index == 0, https://github.com/bitcoin/bitcoin/blob/b04c35c8506160e95a965382956fa5b68d139b29/src/script/interpreter.cpp#L1910, so if you change what is cached to input_index == 100 the checker will use the wrong value.",
      "commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "created_at" : "2021-07-12T20:25:43Z",
      "diff_hunk" : "@@ -1452,11 +1534,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();\n+        if (skip_scriptSigs) {\n+            // 0 hash used to signal if we should skip scriptSigs\n+            // when re-computing for different indexes.\n+            m_scriptSigs_single_hash = uint256{};\n+            // TODO: Cache midstate?\n+            m_standard_template_single_hash = GetStandardTemplateHashEmptyScript(txTo, m_outputs_single_hash, m_sequences_single_hash, 0);\n+        } else {\n+            m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\n+            m_standard_template_single_hash = GetStandardTemplateHashWithScript(txTo, m_outputs_single_hash, m_sequences_single_hash, m_scriptSigs_single_hash, 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668231716",
      "id" : 668231716,
      "in_reply_to_id" : 668211185,
      "line" : 1553,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIzMTcxNg==",
      "original_commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "original_line" : 1553,
      "original_position" : 136,
      "original_start_line" : 1550,
      "path" : "src/script/interpreter.cpp",
      "position" : 136,
      "pull_request_review_id" : 704511886,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 1550,
      "start_side" : "RIGHT",
      "updated_at" : "2021-07-12T20:25:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668231716",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668233412"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668233412"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is to be expected, if uses_bip119_ctv is false, then the checker will just compute the values without the cache (unless taproot/143 flags passed -- i suppose we could tighten when the cache gets made). If it is true, then the cache is always available. The cache being present or not shouldn't break anything!",
      "commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "created_at" : "2021-07-12T20:28:28Z",
      "diff_hunk" : "@@ -1430,6 +1510,8 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_outputs_ready = true;\n     }\n \n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668233412",
      "id" : 668233412,
      "in_reply_to_id" : 668209161,
      "line" : 1514,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIzMzQxMg==",
      "original_commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "original_line" : 1514,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 111,
      "pull_request_review_id" : 704514102,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-12T20:28:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668233412",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668234024"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668234024"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "good catch, I should pass in some non-32 byte values to check that the txns are rejected.",
      "commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "created_at" : "2021-07-12T20:29:29Z",
      "diff_hunk" : "@@ -616,7 +616,32 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_STANDARD_TEMPLATE)) break;\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    // If the argument was not 32 bytes, treat as OP_NOP4:\n+                    switch (stack.back().size()) {\n+                        case 32:\n+                            if (!checker.CheckStandardTemplateHash(stack.back())) {\n+                                return set_error(serror, SCRIPT_ERR_TEMPLATE_MISMATCH);\n+                            }\n+                            break;\n+                        default:\n+                            // future upgrade can add semantics for this opcode with different length args\n+                            // so discourage use when applicable\n+                            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n+                                return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n+                            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668234024",
      "id" : 668234024,
      "in_reply_to_id" : 668207732,
      "line" : 639,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIzNDAyNA==",
      "original_commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "original_line" : 639,
      "original_position" : 25,
      "original_start_line" : 635,
      "path" : "src/script/interpreter.cpp",
      "position" : 25,
      "pull_request_review_id" : 704514915,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 635,
      "start_side" : "RIGHT",
      "updated_at" : "2021-07-12T20:29:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668234024",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668234352"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668234352"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "good catch, I should test empty stack.",
      "commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "created_at" : "2021-07-12T20:30:01Z",
      "diff_hunk" : "@@ -616,7 +616,32 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_STANDARD_TEMPLATE)) break;\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668234352",
      "id" : 668234352,
      "in_reply_to_id" : 668206692,
      "line" : 625,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODIzNDM1Mg==",
      "original_commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "original_line" : 625,
      "original_position" : 11,
      "original_start_line" : 624,
      "path" : "src/script/interpreter.cpp",
      "position" : 11,
      "pull_request_review_id" : 704515354,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 624,
      "start_side" : "RIGHT",
      "updated_at" : "2021-07-12T20:30:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668234352",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept NACK. Bad for security.  (I wont respond to this similar to https://github.com/bitcoin-core/gui/pull/320#issuecomment-845826760)\r\n\r\nCan delete the comment because its not from Chaincode Labs devs.\r\n\r\nDisclaimer: I have other issues with how Core repo works however it doesn't influences my reasoning here. I have no incentive to NACK here. I don't make money off other chains or author of this BIP makes more than us.",
      "created_at" : "2021-07-12T20:37:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-878578332",
      "id" : 878578332,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg3ODU3ODMzMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-12T20:39:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/878578332",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13405205?v=4",
         "events_url" : "https://api.github.com/users/prayank23/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prayank23/followers",
         "following_url" : "https://api.github.com/users/prayank23/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prayank23/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prayank23",
         "id" : 13405205,
         "login" : "prayank23",
         "node_id" : "MDQ6VXNlcjEzNDA1MjA1",
         "organizations_url" : "https://api.github.com/users/prayank23/orgs",
         "received_events_url" : "https://api.github.com/users/prayank23/received_events",
         "repos_url" : "https://api.github.com/users/prayank23/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prayank23/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prayank23"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Concept NACK. Bad for security. (I wont respond to this similar to [bitcoin-core/gui#320 (comment)](https://github.com/bitcoin-core/gui/pull/320#issuecomment-845826760))\r\n> \r\n> Can delete the comment because its not from Chaincode Labs devs.\r\n> \r\n> Disclaimer: I have other issues with how Core repo works however it doesn't influences my reasoning here. I have no incentive to NACK here. I don't make money off other chains or author of this BIP makes more than us.\r\n\r\n@prayank23 please refer to the Contributing guide -- https://github.com/bitcoin/bitcoin/blob/933c6466c2bda3a06d3c5da0de0d8f05111c9f4c/CONTRIBUTING.md\r\n\r\n> A NACK needs to include a rationale why the change is not worthwhile. NACKs without accompanying reasoning may be disregarded.",
      "created_at" : "2021-07-12T20:40:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-878580116",
      "id" : 878580116,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg3ODU4MDExNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-12T20:40:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/878580116",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The only thing I care about is \"Bitcoin\". I will do **anything** for it. I have already left everything for it in last few years. I don't need gatekeepers. No single person or organization is bigger than network itself and it's ethos. If someone shows true colors will be called out by few.",
      "created_at" : "2021-07-12T20:45:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-878583145",
      "id" : 878583145,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg3ODU4MzE0NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-12T20:45:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/878583145",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13405205?v=4",
         "events_url" : "https://api.github.com/users/prayank23/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prayank23/followers",
         "following_url" : "https://api.github.com/users/prayank23/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prayank23/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prayank23",
         "id" : 13405205,
         "login" : "prayank23",
         "node_id" : "MDQ6VXNlcjEzNDA1MjA1",
         "organizations_url" : "https://api.github.com/users/prayank23/orgs",
         "received_events_url" : "https://api.github.com/users/prayank23/received_events",
         "repos_url" : "https://api.github.com/users/prayank23/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prayank23/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prayank23"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "That's all fine and dandy, but your comment isn't\r\n\r\n1. Technically relevant.\r\n2. Coherent (I don't understand what you are insinuating or claiming or how it relates to BIP-119)\r\n\r\nIf you want to discuss further please use an appropriate venue (e.g., twitter, mailing list).",
      "created_at" : "2021-07-12T20:51:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-878586404",
      "id" : 878586404,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg3ODU4NjQwNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-12T20:51:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/878586404",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668454386"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668454386"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Now covered :)",
      "commit_id" : "9ec56bb91139747f19c56f5f640d558c831ba152",
      "created_at" : "2021-07-13T06:08:53Z",
      "diff_hunk" : "@@ -616,7 +616,32 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_STANDARD_TEMPLATE)) break;\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    // If the argument was not 32 bytes, treat as OP_NOP4:\n+                    switch (stack.back().size()) {\n+                        case 32:\n+                            if (!checker.CheckStandardTemplateHash(stack.back())) {\n+                                return set_error(serror, SCRIPT_ERR_TEMPLATE_MISMATCH);\n+                            }\n+                            break;\n+                        default:\n+                            // future upgrade can add semantics for this opcode with different length args\n+                            // so discourage use when applicable\n+                            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {\n+                                return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n+                            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668454386",
      "id" : 668454386,
      "in_reply_to_id" : 668207732,
      "line" : 639,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODQ1NDM4Ng==",
      "original_commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "original_line" : 639,
      "original_position" : 25,
      "original_start_line" : 635,
      "path" : "src/script/interpreter.cpp",
      "position" : 25,
      "pull_request_review_id" : 704778269,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 635,
      "start_side" : "RIGHT",
      "updated_at" : "2021-07-13T06:08:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668454386",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668454528"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668454528"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "now covered :)",
      "commit_id" : "9ec56bb91139747f19c56f5f640d558c831ba152",
      "created_at" : "2021-07-13T06:09:06Z",
      "diff_hunk" : "@@ -616,7 +616,32 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_STANDARD_TEMPLATE)) break;\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668454528",
      "id" : 668454528,
      "in_reply_to_id" : 668206692,
      "line" : 625,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODQ1NDUyOA==",
      "original_commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "original_line" : 625,
      "original_position" : 11,
      "original_start_line" : 624,
      "path" : "src/script/interpreter.cpp",
      "position" : 11,
      "pull_request_review_id" : 704778413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 624,
      "start_side" : "RIGHT",
      "updated_at" : "2021-07-13T06:09:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668454528",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668551097"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668551097"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is untested code: https://drahtbot.space/host_reports/DrahtBot/reports/coverage/bitcoin/bitcoin/21702/total.coverage/src/script/interpreter.cpp.gcov.html#1924",
      "commit_id" : "9ec56bb91139747f19c56f5f640d558c831ba152",
      "created_at" : "2021-07-13T08:38:17Z",
      "diff_hunk" : "@@ -1803,6 +1901,30 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckStandardTemplateHash(const std::vector<unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        // if nIn == 0, then we've already cached this and can directly check\n+        if (nIn == 0) {\n+            return std::equal(txdata->m_standard_template_single_hash.begin(), txdata->m_standard_template_single_hash.end(), hash.data());\n+        } else {\n+            // otherwise we still have *most* of the hash cached,\n+            // so just re-compute the correct one and compare\n+            assert(txTo != nullptr);\n+            uint256 hash_tmpl = txdata->m_scriptSigs_single_hash.IsNull() ?\n+                GetStandardTemplateHashEmptyScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash, nIn) :\n+                GetStandardTemplateHashWithScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash,\n+                        txdata->m_scriptSigs_single_hash, nIn);\n+            return std::equal(hash_tmpl.begin(), hash_tmpl.end(), hash.data());\n+        }\n+    }\n+    assert(txTo != nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668551097",
      "id" : 668551097,
      "line" : 1924,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODU1MTA5Nw==",
      "original_commit_id" : "9ec56bb91139747f19c56f5f640d558c831ba152",
      "original_line" : 1924,
      "original_position" : 177,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 177,
      "pull_request_review_id" : 704905550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-13T08:39:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668551097",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668855118"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668855118"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good point -- trying to think about how to trigger no precomputed data available, other than from unit tests. Are their code paths where we do not precompute?",
      "commit_id" : "9ec56bb91139747f19c56f5f640d558c831ba152",
      "created_at" : "2021-07-13T15:05:53Z",
      "diff_hunk" : "@@ -1803,6 +1901,30 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckStandardTemplateHash(const std::vector<unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        // if nIn == 0, then we've already cached this and can directly check\n+        if (nIn == 0) {\n+            return std::equal(txdata->m_standard_template_single_hash.begin(), txdata->m_standard_template_single_hash.end(), hash.data());\n+        } else {\n+            // otherwise we still have *most* of the hash cached,\n+            // so just re-compute the correct one and compare\n+            assert(txTo != nullptr);\n+            uint256 hash_tmpl = txdata->m_scriptSigs_single_hash.IsNull() ?\n+                GetStandardTemplateHashEmptyScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash, nIn) :\n+                GetStandardTemplateHashWithScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash,\n+                        txdata->m_scriptSigs_single_hash, nIn);\n+            return std::equal(hash_tmpl.begin(), hash_tmpl.end(), hash.data());\n+        }\n+    }\n+    assert(txTo != nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668855118",
      "id" : 668855118,
      "in_reply_to_id" : 668551097,
      "line" : 1924,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODg1NTExOA==",
      "original_commit_id" : "9ec56bb91139747f19c56f5f640d558c831ba152",
      "original_line" : 1924,
      "original_position" : 177,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 177,
      "pull_request_review_id" : 705313250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-13T15:05:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668855118",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668855427"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668855427"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "(e.g., unit tests I can just call the function, but i'd love to test it on a full code path)",
      "commit_id" : "9ec56bb91139747f19c56f5f640d558c831ba152",
      "created_at" : "2021-07-13T15:06:12Z",
      "diff_hunk" : "@@ -1803,6 +1901,30 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckStandardTemplateHash(const std::vector<unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        // if nIn == 0, then we've already cached this and can directly check\n+        if (nIn == 0) {\n+            return std::equal(txdata->m_standard_template_single_hash.begin(), txdata->m_standard_template_single_hash.end(), hash.data());\n+        } else {\n+            // otherwise we still have *most* of the hash cached,\n+            // so just re-compute the correct one and compare\n+            assert(txTo != nullptr);\n+            uint256 hash_tmpl = txdata->m_scriptSigs_single_hash.IsNull() ?\n+                GetStandardTemplateHashEmptyScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash, nIn) :\n+                GetStandardTemplateHashWithScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash,\n+                        txdata->m_scriptSigs_single_hash, nIn);\n+            return std::equal(hash_tmpl.begin(), hash_tmpl.end(), hash.data());\n+        }\n+    }\n+    assert(txTo != nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668855427",
      "id" : 668855427,
      "in_reply_to_id" : 668551097,
      "line" : 1924,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODg1NTQyNw==",
      "original_commit_id" : "9ec56bb91139747f19c56f5f640d558c831ba152",
      "original_line" : 1924,
      "original_position" : 177,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 177,
      "pull_request_review_id" : 705313657,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-13T15:06:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668855427",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668875430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668875430"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure if there is a code path that can hit this in production. Have you seen https://github.com/bitcoin/bitcoin/pull/21330/files ?",
      "commit_id" : "9ec56bb91139747f19c56f5f640d558c831ba152",
      "created_at" : "2021-07-13T15:27:36Z",
      "diff_hunk" : "@@ -1803,6 +1901,30 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckStandardTemplateHash(const std::vector<unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        // if nIn == 0, then we've already cached this and can directly check\n+        if (nIn == 0) {\n+            return std::equal(txdata->m_standard_template_single_hash.begin(), txdata->m_standard_template_single_hash.end(), hash.data());\n+        } else {\n+            // otherwise we still have *most* of the hash cached,\n+            // so just re-compute the correct one and compare\n+            assert(txTo != nullptr);\n+            uint256 hash_tmpl = txdata->m_scriptSigs_single_hash.IsNull() ?\n+                GetStandardTemplateHashEmptyScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash, nIn) :\n+                GetStandardTemplateHashWithScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash,\n+                        txdata->m_scriptSigs_single_hash, nIn);\n+            return std::equal(hash_tmpl.begin(), hash_tmpl.end(), hash.data());\n+        }\n+    }\n+    assert(txTo != nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668875430",
      "id" : 668875430,
      "in_reply_to_id" : 668551097,
      "line" : 1924,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODg3NTQzMA==",
      "original_commit_id" : "9ec56bb91139747f19c56f5f640d558c831ba152",
      "original_line" : 1924,
      "original_position" : 177,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 177,
      "pull_request_review_id" : 705339572,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-13T15:27:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668875430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668931820"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668931820"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah I noticed that, it's great. According to the PR, `Validation code passes ASSERT_FAIL (as at validation time all data should always be passed, and anything else is a serious bug in the code), while signing code uses FAIL.`.\r\n\r\nHowever, for CTV were we ever to relax the heuristic (which is right now, for every transaction), we would want to be able to handle the case where the data is not available. But since that code isn't written (and likely won't be) it's fine to have that case being a missing data.  I'll do it as a separate commit in case there's a relaxed heuristic in the future.",
      "commit_id" : "1c3241e8f353f266e41cfdf50248f625ce491d3b",
      "created_at" : "2021-07-13T16:35:34Z",
      "diff_hunk" : "@@ -1803,6 +1901,30 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckStandardTemplateHash(const std::vector<unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        // if nIn == 0, then we've already cached this and can directly check\n+        if (nIn == 0) {\n+            return std::equal(txdata->m_standard_template_single_hash.begin(), txdata->m_standard_template_single_hash.end(), hash.data());\n+        } else {\n+            // otherwise we still have *most* of the hash cached,\n+            // so just re-compute the correct one and compare\n+            assert(txTo != nullptr);\n+            uint256 hash_tmpl = txdata->m_scriptSigs_single_hash.IsNull() ?\n+                GetStandardTemplateHashEmptyScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash, nIn) :\n+                GetStandardTemplateHashWithScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash,\n+                        txdata->m_scriptSigs_single_hash, nIn);\n+            return std::equal(hash_tmpl.begin(), hash_tmpl.end(), hash.data());\n+        }\n+    }\n+    assert(txTo != nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r668931820",
      "id" : 668931820,
      "in_reply_to_id" : 668551097,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2ODkzMTgyMA==",
      "original_commit_id" : "9ec56bb91139747f19c56f5f640d558c831ba152",
      "original_line" : 1924,
      "original_position" : 177,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 705413589,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-13T16:35:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/668931820",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r670097613"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670097613"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "btw I'm not sure if the patch that i made actually improve coverage much, given that I think the missingdata branch is still never hit...",
      "commit_id" : "1c3241e8f353f266e41cfdf50248f625ce491d3b",
      "created_at" : "2021-07-15T02:59:53Z",
      "diff_hunk" : "@@ -1803,6 +1901,30 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckStandardTemplateHash(const std::vector<unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        // if nIn == 0, then we've already cached this and can directly check\n+        if (nIn == 0) {\n+            return std::equal(txdata->m_standard_template_single_hash.begin(), txdata->m_standard_template_single_hash.end(), hash.data());\n+        } else {\n+            // otherwise we still have *most* of the hash cached,\n+            // so just re-compute the correct one and compare\n+            assert(txTo != nullptr);\n+            uint256 hash_tmpl = txdata->m_scriptSigs_single_hash.IsNull() ?\n+                GetStandardTemplateHashEmptyScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash, nIn) :\n+                GetStandardTemplateHashWithScript(*txTo, txdata->m_outputs_single_hash, txdata->m_sequences_single_hash,\n+                        txdata->m_scriptSigs_single_hash, nIn);\n+            return std::equal(hash_tmpl.begin(), hash_tmpl.end(), hash.data());\n+        }\n+    }\n+    assert(txTo != nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r670097613",
      "id" : 670097613,
      "in_reply_to_id" : 668551097,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MDA5NzYxMw==",
      "original_commit_id" : "9ec56bb91139747f19c56f5f640d558c831ba152",
      "original_line" : 1924,
      "original_position" : 177,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 706883326,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-15T02:59:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/670097613",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-07-20T15:06:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-883469061",
      "id" : 883469061,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII5840qKsF",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-20T15:06:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/883469061",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-07-24T09:07:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-886024641",
      "id" : 886024641,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII5840z6nB",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-24T09:07:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886024641",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, will try to review soon.",
      "created_at" : "2021-08-04T12:06:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-892603144",
      "id" : 892603144,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII5841NAsI",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-04T12:06:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892603144",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Edit: I should note that the implementation details are above my paygrade, and I am ACK'ing the use-case improvements, with the condition that it passes review and gains consensus\r\n\r\n@Rspigler: The implementation details **are** the most critical thing with this proposed consensus change. Everyone will ACK more use cases, that is the easy part. The hard part is reviewers (ideally more than a handful of people) coming to a view on whether the opcode's current design is optimal as once it goes live there are no do overs. I get the inferiority complex (and I often share it :) ) but as reviewers we do need to try to do better. \r\n\r\nFor example, a good starting point seems to be understanding how the design of this opcode has evolved over the years and the current trade-offs of its design (real world implementation of its declared use cases probably answers this best). I like StackExchange but a Q&A anywhere with detailed technical answers would be good. I'd be happy to transfer answers to StackExchange.\r\n\r\ne.g. https://bitcoin.stackexchange.com/questions/107891/how-has-the-design-of-the-opcode-op-checktemplateverify-evolved-over-its-various\r\n\r\nI'll repeat my view that the discussion on the form of the next soft fork (what is in it and when) seems to have barely started (for good reason imo with Taproot not yet activated and tonnes of work to do to leverage the benefits of Taproot) but I agree that can be left to the mailing list and this PR can focus on opcode design and code.\r\n\r\n",
      "created_at" : "2021-08-04T13:02:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-892638399",
      "id" : 892638399,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII5841NJS_",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-04T13:02:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892638399",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I agree (that the implementation details are the most critical).  I disagree that everyone will ACK more use cases - there are actually a few soft fork ideas in the works right now that are controversial.  I did plenty of research before Concept ACKing this, and I feel confident in my Concept ACK, but that's all I can do, and I can't review the code.\r\n\r\nThat being said, I agree strongly that implementation details are critical, and so is consensus; hence my conditional:\r\n\r\n> I am ACK'ing the use-case improvements, with the condition that it passes review and gains consensus\r\n\r\nI agree that there is still plenty of discussion to be had",
      "created_at" : "2021-08-04T19:00:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-892897355",
      "id" : 892897355,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII5841OIhL",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-04T19:00:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/892897355",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684142697"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684142697"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in b560a59b1db7ca8fcdca2ea7722cf7cdbb004320 \"OP_CHECKTEMPLATEVERIFY Deployment parameters\"\r\n\r\nIf you're going to add deployment parameters, you'll also want to update `getblockchaininfo()` RPC's `softforks` result.\r\n",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-08-06T10:51:55Z",
      "diff_hunk" : "@@ -91,6 +91,13 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1628640000; // August 11th, 2021\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 709632; // Approximately November 12th, 2021\n \n+        // Deployment of CTV (BIP 119)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684142697",
      "id" : 684142697,
      "line" : 94,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDE0MjY5Nw==",
      "original_commit_id" : "b560a59b1db7ca8fcdca2ea7722cf7cdbb004320",
      "original_line" : 94,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 4,
      "pull_request_review_id" : 724235217,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-06T14:11:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684142697",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684145628"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684145628"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "You may want to move this down so as not to invalidate the comment on `m_bip341_taproot_ready`\r\n```suggestion\r\n    //! Whether the 5 fields above are initialized.\r\n    bool m_bip341_taproot_ready = false;\r\n    uint256 m_scriptSigs_single_hash;\r\n    uint256 m_standard_template_single_hash;\r\n```",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-08-06T10:57:30Z",
      "diff_hunk" : "@@ -160,9 +160,14 @@ struct PrecomputedTransactionData\n     uint256 m_outputs_single_hash;\n     uint256 m_spent_amounts_single_hash;\n     uint256 m_spent_scripts_single_hash;\n+    uint256 m_scriptSigs_single_hash;\n+    uint256 m_standard_template_single_hash;\n     //! Whether the 5 fields above are initialized.\n     bool m_bip341_taproot_ready = false;\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684145628",
      "id" : 684145628,
      "line" : 167,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDE0NTYyOA==",
      "original_commit_id" : "4c68aab5ee52f58709fe9043e640d13f89596db0",
      "original_line" : 167,
      "original_position" : 8,
      "original_start_line" : 163,
      "path" : "src/script/interpreter.h",
      "position" : 19,
      "pull_request_review_id" : 724235217,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 163,
      "start_side" : "RIGHT",
      "updated_at" : "2021-08-06T14:11:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684145628",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684149776"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684149776"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This test shouldn't depend on the wallet. Perhaps look into using `MiniWallet`? I'm sure `create_transaction_to_script()` could be modified to not require `signrawtransactionwithwallet`",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-08-06T11:05:36Z",
      "diff_hunk" : "@@ -0,0 +1,484 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_HASH160, OP_EQUAL, hash160, taproot_construct\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def p2sh_helper(script):\n+    return CScript(bytes([OP_HASH160, 0x14]) + hash160(script) + bytes([OP_EQUAL]))\n+def random_p2sh():\n+    return p2sh_helper(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684149776",
      "id" : 684149776,
      "line" : 83,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDE0OTc3Ng==",
      "original_commit_id" : "92c34e2fa753d1c0a6076446f62ab77c8d08c75a",
      "original_line" : 83,
      "original_position" : 83,
      "original_start_line" : 82,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 83,
      "pull_request_review_id" : 724235217,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 82,
      "start_side" : "RIGHT",
      "updated_at" : "2021-08-06T14:11:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684149776",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684193839"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684193839"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Note on all the `try` / `except`s in 92c34e2fa753d1c0a6076446f62ab77c8d08c75a tests:\r\nWe have utils for asserting RPC errors - this is cleaner and will print the log on a failure:\r\n```suggestion\r\n        assert_raises_rpc_error(-26, STACK_TOO_SHORT_ERROR, self.nodes[0].sendrawtransaction, check_template_verify_tx_empty_stack.serialize().hex())\r\n```",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-08-06T12:24:59Z",
      "diff_hunk" : "@@ -0,0 +1,484 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_HASH160, OP_EQUAL, hash160, taproot_construct\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def p2sh_helper(script):\n+    return CScript(bytes([OP_HASH160, 0x14]) + hash160(script) + bytes([OP_EQUAL]))\n+def random_p2sh():\n+    return p2sh_helper(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(BLOCKS)][:-100]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])\n+        taproot_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                taproot.scriptPubKey, amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a segwit script\")\n+        segwit_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an non-32 byte stack segwit script\")\n+        segwit_ctv_funding_tx_wrongsize_stack = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an empty stack segwit script\")\n+        segwit_ctv_funding_tx_empty_stack = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(CScript([OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a p2sh script (impossible to spend)\")\n+        p2sh_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                p2sh_helper(script), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating script for tree size depth 4\")\n+        # Small Tree for test speed, can be set to a large value like 16 (i.e., 65K txns)\n+        TREE_SIZE = 4\n+        congestion_tree_txo = random_secure_tree(TREE_SIZE)\n+\n+        self.log.info(\"Creating funding txn for tree size depth 4\")\n+        bare_ctv_tree_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                congestion_tree_txo[0][0].scriptPubKey, amount_sats=congestion_tree_txo[0][0].nValue)\n+\n+        self.log.info(\"Creating script for spend at position 2\")\n+        outputs_position_2, script_position_2 = random_real_outputs_and_script(10, 1, 2)\n+        # Add some fee satoshis\n+        amount_position_2 = (sum(out.nValue for out in outputs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2\")\n+        bare_ctv_position_2 = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_position_2, amount_sats=amount_position_2)\n+\n+        self.log.info(\"Creating script for spend at position 1 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs, script_specific_scriptSigs = random_real_outputs_and_script(10, 0, 2,\n+                [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs = (sum(out.nValue for out in outputs_specific_scriptSigs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 1 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_specific_scriptSigs, amount_sats=amount_specific_scriptSigs)\n+\n+        self.log.info(\"Creating script for spend at position 2 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs_position_2, script_specific_scriptSigs_position_2 = \\\n+                random_real_outputs_and_script(10, 1, 2, [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs_position_2 = (sum(out.nValue for out in outputs_specific_scriptSigs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_position_2 = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_specific_scriptSigs_position_2, amount_sats=amount_specific_scriptSigs_position_2)\n+\n+        self.log.info(\"Creating funding txns for some anyone can sepnd outputs\")\n+        anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+        bare_anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+\n+\n+        funding_txs = [  taproot_ctv_funding_tx\n+                       , segwit_ctv_funding_tx\n+                       , segwit_ctv_funding_tx_wrongsize_stack\n+                       , segwit_ctv_funding_tx_empty_stack\n+                       , p2sh_ctv_funding_tx\n+                       , anyone_can_spend_funding_tx\n+                       , bare_ctv_tree_funding_tx\n+                       , bare_ctv_position_2\n+                       , bare_anyone_can_spend_funding_tx\n+                       , bare_ctv_specific_scriptSigs\n+                       , bare_ctv_specific_scriptSigs_position_2]\n+\n+        self.log.info(\"Obtaining TXIDs\")\n+        taproot_ctv_outpoint,\\\n+        segwit_ctv_outpoint,\\\n+        segwit_ctv_wrongsize_stack_outpoint,\\\n+        segwit_ctv_empty_stack_outpoint,\\\n+        p2sh_ctv_outpoint,\\\n+        anyone_can_spend_outpoint,\\\n+        bare_ctv_tree_outpoint,\\\n+        bare_ctv_position_2,\\\n+        bare_anyone_can_spend_outpoint,\\\n+        bare_ctv_specific_scriptSigs_outpoint,\\\n+        bare_ctv_specific_scriptSigs_position_2_outpoint\\\n+        = [COutPoint(int(tx.rehash(),16), 0) for tx in funding_txs]\n+\n+        self.log.info(\"Funding all outputs\")\n+        self.add_block(funding_txs)\n+\n+        self.log.info(\"Testing Taproot OP_CHECKTEMPLATEVERIFY spend\")\n+        # Test sendrawtransaction\n+        taproot_check_template_verify_tx = CTransaction()\n+        taproot_check_template_verify_tx.nVersion = 2\n+        taproot_check_template_verify_tx.vin = [CTxIn(taproot_ctv_outpoint)]\n+        taproot_check_template_verify_tx.vout = outputs\n+        taproot_check_template_verify_tx.wit.vtxinwit +=  [CTxInWitness()]\n+        taproot_check_template_verify_tx.wit.vtxinwit[0].scriptWitness.stack = [script, bytes([0xc0 + taproot.negflag])+taproot.internal_pubkey]\n+        assert_equal(self.nodes[0].sendrawtransaction(taproot_check_template_verify_tx.serialize().hex(), 0), taproot_check_template_verify_tx.rehash())\n+        self.log.info(\"Taproot OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([taproot_check_template_verify_tx])\n+        self.log.info(\"Taproot OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx = CTransaction()\n+        check_template_verify_tx.nVersion = 2\n+        check_template_verify_tx.vin = [CTxIn(segwit_ctv_outpoint)]\n+        check_template_verify_tx.vout = outputs\n+\n+        check_template_verify_tx.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx.wit.vtxinwit[0].scriptWitness.stack = [script]\n+        assert_equal(self.nodes[0].sendrawtransaction(check_template_verify_tx.serialize().hex(), 0), check_template_verify_tx.rehash())\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([check_template_verify_tx])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        # Show any modification will break the validity\n+        self.log.info(\"Modifying Segwit OP_CHECKTEMPLATEVERIFY spend, block should fail\")\n+        check_template_verify_tx_mutated_amount = check_template_verify_tx\n+        check_template_verify_tx_mutated_amount.vout[0].nValue += 1\n+        check_template_verify_tx_mutated_amount.rehash()\n+        self.fail_block([check_template_verify_tx_mutated_amount])\n+        self.log.info(\"Modified Segwit OP_CHECKTEMPLATEVERIFY spend failed to confirm\")\n+\n+        # Now show that only one input allowed\n+        self.log.info(\"Testing that multiple inputs are disallowed when specified\")\n+        check_template_verify_two_inputs = check_template_verify_tx\n+        check_template_verify_two_inputs.vin += [CTxIn(anyone_can_spend_outpoint)]\n+        check_template_verify_two_inputs.rehash()\n+        self.fail_block([check_template_verify_two_inputs])\n+\n+        self.log.info(\"Testing that the second input specified was actually spendable by itself\")\n+\n+        # Second UTXO was actually spendable\n+        spendtx = CTransaction()\n+        spendtx.nVersion = 2\n+        spendtx.vin = [CTxIn(anyone_can_spend_outpoint)]\n+        spendtx.vout += [CTxOut(int(amount_sats - 1000), random_p2sh())]\n+        spendtx.rehash()\n+        blockhash = self.add_block([spendtx])\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend with a wrong size argument\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx_wrongsize_stack = CTransaction()\n+        check_template_verify_tx_wrongsize_stack.nVersion = 2\n+        check_template_verify_tx_wrongsize_stack.vin = [CTxIn(segwit_ctv_wrongsize_stack_outpoint)]\n+        check_template_verify_tx_wrongsize_stack.vout = outputs\n+\n+        check_template_verify_tx_wrongsize_stack.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx_wrongsize_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY])]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(check_template_verify_tx_wrongsize_stack.serialize().hex(), 0)\n+            raise Exception(\"Expected to fail sendrawtransaction\")\n+        except JSONRPCException as e:\n+            assert_equal(str(e), DISCOURAGED_ERROR + \" (-26)\")\n+            self.log.info(\"OP_CHECKTEMPLATEVERIFY with wrong size stack rejected by sendrawtransaction as discouraged\")\n+\n+        # Now we verify that a block with this transaction is valid\n+        blockhash = self.add_block([check_template_verify_tx_wrongsize_stack])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with wrong size stack spend accepted in a block (soft fork upgradable)\")\n+\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend with an empty stack argument\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx_empty_stack = CTransaction()\n+        check_template_verify_tx_empty_stack.nVersion = 2\n+        check_template_verify_tx_empty_stack.vin = [CTxIn(segwit_ctv_empty_stack_outpoint)]\n+        check_template_verify_tx_empty_stack.vout = outputs\n+\n+        check_template_verify_tx_empty_stack.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_CHECKTEMPLATEVERIFY])]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(check_template_verify_tx_empty_stack.serialize().hex(), 0)\n+            raise Exception(\"Expected to fail sendrawtransaction\")\n+        except JSONRPCException as e:\n+            assert_equal(str(e), STACK_TOO_SHORT_ERROR + \" (-26)\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684193839",
      "id" : 684193839,
      "line" : 352,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDE5MzgzOQ==",
      "original_commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "original_line" : 352,
      "original_position" : 352,
      "original_start_line" : 348,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 352,
      "pull_request_review_id" : 724235217,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 348,
      "start_side" : "RIGHT",
      "updated_at" : "2021-08-06T14:11:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684193839",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684200855"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684200855"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Also, since you're doing some random script creation and anyonecanspends - you might find some helpful helpers in script_util.py ",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-08-06T12:36:50Z",
      "diff_hunk" : "@@ -0,0 +1,484 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_HASH160, OP_EQUAL, hash160, taproot_construct\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def p2sh_helper(script):\n+    return CScript(bytes([OP_HASH160, 0x14]) + hash160(script) + bytes([OP_EQUAL]))\n+def random_p2sh():\n+    return p2sh_helper(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684200855",
      "id" : 684200855,
      "in_reply_to_id" : 684149776,
      "line" : 83,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDIwMDg1NQ==",
      "original_commit_id" : "92c34e2fa753d1c0a6076446f62ab77c8d08c75a",
      "original_line" : 83,
      "original_position" : 83,
      "original_start_line" : 82,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 83,
      "pull_request_review_id" : 724235217,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 82,
      "start_side" : "RIGHT",
      "updated_at" : "2021-08-06T14:11:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684200855",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684221416"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684221416"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Note on all the `sendrawtransaction`s in 92c34e2fa753d1c0a6076446f62ab77c8d08c75a tests:\r\n\r\nTrying to efforts to isolate the OP_CTV logic as much as possible, setting `maxfeerate=0` is an unnecessary override. You're adding fees anyway (I tried removing them and it doesn't seem to make a difference).",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-08-06T13:08:22Z",
      "diff_hunk" : "@@ -0,0 +1,484 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_HASH160, OP_EQUAL, hash160, taproot_construct\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def p2sh_helper(script):\n+    return CScript(bytes([OP_HASH160, 0x14]) + hash160(script) + bytes([OP_EQUAL]))\n+def random_p2sh():\n+    return p2sh_helper(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(BLOCKS)][:-100]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])\n+        taproot_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                taproot.scriptPubKey, amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a segwit script\")\n+        segwit_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an non-32 byte stack segwit script\")\n+        segwit_ctv_funding_tx_wrongsize_stack = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an empty stack segwit script\")\n+        segwit_ctv_funding_tx_empty_stack = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(CScript([OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a p2sh script (impossible to spend)\")\n+        p2sh_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                p2sh_helper(script), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating script for tree size depth 4\")\n+        # Small Tree for test speed, can be set to a large value like 16 (i.e., 65K txns)\n+        TREE_SIZE = 4\n+        congestion_tree_txo = random_secure_tree(TREE_SIZE)\n+\n+        self.log.info(\"Creating funding txn for tree size depth 4\")\n+        bare_ctv_tree_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                congestion_tree_txo[0][0].scriptPubKey, amount_sats=congestion_tree_txo[0][0].nValue)\n+\n+        self.log.info(\"Creating script for spend at position 2\")\n+        outputs_position_2, script_position_2 = random_real_outputs_and_script(10, 1, 2)\n+        # Add some fee satoshis\n+        amount_position_2 = (sum(out.nValue for out in outputs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2\")\n+        bare_ctv_position_2 = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_position_2, amount_sats=amount_position_2)\n+\n+        self.log.info(\"Creating script for spend at position 1 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs, script_specific_scriptSigs = random_real_outputs_and_script(10, 0, 2,\n+                [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs = (sum(out.nValue for out in outputs_specific_scriptSigs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 1 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_specific_scriptSigs, amount_sats=amount_specific_scriptSigs)\n+\n+        self.log.info(\"Creating script for spend at position 2 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs_position_2, script_specific_scriptSigs_position_2 = \\\n+                random_real_outputs_and_script(10, 1, 2, [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs_position_2 = (sum(out.nValue for out in outputs_specific_scriptSigs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_position_2 = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_specific_scriptSigs_position_2, amount_sats=amount_specific_scriptSigs_position_2)\n+\n+        self.log.info(\"Creating funding txns for some anyone can sepnd outputs\")\n+        anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+        bare_anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+\n+\n+        funding_txs = [  taproot_ctv_funding_tx\n+                       , segwit_ctv_funding_tx\n+                       , segwit_ctv_funding_tx_wrongsize_stack\n+                       , segwit_ctv_funding_tx_empty_stack\n+                       , p2sh_ctv_funding_tx\n+                       , anyone_can_spend_funding_tx\n+                       , bare_ctv_tree_funding_tx\n+                       , bare_ctv_position_2\n+                       , bare_anyone_can_spend_funding_tx\n+                       , bare_ctv_specific_scriptSigs\n+                       , bare_ctv_specific_scriptSigs_position_2]\n+\n+        self.log.info(\"Obtaining TXIDs\")\n+        taproot_ctv_outpoint,\\\n+        segwit_ctv_outpoint,\\\n+        segwit_ctv_wrongsize_stack_outpoint,\\\n+        segwit_ctv_empty_stack_outpoint,\\\n+        p2sh_ctv_outpoint,\\\n+        anyone_can_spend_outpoint,\\\n+        bare_ctv_tree_outpoint,\\\n+        bare_ctv_position_2,\\\n+        bare_anyone_can_spend_outpoint,\\\n+        bare_ctv_specific_scriptSigs_outpoint,\\\n+        bare_ctv_specific_scriptSigs_position_2_outpoint\\\n+        = [COutPoint(int(tx.rehash(),16), 0) for tx in funding_txs]\n+\n+        self.log.info(\"Funding all outputs\")\n+        self.add_block(funding_txs)\n+\n+        self.log.info(\"Testing Taproot OP_CHECKTEMPLATEVERIFY spend\")\n+        # Test sendrawtransaction\n+        taproot_check_template_verify_tx = CTransaction()\n+        taproot_check_template_verify_tx.nVersion = 2\n+        taproot_check_template_verify_tx.vin = [CTxIn(taproot_ctv_outpoint)]\n+        taproot_check_template_verify_tx.vout = outputs\n+        taproot_check_template_verify_tx.wit.vtxinwit +=  [CTxInWitness()]\n+        taproot_check_template_verify_tx.wit.vtxinwit[0].scriptWitness.stack = [script, bytes([0xc0 + taproot.negflag])+taproot.internal_pubkey]\n+        assert_equal(self.nodes[0].sendrawtransaction(taproot_check_template_verify_tx.serialize().hex(), 0), taproot_check_template_verify_tx.rehash())\n+        self.log.info(\"Taproot OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([taproot_check_template_verify_tx])\n+        self.log.info(\"Taproot OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx = CTransaction()\n+        check_template_verify_tx.nVersion = 2\n+        check_template_verify_tx.vin = [CTxIn(segwit_ctv_outpoint)]\n+        check_template_verify_tx.vout = outputs\n+\n+        check_template_verify_tx.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx.wit.vtxinwit[0].scriptWitness.stack = [script]\n+        assert_equal(self.nodes[0].sendrawtransaction(check_template_verify_tx.serialize().hex(), 0), check_template_verify_tx.rehash())\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([check_template_verify_tx])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        # Show any modification will break the validity\n+        self.log.info(\"Modifying Segwit OP_CHECKTEMPLATEVERIFY spend, block should fail\")\n+        check_template_verify_tx_mutated_amount = check_template_verify_tx\n+        check_template_verify_tx_mutated_amount.vout[0].nValue += 1\n+        check_template_verify_tx_mutated_amount.rehash()\n+        self.fail_block([check_template_verify_tx_mutated_amount])\n+        self.log.info(\"Modified Segwit OP_CHECKTEMPLATEVERIFY spend failed to confirm\")\n+\n+        # Now show that only one input allowed\n+        self.log.info(\"Testing that multiple inputs are disallowed when specified\")\n+        check_template_verify_two_inputs = check_template_verify_tx\n+        check_template_verify_two_inputs.vin += [CTxIn(anyone_can_spend_outpoint)]\n+        check_template_verify_two_inputs.rehash()\n+        self.fail_block([check_template_verify_two_inputs])\n+\n+        self.log.info(\"Testing that the second input specified was actually spendable by itself\")\n+\n+        # Second UTXO was actually spendable\n+        spendtx = CTransaction()\n+        spendtx.nVersion = 2\n+        spendtx.vin = [CTxIn(anyone_can_spend_outpoint)]\n+        spendtx.vout += [CTxOut(int(amount_sats - 1000), random_p2sh())]\n+        spendtx.rehash()\n+        blockhash = self.add_block([spendtx])\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend with a wrong size argument\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx_wrongsize_stack = CTransaction()\n+        check_template_verify_tx_wrongsize_stack.nVersion = 2\n+        check_template_verify_tx_wrongsize_stack.vin = [CTxIn(segwit_ctv_wrongsize_stack_outpoint)]\n+        check_template_verify_tx_wrongsize_stack.vout = outputs\n+\n+        check_template_verify_tx_wrongsize_stack.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx_wrongsize_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY])]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(check_template_verify_tx_wrongsize_stack.serialize().hex(), 0)\n+            raise Exception(\"Expected to fail sendrawtransaction\")\n+        except JSONRPCException as e:\n+            assert_equal(str(e), DISCOURAGED_ERROR + \" (-26)\")\n+            self.log.info(\"OP_CHECKTEMPLATEVERIFY with wrong size stack rejected by sendrawtransaction as discouraged\")\n+\n+        # Now we verify that a block with this transaction is valid\n+        blockhash = self.add_block([check_template_verify_tx_wrongsize_stack])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with wrong size stack spend accepted in a block (soft fork upgradable)\")\n+\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend with an empty stack argument\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx_empty_stack = CTransaction()\n+        check_template_verify_tx_empty_stack.nVersion = 2\n+        check_template_verify_tx_empty_stack.vin = [CTxIn(segwit_ctv_empty_stack_outpoint)]\n+        check_template_verify_tx_empty_stack.vout = outputs\n+\n+        check_template_verify_tx_empty_stack.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_CHECKTEMPLATEVERIFY])]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(check_template_verify_tx_empty_stack.serialize().hex(), 0)\n+            raise Exception(\"Expected to fail sendrawtransaction\")\n+        except JSONRPCException as e:\n+            assert_equal(str(e), STACK_TOO_SHORT_ERROR + \" (-26)\")\n+            self.log.info(\"OP_CHECKTEMPLATEVERIFY with wrong size stack rejected by sendrawtransaction as discouraged\")\n+\n+        # Now we verify that a block with this transaction is invalid\n+        self.fail_block([check_template_verify_tx_empty_stack], STACK_TOO_SHORT_ERROR)\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with wrong size stack spend rejected from block\")\n+\n+\n+        # Show that putting some element on the stack makes it succeed for consensus but fail policy\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with CTV argument in the program should fail policy pass consensus if witness stack is not 32 bytes\")\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE]), CScript([OP_CHECKTEMPLATEVERIFY])]\n+        try:\n+            self.nodes[0].sendrawtransaction(check_template_verify_tx_empty_stack.serialize().hex(), 0)\n+            raise Exception(\"Expected to fail sendrawtransaction\")\n+        except JSONRPCException as e:\n+            assert_equal(str(e), DISCOURAGED_ERROR + \" (-26)\")\n+            self.log.info(\"OP_CHECKTEMPLATEVERIFY with wrong size argument on the witness stack rejected by sendrawtransaction as discouraged\")\n+\n+        # Now we verify that a block with this transaction is valid\n+        blockhash = self.add_block([check_template_verify_tx_empty_stack])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with empty stack spend accepted in a block with something on the witness stack\")\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        # Put the correct hash on\n+        self.log.info(\"Testing OP_CHECKTEMPLATEVERIFY spend with template hash from the witness stack\")\n+        h = check_template_verify_tx_empty_stack.get_standard_template_hash(0)\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [h, CScript([OP_CHECKTEMPLATEVERIFY])]\n+        assert_equal(self.nodes[0].sendrawtransaction(check_template_verify_tx_empty_stack.serialize().hex(), 0), check_template_verify_tx_empty_stack.rehash())\n+        self.log.info(\"Witness stack defined OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([check_template_verify_tx_empty_stack])\n+        self.log.info(\"Witness stack defined OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing that other 32 byte arguments passed from the witness stack fail\")\n+        h = h[::-1]\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [h, CScript([OP_CHECKTEMPLATEVERIFY])]\n+        self.fail_block([check_template_verify_tx_empty_stack])\n+\n+        # Test sendrawtransaction with P2SH\n+        # Mathematically, this test cannot succeed since P2SH requires that the\n+        # P2SH script is in the scriptsig (which contains H), and H much\n+        # contain a commitment to the scriptsig.\n+        #\n+        # Note that this relies on RIPEMD160 being hard to find a cycle in.\n+        # This *could* break one day (P2SH is no longer recommended), but\n+        # there's no capability that would be gained by doing so (such as a\n+        # recursive covenant), it'd just be a \"party trick\" (and you could\n+        # also possibly steal all exisiting P2SH addressses).\n+        p2sh_check_template_verify_tx = CTransaction()\n+        p2sh_check_template_verify_tx.nVersion = 2\n+        p2sh_check_template_verify_tx.vin = [CTxIn(p2sh_ctv_outpoint, CScript([script]))]\n+        p2sh_check_template_verify_tx.vout = outputs\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(p2sh_check_template_verify_tx.serialize().hex(), 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684221416",
      "id" : 684221416,
      "line" : 411,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDIyMTQxNg==",
      "original_commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "original_line" : 411,
      "original_position" : 411,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 411,
      "pull_request_review_id" : 724235217,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-06T14:11:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684221416",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684223877"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684223877"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 1d93783f712592d14a6fd792d0ab60f9a0f8e3ce  _Add StandardTemplateHash definition:_\r\n\r\nI expected to see some unit tests for this? e.g. in sighash_tests.cpp?",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-08-06T13:12:02Z",
      "diff_hunk" : "@@ -1402,6 +1427,18 @@ uint256 GetSpentAmountsSHA256(const std::vector<CTxOut>& outputs_spent)\n     CHashWriter ss(SER_GETHASH, 0);\n     for (const auto& txout : outputs_spent) {\n         ss << txout.nValue;\n+\n+    }\n+    return ss.GetSHA256();\n+}\n+\n+/** Compute the (single) SHA256 of the concatenation of all scriptSigs in a tx. */\n+template <class T>\n+uint256 GetScriptSigsSHA256(const T& txTo)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& in : txTo.vin) {\n+        ss << in.scriptSig;\n     }\n     return ss.GetSHA256();\n }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684223877",
      "id" : 684223877,
      "line" : 1444,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDIyMzg3Nw==",
      "original_commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "original_line" : 1444,
      "original_position" : 52,
      "original_start_line" : 1436,
      "path" : "src/script/interpreter.cpp",
      "position" : 52,
      "pull_request_review_id" : 724235217,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 1436,
      "start_side" : "RIGHT",
      "updated_at" : "2021-08-06T14:11:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684223877",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684235896"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684235896"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 614d76f0d61c7ec85d223eb83b40b78ff07c5b23  _Add OP_CHECKTEMPLATEVERIFY Opcode as OP_NOP4_:\r\n\r\nSimilar reasoning, \"CHECKTEMPLATEVERIFY\" should correspond to `SCRIPT_VERIFY_CHECKTEMPLATEVERIFY`\r\n\r\nWill you be adding OP_CTV tests here (transaction_tests, tx_invalid.json, tx_valid.json) btw?",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-08-06T13:29:23Z",
      "diff_hunk" : "@@ -63,6 +63,7 @@ static std::map<std::string, unsigned int> mapFlagNames = {\n     {std::string(\"DISCOURAGE_UPGRADABLE_PUBKEYTYPE\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE},\n     {std::string(\"DISCOURAGE_OP_SUCCESS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS},\n     {std::string(\"DISCOURAGE_UPGRADABLE_TAPROOT_VERSION\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION},\n+    {std::string(\"CHECKTEMPLATEVERIFY\"), (unsigned int) SCRIPT_VERIFY_STANDARD_TEMPLATE},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684235896",
      "id" : 684235896,
      "line" : 66,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDIzNTg5Ng==",
      "original_commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "original_line" : 66,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 4,
      "pull_request_review_id" : 724235217,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-06T14:11:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684235896",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684262675"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684262675"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "614d76f0d61c7ec85d223eb83b40b78ff07c5b23 fails script_tests because NOP4 is still discouraged at that point, so you may want to squash it with 04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-08-06T14:05:28Z",
      "diff_hunk" : "@@ -875,7 +875,6 @@\n \n [\"Ensure 100% coverage of discouraged NOPS\"],\n [\"1\", \"NOP1\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP4\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684262675",
      "id" : 684262675,
      "line" : 878,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDI2MjY3NQ==",
      "original_commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "original_line" : 878,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/test/data/script_tests.json",
      "position" : 4,
      "pull_request_review_id" : 724235217,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-06T14:11:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684262675",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679500"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679500"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "prefer squash or put before?",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-08-07T21:27:06Z",
      "diff_hunk" : "@@ -875,7 +875,6 @@\n \n [\"Ensure 100% coverage of discouraged NOPS\"],\n [\"1\", \"NOP1\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP4\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679500",
      "id" : 684679500,
      "in_reply_to_id" : 684262675,
      "line" : 878,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY3OTUwMA==",
      "original_commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "original_line" : 878,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/test/data/script_tests.json",
      "position" : 4,
      "pull_request_review_id" : 724846771,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-07T21:27:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679500",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679591"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679591"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "will remove ",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-08-07T21:28:00Z",
      "diff_hunk" : "@@ -0,0 +1,484 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_HASH160, OP_EQUAL, hash160, taproot_construct\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def p2sh_helper(script):\n+    return CScript(bytes([OP_HASH160, 0x14]) + hash160(script) + bytes([OP_EQUAL]))\n+def random_p2sh():\n+    return p2sh_helper(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(BLOCKS)][:-100]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])\n+        taproot_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                taproot.scriptPubKey, amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a segwit script\")\n+        segwit_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an non-32 byte stack segwit script\")\n+        segwit_ctv_funding_tx_wrongsize_stack = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an empty stack segwit script\")\n+        segwit_ctv_funding_tx_empty_stack = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(CScript([OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a p2sh script (impossible to spend)\")\n+        p2sh_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                p2sh_helper(script), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating script for tree size depth 4\")\n+        # Small Tree for test speed, can be set to a large value like 16 (i.e., 65K txns)\n+        TREE_SIZE = 4\n+        congestion_tree_txo = random_secure_tree(TREE_SIZE)\n+\n+        self.log.info(\"Creating funding txn for tree size depth 4\")\n+        bare_ctv_tree_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                congestion_tree_txo[0][0].scriptPubKey, amount_sats=congestion_tree_txo[0][0].nValue)\n+\n+        self.log.info(\"Creating script for spend at position 2\")\n+        outputs_position_2, script_position_2 = random_real_outputs_and_script(10, 1, 2)\n+        # Add some fee satoshis\n+        amount_position_2 = (sum(out.nValue for out in outputs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2\")\n+        bare_ctv_position_2 = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_position_2, amount_sats=amount_position_2)\n+\n+        self.log.info(\"Creating script for spend at position 1 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs, script_specific_scriptSigs = random_real_outputs_and_script(10, 0, 2,\n+                [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs = (sum(out.nValue for out in outputs_specific_scriptSigs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 1 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_specific_scriptSigs, amount_sats=amount_specific_scriptSigs)\n+\n+        self.log.info(\"Creating script for spend at position 2 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs_position_2, script_specific_scriptSigs_position_2 = \\\n+                random_real_outputs_and_script(10, 1, 2, [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs_position_2 = (sum(out.nValue for out in outputs_specific_scriptSigs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_position_2 = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_specific_scriptSigs_position_2, amount_sats=amount_specific_scriptSigs_position_2)\n+\n+        self.log.info(\"Creating funding txns for some anyone can sepnd outputs\")\n+        anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+        bare_anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+\n+\n+        funding_txs = [  taproot_ctv_funding_tx\n+                       , segwit_ctv_funding_tx\n+                       , segwit_ctv_funding_tx_wrongsize_stack\n+                       , segwit_ctv_funding_tx_empty_stack\n+                       , p2sh_ctv_funding_tx\n+                       , anyone_can_spend_funding_tx\n+                       , bare_ctv_tree_funding_tx\n+                       , bare_ctv_position_2\n+                       , bare_anyone_can_spend_funding_tx\n+                       , bare_ctv_specific_scriptSigs\n+                       , bare_ctv_specific_scriptSigs_position_2]\n+\n+        self.log.info(\"Obtaining TXIDs\")\n+        taproot_ctv_outpoint,\\\n+        segwit_ctv_outpoint,\\\n+        segwit_ctv_wrongsize_stack_outpoint,\\\n+        segwit_ctv_empty_stack_outpoint,\\\n+        p2sh_ctv_outpoint,\\\n+        anyone_can_spend_outpoint,\\\n+        bare_ctv_tree_outpoint,\\\n+        bare_ctv_position_2,\\\n+        bare_anyone_can_spend_outpoint,\\\n+        bare_ctv_specific_scriptSigs_outpoint,\\\n+        bare_ctv_specific_scriptSigs_position_2_outpoint\\\n+        = [COutPoint(int(tx.rehash(),16), 0) for tx in funding_txs]\n+\n+        self.log.info(\"Funding all outputs\")\n+        self.add_block(funding_txs)\n+\n+        self.log.info(\"Testing Taproot OP_CHECKTEMPLATEVERIFY spend\")\n+        # Test sendrawtransaction\n+        taproot_check_template_verify_tx = CTransaction()\n+        taproot_check_template_verify_tx.nVersion = 2\n+        taproot_check_template_verify_tx.vin = [CTxIn(taproot_ctv_outpoint)]\n+        taproot_check_template_verify_tx.vout = outputs\n+        taproot_check_template_verify_tx.wit.vtxinwit +=  [CTxInWitness()]\n+        taproot_check_template_verify_tx.wit.vtxinwit[0].scriptWitness.stack = [script, bytes([0xc0 + taproot.negflag])+taproot.internal_pubkey]\n+        assert_equal(self.nodes[0].sendrawtransaction(taproot_check_template_verify_tx.serialize().hex(), 0), taproot_check_template_verify_tx.rehash())\n+        self.log.info(\"Taproot OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([taproot_check_template_verify_tx])\n+        self.log.info(\"Taproot OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx = CTransaction()\n+        check_template_verify_tx.nVersion = 2\n+        check_template_verify_tx.vin = [CTxIn(segwit_ctv_outpoint)]\n+        check_template_verify_tx.vout = outputs\n+\n+        check_template_verify_tx.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx.wit.vtxinwit[0].scriptWitness.stack = [script]\n+        assert_equal(self.nodes[0].sendrawtransaction(check_template_verify_tx.serialize().hex(), 0), check_template_verify_tx.rehash())\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([check_template_verify_tx])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        # Show any modification will break the validity\n+        self.log.info(\"Modifying Segwit OP_CHECKTEMPLATEVERIFY spend, block should fail\")\n+        check_template_verify_tx_mutated_amount = check_template_verify_tx\n+        check_template_verify_tx_mutated_amount.vout[0].nValue += 1\n+        check_template_verify_tx_mutated_amount.rehash()\n+        self.fail_block([check_template_verify_tx_mutated_amount])\n+        self.log.info(\"Modified Segwit OP_CHECKTEMPLATEVERIFY spend failed to confirm\")\n+\n+        # Now show that only one input allowed\n+        self.log.info(\"Testing that multiple inputs are disallowed when specified\")\n+        check_template_verify_two_inputs = check_template_verify_tx\n+        check_template_verify_two_inputs.vin += [CTxIn(anyone_can_spend_outpoint)]\n+        check_template_verify_two_inputs.rehash()\n+        self.fail_block([check_template_verify_two_inputs])\n+\n+        self.log.info(\"Testing that the second input specified was actually spendable by itself\")\n+\n+        # Second UTXO was actually spendable\n+        spendtx = CTransaction()\n+        spendtx.nVersion = 2\n+        spendtx.vin = [CTxIn(anyone_can_spend_outpoint)]\n+        spendtx.vout += [CTxOut(int(amount_sats - 1000), random_p2sh())]\n+        spendtx.rehash()\n+        blockhash = self.add_block([spendtx])\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend with a wrong size argument\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx_wrongsize_stack = CTransaction()\n+        check_template_verify_tx_wrongsize_stack.nVersion = 2\n+        check_template_verify_tx_wrongsize_stack.vin = [CTxIn(segwit_ctv_wrongsize_stack_outpoint)]\n+        check_template_verify_tx_wrongsize_stack.vout = outputs\n+\n+        check_template_verify_tx_wrongsize_stack.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx_wrongsize_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY])]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(check_template_verify_tx_wrongsize_stack.serialize().hex(), 0)\n+            raise Exception(\"Expected to fail sendrawtransaction\")\n+        except JSONRPCException as e:\n+            assert_equal(str(e), DISCOURAGED_ERROR + \" (-26)\")\n+            self.log.info(\"OP_CHECKTEMPLATEVERIFY with wrong size stack rejected by sendrawtransaction as discouraged\")\n+\n+        # Now we verify that a block with this transaction is valid\n+        blockhash = self.add_block([check_template_verify_tx_wrongsize_stack])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with wrong size stack spend accepted in a block (soft fork upgradable)\")\n+\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend with an empty stack argument\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx_empty_stack = CTransaction()\n+        check_template_verify_tx_empty_stack.nVersion = 2\n+        check_template_verify_tx_empty_stack.vin = [CTxIn(segwit_ctv_empty_stack_outpoint)]\n+        check_template_verify_tx_empty_stack.vout = outputs\n+\n+        check_template_verify_tx_empty_stack.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_CHECKTEMPLATEVERIFY])]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(check_template_verify_tx_empty_stack.serialize().hex(), 0)\n+            raise Exception(\"Expected to fail sendrawtransaction\")\n+        except JSONRPCException as e:\n+            assert_equal(str(e), STACK_TOO_SHORT_ERROR + \" (-26)\")\n+            self.log.info(\"OP_CHECKTEMPLATEVERIFY with wrong size stack rejected by sendrawtransaction as discouraged\")\n+\n+        # Now we verify that a block with this transaction is invalid\n+        self.fail_block([check_template_verify_tx_empty_stack], STACK_TOO_SHORT_ERROR)\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with wrong size stack spend rejected from block\")\n+\n+\n+        # Show that putting some element on the stack makes it succeed for consensus but fail policy\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with CTV argument in the program should fail policy pass consensus if witness stack is not 32 bytes\")\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE]), CScript([OP_CHECKTEMPLATEVERIFY])]\n+        try:\n+            self.nodes[0].sendrawtransaction(check_template_verify_tx_empty_stack.serialize().hex(), 0)\n+            raise Exception(\"Expected to fail sendrawtransaction\")\n+        except JSONRPCException as e:\n+            assert_equal(str(e), DISCOURAGED_ERROR + \" (-26)\")\n+            self.log.info(\"OP_CHECKTEMPLATEVERIFY with wrong size argument on the witness stack rejected by sendrawtransaction as discouraged\")\n+\n+        # Now we verify that a block with this transaction is valid\n+        blockhash = self.add_block([check_template_verify_tx_empty_stack])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with empty stack spend accepted in a block with something on the witness stack\")\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        # Put the correct hash on\n+        self.log.info(\"Testing OP_CHECKTEMPLATEVERIFY spend with template hash from the witness stack\")\n+        h = check_template_verify_tx_empty_stack.get_standard_template_hash(0)\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [h, CScript([OP_CHECKTEMPLATEVERIFY])]\n+        assert_equal(self.nodes[0].sendrawtransaction(check_template_verify_tx_empty_stack.serialize().hex(), 0), check_template_verify_tx_empty_stack.rehash())\n+        self.log.info(\"Witness stack defined OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([check_template_verify_tx_empty_stack])\n+        self.log.info(\"Witness stack defined OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing that other 32 byte arguments passed from the witness stack fail\")\n+        h = h[::-1]\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [h, CScript([OP_CHECKTEMPLATEVERIFY])]\n+        self.fail_block([check_template_verify_tx_empty_stack])\n+\n+        # Test sendrawtransaction with P2SH\n+        # Mathematically, this test cannot succeed since P2SH requires that the\n+        # P2SH script is in the scriptsig (which contains H), and H much\n+        # contain a commitment to the scriptsig.\n+        #\n+        # Note that this relies on RIPEMD160 being hard to find a cycle in.\n+        # This *could* break one day (P2SH is no longer recommended), but\n+        # there's no capability that would be gained by doing so (such as a\n+        # recursive covenant), it'd just be a \"party trick\" (and you could\n+        # also possibly steal all exisiting P2SH addressses).\n+        p2sh_check_template_verify_tx = CTransaction()\n+        p2sh_check_template_verify_tx.nVersion = 2\n+        p2sh_check_template_verify_tx.vin = [CTxIn(p2sh_ctv_outpoint, CScript([script]))]\n+        p2sh_check_template_verify_tx.vout = outputs\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(p2sh_check_template_verify_tx.serialize().hex(), 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679591",
      "id" : 684679591,
      "in_reply_to_id" : 684221416,
      "line" : 411,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY3OTU5MQ==",
      "original_commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "original_line" : 411,
      "original_position" : 411,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 411,
      "pull_request_review_id" : 724846816,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-07T21:28:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679591",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679651"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679651"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "hah i guess new since i wrote the tests 2 years ago?",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-08-07T21:28:32Z",
      "diff_hunk" : "@@ -0,0 +1,484 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_HASH160, OP_EQUAL, hash160, taproot_construct\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def p2sh_helper(script):\n+    return CScript(bytes([OP_HASH160, 0x14]) + hash160(script) + bytes([OP_EQUAL]))\n+def random_p2sh():\n+    return p2sh_helper(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(BLOCKS)][:-100]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])\n+        taproot_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                taproot.scriptPubKey, amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a segwit script\")\n+        segwit_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an non-32 byte stack segwit script\")\n+        segwit_ctv_funding_tx_wrongsize_stack = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an empty stack segwit script\")\n+        segwit_ctv_funding_tx_empty_stack = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([0, sha256(CScript([OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a p2sh script (impossible to spend)\")\n+        p2sh_ctv_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                p2sh_helper(script), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating script for tree size depth 4\")\n+        # Small Tree for test speed, can be set to a large value like 16 (i.e., 65K txns)\n+        TREE_SIZE = 4\n+        congestion_tree_txo = random_secure_tree(TREE_SIZE)\n+\n+        self.log.info(\"Creating funding txn for tree size depth 4\")\n+        bare_ctv_tree_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                congestion_tree_txo[0][0].scriptPubKey, amount_sats=congestion_tree_txo[0][0].nValue)\n+\n+        self.log.info(\"Creating script for spend at position 2\")\n+        outputs_position_2, script_position_2 = random_real_outputs_and_script(10, 1, 2)\n+        # Add some fee satoshis\n+        amount_position_2 = (sum(out.nValue for out in outputs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2\")\n+        bare_ctv_position_2 = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_position_2, amount_sats=amount_position_2)\n+\n+        self.log.info(\"Creating script for spend at position 1 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs, script_specific_scriptSigs = random_real_outputs_and_script(10, 0, 2,\n+                [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs = (sum(out.nValue for out in outputs_specific_scriptSigs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 1 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_specific_scriptSigs, amount_sats=amount_specific_scriptSigs)\n+\n+        self.log.info(\"Creating script for spend at position 2 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs_position_2, script_specific_scriptSigs_position_2 = \\\n+                random_real_outputs_and_script(10, 1, 2, [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs_position_2 = (sum(out.nValue for out in outputs_specific_scriptSigs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_position_2 = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                script_specific_scriptSigs_position_2, amount_sats=amount_specific_scriptSigs_position_2)\n+\n+        self.log.info(\"Creating funding txns for some anyone can sepnd outputs\")\n+        anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+        bare_anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+\n+\n+        funding_txs = [  taproot_ctv_funding_tx\n+                       , segwit_ctv_funding_tx\n+                       , segwit_ctv_funding_tx_wrongsize_stack\n+                       , segwit_ctv_funding_tx_empty_stack\n+                       , p2sh_ctv_funding_tx\n+                       , anyone_can_spend_funding_tx\n+                       , bare_ctv_tree_funding_tx\n+                       , bare_ctv_position_2\n+                       , bare_anyone_can_spend_funding_tx\n+                       , bare_ctv_specific_scriptSigs\n+                       , bare_ctv_specific_scriptSigs_position_2]\n+\n+        self.log.info(\"Obtaining TXIDs\")\n+        taproot_ctv_outpoint,\\\n+        segwit_ctv_outpoint,\\\n+        segwit_ctv_wrongsize_stack_outpoint,\\\n+        segwit_ctv_empty_stack_outpoint,\\\n+        p2sh_ctv_outpoint,\\\n+        anyone_can_spend_outpoint,\\\n+        bare_ctv_tree_outpoint,\\\n+        bare_ctv_position_2,\\\n+        bare_anyone_can_spend_outpoint,\\\n+        bare_ctv_specific_scriptSigs_outpoint,\\\n+        bare_ctv_specific_scriptSigs_position_2_outpoint\\\n+        = [COutPoint(int(tx.rehash(),16), 0) for tx in funding_txs]\n+\n+        self.log.info(\"Funding all outputs\")\n+        self.add_block(funding_txs)\n+\n+        self.log.info(\"Testing Taproot OP_CHECKTEMPLATEVERIFY spend\")\n+        # Test sendrawtransaction\n+        taproot_check_template_verify_tx = CTransaction()\n+        taproot_check_template_verify_tx.nVersion = 2\n+        taproot_check_template_verify_tx.vin = [CTxIn(taproot_ctv_outpoint)]\n+        taproot_check_template_verify_tx.vout = outputs\n+        taproot_check_template_verify_tx.wit.vtxinwit +=  [CTxInWitness()]\n+        taproot_check_template_verify_tx.wit.vtxinwit[0].scriptWitness.stack = [script, bytes([0xc0 + taproot.negflag])+taproot.internal_pubkey]\n+        assert_equal(self.nodes[0].sendrawtransaction(taproot_check_template_verify_tx.serialize().hex(), 0), taproot_check_template_verify_tx.rehash())\n+        self.log.info(\"Taproot OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([taproot_check_template_verify_tx])\n+        self.log.info(\"Taproot OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx = CTransaction()\n+        check_template_verify_tx.nVersion = 2\n+        check_template_verify_tx.vin = [CTxIn(segwit_ctv_outpoint)]\n+        check_template_verify_tx.vout = outputs\n+\n+        check_template_verify_tx.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx.wit.vtxinwit[0].scriptWitness.stack = [script]\n+        assert_equal(self.nodes[0].sendrawtransaction(check_template_verify_tx.serialize().hex(), 0), check_template_verify_tx.rehash())\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY spend accepted by sendrawtransaction\")\n+\n+        # Now we verify that a block with this transaction is also valid\n+        blockhash = self.add_block([check_template_verify_tx])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY spend accepted in a block\")\n+\n+        self.log.info(\"Rolling back the block\")\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        # Show any modification will break the validity\n+        self.log.info(\"Modifying Segwit OP_CHECKTEMPLATEVERIFY spend, block should fail\")\n+        check_template_verify_tx_mutated_amount = check_template_verify_tx\n+        check_template_verify_tx_mutated_amount.vout[0].nValue += 1\n+        check_template_verify_tx_mutated_amount.rehash()\n+        self.fail_block([check_template_verify_tx_mutated_amount])\n+        self.log.info(\"Modified Segwit OP_CHECKTEMPLATEVERIFY spend failed to confirm\")\n+\n+        # Now show that only one input allowed\n+        self.log.info(\"Testing that multiple inputs are disallowed when specified\")\n+        check_template_verify_two_inputs = check_template_verify_tx\n+        check_template_verify_two_inputs.vin += [CTxIn(anyone_can_spend_outpoint)]\n+        check_template_verify_two_inputs.rehash()\n+        self.fail_block([check_template_verify_two_inputs])\n+\n+        self.log.info(\"Testing that the second input specified was actually spendable by itself\")\n+\n+        # Second UTXO was actually spendable\n+        spendtx = CTransaction()\n+        spendtx.nVersion = 2\n+        spendtx.vin = [CTxIn(anyone_can_spend_outpoint)]\n+        spendtx.vout += [CTxOut(int(amount_sats - 1000), random_p2sh())]\n+        spendtx.rehash()\n+        blockhash = self.add_block([spendtx])\n+        # Reset tip\n+        self.nodes[0].invalidateblock(blockhash)\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend with a wrong size argument\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx_wrongsize_stack = CTransaction()\n+        check_template_verify_tx_wrongsize_stack.nVersion = 2\n+        check_template_verify_tx_wrongsize_stack.vin = [CTxIn(segwit_ctv_wrongsize_stack_outpoint)]\n+        check_template_verify_tx_wrongsize_stack.vout = outputs\n+\n+        check_template_verify_tx_wrongsize_stack.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx_wrongsize_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY])]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(check_template_verify_tx_wrongsize_stack.serialize().hex(), 0)\n+            raise Exception(\"Expected to fail sendrawtransaction\")\n+        except JSONRPCException as e:\n+            assert_equal(str(e), DISCOURAGED_ERROR + \" (-26)\")\n+            self.log.info(\"OP_CHECKTEMPLATEVERIFY with wrong size stack rejected by sendrawtransaction as discouraged\")\n+\n+        # Now we verify that a block with this transaction is valid\n+        blockhash = self.add_block([check_template_verify_tx_wrongsize_stack])\n+        self.log.info(\"Segwit OP_CHECKTEMPLATEVERIFY with wrong size stack spend accepted in a block (soft fork upgradable)\")\n+\n+\n+        self.log.info(\"Testing Segwit OP_CHECKTEMPLATEVERIFY spend with an empty stack argument\")\n+        # Test sendrawtransaction\n+        check_template_verify_tx_empty_stack = CTransaction()\n+        check_template_verify_tx_empty_stack.nVersion = 2\n+        check_template_verify_tx_empty_stack.vin = [CTxIn(segwit_ctv_empty_stack_outpoint)]\n+        check_template_verify_tx_empty_stack.vout = outputs\n+\n+        check_template_verify_tx_empty_stack.wit.vtxinwit +=  [CTxInWitness()]\n+        check_template_verify_tx_empty_stack.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_CHECKTEMPLATEVERIFY])]\n+\n+        try:\n+            self.nodes[0].sendrawtransaction(check_template_verify_tx_empty_stack.serialize().hex(), 0)\n+            raise Exception(\"Expected to fail sendrawtransaction\")\n+        except JSONRPCException as e:\n+            assert_equal(str(e), STACK_TOO_SHORT_ERROR + \" (-26)\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679651",
      "id" : 684679651,
      "in_reply_to_id" : 684193839,
      "line" : 352,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY3OTY1MQ==",
      "original_commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "original_line" : 352,
      "original_position" : 352,
      "original_start_line" : 348,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 352,
      "pull_request_review_id" : 724846834,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 348,
      "start_side" : "RIGHT",
      "updated_at" : "2021-08-07T21:28:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679651",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679696"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679696"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "will check; wrote tests ~2 years ago so might be some new stuff to use",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-08-07T21:28:59Z",
      "diff_hunk" : "@@ -0,0 +1,484 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_HASH160, OP_EQUAL, hash160, taproot_construct\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def p2sh_helper(script):\n+    return CScript(bytes([OP_HASH160, 0x14]) + hash160(script) + bytes([OP_EQUAL]))\n+def random_p2sh():\n+    return p2sh_helper(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679696",
      "id" : 684679696,
      "in_reply_to_id" : 684149776,
      "line" : 83,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY3OTY5Ng==",
      "original_commit_id" : "92c34e2fa753d1c0a6076446f62ab77c8d08c75a",
      "original_line" : 83,
      "original_position" : 83,
      "original_start_line" : 82,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 83,
      "pull_request_review_id" : 724846853,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 82,
      "start_side" : "RIGHT",
      "updated_at" : "2021-08-07T21:28:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679696",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679774"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679774"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nack this wastes memory with packing, will update comment though",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-08-07T21:29:47Z",
      "diff_hunk" : "@@ -160,9 +160,14 @@ struct PrecomputedTransactionData\n     uint256 m_outputs_single_hash;\n     uint256 m_spent_amounts_single_hash;\n     uint256 m_spent_scripts_single_hash;\n+    uint256 m_scriptSigs_single_hash;\n+    uint256 m_standard_template_single_hash;\n     //! Whether the 5 fields above are initialized.\n     bool m_bip341_taproot_ready = false;\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679774",
      "id" : 684679774,
      "in_reply_to_id" : 684145628,
      "line" : 167,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY3OTc3NA==",
      "original_commit_id" : "4c68aab5ee52f58709fe9043e640d13f89596db0",
      "original_line" : 167,
      "original_position" : 8,
      "original_start_line" : 163,
      "path" : "src/script/interpreter.h",
      "position" : 19,
      "pull_request_review_id" : 724846881,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 163,
      "start_side" : "RIGHT",
      "updated_at" : "2021-08-07T21:29:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679774",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679794"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679794"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "will do -- that might also be a new thing.",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-08-07T21:30:17Z",
      "diff_hunk" : "@@ -91,6 +91,13 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1628640000; // August 11th, 2021\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 709632; // Approximately November 12th, 2021\n \n+        // Deployment of CTV (BIP 119)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684679794",
      "id" : 684679794,
      "in_reply_to_id" : 684142697,
      "line" : 94,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY3OTc5NA==",
      "original_commit_id" : "b560a59b1db7ca8fcdca2ea7722cf7cdbb004320",
      "original_line" : 94,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 4,
      "pull_request_review_id" : 724846898,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-07T21:30:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684679794",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684938546"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684938546"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "yeah that works too. could also just move the comment up",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-08-09T06:20:51Z",
      "diff_hunk" : "@@ -160,9 +160,14 @@ struct PrecomputedTransactionData\n     uint256 m_outputs_single_hash;\n     uint256 m_spent_amounts_single_hash;\n     uint256 m_spent_scripts_single_hash;\n+    uint256 m_scriptSigs_single_hash;\n+    uint256 m_standard_template_single_hash;\n     //! Whether the 5 fields above are initialized.\n     bool m_bip341_taproot_ready = false;\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684938546",
      "id" : 684938546,
      "in_reply_to_id" : 684145628,
      "line" : 167,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDkzODU0Ng==",
      "original_commit_id" : "4c68aab5ee52f58709fe9043e640d13f89596db0",
      "original_line" : 167,
      "original_position" : 8,
      "original_start_line" : 163,
      "path" : "src/script/interpreter.h",
      "position" : 19,
      "pull_request_review_id" : 725049507,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 163,
      "start_side" : "RIGHT",
      "updated_at" : "2021-08-09T06:21:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684938546",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684939143"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684939143"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "yeah there's definitely lots of new stuff to use :)",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-08-09T06:21:36Z",
      "diff_hunk" : "@@ -0,0 +1,484 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.authproxy import JSONRPCException\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_HASH160, OP_EQUAL, hash160, taproot_construct\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def p2sh_helper(script):\n+    return CScript(bytes([OP_HASH160, 0x14]) + hash160(script) + bytes([OP_EQUAL]))\n+def random_p2sh():\n+    return p2sh_helper(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684939143",
      "id" : 684939143,
      "in_reply_to_id" : 684149776,
      "line" : 83,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDkzOTE0Mw==",
      "original_commit_id" : "92c34e2fa753d1c0a6076446f62ab77c8d08c75a",
      "original_line" : 83,
      "original_position" : 83,
      "original_start_line" : 82,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 83,
      "pull_request_review_id" : 725049850,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 82,
      "start_side" : "RIGHT",
      "updated_at" : "2021-08-09T06:21:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684939143",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684939224"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684939224"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "squash",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-08-09T06:21:53Z",
      "diff_hunk" : "@@ -875,7 +875,6 @@\n \n [\"Ensure 100% coverage of discouraged NOPS\"],\n [\"1\", \"NOP1\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP4\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r684939224",
      "id" : 684939224,
      "in_reply_to_id" : 684262675,
      "line" : 878,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDkzOTIyNA==",
      "original_commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "original_line" : 878,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/test/data/script_tests.json",
      "position" : 4,
      "pull_request_review_id" : 725049968,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-09T06:21:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684939224",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r700700061"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/700700061"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "i'm adding a new commit which fully packs, reorders, and improves the docs here.",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-09-02T02:37:17Z",
      "diff_hunk" : "@@ -160,9 +160,14 @@ struct PrecomputedTransactionData\n     uint256 m_outputs_single_hash;\n     uint256 m_spent_amounts_single_hash;\n     uint256 m_spent_scripts_single_hash;\n+    uint256 m_scriptSigs_single_hash;\n+    uint256 m_standard_template_single_hash;\n     //! Whether the 5 fields above are initialized.\n     bool m_bip341_taproot_ready = false;\n ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r700700061",
      "id" : 700700061,
      "in_reply_to_id" : 684145628,
      "line" : 167,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMDcwMDA2MQ==",
      "original_commit_id" : "4c68aab5ee52f58709fe9043e640d13f89596db0",
      "original_line" : 167,
      "original_position" : 8,
      "original_start_line" : 163,
      "path" : "src/script/interpreter.h",
      "position" : 19,
      "pull_request_review_id" : 744554694,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 163,
      "start_side" : "RIGHT",
      "updated_at" : "2021-09-02T02:37:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/700700061",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701305405"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701305405"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If the flag is not  enabled, we currently do not treat it as a NOP4 (e.g., discouraged). Will patch this shortly.",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-09-02T17:56:03Z",
      "diff_hunk" : "@@ -616,7 +616,32 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_STANDARD_TEMPLATE)) break;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701305405",
      "id" : 701305405,
      "line" : 622,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTMwNTQwNQ==",
      "original_commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "original_line" : 622,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 8,
      "pull_request_review_id" : 745363630,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-02T17:56:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701305405",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701308676"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701308676"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "referencing https://github.com/bitcoin/bitcoin/pull/6124/files it looks like it would be proper to discourage historically.",
      "commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "created_at" : "2021-09-02T18:00:42Z",
      "diff_hunk" : "@@ -616,7 +616,32 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_STANDARD_TEMPLATE)) break;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701308676",
      "id" : 701308676,
      "in_reply_to_id" : 701305405,
      "line" : 622,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTMwODY3Ng==",
      "original_commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "original_line" : 622,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 8,
      "pull_request_review_id" : 745367912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-02T18:00:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701308676",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701806626"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701806626"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Oh, I think I see what's causing your error in #22865. You don't need to fail on `SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS` now that you've repurposed this NOP.",
      "commit_id" : "7b225f4b844fd69f298818a59ff8a4fd83ecd959",
      "created_at" : "2021-09-03T11:10:46Z",
      "diff_hunk" : "@@ -616,7 +616,36 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH)) {\n+                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701806626",
      "id" : 701806626,
      "line" : 623,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMTgwNjYyNg==",
      "original_commit_id" : "7b225f4b844fd69f298818a59ff8a4fd83ecd959",
      "original_line" : 623,
      "original_position" : 9,
      "original_start_line" : 622,
      "path" : "src/script/interpreter.cpp",
      "position" : 9,
      "pull_request_review_id" : 745991773,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 622,
      "start_side" : "RIGHT",
      "updated_at" : "2021-09-03T11:11:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/701806626",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r702007973"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702007973"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is actually a new line I added -- it's required for correctness if this is to be merged/released before setting release params. https://github.com/bitcoin/bitcoin/pull/21702#discussion_r701305405\r\n\r\nHowever, it is not the reason there is a problem. It is also a problem later on where !=32 byte arguments are upgradable too.",
      "commit_id" : "5a22e492e63ef3c6bc2b94b8655ff2a4c54ae8fe",
      "created_at" : "2021-09-03T15:56:23Z",
      "diff_hunk" : "@@ -616,7 +616,36 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH)) {\n+                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r702007973",
      "id" : 702007973,
      "in_reply_to_id" : 701806626,
      "line" : 623,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwMjAwNzk3Mw==",
      "original_commit_id" : "7b225f4b844fd69f298818a59ff8a4fd83ecd959",
      "original_line" : 623,
      "original_position" : 9,
      "original_start_line" : 622,
      "path" : "src/script/interpreter.cpp",
      "position" : 9,
      "pull_request_review_id" : 746263548,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 622,
      "start_side" : "RIGHT",
      "updated_at" : "2021-09-03T15:56:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/702007973",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r706412690"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706412690"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "resolving as per https://github.com/bitcoin/bitcoin/issues/22865#issuecomment-914679373.\r\n\r\nthis approach, although mildly (temporarily) problematic, yields safer results until CTV is active.",
      "commit_id" : "e8e70edad24090c18eb0a71f4cf628a70ec5a3b0",
      "created_at" : "2021-09-10T19:13:16Z",
      "diff_hunk" : "@@ -616,7 +616,36 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH)) {\n+                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r706412690",
      "id" : 706412690,
      "in_reply_to_id" : 701806626,
      "line" : 623,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNjQxMjY5MA==",
      "original_commit_id" : "7b225f4b844fd69f298818a59ff8a4fd83ecd959",
      "original_line" : 623,
      "original_position" : 9,
      "original_start_line" : 622,
      "path" : "src/script/interpreter.cpp",
      "position" : 9,
      "pull_request_review_id" : 751720247,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 622,
      "start_side" : "RIGHT",
      "updated_at" : "2021-09-10T19:13:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706412690",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r706731741"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706731741"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "added tx_invalid.json, tx_valid.json based on the python tests. @Christewart too since he asked for this a while back.",
      "commit_id" : "0bfbc12381540441f7dcd310df5b270ef6cef150",
      "created_at" : "2021-09-12T02:38:48Z",
      "diff_hunk" : "@@ -63,6 +63,7 @@ static std::map<std::string, unsigned int> mapFlagNames = {\n     {std::string(\"DISCOURAGE_UPGRADABLE_PUBKEYTYPE\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE},\n     {std::string(\"DISCOURAGE_OP_SUCCESS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS},\n     {std::string(\"DISCOURAGE_UPGRADABLE_TAPROOT_VERSION\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION},\n+    {std::string(\"CHECKTEMPLATEVERIFY\"), (unsigned int) SCRIPT_VERIFY_STANDARD_TEMPLATE},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r706731741",
      "id" : 706731741,
      "in_reply_to_id" : 684235896,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNjczMTc0MQ==",
      "original_commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "original_line" : 66,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/test/transaction_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 752062678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-09-12T02:38:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706731741",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r706767672"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706767672"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "a238f69f0c1230785ddaae81edc710dec0131154",
      "created_at" : "2021-09-12T06:04:08Z",
      "diff_hunk" : "@@ -1402,6 +1427,18 @@ uint256 GetSpentAmountsSHA256(const std::vector<CTxOut>& outputs_spent)\n     CHashWriter ss(SER_GETHASH, 0);\n     for (const auto& txout : outputs_spent) {\n         ss << txout.nValue;\n+\n+    }\n+    return ss.GetSHA256();\n+}\n+\n+/** Compute the (single) SHA256 of the concatenation of all scriptSigs in a tx. */\n+template <class T>\n+uint256 GetScriptSigsSHA256(const T& txTo)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& in : txTo.vin) {\n+        ss << in.scriptSig;\n     }\n     return ss.GetSHA256();\n }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r706767672",
      "id" : 706767672,
      "in_reply_to_id" : 684223877,
      "line" : 1448,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDcwNjc2NzY3Mg==",
      "original_commit_id" : "04af84316aa43a8fdc58b36811c07ee796ce0e39",
      "original_line" : 1448,
      "original_position" : 52,
      "original_start_line" : 1436,
      "path" : "src/script/interpreter.cpp",
      "position" : 56,
      "pull_request_review_id" : 752095713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 1440,
      "start_side" : "RIGHT",
      "updated_at" : "2021-09-12T06:04:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/706767672",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, debug build/tests clean/green, the code looks pretty good on first overlook, and the last push (`git diff 4a457d4 118ff53`) fixed the CI integer sanitizer failure.",
      "created_at" : "2021-09-13T10:31:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-918060312",
      "id" : 918060312,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII5842uH0Y",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-13T10:31:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/918060312",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Concept ACK  based on this being part of a bigger [picture](https://rubin.io/blog/2021/07/02/covenants/) , and as a solid stand alone. will review details and code shortly. \r\n\r\nACK: reviewed implementation code, and deployment code, as a sanity check against objective and text of bip119. reviewed test code, compiled fork, ran tests, tested with regtest.   ",
      "created_at" : "2021-10-07T19:15:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-938082090",
      "id" : 938082090,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII58436f8q",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/938082090/reactions"
      },
      "updated_at" : "2021-10-12T20:33:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/938082090",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/777326?v=4",
         "events_url" : "https://api.github.com/users/jaybny/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jaybny/followers",
         "following_url" : "https://api.github.com/users/jaybny/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jaybny/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jaybny",
         "id" : 777326,
         "login" : "jaybny",
         "node_id" : "MDQ6VXNlcjc3NzMyNg==",
         "organizations_url" : "https://api.github.com/users/jaybny/orgs",
         "received_events_url" : "https://api.github.com/users/jaybny/received_events",
         "repos_url" : "https://api.github.com/users/jaybny/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jaybny/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jaybny/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jaybny"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r726097280"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726097280"
         }
      },
      "author_association" : "NONE",
      "body" : "is there a reason why we use bit 5 and not 3?  ",
      "commit_id" : "118ff53bab10120943d987b4d3fb404c76922765",
      "created_at" : "2021-10-11T13:01:53Z",
      "diff_hunk" : "@@ -91,6 +91,13 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1628640000; // August 11th, 2021\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 709632; // Approximately November 12th, 2021\n \n+        // Deployment of CTV (BIP 119)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].bit = 5;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r726097280",
      "id" : 726097280,
      "line" : 95,
      "node_id" : "PRRC_kwDOABII584rR12A",
      "original_commit_id" : "118ff53bab10120943d987b4d3fb404c76922765",
      "original_line" : 95,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 5,
      "pull_request_review_id" : 776207147,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726097280/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-11T13:01:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726097280",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/777326?v=4",
         "events_url" : "https://api.github.com/users/jaybny/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jaybny/followers",
         "following_url" : "https://api.github.com/users/jaybny/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jaybny/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jaybny",
         "id" : 777326,
         "login" : "jaybny",
         "node_id" : "MDQ6VXNlcjc3NzMyNg==",
         "organizations_url" : "https://api.github.com/users/jaybny/orgs",
         "received_events_url" : "https://api.github.com/users/jaybny/received_events",
         "repos_url" : "https://api.github.com/users/jaybny/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jaybny/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jaybny/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jaybny"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Posted [this](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-October/019535.html) to the mailing list with my thoughts on how soft fork PRs should be treated and broader considerations before merging.\r\n\r\nI am a long term Concept ACK on enabling covenant functionality for the vault use case when there is community consensus that it should be enabled. My personal view currently is I don't yet feel comfortable that that functionality should definitely be enabled by OP_CTV at the expense of or in addition to alternative proposals although OP_CTV is clearly a strong candidate. Until there is community consensus that this should definitely be included in the next soft fork I'd rather this PR was marked as draft let alone marked as high priority. But I understand that this PR is a high priority for the PR author.",
      "created_at" : "2021-10-11T13:28:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-940033339",
      "id" : 940033339,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII5844B8U7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940033339/reactions"
      },
      "updated_at" : "2021-10-11T13:28:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940033339",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r726391808"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726391808"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "no reason, i just picked a bit that i didn't think would conflict with anything else.",
      "commit_id" : "118ff53bab10120943d987b4d3fb404c76922765",
      "created_at" : "2021-10-11T17:17:07Z",
      "diff_hunk" : "@@ -91,6 +91,13 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1628640000; // August 11th, 2021\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].min_activation_height = 709632; // Approximately November 12th, 2021\n \n+        // Deployment of CTV (BIP 119)\n+        consensus.vDeployments[Consensus::DEPLOYMENT_CHECKTEMPLATEVERIFY].bit = 5;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r726391808",
      "id" : 726391808,
      "in_reply_to_id" : 726097280,
      "line" : 95,
      "node_id" : "PRRC_kwDOABII584rS9wA",
      "original_commit_id" : "118ff53bab10120943d987b4d3fb404c76922765",
      "original_line" : 95,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/chainparams.cpp",
      "position" : 5,
      "pull_request_review_id" : 776514212,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726391808/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-11T17:17:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726391808",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Concept ACK.\r\n\r\nThis represents the least controversial change that could give us useful covenents in Bitcoin. The properties of non-recursion and strict enumerability should be enough to gain larger support and still give us the ability to create useful output constraints. While I generally favor something more general than what is presented here, they are not mutually exclusive and any risks incurred by users of OP_CTV are fairly easy to understand which should make it easier to come to consensus on. Further, this will broadly demonstrate the utility of covenants and will help illuminate the desirable properties in a more general solution.\r\n\r\nI have not yet reviewed the specific code implementing it.",
      "created_at" : "2021-11-08T23:26:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-963667962",
      "id" : 963667962,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII5845cGf6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/963667962/reactions"
      },
      "updated_at" : "2021-11-08T23:26:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/963667962",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4033651?v=4",
         "events_url" : "https://api.github.com/users/ProofOfKeags/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ProofOfKeags/followers",
         "following_url" : "https://api.github.com/users/ProofOfKeags/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ProofOfKeags/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ProofOfKeags",
         "id" : 4033651,
         "login" : "ProofOfKeags",
         "node_id" : "MDQ6VXNlcjQwMzM2NTE=",
         "organizations_url" : "https://api.github.com/users/ProofOfKeags/orgs",
         "received_events_url" : "https://api.github.com/users/ProofOfKeags/received_events",
         "repos_url" : "https://api.github.com/users/ProofOfKeags/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ProofOfKeags/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ProofOfKeags/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ProofOfKeags"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r751308309"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751308309"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: accidental newline added?",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2021-11-17T14:41:56Z",
      "diff_hunk" : "@@ -1402,6 +1402,18 @@ uint256 GetSpentAmountsSHA256(const std::vector<CTxOut>& outputs_spent)\n     CHashWriter ss(SER_GETHASH, 0);\n     for (const auto& txout : outputs_spent) {\n         ss << txout.nValue;\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r751308309",
      "id" : 751308309,
      "line" : 1412,
      "node_id" : "PRRC_kwDOABII584syA4V",
      "original_commit_id" : "544b117caa857786099adf779214a5390dddfa7f",
      "original_line" : 1412,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 45,
      "pull_request_review_id" : 808682655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751308309/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-26T01:05:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751308309",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r751316138"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751316138"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "can be `static` instead of this comment?",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2021-11-17T14:49:59Z",
      "diff_hunk" : "@@ -1416,9 +1428,52 @@ uint256 GetSpentScriptsSHA256(const std::vector<CTxOut>& outputs_spent)\n     return ss.GetSHA256();\n }\n \n+/* Not Exported, just convenience */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r751316138",
      "id" : 751316138,
      "line" : 1438,
      "node_id" : "PRRC_kwDOABII584syCyq",
      "original_commit_id" : "544b117caa857786099adf779214a5390dddfa7f",
      "original_line" : 1438,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 64,
      "pull_request_review_id" : 808682655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751316138/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-26T01:05:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751316138",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r751322160"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751322160"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: accidental newline added?",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2021-11-17T14:55:47Z",
      "diff_hunk" : "@@ -1584,8 +1639,10 @@ bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata\n \n     hash_out = ss.GetSHA256();\n     return true;\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r751322160",
      "id" : 751322160,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584syEQw",
      "original_commit_id" : "544b117caa857786099adf779214a5390dddfa7f",
      "original_line" : 1689,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 808682655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751322160/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-26T01:05:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751322160",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r751322257"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751322257"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: accidental newline added?",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2021-11-17T14:55:51Z",
      "diff_hunk" : "@@ -1584,8 +1639,10 @@ bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata\n \n     hash_out = ss.GetSHA256();\n     return true;\n+\n }\n \n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r751322257",
      "id" : 751322257,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584syESR",
      "original_commit_id" : "544b117caa857786099adf779214a5390dddfa7f",
      "original_line" : 1692,
      "original_position" : 79,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 808682655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751322257/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-26T01:05:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751322257",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r751325832"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751325832"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "can be `static`?",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2021-11-17T14:59:29Z",
      "diff_hunk" : "@@ -1416,9 +1428,52 @@ uint256 GetSpentScriptsSHA256(const std::vector<CTxOut>& outputs_spent)\n     return ss.GetSHA256();\n }\n \n+/* Not Exported, just convenience */\n+template<typename TxType>\n+uint256 GetDefaultCheckTemplateVerifyHashWithScript(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n+                                const uint256& scriptSig_hash, const uint32_t input_index) {\n+    auto h = CHashWriter(SER_GETHASH, 0)\n+        << tx.nVersion\n+        << tx.nLockTime\n+        << scriptSig_hash\n+        << uint32_t(tx.vin.size())\n+        << sequences_hash\n+        << uint32_t(tx.vout.size())\n+        << outputs_hash\n+        << input_index;\n+    return h.GetSHA256();\n+}\n+\n+template<typename TxType>\n+uint256 GetDefaultCheckTemplateVerifyHashEmptyScript(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r751325832",
      "id" : 751325832,
      "line" : 1455,
      "node_id" : "PRRC_kwDOABII584syFKI",
      "original_commit_id" : "544b117caa857786099adf779214a5390dddfa7f",
      "original_line" : 1455,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 81,
      "pull_request_review_id" : 808682655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751325832/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-26T01:05:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/751325832",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "as an aside. importance of merging this bip, is that it shows that Bitcoin accepts solid scientific enhancements from legitimate programmers , even when other devs may have different ideas and paths for the same utility \r\n++",
      "created_at" : "2021-11-23T03:41:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-976141608",
      "id" : 976141608,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII5846Lr0o",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/976141608/reactions"
      },
      "updated_at" : "2021-11-23T03:41:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/976141608",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/777326?v=4",
         "events_url" : "https://api.github.com/users/jaybny/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jaybny/followers",
         "following_url" : "https://api.github.com/users/jaybny/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jaybny/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jaybny",
         "id" : 777326,
         "login" : "jaybny",
         "node_id" : "MDQ6VXNlcjc3NzMyNg==",
         "organizations_url" : "https://api.github.com/users/jaybny/orgs",
         "received_events_url" : "https://api.github.com/users/jaybny/received_events",
         "repos_url" : "https://api.github.com/users/jaybny/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jaybny/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jaybny/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jaybny"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-11-25T07:43:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-978915382",
      "id" : 978915382,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII5846WRA2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/978915382/reactions"
      },
      "updated_at" : "2021-11-25T07:43:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/978915382",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This has been needing rebase for several weeks now, so I've removed it from high-prio for now. (Can be added back after rebase)",
      "created_at" : "2021-12-16T19:13:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-996102975",
      "id" : 996102975,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII5847X1M_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/996102975/reactions"
      },
      "updated_at" : "2021-12-16T19:13:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/996102975",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "rebased, please re-add. sorry i've been juggling a lot of priorities working on the blog series... with the hopes of attracting some more review!",
      "created_at" : "2021-12-18T02:38:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-997128979",
      "id" : 997128979,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII5847bvsT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997128979/reactions"
      },
      "updated_at" : "2021-12-18T02:38:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997128979",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777136919"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777136919"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This gives me a compiler warning: \r\n`catching polymorphic type âclass std::runtime_errorâ by value [-Wcatch-value=]`\r\n\r\nSuggest to use\r\n`catch (const std::runtime_error&)`\r\n",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-01T20:39:24Z",
      "diff_hunk" : "@@ -297,11 +297,41 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n         std::string strTest = test.write();\n         if (test[0].isArray())\n         {\n-            if (test.size() != 3 || !test[1].isStr() || !test[2].isStr())\n+            const bool mandatory_fields_present = test.size() >= 3 && test[1].isStr() && test[2].isStr();\n+            const bool one_by_one_fills = test.size() >= 4 ? test[3].isArray() : true;\n+            const bool max_arg_count = test.size() <= 4;\n+            if (!mandatory_fields_present || !max_arg_count || !one_by_one_fills)\n             {\n                 BOOST_ERROR(\"Bad test: \" << strTest);\n                 continue;\n             }\n+            std::vector<std::pair<unsigned int, unsigned int>> excluded_flag_settings;\n+            if (test.size() >= 4) {\n+                try {\n+                    const UniValue& fills = test[3].get_array();\n+                    for (unsigned int i = 0; i < fills.size(); ++i) {\n+                        const UniValue& fill = fills[i].get_obj();\n+                        const UniValue if_unset = fill[\"if_unset\"].get_array();\n+                        const UniValue then_unset = fill[\"then_unset\"].get_array();\n+                        excluded_flag_settings.push_back(std::make_pair(0, 0));\n+                        unsigned int& if_set_flags = excluded_flag_settings.back().first;\n+                        unsigned int& then_set_flags = excluded_flag_settings.back().second;\n+                        for (unsigned int j = 0; j < if_unset.size(); ++j) {\n+                            const auto& flag = mapFlagNames.find(if_unset[j].get_str());\n+                            if (flag == mapFlagNames.end()) BOOST_ERROR(\"Unknown Flag: \" << if_unset[j].get_str());\n+                            if_set_flags |= flag->second;\n+                        }\n+                        for (unsigned int j = 0; j < then_unset.size(); ++j) {\n+                            const auto& flag = mapFlagNames.find(then_unset[j].get_str());\n+                            if (flag == mapFlagNames.end()) BOOST_ERROR(\"Unknown Flag: \" << then_unset[j].get_str());\n+                            then_set_flags |= flag->second;\n+                        }\n+\n+                    }\n+                } catch (std::runtime_error e) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777136919",
      "id" : 777136919,
      "line" : 332,
      "node_id" : "PRRC_kwDOABII584uUisX",
      "original_commit_id" : "0162cdd5877c851816d7451ef2e13bb3ea58ffef",
      "original_line" : 331,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 36,
      "pull_request_review_id" : 842359526,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777136919/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-02T23:32:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777136919",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777152070"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777152070"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It is no longer clear what \"both\" in the comment refers to.",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-02T00:43:48Z",
      "diff_hunk" : "@@ -1536,11 +1538,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777152070",
      "id" : 777152070,
      "line" : 1544,
      "node_id" : "PRRC_kwDOABII584uUmZG",
      "original_commit_id" : "b6d2ba82fd55ce83aac1f8d910781a3166abb9b9",
      "original_line" : 1542,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 15,
      "pull_request_review_id" : 842359526,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777152070/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-02T23:32:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777152070",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777153014"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777153014"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : ">It'd be also possible to just never cache CTV, if the extra work seems not worth it. \r\n\r\nNot sure if I understand this correctly, but in the way it is done, it seems that the extra hashes that only CTV needs are precomputed for each transaction, but only used if the tx makes use of OP_CTV. On the other hand, if it is used, the caching saves us computing some hashes. Do you have an estimate for the global percentage of transactions making use of CTV needed for caching to be an efficiency net gain instead of a efficiency loss? \r\n\r\nI'd guess that the percentage that would be observed in the wild would be a rather small number even in optimistic scenarios, because OP_CTV is something only needed for specialised use cases as outlined in the BIP?! ",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-02T01:00:51Z",
      "diff_hunk" : "@@ -1433,6 +1513,9 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n     // Determine which precomputation-impacting features this transaction uses.\n     bool uses_bip143_segwit = false;\n     bool uses_bip341_taproot = false;\n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777153014",
      "id" : 777153014,
      "in_reply_to_id" : 616625177,
      "line" : 1520,
      "node_id" : "PRRC_kwDOABII584uUmn2",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 1520,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 117,
      "pull_request_review_id" : 842359526,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777153014/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-02T23:32:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777153014",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777261862"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777261862"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Probably a matter of taste, but `std::none_of` would be an alternative I find easier to read (also applies to `GetDefaultCheckTemplateVerifyHash()` ).",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-02T22:56:18Z",
      "diff_hunk" : "@@ -1536,11 +1538,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777261862",
      "id" : 777261862,
      "line" : 1550,
      "node_id" : "PRRC_kwDOABII584uVBMm",
      "original_commit_id" : "b6d2ba82fd55ce83aac1f8d910781a3166abb9b9",
      "original_line" : 1548,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 21,
      "pull_request_review_id" : 842359526,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777261862/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-02T23:32:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777261862",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777262213"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777262213"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> If the cache is disabled (which making ready = false does), then the cache isn't used.\r\n\r\nJust observing that this does not apply anymore in the current version, because Commit 4c823859fc2e46606d13eef8d21ce7aa1fe3edea (\"Use HandleMissingData for unexpected missing precomputed data\" ) introduces a strict dependence on the cached data, resulting in an assert if the data wasn't cached.",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-02T23:01:37Z",
      "diff_hunk" : "@@ -1452,11 +1534,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();\n+        if (skip_scriptSigs) {\n+            // 0 hash used to signal if we should skip scriptSigs\n+            // when re-computing for different indexes.\n+            m_scriptSigs_single_hash = uint256{};\n+            // TODO: Cache midstate?\n+            m_standard_template_single_hash = GetStandardTemplateHashEmptyScript(txTo, m_outputs_single_hash, m_sequences_single_hash, 0);\n+        } else {\n+            m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\n+            m_standard_template_single_hash = GetStandardTemplateHashWithScript(txTo, m_outputs_single_hash, m_sequences_single_hash, m_scriptSigs_single_hash, 0);\n+        }\n+        m_bip119_ctv_ready = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777262213",
      "id" : 777262213,
      "in_reply_to_id" : 668211774,
      "line" : 1561,
      "node_id" : "PRRC_kwDOABII584uVBSF",
      "original_commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "original_line" : 1561,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 144,
      "pull_request_review_id" : 842359526,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777262213/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-02T23:32:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777262213",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777263028"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777263028"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This section duplicates large parts of the logic from `GetDefaultCheckTemplateVerifyHash()`. Would it be possible to have this logic in one place?\r\nAlso, after making reliance on the cache obligatory in a later commit, it seems that `GetDefaultCheckTemplateVerifyHash` is only used in a test anymore (`ctvhash_tests`), which in my opinion at least deserves a comment.",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-02T23:12:42Z",
      "diff_hunk" : "@@ -1536,11 +1538,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777263028",
      "id" : 777263028,
      "line" : 1549,
      "node_id" : "PRRC_kwDOABII584uVBe0",
      "original_commit_id" : "b6d2ba82fd55ce83aac1f8d910781a3166abb9b9",
      "original_line" : 1547,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 20,
      "pull_request_review_id" : 842359526,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777263028/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-02T23:32:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777263028",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777270266"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777270266"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "will fix in the base PRs for transaction_tests.cpp",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-03T00:55:20Z",
      "diff_hunk" : "@@ -297,11 +297,41 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n         std::string strTest = test.write();\n         if (test[0].isArray())\n         {\n-            if (test.size() != 3 || !test[1].isStr() || !test[2].isStr())\n+            const bool mandatory_fields_present = test.size() >= 3 && test[1].isStr() && test[2].isStr();\n+            const bool one_by_one_fills = test.size() >= 4 ? test[3].isArray() : true;\n+            const bool max_arg_count = test.size() <= 4;\n+            if (!mandatory_fields_present || !max_arg_count || !one_by_one_fills)\n             {\n                 BOOST_ERROR(\"Bad test: \" << strTest);\n                 continue;\n             }\n+            std::vector<std::pair<unsigned int, unsigned int>> excluded_flag_settings;\n+            if (test.size() >= 4) {\n+                try {\n+                    const UniValue& fills = test[3].get_array();\n+                    for (unsigned int i = 0; i < fills.size(); ++i) {\n+                        const UniValue& fill = fills[i].get_obj();\n+                        const UniValue if_unset = fill[\"if_unset\"].get_array();\n+                        const UniValue then_unset = fill[\"then_unset\"].get_array();\n+                        excluded_flag_settings.push_back(std::make_pair(0, 0));\n+                        unsigned int& if_set_flags = excluded_flag_settings.back().first;\n+                        unsigned int& then_set_flags = excluded_flag_settings.back().second;\n+                        for (unsigned int j = 0; j < if_unset.size(); ++j) {\n+                            const auto& flag = mapFlagNames.find(if_unset[j].get_str());\n+                            if (flag == mapFlagNames.end()) BOOST_ERROR(\"Unknown Flag: \" << if_unset[j].get_str());\n+                            if_set_flags |= flag->second;\n+                        }\n+                        for (unsigned int j = 0; j < then_unset.size(); ++j) {\n+                            const auto& flag = mapFlagNames.find(then_unset[j].get_str());\n+                            if (flag == mapFlagNames.end()) BOOST_ERROR(\"Unknown Flag: \" << then_unset[j].get_str());\n+                            then_set_flags |= flag->second;\n+                        }\n+\n+                    }\n+                } catch (std::runtime_error e) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777270266",
      "id" : 777270266,
      "in_reply_to_id" : 777136919,
      "line" : 332,
      "node_id" : "PRRC_kwDOABII584uVDP6",
      "original_commit_id" : "0162cdd5877c851816d7451ef2e13bb3ea58ffef",
      "original_line" : 331,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 36,
      "pull_request_review_id" : 842455448,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777270266/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-03T00:55:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777270266",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777270363"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777270363"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "maybe just nix this comment entirely?",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-03T00:56:19Z",
      "diff_hunk" : "@@ -1536,11 +1538,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777270363",
      "id" : 777270363,
      "in_reply_to_id" : 777152070,
      "line" : 1544,
      "node_id" : "PRRC_kwDOABII584uVDRb",
      "original_commit_id" : "b6d2ba82fd55ce83aac1f8d910781a3166abb9b9",
      "original_line" : 1542,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 15,
      "pull_request_review_id" : 842455499,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777270363/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-03T00:56:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777270363",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777270630"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777270630"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "that's probably fine, yes. If i touch it, will change.\r\n\r\ncpp ref says:\r\n\r\n```c++\r\ntemplate< class InputIt, class UnaryPredicate >\r\nconstexpr bool none_of(InputIt first, InputIt last, UnaryPredicate p)\r\n{\r\n    return std::find_if(first, last, p) == last;\r\n}\r\n```",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-03T01:00:21Z",
      "diff_hunk" : "@@ -1536,11 +1538,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777270630",
      "id" : 777270630,
      "in_reply_to_id" : 777261862,
      "line" : 1550,
      "node_id" : "PRRC_kwDOABII584uVDVm",
      "original_commit_id" : "b6d2ba82fd55ce83aac1f8d910781a3166abb9b9",
      "original_line" : 1548,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 21,
      "pull_request_review_id" : 842455736,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777270630/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-03T01:00:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777270630",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777270905"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777270905"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "great point and solid review note, was a part of rebasing this onto the new HandleMissingData check, which changed this stuff to errors to be missing across the codebase.\r\n\r\nNote that it's still possible the CTV hash is not cached, but has to be computed from the other cached parts.",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-03T01:03:50Z",
      "diff_hunk" : "@@ -1452,11 +1534,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();\n+        if (skip_scriptSigs) {\n+            // 0 hash used to signal if we should skip scriptSigs\n+            // when re-computing for different indexes.\n+            m_scriptSigs_single_hash = uint256{};\n+            // TODO: Cache midstate?\n+            m_standard_template_single_hash = GetStandardTemplateHashEmptyScript(txTo, m_outputs_single_hash, m_sequences_single_hash, 0);\n+        } else {\n+            m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\n+            m_standard_template_single_hash = GetStandardTemplateHashWithScript(txTo, m_outputs_single_hash, m_sequences_single_hash, m_scriptSigs_single_hash, 0);\n+        }\n+        m_bip119_ctv_ready = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777270905",
      "id" : 777270905,
      "in_reply_to_id" : 668211774,
      "line" : 1561,
      "node_id" : "PRRC_kwDOABII584uVDZ5",
      "original_commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "original_line" : 1561,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 144,
      "pull_request_review_id" : 842455929,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777270905/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-03T01:03:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777270905",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777270979"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777270979"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "this is a good point. I guess it's a question of if it's better to have the functionality available as a part of the API, or if it can be moved to a test.",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-03T01:04:51Z",
      "diff_hunk" : "@@ -1536,11 +1538,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777270979",
      "id" : 777270979,
      "in_reply_to_id" : 777263028,
      "line" : 1549,
      "node_id" : "PRRC_kwDOABII584uVDbD",
      "original_commit_id" : "b6d2ba82fd55ce83aac1f8d910781a3166abb9b9",
      "original_line" : 1547,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 20,
      "pull_request_review_id" : 842455997,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777270979/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-03T01:04:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777270979",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777271252"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777271252"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "the main reason to cache the hashing it to prevent scripts like `<H> CTV CTV CTV.... CTV` from being able to cause N^2 hashing to occur. Fixed hashing (like if the input is at input one, not the 'usual' 0), of e.g. 80 bytes (idk offhand how long ctv digest is) is not an issue as it's like script: `<v> HASH256 HASH256 HASH256 HASH256...`, but it is a problem if you have to hash an entire (big) tx.\r\n\r\nhence the mention of quadratic hashing above. Caching is required for \"safety\", not performance.",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-03T01:08:58Z",
      "diff_hunk" : "@@ -1433,6 +1513,9 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n     // Determine which precomputation-impacting features this transaction uses.\n     bool uses_bip143_segwit = false;\n     bool uses_bip341_taproot = false;\n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777271252",
      "id" : 777271252,
      "in_reply_to_id" : 616625177,
      "line" : 1520,
      "node_id" : "PRRC_kwDOABII584uVDfU",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 1520,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 117,
      "pull_request_review_id" : 842456219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777271252/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-03T01:08:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777271252",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thank you Martin for your review and careful eye. I think there are a couple good cleanups that I will take care of either here or in follow up (if there's no other reason to touch those files perhaps).\r\n\r\nif you did review the test modifications https://github.com/bitcoin/bitcoin/pull/22954 and https://github.com/bitcoin/bitcoin/pull/22876 are standalone.",
      "created_at" : "2022-01-03T01:11:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1003818074",
      "id" : 1003818074,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII58471Qxa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1003818074/reactions"
      },
      "updated_at" : "2022-01-03T01:11:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1003818074",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777271670"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777271670"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "btw if curious, https://github.com/bitcoin/bitcoin/pull/21330\r\n\r\nit's mostly for signing analysis, not consensus, that missing data paths were every supported. the referenced pr makes it a bit more clean.",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-03T01:14:07Z",
      "diff_hunk" : "@@ -1452,11 +1534,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();\n+        if (skip_scriptSigs) {\n+            // 0 hash used to signal if we should skip scriptSigs\n+            // when re-computing for different indexes.\n+            m_scriptSigs_single_hash = uint256{};\n+            // TODO: Cache midstate?\n+            m_standard_template_single_hash = GetStandardTemplateHashEmptyScript(txTo, m_outputs_single_hash, m_sequences_single_hash, 0);\n+        } else {\n+            m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\n+            m_standard_template_single_hash = GetStandardTemplateHashWithScript(txTo, m_outputs_single_hash, m_sequences_single_hash, m_scriptSigs_single_hash, 0);\n+        }\n+        m_bip119_ctv_ready = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777271670",
      "id" : 777271670,
      "in_reply_to_id" : 668211774,
      "line" : 1561,
      "node_id" : "PRRC_kwDOABII584uVDl2",
      "original_commit_id" : "b04c35c8506160e95a965382956fa5b68d139b29",
      "original_line" : 1561,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 144,
      "pull_request_review_id" : 842456561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777271670/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-03T01:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777271670",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777298983"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777298983"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in commit 51f0bdd36328f1c9334ad455a56f7cb47d76abda\r\n\r\nnit unneeded spacing",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-03T05:32:30Z",
      "diff_hunk" : "@@ -1584,8 +1639,10 @@ bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata\n \n     hash_out = ss.GetSHA256();\n     return true;\n+\n }\n \n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777298983",
      "id" : 777298983,
      "line" : 1692,
      "node_id" : "PRRC_kwDOABII584uVKQn",
      "original_commit_id" : "51f0bdd36328f1c9334ad455a56f7cb47d76abda",
      "original_line" : 1645,
      "original_position" : 79,
      "original_start_line" : 1642,
      "path" : "src/script/interpreter.cpp",
      "position" : 79,
      "pull_request_review_id" : 842486432,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777298983/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1689,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-03T05:44:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777298983",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777299565"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777299565"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "any reason to not use a `Span` here?",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-03T05:36:51Z",
      "diff_hunk" : "@@ -1860,6 +1860,15 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckDefaultCheckTemplateVerifyHash(const std::vector<unsigned char>& hash) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777299565",
      "id" : 777299565,
      "line" : 1911,
      "node_id" : "PRRC_kwDOABII584uVKZt",
      "original_commit_id" : "479b0c9c164437701d1a70e4026fc19902d56e14",
      "original_line" : 1864,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 5,
      "pull_request_review_id" : 842486432,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777299565/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-03T05:44:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777299565",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777299822"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777299822"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "this is also done in 51f0bdd36328f1c9334ad455a56f7cb47d76abda, should probably be made a function",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-03T05:38:30Z",
      "diff_hunk" : "@@ -1536,11 +1538,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777299822",
      "id" : 777299822,
      "line" : 1550,
      "node_id" : "PRRC_kwDOABII584uVKdu",
      "original_commit_id" : "b6d2ba82fd55ce83aac1f8d910781a3166abb9b9",
      "original_line" : 1548,
      "original_position" : 21,
      "original_start_line" : 1547,
      "path" : "src/script/interpreter.cpp",
      "position" : 21,
      "pull_request_review_id" : 842486432,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777299822/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1549,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-03T05:44:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777299822",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777301688"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777301688"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "i think it didn't exist when i coded this haha. a span would be fine if i touch it.",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-03T05:50:46Z",
      "diff_hunk" : "@@ -1860,6 +1860,15 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckDefaultCheckTemplateVerifyHash(const std::vector<unsigned char>& hash) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777301688",
      "id" : 777301688,
      "in_reply_to_id" : 777299565,
      "line" : 1911,
      "node_id" : "PRRC_kwDOABII584uVK64",
      "original_commit_id" : "479b0c9c164437701d1a70e4026fc19902d56e14",
      "original_line" : 1864,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 5,
      "pull_request_review_id" : 842489702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777301688/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-03T05:50:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777301688",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777302351"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777302351"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "i think 1645 is needed, 1642 could probaby go",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-03T05:55:08Z",
      "diff_hunk" : "@@ -1584,8 +1639,10 @@ bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata\n \n     hash_out = ss.GetSHA256();\n     return true;\n+\n }\n \n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777302351",
      "id" : 777302351,
      "in_reply_to_id" : 777298983,
      "line" : 1692,
      "node_id" : "PRRC_kwDOABII584uVLFP",
      "original_commit_id" : "51f0bdd36328f1c9334ad455a56f7cb47d76abda",
      "original_line" : 1645,
      "original_position" : 79,
      "original_start_line" : 1642,
      "path" : "src/script/interpreter.cpp",
      "position" : 79,
      "pull_request_review_id" : 842490501,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777302351/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1689,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-03T05:55:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777302351",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777302507"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777302507"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "hmm yeah. see https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777263028 this might be movable to a test since HandleMissing gets rid of one of the uses except for testing.",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-03T05:56:03Z",
      "diff_hunk" : "@@ -1536,11 +1538,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777302507",
      "id" : 777302507,
      "in_reply_to_id" : 777299822,
      "line" : 1550,
      "node_id" : "PRRC_kwDOABII584uVLHr",
      "original_commit_id" : "b6d2ba82fd55ce83aac1f8d910781a3166abb9b9",
      "original_line" : 1548,
      "original_position" : 21,
      "original_start_line" : 1547,
      "path" : "src/script/interpreter.cpp",
      "position" : 21,
      "pull_request_review_id" : 842490684,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777302507/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1549,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-03T05:56:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777302507",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777427588"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777427588"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah, changing it to \"all\" doesn't seem correct either.\r\n\r\nAs long as `uses_bip119_ctv=true` unconditionally, it's the same behavior - but I think it would be more in the spirit of the existing code to move the calculation of `m_scriptSigs_single_hash` and `m_standard_template_single_hash` out of this conditional to a conditional only dependent on `uses_bip119_ctv`, as is done for segwit-specific or taproot-specific hashes.",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-03T11:41:00Z",
      "diff_hunk" : "@@ -1536,11 +1538,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777427588",
      "id" : 777427588,
      "in_reply_to_id" : 777152070,
      "line" : 1544,
      "node_id" : "PRRC_kwDOABII584uVpqE",
      "original_commit_id" : "b6d2ba82fd55ce83aac1f8d910781a3166abb9b9",
      "original_line" : 1542,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 15,
      "pull_request_review_id" : 842662385,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777427588/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-03T11:41:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777427588",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777514172"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777514172"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\nfrom test_framework.blocktools import (\r\n    create_coinbase,\r\n    create_block,\r\n    add_witness_commitment,\r\n)\r\nfrom test_framework.messages import (\r\n    CTransaction,\r\n    CTxOut,\r\n    CTxIn,\r\n    CTxInWitness,\r\n    COutPoint,\r\n    COIN,\r\n    sha256,\r\n)\r\nfrom test_framework.p2p import P2PInterface\r\nfrom test_framework.script import (\r\n    CScript,\r\n    OP_TRUE,\r\n    OP_DEPTH,\r\n    OP_ENDIF,\r\n    OP_IF,\r\n    OP_CHECKTEMPLATEVERIFY,\r\n    OP_FALSE,\r\n    OP_DROP,\r\n    taproot_construct,\r\n)\r\nfrom test_framework.script_util import script_to_p2sh_script\r\nfrom test_framework.key import (\r\n    ECKey,\r\n    compute_xonly_pubkey,\r\n)\r\nfrom test_framework.test_framework import BitcoinTestFramework\r\nfrom test_framework.util import (\r\n    assert_equal,\r\n    assert_raises_rpc_error,\r\n)\r\nfrom test_framework.wallet import (\r\n    MiniWallet,\r\n    MiniWalletMode,\r\n)\r\n```\r\n\r\nI prefer this style as it's harder to later accidentally subtly amend an import later.\r\nSorting alphabetically may also be worthwhile, I haven't done here to make my suggestion easier to review!\r\nWould also match style of [feature_taproot.py.](https://github.com/bitcoin/bitcoin/blob/master/test/functional/feature_taproot.py#L7-L106)",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-03T14:38:55Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777514172",
      "id" : 777514172,
      "line" : 16,
      "node_id" : "PRRC_kwDOABII584uV-y8",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 16,
      "original_position" : 16,
      "original_start_line" : 8,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 16,
      "pull_request_review_id" : 842781613,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777514172/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 8,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-03T16:41:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777514172",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16821975?v=4",
         "events_url" : "https://api.github.com/users/DuncanBetts/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DuncanBetts/followers",
         "following_url" : "https://api.github.com/users/DuncanBetts/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DuncanBetts/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DuncanBetts",
         "id" : 16821975,
         "login" : "DuncanBetts",
         "node_id" : "MDQ6VXNlcjE2ODIxOTc1",
         "organizations_url" : "https://api.github.com/users/DuncanBetts/orgs",
         "received_events_url" : "https://api.github.com/users/DuncanBetts/received_events",
         "repos_url" : "https://api.github.com/users/DuncanBetts/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DuncanBetts/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DuncanBetts/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DuncanBetts"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777546122"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777546122"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\ndef template_hash_for_outputs(outputs, nIn=0, nVin=1, vin_override=None):\r\n    c = CTransaction()\r\n    c.nVersion = 2\r\n    c.vin = vin_override\r\n    if vin_override is None:\r\n        c.vin = [CTxIn()]*nVin\r\n    c.vout = outputs\r\n    return c.get_standard_template_hash(nIn)\r\ndef random_p2sh():\r\n    return script_to_p2sh_script(random_bytes(20))\r\ndef random_real_outputs_and_script(n):\r\n    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\r\n    script  = CScript([template_hash_for_outputs(outputs), OP_CHECKTEMPLATEVERIFY])\r\n    return outputs, script\r\n```\r\nDe-duplicating default parameters feels like a win for readability, and might avoid any later revision to the default being shadowed if both values are not altered. On the other hand, the existing code is perhaps more explicit. Just a suggestion :).",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-03T15:32:25Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777546122",
      "id" : 777546122,
      "line" : 40,
      "node_id" : "PRRC_kwDOABII584uWGmK",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 40,
      "original_position" : 40,
      "original_start_line" : 27,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 40,
      "pull_request_review_id" : 842781613,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777546122/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 27,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-03T16:41:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777546122",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16821975?v=4",
         "events_url" : "https://api.github.com/users/DuncanBetts/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DuncanBetts/followers",
         "following_url" : "https://api.github.com/users/DuncanBetts/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DuncanBetts/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DuncanBetts",
         "id" : 16821975,
         "login" : "DuncanBetts",
         "node_id" : "MDQ6VXNlcjE2ODIxOTc1",
         "organizations_url" : "https://api.github.com/users/DuncanBetts/orgs",
         "received_events_url" : "https://api.github.com/users/DuncanBetts/received_events",
         "repos_url" : "https://api.github.com/users/DuncanBetts/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DuncanBetts/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DuncanBetts/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DuncanBetts"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777579488"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777579488"
         }
      },
      "author_association" : "NONE",
      "body" : "Using a for loop instead of list comprehension here *may* slow down the test suite slightly, but might be worth it for enhanced comprehension of anyone reading/maintaining these tests later?\r\n\r\n```suggestion\r\n    leaf_nodes = []\r\n    for x in range(2**depth):\r\n        nValue = 100\r\n        scriptPubKey = CScript(bytes([0, 0x14]) + random_bytes(20))\r\n        node = CTxOut(nValue, scriptPubKey)\r\n        leaf_nodes.append(node)\r\n```\r\n\r\nAlso, my understanding is `bytes([0, 0x14]) + random_bytes(20)` means OP_FALSE and push 20 random bytes onto the stack?\r\n\r\nThe [wiki](https://en.bitcoin.it/wiki/Script) specifies OP_FALSE as:\r\n> \"An empty array of bytes is pushed onto the stack. (This is not a no-op: an item is added to the stack.)`\r\n\r\nThe 20 bytes seem something other than empty, but my understanding is very basic; I've just now looked at the Wiki to understand what this line of code means. Clarification welcome :).",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-03T16:30:28Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777579488",
      "id" : 777579488,
      "line" : 42,
      "node_id" : "PRRC_kwDOABII584uWOvg",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 42,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 42,
      "pull_request_review_id" : 842781613,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777579488/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-03T16:41:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777579488",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16821975?v=4",
         "events_url" : "https://api.github.com/users/DuncanBetts/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DuncanBetts/followers",
         "following_url" : "https://api.github.com/users/DuncanBetts/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DuncanBetts/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DuncanBetts",
         "id" : 16821975,
         "login" : "DuncanBetts",
         "node_id" : "MDQ6VXNlcjE2ODIxOTc1",
         "organizations_url" : "https://api.github.com/users/DuncanBetts/orgs",
         "received_events_url" : "https://api.github.com/users/DuncanBetts/received_events",
         "repos_url" : "https://api.github.com/users/DuncanBetts/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DuncanBetts/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DuncanBetts/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DuncanBetts"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777581834"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777581834"
         }
      },
      "author_association" : "NONE",
      "body" : "Alternative suggestion, based on style from https://github.com/bitcoin/bitcoin/blob/master/test/functional/feature_taproot.py\r\n\r\n```suggestion\r\n    leaf_nodes = [CTxOut(nValue=100, scriptPubKey=CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\r\n```",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-03T16:35:01Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777581834",
      "id" : 777581834,
      "line" : 42,
      "node_id" : "PRRC_kwDOABII584uWPUK",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 42,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 42,
      "pull_request_review_id" : 842781613,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777581834/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-03T16:41:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777581834",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16821975?v=4",
         "events_url" : "https://api.github.com/users/DuncanBetts/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DuncanBetts/followers",
         "following_url" : "https://api.github.com/users/DuncanBetts/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DuncanBetts/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DuncanBetts",
         "id" : 16821975,
         "login" : "DuncanBetts",
         "node_id" : "MDQ6VXNlcjE2ODIxOTc1",
         "organizations_url" : "https://api.github.com/users/DuncanBetts/orgs",
         "received_events_url" : "https://api.github.com/users/DuncanBetts/received_events",
         "repos_url" : "https://api.github.com/users/DuncanBetts/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DuncanBetts/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DuncanBetts/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DuncanBetts"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777582553"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777582553"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n        idxs = zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\r\n```\r\n\r\nFormatting nit.",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-03T16:36:20Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r777582553",
      "id" : 777582553,
      "line" : 45,
      "node_id" : "PRRC_kwDOABII584uWPfZ",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 45,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 45,
      "pull_request_review_id" : 842781613,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777582553/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-03T16:41:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777582553",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16821975?v=4",
         "events_url" : "https://api.github.com/users/DuncanBetts/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DuncanBetts/followers",
         "following_url" : "https://api.github.com/users/DuncanBetts/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DuncanBetts/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DuncanBetts",
         "id" : 16821975,
         "login" : "DuncanBetts",
         "node_id" : "MDQ6VXNlcjE2ODIxOTc1",
         "organizations_url" : "https://api.github.com/users/DuncanBetts/orgs",
         "received_events_url" : "https://api.github.com/users/DuncanBetts/received_events",
         "repos_url" : "https://api.github.com/users/DuncanBetts/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DuncanBetts/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DuncanBetts/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DuncanBetts"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r778026207"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778026207"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The standardness of bare basic OP_CTV transactions should probably be covered by a test - whatever I return for `TxoutType::TX_BARE_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH`, tests don't fail.",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-04T11:56:24Z",
      "diff_hunk" : "@@ -189,6 +189,11 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n             if (subscript.GetSigOpCount(true) > MAX_P2SH_SIGOPS) {\n                 return false;\n             }\n+        } else if (whichType == TxoutType::TX_BARE_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH) {\n+            // after activation, only allow bare with no scriptsig.\n+            // pre-activation disallowing enforced via discouraged logic in the\n+            // interpreter.\n+            if (tx.vin[i].scriptSig.size() != 0) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r778026207",
      "id" : 778026207,
      "line" : 196,
      "node_id" : "PRRC_kwDOABII584uX7zf",
      "original_commit_id" : "b08fd3717d2751389f599fa89de626465e4da110",
      "original_line" : 196,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : 8,
      "pull_request_review_id" : 843483783,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778026207/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-04T11:56:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778026207",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r778149671"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778149671"
         }
      },
      "author_association" : "NONE",
      "body" : "Nit: readability / variable naming only:\r\n\r\n```suggestion\r\n        priv_key = ECKey()\r\n        while not priv_key.is_valid:\r\n            # use simple deterministic private key (k=1)\r\n            priv_key.set((1).to_bytes(32, 'big'), False)\r\n        pubkey, _ = compute_xonly_pubkey(priv_key.get_bytes())\r\n        taproot = taproot_construct(pubkey, [(\"only-path\", script, 0xc0)])\r\n```\r\n\r\n1. Rename `tapkey` to `priv_key` in-line with [test/functional/test_framework/wallet.py#L87-L89](https://github.com/bitcoin/bitcoin/blob/master/test/functional/test_framework/wallet.py#L87-L89) and re-use method of generating deterministic private key with aim of easing refactoring/maintenance of the codebase later.\r\n2. Rename `xonly, negated` to `pubkey, _` in-line with [test/functional/test_framework/key.py#L519](https://github.com/bitcoin/bitcoin/blob/master/test/functional/test_framework/key.py#L519), [test/functional/test_framework/script.py#L874](https://github.com/bitcoin/bitcoin/blob/master/test/functional/test_framework/script.py#L874)",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-04T15:02:25Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, wallet, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    output = wallet.get_utxo(txid=txid)\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": output[\"txid\"], \"vout\": output[\"vout\"]}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    wallet.sign_tx(tx)\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+        wallet = MiniWallet(self.nodes[0], mode=MiniWalletMode.RAW_P2PK)\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.generate(wallet, BLOCKS)[:-100]]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r778149671",
      "id" : 778149671,
      "line" : 149,
      "node_id" : "PRRC_kwDOABII584uYZ8n",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 149,
      "original_position" : 149,
      "original_start_line" : 143,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 149,
      "pull_request_review_id" : 843663172,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778149671/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 143,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-07T11:38:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778149671",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16821975?v=4",
         "events_url" : "https://api.github.com/users/DuncanBetts/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DuncanBetts/followers",
         "following_url" : "https://api.github.com/users/DuncanBetts/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DuncanBetts/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DuncanBetts",
         "id" : 16821975,
         "login" : "DuncanBetts",
         "node_id" : "MDQ6VXNlcjE2ODIxOTc1",
         "organizations_url" : "https://api.github.com/users/DuncanBetts/orgs",
         "received_events_url" : "https://api.github.com/users/DuncanBetts/received_events",
         "repos_url" : "https://api.github.com/users/DuncanBetts/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DuncanBetts/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DuncanBetts/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DuncanBetts"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r778257527"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778257527"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "interesting let me look into this one. we very well might be missing a test vector (in tx_invalid.json) for this case.\r\n\r\nto be clear, if the template matches on the script, but the scriptSig is nonzero it'd be nonstandard.\r\n\r\n\r\nmeta: does it make sense to just get rid of TxoutType::TX_BARE_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH? We don't strictly need it in this PR, except to ensure that we are able to test CTV in bare script. That should still be testable to a degree even without a standard type...",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-04T17:23:00Z",
      "diff_hunk" : "@@ -189,6 +189,11 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n             if (subscript.GetSigOpCount(true) > MAX_P2SH_SIGOPS) {\n                 return false;\n             }\n+        } else if (whichType == TxoutType::TX_BARE_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH) {\n+            // after activation, only allow bare with no scriptsig.\n+            // pre-activation disallowing enforced via discouraged logic in the\n+            // interpreter.\n+            if (tx.vin[i].scriptSig.size() != 0) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r778257527",
      "id" : 778257527,
      "in_reply_to_id" : 778026207,
      "line" : 196,
      "node_id" : "PRRC_kwDOABII584uY0R3",
      "original_commit_id" : "b08fd3717d2751389f599fa89de626465e4da110",
      "original_line" : 196,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : 8,
      "pull_request_review_id" : 843819734,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778257527/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-04T17:23:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778257527",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r778760378"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778760378"
         }
      },
      "author_association" : "NONE",
      "body" : "Nit: Minor log message text typo.\r\n\r\n```suggestion\r\n        self.log.info(\"Creating funding txns for some anyone can spend outputs\")\r\n```",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-05T11:52:40Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, wallet, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    output = wallet.get_utxo(txid=txid)\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": output[\"txid\"], \"vout\": output[\"vout\"]}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    wallet.sign_tx(tx)\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+        wallet = MiniWallet(self.nodes[0], mode=MiniWalletMode.RAW_P2PK)\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.generate(wallet, BLOCKS)[:-100]]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])\n+        taproot_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                taproot.scriptPubKey, amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a segwit script\")\n+        segwit_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an non-32 byte stack segwit script\")\n+        segwit_ctv_funding_tx_wrongsize_stack = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an empty stack segwit script\")\n+        # allows either calling with empty witness stack or with a 32 byte hash (cleanstack rule)\n+        empty_stack_script = CScript([OP_CHECKTEMPLATEVERIFY, OP_DEPTH, OP_IF, OP_DROP, OP_ENDIF, OP_TRUE])\n+        segwit_ctv_funding_tx_empty_stack = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(empty_stack_script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a p2sh script (impossible to spend)\")\n+        p2sh_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_to_p2sh_script(script), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating script for tree size depth 4\")\n+        # Small Tree for test speed, can be set to a large value like 16 (i.e., 65K txns)\n+        TREE_SIZE = 4\n+        congestion_tree_txo = random_secure_tree(TREE_SIZE)\n+\n+        self.log.info(\"Creating funding txn for tree size depth 4\")\n+        bare_ctv_tree_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                congestion_tree_txo[0][0].scriptPubKey, amount_sats=congestion_tree_txo[0][0].nValue)\n+\n+        self.log.info(\"Creating script for spend at position 2\")\n+        outputs_position_2, script_position_2 = random_real_outputs_and_script(10, 1, 2)\n+        # Add some fee satoshis\n+        amount_position_2 = (sum(out.nValue for out in outputs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2\")\n+        bare_ctv_position_2_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_position_2, amount_sats=amount_position_2)\n+\n+        self.log.info(\"Creating script for spend at position 1 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs, script_specific_scriptSigs = random_real_outputs_and_script(10, 0, 2,\n+                [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs = (sum(out.nValue for out in outputs_specific_scriptSigs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 1 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_specific_scriptSigs, amount_sats=amount_specific_scriptSigs)\n+\n+        self.log.info(\"Creating script for spend at position 2 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs_position_2, script_specific_scriptSigs_position_2 = \\\n+                random_real_outputs_and_script(10, 1, 2, [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs_position_2 = (sum(out.nValue for out in outputs_specific_scriptSigs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_position_2_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_specific_scriptSigs_position_2, amount_sats=amount_specific_scriptSigs_position_2)\n+\n+        self.log.info(\"Creating funding txns for some anyone can sepnd outputs\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r778760378",
      "id" : 778760378,
      "line" : 209,
      "node_id" : "PRRC_kwDOABII584uavC6",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 209,
      "original_position" : 209,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 209,
      "pull_request_review_id" : 843663172,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778760378/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-07T11:38:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778760378",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16821975?v=4",
         "events_url" : "https://api.github.com/users/DuncanBetts/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DuncanBetts/followers",
         "following_url" : "https://api.github.com/users/DuncanBetts/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DuncanBetts/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DuncanBetts",
         "id" : 16821975,
         "login" : "DuncanBetts",
         "node_id" : "MDQ6VXNlcjE2ODIxOTc1",
         "organizations_url" : "https://api.github.com/users/DuncanBetts/orgs",
         "received_events_url" : "https://api.github.com/users/DuncanBetts/received_events",
         "repos_url" : "https://api.github.com/users/DuncanBetts/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DuncanBetts/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DuncanBetts/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DuncanBetts"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r778829703"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778829703"
         }
      },
      "author_association" : "NONE",
      "body" : "Nit: This to me feels easier to read and maintain.\r\n\r\n```suggestion\r\n        # Small tree size 4 for test speed, can be set to a large value like 16 (i.e., 65K txns)\r\n        TREE_SIZE = 4\r\n        self.log.info(\"Creating script for tree size depth %d\", TREE_SIZE)\r\n        congestion_tree_txo = random_secure_tree(TREE_SIZE)\r\n\r\n        self.log.info(\"Creating funding txn for tree size depth %d\", TREE SIZE)\r\n```\r\n\r\nFurther, `TREE_SIZE` could be exposed as configurable through the test framework config file mentioned in [test/functional/test_framework/test_framework.py#L181-L182](https://github.com/bitcoin/bitcoin/blob/master/test/functional/test_framework/test_framework.py#L181-L182), though I'm not sure there's any precedent.",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-05T13:47:23Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, wallet, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    output = wallet.get_utxo(txid=txid)\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": output[\"txid\"], \"vout\": output[\"vout\"]}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    wallet.sign_tx(tx)\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+        wallet = MiniWallet(self.nodes[0], mode=MiniWalletMode.RAW_P2PK)\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.generate(wallet, BLOCKS)[:-100]]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])\n+        taproot_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                taproot.scriptPubKey, amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a segwit script\")\n+        segwit_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an non-32 byte stack segwit script\")\n+        segwit_ctv_funding_tx_wrongsize_stack = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an empty stack segwit script\")\n+        # allows either calling with empty witness stack or with a 32 byte hash (cleanstack rule)\n+        empty_stack_script = CScript([OP_CHECKTEMPLATEVERIFY, OP_DEPTH, OP_IF, OP_DROP, OP_ENDIF, OP_TRUE])\n+        segwit_ctv_funding_tx_empty_stack = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(empty_stack_script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a p2sh script (impossible to spend)\")\n+        p2sh_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_to_p2sh_script(script), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating script for tree size depth 4\")\n+        # Small Tree for test speed, can be set to a large value like 16 (i.e., 65K txns)\n+        TREE_SIZE = 4\n+        congestion_tree_txo = random_secure_tree(TREE_SIZE)\n+\n+        self.log.info(\"Creating funding txn for tree size depth 4\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r778829703",
      "id" : 778829703,
      "line" : 176,
      "node_id" : "PRRC_kwDOABII584ua_-H",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 176,
      "original_position" : 176,
      "original_start_line" : 171,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 176,
      "pull_request_review_id" : 843663172,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778829703/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 171,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-07T11:38:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778829703",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16821975?v=4",
         "events_url" : "https://api.github.com/users/DuncanBetts/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DuncanBetts/followers",
         "following_url" : "https://api.github.com/users/DuncanBetts/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DuncanBetts/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DuncanBetts",
         "id" : 16821975,
         "login" : "DuncanBetts",
         "node_id" : "MDQ6VXNlcjE2ODIxOTc1",
         "organizations_url" : "https://api.github.com/users/DuncanBetts/orgs",
         "received_events_url" : "https://api.github.com/users/DuncanBetts/received_events",
         "repos_url" : "https://api.github.com/users/DuncanBetts/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DuncanBetts/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DuncanBetts/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DuncanBetts"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r778847523"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778847523"
         }
      },
      "author_association" : "NONE",
      "body" : "Nit.\r\n\r\n```suggestion\r\n        self.log.info(\"Creating a CTV with a non 32 byte stack segwit script\")\r\n```",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-05T14:12:14Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, wallet, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    output = wallet.get_utxo(txid=txid)\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": output[\"txid\"], \"vout\": output[\"vout\"]}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    wallet.sign_tx(tx)\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+        wallet = MiniWallet(self.nodes[0], mode=MiniWalletMode.RAW_P2PK)\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.generate(wallet, BLOCKS)[:-100]]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])\n+        taproot_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                taproot.scriptPubKey, amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a segwit script\")\n+        segwit_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an non-32 byte stack segwit script\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r778847523",
      "id" : 778847523,
      "line" : 157,
      "node_id" : "PRRC_kwDOABII584ubEUj",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 157,
      "original_position" : 157,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 157,
      "pull_request_review_id" : 843663172,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778847523/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-07T11:38:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778847523",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16821975?v=4",
         "events_url" : "https://api.github.com/users/DuncanBetts/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DuncanBetts/followers",
         "following_url" : "https://api.github.com/users/DuncanBetts/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DuncanBetts/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DuncanBetts",
         "id" : 16821975,
         "login" : "DuncanBetts",
         "node_id" : "MDQ6VXNlcjE2ODIxOTc1",
         "organizations_url" : "https://api.github.com/users/DuncanBetts/orgs",
         "received_events_url" : "https://api.github.com/users/DuncanBetts/received_events",
         "repos_url" : "https://api.github.com/users/DuncanBetts/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DuncanBetts/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DuncanBetts/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DuncanBetts"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r778907932"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778907932"
         }
      },
      "author_association" : "NONE",
      "body" : "Nit: Re-order to match the order funding txs were created in, to improve readability/simplify later refactor.\r\n\r\n```suggestion\r\n        funding_txs = [  taproot_ctv_funding_tx\r\n                       , segwit_ctv_funding_tx\r\n                       , segwit_ctv_funding_tx_wrongsize_stack\r\n                       , segwit_ctv_funding_tx_empty_stack\r\n                       , p2sh_ctv_funding_tx\r\n                       , bare_ctv_tree_funding_tx\r\n                       , bare_ctv_position_2_funding_tx\r\n                       , bare_ctv_specific_scriptSigs_funding_tx\r\n                       , bare_ctv_specific_scriptSigs_position_2_funding_tx\r\n                       , anyone_can_spend_funding_tx\r\n                       , bare_anyone_can_spend_funding_tx]\r\n```",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-05T15:23:48Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, wallet, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    output = wallet.get_utxo(txid=txid)\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": output[\"txid\"], \"vout\": output[\"vout\"]}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    wallet.sign_tx(tx)\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+        wallet = MiniWallet(self.nodes[0], mode=MiniWalletMode.RAW_P2PK)\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.generate(wallet, BLOCKS)[:-100]]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])\n+        taproot_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                taproot.scriptPubKey, amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a segwit script\")\n+        segwit_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an non-32 byte stack segwit script\")\n+        segwit_ctv_funding_tx_wrongsize_stack = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an empty stack segwit script\")\n+        # allows either calling with empty witness stack or with a 32 byte hash (cleanstack rule)\n+        empty_stack_script = CScript([OP_CHECKTEMPLATEVERIFY, OP_DEPTH, OP_IF, OP_DROP, OP_ENDIF, OP_TRUE])\n+        segwit_ctv_funding_tx_empty_stack = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(empty_stack_script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a p2sh script (impossible to spend)\")\n+        p2sh_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_to_p2sh_script(script), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating script for tree size depth 4\")\n+        # Small Tree for test speed, can be set to a large value like 16 (i.e., 65K txns)\n+        TREE_SIZE = 4\n+        congestion_tree_txo = random_secure_tree(TREE_SIZE)\n+\n+        self.log.info(\"Creating funding txn for tree size depth 4\")\n+        bare_ctv_tree_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                congestion_tree_txo[0][0].scriptPubKey, amount_sats=congestion_tree_txo[0][0].nValue)\n+\n+        self.log.info(\"Creating script for spend at position 2\")\n+        outputs_position_2, script_position_2 = random_real_outputs_and_script(10, 1, 2)\n+        # Add some fee satoshis\n+        amount_position_2 = (sum(out.nValue for out in outputs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2\")\n+        bare_ctv_position_2_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_position_2, amount_sats=amount_position_2)\n+\n+        self.log.info(\"Creating script for spend at position 1 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs, script_specific_scriptSigs = random_real_outputs_and_script(10, 0, 2,\n+                [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs = (sum(out.nValue for out in outputs_specific_scriptSigs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 1 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_specific_scriptSigs, amount_sats=amount_specific_scriptSigs)\n+\n+        self.log.info(\"Creating script for spend at position 2 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs_position_2, script_specific_scriptSigs_position_2 = \\\n+                random_real_outputs_and_script(10, 1, 2, [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs_position_2 = (sum(out.nValue for out in outputs_specific_scriptSigs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_position_2_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_specific_scriptSigs_position_2, amount_sats=amount_specific_scriptSigs_position_2)\n+\n+        self.log.info(\"Creating funding txns for some anyone can sepnd outputs\")\n+        anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+        bare_anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+\n+\n+        funding_txs = [  taproot_ctv_funding_tx\n+                       , segwit_ctv_funding_tx\n+                       , segwit_ctv_funding_tx_wrongsize_stack\n+                       , segwit_ctv_funding_tx_empty_stack\n+                       , p2sh_ctv_funding_tx\n+                       , anyone_can_spend_funding_tx\n+                       , bare_ctv_tree_funding_tx\n+                       , bare_ctv_position_2_funding_tx\n+                       , bare_anyone_can_spend_funding_tx\n+                       , bare_ctv_specific_scriptSigs_funding_tx\n+                       , bare_ctv_specific_scriptSigs_position_2_funding_tx]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r778907932",
      "id" : 778907932,
      "line" : 226,
      "node_id" : "PRRC_kwDOABII584ubTEc",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 226,
      "original_position" : 226,
      "original_start_line" : 216,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 226,
      "pull_request_review_id" : 843663172,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778907932/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 216,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-07T11:38:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778907932",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16821975?v=4",
         "events_url" : "https://api.github.com/users/DuncanBetts/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DuncanBetts/followers",
         "following_url" : "https://api.github.com/users/DuncanBetts/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DuncanBetts/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DuncanBetts",
         "id" : 16821975,
         "login" : "DuncanBetts",
         "node_id" : "MDQ6VXNlcjE2ODIxOTc1",
         "organizations_url" : "https://api.github.com/users/DuncanBetts/orgs",
         "received_events_url" : "https://api.github.com/users/DuncanBetts/received_events",
         "repos_url" : "https://api.github.com/users/DuncanBetts/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DuncanBetts/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DuncanBetts/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DuncanBetts"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r778909821"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778909821"
         }
      },
      "author_association" : "NONE",
      "body" : "Nit: Rename for consistency.\r\n\r\n```suggestion\r\n        bare_ctv_position_2_outpoint,\\\r\n```\r\nThe order these variables are declared could also be amended to match the order they are created in.\r\n\r\n`bare_ctv_position_2_outpoint` used in test:\r\n\r\n```\r\n        self.log.info(\"Testing bare OP_CHECKTEMPLATEVERIFY with CTV at position 2\")\r\n        check_template_verify_tx_pos_2 = CTransaction()\r\n        check_template_verify_tx_pos_2.nVersion = 2\r\n        check_template_verify_tx_pos_2.vin = [CTxIn(bare_ctv_position_2_outpoint)]\r\n        check_template_verify_tx_pos_2.vout = outputs_position_2\r\n```",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-05T15:26:04Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, wallet, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    output = wallet.get_utxo(txid=txid)\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": output[\"txid\"], \"vout\": output[\"vout\"]}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    wallet.sign_tx(tx)\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+        wallet = MiniWallet(self.nodes[0], mode=MiniWalletMode.RAW_P2PK)\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.generate(wallet, BLOCKS)[:-100]]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])\n+        taproot_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                taproot.scriptPubKey, amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a segwit script\")\n+        segwit_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an non-32 byte stack segwit script\")\n+        segwit_ctv_funding_tx_wrongsize_stack = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an empty stack segwit script\")\n+        # allows either calling with empty witness stack or with a 32 byte hash (cleanstack rule)\n+        empty_stack_script = CScript([OP_CHECKTEMPLATEVERIFY, OP_DEPTH, OP_IF, OP_DROP, OP_ENDIF, OP_TRUE])\n+        segwit_ctv_funding_tx_empty_stack = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(empty_stack_script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a p2sh script (impossible to spend)\")\n+        p2sh_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_to_p2sh_script(script), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating script for tree size depth 4\")\n+        # Small Tree for test speed, can be set to a large value like 16 (i.e., 65K txns)\n+        TREE_SIZE = 4\n+        congestion_tree_txo = random_secure_tree(TREE_SIZE)\n+\n+        self.log.info(\"Creating funding txn for tree size depth 4\")\n+        bare_ctv_tree_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                congestion_tree_txo[0][0].scriptPubKey, amount_sats=congestion_tree_txo[0][0].nValue)\n+\n+        self.log.info(\"Creating script for spend at position 2\")\n+        outputs_position_2, script_position_2 = random_real_outputs_and_script(10, 1, 2)\n+        # Add some fee satoshis\n+        amount_position_2 = (sum(out.nValue for out in outputs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2\")\n+        bare_ctv_position_2_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_position_2, amount_sats=amount_position_2)\n+\n+        self.log.info(\"Creating script for spend at position 1 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs, script_specific_scriptSigs = random_real_outputs_and_script(10, 0, 2,\n+                [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs = (sum(out.nValue for out in outputs_specific_scriptSigs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 1 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_specific_scriptSigs, amount_sats=amount_specific_scriptSigs)\n+\n+        self.log.info(\"Creating script for spend at position 2 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs_position_2, script_specific_scriptSigs_position_2 = \\\n+                random_real_outputs_and_script(10, 1, 2, [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs_position_2 = (sum(out.nValue for out in outputs_specific_scriptSigs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_position_2_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_specific_scriptSigs_position_2, amount_sats=amount_specific_scriptSigs_position_2)\n+\n+        self.log.info(\"Creating funding txns for some anyone can sepnd outputs\")\n+        anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+        bare_anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+\n+\n+        funding_txs = [  taproot_ctv_funding_tx\n+                       , segwit_ctv_funding_tx\n+                       , segwit_ctv_funding_tx_wrongsize_stack\n+                       , segwit_ctv_funding_tx_empty_stack\n+                       , p2sh_ctv_funding_tx\n+                       , anyone_can_spend_funding_tx\n+                       , bare_ctv_tree_funding_tx\n+                       , bare_ctv_position_2_funding_tx\n+                       , bare_anyone_can_spend_funding_tx\n+                       , bare_ctv_specific_scriptSigs_funding_tx\n+                       , bare_ctv_specific_scriptSigs_position_2_funding_tx]\n+\n+        self.log.info(\"Obtaining TXIDs\")\n+        taproot_ctv_outpoint,\\\n+        segwit_ctv_outpoint,\\\n+        segwit_ctv_wrongsize_stack_outpoint,\\\n+        segwit_ctv_empty_stack_outpoint,\\\n+        p2sh_ctv_outpoint,\\\n+        anyone_can_spend_outpoint,\\\n+        bare_ctv_tree_outpoint,\\\n+        bare_ctv_position_2,\\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r778909821",
      "id" : 778909821,
      "line" : 236,
      "node_id" : "PRRC_kwDOABII584ubTh9",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 236,
      "original_position" : 236,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 236,
      "pull_request_review_id" : 843663172,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778909821/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-07T11:38:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778909821",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16821975?v=4",
         "events_url" : "https://api.github.com/users/DuncanBetts/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DuncanBetts/followers",
         "following_url" : "https://api.github.com/users/DuncanBetts/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DuncanBetts/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DuncanBetts",
         "id" : 16821975,
         "login" : "DuncanBetts",
         "node_id" : "MDQ6VXNlcjE2ODIxOTc1",
         "organizations_url" : "https://api.github.com/users/DuncanBetts/orgs",
         "received_events_url" : "https://api.github.com/users/DuncanBetts/received_events",
         "repos_url" : "https://api.github.com/users/DuncanBetts/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DuncanBetts/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DuncanBetts/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DuncanBetts"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r778913236"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778913236"
         }
      },
      "author_association" : "NONE",
      "body" : "```suggestion\r\n    rawtx = node.createrawtransaction(\r\n        inputs=[{\"txid\": output[\"txid\"], \"vout\": output[\"vout\"]}],\r\n        outputs={random_address: Decimal(amount_sats) / COIN}\r\n    )\r\n```\r\n\r\nImprove readability of long line.",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-05T15:30:14Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, wallet, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    output = wallet.get_utxo(txid=txid)\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": output[\"txid\"], \"vout\": output[\"vout\"]}], outputs={random_address: Decimal(amount_sats) / COIN})",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r778913236",
      "id" : 778913236,
      "line" : 61,
      "node_id" : "PRRC_kwDOABII584ubUXU",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 61,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 61,
      "pull_request_review_id" : 843663172,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778913236/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-07T11:38:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/778913236",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16821975?v=4",
         "events_url" : "https://api.github.com/users/DuncanBetts/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DuncanBetts/followers",
         "following_url" : "https://api.github.com/users/DuncanBetts/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DuncanBetts/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DuncanBetts",
         "id" : 16821975,
         "login" : "DuncanBetts",
         "node_id" : "MDQ6VXNlcjE2ODIxOTc1",
         "organizations_url" : "https://api.github.com/users/DuncanBetts/orgs",
         "received_events_url" : "https://api.github.com/users/DuncanBetts/received_events",
         "repos_url" : "https://api.github.com/users/DuncanBetts/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DuncanBetts/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DuncanBetts/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DuncanBetts"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r781748379"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/781748379"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "note that using the cache is mandatory, and using the non-cached version of GetDefaultCheckTemplateVerifyHash from e.g. script is insecure.",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-11T04:24:07Z",
      "diff_hunk" : "@@ -1536,11 +1538,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r781748379",
      "id" : 781748379,
      "in_reply_to_id" : 777263028,
      "line" : 1549,
      "node_id" : "PRRC_kwDOABII584umIib",
      "original_commit_id" : "b6d2ba82fd55ce83aac1f8d910781a3166abb9b9",
      "original_line" : 1547,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 20,
      "pull_request_review_id" : 848587874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/781748379/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-11T04:24:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/781748379",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Still a hard Concept NACK from me. [Others](https://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718) have also voiced their opposition to attempting a soft fork activation for OP_CTV in the near term on the bitcoin-dev mailing list and elsewhere.\r\n\r\nOn a number of the bars (community consensus, building out of use cases, comparison of OP_CTV to alternative proposals, longer term analysis on the impact of enabling covenants on Bitcoin with OP_CTV) I and others would like to see met before considering a soft fork activation attempt OP_CTV currently falls well short.\r\n\r\nMerging this would move us onto a discussion of how a [contentious soft fork](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019728.html) could be activated which I think the vast majority of us would want to avoid.\r\n",
      "created_at" : "2022-01-18T03:36:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1015042793",
      "id" : 1015042793,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII5848gFLp",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 1,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1015042793/reactions"
      },
      "updated_at" : "2022-01-18T03:36:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1015042793",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I had experimented with Sapio Studio in last few days. Have been reading most of the things related to OP_CTV and covenants in general.\r\n\r\nStrong Concept ACK and good to see [lot of people supporting](https://utxos.org/signals/) improvements in Bitcoin. Will review code, test etc. in next few weeks.\r\n\r\n---\r\n\r\n@michaelfolkson Your Concept [NACK](https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825557354) with your rationale has been registered. If you have further questions or discussion points please take them elsewhere (mailing list etc). You have to let other reviewers review the PR and make their own mind up.\r\n\r\n",
      "created_at" : "2022-01-18T04:20:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1015058338",
      "id" : 1015058338,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII5848gI-i",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1015058338/reactions"
      },
      "updated_at" : "2022-01-18T04:20:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1015058338",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13405205?v=4",
         "events_url" : "https://api.github.com/users/prayank23/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prayank23/followers",
         "following_url" : "https://api.github.com/users/prayank23/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prayank23/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prayank23",
         "id" : 13405205,
         "login" : "prayank23",
         "node_id" : "MDQ6VXNlcjEzNDA1MjA1",
         "organizations_url" : "https://api.github.com/users/prayank23/orgs",
         "received_events_url" : "https://api.github.com/users/prayank23/received_events",
         "repos_url" : "https://api.github.com/users/prayank23/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prayank23/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prayank23"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r789776285"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/789776285"
         }
      },
      "author_association" : "MEMBER",
      "body" : "https://github.com/bitcoin/bitcoin/pull/21702/commits/b6d2ba82fd55ce83aac1f8d910781a3166abb9b9\r\n\r\nI've benchmarked a fork of this branch that buries activation (https://github.com/jamesob/bitcoin/commit/9dad64880e19e2e785355c4e28388f89cce6c621) and am seeing a ~3% slowdown, presumably because of precomputing the hashes here for all transactions. In the past we've preferred to [bury prior softforks](https://bitcoincore.reviews/16060) for a variety of reasons, so it should be noted that were CTV to be deployed, burying the deployment may not be as palatable. \r\n\r\nAs others (including Jeremy) have noted, it's possible that we could use heuristics to scan redeem scripts (or equivalent) for OP_CTV  (OP_4) in order to avoid unnecessary hashing for transactions that don't use CTV, but I'm curious as to whether such a scan would save much time relative to just precomputing the hashes as done here. It probably merits testing.\r\n\r\nI'd like to hear someone explicate on why we can't \"just-in-time\" these hashes in the same way that we do for, e.g., segwit: https://github.com/jamesob/bitcoin/blob/9dad64880e19e2e785355c4e28388f89cce6c621/src/script/interpreter.cpp#L1708-L1710. I.e. why is N^2 hashing not a problem for the code linked here, but is a problem for CTV? I assume CTV's preimage is larger (the whole tx) and that has something to do with it.\r\n ",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-21T15:53:52Z",
      "diff_hunk" : "@@ -1514,6 +1514,8 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_outputs_ready = true;\n     }\n \n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r789776285",
      "id" : 789776285,
      "line" : 1520,
      "node_id" : "PRRC_kwDOABII584vEwed",
      "original_commit_id" : "b6d2ba82fd55ce83aac1f8d910781a3166abb9b9",
      "original_line" : 1518,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 5,
      "pull_request_review_id" : 859718084,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/789776285/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-21T16:40:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/789776285",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r789792243"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/789792243"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> the main reason to cache the hashing it to prevent scripts like <H> CTV CTV CTV.... CTV from being able to cause N^2 hashing to occur.\r\n\r\n@JeremyRubin what's the reason that we can't populate a cache \"inline\" while we're doing script execution? That way we could both avoid having to precompute for transactions that don't use CTV and avoid N^2 hashing. I assume there's some limitation that prevented you from doing this in the first place.",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-21T16:12:56Z",
      "diff_hunk" : "@@ -1433,6 +1513,9 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n     // Determine which precomputation-impacting features this transaction uses.\n     bool uses_bip143_segwit = false;\n     bool uses_bip341_taproot = false;\n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r789792243",
      "id" : 789792243,
      "in_reply_to_id" : 616625177,
      "line" : 1520,
      "node_id" : "PRRC_kwDOABII584vE0Xz",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 1520,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 117,
      "pull_request_review_id" : 859718084,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/789792243/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-21T16:40:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/789792243",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r789800321"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/789800321"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is this a placeholder? Maybe this merits commentary about why we'd never consider a bare CTV hash as owned by a wallet (i.e. do we expect that only transactions using this output might be IsMine?).",
      "commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "created_at" : "2022-01-21T16:22:39Z",
      "diff_hunk" : "@@ -201,6 +201,11 @@ IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& s\n         }\n         break;\n     }\n+    case TxoutType::TX_BARE_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH:\n+    {\n+        ret = IsMineResult::NO;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r789800321",
      "id" : 789800321,
      "line" : 206,
      "node_id" : "PRRC_kwDOABII584vE2WB",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 206,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 6,
      "pull_request_review_id" : 859718084,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/789800321/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-21T16:40:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/789800321",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r789849874"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/789849874"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "it might be non-obvious but the cache i actually required for validation, and optional for transaction signing purposes.\r\n\r\nIMO it would make sense to eventually have the logic more clear that caches aren't merely a convenience.",
      "commit_id" : "635ef80c4e2058bca2b6e69fbd98619a9f5c903b",
      "created_at" : "2022-01-21T17:11:35Z",
      "diff_hunk" : "@@ -1514,6 +1514,8 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_outputs_ready = true;\n     }\n \n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r789849874",
      "id" : 789849874,
      "in_reply_to_id" : 789776285,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vFCcS",
      "original_commit_id" : "b6d2ba82fd55ce83aac1f8d910781a3166abb9b9",
      "original_line" : 1518,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 859821336,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/789849874/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-21T17:11:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/789849874",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r789854321"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/789854321"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is simply the no-behavior-change from without TX_BARE_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH, since before TX_NONSTANDARD was set to IsMine::No, overridable from the watchonly.\r\n\r\nThe future logic will not be to mark things as IsMine, but to use the IsTrusted recrusive scanning https://github.com/bitcoin/bitcoin/pull/16766 with a patch to treat bare CTV as trusted (since the TXID must be stable)",
      "commit_id" : "635ef80c4e2058bca2b6e69fbd98619a9f5c903b",
      "created_at" : "2022-01-21T17:17:45Z",
      "diff_hunk" : "@@ -201,6 +201,11 @@ IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& s\n         }\n         break;\n     }\n+    case TxoutType::TX_BARE_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH:\n+    {\n+        ret = IsMineResult::NO;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r789854321",
      "id" : 789854321,
      "in_reply_to_id" : 789800321,
      "line" : 206,
      "node_id" : "PRRC_kwDOABII584vFDhx",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 206,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 6,
      "pull_request_review_id" : 859827645,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/789854321/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-21T17:17:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/789854321",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r789863923"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/789863923"
         }
      },
      "author_association" : "MEMBER",
      "body" : "But my question is: why is the cache apparently not required for the segwit code I link to there? And when you say, \"required,\" you just mean to prevent quadratic hashing, right?",
      "commit_id" : "635ef80c4e2058bca2b6e69fbd98619a9f5c903b",
      "created_at" : "2022-01-21T17:30:44Z",
      "diff_hunk" : "@@ -1514,6 +1514,8 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_outputs_ready = true;\n     }\n \n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r789863923",
      "id" : 789863923,
      "in_reply_to_id" : 789776285,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vFF3z",
      "original_commit_id" : "b6d2ba82fd55ce83aac1f8d910781a3166abb9b9",
      "original_line" : 1518,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 859841319,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/789863923/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-21T17:30:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/789863923",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thank you @jamesob for the detailed review and testing! I've prepared two patches and pushed them here (That could be squashed or left separate from the original caching patches) that:\r\n\r\n1. Do not pre-compute or cache the 1st input CTV hash\r\n2. Cache-on-first-use the scriptSigs hash/scan using std::call_once\r\n\r\n1 is safe to do because the amount of work caused is the same as if the CTV input were to always be at the 2nd output. The negative impact is that if CTV becomes very popular, this approach will be potentially a little slower, but when CTV is not yet used such behavior motivated optimizations are premature. Scripts with repeated CTV could have a separate optimization to cache the CTV hash locally, but because it is also less work than a e.g. repeated OP_SHA256 might cause to be done, such optimizations do not really confer a benefit on the actual worst case scripts.\r\n\r\n2 is safe because because we shift the CTV computations to still only be once per transaction, but lazily so. The downside of this approach is that it introduces the atomic std::call_once into the interpreter (which means that parallel CScripts with CTV for the same txn might contend). However, std::call_once is heavily optimized and the number of waiters on CScripts is bounded by the number of CheckQueue threads. Subsequent (after first) call_onces are able to cheaply read the modified state with full synchronicity. The downside of this approach is that less is precomputed, making an average CTV txn slower. If CTV is particularly popular in the future we can add back in the precomputation. A further downside is that future changes will have to be careful to rearchitect the call_once function should they want to on the fly cache state as multiple different modifiers might be unsafe (making PrecomputedTransactionData non-const is also a minor downside).\r\n\r\nI believe this is the simplest approach to addressing your feedback and makes the overhead for non-ctv transactions essentially zero, while still permitting caching so that the worst case validation costs of many CTVs are still total O(N) (this N to O(N) mapping is used and not CTV is O(1) because the first call will be O(N) for hashing).",
      "created_at" : "2022-01-21T17:36:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1018721542",
      "id" : 1018721542,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII5848uHUG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1018721542/reactions"
      },
      "updated_at" : "2022-01-21T17:36:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1018721542",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I have added patches to make the cache on first use strategy managed through a lambda \"dependency injection\" so as to permit the interpreter to be build for environments without access to threading. This makes thread safety the responsibility of the caller.\r\n\r\n- Lambda for caching, which can use call_once (used from CheckInputsScripts) requires pthread\r\n- Force option precomputes it always (threadsafe and usable without pthread, but sometimes you cache more than you'll need)\r\n- No lambda + no force gives you a default cache on first use (not thread safe, does not require any sync primitves).\r\n- You can make a PrecomputedData with a lambda, or pass to init, but if you do both we assert since overriding is a logic error\r\n\r\nUnder no circumstance (unless you provide a lambda that does not invoke the proper call) is this DoS unsafe, however.\r\n\r\nIt might be possible to e.g. spinlock on an atomic as the default, and possible that atomic might be available even where call_once is not, but that strategy might be better handled if desired in other ways (e.g., platform dependent call_once shim).\r\n\r\nThis is a bit more complex than I'd like it to be, but the approach seems technically sound. I will squash the patches down after conceptual review on this approach by some of @jamesob / @sipa / @laanwj as followup on our conversation in IRC today.",
      "created_at" : "2022-01-22T01:16:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1019003673",
      "id" : 1019003673,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII5848vMMZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1019003673/reactions"
      },
      "updated_at" : "2022-01-22T01:16:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1019003673",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r790369961"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790369961"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "it *is* required. E.g., we could (and maybe _should_) add an assert for something like:\r\n\r\n```c++\r\nif (!evaulting_for_transaction_signing) assert(cacheReady)\r\n```\r\n\r\nBut it's not \"required\" strictly speaking because the code is designed to be usable from both tx signing logic and verification. This is perhaps bad API design and these could be separated into a consensus and non consensus version. honestly... it might even be an issue that we expose the signing logic to DoS (but you just... DoS yourself trying to sign a PSBT?) if we don't cache this stuff.",
      "commit_id" : "0e38b84909c5a28df29af9f0d066285a6ee4c823",
      "created_at" : "2022-01-24T01:54:07Z",
      "diff_hunk" : "@@ -1514,6 +1514,8 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_outputs_ready = true;\n     }\n \n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r790369961",
      "id" : 790369961,
      "in_reply_to_id" : 789776285,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vHBap",
      "original_commit_id" : "b6d2ba82fd55ce83aac1f8d910781a3166abb9b9",
      "original_line" : 1518,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 860418012,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790369961/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-24T01:54:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790369961",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-01-25T08:54:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1020946460",
      "id" : 1020946460,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII58482mgc",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1020946460/reactions"
      },
      "updated_at" : "2022-01-25T08:54:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1020946460",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792290208"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792290208"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is the approach now taken in this PR!",
      "commit_id" : "0e38b84909c5a28df29af9f0d066285a6ee4c823",
      "created_at" : "2022-01-26T03:26:12Z",
      "diff_hunk" : "@@ -1433,6 +1513,9 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n     // Determine which precomputation-impacting features this transaction uses.\n     bool uses_bip143_segwit = false;\n     bool uses_bip341_taproot = false;\n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792290208",
      "id" : 792290208,
      "in_reply_to_id" : 616625177,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vOWOg",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 1520,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 863083920,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792290208/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-26T03:26:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792290208",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792290544"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792290544"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "the approach for this has been changed in follow up patches, so the comment can stay as is :)",
      "commit_id" : "0e38b84909c5a28df29af9f0d066285a6ee4c823",
      "created_at" : "2022-01-26T03:27:22Z",
      "diff_hunk" : "@@ -1536,11 +1538,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792290544",
      "id" : 792290544,
      "in_reply_to_id" : 777152070,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vOWTw",
      "original_commit_id" : "b6d2ba82fd55ce83aac1f8d910781a3166abb9b9",
      "original_line" : 1542,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 863084344,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792290544/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-26T03:27:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792290544",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792307881"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792307881"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "removing both; not sure why they were there to begin with.",
      "commit_id" : "0e38b84909c5a28df29af9f0d066285a6ee4c823",
      "created_at" : "2022-01-26T04:36:02Z",
      "diff_hunk" : "@@ -1584,8 +1639,10 @@ bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata\n \n     hash_out = ss.GetSHA256();\n     return true;\n+\n }\n \n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792307881",
      "id" : 792307881,
      "in_reply_to_id" : 777298983,
      "line" : 1721,
      "node_id" : "PRRC_kwDOABII584vOaip",
      "original_commit_id" : "51f0bdd36328f1c9334ad455a56f7cb47d76abda",
      "original_line" : 1645,
      "original_position" : 79,
      "original_start_line" : 1642,
      "path" : "src/script/interpreter.cpp",
      "position" : 193,
      "pull_request_review_id" : 863105187,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792307881/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1718,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-26T04:36:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792307881",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792308850"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792308850"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "opted for `all_of` and `empty`.\r\n\r\nThis should be the same.",
      "commit_id" : "0e38b84909c5a28df29af9f0d066285a6ee4c823",
      "created_at" : "2022-01-26T04:39:43Z",
      "diff_hunk" : "@@ -1536,11 +1538,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792308850",
      "id" : 792308850,
      "in_reply_to_id" : 777261862,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vOaxy",
      "original_commit_id" : "b6d2ba82fd55ce83aac1f8d910781a3166abb9b9",
      "original_line" : 1548,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 863106259,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792308850/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-26T04:39:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792308850",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792311513"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792311513"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "im just going to use black to autoformat for all these.",
      "commit_id" : "0e38b84909c5a28df29af9f0d066285a6ee4c823",
      "created_at" : "2022-01-26T04:49:34Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, wallet, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    output = wallet.get_utxo(txid=txid)\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": output[\"txid\"], \"vout\": output[\"vout\"]}], outputs={random_address: Decimal(amount_sats) / COIN})",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792311513",
      "id" : 792311513,
      "in_reply_to_id" : 778913236,
      "line" : 61,
      "node_id" : "PRRC_kwDOABII584vObbZ",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 61,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 61,
      "pull_request_review_id" : 863109455,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792311513/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-26T04:49:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792311513",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792311797"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792311797"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792311513",
      "commit_id" : "0e38b84909c5a28df29af9f0d066285a6ee4c823",
      "created_at" : "2022-01-26T04:50:36Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792311797",
      "id" : 792311797,
      "in_reply_to_id" : 777582553,
      "line" : 45,
      "node_id" : "PRRC_kwDOABII584vObf1",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 45,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 45,
      "pull_request_review_id" : 863109778,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792311797/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-26T04:50:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792311797",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792311890"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792311890"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792311513",
      "commit_id" : "0e38b84909c5a28df29af9f0d066285a6ee4c823",
      "created_at" : "2022-01-26T04:51:01Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792311890",
      "id" : 792311890,
      "in_reply_to_id" : 777514172,
      "line" : 16,
      "node_id" : "PRRC_kwDOABII584vObhS",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 16,
      "original_position" : 16,
      "original_start_line" : 8,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : 16,
      "pull_request_review_id" : 863109921,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792311890/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 8,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-26T04:51:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792311890",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792317829"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792317829"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "fine",
      "commit_id" : "489172c35318276d5c3268da93dd37d35693bb83",
      "created_at" : "2022-01-26T05:04:02Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792317829",
      "id" : 792317829,
      "in_reply_to_id" : 777581834,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vOc-F",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 42,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 863116609,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792317829/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-26T05:04:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792317829",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792318617"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792318617"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "if i recall I just wanted something unique and non-spendable... but it's probably worth documenting better.",
      "commit_id" : "489172c35318276d5c3268da93dd37d35693bb83",
      "created_at" : "2022-01-26T05:05:51Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792318617",
      "id" : 792318617,
      "in_reply_to_id" : 777579488,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vOdKZ",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 42,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 863117510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792318617/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-26T05:05:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792318617",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792320410"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792320410"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "donezo",
      "commit_id" : "489172c35318276d5c3268da93dd37d35693bb83",
      "created_at" : "2022-01-26T05:12:41Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, wallet, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    output = wallet.get_utxo(txid=txid)\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": output[\"txid\"], \"vout\": output[\"vout\"]}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    wallet.sign_tx(tx)\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+        wallet = MiniWallet(self.nodes[0], mode=MiniWalletMode.RAW_P2PK)\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.generate(wallet, BLOCKS)[:-100]]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792320410",
      "id" : 792320410,
      "in_reply_to_id" : 778149671,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vOdma",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 149,
      "original_position" : 149,
      "original_start_line" : 143,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 863119731,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792320410/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-26T05:12:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792320410",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792320545"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792320545"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "hodl! done",
      "commit_id" : "489172c35318276d5c3268da93dd37d35693bb83",
      "created_at" : "2022-01-26T05:13:12Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, wallet, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    output = wallet.get_utxo(txid=txid)\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": output[\"txid\"], \"vout\": output[\"vout\"]}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    wallet.sign_tx(tx)\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+        wallet = MiniWallet(self.nodes[0], mode=MiniWalletMode.RAW_P2PK)\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.generate(wallet, BLOCKS)[:-100]]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])\n+        taproot_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                taproot.scriptPubKey, amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a segwit script\")\n+        segwit_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an non-32 byte stack segwit script\")\n+        segwit_ctv_funding_tx_wrongsize_stack = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an empty stack segwit script\")\n+        # allows either calling with empty witness stack or with a 32 byte hash (cleanstack rule)\n+        empty_stack_script = CScript([OP_CHECKTEMPLATEVERIFY, OP_DEPTH, OP_IF, OP_DROP, OP_ENDIF, OP_TRUE])\n+        segwit_ctv_funding_tx_empty_stack = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(empty_stack_script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a p2sh script (impossible to spend)\")\n+        p2sh_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_to_p2sh_script(script), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating script for tree size depth 4\")\n+        # Small Tree for test speed, can be set to a large value like 16 (i.e., 65K txns)\n+        TREE_SIZE = 4\n+        congestion_tree_txo = random_secure_tree(TREE_SIZE)\n+\n+        self.log.info(\"Creating funding txn for tree size depth 4\")\n+        bare_ctv_tree_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                congestion_tree_txo[0][0].scriptPubKey, amount_sats=congestion_tree_txo[0][0].nValue)\n+\n+        self.log.info(\"Creating script for spend at position 2\")\n+        outputs_position_2, script_position_2 = random_real_outputs_and_script(10, 1, 2)\n+        # Add some fee satoshis\n+        amount_position_2 = (sum(out.nValue for out in outputs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2\")\n+        bare_ctv_position_2_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_position_2, amount_sats=amount_position_2)\n+\n+        self.log.info(\"Creating script for spend at position 1 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs, script_specific_scriptSigs = random_real_outputs_and_script(10, 0, 2,\n+                [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs = (sum(out.nValue for out in outputs_specific_scriptSigs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 1 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_specific_scriptSigs, amount_sats=amount_specific_scriptSigs)\n+\n+        self.log.info(\"Creating script for spend at position 2 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs_position_2, script_specific_scriptSigs_position_2 = \\\n+                random_real_outputs_and_script(10, 1, 2, [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs_position_2 = (sum(out.nValue for out in outputs_specific_scriptSigs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_position_2_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_specific_scriptSigs_position_2, amount_sats=amount_specific_scriptSigs_position_2)\n+\n+        self.log.info(\"Creating funding txns for some anyone can sepnd outputs\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792320545",
      "id" : 792320545,
      "in_reply_to_id" : 778760378,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vOdoh",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 209,
      "original_position" : 209,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 863119890,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792320545/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-26T05:13:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792320545",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792321521"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792321521"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done -- not going to bother with configurable thing, i dont think it helps with this particular param",
      "commit_id" : "489172c35318276d5c3268da93dd37d35693bb83",
      "created_at" : "2022-01-26T05:16:50Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, wallet, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    output = wallet.get_utxo(txid=txid)\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": output[\"txid\"], \"vout\": output[\"vout\"]}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    wallet.sign_tx(tx)\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+        wallet = MiniWallet(self.nodes[0], mode=MiniWalletMode.RAW_P2PK)\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.generate(wallet, BLOCKS)[:-100]]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])\n+        taproot_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                taproot.scriptPubKey, amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a segwit script\")\n+        segwit_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an non-32 byte stack segwit script\")\n+        segwit_ctv_funding_tx_wrongsize_stack = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an empty stack segwit script\")\n+        # allows either calling with empty witness stack or with a 32 byte hash (cleanstack rule)\n+        empty_stack_script = CScript([OP_CHECKTEMPLATEVERIFY, OP_DEPTH, OP_IF, OP_DROP, OP_ENDIF, OP_TRUE])\n+        segwit_ctv_funding_tx_empty_stack = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(empty_stack_script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a p2sh script (impossible to spend)\")\n+        p2sh_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_to_p2sh_script(script), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating script for tree size depth 4\")\n+        # Small Tree for test speed, can be set to a large value like 16 (i.e., 65K txns)\n+        TREE_SIZE = 4\n+        congestion_tree_txo = random_secure_tree(TREE_SIZE)\n+\n+        self.log.info(\"Creating funding txn for tree size depth 4\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792321521",
      "id" : 792321521,
      "in_reply_to_id" : 778829703,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vOd3x",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 176,
      "original_position" : 176,
      "original_start_line" : 171,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 863121054,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792321521/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-26T05:16:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792321521",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792321632"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792321632"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "489172c35318276d5c3268da93dd37d35693bb83",
      "created_at" : "2022-01-26T05:17:18Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, wallet, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    output = wallet.get_utxo(txid=txid)\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": output[\"txid\"], \"vout\": output[\"vout\"]}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    wallet.sign_tx(tx)\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+        wallet = MiniWallet(self.nodes[0], mode=MiniWalletMode.RAW_P2PK)\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.generate(wallet, BLOCKS)[:-100]]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])\n+        taproot_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                taproot.scriptPubKey, amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a segwit script\")\n+        segwit_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an non-32 byte stack segwit script\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792321632",
      "id" : 792321632,
      "in_reply_to_id" : 778847523,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vOd5g",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 157,
      "original_position" : 157,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 863121179,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792321632/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-26T05:17:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792321632",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792322532"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792322532"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "renamed!",
      "commit_id" : "489172c35318276d5c3268da93dd37d35693bb83",
      "created_at" : "2022-01-26T05:20:51Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, wallet, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    output = wallet.get_utxo(txid=txid)\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": output[\"txid\"], \"vout\": output[\"vout\"]}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    wallet.sign_tx(tx)\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+        wallet = MiniWallet(self.nodes[0], mode=MiniWalletMode.RAW_P2PK)\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.generate(wallet, BLOCKS)[:-100]]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])\n+        taproot_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                taproot.scriptPubKey, amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a segwit script\")\n+        segwit_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an non-32 byte stack segwit script\")\n+        segwit_ctv_funding_tx_wrongsize_stack = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an empty stack segwit script\")\n+        # allows either calling with empty witness stack or with a 32 byte hash (cleanstack rule)\n+        empty_stack_script = CScript([OP_CHECKTEMPLATEVERIFY, OP_DEPTH, OP_IF, OP_DROP, OP_ENDIF, OP_TRUE])\n+        segwit_ctv_funding_tx_empty_stack = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(empty_stack_script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a p2sh script (impossible to spend)\")\n+        p2sh_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_to_p2sh_script(script), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating script for tree size depth 4\")\n+        # Small Tree for test speed, can be set to a large value like 16 (i.e., 65K txns)\n+        TREE_SIZE = 4\n+        congestion_tree_txo = random_secure_tree(TREE_SIZE)\n+\n+        self.log.info(\"Creating funding txn for tree size depth 4\")\n+        bare_ctv_tree_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                congestion_tree_txo[0][0].scriptPubKey, amount_sats=congestion_tree_txo[0][0].nValue)\n+\n+        self.log.info(\"Creating script for spend at position 2\")\n+        outputs_position_2, script_position_2 = random_real_outputs_and_script(10, 1, 2)\n+        # Add some fee satoshis\n+        amount_position_2 = (sum(out.nValue for out in outputs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2\")\n+        bare_ctv_position_2_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_position_2, amount_sats=amount_position_2)\n+\n+        self.log.info(\"Creating script for spend at position 1 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs, script_specific_scriptSigs = random_real_outputs_and_script(10, 0, 2,\n+                [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs = (sum(out.nValue for out in outputs_specific_scriptSigs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 1 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_specific_scriptSigs, amount_sats=amount_specific_scriptSigs)\n+\n+        self.log.info(\"Creating script for spend at position 2 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs_position_2, script_specific_scriptSigs_position_2 = \\\n+                random_real_outputs_and_script(10, 1, 2, [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs_position_2 = (sum(out.nValue for out in outputs_specific_scriptSigs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_position_2_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_specific_scriptSigs_position_2, amount_sats=amount_specific_scriptSigs_position_2)\n+\n+        self.log.info(\"Creating funding txns for some anyone can sepnd outputs\")\n+        anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+        bare_anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+\n+\n+        funding_txs = [  taproot_ctv_funding_tx\n+                       , segwit_ctv_funding_tx\n+                       , segwit_ctv_funding_tx_wrongsize_stack\n+                       , segwit_ctv_funding_tx_empty_stack\n+                       , p2sh_ctv_funding_tx\n+                       , anyone_can_spend_funding_tx\n+                       , bare_ctv_tree_funding_tx\n+                       , bare_ctv_position_2_funding_tx\n+                       , bare_anyone_can_spend_funding_tx\n+                       , bare_ctv_specific_scriptSigs_funding_tx\n+                       , bare_ctv_specific_scriptSigs_position_2_funding_tx]\n+\n+        self.log.info(\"Obtaining TXIDs\")\n+        taproot_ctv_outpoint,\\\n+        segwit_ctv_outpoint,\\\n+        segwit_ctv_wrongsize_stack_outpoint,\\\n+        segwit_ctv_empty_stack_outpoint,\\\n+        p2sh_ctv_outpoint,\\\n+        anyone_can_spend_outpoint,\\\n+        bare_ctv_tree_outpoint,\\\n+        bare_ctv_position_2,\\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792322532",
      "id" : 792322532,
      "in_reply_to_id" : 778909821,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vOeHk",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 236,
      "original_position" : 236,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 863122297,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792322532/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-26T05:20:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792322532",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792323117"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792323117"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "im not sure i get what this (and the other variable order request) are accomplishing? what is the problem?",
      "commit_id" : "489172c35318276d5c3268da93dd37d35693bb83",
      "created_at" : "2022-01-26T05:22:54Z",
      "diff_hunk" : "@@ -0,0 +1,468 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, COIN, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_DEPTH, OP_ENDIF, OP_IF, OP_CHECKTEMPLATEVERIFY, OP_FALSE, OP_DROP, taproot_construct\n+from test_framework.script_util import script_to_p2sh_script\n+from test_framework.key import ECKey, compute_xonly_pubkey\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.wallet import MiniWallet, MiniWalletMode\n+from decimal import Decimal\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+DISCOURAGED_ERROR = \"non-mandatory-script-verify-flag (NOPx reserved for soft-fork upgrades)\"\n+STACK_TOO_SHORT_ERROR = \"non-mandatory-script-verify-flag (Operation not valid with the current stack size)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return script_to_p2sh_script(random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript([template_hash_for_outputs(outputs, nIn, nVin, vin_override), OP_CHECKTEMPLATEVERIFY])\n+    return outputs, script\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, wallet, txid, script, *, amount_sats):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    output = wallet.get_utxo(txid=txid)\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": output[\"txid\"], \"vout\": output[\"vout\"]}], outputs={random_address: Decimal(amount_sats) / COIN})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(bytes.fromhex(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    wallet.sign_tx(tx)\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        self.log.debug(self.height)\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height+1))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        reason = self.nodes[0].submitblock(block)\n+        if reason:\n+            self.log.debug(\"Reject Reason: [%s]\", reason)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - Taproot OP_CTV\n+        #   - SegWit OP_CTV\n+        #   - SegWit OP_CTV wrong size on stack\n+        #     - fails policy\n+        #     - passes consensus\n+        #   - SegWit OP_CTV no argument in stack from program\n+        #     - fails policy and consensus with empty stack\n+        #     - passes consensus and policy when argument is the correct hash\n+        #     - passes consensus when argument is non 32 bytes\n+        #     - fails policy when argument is non 32 bytes\n+        #   - P2SH OP_CTV (impossible to spend w/o hash cycle!)\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+        wallet = MiniWallet(self.nodes[0], mode=MiniWalletMode.RAW_P2PK)\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 115\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        # Drop the last 100 as they're unspendable!\n+        coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.generate(wallet, BLOCKS)[:-100]]\n+        get_coinbase = lambda: coinbase_txids.pop()\n+\n+        self.log.info(\"Creating setup transactions\")\n+\n+        self.log.info(\"Creating script for 10 random outputs\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount_sats = (sum(out.nValue for out in outputs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a Taproot script\")\n+        tapkey = ECKey()\n+        b = bytes(b\"Deterministic Privkey\")\n+        while not tapkey.is_valid:\n+            b = sha256(b)\n+            tapkey.set(b, False)\n+        xonly, negated = compute_xonly_pubkey(tapkey.get_bytes())\n+        taproot = taproot_construct(xonly, [(\"only-path\", script, 0xc0)])\n+        taproot_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                taproot.scriptPubKey, amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a segwit script\")\n+        segwit_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an non-32 byte stack segwit script\")\n+        segwit_ctv_funding_tx_wrongsize_stack = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(CScript([OP_TRUE, OP_CHECKTEMPLATEVERIFY]))]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating a CTV with an empty stack segwit script\")\n+        # allows either calling with empty witness stack or with a 32 byte hash (cleanstack rule)\n+        empty_stack_script = CScript([OP_CHECKTEMPLATEVERIFY, OP_DEPTH, OP_IF, OP_DROP, OP_ENDIF, OP_TRUE])\n+        segwit_ctv_funding_tx_empty_stack = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([0, sha256(empty_stack_script)]), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating funding txn for 10 random outputs as a p2sh script (impossible to spend)\")\n+        p2sh_ctv_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_to_p2sh_script(script), amount_sats=amount_sats)\n+\n+        self.log.info(\"Creating script for tree size depth 4\")\n+        # Small Tree for test speed, can be set to a large value like 16 (i.e., 65K txns)\n+        TREE_SIZE = 4\n+        congestion_tree_txo = random_secure_tree(TREE_SIZE)\n+\n+        self.log.info(\"Creating funding txn for tree size depth 4\")\n+        bare_ctv_tree_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                congestion_tree_txo[0][0].scriptPubKey, amount_sats=congestion_tree_txo[0][0].nValue)\n+\n+        self.log.info(\"Creating script for spend at position 2\")\n+        outputs_position_2, script_position_2 = random_real_outputs_and_script(10, 1, 2)\n+        # Add some fee satoshis\n+        amount_position_2 = (sum(out.nValue for out in outputs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2\")\n+        bare_ctv_position_2_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_position_2, amount_sats=amount_position_2)\n+\n+        self.log.info(\"Creating script for spend at position 1 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs, script_specific_scriptSigs = random_real_outputs_and_script(10, 0, 2,\n+                [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs = (sum(out.nValue for out in outputs_specific_scriptSigs)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 1 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_specific_scriptSigs, amount_sats=amount_specific_scriptSigs)\n+\n+        self.log.info(\"Creating script for spend at position 2 with 2 non-null scriptsigs\")\n+        outputs_specific_scriptSigs_position_2, script_specific_scriptSigs_position_2 = \\\n+                random_real_outputs_and_script(10, 1, 2, [CTxIn(scriptSig=CScript([OP_TRUE])), CTxIn(scriptSig=CScript([OP_FALSE]))])\n+        # Add some fee satoshis\n+        amount_specific_scriptSigs_position_2 = (sum(out.nValue for out in outputs_specific_scriptSigs_position_2)+200*500)\n+\n+        self.log.info(\"Creating funding txn for spend at position 2 with 2 non-null scriptsigs\")\n+        bare_ctv_specific_scriptSigs_position_2_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                script_specific_scriptSigs_position_2, amount_sats=amount_specific_scriptSigs_position_2)\n+\n+        self.log.info(\"Creating funding txns for some anyone can sepnd outputs\")\n+        anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+        bare_anyone_can_spend_funding_tx = create_transaction_to_script(self.nodes[0], wallet, get_coinbase(),\n+                CScript([OP_TRUE]), amount_sats=amount_sats)\n+\n+\n+        funding_txs = [  taproot_ctv_funding_tx\n+                       , segwit_ctv_funding_tx\n+                       , segwit_ctv_funding_tx_wrongsize_stack\n+                       , segwit_ctv_funding_tx_empty_stack\n+                       , p2sh_ctv_funding_tx\n+                       , anyone_can_spend_funding_tx\n+                       , bare_ctv_tree_funding_tx\n+                       , bare_ctv_position_2_funding_tx\n+                       , bare_anyone_can_spend_funding_tx\n+                       , bare_ctv_specific_scriptSigs_funding_tx\n+                       , bare_ctv_specific_scriptSigs_position_2_funding_tx]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792323117",
      "id" : 792323117,
      "in_reply_to_id" : 778907932,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vOeQt",
      "original_commit_id" : "3109df5616796282786706738994a5b97b8a5a38",
      "original_line" : 226,
      "original_position" : 226,
      "original_start_line" : 216,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 863123039,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792323117/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-26T05:22:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792323117",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792337369"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792337369"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "doing this one -- I'm not confident I like it so I'll leave it as a patch until you ACK it",
      "commit_id" : "489172c35318276d5c3268da93dd37d35693bb83",
      "created_at" : "2022-01-26T06:12:34Z",
      "diff_hunk" : "@@ -1860,6 +1860,15 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckDefaultCheckTemplateVerifyHash(const std::vector<unsigned char>& hash) const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792337369",
      "id" : 792337369,
      "in_reply_to_id" : 777299565,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vOhvZ",
      "original_commit_id" : "479b0c9c164437701d1a70e4026fc19902d56e14",
      "original_line" : 1948,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 863139977,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792337369/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-26T06:12:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792337369",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792337452"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792337452"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "done",
      "commit_id" : "489172c35318276d5c3268da93dd37d35693bb83",
      "created_at" : "2022-01-26T06:12:47Z",
      "diff_hunk" : "@@ -1536,11 +1538,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r792337452",
      "id" : 792337452,
      "in_reply_to_id" : 777299822,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vOhws",
      "original_commit_id" : "b6d2ba82fd55ce83aac1f8d910781a3166abb9b9",
      "original_line" : 1548,
      "original_position" : 21,
      "original_start_line" : 1547,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 863140060,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792337452/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-26T06:12:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792337452",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I think I've addressed all outstanding feedback!\r\n\r\nI've kept a copy of the prior revision here https://github.com/JeremyRubin/bitcoin/tree/checktemplateverify-rebase-1-25-22-pre.",
      "created_at" : "2022-01-26T09:02:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1021996280",
      "id" : 1021996280,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII58486mz4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1021996280/reactions"
      },
      "updated_at" : "2022-01-26T09:02:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1021996280",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-01-28T08:41:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1024000053",
      "id" : 1024000053,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII5849CQA1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024000053/reactions"
      },
      "updated_at" : "2022-01-28T08:41:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024000053",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r796620655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/796620655"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "please use brackets here (maybe just run clang-format)",
      "commit_id" : "489172c35318276d5c3268da93dd37d35693bb83",
      "created_at" : "2022-02-01T13:57:18Z",
      "diff_hunk" : "@@ -0,0 +1,213 @@\n+// Copyright (c) 2013-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/tx_check.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <script/interpreter.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <test/data/ctvhash.json.h>\n+#include <test/util/setup_common.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <version.h>\n+\n+#include <iostream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <univalue.h>\n+\n+UniValue read_json(const std::string& jsondata);\n+\n+BOOST_FIXTURE_TEST_SUITE(ctvhash_tests, BasicTestingSetup)\n+\n+// Goal: check that CTV Hash Functions generate correct hash\n+BOOST_AUTO_TEST_CASE(ctvhash_from_data)\n+{\n+    UniValue tests = read_json(std::string(json_tests::ctvhash, json_tests::ctvhash + sizeof(json_tests::ctvhash)));\n+\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        UniValue test = tests[idx];\n+        std::string strTest = test.write();\n+        // comment\n+        if (test.isStr())\n+            continue;\n+        else if (test.isObject()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r796620655",
      "id" : 796620655,
      "line" : 38,
      "node_id" : "PRRC_kwDOABII584ve3dv",
      "original_commit_id" : "489172c35318276d5c3268da93dd37d35693bb83",
      "original_line" : 38,
      "original_position" : 38,
      "original_start_line" : 36,
      "path" : "src/test/ctvhash_tests.cpp",
      "position" : 38,
      "pull_request_review_id" : 869164121,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/796620655/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 36,
      "start_side" : "RIGHT",
      "updated_at" : "2022-02-01T14:03:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/796620655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r796623244"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/796623244"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "please remove this c-style cast, use a functional cast instead (maybe could remove the other c-style casts above this as well)",
      "commit_id" : "489172c35318276d5c3268da93dd37d35693bb83",
      "created_at" : "2022-02-01T14:00:02Z",
      "diff_hunk" : "@@ -64,6 +64,7 @@ static std::map<std::string, unsigned int> mapFlagNames = {\n     {std::string(\"DISCOURAGE_UPGRADABLE_PUBKEYTYPE\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE},\n     {std::string(\"DISCOURAGE_OP_SUCCESS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS},\n     {std::string(\"DISCOURAGE_UPGRADABLE_TAPROOT_VERSION\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION},\n+    {std::string(\"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"), (unsigned int) SCRIPT_VERIFY_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r796623244",
      "id" : 796623244,
      "line" : 67,
      "node_id" : "PRRC_kwDOABII584ve4GM",
      "original_commit_id" : "489172c35318276d5c3268da93dd37d35693bb83",
      "original_line" : 67,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 4,
      "pull_request_review_id" : 869164121,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/796623244/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-01T14:03:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/796623244",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r796625843"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/796625843"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "please remove this c-style cast",
      "commit_id" : "489172c35318276d5c3268da93dd37d35693bb83",
      "created_at" : "2022-02-01T14:02:43Z",
      "diff_hunk" : "@@ -241,35 +250,38 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             BOOST_CHECK_MESSAGE(CheckTransaction(tx, state), strTest);\n             BOOST_CHECK(state.IsValid());\n \n-            PrecomputedTransactionData txdata(tx);\n+            PrecomputedTransactionData txdata(tx, nullptr);\n             unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n+            unsigned int extra_verify_flags = has_extra_flags? ParseScriptFlags(test[3].get_str()) : 0;\n \n             // Check that the test gives a valid combination of flags (otherwise VerifyScript will throw). Don't edit the flags.\n             if (~verify_flags != FillFlags(~verify_flags)) {\n                 BOOST_ERROR(\"Bad test flags: \" << strTest);\n             }\n \n-            BOOST_CHECK_MESSAGE(CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~verify_flags, txdata, strTest, /*expect_valid=*/true),\n+            BOOST_CHECK_MESSAGE(CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, extra_verify_flags|~verify_flags, txdata, strTest, /* expect_valid=*/ true),\n                                 \"Tx unexpectedly failed: \" << strTest);\n \n             // Backwards compatibility of script verification flags: Removing any flag(s) should not invalidate a valid transaction\n             for (const auto& [name, flag] : mapFlagNames) {\n                 // Removing individual flags\n-                unsigned int flags = TrimFlags(~(verify_flags | flag));\n-                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /*expect_valid=*/true)) {\n+                unsigned int flags = TrimFlags(extra_verify_flags | ~(verify_flags | flag));\n+                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid=*/ true)) {\n                     BOOST_ERROR(\"Tx unexpectedly failed with flag \" << name << \" unset: \" << strTest);\n                 }\n                 // Removing random combinations of flags\n-                flags = TrimFlags(~(verify_flags | (unsigned int)InsecureRandBits(mapFlagNames.size())));\n-                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /*expect_valid=*/true)) {\n+                flags = TrimFlags(extra_verify_flags | ~(verify_flags | (unsigned int)InsecureRandBits(mapFlagNames.size())));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r796625843",
      "id" : 796625843,
      "line" : 273,
      "node_id" : "PRRC_kwDOABII584ve4uz",
      "original_commit_id" : "489172c35318276d5c3268da93dd37d35693bb83",
      "original_line" : 273,
      "original_position" : 68,
      "original_start_line" : null,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 68,
      "pull_request_review_id" : 869164121,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/796625843/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-01T14:03:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/796625843",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6443210?v=4",
         "events_url" : "https://api.github.com/users/PastaPastaPasta/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PastaPastaPasta/followers",
         "following_url" : "https://api.github.com/users/PastaPastaPasta/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PastaPastaPasta/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PastaPastaPasta",
         "id" : 6443210,
         "login" : "PastaPastaPasta",
         "node_id" : "MDQ6VXNlcjY0NDMyMTA=",
         "organizations_url" : "https://api.github.com/users/PastaPastaPasta/orgs",
         "received_events_url" : "https://api.github.com/users/PastaPastaPasta/received_events",
         "repos_url" : "https://api.github.com/users/PastaPastaPasta/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PastaPastaPasta/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PastaPastaPasta/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PastaPastaPasta"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've rebenched the [`bench/ctv` branch](https://github.com/jamesob/bitcoin/commit/2957c02046f0ec49d84796bed28f016cbb8d6a39) on a more contemporary region of the chain (https://github.com/chaincodelabs/bitcoinperf/pull/65) and the slowdown is now negligible.\r\n\r\n\r\n\r\n|          bench name           |                                                                     command                                                                      |\r\n|-------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| ibd.local.range.667200.700000 | `bitcoind -dbcache=8000 -debug=coindb -debug=bench -listen=0 -connect=0 -addnode=127.0.0.1:8888 -prune=9999999 -printtoconsole=0 -assumevalid=0` |\r\n\r\n\r\n\r\n### bench/ctv vs. $mergebase (absolute)\r\n|                  bench name                   |  x  |         bench/ctv         |         $mergebase         |\r\n|-----------------------------------------------|----:|---------------------------|----------------------------|\r\n| ibd.local.range.667200.700000.total_secs      |   3 | 3059.7889 (Â± 4.3977)      | 3052.3830 (Â± 10.1913)      |\r\n| ibd.local.range.667200.700000.peak_rss_KiB    |   3 | 4956666.6667 (Â± 795.2012) | 4955257.3333 (Â± 2029.4717) |\r\n| ibd.local.range.667200.700000.cpu_kernel_secs |   3 | 311.7000 (Â± 2.8379)       | 311.5333 (Â± 0.6437)        |\r\n| ibd.local.range.667200.700000.cpu_user_secs   |   3 | 30756.6100 (Â± 24.4480)    | 30731.1800 (Â± 59.6497)     |\r\n\r\n\r\n### bench/ctv vs. $mergebase (relative)\r\n|                  bench name                   |  x  | bench/ctv | $mergebase |\r\n|-----------------------------------------------|----:|----------:|-----------:|\r\n| ibd.local.range.667200.700000.total_secs      |   3 |     1.002 |          1 |\r\n| ibd.local.range.667200.700000.peak_rss_KiB    |   3 |     1.000 |          1 |\r\n| ibd.local.range.667200.700000.cpu_kernel_secs |   3 |     1.001 |          1 |\r\n| ibd.local.range.667200.700000.cpu_user_secs   |   3 |     1.001 |          1 |",
      "created_at" : "2022-02-01T14:48:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1026922813",
      "id" : 1026922813,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII5849NZk9",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1026922813/reactions"
      },
      "updated_at" : "2022-02-01T14:48:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1026922813",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r798228449"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/798228449"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I ran clang format it doesn't modify this line?",
      "commit_id" : "bbbcca5f809c36367b7a482822f39d90a1deee1c",
      "created_at" : "2022-02-03T05:45:57Z",
      "diff_hunk" : "@@ -0,0 +1,213 @@\n+// Copyright (c) 2013-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/tx_check.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <script/interpreter.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <test/data/ctvhash.json.h>\n+#include <test/util/setup_common.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <version.h>\n+\n+#include <iostream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <univalue.h>\n+\n+UniValue read_json(const std::string& jsondata);\n+\n+BOOST_FIXTURE_TEST_SUITE(ctvhash_tests, BasicTestingSetup)\n+\n+// Goal: check that CTV Hash Functions generate correct hash\n+BOOST_AUTO_TEST_CASE(ctvhash_from_data)\n+{\n+    UniValue tests = read_json(std::string(json_tests::ctvhash, json_tests::ctvhash + sizeof(json_tests::ctvhash)));\n+\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        UniValue test = tests[idx];\n+        std::string strTest = test.write();\n+        // comment\n+        if (test.isStr())\n+            continue;\n+        else if (test.isObject()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r798228449",
      "id" : 798228449,
      "in_reply_to_id" : 796620655,
      "line" : 38,
      "node_id" : "PRRC_kwDOABII584vk__h",
      "original_commit_id" : "489172c35318276d5c3268da93dd37d35693bb83",
      "original_line" : 38,
      "original_position" : 38,
      "original_start_line" : 36,
      "path" : "src/test/ctvhash_tests.cpp",
      "position" : 38,
      "pull_request_review_id" : 871385928,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/798228449/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 36,
      "start_side" : "RIGHT",
      "updated_at" : "2022-02-03T05:45:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/798228449",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r798228614"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/798228614"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "as per the other pr, this can be handled as separate work.",
      "commit_id" : "bbbcca5f809c36367b7a482822f39d90a1deee1c",
      "created_at" : "2022-02-03T05:46:29Z",
      "diff_hunk" : "@@ -64,6 +64,7 @@ static std::map<std::string, unsigned int> mapFlagNames = {\n     {std::string(\"DISCOURAGE_UPGRADABLE_PUBKEYTYPE\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_PUBKEYTYPE},\n     {std::string(\"DISCOURAGE_OP_SUCCESS\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_OP_SUCCESS},\n     {std::string(\"DISCOURAGE_UPGRADABLE_TAPROOT_VERSION\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION},\n+    {std::string(\"DEFAULT_CHECK_TEMPLATE_VERIFY_HASH\"), (unsigned int) SCRIPT_VERIFY_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r798228614",
      "id" : 798228614,
      "in_reply_to_id" : 796623244,
      "line" : 67,
      "node_id" : "PRRC_kwDOABII584vlACG",
      "original_commit_id" : "489172c35318276d5c3268da93dd37d35693bb83",
      "original_line" : 67,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 4,
      "pull_request_review_id" : 871386156,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/798228614/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-03T05:46:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/798228614",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r798228677"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/798228677"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "as per the other pr, this can be handled as separate work.",
      "commit_id" : "bbbcca5f809c36367b7a482822f39d90a1deee1c",
      "created_at" : "2022-02-03T05:46:38Z",
      "diff_hunk" : "@@ -241,35 +250,38 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             BOOST_CHECK_MESSAGE(CheckTransaction(tx, state), strTest);\n             BOOST_CHECK(state.IsValid());\n \n-            PrecomputedTransactionData txdata(tx);\n+            PrecomputedTransactionData txdata(tx, nullptr);\n             unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n+            unsigned int extra_verify_flags = has_extra_flags? ParseScriptFlags(test[3].get_str()) : 0;\n \n             // Check that the test gives a valid combination of flags (otherwise VerifyScript will throw). Don't edit the flags.\n             if (~verify_flags != FillFlags(~verify_flags)) {\n                 BOOST_ERROR(\"Bad test flags: \" << strTest);\n             }\n \n-            BOOST_CHECK_MESSAGE(CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~verify_flags, txdata, strTest, /*expect_valid=*/true),\n+            BOOST_CHECK_MESSAGE(CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, extra_verify_flags|~verify_flags, txdata, strTest, /* expect_valid=*/ true),\n                                 \"Tx unexpectedly failed: \" << strTest);\n \n             // Backwards compatibility of script verification flags: Removing any flag(s) should not invalidate a valid transaction\n             for (const auto& [name, flag] : mapFlagNames) {\n                 // Removing individual flags\n-                unsigned int flags = TrimFlags(~(verify_flags | flag));\n-                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /*expect_valid=*/true)) {\n+                unsigned int flags = TrimFlags(extra_verify_flags | ~(verify_flags | flag));\n+                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid=*/ true)) {\n                     BOOST_ERROR(\"Tx unexpectedly failed with flag \" << name << \" unset: \" << strTest);\n                 }\n                 // Removing random combinations of flags\n-                flags = TrimFlags(~(verify_flags | (unsigned int)InsecureRandBits(mapFlagNames.size())));\n-                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /*expect_valid=*/true)) {\n+                flags = TrimFlags(extra_verify_flags | ~(verify_flags | (unsigned int)InsecureRandBits(mapFlagNames.size())));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r798228677",
      "id" : 798228677,
      "in_reply_to_id" : 796625843,
      "line" : 273,
      "node_id" : "PRRC_kwDOABII584vlADF",
      "original_commit_id" : "489172c35318276d5c3268da93dd37d35693bb83",
      "original_line" : 273,
      "original_position" : 68,
      "original_start_line" : null,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 68,
      "pull_request_review_id" : 871386241,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/798228677/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-03T05:46:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/798228677",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "rebased for the getdeploymentinfo changes.",
      "created_at" : "2022-02-03T19:20:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1029319842",
      "id" : 1029319842,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII5849Wiyi",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1029319842/reactions"
      },
      "updated_at" : "2022-02-03T19:20:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1029319842",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-02-14T12:22:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1039023993",
      "id" : 1039023993,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII58497j95",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1039023993/reactions"
      },
      "updated_at" : "2022-02-14T12:22:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1039023993",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "rebased for the getdeploymentinfo changes again.\r\n\r\ni'm also pinning a copy of the code at this point as https://github.com/JeremyRubin/bitcoin/tree/checktemplateverify-signet-23.0-alpha since master hit feature freeze before split off, will start working on having a concrete thing for people to run signet with.",
      "created_at" : "2022-02-17T21:29:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1043467301",
      "id" : 1043467301,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII584-Mgwl",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1043467301/reactions"
      },
      "updated_at" : "2022-02-17T21:29:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1043467301",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I have verified syncability to this signet using https://github.com/JeremyRubin/bitcoin/tree/checktemplateverify-signet-23.0-alpha \r\n\r\n```\r\n[signet]\r\nsignetchallenge=512102946e8ba8eca597194e7ed90377d9bbebc5d17a9609ab3e35e706612ee882759351ae\r\naddnode=50.18.75.225\r\n```\r\n\r\nThis should be operational. Let me know if there is any issues you experience (likely with signet itself, but CTV too).",
      "created_at" : "2022-02-17T21:45:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1043482733",
      "id" : 1043482733,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII584-Mkht",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1043482733/reactions"
      },
      "updated_at" : "2022-02-17T21:45:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1043482733",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "rebased onto release candidate here: https://github.com/JeremyRubin/bitcoin/tree/checktemplateverify-v23.0rc2, will do a rebase onto release when it is done.\r\n\r\nI have rebased this branch onto master, which will now be divergent with the v23 release.",
      "created_at" : "2022-03-19T15:32:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1073030228",
      "id" : 1073030228,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII584_9SRU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1073030228/reactions"
      },
      "updated_at" : "2022-03-19T15:32:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1073030228",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "diagnosed the build fail as a silent conflict with another PR that was recently merged, will figure out the best strategy to patching (it's just renaming a variable).",
      "created_at" : "2022-04-20T02:52:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1103417739",
      "id" : 1103417739,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585BxNGL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1103417739/reactions"
      },
      "updated_at" : "2022-04-20T02:52:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1103417739",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK `:checkered_flag:` ð ",
      "created_at" : "2022-04-22T18:25:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1106757162",
      "id" : 1106757162,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585B98Yq",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1106757162/reactions"
      },
      "updated_at" : "2022-04-22T18:25:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1106757162",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r856493461"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856493461"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "For this condition `flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS` we know `flags` is `true` so isn't this logically redundant?",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2022-04-22T18:55:25Z",
      "diff_hunk" : "@@ -616,7 +616,36 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH)) {\n+                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n+                            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n+                        break;\n+                    }\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    // If the argument was not 32 bytes, treat as OP_NOP4:\n+                    switch (stack.back().size()) {\n+                        case 32:\n+                            if (!checker.CheckDefaultCheckTemplateVerifyHash(stack.back())) {\n+                                return set_error(serror, SCRIPT_ERR_TEMPLATE_MISMATCH);\n+                            }\n+                            break;\n+                        default:\n+                            // future upgrade can add semantics for this opcode with different length args\n+                            // so discourage use when applicable\n+                            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r856493461",
      "id" : 856493461,
      "line" : 619,
      "node_id" : "PRRC_kwDOABII584zDQ2V",
      "original_commit_id" : "00f8a091dc32abf99ca36162b0e40235ed63fbe1",
      "original_line" : 619,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 30,
      "pull_request_review_id" : 808682655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 2,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 3,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856493461/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-26T01:05:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856493461",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I am removing my concept ACK noted here (https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-864718834).\r\n\r\nI have serious concerns with the lack of consensus, and the lack of research around alternatives and how they interact with this proposal. A few posts by this PRs author (although interesting and good reads) does not count as consensus or research.",
      "created_at" : "2022-04-22T19:25:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1106795814",
      "id" : 1106795814,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585B-F0m",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 1,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1106795814/reactions"
      },
      "updated_at" : "2022-04-22T19:25:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1106795814",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I have serious concerns with the lack of consensus, and the lack of research around alternatives and how they interact with this proposal.\r\n\r\nCan we read these serious concerns? It would be helpful because I was considering you one of the contributors who uses qubes os, know security and privacy and do not blindly follow others. Maybe this might change my opinion and help others as well.\r\n\r\nYour strong concept ack had conditions that it should pass review and consensus. CTV has a bug bounty and I expect/respect some bitcoin developers even without bounty to report bugs. Review cannot be better for this PR, consensus is something we cannot control and I can't even discuss here. Maybe you should participate on mailing list if the moderators allow you.\r\n\r\n",
      "created_at" : "2022-04-22T20:53:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1106852267",
      "id" : 1106852267,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585B-Tmr",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1106852267/reactions"
      },
      "updated_at" : "2022-04-22T20:53:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1106852267",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "From the bip\r\n> If no scriptSigs are set in the transaction, there is no purpose in hashing the data or including it in the DefaultCheckTemplateVerifyHash, so we elide it. It is expected to be common that no scriptSigs will be set as segwit mandates that the scriptSig must be empty\r\n\r\nIs there a good reason to not just always hash the scriptSigs, whether empty or not, all the same? The reason I ask is bc to me it seems simpler to have a single \"code-path\" here where all the inputs' scriptSigs are hashed, regardless of if they are empty or not. Then you wouldn't need both `GetDefaultCheckTemplateVerifyHashWithScript` & `GetDefaultCheckTemplateVerifyHashEmptyScript`, and the resulting code duplication (and all these light wrappers on top of those two functions - which just seems like extra/unnecessary code and indirection to me). I'd also expect you could then get rid of the `NoScriptSigs` helper and then get rid of all these conditionals based on that in `GetDefaultCheckTemplateVerifyHash`, `BIP119EagerInit`, `CheckDefaultCheckTemplateVerifyHash`.\r\n\r\nThere's already a case where you end up hashing empty scriptSigs anyways, ie [Mixed Script Transactions](https://bitcoin.stackexchange.com/questions/93013/are-all-three-bitcoin-address-types-interoperable-legacy-segwit-native-segwit). With just a single legacy input, [NoScriptSigs](https://github.com/bitcoin/bitcoin/blob/00f8a091dc32abf99ca36162b0e40235ed63fbe1/src/script/interpreter.cpp#L1500) returns `false` and we end up hashing all the null scriptSigs (ie the transaction also spends one or more segwit input(s))\r\n\r\nAll that to say, at a conceptual level I don't see why we don't always just hash all the same data when forming the template hash. I would imagine this simplifies the code here (we get rid of all these conditionals), but this should also simplify things client side when these hashes in the first place in a similar manner.",
      "created_at" : "2022-04-22T22:24:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1106945678",
      "id" : 1106945678,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585B-qaO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1106945678/reactions"
      },
      "updated_at" : "2022-04-22T22:24:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1106945678",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> Can we read these serious concerns?\r\n\r\nLike I stated, the lack of consensus, discussion, and research around alternatives.  I don't want to crowd this PR further, so please contact me elsewhere to discuss (https://robertspigler.com/contact).\r\n\r\n> Maybe you should participate on mailing list if the moderators allow you.\r\n\r\nReading the ML should demonstrate to you how controversial this is.",
      "created_at" : "2022-04-23T03:35:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1107349070",
      "id" : 1107349070,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585CAM5O",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1107349070/reactions"
      },
      "updated_at" : "2022-04-23T03:35:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1107349070",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/24482484?v=4",
         "events_url" : "https://api.github.com/users/Rspigler/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Rspigler/followers",
         "following_url" : "https://api.github.com/users/Rspigler/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Rspigler/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Rspigler",
         "id" : 24482484,
         "login" : "Rspigler",
         "node_id" : "MDQ6VXNlcjI0NDgyNDg0",
         "organizations_url" : "https://api.github.com/users/Rspigler/orgs",
         "received_events_url" : "https://api.github.com/users/Rspigler/received_events",
         "repos_url" : "https://api.github.com/users/Rspigler/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Rspigler/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Rspigler/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Rspigler"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@mjdietzx the reason for hashing separately is that if we ever add OP_CAT to Taproot via successX, the hashing of the scriptsig would make the scripts more complicated / use more space uneccesarily, so avoiding the commitment lets one write more efficient covenants (potentially) in the future.",
      "created_at" : "2022-04-23T03:39:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1107350142",
      "id" : 1107350142,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585CANJ-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1107350142/reactions"
      },
      "updated_at" : "2022-04-23T03:39:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1107350142",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thank you for the response @JeremyRubin. Now I have a bunch of questions/concerns regarding the additional caching in this PR, and it circles back to your response (which I don't fully understand yet and need more time to learn/think about)\r\n\r\nIn 8b653b2442f634ec4753ee9fd0f6ac14b87c3227 you decide to not cache the CTV hash. Makes sense, it's a nice simplification. You label the commit as \"Experimental\" - I take it that you have determined that this was an unnecessary optimization and does not affect DoS safety? _If you did determine this, I'd love to see some benchmark on worst-case scripts to verify that this caching really has a material impact on DoS safety in the first place (ie pragmatic, not just big-O theoretical)_.\r\n\r\n---\r\n\r\nIn some of the in-line code review comments for commit ffbbe6461dca54707aabf7b2a11851b72f99f4b6 concerning caching, you mention:\r\n> the main reason to cache the hashing it to prevent scripts like <H> CTV CTV CTV.... CTV from being able to cause N^2 hashing to occur\r\n\r\n**Q2)** IIUC correctly this is bc, without any caching, for each CTV in the script we'd first need to hash the scriptSigs (if any), and then the ctv hash. So for N CTVs that's (Edit: 2N) ~N^2~ (worst-case). But this commit was before you removed caching the CTV hash in 8b653b2442f634ec4753ee9fd0f6ac14b87c3227, so IIUC worst-case is now N hashes for this script. So you made a (probably good) judgement call that O(N) is acceptable while O(N^2) is a DoS security risk, but is there any justification/proof you can give?\r\n\r\n---\r\n\r\n**Q3)** What is the justification for these refactor commits cab836ff0b20ab7444a5642c4433e8d2cf227302, e1b453ba6e66bb1f6dbd1d2f6152f2cef800fe30? I mean, at a high-level all you're doing in the end is caching a single hash of the scriptSigs, why does this need to be so much more complicated than the existing caching for segwit and taproot? ie changing common function declarations all over the place and then needing `PrecomputedTransactionData::BIP119LazyInit`, `PrecomputedTransactionData::BIP119EagerInit`, `m_bip119_cache_synchronizer` (whatever this is?)\r\n\r\nTo me the way segwit and taproot do caching is much easier to understand and simple than how you do it here. Is it bc you don't have a good heuristic to determine if a given tx `uses_bip119_ctv` (ie when caching scriptSigs is actually necessary for a given `txTo`)? Is there a fundamental reason why this can't be heuristic based like segwit/taproot?\r\n\r\nRelated note: I am assuming that this performance degradation @jamesob [benchmarked here](https://github.com/bitcoin/bitcoin/pull/21702/commits/ffbbe6461dca54707aabf7b2a11851b72f99f4b6#r789776285) has been \"resolved\" in these commits (to justify the additional complexity). Can you confirm what the result/takeaway is here?\r\n\r\nNit: in the PR description you say \"Minus tests and deployment, it's about 180 LOC.\", I'm guessing this was before these commits and needs to be updated?\r\n\r\n---\r\n\r\nAll that said, this brings me to another conceptual question. In the bip as rationale for [Committing to the ScriptSigs Hash](https://github.com/bitcoin/bips/blob/master/bip-0119.mediawiki#committing-to-the-scriptsigs-hash):\r\n\r\n```\r\nWe commit to the hash rather than the values themselves as this is already precomputed for each transaction to optimize SIGHASH_ALL signatures.\r\n```\r\n\r\nObviously this has not already been precomputed or we wouldn't have to compute and cache this hash in the first place, right? Am I missing something? Because otherwise here is how I see it from a high-level:\r\n\r\n1. You determined N hashes was acceptable from a DoS security perspective here 8b653b2442f634ec4753ee9fd0f6ac14b87c3227\r\n2. So as long as we have the scriptSigs hash (whether cached or precomputed like the bip says) we do N hashes in the worst-case\r\n3. And therefore if scriptSigs hash was precomputed, we wouldn't even need **any** additional caching added in this PR. \r\n\r\n**On point 3)** Why even hash the scriptSigs then? This is somewhat related to my previous question about having a single code-path for computing this scriptSig hash. Why not simplify it, only serialize non-empty scriptSigs (for the same reasons I mentioned in my first question, but as-related to DoS security and caching there would then be no extra hash to compute), and with no additional caching at all we are at the same worst-case N hashes for the CTVs in script. And I wonder, would that address your reasoning against [my initial question](https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1106945678):\r\n> the reason for hashing separately is that if we ever add OP_CAT to Taproot via successX, the hashing of the scriptsig would make the scripts more complicated / use more space uneccesarily, so avoiding the commitment lets one write more efficient covenants (potentially) in the future.",
      "created_at" : "2022-04-23T23:39:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1107666137",
      "id" : 1107666137,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585CBaTZ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 1,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1107666137/reactions"
      },
      "updated_at" : "2022-04-25T16:32:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1107666137",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Thank you for the response @JeremyRubin. Now I have a bunch of questions/concerns regarding the additional caching in this PR, and it circles back to your response (which I don't fully understand yet and need more time to learn/think about)\r\n\r\n\r\nThank you very much, these are excellent questions.\r\n\r\n> In [8b653b2](https://github.com/bitcoin/bitcoin/commit/8b653b2442f634ec4753ee9fd0f6ac14b87c3227) you decide to not cache the CTV hash. Makes sense, it's a nice simplification. You label the commit as \"Experimental\" - I take it that you have determined that this was an unnecessary optimization and does not affect DoS safety? _If you did determine this, I'd love to see some benchmark on worst-case scripts to verify that this caching really has a material impact on DoS safety in the first place (ie pragmatic, not just big-O theoretical)_.\r\n\r\nYes, it doesn't affect DoS safety. It doesn't need a benchmark per-se, because CTV hashes are both fixed length (after the non-fixed length portions are cached) so it's not worse than repeated OP_HASH256. So it's better than a benchmark, it's a proof :)\r\n\r\n> In some of the in-line code review comments for commit [ffbbe64](https://github.com/bitcoin/bitcoin/commit/ffbbe6461dca54707aabf7b2a11851b72f99f4b6) concerning caching, you mention:\r\n> \r\n> > the main reason to cache the hashing it to prevent scripts like  CTV CTV CTV.... CTV from being able to cause N^2 hashing to occur\r\n> \r\n> **Q2)** IIUC correctly this is bc, without any caching, for each CTV in the script we'd first need to hash the scriptSigs (if any), and then the ctv hash. So for N CTVs that's N^2 (worst-case). But this commit was before you removed caching the CTV hash in [8b653b2](https://github.com/bitcoin/bitcoin/commit/8b653b2442f634ec4753ee9fd0f6ac14b87c3227), so IIUC worst-case is now N hashes for this script. So you made a (probably good) judgement call that O(N) is acceptable while O(N^2) is a DoS security risk, but is there any justification/proof you can give?\r\n\r\nThis is roughly correct, yes. The issue is that it's N hashes of O(1) data vs N hashes of O(N) data. N hashes of O(1) data already occurs with OP_HASH256 (which does 2 sha256) so you can write scripts already that do more work than CTV.\r\n\r\n> **Q3)** What is the justification for these refactor commits [cab836f](https://github.com/bitcoin/bitcoin/commit/cab836ff0b20ab7444a5642c4433e8d2cf227302), [e1b453b](https://github.com/bitcoin/bitcoin/commit/e1b453ba6e66bb1f6dbd1d2f6152f2cef800fe30)? I mean, at a high-level all you're doing in the end is caching a single hash of the scriptSigs, why does this need to be so much more complicated than the existing caching for segwit and taproot? ie changing common function declarations all over the place and then needing `PrecomputedTransactionData::BIP119LazyInit`, `PrecomputedTransactionData::BIP119EagerInit`, `m_bip119_cache_synchronizer` (whatever this is?)\r\n\r\nIt doesn't need to be... but @jamesob noted a performance regression caused by the naive caching, so he asked me to fix it, and I did.\r\n\r\nWhere it got extra complex is because we have a build target for the interpreter which prevents call_once from being used directly, so I had to do a 'functional dependency injection' for a synchronizer primitive. Another approach would be to implement a call_once of our own that works in single threaded contexts...\r\n\r\n> To me the way segwit and taproot do caching is much easier to understand and simple than how you do it here. Is it bc you don't have a good heuristic to determine if a given tx `uses_bip119_ctv` (ie when caching scriptSigs is actually necessary for a given `txTo`)? Is there a fundamental reason why this can't be heuristic based like segwit/taproot?\r\n\r\nYep, this is pretty much the reason. To do so would require parsing and scanning every input's scripts entirely for CTV, but it wouldn't tell you if CTV even gets executed or not. So instead, we cache on first use.\r\n\r\nOTOH, it is cheap to use the heuristic of has taproot / has segwit v0 and \"should have a signature\"... interestingly, should CTV prove popular, some of the caches for segwit v0 and taproot also become over-eager and maybe we'd make them cache on first use too for maginal benefit!\r\n\r\n> Related note: I am assuming that this performance degradation @jamesob [benchmarked here](https://github.com/bitcoin/bitcoin/pull/21702/commits/ffbbe6461dca54707aabf7b2a11851b72f99f4b6#r789776285) has been \"resolved\" in these commits (to justify the additional complexity). Can you confirm what the result/takeaway is here?\r\n\r\n@jamesob?\r\n\r\n> Nit: in the PR description you say \"Minus tests and deployment, it's about 180 LOC.\", I'm guessing this was before these commits and needs to be updated?\r\n\r\nI suppose... do you know the count, now? It still seems to be around the same LoC of consensus code though?\r\n\r\n> All that said, this brings me to another conceptual question. In the bip as rationale for [Committing to the ScriptSigs Hash](https://github.com/bitcoin/bips/blob/master/bip-0119.mediawiki#committing-to-the-scriptsigs-hash):\r\n> \r\n> ```\r\n> We commit to the hash rather than the values themselves as this is already precomputed for each transaction to optimize SIGHASH_ALL signatures.\r\n> ```\r\n> \r\n> Obviously this has not already been precomputed or we wouldn't have to compute and cache this hash in the first place, right? Am I missing something? Because otherwise here is how I see it from a high-level:\r\n\r\nYep only CTV uses this.\r\n\r\n> 1. You determined N hashes was acceptable from a DoS security perspective here [8b653b2](https://github.com/bitcoin/bitcoin/commit/8b653b2442f634ec4753ee9fd0f6ac14b87c3227)\r\nYep.\r\n\r\n> 2. So as long as we have the scriptSigs hash (whether cached or precomputed like the bip says) we do N hashes in the worst-case\r\nYep.\r\n\r\n> 3. And therefore if scriptSigs hash was precomputed, we wouldn't even need **any** additional caching added in this PR.\r\n\r\nYep\r\n\r\n> **On point 3)** Why even hash the scriptSigs then? This is somewhat related to my previous question about having a single code-path for computing this scriptSig hash. Why not simplify it, only serialize non-empty scriptSigs (for the same reasons I mentioned in my first question, but as-related to DoS security and caching there would then be no extra hash to compute), and with no additional caching at all we are at the same worst-case N hashes for the CTVs in script. And I wonder, would that address your reasoning against [my initial question](https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1106945678):\r\n\r\nIt's not the number of hashes, it's the lenght of the data being hashed. Just flattening the hash would make it harder to cache and wouldn't fix the DoS issue.\r\n\r\n> > the reason for hashing separately is that if we ever add OP_CAT to Taproot via successX, the hashing of the scriptsig would make the scripts more complicated / use more space uneccesarily, so avoiding the commitment lets one write more efficient covenants (potentially) in the future.\r\n\r\nThis is kind of unrelated to DoS, it's just if your covenant needs to reason of scriptsig or not. For a single input tx with taproot input, it's always a no.\r\n",
      "created_at" : "2022-04-24T07:30:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1107779896",
      "id" : 1107779896,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585CB2E4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1107779896/reactions"
      },
      "updated_at" : "2022-04-24T07:30:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1107779896",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Related note: I am assuming that this performance degradation @jamesob [benchmarked here](https://github.com/bitcoin/bitcoin/pull/21702/commits/ffbbe6461dca54707aabf7b2a11851b72f99f4b6#r789776285) has been \"resolved\" in these commits (to justify the additional complexity). Can you confirm what the result/takeaway is here?\r\n\r\nYes, there is now no marginal performance difference on this branch; that was determined when I updated the benchmark in\r\nhttps://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1026922813.\r\n\r\nThe original benchmark I chose for this (enabling CTV from genesis and thus doing all caching from genesis) was naive, because it attributed all caching that is done for segwit/taproot spends to CTV as well (since these caches [are required](https://github.com/jamesob/bitcoin/blob/0e38b84909c5a28df29af9f0d066285a6ee4c823/src/script/interpreter.cpp#L1582-L1586) for CTV), and doesn't isolate the marginal overhead of CTV. It was done as an \"absolute worst case\" bound on performance degradation.\r\n\r\nBut in hindsight this clearly isn't a fair benchmark to CTV, since it includes segwit/taproot overhead. In the next week I'd like to remove all fancy caching stuff that Jeremy has done as a result of my (misleading?) benchmark and see if there is actually a difference in performance on regions of the chain where segwit use is common when using Jeremy's original (simple) approach to caching.\r\n\r\nIn a nutshell: I came up with a pessimistic benchmark that misrepresented CTV's performance impact, then asked why we aren't populating caches lazily (without realizing the practical difficulties as @JeremyRubin describes above), so I inadvertently have caused more complexity in this change than maybe is warranted. I'll report back with update benchmarks in a few days.",
      "created_at" : "2022-04-24T15:02:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1107858652",
      "id" : 1107858652,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585CCJTc",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1107858652/reactions"
      },
      "updated_at" : "2022-04-24T15:02:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1107858652",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@JeremyRubin that response is very helpful - I had a few misunderstandings about how caching works here, but it's all making sense now.\r\n\r\n> N hashes of O(1) data already occurs with OP_HASH256 (which does 2 sha256) so you can write scripts already that do more work than CTV.\r\n\r\nVery good point. I agree w/ this line of reasoning when thinking about DoS safety of CTV. Along these lines, do you happen to know a good worst-case script (ie one of the most computationally expensive scripts) that can be currently run in Bitcoin? Maybe worst-case \"consensus valid\" and worst-case \"is standard / will be relayed\" - I wonder if that can inform what the baseline/minimum caching requirement is here.\r\n\r\n> To do so would require parsing and scanning every input's scripts entirely for CTV, but it wouldn't tell you if CTV even gets executed or not\r\n\r\nMaybe it's moot, but I don't think there is a downside to caching scriptSigs any time an OP_CTV is detected. Even if a CTV is not executed, I don't see any notable performance hit in the rare event we do an extra hash. I'll try to explore this a little unless you've already tried or came to a conclusion here that it's not a good route to go down.\r\n\r\n---\r\n\r\nMy next steps are to do some benchmarking/testing. I want to create one of these worst-case CTV scripts and see how the caching you do in a few of these commits performs. I'll aim to get numbers for runtimes of worst-case \"consensus valid\", and worst-case \"is standard / will be relayed\" CTV scripts for a handful of this PRs commits. If you have any advice or info you can link to (ie if you've already created some of these worst-case scripts) please send my way (feel free to email or IRC)\r\n\r\nAlso interested in hearing @jamesob report when he revisits this!",
      "created_at" : "2022-04-25T01:48:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1107979534",
      "id" : 1107979534,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585CCm0O",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1107979534/reactions"
      },
      "updated_at" : "2022-04-25T01:48:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1107979534",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Concept ACK.\r\n\r\nBeen following CTV for a little while, have a decent understanding of its implementation, use-cases, and impact. I'm not yet a core dev, but I do a lot of work on wallets and have a decent understanding of Bitcoin (although not as much as I would need to speak with any sense of authority). That said, my thoughts are as follows:\r\n\r\nCTV is a very small, conservative change that prevents recursive covenants and the fears surrounding them, while better supporting scalability of more advanced use-cases.\r\n\r\nAs users are expanding what they use Bitcoin for (DLCs, RGB, TARO, LN channels, none of which need CTV), CTV can be a powerful optimization to keep more of these txs off-chain, yet still provable and can still be settled back on-chain.\r\n\r\nIt is similar in this regard to MAST, but while (AFAIU) MAST is purely for trees and can't necessarily backreference, CTV can express DAG-like structures, which can help with de-duplicating redundant tx paths. This could have a dramatic impact on retaining present fee economy (which is quite good) while supporting these expanded use-cases.\r\n\r\nBecause, like it or not, they will be happening with present tools-- and barring any miner-coordinated censorship campaigns against all P2TR txs-- ideally we have more tools in our toolbox to reduce on-chain impact. The earlier developers know we can depend on these tools, the earlier we can get ahead of the inevitably more constrained fee economy regime in the decades to come.\r\n\r\nI will admit, I'm still a novice when it comes to understanding these things, so I might be wrong in some of these assumptions. Feel free to correct.",
      "created_at" : "2022-04-25T02:49:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1108009815",
      "id" : 1108009815,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585CCuNX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1108009815/reactions"
      },
      "updated_at" : "2022-05-03T17:19:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1108009815",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/285690?v=4",
         "events_url" : "https://api.github.com/users/cryptoquick/events{/privacy}",
         "followers_url" : "https://api.github.com/users/cryptoquick/followers",
         "following_url" : "https://api.github.com/users/cryptoquick/following{/other_user}",
         "gists_url" : "https://api.github.com/users/cryptoquick/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/cryptoquick",
         "id" : 285690,
         "login" : "cryptoquick",
         "node_id" : "MDQ6VXNlcjI4NTY5MA==",
         "organizations_url" : "https://api.github.com/users/cryptoquick/orgs",
         "received_events_url" : "https://api.github.com/users/cryptoquick/received_events",
         "repos_url" : "https://api.github.com/users/cryptoquick/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/cryptoquick/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/cryptoquick/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/cryptoquick"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@mjdietzx worst case scripts is an ongoing area of research we can chat about sometime out of band of this PR.\r\n\r\n\r\ni think the thing you misunderstand is that it's \"very expensive\" to detect if CTV is used in any script, so it doesn't make sense to do that instead of just computing the scriptsig hash always or on the first time you use CTV.\r\n\r\n\r\nThe most helpful benchmark you could make for the caching, IMO, would be not to focus on the number of CTVs in the script, but if you do a transaction with N inputs where each has a CTV itself, and test it with parallel CScript validation. That would really hammer the call_once synchronizer which would be, IMO, the most likely to cause slow validation since it causes a single-threadedness for transactions like that. However, call_once is a heavily optimized primitive for exactly this scenario, so it's probably fine. But i'd be interested to see a benchmark!",
      "created_at" : "2022-04-25T16:55:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1108813613",
      "id" : 1108813613,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585CFyct",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1108813613/reactions"
      },
      "updated_at" : "2022-04-25T16:55:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1108813613",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r857854330"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/857854330"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: forgot to add newline between functions",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2022-04-25T17:15:28Z",
      "diff_hunk" : "@@ -198,6 +198,13 @@ unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const\n     return subscript.GetSigOpCount(true);\n }\n \n+bool CScript::IsPayToBareDefaultCheckTemplateVerifyHash() const\n+{\n+    // Extra-fast test for pay-to-bare-default-check-template-verify-hash CScripts:\n+    return (this->size() == 34 &&\n+            (*this)[0] == 0x20 &&\n+            (*this)[33] == OP_CHECKTEMPLATEVERIFY);\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r857854330",
      "id" : 857854330,
      "line" : 207,
      "node_id" : "PRRC_kwDOABII584zIdF6",
      "original_commit_id" : "2c3f8994c1a5fc97a82f1863ae1161b28b29e0f5",
      "original_line" : 207,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "src/script/script.cpp",
      "position" : 19,
      "pull_request_review_id" : 808682655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/857854330/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-26T01:05:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/857854330",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r857872337"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/857872337"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is this used anymore?",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2022-04-25T17:38:52Z",
      "diff_hunk" : "@@ -1416,12 +1460,68 @@ uint256 GetSpentScriptsSHA256(const std::vector<CTxOut>& outputs_spent)\n     return ss.GetSHA256();\n }\n \n+/* Not Exported, just convenience */\n+template<typename TxType>\n+uint256 GetDefaultCheckTemplateVerifyHashWithScript(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n+                                const uint256& scriptSig_hash, const uint32_t input_index) {\n+    auto h = CHashWriter(SER_GETHASH, 0)\n+        << tx.nVersion\n+        << tx.nLockTime\n+        << scriptSig_hash\n+        << uint32_t(tx.vin.size())\n+        << sequences_hash\n+        << uint32_t(tx.vout.size())\n+        << outputs_hash\n+        << input_index;\n+    return h.GetSHA256();\n+}\n+\n+template<typename TxType>\n+uint256 GetDefaultCheckTemplateVerifyHashEmptyScript(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n+                                const uint32_t input_index) {\n+    auto h = CHashWriter(SER_GETHASH, 0)\n+        << tx.nVersion\n+        << tx.nLockTime\n+        << uint32_t(tx.vin.size())\n+        << sequences_hash\n+        << uint32_t(tx.vout.size())\n+        << outputs_hash\n+        << input_index;\n+    return h.GetSHA256();\n+}\n \n } // namespace\n \n+template<typename TxType>\n+uint256 GetDefaultCheckTemplateVerifyHash(const TxType& tx, uint32_t input_index) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r857872337",
      "id" : 857872337,
      "line" : 1471,
      "node_id" : "PRRC_kwDOABII584zIhfR",
      "original_commit_id" : "2c3f8994c1a5fc97a82f1863ae1161b28b29e0f5",
      "original_line" : 1471,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 97,
      "pull_request_review_id" : 808682655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/857872337/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-26T01:05:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/857872337",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r857880060"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/857880060"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "you forgot to remove the corresponding function definition in the cpp file (same as the nit I left there)?",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2022-04-25T17:49:09Z",
      "diff_hunk" : "@@ -196,8 +205,6 @@ struct PrecomputedTransactionData\n \n /* Standard Template Hash Declarations */\n template<typename TxType>\n-uint256 GetDefaultCheckTemplateVerifyHash(const TxType& tx, uint32_t input_index);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r857880060",
      "id" : 857880060,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584zIjX8",
      "original_commit_id" : "f15ae3beff1e5adc0d4c829724e5a6b371064fc7",
      "original_line" : 199,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : null,
      "pull_request_review_id" : 808682655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/857880060/reactions"
      },
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-26T01:05:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/857880060",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r858062491"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/858062491"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: also `input_index` should probably be `const`, but moot if we can just get rid of this",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2022-04-25T22:04:00Z",
      "diff_hunk" : "@@ -1416,12 +1460,68 @@ uint256 GetSpentScriptsSHA256(const std::vector<CTxOut>& outputs_spent)\n     return ss.GetSHA256();\n }\n \n+/* Not Exported, just convenience */\n+template<typename TxType>\n+uint256 GetDefaultCheckTemplateVerifyHashWithScript(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n+                                const uint256& scriptSig_hash, const uint32_t input_index) {\n+    auto h = CHashWriter(SER_GETHASH, 0)\n+        << tx.nVersion\n+        << tx.nLockTime\n+        << scriptSig_hash\n+        << uint32_t(tx.vin.size())\n+        << sequences_hash\n+        << uint32_t(tx.vout.size())\n+        << outputs_hash\n+        << input_index;\n+    return h.GetSHA256();\n+}\n+\n+template<typename TxType>\n+uint256 GetDefaultCheckTemplateVerifyHashEmptyScript(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n+                                const uint32_t input_index) {\n+    auto h = CHashWriter(SER_GETHASH, 0)\n+        << tx.nVersion\n+        << tx.nLockTime\n+        << uint32_t(tx.vin.size())\n+        << sequences_hash\n+        << uint32_t(tx.vout.size())\n+        << outputs_hash\n+        << input_index;\n+    return h.GetSHA256();\n+}\n \n } // namespace\n \n+template<typename TxType>\n+uint256 GetDefaultCheckTemplateVerifyHash(const TxType& tx, uint32_t input_index) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r858062491",
      "id" : 858062491,
      "in_reply_to_id" : 857872337,
      "line" : 1471,
      "node_id" : "PRRC_kwDOABII584zJP6b",
      "original_commit_id" : "2c3f8994c1a5fc97a82f1863ae1161b28b29e0f5",
      "original_line" : 1471,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 97,
      "pull_request_review_id" : 808682655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/858062491/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-26T01:05:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/858062491",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r858062830"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/858062830"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: can be const",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2022-04-25T22:04:38Z",
      "diff_hunk" : "@@ -1806,6 +1947,22 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckDefaultCheckTemplateVerifyHash(const Span<const unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txTo) {\n+        txdata->BIP119LazyInit(*txTo);\n+        uint256 hash_tmpl = txdata->m_scriptSigs_single_hash.IsNull() ?",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r858062830",
      "id" : 858062830,
      "line" : 1932,
      "node_id" : "PRRC_kwDOABII584zJP_u",
      "original_commit_id" : "2c3f8994c1a5fc97a82f1863ae1161b28b29e0f5",
      "original_line" : 1932,
      "original_position" : 207,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 207,
      "pull_request_review_id" : 808682655,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/858062830/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-26T01:05:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/858062830",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r859049770"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/859049770"
         }
      },
      "author_association" : "NONE",
      "body" : "should case 8, 9 still exist if doing nothing and breaking out of the switch on these conditions",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2022-04-26T18:59:19Z",
      "diff_hunk" : "@@ -0,0 +1,213 @@\n+// Copyright (c) 2013-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/tx_check.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <script/interpreter.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <test/data/ctvhash.json.h>\n+#include <test/util/setup_common.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <version.h>\n+\n+#include <iostream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <univalue.h>\n+\n+UniValue read_json(const std::string& jsondata);\n+\n+BOOST_FIXTURE_TEST_SUITE(ctvhash_tests, BasicTestingSetup)\n+\n+// Goal: check that CTV Hash Functions generate correct hash\n+BOOST_AUTO_TEST_CASE(ctvhash_from_data)\n+{\n+    UniValue tests = read_json(std::string(json_tests::ctvhash, json_tests::ctvhash + sizeof(json_tests::ctvhash)));\n+\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        UniValue test = tests[idx];\n+        std::string strTest = test.write();\n+        // comment\n+        if (test.isStr())\n+            continue;\n+        else if (test.isObject()) {\n+            std::string raw_tx;\n+            std::vector<uint256> hash;\n+            std::vector<uint32_t> spend_index;\n+            try {\n+                auto& hash_arr = test[\"result\"].get_array();\n+                for (size_t i = 0; i < hash_arr.size(); ++i) {\n+                    hash.emplace_back();\n+                    hash.back().SetHex(hash_arr[i].get_str());\n+                    // reverse because python's sha256().digest().hex() is\n+                    // backwards\n+                    std::reverse(hash.back().begin(), hash.back().end());\n+                }\n+            } catch (...) {\n+                BOOST_ERROR(\"Bad test: Results could not be deserialized\" << strTest);\n+                break;\n+            }\n+            try {\n+                auto& spend_index_arr = test[\"spend_index\"].get_array();\n+                for (size_t i = 0; i < spend_index_arr.size(); ++i) {\n+                    spend_index.emplace_back(static_cast<uint32_t>(spend_index_arr[i].get_int64()));\n+                }\n+            } catch (...) {\n+                BOOST_ERROR(\"Bad test: spend_index could not be deserialized\" << strTest);\n+                break;\n+            }\n+            if (spend_index.size() != hash.size()) {\n+                BOOST_ERROR(\"Bad test: Spend Indexes not same length as Result Hashes: \" << strTest);\n+                break;\n+            }\n+            CMutableTransaction tx;\n+            try {\n+                raw_tx = test[\"hex_tx\"].get_str();\n+                // deserialize test data\n+                CDataStream stream(ParseHex(raw_tx), SER_NETWORK, PROTOCOL_VERSION);\n+                tx = CMutableTransaction(deserialize, stream);\n+            } catch (...) {\n+                BOOST_ERROR(\"Bad test, couldn't deserialize hex_tx: \" << strTest);\n+                continue;\n+            }\n+            PrecomputedTransactionData data{tx, nullptr};\n+            data.BIP119LazyInit(tx);\n+            for (size_t i = 0; i < hash.size(); ++i) {\n+                uint256 sh = GetDefaultCheckTemplateVerifyHash(tx, data.m_outputs_single_hash, data.m_sequences_single_hash, spend_index[i]);\n+                if (sh != hash[i]) {\n+                    BOOST_ERROR(\"Expected: \" << sh << \" Got: \" << hash[i] << \" For:\\n\"\n+                                             << strTest);\n+                }\n+            }\n+            // Change all of the outpoints and there should be no difference.\n+            FastRandomContext fr;\n+\n+            for (auto i = 0; i < 200; ++i) {\n+                CMutableTransaction txc = tx;\n+                bool hash_will_change = false;\n+                // do n mutations, 50% of being 1, 50% chance of being 2-11\n+                const uint64_t n_mutations = fr.randbool()? (fr.randrange(10)+2) : 1;\n+                for (uint64_t j = 0; j < n_mutations; ++j) {\n+                    // on the first 50 passes, modify in ways that will not change hash\n+                    const int mutate_field = i < 50 ? fr.randrange(2) : fr.randrange(10);\n+                    switch (mutate_field) {\n+                    case 0: {\n+                        // no need to rejection sample on 256 bits\n+                        auto which = fr.randrange(tx.vin.size());\n+                        tx.vin[which].prevout.hash = fr.rand256();\n+                        tx.vin[which].prevout.n = fr.rand32();\n+                        break;\n+                    }\n+                    case 1: {\n+                        auto which = fr.randrange(tx.vin.size());\n+                        tx.vin[which].scriptWitness.stack.push_back(fr.randbytes(500));\n+                        break;\n+                    }\n+                    case 2: {\n+                        // Mutate a scriptSig\n+                        txc.vin[0].scriptSig.push_back('x');\n+                        hash_will_change = true;\n+                        break;\n+                    }\n+                    case 3: {\n+                        // Mutate a sequence\n+                        do {\n+                            txc.vin.back().nSequence = fr.rand32();\n+                        } while (txc.vin.back().nSequence == tx.vin.back().nSequence);\n+                        hash_will_change = true;\n+                        break;\n+                    }\n+                    case 4: {\n+                        // Mutate nVersion\n+                        do {\n+                            txc.nVersion = static_cast<int32_t>(fr.rand32());\n+                        } while (txc.nVersion == tx.nVersion);\n+                        hash_will_change = true;\n+                        break;\n+                    }\n+                    case 5: {\n+                        // Mutate output amount\n+                        auto which = fr.randrange(tx.vout.size());\n+                        txc.vout[which].nValue += 1;\n+                        hash_will_change = true;\n+                        break;\n+                    }\n+                    case 6: {\n+                        // Mutate output script\n+                        auto which = fr.randrange(tx.vout.size());\n+                        txc.vout[which].scriptPubKey.push_back('x');\n+                        hash_will_change = true;\n+                        break;\n+                    }\n+                    case 7: {\n+                        // Mutate nLockTime\n+                        do {\n+                            txc.nLockTime = fr.rand32();\n+                        } while (txc.nLockTime == tx.nLockTime);\n+                        hash_will_change = true;\n+                        break;\n+                    }\n+                    case 8: {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r859049770",
      "id" : 859049770,
      "line" : 155,
      "node_id" : "PRRC_kwDOABII584zNA8q",
      "original_commit_id" : "2c3f8994c1a5fc97a82f1863ae1161b28b29e0f5",
      "original_line" : 155,
      "original_position" : 155,
      "original_start_line" : null,
      "path" : "src/test/ctvhash_tests.cpp",
      "position" : 155,
      "pull_request_review_id" : 953866667,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/859049770/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-26T21:33:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/859049770",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/88121568?v=4",
         "events_url" : "https://api.github.com/users/vicariousdrama/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vicariousdrama/followers",
         "following_url" : "https://api.github.com/users/vicariousdrama/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vicariousdrama/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vicariousdrama",
         "id" : 88121568,
         "login" : "vicariousdrama",
         "node_id" : "MDQ6VXNlcjg4MTIxNTY4",
         "organizations_url" : "https://api.github.com/users/vicariousdrama/orgs",
         "received_events_url" : "https://api.github.com/users/vicariousdrama/received_events",
         "repos_url" : "https://api.github.com/users/vicariousdrama/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vicariousdrama/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vicariousdrama/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vicariousdrama"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "General thumbs down for this",
      "created_at" : "2022-04-28T08:34:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1111902452",
      "id" : 1111902452,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585CRkj0",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 1,
         "confused" : 1,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1111902452/reactions"
      },
      "updated_at" : "2022-04-28T08:34:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1111902452",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22755371?v=4",
         "events_url" : "https://api.github.com/users/brokep/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brokep/followers",
         "following_url" : "https://api.github.com/users/brokep/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brokep/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brokep",
         "id" : 22755371,
         "login" : "brokep",
         "node_id" : "MDQ6VXNlcjIyNzU1Mzcx",
         "organizations_url" : "https://api.github.com/users/brokep/orgs",
         "received_events_url" : "https://api.github.com/users/brokep/received_events",
         "repos_url" : "https://api.github.com/users/brokep/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brokep/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brokep/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brokep"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for your input -- in general, comment like this in Bitcoin Core are given with a Nack, of which there are a few kinds.\r\n\r\n- Approach NACK: your idea is good, but did it the wrong way\r\n- Concept NACK: this is a bad idea\r\n- NACK: this shouldn't be merged\r\n\r\nAccording to the contributors guide, you should also give reason so that your issue might be addressed by the author.\r\n\r\nCheers!",
      "created_at" : "2022-04-28T23:37:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1112748949",
      "id" : 1112748949,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585CUzOV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1112748949/reactions"
      },
      "updated_at" : "2022-04-28T23:37:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1112748949",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r862290907"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862290907"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "hmm you're probably right about that! I think it's an artifact of how I wrote this test, can clean up -- interesting it didn't get a dead code warning.",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2022-04-30T03:52:17Z",
      "diff_hunk" : "@@ -0,0 +1,213 @@\n+// Copyright (c) 2013-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/tx_check.h>\n+#include <consensus/validation.h>\n+#include <hash.h>\n+#include <script/interpreter.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <test/data/ctvhash.json.h>\n+#include <test/util/setup_common.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n+#include <version.h>\n+\n+#include <iostream>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <univalue.h>\n+\n+UniValue read_json(const std::string& jsondata);\n+\n+BOOST_FIXTURE_TEST_SUITE(ctvhash_tests, BasicTestingSetup)\n+\n+// Goal: check that CTV Hash Functions generate correct hash\n+BOOST_AUTO_TEST_CASE(ctvhash_from_data)\n+{\n+    UniValue tests = read_json(std::string(json_tests::ctvhash, json_tests::ctvhash + sizeof(json_tests::ctvhash)));\n+\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        UniValue test = tests[idx];\n+        std::string strTest = test.write();\n+        // comment\n+        if (test.isStr())\n+            continue;\n+        else if (test.isObject()) {\n+            std::string raw_tx;\n+            std::vector<uint256> hash;\n+            std::vector<uint32_t> spend_index;\n+            try {\n+                auto& hash_arr = test[\"result\"].get_array();\n+                for (size_t i = 0; i < hash_arr.size(); ++i) {\n+                    hash.emplace_back();\n+                    hash.back().SetHex(hash_arr[i].get_str());\n+                    // reverse because python's sha256().digest().hex() is\n+                    // backwards\n+                    std::reverse(hash.back().begin(), hash.back().end());\n+                }\n+            } catch (...) {\n+                BOOST_ERROR(\"Bad test: Results could not be deserialized\" << strTest);\n+                break;\n+            }\n+            try {\n+                auto& spend_index_arr = test[\"spend_index\"].get_array();\n+                for (size_t i = 0; i < spend_index_arr.size(); ++i) {\n+                    spend_index.emplace_back(static_cast<uint32_t>(spend_index_arr[i].get_int64()));\n+                }\n+            } catch (...) {\n+                BOOST_ERROR(\"Bad test: spend_index could not be deserialized\" << strTest);\n+                break;\n+            }\n+            if (spend_index.size() != hash.size()) {\n+                BOOST_ERROR(\"Bad test: Spend Indexes not same length as Result Hashes: \" << strTest);\n+                break;\n+            }\n+            CMutableTransaction tx;\n+            try {\n+                raw_tx = test[\"hex_tx\"].get_str();\n+                // deserialize test data\n+                CDataStream stream(ParseHex(raw_tx), SER_NETWORK, PROTOCOL_VERSION);\n+                tx = CMutableTransaction(deserialize, stream);\n+            } catch (...) {\n+                BOOST_ERROR(\"Bad test, couldn't deserialize hex_tx: \" << strTest);\n+                continue;\n+            }\n+            PrecomputedTransactionData data{tx, nullptr};\n+            data.BIP119LazyInit(tx);\n+            for (size_t i = 0; i < hash.size(); ++i) {\n+                uint256 sh = GetDefaultCheckTemplateVerifyHash(tx, data.m_outputs_single_hash, data.m_sequences_single_hash, spend_index[i]);\n+                if (sh != hash[i]) {\n+                    BOOST_ERROR(\"Expected: \" << sh << \" Got: \" << hash[i] << \" For:\\n\"\n+                                             << strTest);\n+                }\n+            }\n+            // Change all of the outpoints and there should be no difference.\n+            FastRandomContext fr;\n+\n+            for (auto i = 0; i < 200; ++i) {\n+                CMutableTransaction txc = tx;\n+                bool hash_will_change = false;\n+                // do n mutations, 50% of being 1, 50% chance of being 2-11\n+                const uint64_t n_mutations = fr.randbool()? (fr.randrange(10)+2) : 1;\n+                for (uint64_t j = 0; j < n_mutations; ++j) {\n+                    // on the first 50 passes, modify in ways that will not change hash\n+                    const int mutate_field = i < 50 ? fr.randrange(2) : fr.randrange(10);\n+                    switch (mutate_field) {\n+                    case 0: {\n+                        // no need to rejection sample on 256 bits\n+                        auto which = fr.randrange(tx.vin.size());\n+                        tx.vin[which].prevout.hash = fr.rand256();\n+                        tx.vin[which].prevout.n = fr.rand32();\n+                        break;\n+                    }\n+                    case 1: {\n+                        auto which = fr.randrange(tx.vin.size());\n+                        tx.vin[which].scriptWitness.stack.push_back(fr.randbytes(500));\n+                        break;\n+                    }\n+                    case 2: {\n+                        // Mutate a scriptSig\n+                        txc.vin[0].scriptSig.push_back('x');\n+                        hash_will_change = true;\n+                        break;\n+                    }\n+                    case 3: {\n+                        // Mutate a sequence\n+                        do {\n+                            txc.vin.back().nSequence = fr.rand32();\n+                        } while (txc.vin.back().nSequence == tx.vin.back().nSequence);\n+                        hash_will_change = true;\n+                        break;\n+                    }\n+                    case 4: {\n+                        // Mutate nVersion\n+                        do {\n+                            txc.nVersion = static_cast<int32_t>(fr.rand32());\n+                        } while (txc.nVersion == tx.nVersion);\n+                        hash_will_change = true;\n+                        break;\n+                    }\n+                    case 5: {\n+                        // Mutate output amount\n+                        auto which = fr.randrange(tx.vout.size());\n+                        txc.vout[which].nValue += 1;\n+                        hash_will_change = true;\n+                        break;\n+                    }\n+                    case 6: {\n+                        // Mutate output script\n+                        auto which = fr.randrange(tx.vout.size());\n+                        txc.vout[which].scriptPubKey.push_back('x');\n+                        hash_will_change = true;\n+                        break;\n+                    }\n+                    case 7: {\n+                        // Mutate nLockTime\n+                        do {\n+                            txc.nLockTime = fr.rand32();\n+                        } while (txc.nLockTime == tx.nLockTime);\n+                        hash_will_change = true;\n+                        break;\n+                    }\n+                    case 8: {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r862290907",
      "id" : 862290907,
      "in_reply_to_id" : 859049770,
      "line" : 155,
      "node_id" : "PRRC_kwDOABII584zZYPb",
      "original_commit_id" : "2c3f8994c1a5fc97a82f1863ae1161b28b29e0f5",
      "original_line" : 155,
      "original_position" : 155,
      "original_start_line" : null,
      "path" : "src/test/ctvhash_tests.cpp",
      "position" : 155,
      "pull_request_review_id" : 958432419,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862290907/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-30T03:52:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862290907",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r862366759"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862366759"
         }
      },
      "author_association" : "NONE",
      "body" : "Why did you make `PrecomputedTransactionData` non-`const`?",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2022-04-30T15:22:24Z",
      "diff_hunk" : "@@ -24,7 +24,7 @@ PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n \n     result.inputs.resize(psbtx.tx->vin.size());\n \n-    const PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);\n+    PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r862366759",
      "id" : 862366759,
      "line" : 27,
      "node_id" : "PRRC_kwDOABII584zZqwn",
      "original_commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "original_line" : 27,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/node/psbt.cpp",
      "position" : 5,
      "pull_request_review_id" : 958497630,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862366759/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-30T15:29:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862366759",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7918067?v=4",
         "events_url" : "https://api.github.com/users/jaonoctus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jaonoctus/followers",
         "following_url" : "https://api.github.com/users/jaonoctus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jaonoctus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jaonoctus",
         "id" : 7918067,
         "login" : "jaonoctus",
         "node_id" : "MDQ6VXNlcjc5MTgwNjc=",
         "organizations_url" : "https://api.github.com/users/jaonoctus/orgs",
         "received_events_url" : "https://api.github.com/users/jaonoctus/received_events",
         "repos_url" : "https://api.github.com/users/jaonoctus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jaonoctus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jaonoctus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jaonoctus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r862375059"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862375059"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "because I put into it a field which mutates internal state during the LazyInit, which would otherwise not be callable unless I made those fields mutable, which is not a preferred pattern in core.",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2022-04-30T16:46:50Z",
      "diff_hunk" : "@@ -24,7 +24,7 @@ PSBTAnalysis AnalyzePSBT(PartiallySignedTransaction psbtx)\n \n     result.inputs.resize(psbtx.tx->vin.size());\n \n-    const PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);\n+    PrecomputedTransactionData txdata = PrecomputePSBTData(psbtx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r862375059",
      "id" : 862375059,
      "in_reply_to_id" : 862366759,
      "line" : 27,
      "node_id" : "PRRC_kwDOABII584zZsyT",
      "original_commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "original_line" : 27,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/node/psbt.cpp",
      "position" : 5,
      "pull_request_review_id" : 958503804,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862375059/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-30T16:46:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862375059",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Concept NACK on this one. I don't think batched transactions should be handled on the bedrock that is the Bitcoin blockchain. I also can't fathom so many people being in favor of reducing Bitcoin's fungibility like it's nothing, this is extremely dangerous and should never happen, ever. As the BIP itself says: `As covenants are complex to implement and risk of introducing fungibility discriminants they have not been seriously considered for inclusion in Bitcoin.`. I feel like this will also be, for sure, an entry-point for unwanted BIPs that introduce more and more unnecessary complexity and, as a result, the code will be more prone to introduce loopholes. Again, as the BIP itself says: ` in the future, as we become aware of more complex but shown to be safe use cases new template types can be added.`. Strong concept NACK, but kudos on the research done and implementation",
      "created_at" : "2022-05-03T14:24:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1116161982",
      "id" : 1116161982,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585Ch0e-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1116161982/reactions"
      },
      "updated_at" : "2022-05-04T14:39:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1116161982",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/63523165?v=4",
         "events_url" : "https://api.github.com/users/AmadeusK525/events{/privacy}",
         "followers_url" : "https://api.github.com/users/AmadeusK525/followers",
         "following_url" : "https://api.github.com/users/AmadeusK525/following{/other_user}",
         "gists_url" : "https://api.github.com/users/AmadeusK525/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/AmadeusK525",
         "id" : 63523165,
         "login" : "AmadeusK525",
         "node_id" : "MDQ6VXNlcjYzNTIzMTY1",
         "organizations_url" : "https://api.github.com/users/AmadeusK525/orgs",
         "received_events_url" : "https://api.github.com/users/AmadeusK525/received_events",
         "repos_url" : "https://api.github.com/users/AmadeusK525/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/AmadeusK525/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/AmadeusK525/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/AmadeusK525"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> You didn't squash [8ebe9e](https://github.com/bitcoin/bitcoin/pull/21702/commits/8ebe9e35e5d8568c13ac35b1f530daba6c744655) into [93f98](https://github.com/bitcoin/bitcoin/pull/21702/commits/93f98f65f64f5980e649c58a1ad65829fe972745) and [65961](https://github.com/bitcoin/bitcoin/pull/21702/commits/6596110e7fe241c87c80a11c104973d0a865ea9b). Lines 609-615 in `interpreter.h` should be squashed to `93f98` and everything else to `65961`\r\n\r\nThere's a technical reason to not squash these things pertaining to ease of backporting to other clients where Span is not yet available, since the reason for the 'Fixup' was to put it in line with new things available in Core since the code was written. They can be squashed before merge if desired, or left separate.",
      "created_at" : "2022-05-03T15:05:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1116208254",
      "id" : 1116208254,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585Ch_x-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1116208254/reactions"
      },
      "updated_at" : "2022-05-03T15:05:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1116208254",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-05-06T08:51:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1119397197",
      "id" : 1119397197,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585CuKVN",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1119397197/reactions"
      },
      "updated_at" : "2022-05-06T08:51:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1119397197",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r870884902"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/870884902"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nope -- it's checking if flags has discourage_upgradable_nops set, which we don't know (single and vs double).",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2022-05-12T01:58:35Z",
      "diff_hunk" : "@@ -616,7 +616,36 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH)) {\n+                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n+                            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n+                        break;\n+                    }\n+\n+                    if (stack.size() < 1)\n+                        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n+\n+                    // If the argument was not 32 bytes, treat as OP_NOP4:\n+                    switch (stack.back().size()) {\n+                        case 32:\n+                            if (!checker.CheckDefaultCheckTemplateVerifyHash(stack.back())) {\n+                                return set_error(serror, SCRIPT_ERR_TEMPLATE_MISMATCH);\n+                            }\n+                            break;\n+                        default:\n+                            // future upgrade can add semantics for this opcode with different length args\n+                            // so discourage use when applicable\n+                            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r870884902",
      "id" : 870884902,
      "in_reply_to_id" : 856493461,
      "line" : 619,
      "node_id" : "PRRC_kwDOABII584z6KYm",
      "original_commit_id" : "00f8a091dc32abf99ca36162b0e40235ed63fbe1",
      "original_line" : 619,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 30,
      "pull_request_review_id" : 970169400,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/870884902/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-12T01:58:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/870884902",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I don't think batched transactions should be handled on the bedrock that is the Bitcoin blockchain.\r\n\r\nHow do you think batched transactions should be handled?\r\n\r\n>  I also can't fathom so many people being in favor of reducing Bitcoin's fungibility like it's nothing, this is extremely dangerous and should never happen, ever. \r\n\r\nHow much fungibility is reduced with CTV? Do you think bitcoin is fungible and was this ever considered in any other soft fork?\r\n\r\nI would rate bitcoin's fungibility a score of 1 on a scale of 0 to 9 where 0 is bad and 9 good: https://sethforprivacy.com/posts/fungibility-graveyard/\r\n\r\nYou might also find payment pools interesting: https://rubin.io/bitcoin/2021/12/10/advent-13/#fnref:greg\r\n\r\n> Again, as the BIP itself says: in the future, as we become aware of more complex but shown to be safe use cases new template types can be added\r\n\r\nThis is either shared out of context or I am missing something. **The goal of CHECKTEMPLATEVERIFY is to be minimal impact on the existing codebase.** BIP 119 adds a simple covenant known as a *template* that allows for some use cases to be implemented without significant risk. It supports **non-recursive** covenants with no dynamic state. ",
      "created_at" : "2022-05-12T16:59:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1125223847",
      "id" : 1125223847,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585DEY2n",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 2,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 2,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125223847/reactions"
      },
      "updated_at" : "2022-05-12T16:59:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125223847",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> How do you think batched transactions should be handled?\r\n\r\nSecond layer solutions, like the Lightning Network\r\n\r\n> How much fungibility is reduced with CTV? Do you think bitcoin is fungible and was this ever considered in any other soft fork?\r\n\r\nFungibility isn't really a concrete idea since two different things being exactly the same is borderline impossible, physically speaking. Nothing is ever truly fungible. People say paper money is fungible even though the paper can tear and wear, and, even though people still accept it most of the time, they still internalize that a torn bill is worth less than a fresh one. Having said that, Bitcoin is pretty fungible, if you consider a hyperbitcoinized world. People may buy Bitcoin for more/less fiat value based on tx history, but when Bitcoin IS what determines the value, every UTXO has a `value` and they're all worth the same, regardless of where they came from. They can all be spent in the same way, they have the same value, an UTXO with 0.02 BTC has the same amount of BTC as another one with 0.02 BTC in it, they can be used interchangeably. CTV means they CAN'T be used interchangeably, they have to be spent in x way (the only OP_CODE that I consider to slightly reduce BTC's fungibility is the time lock)\r\n\r\n> I would rate bitcoin's fungibility a score of 1 on a scale of 0 to 9 where 0 is bad and 9 good: \r\n\r\nOkay\r\n\r\n> This is either shared out of context or I am missing something. **The goal of CHECKTEMPLATEVERIFY is to be minimal impact on the existing codebase.** BIP 119 adds a simple covenant known as a _template_ that allows for some use cases to be implemented without significant risk. It supports **non-recursive** covenants with no dynamic state.\r\n\r\nThis is definitely NOT taken out of context. It's literally taken right out of the BIP. First line of the `Rationale` section. I don't understand your point.\r\n\r\nEdit: apologies if my words are a bit jumbled, I'm in a hurry right now so I can't go over what I've written to make sure that everything makes sense",
      "created_at" : "2022-05-13T17:04:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1126264950",
      "id" : 1126264950,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585DIXB2",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126264950/reactions"
      },
      "updated_at" : "2022-05-13T17:05:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126264950",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/63523165?v=4",
         "events_url" : "https://api.github.com/users/AmadeusK525/events{/privacy}",
         "followers_url" : "https://api.github.com/users/AmadeusK525/followers",
         "following_url" : "https://api.github.com/users/AmadeusK525/following{/other_user}",
         "gists_url" : "https://api.github.com/users/AmadeusK525/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/AmadeusK525",
         "id" : 63523165,
         "login" : "AmadeusK525",
         "node_id" : "MDQ6VXNlcjYzNTIzMTY1",
         "organizations_url" : "https://api.github.com/users/AmadeusK525/orgs",
         "received_events_url" : "https://api.github.com/users/AmadeusK525/received_events",
         "repos_url" : "https://api.github.com/users/AmadeusK525/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/AmadeusK525/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/AmadeusK525/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/AmadeusK525"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@AmadeusK525 \r\n\r\n> They can all be spent in the same way\r\n\r\nThis reflects a deep misunderstanding as to how Bitcoin works. At bare minimum you need different signatures to move different utxos that are bound to different scripts. In a substantial number of cases you need fundamentally different requirements (multisig, hashlocks, timelocks, etc.)\r\n\r\n> CTV means they CAN'T be used interchangeably, they have to be spent in x way (the only OP_CODE that I consider to slightly reduce BTC's fungibility is the time lock)\r\n\r\nThis has the same *exact* impact as having different UTXOs with different scripts, one of which is multisig and requires co-authorization, and the other is single sig that you hold the key. These aren't \"interchangeable\" either. The spender's inability to move the coins without meeting the conditions has been a property of the Bitcoin network since the Satoshi 0.1 client. There is no net fungibility reduction introduced by CTV.",
      "created_at" : "2022-05-16T22:57:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1128216593",
      "id" : 1128216593,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585DPzgR",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1128216593/reactions"
      },
      "updated_at" : "2022-05-16T22:57:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1128216593",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4033651?v=4",
         "events_url" : "https://api.github.com/users/ProofOfKeags/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ProofOfKeags/followers",
         "following_url" : "https://api.github.com/users/ProofOfKeags/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ProofOfKeags/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ProofOfKeags",
         "id" : 4033651,
         "login" : "ProofOfKeags",
         "node_id" : "MDQ6VXNlcjQwMzM2NTE=",
         "organizations_url" : "https://api.github.com/users/ProofOfKeags/orgs",
         "received_events_url" : "https://api.github.com/users/ProofOfKeags/received_events",
         "repos_url" : "https://api.github.com/users/ProofOfKeags/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ProofOfKeags/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ProofOfKeags/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ProofOfKeags"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@ProofOfKeags Come on, you know what I meant. All UTXOs, once unlocked, can be spent in the same way. This is fundamentally *not* the case with CTV, as the act of unlocking it itself means that you're spending the coins in a predefined way, to a predefined output. That UTXO isn't worth anything to any address except the ones predefined by the scriptPubKey",
      "created_at" : "2022-05-16T23:05:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1128221376",
      "id" : 1128221376,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585DP0rA",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1128221376/reactions"
      },
      "updated_at" : "2022-05-16T23:05:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1128221376",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/63523165?v=4",
         "events_url" : "https://api.github.com/users/AmadeusK525/events{/privacy}",
         "followers_url" : "https://api.github.com/users/AmadeusK525/followers",
         "following_url" : "https://api.github.com/users/AmadeusK525/following{/other_user}",
         "gists_url" : "https://api.github.com/users/AmadeusK525/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/AmadeusK525",
         "id" : 63523165,
         "login" : "AmadeusK525",
         "node_id" : "MDQ6VXNlcjYzNTIzMTY1",
         "organizations_url" : "https://api.github.com/users/AmadeusK525/orgs",
         "received_events_url" : "https://api.github.com/users/AmadeusK525/received_events",
         "repos_url" : "https://api.github.com/users/AmadeusK525/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/AmadeusK525/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/AmadeusK525/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/AmadeusK525"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@AmadeusK525 It just introduces another extrinsic dimension to unlock a spend. To name a few, block time or height for timelocks, preimages for hashlocks, and now output template hashes. Just another tool in the toolbox to take information extrinsic to the blockchain and use it to provide real-world value.",
      "created_at" : "2022-05-16T23:20:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1128231413",
      "id" : 1128231413,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585DP3H1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1128231413/reactions"
      },
      "updated_at" : "2022-05-16T23:20:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1128231413",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/285690?v=4",
         "events_url" : "https://api.github.com/users/cryptoquick/events{/privacy}",
         "followers_url" : "https://api.github.com/users/cryptoquick/followers",
         "following_url" : "https://api.github.com/users/cryptoquick/following{/other_user}",
         "gists_url" : "https://api.github.com/users/cryptoquick/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/cryptoquick",
         "id" : 285690,
         "login" : "cryptoquick",
         "node_id" : "MDQ6VXNlcjI4NTY5MA==",
         "organizations_url" : "https://api.github.com/users/cryptoquick/orgs",
         "received_events_url" : "https://api.github.com/users/cryptoquick/received_events",
         "repos_url" : "https://api.github.com/users/cryptoquick/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/cryptoquick/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/cryptoquick/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/cryptoquick"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@cryptoquick I understand what it does, as I've explained above. I'm not in favor of it.",
      "created_at" : "2022-05-17T18:53:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1129208248",
      "id" : 1129208248,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585DTlm4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1129208248/reactions"
      },
      "updated_at" : "2022-05-17T18:53:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1129208248",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/63523165?v=4",
         "events_url" : "https://api.github.com/users/AmadeusK525/events{/privacy}",
         "followers_url" : "https://api.github.com/users/AmadeusK525/followers",
         "following_url" : "https://api.github.com/users/AmadeusK525/following{/other_user}",
         "gists_url" : "https://api.github.com/users/AmadeusK525/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/AmadeusK525",
         "id" : 63523165,
         "login" : "AmadeusK525",
         "node_id" : "MDQ6VXNlcjYzNTIzMTY1",
         "organizations_url" : "https://api.github.com/users/AmadeusK525/orgs",
         "received_events_url" : "https://api.github.com/users/AmadeusK525/received_events",
         "repos_url" : "https://api.github.com/users/AmadeusK525/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/AmadeusK525/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/AmadeusK525/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/AmadeusK525"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> Come on, you know what I meant. All UTXOs, once unlocked, can be spent in the same way. This is fundamentally not the case with CTV, as the act of unlocking it itself means that you're spending the coins in a predefined way, to a predefined output. That UTXO isn't worth anything to any address except the ones predefined by the scriptPubKey\r\n\r\nI wasn't making some tongue-in-cheek comment. The idea that UTXOs are \"unlocked\" and *then* \"spent\" is entirely wrong. UTXOs move in a single atomic operation. Either the transaction that spends them is valid or it isn't. CTV introduces a primitive to make certain kinds of spends impossible. This is in no way dissimilar from any other opcode in the script VM. UTXOs are only worth something to the receiver if they can manage and spend them as they see fit. If you can spend your CTV bound UTXO to an unencumbered receiver, *it makes no difference* to that person whether it came from a CTV bound input or not.\r\n\r\nThe script that defines the conditions of spending a UTXO is *entirely at the discretion of the receiver*. This was true before CTV, and it is true if CTV is added as an opcode. The net effect here is that there is *zero* reduction in the fungibility of these coins. In fact, I'd even go as far as to say that the fungibility between CTV/non-CTV outputs is superior to the fungibility between L1 and L2 funds, which people are overwhelmingly in favor of.\r\n\r\n> I understand what it does, as I've explained above. I'm not in favor of it.\r\n\r\nI don't think you do. As I stated above the way you are thinking about this reflects a misunderstanding of the fundamental method by which transactions make changes to the UTXO set. The concern about fungibility can only arise if the receiver of the coins does not have the discretion to define the spending conditions. The nature of P2SH/P2WSH makes this more or less impossible since the spending conditions are embedded in the address that you present to the sender to pay you. If they don't have funds that are capable of being spent to an address you define, then it is no different than them not having access to the funds at all.\r\n\r\nConsider a vault scenario. If you have to wait 3 days to be able to spend funds after unvaulting them, that isn't dissimilar from having to wait on a paycheck before paying a vendor.\r\n\r\nAlternatively\r\n\r\nConsider a fiat world analog. Your fiat money is no less fungible by virtue of other people having set up corporations with treasury spending policies or trusts with administrative bylaws.\r\n\r\nI hope this helps dispel the fiction that CTV erodes fungibility.",
      "created_at" : "2022-05-17T19:59:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1129263690",
      "id" : 1129263690,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585DTzJK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1129263690/reactions"
      },
      "updated_at" : "2022-05-17T19:59:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1129263690",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4033651?v=4",
         "events_url" : "https://api.github.com/users/ProofOfKeags/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ProofOfKeags/followers",
         "following_url" : "https://api.github.com/users/ProofOfKeags/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ProofOfKeags/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ProofOfKeags",
         "id" : 4033651,
         "login" : "ProofOfKeags",
         "node_id" : "MDQ6VXNlcjQwMzM2NTE=",
         "organizations_url" : "https://api.github.com/users/ProofOfKeags/orgs",
         "received_events_url" : "https://api.github.com/users/ProofOfKeags/received_events",
         "repos_url" : "https://api.github.com/users/ProofOfKeags/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ProofOfKeags/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ProofOfKeags/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ProofOfKeags"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> The idea that UTXOs are \"unlocked\" and _then_ \"spent\" is entirely wrong. UTXOs move in a single atomic operation. Either the transaction that spends them is valid or it isn't.\r\n\r\nThat's just not true. The act of \"unlocking\" a UTXO is simply providing a valid `scriptSig`. Up until now, no OP code gets information on the outputs of the transaction, so it makes no judgement on how you spend your coins after you've unlocked them. Unlocking just means going forward with the transaction.\r\n\r\n> CTV introduces a primitive to make certain kinds of spends impossible. This is in no way dissimilar from any other opcode in the script VM.\r\n\r\nAgain, it is dissimilar in the sense that it restricts the possible output of a transaction. No other OP code does something like this.\r\n \r\n> The script that defines the conditions of spending a UTXO is _entirely at the discretion of the receiver_.\r\n\r\nThat is also not true. If someone hands you a legacy address and you send them coins through a P2PKH script, but add a timelock via OP_CHECKLOCKTIMEVERIFY, does that mean that you haven't paid them? The one who chose the extra condition of the TimeLock was the sender, not the receiver. Yes, CTV doesn't change who decides the conditions of the spending of a UTXO, but I never claimed it did. \r\n\r\n> The concern about fungibility can only arise if the receiver of the coins does not have the discretion to define the spending conditions.\r\n\r\nWhich is the case with legacy addresses\r\n\r\n> The nature of P2SH/P2WSH makes this more or less impossible since the spending conditions are embedded in the address that you present to the sender to pay you.\r\n\r\nYeah, that's true, P2SH and P2WSH addresses are the only ones where the receiver does, in fact, directly define the conditions, since it literally gives you the scriptPubKey's hash. Other addresses do not do this, so they do not specify conditions. They give the sender variables to use in the scriptPubKey that they create.\r\n\r\n> If they don't have funds that are capable of being spent to an address you define, then it is no different than them not having access to the funds at all.\r\n\r\nSorry, I didn't quite understand this sentence. Isn't this the point I'm trying to make against CTV?\r\n\r\n> I hope this helps dispel the fiction that CTV erodes fungibility.",
      "created_at" : "2022-05-18T01:04:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1129462467",
      "id" : 1129462467,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585DUjrD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1129462467/reactions"
      },
      "updated_at" : "2022-05-18T01:04:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1129462467",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/63523165?v=4",
         "events_url" : "https://api.github.com/users/AmadeusK525/events{/privacy}",
         "followers_url" : "https://api.github.com/users/AmadeusK525/followers",
         "following_url" : "https://api.github.com/users/AmadeusK525/following{/other_user}",
         "gists_url" : "https://api.github.com/users/AmadeusK525/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/AmadeusK525",
         "id" : 63523165,
         "login" : "AmadeusK525",
         "node_id" : "MDQ6VXNlcjYzNTIzMTY1",
         "organizations_url" : "https://api.github.com/users/AmadeusK525/orgs",
         "received_events_url" : "https://api.github.com/users/AmadeusK525/received_events",
         "repos_url" : "https://api.github.com/users/AmadeusK525/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/AmadeusK525/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/AmadeusK525/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/AmadeusK525"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@AmadeusK525 You can emulate CTV using [deleted-key covenants](https://arxiv.org/pdf/2006.16714.pdf). Thus, CTV doesn't introduce any new functionality but only removes the need for a trusted party. \r\n\r\n",
      "created_at" : "2022-05-18T07:54:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1129690227",
      "id" : 1129690227,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585DVbRz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1129690227/reactions"
      },
      "updated_at" : "2022-05-18T07:54:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1129690227",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/12780394?v=4",
         "events_url" : "https://api.github.com/users/RobinLinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RobinLinus/followers",
         "following_url" : "https://api.github.com/users/RobinLinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RobinLinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RobinLinus",
         "id" : 12780394,
         "login" : "RobinLinus",
         "node_id" : "MDQ6VXNlcjEyNzgwMzk0",
         "organizations_url" : "https://api.github.com/users/RobinLinus/orgs",
         "received_events_url" : "https://api.github.com/users/RobinLinus/received_events",
         "repos_url" : "https://api.github.com/users/RobinLinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RobinLinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RobinLinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RobinLinus"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> That's just not true. The act of \"unlocking\" a UTXO is simply providing a valid scriptSig. Up until now, no OP code gets information on the outputs of the transaction, so it makes no judgement on how you spend your coins after you've unlocked them. Unlocking just means going forward with the transaction.\r\n\r\nThe scriptSig commits to the SIGHASH which commits to the outputs, so the outputs *are* included. If this wasn't the case, then the outputs would be malleable after the signature was made. This would be the most dangerous malleability vector ever if it were true, however, by design it is not.\r\n\r\n> That is also not true. If someone hands you a legacy address and you send them coins through a P2PKH script, but add a timelock via OP_CHECKLOCKTIMEVERIFY, does that mean that you haven't paid them? The one who chose the extra condition of the TimeLock was the sender, not the receiver. Yes, CTV doesn't change who decides the conditions of the spending of a UTXO, but I never claimed it did.\r\n\r\nIt does, indeed, mean you haven't paid them. To make this more obvious, if you took that P2PKH script and added a hashlock to it, you haven't paid them. The sender cannot both claim that the receiver has been paid *and* add arbitrary conditions to the receivers script.\r\n\r\n> Sorry, I didn't quite understand this sentence. Isn't this the point I'm trying to make against CTV?\r\n\r\nMy point here is that this is solely the problem of the sender who had to opt into these conditions in the first place. Therefore it can be used as an argument against *any and all forms of restrictions* including multisig, or even single sig where you lost the private keys.",
      "created_at" : "2022-05-19T17:30:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1131992131",
      "id" : 1131992131,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585DeNRD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1131992131/reactions"
      },
      "updated_at" : "2022-05-19T17:30:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1131992131",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4033651?v=4",
         "events_url" : "https://api.github.com/users/ProofOfKeags/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ProofOfKeags/followers",
         "following_url" : "https://api.github.com/users/ProofOfKeags/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ProofOfKeags/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ProofOfKeags",
         "id" : 4033651,
         "login" : "ProofOfKeags",
         "node_id" : "MDQ6VXNlcjQwMzM2NTE=",
         "organizations_url" : "https://api.github.com/users/ProofOfKeags/orgs",
         "received_events_url" : "https://api.github.com/users/ProofOfKeags/received_events",
         "repos_url" : "https://api.github.com/users/ProofOfKeags/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ProofOfKeags/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ProofOfKeags/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ProofOfKeags"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@JeremyRubin could you please rebase it and also resolve CI errors?",
      "created_at" : "2022-09-09T19:25:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1242377798",
      "id" : 1242377798,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585KDS5G",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1242377798/reactions"
      },
      "updated_at" : "2022-09-09T19:25:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1242377798",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "thanks for the ping.\r\n\r\nI need to do some rebasing it looks like, will do so after TAB Conf most likely (working on another project for delivery by then) -- it looks like maybe @ajtowns rebased on his branch above, so perhaps I can just use that rebasing?",
      "created_at" : "2022-09-09T21:07:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1242477627",
      "id" : 1242477627,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585KDrQ7",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1242477627/reactions"
      },
      "updated_at" : "2022-09-09T21:07:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1242477627",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Branch above is 23.0 based, so probably not that helpful",
      "created_at" : "2022-09-09T21:44:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1242504948",
      "id" : 1242504948,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585KDx70",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1242504948/reactions"
      },
      "updated_at" : "2022-09-09T21:44:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1242504948",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r978322320"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978322320"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n            if (!tx.vin[i].scriptSig.empty()) return false;\r\n```",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2022-09-23T07:05:50Z",
      "diff_hunk" : "@@ -189,6 +189,11 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n             if (subscript.GetSigOpCount(true) > MAX_P2SH_SIGOPS) {\n                 return false;\n             }\n+        } else if (whichType == TxoutType::TX_BARE_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH) {\n+            // after activation, only allow bare with no scriptsig.\n+            // pre-activation disallowing enforced via discouraged logic in the\n+            // interpreter.\n+            if (tx.vin[i].scriptSig.size() != 0) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r978322320",
      "id" : 978322320,
      "line" : 196,
      "node_id" : "PRRC_kwDOABII5846UAOQ",
      "original_commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "original_line" : 196,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : 8,
      "pull_request_review_id" : 1117997387,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978322320/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T10:58:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978322320",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r978327831"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978327831"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    using bip_119_cache_synchronizer_t = std::function<void(std::function<void()>)>;\r\n```",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2022-09-23T07:14:12Z",
      "diff_hunk" : "@@ -150,26 +155,42 @@ bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned i\n \n struct PrecomputedTransactionData\n {\n+    // Order of fields is packed below (uint256 is 32 bytes, vector is 24 bytes\n+    // (3 ptrs), ready flags (1 byte each).\n+\n     // BIP341 precomputed data.\n     // These are single-SHA256, see https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#cite_note-16.\n     uint256 m_prevouts_single_hash;\n     uint256 m_sequences_single_hash;\n     uint256 m_outputs_single_hash;\n     uint256 m_spent_amounts_single_hash;\n     uint256 m_spent_scripts_single_hash;\n-    //! Whether the 5 fields above are initialized.\n-    bool m_bip341_taproot_ready = false;\n+\n+    // BIP119 precomputed data (single SHA256).\n+    uint256 m_scriptSigs_single_hash;\n \n     // BIP143 precomputed data (double-SHA256).\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n-    //! Whether the 3 fields above are initialized.\n-    bool m_bip143_segwit_ready = false;\n \n+    // BIP341 cached outputs.\n     std::vector<CTxOut> m_spent_outputs;\n+\n+    //! Whether the bip341 fields above are initialized.\n+    bool m_bip341_taproot_ready = false;\n+\n+    //! Whether the bip119 fields above are initialized directly (nullptr)\n+    //! or lazily (using sync primitves)\n+    typedef std::function<void(std::function<void()>)> bip_119_cache_synchronizer_t;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r978327831",
      "id" : 978327831,
      "line" : 183,
      "node_id" : "PRRC_kwDOABII5846UBkX",
      "original_commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "original_line" : 183,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 52,
      "pull_request_review_id" : 1117997387,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978327831/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T10:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978327831",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r978357483"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978357483"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Shouldn't this be:\r\n\r\n```c++\r\nm_bip119_c_s = (f != nullptr ? f : single_threaded);\r\n```\r\n\r\nor something? Otherwise nothing seems to be done with the `bip_119_cache_synchronizer_t f` that was passed in other than sometimes asserting that it's `nullptr`.",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2022-09-23T07:53:52Z",
      "diff_hunk" : "@@ -1444,19 +1544,60 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_scripts_single_hash = GetSpentScriptsSHA256(m_spent_outputs);\n         m_bip341_taproot_ready = true;\n     }\n+\n+    if (force) {\n+        // Eagerly compute BIP119 state\n+        BIP119EagerInit(txTo);\n+        // Disable Lazy Sync Wrapper\n+        m_bip119_cache_synchronizer = nullptr;\n+    } else if (!m_bip119_cache_synchronizer) {\n+        // If no function was provided, assume that we are single-threaded but\n+        // still cache-on-first-use\n+        auto single_threaded = [&](std::function<void()> f)\n+        {\n+            f();\n+            // disables future calls from recomputing\n+            m_bip119_cache_synchronizer = nullptr;\n+        };\n+        m_bip119_cache_synchronizer = single_threaded;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r978357483",
      "id" : 978357483,
      "line" : 1562,
      "node_id" : "PRRC_kwDOABII5846UIzr",
      "original_commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "original_line" : 1562,
      "original_position" : 149,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 149,
      "pull_request_review_id" : 1118047730,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978357483/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T07:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978357483",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r978425214"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978425214"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/21702/files/c24b553d3fe7db19c8c37934a196334911412a0e#diff-a0337ffd7259e8c7c9a7786d6dbd420c80abfa1afdb34ebae3261109d9ae3c19R1589 this line?",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2022-09-23T09:09:01Z",
      "diff_hunk" : "@@ -1444,19 +1544,60 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_scripts_single_hash = GetSpentScriptsSHA256(m_spent_outputs);\n         m_bip341_taproot_ready = true;\n     }\n+\n+    if (force) {\n+        // Eagerly compute BIP119 state\n+        BIP119EagerInit(txTo);\n+        // Disable Lazy Sync Wrapper\n+        m_bip119_cache_synchronizer = nullptr;\n+    } else if (!m_bip119_cache_synchronizer) {\n+        // If no function was provided, assume that we are single-threaded but\n+        // still cache-on-first-use\n+        auto single_threaded = [&](std::function<void()> f)\n+        {\n+            f();\n+            // disables future calls from recomputing\n+            m_bip119_cache_synchronizer = nullptr;\n+        };\n+        m_bip119_cache_synchronizer = single_threaded;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r978425214",
      "id" : 978425214,
      "in_reply_to_id" : 978357483,
      "line" : 1562,
      "node_id" : "PRRC_kwDOABII5846UZV-",
      "original_commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "original_line" : 1562,
      "original_position" : 149,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 149,
      "pull_request_review_id" : 1118140666,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978425214/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T09:09:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978425214",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r978489402"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978489402"
         }
      },
      "author_association" : "MEMBER",
      "body" : "maybe use `std::optional`?",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2022-09-23T10:24:52Z",
      "diff_hunk" : "@@ -150,26 +155,42 @@ bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned i\n \n struct PrecomputedTransactionData\n {\n+    // Order of fields is packed below (uint256 is 32 bytes, vector is 24 bytes\n+    // (3 ptrs), ready flags (1 byte each).\n+\n     // BIP341 precomputed data.\n     // These are single-SHA256, see https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#cite_note-16.\n     uint256 m_prevouts_single_hash;\n     uint256 m_sequences_single_hash;\n     uint256 m_outputs_single_hash;\n     uint256 m_spent_amounts_single_hash;\n     uint256 m_spent_scripts_single_hash;\n-    //! Whether the 5 fields above are initialized.\n-    bool m_bip341_taproot_ready = false;\n+\n+    // BIP119 precomputed data (single SHA256).\n+    uint256 m_scriptSigs_single_hash;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r978489402",
      "id" : 978489402,
      "line" : 170,
      "node_id" : "PRRC_kwDOABII5846UpA6",
      "original_commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "original_line" : 170,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 37,
      "pull_request_review_id" : 1117997387,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978489402/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T10:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978489402",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r978501965"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978501965"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "No? I'm looking at the `Init()` function, your link is something that calls `Init()` with `f` defaulted to `nullptr`?\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/21702/files/c24b553d3fe7db19c8c37934a196334911412a0e#diff-a0337ffd7259e8c7c9a7786d6dbd420c80abfa1afdb34ebae3261109d9ae3c19R1496",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2022-09-23T10:42:20Z",
      "diff_hunk" : "@@ -1444,19 +1544,60 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_scripts_single_hash = GetSpentScriptsSHA256(m_spent_outputs);\n         m_bip341_taproot_ready = true;\n     }\n+\n+    if (force) {\n+        // Eagerly compute BIP119 state\n+        BIP119EagerInit(txTo);\n+        // Disable Lazy Sync Wrapper\n+        m_bip119_cache_synchronizer = nullptr;\n+    } else if (!m_bip119_cache_synchronizer) {\n+        // If no function was provided, assume that we are single-threaded but\n+        // still cache-on-first-use\n+        auto single_threaded = [&](std::function<void()> f)\n+        {\n+            f();\n+            // disables future calls from recomputing\n+            m_bip119_cache_synchronizer = nullptr;\n+        };\n+        m_bip119_cache_synchronizer = single_threaded;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r978501965",
      "id" : 978501965,
      "in_reply_to_id" : 978357483,
      "line" : 1562,
      "node_id" : "PRRC_kwDOABII5846UsFN",
      "original_commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "original_line" : 1562,
      "original_position" : 149,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 149,
      "pull_request_review_id" : 1118250150,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978501965/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T10:42:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978501965",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r978502987"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978502987"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/21702/files/c24b553d3fe7db19c8c37934a196334911412a0e#diff-97c3a52bc5fad452d82670a7fd291800bae20c7bc35bb82686c2c0a4ea7b5b98R1736-R1737 seems to be the only place where Init's `f` parameter isn't defaulted.",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2022-09-23T10:43:44Z",
      "diff_hunk" : "@@ -1444,19 +1544,60 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_scripts_single_hash = GetSpentScriptsSHA256(m_spent_outputs);\n         m_bip341_taproot_ready = true;\n     }\n+\n+    if (force) {\n+        // Eagerly compute BIP119 state\n+        BIP119EagerInit(txTo);\n+        // Disable Lazy Sync Wrapper\n+        m_bip119_cache_synchronizer = nullptr;\n+    } else if (!m_bip119_cache_synchronizer) {\n+        // If no function was provided, assume that we are single-threaded but\n+        // still cache-on-first-use\n+        auto single_threaded = [&](std::function<void()> f)\n+        {\n+            f();\n+            // disables future calls from recomputing\n+            m_bip119_cache_synchronizer = nullptr;\n+        };\n+        m_bip119_cache_synchronizer = single_threaded;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r978502987",
      "id" : 978502987,
      "in_reply_to_id" : 978357483,
      "line" : 1562,
      "node_id" : "PRRC_kwDOABII5846UsVL",
      "original_commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "original_line" : 1562,
      "original_position" : 149,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 149,
      "pull_request_review_id" : 1118251646,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978502987/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-23T10:43:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/978502987",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r979273387"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/979273387"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think you're right that this is broken -- do you have a test condition that triggers this?\r\n\r\nVery good catch, I think this should be eligible for the bipbounty.org bounty as a Major?\r\n\r\ncc @jamesob can you re-do the benchmarks so we can also see if it'd be reasonable to remove these patches from the PR still?",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2022-09-24T16:49:15Z",
      "diff_hunk" : "@@ -1444,19 +1544,60 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_scripts_single_hash = GetSpentScriptsSHA256(m_spent_outputs);\n         m_bip341_taproot_ready = true;\n     }\n+\n+    if (force) {\n+        // Eagerly compute BIP119 state\n+        BIP119EagerInit(txTo);\n+        // Disable Lazy Sync Wrapper\n+        m_bip119_cache_synchronizer = nullptr;\n+    } else if (!m_bip119_cache_synchronizer) {\n+        // If no function was provided, assume that we are single-threaded but\n+        // still cache-on-first-use\n+        auto single_threaded = [&](std::function<void()> f)\n+        {\n+            f();\n+            // disables future calls from recomputing\n+            m_bip119_cache_synchronizer = nullptr;\n+        };\n+        m_bip119_cache_synchronizer = single_threaded;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r979273387",
      "id" : 979273387,
      "in_reply_to_id" : 978357483,
      "line" : 1562,
      "node_id" : "PRRC_kwDOABII5846Xoar",
      "original_commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "original_line" : 1562,
      "original_position" : 149,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 149,
      "pull_request_review_id" : 1119301417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/979273387/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-24T16:49:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/979273387",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r979529511"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/979529511"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@JeremyRubin yup, I'll do that this week.",
      "commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "created_at" : "2022-09-26T03:17:51Z",
      "diff_hunk" : "@@ -1444,19 +1544,60 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_scripts_single_hash = GetSpentScriptsSHA256(m_spent_outputs);\n         m_bip341_taproot_ready = true;\n     }\n+\n+    if (force) {\n+        // Eagerly compute BIP119 state\n+        BIP119EagerInit(txTo);\n+        // Disable Lazy Sync Wrapper\n+        m_bip119_cache_synchronizer = nullptr;\n+    } else if (!m_bip119_cache_synchronizer) {\n+        // If no function was provided, assume that we are single-threaded but\n+        // still cache-on-first-use\n+        auto single_threaded = [&](std::function<void()> f)\n+        {\n+            f();\n+            // disables future calls from recomputing\n+            m_bip119_cache_synchronizer = nullptr;\n+        };\n+        m_bip119_cache_synchronizer = single_threaded;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r979529511",
      "id" : 979529511,
      "in_reply_to_id" : 978357483,
      "line" : 1562,
      "node_id" : "PRRC_kwDOABII5846Ym8n",
      "original_commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "original_line" : 1562,
      "original_position" : 149,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 149,
      "pull_request_review_id" : 1119538652,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/979529511/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-26T03:17:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/979529511",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r984862273"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984862273"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "had this conversation around taproot times since std::optional became available around then too; probably better to keep the style consistent & do an all-at-once convert to optional in this struct if ever worthwhile?",
      "commit_id" : "d4af88d25dd5e5d8196988bf00c2dcefcc5d96b4",
      "created_at" : "2022-09-30T18:42:55Z",
      "diff_hunk" : "@@ -150,26 +155,42 @@ bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned i\n \n struct PrecomputedTransactionData\n {\n+    // Order of fields is packed below (uint256 is 32 bytes, vector is 24 bytes\n+    // (3 ptrs), ready flags (1 byte each).\n+\n     // BIP341 precomputed data.\n     // These are single-SHA256, see https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#cite_note-16.\n     uint256 m_prevouts_single_hash;\n     uint256 m_sequences_single_hash;\n     uint256 m_outputs_single_hash;\n     uint256 m_spent_amounts_single_hash;\n     uint256 m_spent_scripts_single_hash;\n-    //! Whether the 5 fields above are initialized.\n-    bool m_bip341_taproot_ready = false;\n+\n+    // BIP119 precomputed data (single SHA256).\n+    uint256 m_scriptSigs_single_hash;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r984862273",
      "id" : 984862273,
      "in_reply_to_id" : 978489402,
      "line" : 170,
      "node_id" : "PRRC_kwDOABII5846s85B",
      "original_commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "original_line" : 170,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 37,
      "pull_request_review_id" : 1127225780,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984862273/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-30T18:42:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984862273",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r984863459"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984863459"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/pull/25695#issuecomment-1225973375 was this resolved to a specific preference?",
      "commit_id" : "d4af88d25dd5e5d8196988bf00c2dcefcc5d96b4",
      "created_at" : "2022-09-30T18:44:56Z",
      "diff_hunk" : "@@ -150,26 +155,42 @@ bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned i\n \n struct PrecomputedTransactionData\n {\n+    // Order of fields is packed below (uint256 is 32 bytes, vector is 24 bytes\n+    // (3 ptrs), ready flags (1 byte each).\n+\n     // BIP341 precomputed data.\n     // These are single-SHA256, see https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#cite_note-16.\n     uint256 m_prevouts_single_hash;\n     uint256 m_sequences_single_hash;\n     uint256 m_outputs_single_hash;\n     uint256 m_spent_amounts_single_hash;\n     uint256 m_spent_scripts_single_hash;\n-    //! Whether the 5 fields above are initialized.\n-    bool m_bip341_taproot_ready = false;\n+\n+    // BIP119 precomputed data (single SHA256).\n+    uint256 m_scriptSigs_single_hash;\n \n     // BIP143 precomputed data (double-SHA256).\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n-    //! Whether the 3 fields above are initialized.\n-    bool m_bip143_segwit_ready = false;\n \n+    // BIP341 cached outputs.\n     std::vector<CTxOut> m_spent_outputs;\n+\n+    //! Whether the bip341 fields above are initialized.\n+    bool m_bip341_taproot_ready = false;\n+\n+    //! Whether the bip119 fields above are initialized directly (nullptr)\n+    //! or lazily (using sync primitves)\n+    typedef std::function<void(std::function<void()>)> bip_119_cache_synchronizer_t;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r984863459",
      "id" : 984863459,
      "in_reply_to_id" : 978327831,
      "line" : 183,
      "node_id" : "PRRC_kwDOABII5846s9Lj",
      "original_commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "original_line" : 183,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 52,
      "pull_request_review_id" : 1127227561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984863459/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-30T18:44:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984863459",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r984882096"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984882096"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "update here:\r\n\r\nI've been trying to figure out how/why this was not making a test failure happen, and I think I know how to trigger it with a test case (but haven't written one out). To trigger it, all of the following must be true:\r\n\r\nThings that can be set up deterministically:\r\n1) There is no cached evaluation of the script from a single threaded run (which can happen in the mempool), so this should be tested with a direct block submission\r\n2) 143 and 341 must be disabled OR there must be legacy inputs that have non-empty scriptsigs (to trigger a hash getting computed).\r\n3) There is more than one CTV Input\r\n4) The node is running with multiple workers\r\n\r\nThings that happen by chance (don't know exactly how to trigger this part via a test):\r\n\r\n5) The scriptcheck jobs get scheduled on two different checkqueue workers.\r\n6) There is a data-race on two inputs such that they don't happen to correctly synchronize (CheckQueue has some locks in it)\r\n7) The data-races don't happen to both observe the fully written value -- since the cache is deterministic, on most architectures the cache computations won't result in a \"garbage value\", since the write is the same. So when the single threaded computation finishes, the values will *always* be consistent. This is aided by the fact that the last write to the synchronizer single threaded is to set nullptr for the function, so we either do parallel identical runs, or we do one run and the other observes it. (edit: I guess also 8, that the optimizer can't inline and reorder the effects from calling the synchronizer function, since it doesn't know what f is in advance is relevant too)\r\n\r\n\r\n7 is really the criticial part. Even if we end up using the single threaded initialization, it seems that it does not (on most architectures?) lead to an actual race, no matter what.\r\n\r\nThis isn't to say that this shouldn't get patched -- it's super clearly not formally correct -- but also that it seems not possible to actually write a failing test for, which is what I would normally do under the circumstances.",
      "commit_id" : "d4af88d25dd5e5d8196988bf00c2dcefcc5d96b4",
      "created_at" : "2022-09-30T19:14:40Z",
      "diff_hunk" : "@@ -1444,19 +1544,60 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_scripts_single_hash = GetSpentScriptsSHA256(m_spent_outputs);\n         m_bip341_taproot_ready = true;\n     }\n+\n+    if (force) {\n+        // Eagerly compute BIP119 state\n+        BIP119EagerInit(txTo);\n+        // Disable Lazy Sync Wrapper\n+        m_bip119_cache_synchronizer = nullptr;\n+    } else if (!m_bip119_cache_synchronizer) {\n+        // If no function was provided, assume that we are single-threaded but\n+        // still cache-on-first-use\n+        auto single_threaded = [&](std::function<void()> f)\n+        {\n+            f();\n+            // disables future calls from recomputing\n+            m_bip119_cache_synchronizer = nullptr;\n+        };\n+        m_bip119_cache_synchronizer = single_threaded;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r984882096",
      "id" : 984882096,
      "in_reply_to_id" : 978357483,
      "line" : 1567,
      "node_id" : "PRRC_kwDOABII5846tBuw",
      "original_commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "original_line" : 1562,
      "original_position" : 149,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 154,
      "pull_request_review_id" : 1127263195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984882096/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-30T19:24:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984882096",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r984887969"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984887969"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In any case, patch fixing the issue is here: https://github.com/bitcoin/bitcoin/pull/21702/commits/d4af88d25dd5e5d8196988bf00c2dcefcc5d96b4",
      "commit_id" : "d4af88d25dd5e5d8196988bf00c2dcefcc5d96b4",
      "created_at" : "2022-09-30T19:21:42Z",
      "diff_hunk" : "@@ -1444,19 +1544,60 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_scripts_single_hash = GetSpentScriptsSHA256(m_spent_outputs);\n         m_bip341_taproot_ready = true;\n     }\n+\n+    if (force) {\n+        // Eagerly compute BIP119 state\n+        BIP119EagerInit(txTo);\n+        // Disable Lazy Sync Wrapper\n+        m_bip119_cache_synchronizer = nullptr;\n+    } else if (!m_bip119_cache_synchronizer) {\n+        // If no function was provided, assume that we are single-threaded but\n+        // still cache-on-first-use\n+        auto single_threaded = [&](std::function<void()> f)\n+        {\n+            f();\n+            // disables future calls from recomputing\n+            m_bip119_cache_synchronizer = nullptr;\n+        };\n+        m_bip119_cache_synchronizer = single_threaded;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r984887969",
      "id" : 984887969,
      "in_reply_to_id" : 978357483,
      "line" : 1567,
      "node_id" : "PRRC_kwDOABII5846tDKh",
      "original_commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "original_line" : 1562,
      "original_position" : 149,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 154,
      "pull_request_review_id" : 1127273144,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984887969/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-09-30T19:21:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/984887969",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r985146732"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985146732"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I generally prefer `using` because it's easier to read but yes it's a preference.",
      "commit_id" : "d4af88d25dd5e5d8196988bf00c2dcefcc5d96b4",
      "created_at" : "2022-10-01T21:28:43Z",
      "diff_hunk" : "@@ -150,26 +155,42 @@ bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned i\n \n struct PrecomputedTransactionData\n {\n+    // Order of fields is packed below (uint256 is 32 bytes, vector is 24 bytes\n+    // (3 ptrs), ready flags (1 byte each).\n+\n     // BIP341 precomputed data.\n     // These are single-SHA256, see https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#cite_note-16.\n     uint256 m_prevouts_single_hash;\n     uint256 m_sequences_single_hash;\n     uint256 m_outputs_single_hash;\n     uint256 m_spent_amounts_single_hash;\n     uint256 m_spent_scripts_single_hash;\n-    //! Whether the 5 fields above are initialized.\n-    bool m_bip341_taproot_ready = false;\n+\n+    // BIP119 precomputed data (single SHA256).\n+    uint256 m_scriptSigs_single_hash;\n \n     // BIP143 precomputed data (double-SHA256).\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n-    //! Whether the 3 fields above are initialized.\n-    bool m_bip143_segwit_ready = false;\n \n+    // BIP341 cached outputs.\n     std::vector<CTxOut> m_spent_outputs;\n+\n+    //! Whether the bip341 fields above are initialized.\n+    bool m_bip341_taproot_ready = false;\n+\n+    //! Whether the bip119 fields above are initialized directly (nullptr)\n+    //! or lazily (using sync primitves)\n+    typedef std::function<void(std::function<void()>)> bip_119_cache_synchronizer_t;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r985146732",
      "id" : 985146732,
      "in_reply_to_id" : 978327831,
      "line" : 183,
      "node_id" : "PRRC_kwDOABII5846uCVs",
      "original_commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "original_line" : 183,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 52,
      "pull_request_review_id" : 1127568849,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985146732/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-01T21:28:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985146732",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r985178970"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985178970"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This seems to only show up with gcc not clang for me.",
      "commit_id" : "d4af88d25dd5e5d8196988bf00c2dcefcc5d96b4",
      "created_at" : "2022-10-02T04:58:45Z",
      "diff_hunk" : "@@ -297,11 +297,41 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n         std::string strTest = test.write();\n         if (test[0].isArray())\n         {\n-            if (test.size() != 3 || !test[1].isStr() || !test[2].isStr())\n+            const bool mandatory_fields_present = test.size() >= 3 && test[1].isStr() && test[2].isStr();\n+            const bool one_by_one_fills = test.size() >= 4 ? test[3].isArray() : true;\n+            const bool max_arg_count = test.size() <= 4;\n+            if (!mandatory_fields_present || !max_arg_count || !one_by_one_fills)\n             {\n                 BOOST_ERROR(\"Bad test: \" << strTest);\n                 continue;\n             }\n+            std::vector<std::pair<unsigned int, unsigned int>> excluded_flag_settings;\n+            if (test.size() >= 4) {\n+                try {\n+                    const UniValue& fills = test[3].get_array();\n+                    for (unsigned int i = 0; i < fills.size(); ++i) {\n+                        const UniValue& fill = fills[i].get_obj();\n+                        const UniValue if_unset = fill[\"if_unset\"].get_array();\n+                        const UniValue then_unset = fill[\"then_unset\"].get_array();\n+                        excluded_flag_settings.push_back(std::make_pair(0, 0));\n+                        unsigned int& if_set_flags = excluded_flag_settings.back().first;\n+                        unsigned int& then_set_flags = excluded_flag_settings.back().second;\n+                        for (unsigned int j = 0; j < if_unset.size(); ++j) {\n+                            const auto& flag = mapFlagNames.find(if_unset[j].get_str());\n+                            if (flag == mapFlagNames.end()) BOOST_ERROR(\"Unknown Flag: \" << if_unset[j].get_str());\n+                            if_set_flags |= flag->second;\n+                        }\n+                        for (unsigned int j = 0; j < then_unset.size(); ++j) {\n+                            const auto& flag = mapFlagNames.find(then_unset[j].get_str());\n+                            if (flag == mapFlagNames.end()) BOOST_ERROR(\"Unknown Flag: \" << then_unset[j].get_str());\n+                            then_set_flags |= flag->second;\n+                        }\n+\n+                    }\n+                } catch (std::runtime_error e) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r985178970",
      "id" : 985178970,
      "in_reply_to_id" : 777136919,
      "line" : 329,
      "node_id" : "PRRC_kwDOABII5846uKNa",
      "original_commit_id" : "0162cdd5877c851816d7451ef2e13bb3ea58ffef",
      "original_line" : 329,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 122,
      "pull_request_review_id" : 1127590769,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985178970/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-02T04:58:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985178970",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r985180531"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985180531"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "\"primitives\" -- caught by linter",
      "commit_id" : "d4af88d25dd5e5d8196988bf00c2dcefcc5d96b4",
      "created_at" : "2022-10-02T05:19:34Z",
      "diff_hunk" : "@@ -150,26 +155,42 @@ bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned i\n \n struct PrecomputedTransactionData\n {\n+    // Order of fields is packed below (uint256 is 32 bytes, vector is 24 bytes\n+    // (3 ptrs), ready flags (1 byte each).\n+\n     // BIP341 precomputed data.\n     // These are single-SHA256, see https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#cite_note-16.\n     uint256 m_prevouts_single_hash;\n     uint256 m_sequences_single_hash;\n     uint256 m_outputs_single_hash;\n     uint256 m_spent_amounts_single_hash;\n     uint256 m_spent_scripts_single_hash;\n-    //! Whether the 5 fields above are initialized.\n-    bool m_bip341_taproot_ready = false;\n+\n+    // BIP119 precomputed data (single SHA256).\n+    uint256 m_scriptSigs_single_hash;\n \n     // BIP143 precomputed data (double-SHA256).\n     uint256 hashPrevouts, hashSequence, hashOutputs;\n-    //! Whether the 3 fields above are initialized.\n-    bool m_bip143_segwit_ready = false;\n \n+    // BIP341 cached outputs.\n     std::vector<CTxOut> m_spent_outputs;\n+\n+    //! Whether the bip341 fields above are initialized.\n+    bool m_bip341_taproot_ready = false;\n+\n+    //! Whether the bip119 fields above are initialized directly (nullptr)\n+    //! or lazily (using sync primitves)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r985180531",
      "id" : 985180531,
      "line" : 182,
      "node_id" : "PRRC_kwDOABII5846uKlz",
      "original_commit_id" : "d4af88d25dd5e5d8196988bf00c2dcefcc5d96b4",
      "original_line" : 182,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/script/interpreter.h",
      "position" : 51,
      "pull_request_review_id" : 1127591798,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985180531/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-02T05:19:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985180531",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r985181527"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985181527"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think that means that you should be able to trigger a tsan warning by having a tx with, say, 100 inputs, 10 of which are plain p2pkh, and the remaining 90 are different ctv inputs?",
      "commit_id" : "d4af88d25dd5e5d8196988bf00c2dcefcc5d96b4",
      "created_at" : "2022-10-02T05:32:36Z",
      "diff_hunk" : "@@ -1444,19 +1544,60 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_scripts_single_hash = GetSpentScriptsSHA256(m_spent_outputs);\n         m_bip341_taproot_ready = true;\n     }\n+\n+    if (force) {\n+        // Eagerly compute BIP119 state\n+        BIP119EagerInit(txTo);\n+        // Disable Lazy Sync Wrapper\n+        m_bip119_cache_synchronizer = nullptr;\n+    } else if (!m_bip119_cache_synchronizer) {\n+        // If no function was provided, assume that we are single-threaded but\n+        // still cache-on-first-use\n+        auto single_threaded = [&](std::function<void()> f)\n+        {\n+            f();\n+            // disables future calls from recomputing\n+            m_bip119_cache_synchronizer = nullptr;\n+        };\n+        m_bip119_cache_synchronizer = single_threaded;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r985181527",
      "id" : 985181527,
      "in_reply_to_id" : 978357483,
      "line" : 1567,
      "node_id" : "PRRC_kwDOABII5846uK1X",
      "original_commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "original_line" : 1562,
      "original_position" : 149,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 154,
      "pull_request_review_id" : 1127592569,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985181527/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-02T05:32:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985181527",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r985281929"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985281929"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "i think it should be catchable under tsan (not entirely familiar with what it can and can't catch), but it will require some tuning or a lot of runs to actually get it to trigger? I'll see if I can put something together at some point to test the pre-patch post-patch behaviors.\r\n\r\nwould you prefer leaving this unresolved till such a test exists?",
      "commit_id" : "d4af88d25dd5e5d8196988bf00c2dcefcc5d96b4",
      "created_at" : "2022-10-02T19:03:31Z",
      "diff_hunk" : "@@ -1444,19 +1544,60 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_scripts_single_hash = GetSpentScriptsSHA256(m_spent_outputs);\n         m_bip341_taproot_ready = true;\n     }\n+\n+    if (force) {\n+        // Eagerly compute BIP119 state\n+        BIP119EagerInit(txTo);\n+        // Disable Lazy Sync Wrapper\n+        m_bip119_cache_synchronizer = nullptr;\n+    } else if (!m_bip119_cache_synchronizer) {\n+        // If no function was provided, assume that we are single-threaded but\n+        // still cache-on-first-use\n+        auto single_threaded = [&](std::function<void()> f)\n+        {\n+            f();\n+            // disables future calls from recomputing\n+            m_bip119_cache_synchronizer = nullptr;\n+        };\n+        m_bip119_cache_synchronizer = single_threaded;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r985281929",
      "id" : 985281929,
      "in_reply_to_id" : 978357483,
      "line" : 1567,
      "node_id" : "PRRC_kwDOABII5846ujWJ",
      "original_commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "original_line" : 1562,
      "original_position" : 149,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 154,
      "pull_request_review_id" : 1127681553,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985281929/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-02T19:03:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985281929",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r985894925"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985894925"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This can be tested with this unit test.\r\n\r\n<details>\r\n<summary>Details</summary>\r\n\r\n```diff\r\ndiff --git a/src/test/transaction_tests.cpp b/src/test/transaction_tests.cpp\r\nindex 3f9b54075..9b9f2f443 100644\r\n--- a/src/test/transaction_tests.cpp\r\n+++ b/src/test/transaction_tests.cpp\r\n@@ -1018,6 +1018,27 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\r\n         t.vout[0].nValue = 239;\r\n         CheckIsNotStandard(t, \"dust\");\r\n     }\r\n+\r\n+    // Check Bare CTV standardness\r\n+    CMutableTransaction txFromCTV;\r\n+    txFromCTV.vout.resize(1);\r\n+    auto dummyHash = GetRandHash();\r\n+    txFromCTV.vout[0].scriptPubKey = CScript() << ToByteVector(dummyHash) << OP_CHECKTEMPLATEVERIFY;\r\n+    txFromCTV.vout[0].nValue = 1000;\r\n+    AddCoins(coins, CTransaction(txFromCTV), 0);\r\n+\r\n+    CMutableTransaction txToCTV;\r\n+    txToCTV.vout.resize(1);\r\n+    txToCTV.vout[0].scriptPubKey = GetScriptForDestination(PKHash(key.GetPubKey()));\r\n+    txToCTV.vout[0].nValue = 1000;\r\n+    txToCTV.vin.resize(1);\r\n+    txToCTV.vin[0].prevout.n = 0;\r\n+    txToCTV.vin[0].prevout.hash = txFromCTV.GetHash();\r\n+    BOOST_CHECK(::AreInputsStandard(CTransaction(txToCTV), coins));\r\n+\r\n+    // scriptSig must be empty\r\n+    txToCTV.vin[0].scriptSig = CScript() << OP_0 << ToByteVector(dummyHash);\r\n+    BOOST_CHECK(!::AreInputsStandard(CTransaction(txToCTV), coins));\r\n }\r\n \r\n BOOST_AUTO_TEST_SUITE_END()\r\n```\r\n\r\n</details>",
      "commit_id" : "d4af88d25dd5e5d8196988bf00c2dcefcc5d96b4",
      "created_at" : "2022-10-03T14:55:08Z",
      "diff_hunk" : "@@ -189,6 +189,11 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n             if (subscript.GetSigOpCount(true) > MAX_P2SH_SIGOPS) {\n                 return false;\n             }\n+        } else if (whichType == TxoutType::TX_BARE_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH) {\n+            // after activation, only allow bare with no scriptsig.\n+            // pre-activation disallowing enforced via discouraged logic in the\n+            // interpreter.\n+            if (tx.vin[i].scriptSig.size() != 0) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r985894925",
      "id" : 985894925,
      "in_reply_to_id" : 778026207,
      "line" : 196,
      "node_id" : "PRRC_kwDOABII5846w5AN",
      "original_commit_id" : "b08fd3717d2751389f599fa89de626465e4da110",
      "original_line" : 196,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : 8,
      "pull_request_review_id" : 1128548604,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985894925/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-03T16:22:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985894925",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r985916052"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985916052"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: I think this is more readable, also guaranteed to be constant time\r\n```suggestion\r\n                    if (stack.empty())\r\n```",
      "commit_id" : "d4af88d25dd5e5d8196988bf00c2dcefcc5d96b4",
      "created_at" : "2022-10-03T15:10:15Z",
      "diff_hunk" : "@@ -591,7 +591,39 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     break;\n                 }\n \n-                case OP_NOP1: case OP_NOP4: case OP_NOP5:\n+                case OP_CHECKTEMPLATEVERIFY:\n+                {\n+                    // if flags not enabled; treat as a NOP4\n+                    if (!(flags & SCRIPT_VERIFY_DEFAULT_CHECK_TEMPLATE_VERIFY_HASH)) {\n+                        if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS)\n+                            return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS);\n+                        break;\n+                    }\n+\n+                    if (stack.size() < 1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r985916052",
      "id" : 985916052,
      "line" : 603,
      "node_id" : "PRRC_kwDOABII5846w-KU",
      "original_commit_id" : "d4af88d25dd5e5d8196988bf00c2dcefcc5d96b4",
      "original_line" : 603,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 14,
      "pull_request_review_id" : 1128548604,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985916052/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-03T16:22:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/985916052",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22493292?v=4",
         "events_url" : "https://api.github.com/users/aureleoules/events{/privacy}",
         "followers_url" : "https://api.github.com/users/aureleoules/followers",
         "following_url" : "https://api.github.com/users/aureleoules/following{/other_user}",
         "gists_url" : "https://api.github.com/users/aureleoules/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/aureleoules",
         "id" : 22493292,
         "login" : "aureleoules",
         "node_id" : "MDQ6VXNlcjIyNDkzMjky",
         "organizations_url" : "https://api.github.com/users/aureleoules/orgs",
         "received_events_url" : "https://api.github.com/users/aureleoules/received_events",
         "repos_url" : "https://api.github.com/users/aureleoules/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/aureleoules/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/aureleoules/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/aureleoules"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r989811928"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989811928"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Here's a test, I think: https://github.com/ajtowns/bitcoin/commit/5beeb28bde367769e189a7ff5857a190bc19c15b\r\n\r\nWhen I run it under tsan without your patch, I get: \"[node 1] Node returned non-zero exit code (66) when stopping\"; with errors in the logs that (after lots of trimming) look like:\r\n\r\n```\r\nWARNING: ThreadSanitizer: data race (pid=993218)\r\n  Read of size 8 at 0x7bb40001ce58 by thread T7:\r\n    #6 uint256 (anonymous namespace)::GetDefaultCheckTemplateVerifyHashEmptyScript<CTransaction>(CTransaction const&, uint256 const&, uint256 const&, unsigned int) src/./src/script/interpreter.cpp:1463:9 (bitcoind+0x11e0fd2) (BuildId: ec0\r\n7d2273791a5c68cd1432ff17dfea367618622)\r\n\r\n  Location is heap block of size 36720 at 0x7bb400014000 allocated by thread T17:\r\n    #7 CChainState::ConnectBlock(CBlock const&, BlockValidationState&, CBlockIndex*, CCoinsViewCache&, bool) src/./src/validation.cpp:2180:45 (bitcoind+0x8d4595) (BuildId: ec07d2273791a5c68cd1432ff17dfea367618622)\r\n\r\n  Location is heap block of size 36720 at 0x7bb400014000 allocated by thread T17:\r\n    #1 std::__new_allocator<PrecomputedTransactionData>::allocate(unsigned long, void const*) /usr/bin/../lib/gcc/x86_64-linux-gnu/12/../../../../include/c++/12/bits/new_allocator.h:137:27 (bitcoind+0x95673e) (BuildId: ec07d2273791a5c68cd1432ff17dfea367618622)\r\n\r\n  Thread T7 'b-scriptch.6' (tid=993226, running) created by main thread at:\r\n  Thread T4 'b-scriptch.3' (tid=993223, running) created by main thread at:\r\n  Thread T17 'b-msghand' (tid=993243, running) created by main thread at:\r\n```\r\n\r\nconfigure options are `./configure --with-gui=no CC=clang CXX=clang++ --with-incompatible-bdb --enable-zmq --enable-debug --enable-werror --with-sanitizers=thread --enable-suppress-external-warnings --enable-experimental`\r\n\r\nWith your patch, it passes and there aren't any ThreadSanitizer entries in the log.\r\n\r\nEDIT: Maybe worth noting that the test case doesn't satisfy Jeremy's condition 2 above (341/143 disabled or non-empty scriptSig). Not sure what that implies, if anything.",
      "commit_id" : "d4af88d25dd5e5d8196988bf00c2dcefcc5d96b4",
      "created_at" : "2022-10-07T08:06:41Z",
      "diff_hunk" : "@@ -1444,19 +1544,60 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_scripts_single_hash = GetSpentScriptsSHA256(m_spent_outputs);\n         m_bip341_taproot_ready = true;\n     }\n+\n+    if (force) {\n+        // Eagerly compute BIP119 state\n+        BIP119EagerInit(txTo);\n+        // Disable Lazy Sync Wrapper\n+        m_bip119_cache_synchronizer = nullptr;\n+    } else if (!m_bip119_cache_synchronizer) {\n+        // If no function was provided, assume that we are single-threaded but\n+        // still cache-on-first-use\n+        auto single_threaded = [&](std::function<void()> f)\n+        {\n+            f();\n+            // disables future calls from recomputing\n+            m_bip119_cache_synchronizer = nullptr;\n+        };\n+        m_bip119_cache_synchronizer = single_threaded;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r989811928",
      "id" : 989811928,
      "in_reply_to_id" : 978357483,
      "line" : 1567,
      "node_id" : "PRRC_kwDOABII5846_1TY",
      "original_commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "original_line" : 1562,
      "original_position" : 149,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 154,
      "pull_request_review_id" : 1134078650,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989811928/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-07T08:11:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/989811928",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r990394416"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/990394416"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "condition 2 i think was incorrect, because the line:\r\n```\r\n m_scriptSigs_single_hash = NoScriptSigs(txTo) ? uint256{} : GetScriptSigsSHA256(txTo);\r\n```\r\n\r\nwhich could be written instead as \r\n```\r\nif (!NoScriptSigs(txTo)) {\r\n    m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\r\n}\r\n```\r\n\r\nand then the condition 2 would be accurate, I think. But because it's using `?` it always assigns, even though the new value is the same as the zero initialize.",
      "commit_id" : "d4af88d25dd5e5d8196988bf00c2dcefcc5d96b4",
      "created_at" : "2022-10-07T18:23:42Z",
      "diff_hunk" : "@@ -1444,19 +1544,60 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         m_spent_scripts_single_hash = GetSpentScriptsSHA256(m_spent_outputs);\n         m_bip341_taproot_ready = true;\n     }\n+\n+    if (force) {\n+        // Eagerly compute BIP119 state\n+        BIP119EagerInit(txTo);\n+        // Disable Lazy Sync Wrapper\n+        m_bip119_cache_synchronizer = nullptr;\n+    } else if (!m_bip119_cache_synchronizer) {\n+        // If no function was provided, assume that we are single-threaded but\n+        // still cache-on-first-use\n+        auto single_threaded = [&](std::function<void()> f)\n+        {\n+            f();\n+            // disables future calls from recomputing\n+            m_bip119_cache_synchronizer = nullptr;\n+        };\n+        m_bip119_cache_synchronizer = single_threaded;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r990394416",
      "id" : 990394416,
      "in_reply_to_id" : 978357483,
      "line" : 1567,
      "node_id" : "PRRC_kwDOABII5847CDgw",
      "original_commit_id" : "c24b553d3fe7db19c8c37934a196334911412a0e",
      "original_line" : 1562,
      "original_position" : 149,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 154,
      "pull_request_review_id" : 1134923451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/990394416/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-10-07T18:23:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/990394416",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'm happy to report that on the basis of some new benchmarking results, CTV doesn't negatively affect IBD performance with any statistical significance. And even better, I think the changes here can likely be simplified. The lazy building of caches that @JeremyRubin added to this changeset as a result of my previous bench results are IMO unnecessary. Egg on my face, sorry Jeremy!\r\n\r\n![ibd local range 667200 697200](https://user-images.githubusercontent.com/73197/196952478-c30d4221-c89e-41e1-8f7e-5706f3d2bfb3.png)\r\n\r\n---\r\n\r\nThe issue with the previous set of benchmarks (as noted here: https://github.com/bitcoin/bitcoin/pull/21702#pullrequestreview-859718084) is that when we unconditionally enable CTV script flags for a region of the chain that doesn't have any segwit/taproot activity, we trigger cache building that needs to happen for those sorts of spends anyway. In other words, most of the PrecomputedTransactionData activity that goes on for CTV is needed by segwit/taproot anyway. So basically, the previous benchmarks (same benchmark on an earlier chain region) were unfairly penalizing CTV by heaping on all the precomputation that has to happen for segwit/taproot too.\r\n\r\nMy latest benchmark uses a version of this branch with all the lazy caching changes stripped out ([`jamesob-ctv-nocache-bench`](https://github.com/jamesob/bitcoin/tree/jamesob-ctv-nocache-bench), [diff from this branch](https://github.com/jamesob/bitcoin/compare/jeremy-ctv..jamesob-ctv-nocache-bench)). And the numbers are encouraging:\r\n\r\n|          bench name           |                                                                                                     command                                                                                                      |\r\n|-------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| ibd.local.range.667200.697200 | `bitcoind -dbcache=10000 -debug=coindb -debug=bench -listen=0 -connect=0 -addnode=127.0.0.1:8888 -prune=9999999 -printtoconsole=0 -assumevalid=000000000000000000176c192f42ad13ab159fdb20198b87e7ba3c001e47b876` |\r\n\r\n|                  bench name                   |  x  | jamesob/jamesob-ctv-nocache-bench |         $mergebase         |\r\n|-----------------------------------------------|----:|-----------------------------------|----------------------------|\r\n| ibd.local.range.667200.697200.total_secs      |   3 | 4578.0364 (Â± 7.0356)              | 4560.9678 (Â± 23.2994)      |\r\n| ibd.local.range.667200.697200.peak_rss_KiB    |   3 | 4810300.0000 (Â± 821.0302)         | 4806725.3333 (Â± 1218.2844) |\r\n| ibd.local.range.667200.697200.cpu_kernel_secs |   3 | 208.8000 (Â± 0.8003)               | 208.3500 (Â± 1.4718)        |\r\n| ibd.local.range.667200.697200.cpu_user_secs   |   3 | 26689.3600 (Â± 11.6545)            | 26481.8333 (Â± 39.7697)     |\r\n\r\n\r\n|                  bench name                   |  x  | jamesob/jamesob-ctv-nocache-bench | $mergebase |\r\n|-----------------------------------------------|----:|----------------------------------:|-----------:|\r\n| ibd.local.range.667200.697200.total_secs      |   3 |                             1.004 |          1 |\r\n| ibd.local.range.667200.697200.peak_rss_KiB    |   3 |                             1.001 |          1 |\r\n| ibd.local.range.667200.697200.cpu_kernel_secs |   3 |                             1.002 |          1 |\r\n| ibd.local.range.667200.697200.cpu_user_secs   |   3 |                             1.008 |          1 |\r\n\r\n---\r\n\r\nThe always-enable-CTV branch performance is within variance of the baseline run. This tells me that **there is no performance difference** in block connection with CTV enabled when witness/taproot block script flags are enabled (which I think is now the whole chain?).\r\n\r\nThe commits that I stripped off for [my branch](https://github.com/jamesob/bitcoin/compare/jeremy-ctv..jamesob-ctv-nocache-bench) are \r\n- https://github.com/bitcoin/bitcoin/pull/21702/commits/da7034f25ceb474fc7e12d77ad429362643f8197\r\n- https://github.com/bitcoin/bitcoin/pull/21702/commits/c38952d908e33a37508fc2632650db52c5ac84fa\r\n- https://github.com/bitcoin/bitcoin/pull/21702/commits/c92a484f20d21fa6f519d784126d675c5661b4df\r\n- https://github.com/bitcoin/bitcoin/pull/21702/commits/9b47db1a546e383ccd026adcddb60e4c06625517\r\n- https://github.com/bitcoin/bitcoin/pull/21702/commits/d4af88d25dd5e5d8196988bf00c2dcefcc5d96b4\r\n\r\n---\r\n\r\nThis PR should be rebased and personally I think the above commits should be removed. @JeremyRubin if you'd like me to do this I'm happy to. Good news, everybody!",
      "created_at" : "2022-10-20T13:14:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1285520612",
      "id" : 1285520612,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585Mn3zk",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1285520612/reactions"
      },
      "updated_at" : "2022-10-20T13:14:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1285520612",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Amazing news! Thank you for your dilligence in re-testing. If I understand correctly, it still might be worth it to add a patch that e.g. only applies CTV rules if we're greater than activation height or something, so IBD has no penalty? Or is that no longer a concern either?",
      "created_at" : "2022-10-20T16:31:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1285844409",
      "id" : 1285844409,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585MpG25",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1285844409/reactions"
      },
      "updated_at" : "2022-10-20T16:31:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1285844409",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> If I understand correctly, it still might be worth it to add a patch that e.g. only applies CTV rules if we're greater than activation height or something, so IBD has no penalty? Or is that no longer a concern either?\r\n\r\nYes I think that's right, given that even though taproot and segwit activations are buried, [we only precompute tx data in the presence of scriptWitness](https://github.com/jamesob/bitcoin/blob/c28488ea58511994537307f52105f12e31941c83/src/script/interpreter.cpp#L1511-L1527\r\n).",
      "created_at" : "2022-10-20T17:50:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1285930581",
      "id" : 1285930581,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585Mpb5V",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1285930581/reactions"
      },
      "updated_at" : "2022-10-20T17:50:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1285930581",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "NACK\n\nThis feature adds too much complexity and may have unintended outcomes for Bitcoin and its users. The great majority of the current Bitcoin community is not capable of auditing or assessing the risks of CTV. Further, CTV benefits are not significant, or in-demand enough to be worth any risk at all. Instead let's see what the limits of creativity are by using taproot and chainless solutions (append-logs, mutual contracts, etc), before resorting to another bitcoin fork being slipped onto unknowing users.",
      "created_at" : "2022-12-02T19:52:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1335764227",
      "id" : 1335764227,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585PniUD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1335764227/reactions"
      },
      "updated_at" : "2022-12-02T19:52:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1335764227",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18273620?v=4",
         "events_url" : "https://api.github.com/users/BitcoinErrorLog/events{/privacy}",
         "followers_url" : "https://api.github.com/users/BitcoinErrorLog/followers",
         "following_url" : "https://api.github.com/users/BitcoinErrorLog/following{/other_user}",
         "gists_url" : "https://api.github.com/users/BitcoinErrorLog/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/BitcoinErrorLog",
         "id" : 18273620,
         "login" : "BitcoinErrorLog",
         "node_id" : "MDQ6VXNlcjE4MjczNjIw",
         "organizations_url" : "https://api.github.com/users/BitcoinErrorLog/orgs",
         "received_events_url" : "https://api.github.com/users/BitcoinErrorLog/received_events",
         "repos_url" : "https://api.github.com/users/BitcoinErrorLog/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/BitcoinErrorLog/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/BitcoinErrorLog/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/BitcoinErrorLog"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@BitcoinErrorLog people should speak for themselves and not for \"the great majority of the current Bitcoin community\" because that's presumptuous.",
      "created_at" : "2022-12-03T12:38:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1336152373",
      "id" : 1336152373,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585PpBE1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1336152373/reactions"
      },
      "updated_at" : "2022-12-03T12:38:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1336152373",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/12780394?v=4",
         "events_url" : "https://api.github.com/users/RobinLinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RobinLinus/followers",
         "following_url" : "https://api.github.com/users/RobinLinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RobinLinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RobinLinus",
         "id" : 12780394,
         "login" : "RobinLinus",
         "node_id" : "MDQ6VXNlcjEyNzgwMzk0",
         "organizations_url" : "https://api.github.com/users/RobinLinus/orgs",
         "received_events_url" : "https://api.github.com/users/RobinLinus/received_events",
         "repos_url" : "https://api.github.com/users/RobinLinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RobinLinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RobinLinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RobinLinus"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "There's some subtext in @BitcoinErrorLog's technical opinions that he's not being particularly upfront about. I'm sure many here are aware, but I'm somewhat of a newcomer, and I say this for other newcomers who don't necessarily have a sense for the full story behind each conversation happening around bitcoin-core dev.\r\n\r\nHe's CEO of Synonym, a company who is heavily bagged in tech built for the Rootstock sidechain. He has a financial interest in keeping Bitcoin simple, so as to simplify building his sidechain products, and also to oppose technologies used to build competing products that use the Bitcoin blockchain only without need for a sidechain, obviating a differentiating factor of his business model.\r\n\r\nIn my experience, he also tends to hire technically weak developers with bad attitudes for some reason, maybe they're cheaper. But that might be why he seeks to simplify any Bitcoin-facing interfaces in making his DeFi products, like BitKit and Pear Credit.\r\n\r\nIn addition, he's the guy who campaigned on Twitter against the inclusion of the mempoolfullrbf flag in the v24 release. After it was clear he would be unsuccessful in this attempt, even after he and developers working with him wrote several essay-length screeds on the [PR itself](https://github.com/bitcoin/bitcoin/pull/26438), he threw a tantrum and declared he would run his own Bitcoin nodes on a version of bitcoin-core that not only predates Taproot, but also native SegWit. He brands this as \"bitcoin conservatism\", which is even more conservative than the ossifiers (who I am actually quite sympathetic towards).\r\n\r\nThis was a thinly-veiled effort to push a proposal for using unconfirmed transactions to build payment systems that don't need Lightning to make instant payments. He wanted to develop a solution that would let merchants accept some risk of what are essentially chargebacks built into the Bitcoin protocol in order to accept instant payments that disable the RBF flag. This is yet another example of Carvalho's perspective of Bitcoin tech as a zero-sum game, and to antagonize developers using social attacks.\r\n\r\nFull disclosure, I've decided to align myself with projects that make full use of the Bitcoin blockchain and Taproot to build layers and fat clients to extend the capabilities of Bitcoin. This includes projects like Lightning, [RGB](https://github.com/RGB-WG), [Fedimint](https://github.com/fedimint), [Ordinals](https://github.com/casey/ord), [NoLooking](https://github.com/chaincase-app/nolooking) and yes, [Sapio](https://github.com/sapio-lang). I think it's safe to say that the developers dedicating their time, often quite thanklessly, towards these projects just want Bitcoin to be better. Ideally it doesn't come at the expense of the principles that make it the success that it is. Maybe it's too soon for BIP-119. Maybe we may never need it for layers and wallets. It does make certain things like [DLCs](https://github.com/p2pderivatives) for stablecoins built without sidechains more efficient (and thus, pose a market threat to Carvalho's products), and it also is said to enable the [validity proofs zk rollups proposal](https://bitcoinrollups.org/). Those are in some ways just optimizations that scale features where it's not yet clear there's necessarily an indication of market demand, so I think it's fine to hold off on merging this feature if it's unclear yet there's demand for those who would want to run a node with BIP-119 support included. But I don't think it's wise to shut the door on this discussion, either. I'd recommend continuing to give them time to build, and demonstrate to the world why such things are needed.\r\n\r\nOne of the most tangible demonstrations would be persistently high mempool fees from organic user growth that could be reduced because a significant number of transactions are paying for bytes on the blockchain that could be optimized into a much smaller on-chain footprint as long as a soft fork is put through. This would be, in essence, a demonstration of the limits of the layers built to scale the base layer after some in the community of Bitcoin node operators decided increasing the block size through a hard fork wasn't worth splitting the chain over. Soft forks like Taproot and CTV are proof the \"little blockers\" were right, and likely will continue to be seen as right for a very long time, so long as we are able to make more efficient use of bytes on-chain.\r\n\r\nIn the meantime, most of us builders in the projects I mentioned don't need anything more than Taproot and Native SegWit; those upgrades are a good excuse for ossification (especially if ossification continues to be evaluated and debated over time), which offers many great features that can be made use of already, even if some cases could be done more efficiently or trustlessly using OP_CHECKTEMPLATEVERIFY.",
      "created_at" : "2022-12-03T19:32:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1336243831",
      "id" : 1336243831,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585PpXZ3",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1336243831/reactions"
      },
      "updated_at" : "2022-12-03T19:32:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1336243831",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/285690?v=4",
         "events_url" : "https://api.github.com/users/cryptoquick/events{/privacy}",
         "followers_url" : "https://api.github.com/users/cryptoquick/followers",
         "following_url" : "https://api.github.com/users/cryptoquick/following{/other_user}",
         "gists_url" : "https://api.github.com/users/cryptoquick/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/cryptoquick",
         "id" : 285690,
         "login" : "cryptoquick",
         "node_id" : "MDQ6VXNlcjI4NTY5MA==",
         "organizations_url" : "https://api.github.com/users/cryptoquick/orgs",
         "received_events_url" : "https://api.github.com/users/cryptoquick/received_events",
         "repos_url" : "https://api.github.com/users/cryptoquick/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/cryptoquick/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/cryptoquick/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/cryptoquick"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@cryptoquick I don't know where you are getting your information from, but it seems to be wildly inaccurate. Neither myself or Synonym have anything to do with Rootstock, nor any sidechain, nor Defi. Synonym uses Bitcoin (and Lightning) only, no sidechains or nonsense. Our design choices prioritize leaving Bitcoin alone and using its current state as an assumption, not something to corrupt. I have no financial interest in keeping Bitcoin simple other than that I own bitcoin and I would like for it not to break, and I would like to help others in my position. \r\n\r\nI have always worked to defend Bitcoin from corruption for 10 years, regardless of my employment status.\r\n\r\nYour representation of my arguments around fullRBF and 0conf are also inaccurate, but I won't distract people here with that, simply listen to my most recent TFTC interview or such if you care.\r\n\r\nMost importantly, instead of refuting my concerns about CTV, you decided to attack my character and (ignorantly) my motives, which I think says plenty about your position.",
      "created_at" : "2022-12-04T07:36:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1336341207",
      "id" : 1336341207,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585PpvLX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1336341207/reactions"
      },
      "updated_at" : "2022-12-04T07:36:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1336341207",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18273620?v=4",
         "events_url" : "https://api.github.com/users/BitcoinErrorLog/events{/privacy}",
         "followers_url" : "https://api.github.com/users/BitcoinErrorLog/followers",
         "following_url" : "https://api.github.com/users/BitcoinErrorLog/following{/other_user}",
         "gists_url" : "https://api.github.com/users/BitcoinErrorLog/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/BitcoinErrorLog",
         "id" : 18273620,
         "login" : "BitcoinErrorLog",
         "node_id" : "MDQ6VXNlcjE4MjczNjIw",
         "organizations_url" : "https://api.github.com/users/BitcoinErrorLog/orgs",
         "received_events_url" : "https://api.github.com/users/BitcoinErrorLog/received_events",
         "repos_url" : "https://api.github.com/users/BitcoinErrorLog/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/BitcoinErrorLog/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/BitcoinErrorLog/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/BitcoinErrorLog"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@BitcoinErrorLog I seem to have confused Synonym with a project called Sovryn, which builds DeFi products on Rootstock. My apologies for the misunderstanding, and using that confusion as an attack on your character.\r\n\r\nI'm actually glad I aired my concerns, since I had trouble understanding the things you were saying when I had in the back of my mind a question around your motives. I do think it's important to understand one's motives to put what they're saying in context.\r\n\r\nI value being honest and self-critical, and you make some salient points on layers that should certainly be taken seriously. I also appreciate your concerns over adding new features to Bitcoin that could have unforeseen consequences.\r\n\r\nI still think it's valuable to work towards building layers and more capable wallets, because there's certainly market demand for it. Your criticisms of them should be taken seriously and work should be done to address them, but ideally that work is done without changing the base layer.\r\n\r\nAs for soft forks that add new opcodes, I think their utility needs to not only be demonstrated, but there also needs to be broader market demand. I think it's fair to say that remains to be seen. But it's worthwhile to build that tools so that they are mature by the time they are needed.\r\n\r\nAgain, apologies for the misunderstanding, and if I have any future concerns, next time I'll raise those privately.",
      "created_at" : "2022-12-04T14:01:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1336419407",
      "id" : 1336419407,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585PqCRP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1336419407/reactions"
      },
      "updated_at" : "2022-12-04T14:01:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1336419407",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/285690?v=4",
         "events_url" : "https://api.github.com/users/cryptoquick/events{/privacy}",
         "followers_url" : "https://api.github.com/users/cryptoquick/followers",
         "following_url" : "https://api.github.com/users/cryptoquick/following{/other_user}",
         "gists_url" : "https://api.github.com/users/cryptoquick/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/cryptoquick",
         "id" : 285690,
         "login" : "cryptoquick",
         "node_id" : "MDQ6VXNlcjI4NTY5MA==",
         "organizations_url" : "https://api.github.com/users/cryptoquick/orgs",
         "received_events_url" : "https://api.github.com/users/cryptoquick/received_events",
         "repos_url" : "https://api.github.com/users/cryptoquick/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/cryptoquick/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/cryptoquick/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/cryptoquick"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@cryptoquick Apology accepted!",
      "created_at" : "2022-12-05T08:33:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1336954658",
      "id" : 1336954658,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585PsE8i",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1336954658/reactions"
      },
      "updated_at" : "2022-12-05T08:33:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1336954658",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18273620?v=4",
         "events_url" : "https://api.github.com/users/BitcoinErrorLog/events{/privacy}",
         "followers_url" : "https://api.github.com/users/BitcoinErrorLog/followers",
         "following_url" : "https://api.github.com/users/BitcoinErrorLog/following{/other_user}",
         "gists_url" : "https://api.github.com/users/BitcoinErrorLog/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/BitcoinErrorLog",
         "id" : 18273620,
         "login" : "BitcoinErrorLog",
         "node_id" : "MDQ6VXNlcjE4MjczNjIw",
         "organizations_url" : "https://api.github.com/users/BitcoinErrorLog/orgs",
         "received_events_url" : "https://api.github.com/users/BitcoinErrorLog/received_events",
         "repos_url" : "https://api.github.com/users/BitcoinErrorLog/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/BitcoinErrorLog/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/BitcoinErrorLog/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/BitcoinErrorLog"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased against v24.0 tag so that this branch remains mergeable/testable against a recent release, closing with up for grabs label if someone is motivated to work on keeping this compatible with future changes to the software.",
      "created_at" : "2022-12-17T04:06:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-1356016792",
      "id" : 1356016792,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "IC_kwDOABII585Q0yyY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1356016792/reactions"
      },
      "updated_at" : "2022-12-17T04:06:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1356016792",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   }
]
