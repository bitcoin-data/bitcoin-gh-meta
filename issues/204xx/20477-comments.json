[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20196 (net: fix GetListenPort() to derive the proper port by vasild)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-11-24T19:48:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-733196012",
      "id" : 733196012,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMzE5NjAxMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-15T20:41:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733196012",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for working on adding testing here. I'll try to review this soon.",
      "created_at" : "2020-11-24T22:16:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-733264515",
      "id" : 733264515,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczMzI2NDUxNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-24T22:16:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733264515",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535175346"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535175346"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please move this doc-comment to the header, it's an exported function now.",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-03T12:12:21Z",
      "diff_hunk" : "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535175346",
      "id" : 535175346,
      "line" : 973,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE3NTM0Ng==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 973,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 92,
      "pull_request_review_id" : 543891357,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535175346",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Thanks for adding tests.\r\n\r\nI sometimes wonder if it would make sense to move \"semi-internal\" things that are only exposed externally for unit testing, like in this case \"NodeEvictionCandidate\" and \"SelectNodeToEvict\", to a separate set of headers. But not here anyhow.\r\n",
      "created_at" : "2020-12-03T12:12:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-737904003",
      "id" : 737904003,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczNzkwNDAwMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-03T12:14:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/737904003",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535748838"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535748838"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would it be valuable to break this out into the various reasons the peers are protected from eviction? For example:\r\n\r\nIn src/net.h\r\n```\r\nconst int PEERS_PROTECTED_BY_NET_GROUP = 4                \r\n```\r\n\r\nIn src/net.cpp\r\n```\r\nEraseLastKElements(vEvictionCandidates, CompareNetGroupKeyed, PEERS_PROTECTED_BY_NET_GROUP);\r\n```\r\n\r\nIn src/test/net_tests.cpp:\r\n```\r\nGUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = PEERS_PROTECTED_BY_NET_GROUP + ... + 1\r\n```",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T00:35:09Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535748838",
      "id" : 535748838,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0ODgzOA==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 820,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 544573341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535748838",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535751650"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535751650"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is this the highest such number at which non-eviction is guaranteed? If so, could you help me understand how we get 20?",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T00:42:48Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW = 20;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535751650",
      "id" : 535751650,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc1MTY1MA==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 826,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 544573341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535751650",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535833762"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535833762"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would it make sense to use `emplace_back` here?",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T04:49:36Z",
      "diff_hunk" : "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    Optional<NodeEvictionCandidate> node_to_evict;\n+    {\n+        std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535833762",
      "id" : 535833762,
      "line" : 1006,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgzMzc2Mg==",
      "original_commit_id" : "75f056fe19eb6a9b4d5e00846e39e1f5618814f3",
      "original_line" : 1006,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 125,
      "pull_request_review_id" : 544573341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535833762",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536124248"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536124248"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is a silent merge conflict with master. `NODISCARD` should be replaced with `[[nodiscard]]`",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T14:07:59Z",
      "diff_hunk" : "@@ -910,43 +896,8 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     elements.erase(elements.end() - eraseSize, elements.end());\n }\n \n-/** Try to find a connection to evict when the node is full.\n- *  Extreme care must be taken to avoid opening the node to attacker\n- *   triggered network partitioning.\n- *  The strategy used here is to protect a small number of peers\n- *   for each of several distinct characteristics which are difficult\n- *   to forge.  In order to partition a node the attacker must be\n- *   simultaneously better at all of them than honest peers.\n- */\n-bool CConnman::AttemptToEvictConnection()\n+NODISCARD Optional<NodeEvictionCandidate> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536124248",
      "id" : 536124248,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEyNDI0OA==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 899,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 544988209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536124248",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536129812"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536129812"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why is this called with `cs_vNodes` held? Previously, we'd release the lock before running through this logic.",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T14:16:33Z",
      "diff_hunk" : "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    Optional<NodeEvictionCandidate> node_to_evict;\n+    {\n+        std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);\n+        }\n+        node_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536129812",
      "id" : 536129812,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEyOTgxMg==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 1009,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 544988209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536129812",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536131595"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536131595"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What's the reason for the `std::move` here? Why not just pass this as an lvalue reference?",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T14:19:11Z",
      "diff_hunk" : "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    Optional<NodeEvictionCandidate> node_to_evict;\n+    {\n+        std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);\n+        }\n+        node_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536131595",
      "id" : 536131595,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzMTU5NQ==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 1009,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 544988209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536131595",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536131724"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536131724"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why return a `NodeEvictionCandidate` optional here, when only the NodeId is used? I think it'd be better to return an `Optional<NodeId>`",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T14:19:19Z",
      "diff_hunk" : "@@ -910,43 +896,8 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     elements.erase(elements.end() - eraseSize, elements.end());\n }\n \n-/** Try to find a connection to evict when the node is full.\n- *  Extreme care must be taken to avoid opening the node to attacker\n- *   triggered network partitioning.\n- *  The strategy used here is to protect a small number of peers\n- *   for each of several distinct characteristics which are difficult\n- *   to forge.  In order to partition a node the attacker must be\n- *   simultaneously better at all of them than honest peers.\n- */\n-bool CConnman::AttemptToEvictConnection()\n+NODISCARD Optional<NodeEvictionCandidate> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536131724",
      "id" : 536131724,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzMTcyNA==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 899,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 544988209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536131724",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536133393"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536133393"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This can create duplicate node ids, which isn't possible in the product code.",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T14:21:49Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536133393",
      "id" : 536133393,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzMzM5Mw==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 780,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 544988209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536133393",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536134247"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536134247"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Does this break if there are multiple eviction candidates with the same id?",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T14:23:02Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536134247",
      "id" : 536134247,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzNDI0Nw==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 803,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 544988209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536134247",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536135582"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536135582"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\nconstexpr int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE{29};\r\n```",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T14:24:57Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536135582",
      "id" : 536135582,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzNTU4Mg==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 820,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 544988209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536135582",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536137843"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536137843"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think if you just constructed the `NodeEvictionCandidate`s with sequential node id numbers, you wouldn't need to do this here.",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T14:28:10Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW = 20;\n+\n+const int NODE_EVICTION_TEST_ROUNDS = 10;\n+\n+const int NODE_EVICTION_TEST_UP_TO_N_NODES = 200;\n+} // namespace\n+\n+static_assert(GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE > GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW);\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Verify correctness of GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\n+            // and GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW.\n+            if (number_of_nodes <= GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW) {\n+                BOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            }\n+            if (number_of_nodes >= GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\n+                BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            } else {\n+                continue;\n+            }\n+\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate, const size_t idx) {\n+                    candidate.id = idx;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536137843",
      "id" : 536137843,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzNzg0Mw==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 856,
      "original_position" : 100,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 544988209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536137843",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536161068"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536161068"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point. It can be moved to the outer scope. Thanks!\r\n\r\nContext: https://github.com/bitcoin/bitcoin/pull/19972#discussion_r518136772",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T15:01:09Z",
      "diff_hunk" : "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    Optional<NodeEvictionCandidate> node_to_evict;\n+    {\n+        std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);\n+        }\n+        node_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536161068",
      "id" : 536161068,
      "in_reply_to_id" : 536129812,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2MTA2OA==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 1009,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 545034386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536161068",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209109"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209109"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks! Fixed!",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T16:09:29Z",
      "diff_hunk" : "@@ -910,43 +896,8 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     elements.erase(elements.end() - eraseSize, elements.end());\n }\n \n-/** Try to find a connection to evict when the node is full.\n- *  Extreme care must be taken to avoid opening the node to attacker\n- *   triggered network partitioning.\n- *  The strategy used here is to protect a small number of peers\n- *   for each of several distinct characteristics which are difficult\n- *   to forge.  In order to partition a node the attacker must be\n- *   simultaneously better at all of them than honest peers.\n- */\n-bool CConnman::AttemptToEvictConnection()\n+NODISCARD Optional<NodeEvictionCandidate> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209109",
      "id" : 536209109,
      "in_reply_to_id" : 536124248,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwOTEwOQ==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 899,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 545094164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209109",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209322"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209322"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Makes sense. Feedback addressed!",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T16:09:47Z",
      "diff_hunk" : "@@ -910,43 +896,8 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     elements.erase(elements.end() - eraseSize, elements.end());\n }\n \n-/** Try to find a connection to evict when the node is full.\n- *  Extreme care must be taken to avoid opening the node to attacker\n- *   triggered network partitioning.\n- *  The strategy used here is to protect a small number of peers\n- *   for each of several distinct characteristics which are difficult\n- *   to forge.  In order to partition a node the attacker must be\n- *   simultaneously better at all of them than honest peers.\n- */\n-bool CConnman::AttemptToEvictConnection()\n+NODISCARD Optional<NodeEvictionCandidate> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209322",
      "id" : 536209322,
      "in_reply_to_id" : 536131724,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwOTMyMg==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 899,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 545094164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209322",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209505"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209505"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point. Done!",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T16:10:06Z",
      "diff_hunk" : "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209505",
      "id" : 536209505,
      "in_reply_to_id" : 535175346,
      "line" : 973,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwOTUwNQ==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 973,
      "original_position" : 92,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 92,
      "pull_request_review_id" : 545094164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209505",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209802"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209802"
         }
      },
      "author_association" : "MEMBER",
      "body" : "rvalue ref was suggested by @sipa: see  https://github.com/bitcoin/bitcoin/pull/19972#discussion_r517734066 for rationale.",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T16:10:33Z",
      "diff_hunk" : "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    Optional<NodeEvictionCandidate> node_to_evict;\n+    {\n+        std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);\n+        }\n+        node_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209802",
      "id" : 536209802,
      "in_reply_to_id" : 536131595,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwOTgwMg==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 1009,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 545094164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209802",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536211032"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536211032"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Now setting `id` to `i` directly making it unique. Instead of relying on the caller doing this :)",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T16:12:19Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536211032",
      "id" : 536211032,
      "in_reply_to_id" : 536133393,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxMTAzMg==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 780,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 545094164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536211032",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536211787"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536211787"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, the code was relying on the caller making sure the candidate ids are unique. Now doing that in `GetRandomNodeEvictionCandidates` as suggested.",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T16:13:31Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536211787",
      "id" : 536211787,
      "in_reply_to_id" : 536134247,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxMTc4Nw==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 803,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 545094164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536211787",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536212035"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536212035"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That is nicer. Addressed!",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T16:13:53Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536212035",
      "id" : 536212035,
      "in_reply_to_id" : 536135582,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxMjAzNQ==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 820,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 545094164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536212035",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536212266"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536212266"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point. Done!",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T16:14:17Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW = 20;\n+\n+const int NODE_EVICTION_TEST_ROUNDS = 10;\n+\n+const int NODE_EVICTION_TEST_UP_TO_N_NODES = 200;\n+} // namespace\n+\n+static_assert(GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE > GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW);\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Verify correctness of GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\n+            // and GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW.\n+            if (number_of_nodes <= GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW) {\n+                BOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            }\n+            if (number_of_nodes >= GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\n+                BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            } else {\n+                continue;\n+            }\n+\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate, const size_t idx) {\n+                    candidate.id = idx;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536212266",
      "id" : 536212266,
      "in_reply_to_id" : 536137843,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxMjI2Ng==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 856,
      "original_position" : 100,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 545094164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536212266",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536421598"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536421598"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, but I'm afraid I cannot help you with that at the moment: so far it is a purely an empirical/experimental result :D\r\n\r\nCounterexamples or proofs welcome! :)",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T22:29:32Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW = 20;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536421598",
      "id" : 536421598,
      "in_reply_to_id" : 535751650,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMTU5OA==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 826,
      "original_position" : 70,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 545094164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536421598",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536423191"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536423191"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think that is a good idea but I kind of like that this PR doesn't touch the actual selection code (keeping the diff at a minimum). I'd like to keep it that way but I'd be glad to review a change like the one suggested in a trivial \"introduce constants\" PR:).",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T22:33:26Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536423191",
      "id" : 536423191,
      "in_reply_to_id" : 535748838,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMzE5MQ==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 820,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 545094164,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536423191",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536434923"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536434923"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm afraid that won't be possible until C++20Â¹ :) See [P0960: \"Allow initializing aggregates from a parenthesized list of values\" ](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0960r0.html).\r\n\r\nÂ¹ Assuming you mean without adding a new ctor to `NodeEvictionCandidate`.",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-04T23:03:04Z",
      "diff_hunk" : "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    Optional<NodeEvictionCandidate> node_to_evict;\n+    {\n+        std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536434923",
      "id" : 536434923,
      "in_reply_to_id" : 535833762,
      "line" : 1006,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzNDkyMw==",
      "original_commit_id" : "75f056fe19eb6a9b4d5e00846e39e1f5618814f3",
      "original_line" : 1006,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 125,
      "pull_request_review_id" : 545353983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536434923",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "tsan failue can be ignored or fixed by a rebase",
      "created_at" : "2020-12-05T05:35:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739130004",
      "id" : 739130004,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTEzMDAwNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-05T05:35:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739130004",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke Thanks! Rebased!",
      "created_at" : "2020-12-05T10:05:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739155734",
      "id" : 739155734,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTE1NTczNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-05T10:05:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739155734",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537405558"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537405558"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No longer needed since you removed `NODISCARD`",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-07T10:45:04Z",
      "diff_hunk" : "@@ -9,6 +9,7 @@\n \n #include <net.h>\n \n+#include <attributes.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537405558",
      "id" : 537405558,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwNTU1OA==",
      "original_commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "original_line" : 12,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 546027700,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537405558",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537411893"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537411893"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I understand why you'd want to pass by ref, but there's no benefit to passing by rvalue. This code suggests to me that `SelectNodeToEvict()` is going to keep ownership of `vEvictionCandidates` and you're using move semantics to avoid a copy, but that's not actually happening here.\r\n\r\nThere's no harm in using `&&` and `move` here, but it's unnecessary and possibly confusing.",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-07T10:54:49Z",
      "diff_hunk" : "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    Optional<NodeEvictionCandidate> node_to_evict;\n+    {\n+        std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);\n+        }\n+        node_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537411893",
      "id" : 537411893,
      "in_reply_to_id" : 536131595,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxMTg5Mw==",
      "original_commit_id" : "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "original_line" : 1009,
      "original_position" : 128,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 546027700,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537411893",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537422516"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537422516"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this function and the other `IsEvicted()` could use a very short comment to explain the interface (here: returns true if any of the node ids in `node_ids` are selected for eviction).",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-07T11:11:45Z",
      "diff_hunk" : "@@ -771,4 +773,125 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537422516",
      "id" : 537422516,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQyMjUxNg==",
      "original_commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "original_line" : 796,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 546047804,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537422516",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537443914"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537443914"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed!",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-07T11:47:33Z",
      "diff_hunk" : "@@ -9,6 +9,7 @@\n \n #include <net.h>\n \n+#include <attributes.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537443914",
      "id" : 537443914,
      "in_reply_to_id" : 537405558,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0MzkxNA==",
      "original_commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "original_line" : 12,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 546072994,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537443914",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537444057"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537444057"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed!",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-07T11:47:47Z",
      "diff_hunk" : "@@ -771,4 +773,125 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537444057",
      "id" : 537444057,
      "in_reply_to_id" : 537422516,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0NDA1Nw==",
      "original_commit_id" : "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "original_line" : 796,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 546073155,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537444057",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "needs rebase",
      "created_at" : "2020-12-07T11:51:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739869998",
      "id" : 739869998,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTg2OTk5OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-07T11:51:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739869998",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I understand why you'd want to pass by ref, but there's no benefit to passing by rvalue. This code suggests to me that SelectNodeToEvict() is going to keep ownership of vEvictionCandidates and you're using move semantics to avoid a copy, but that's not actually happening here.\r\n\r\nI've now reverted to the original version (alternative 1 below), since [your suggestion](https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537411893) and [sipa's suggestion](https://github.com/bitcoin/bitcoin/pull/19972#discussion_r517734066) are mutually exclusive :)\r\n\r\nI'll let others chime in regarding the choice between the three alternatives:\r\n\r\n```\r\nAlternative 1. Optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>)\r\nAlternative 2. Optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&)\r\nAlternative 3. Optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&&)\r\n```\r\n\r\nTrying to summarize the pros/cons:\r\n* Alternative 1. Simple and no gotchas. Does an extraneous copy.\r\n* Alternative 2. No extraneous copy. Possibly surprising that a function named `SelectNodeToEvict` modifies its input.\r\n* Alternative 3. No extraneous copy. Risk of accidental use-after-moved-from in the future. Possibly confusing (see https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537411893).\r\n\r\n\r\nPerhaps the members of the review club could chime in. Some questions for the review club: Do you agree with the pros/cons of each alternative? Which alternative do you find easier to review? Which alternative do you prefer? Is it possible to quantify the real-world impact of the extraneous copy in a theoretical worst-case scenario?",
      "created_at" : "2020-12-07T12:27:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739887583",
      "id" : 739887583,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTg4NzU4Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-07T14:25:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739887583",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> since your suggestion and sipa's suggestion are mutually exclusive :)\r\n\r\nI don't think they are mutually exclusive. There are two questions here:\r\n\r\n1. Should the argument be passed by value or by reference?\r\n2. If passed by reference, should it be passed by lvalue reference or rvalue reference?\r\n\r\nI don't think there's any disagreement about (1). We should pass by reference to avoid a copy.\r\n\r\nFor (2), I think it's slightly odd to pass by rvalue reference when it's not necessary to do so, but that's more of a stylistic thing. I see now that you're calling the function with a prvalue in the tests, which means you can't pass by lvalue reference. My preference would therefore be to revert to what you had before.",
      "created_at" : "2020-12-07T12:37:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739892556",
      "id" : 739892556,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTg5MjU1Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-07T12:37:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739892556",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537478449"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537478449"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Any reason not to shuffle in place?\r\n\r\n```suggestion\r\nbool IsEvicted(std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\r\n{\r\n    Shuffle(candidates.begin(), candidates.end(), random_context);\r\n    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(candidates);\r\n```",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-07T12:45:46Z",
      "diff_hunk" : "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(shuffled_candidates);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537478449",
      "id" : 537478449,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3ODQ0OQ==",
      "original_commit_id" : "ccc8162b2226977b3d5ccfd1ebec5426650b4924",
      "original_line" : 800,
      "original_position" : 44,
      "original_start_line" : 796,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 546113968,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537478449",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jnewbery \r\n\r\nUpdated accordingly.\r\n\r\nPersonally I prefer the `std::vector<NodeEvictionCandidate>&&` alternative in this case since it makes it clear from reading the code at the call site that `vEvictionCandidates` is not intended to be used after the `SelectNodeToEvict` call.\r\n\r\nHopefully any use-after-moved-from would be quite obvious.\r\n\r\nExample of future patches where the signature makes a difference from a gotcha perspective:\r\n\r\nGiven signature `Optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&)`\r\n\r\n```patch\r\n    Optional<NodeId> node_id_to_evict = SelectNodeToEvict(vEvictionCandidates);\r\n    if (!node_id_to_evict) {\r\n        return false;\r\n    }\r\n+   if (!vEvictionCandidates.empty()) { // Likely BAD, but not immediately obvious why\r\n+       â¦ do something with the now perhaps surprisingly modified vEvictionCandidates â¦\r\n```\r\n\r\nGiven signature `Optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&&)`\r\n\r\n```patch\r\n    Optional<NodeId> node_id_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));\r\n    if (!node_id_to_evict) {\r\n        return false;\r\n    }\r\n+   if (!vEvictionCandidates.empty()) { // BAD and hopefully obviously so thanks to std::move above :)\r\n+       â¦ do something with vEvictionCandidates which is now in some valid but otherwise indeterminate state â¦\r\n```\r\n\r\n\r\n",
      "created_at" : "2020-12-07T12:58:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739902573",
      "id" : 739902573,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTkwMjU3Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-07T16:37:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739902573",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Personally I prefer the std::vector<NodeEvictionCandidate>&& alternative in this case since it makes it clear from reading the code at the call site that vEvictionCandidates is not intended to be used after the SelectNodeToEvict call.\r\n\r\nFine by me!",
      "created_at" : "2020-12-07T13:55:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739933084",
      "id" : 739933084,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTkzMzA4NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-07T13:55:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739933084",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "created_at" : "2020-12-07T13:56:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739933867",
      "id" : 739933867,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDczOTkzMzg2Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-07T13:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739933867",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539494448"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539494448"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please add some justification for these numbers, even if it's a description of the simulation/test you ran to get them. I don't understand how this 29 is guaranteed and the 20 is guaranteed below. \r\n\r\nThis reply makes it sound like it's *not* guaranteed?\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/20477#discussion_r536421598",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-09T17:17:51Z",
      "diff_hunk" : "@@ -771,4 +773,128 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i]);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE{29};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539494448",
      "id" : 539494448,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5NDQ0OA==",
      "original_commit_id" : "cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "original_line" : 823,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 548414271,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539494448",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/177646?v=4",
         "events_url" : "https://api.github.com/users/narula/events{/privacy}",
         "followers_url" : "https://api.github.com/users/narula/followers",
         "following_url" : "https://api.github.com/users/narula/following{/other_user}",
         "gists_url" : "https://api.github.com/users/narula/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/narula",
         "id" : 177646,
         "login" : "narula",
         "node_id" : "MDQ6VXNlcjE3NzY0Ng==",
         "organizations_url" : "https://api.github.com/users/narula/orgs",
         "received_events_url" : "https://api.github.com/users/narula/received_events",
         "repos_url" : "https://api.github.com/users/narula/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/narula/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/narula/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/narula"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539501185"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539501185"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you're not running the following checks if the number of nodes is between the min and the max because of this `continue`. Is that the intention?\r\n\r\n~~Edit: ignore me! I'm looking at the wrong for loop.~~\r\n\r\nEdit again: Nope, I think I was right the first time...",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-09T17:26:59Z",
      "diff_hunk" : "@@ -771,4 +773,128 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i]);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE{29};\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW{20};\n+\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+static_assert(GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE > GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW);\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Verify correctness of GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\n+            // and GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW.\n+            if (number_of_nodes <= GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW) {\n+                BOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            }\n+            if (number_of_nodes >= GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\n+                BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            } else {\n+                continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539501185",
      "id" : 539501185,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUwMTE4NQ==",
      "original_commit_id" : "cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "original_line" : 852,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 548422399,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539501185",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/177646?v=4",
         "events_url" : "https://api.github.com/users/narula/events{/privacy}",
         "followers_url" : "https://api.github.com/users/narula/followers",
         "following_url" : "https://api.github.com/users/narula/following{/other_user}",
         "gists_url" : "https://api.github.com/users/narula/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/narula",
         "id" : 177646,
         "login" : "narula",
         "node_id" : "MDQ6VXNlcjE3NzY0Ng==",
         "organizations_url" : "https://api.github.com/users/narula/orgs",
         "received_events_url" : "https://api.github.com/users/narula/received_events",
         "repos_url" : "https://api.github.com/users/narula/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/narula/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/narula/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/narula"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539520484"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539520484"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good discussion in PR review club about it today and @jonatack pointed out justification for the 20 is in `test/functional/p2p_eviction.py`.",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-09T17:51:52Z",
      "diff_hunk" : "@@ -771,4 +773,128 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i]);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE{29};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539520484",
      "id" : 539520484,
      "in_reply_to_id" : 539494448,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUyMDQ4NA==",
      "original_commit_id" : "cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "original_line" : 823,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 548445861,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539520484",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/177646?v=4",
         "events_url" : "https://api.github.com/users/narula/events{/privacy}",
         "followers_url" : "https://api.github.com/users/narula/followers",
         "following_url" : "https://api.github.com/users/narula/following{/other_user}",
         "gists_url" : "https://api.github.com/users/narula/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/narula",
         "id" : 177646,
         "login" : "narula",
         "node_id" : "MDQ6VXNlcjE3NzY0Ng==",
         "organizations_url" : "https://api.github.com/users/narula/orgs",
         "received_events_url" : "https://api.github.com/users/narula/received_events",
         "repos_url" : "https://api.github.com/users/narula/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/narula/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/narula/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/narula"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539527990"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539527990"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't get this either",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-09T18:02:31Z",
      "diff_hunk" : "@@ -771,4 +773,128 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i]);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE{29};\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW{20};\n+\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+static_assert(GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE > GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW);\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Verify correctness of GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\n+            // and GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW.\n+            if (number_of_nodes <= GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW) {\n+                BOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            }\n+            if (number_of_nodes >= GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\n+                BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            } else {\n+                continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539527990",
      "id" : 539527990,
      "in_reply_to_id" : 539501185,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUyNzk5MA==",
      "original_commit_id" : "cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "original_line" : 852,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 548454663,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539527990",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539574518"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539574518"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm a HUGE supporter of the early return pattern (AKA bouncer pattern) that you're using here.  However, maybe this alternative is a little easier to parse.\r\n\r\n(Maybe not in this annoyingly narrow GitHub window though...)\r\n\r\n```suggestion\r\n            if (number_of_nodes < GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\r\n            \t// Verify correctness of GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW\r\n            \tif (number_of_nodes <= GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW) {\r\n            \t\t// At this number of nodes, we're guaranteed to never evict any of them\r\n                \tBOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\r\n                }\r\n            \t// There is no need to run the sub-tests for fewer than the number of nodes guaranteed for eviction\r\n            \t// ^ FWIW I don't agree with this, see below\r\n            \tcontinue;\r\n            }\r\n            // number_of_nodes >= GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\r\n            // Verify correctness of GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\r\n            BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));  \r\n```\r\n\r\nHonestly though, I think it's just the similarity between the names of `GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE` and `GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW` that is making this so difficult.  Maybe (maybe...) `EVICTION_THRESHOLD` and `NON_EVICTION_THRESHOLD` and put the fact that it's inclusive on both ends in the comments?  Or follow the half-open convention of \"lower bounds are inclusive, upper bounds are exclusive\". Popular in Python, not sure about C++.\r\n\r\nAll of this said, why have the early return at all?  All of the tests below check for non-eviction.  Can't we run them regardless of the number of nodes?\r\n\r\n(Feel free to reword my code comments)",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-09T19:12:08Z",
      "diff_hunk" : "@@ -771,4 +773,128 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i]);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE{29};\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW{20};\n+\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+static_assert(GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE > GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW);\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Verify correctness of GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\n+            // and GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW.\n+            if (number_of_nodes <= GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW) {\n+                BOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            }\n+            if (number_of_nodes >= GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\n+                BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            } else {\n+                continue;\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539574518",
      "id" : 539574518,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3NDUxOA==",
      "original_commit_id" : "cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "original_line" : 853,
      "original_position" : 97,
      "original_start_line" : 844,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 548523190,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539574518",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5553787?v=4",
         "events_url" : "https://api.github.com/users/troygiorshev/events{/privacy}",
         "followers_url" : "https://api.github.com/users/troygiorshev/followers",
         "following_url" : "https://api.github.com/users/troygiorshev/following{/other_user}",
         "gists_url" : "https://api.github.com/users/troygiorshev/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/troygiorshev",
         "id" : 5553787,
         "login" : "troygiorshev",
         "node_id" : "MDQ6VXNlcjU1NTM3ODc=",
         "organizations_url" : "https://api.github.com/users/troygiorshev/orgs",
         "received_events_url" : "https://api.github.com/users/troygiorshev/received_events",
         "repos_url" : "https://api.github.com/users/troygiorshev/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/troygiorshev/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/troygiorshev"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539575650"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539575650"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I've proposed an alternative that might be easier to parse.\r\nhttps://github.com/bitcoin/bitcoin/pull/20477/files#r539574518",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-09T19:13:56Z",
      "diff_hunk" : "@@ -771,4 +773,128 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i]);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE{29};\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW{20};\n+\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+static_assert(GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE > GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW);\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Verify correctness of GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\n+            // and GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW.\n+            if (number_of_nodes <= GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW) {\n+                BOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            }\n+            if (number_of_nodes >= GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\n+                BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            } else {\n+                continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539575650",
      "id" : 539575650,
      "in_reply_to_id" : 539501185,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3NTY1MA==",
      "original_commit_id" : "cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "original_line" : 852,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 548524518,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539575650",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5553787?v=4",
         "events_url" : "https://api.github.com/users/troygiorshev/events{/privacy}",
         "followers_url" : "https://api.github.com/users/troygiorshev/followers",
         "following_url" : "https://api.github.com/users/troygiorshev/following{/other_user}",
         "gists_url" : "https://api.github.com/users/troygiorshev/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/troygiorshev",
         "id" : 5553787,
         "login" : "troygiorshev",
         "node_id" : "MDQ6VXNlcjU1NTM3ODc=",
         "organizations_url" : "https://api.github.com/users/troygiorshev/orgs",
         "received_events_url" : "https://api.github.com/users/troygiorshev/received_events",
         "repos_url" : "https://api.github.com/users/troygiorshev/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/troygiorshev/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/troygiorshev"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539588477"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539588477"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It's \"don't run the checks if the number of nodes is less than the max\".  But, I'm not sure why we would do this...",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-09T19:33:27Z",
      "diff_hunk" : "@@ -771,4 +773,128 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i]);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE{29};\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW{20};\n+\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+static_assert(GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE > GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW);\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Verify correctness of GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\n+            // and GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW.\n+            if (number_of_nodes <= GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW) {\n+                BOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            }\n+            if (number_of_nodes >= GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\n+                BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            } else {\n+                continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539588477",
      "id" : 539588477,
      "in_reply_to_id" : 539501185,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4ODQ3Nw==",
      "original_commit_id" : "cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "original_line" : 852,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 548539426,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539588477",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/5553787?v=4",
         "events_url" : "https://api.github.com/users/troygiorshev/events{/privacy}",
         "followers_url" : "https://api.github.com/users/troygiorshev/followers",
         "following_url" : "https://api.github.com/users/troygiorshev/following{/other_user}",
         "gists_url" : "https://api.github.com/users/troygiorshev/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/troygiorshev",
         "id" : 5553787,
         "login" : "troygiorshev",
         "node_id" : "MDQ6VXNlcjU1NTM3ODc=",
         "organizations_url" : "https://api.github.com/users/troygiorshev/orgs",
         "received_events_url" : "https://api.github.com/users/troygiorshev/received_events",
         "repos_url" : "https://api.github.com/users/troygiorshev/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/troygiorshev/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/troygiorshev/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/troygiorshev"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539703493"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539703493"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@narula Oh, good catch! The `continue` should be dropped. I don't remember what the apparently incorrect reasoning behind it was TBH :)\r\n\r\nThanks for catching it!",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-09T22:42:40Z",
      "diff_hunk" : "@@ -771,4 +773,128 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i]);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE{29};\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW{20};\n+\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+static_assert(GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE > GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW);\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Verify correctness of GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\n+            // and GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW.\n+            if (number_of_nodes <= GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW) {\n+                BOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            }\n+            if (number_of_nodes >= GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\n+                BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            } else {\n+                continue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539703493",
      "id" : 539703493,
      "in_reply_to_id" : 539501185,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcwMzQ5Mw==",
      "original_commit_id" : "cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "original_line" : 852,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 548675335,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539703493",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for reviewing!\r\n\r\nPushed an updated version:\r\n\r\nNow skipping the `GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE` and `GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW` checking which isn't particularly important compared to the other tests.\r\n\r\nAlso fixed an incorrect comment.\r\n\r\nShould hopefully be ready for final review :)",
      "created_at" : "2020-12-09T23:39:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-742132718",
      "id" : 742132718,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MjEzMjcxOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-09T23:39:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/742132718",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540053825"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540053825"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The comment here says 'four', but the code below is asserting that 8 non-tx-relay candidates are protected.",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-10T10:29:15Z",
      "diff_hunk" : "@@ -771,4 +773,102 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i]);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n+                    candidate.nKeyedNetGroup = number_of_nodes - candidate.id;\n+                },\n+                {0, 1, 2, 3}, random_context));\n+\n+            // Eight nodes with the lowest minimum ping time should be protected\n+            // from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [](NodeEvictionCandidate& candidate) {\n+                    candidate.nMinPingUsecTime = candidate.id;\n+                },\n+                {0, 1, 2, 3, 4, 5, 6, 7}, random_context));\n+\n+            // Four nodes that most recently sent us novel transactions accepted\n+            // into our mempool should be protected from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n+                    candidate.nLastTXTime = number_of_nodes - candidate.id;\n+                },\n+                {0, 1, 2, 3}, random_context));\n+\n+            // Four non-tx-relay peers that most recently sent us novel blocks",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540053825",
      "id" : 540053825,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA1MzgyNQ==",
      "original_commit_id" : "d32c53fe64d1723f8b5952fe5943bfc6ae3c87d4",
      "original_line" : 853,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 549056756,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540053825",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540149894"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540149894"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: could use ranged for loop?",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-10T13:01:13Z",
      "diff_hunk" : "@@ -771,4 +773,102 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540149894",
      "id" : 540149894,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE0OTg5NA==",
      "original_commit_id" : "d32c53fe64d1723f8b5952fe5943bfc6ae3c87d4",
      "original_line" : 812,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 549171994,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540149894",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540152339"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540152339"
         }
      },
      "author_association" : "MEMBER",
      "body" : "how is this different from a less verbose \r\n```suggestion\r\n    return node_ids.find(*evicted_node_id) != node_ids.end();\r\n```",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-10T13:05:02Z",
      "diff_hunk" : "@@ -771,4 +773,102 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540152339",
      "id" : 540152339,
      "line" : 805,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE1MjMzOQ==",
      "original_commit_id" : "d32c53fe64d1723f8b5952fe5943bfc6ae3c87d4",
      "original_line" : 805,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 49,
      "pull_request_review_id" : 549171994,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540152339",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540154370"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540154370"
         }
      },
      "author_association" : "MEMBER",
      "body" : "style-nit: Adding a trailing comma here would not only make future diffs smaller if they add a new member, but also eat the extraneous whitespace at the beginning of the line.",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-10T13:08:16Z",
      "diff_hunk" : "@@ -771,4 +773,102 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540154370",
      "id" : 540154370,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE1NDM3MA==",
      "original_commit_id" : "d32c53fe64d1723f8b5952fe5943bfc6ae3c87d4",
      "original_line" : 790,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 549171994,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540154370",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540528310"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540528310"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`std::vector` doesn't have a `find` function. Perhaps you were thinking of `std::map` or `std::set`? :)",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-10T22:00:44Z",
      "diff_hunk" : "@@ -771,4 +773,102 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540528310",
      "id" : 540528310,
      "in_reply_to_id" : 540152339,
      "line" : 805,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyODMxMA==",
      "original_commit_id" : "d32c53fe64d1723f8b5952fe5943bfc6ae3c87d4",
      "original_line" : 805,
      "original_position" : 47,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 49,
      "pull_request_review_id" : 549638475,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540528310",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540528651"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540528651"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh, of course. A prior version used the index. Thanks!",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-10T22:01:21Z",
      "diff_hunk" : "@@ -771,4 +773,102 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540528651",
      "id" : 540528651,
      "in_reply_to_id" : 540149894,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyODY1MQ==",
      "original_commit_id" : "d32c53fe64d1723f8b5952fe5943bfc6ae3c87d4",
      "original_line" : 812,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 549638895,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540528651",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540528828"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540528828"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point! Thanks!",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-10T22:01:38Z",
      "diff_hunk" : "@@ -771,4 +773,102 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540528828",
      "id" : 540528828,
      "in_reply_to_id" : 540154370,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyODgyOA==",
      "original_commit_id" : "d32c53fe64d1723f8b5952fe5943bfc6ae3c87d4",
      "original_line" : 790,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 549639076,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540528828",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540556849"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540556849"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good catch. There are two `nLastBlockTime` based protections: that's why more than four are protected in practice in this specific test case. Now testing the two different `nLastBlockTime` protections a.) independently and b.) jointly.",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-10T22:53:33Z",
      "diff_hunk" : "@@ -771,4 +773,102 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i]);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n+                    candidate.nKeyedNetGroup = number_of_nodes - candidate.id;\n+                },\n+                {0, 1, 2, 3}, random_context));\n+\n+            // Eight nodes with the lowest minimum ping time should be protected\n+            // from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [](NodeEvictionCandidate& candidate) {\n+                    candidate.nMinPingUsecTime = candidate.id;\n+                },\n+                {0, 1, 2, 3, 4, 5, 6, 7}, random_context));\n+\n+            // Four nodes that most recently sent us novel transactions accepted\n+            // into our mempool should be protected from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n+                    candidate.nLastTXTime = number_of_nodes - candidate.id;\n+                },\n+                {0, 1, 2, 3}, random_context));\n+\n+            // Four non-tx-relay peers that most recently sent us novel blocks",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540556849",
      "id" : 540556849,
      "in_reply_to_id" : 540053825,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU1Njg0OQ==",
      "original_commit_id" : "d32c53fe64d1723f8b5952fe5943bfc6ae3c87d4",
      "original_line" : 853,
      "original_position" : 97,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 549676145,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540556849",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated.\r\n\r\nAddressed feedback from @MarcoFalke and @jnewbery.\r\n\r\nAlso added a combined test which tests the protections based on `nKeyedNetGroup` (4 peers protected), `nMinPingUsecTime` (8 peers protected), `nLastTXTime` (4 peers protected) and `nLastBlockTime` (8 peers protected) jointly.\r\n\r\nKindly re-review thoroughly :)",
      "created_at" : "2020-12-10T22:58:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-742853209",
      "id" : 742853209,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0Mjg1MzIwOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-10T22:58:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/742853209",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540580372"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540580372"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In the previous version of the test, we tested:\r\n\r\n1. No eviction happens with <= 20 peers\r\n2. An eviction happens with >= 29 peers\r\n3. If an eviction happens, the protected peers are not evicted\r\n\r\nIn the new version, we are checking that the protected peers are not evicted in any situation (3). The last test case covers for (1). However, the test will not alert if an eviction does not happen when it should (>= 29 peers). Am I missing something?\r\n\r\nPersonally, I found the GUARANTEED_EVICTION_THRESHOLD and GUARANTEED_NON_EVICTION_THRESHOLD valuable to test and also as documentation.",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-10T23:36:48Z",
      "diff_hunk" : "@@ -771,4 +773,133 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (NodeEvictionCandidate& candidate : candidates) {\n+        candidate_setup_fn(candidate);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540580372",
      "id" : 540580372,
      "line" : 833,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MDM3Mg==",
      "original_commit_id" : "6767d63d02cc8a670f3d409db1c78a77fdcb5363",
      "original_line" : 833,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 77,
      "pull_request_review_id" : 549697000,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540580372",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540728197"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540728197"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@dhruv I can re-add it if someone has time to figure out the actual logic behind the constant 29. I haven't had time to back my empirical observation (via simulation) with proper analysis. Help welcome! :)",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-11T06:50:12Z",
      "diff_hunk" : "@@ -771,4 +773,133 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (NodeEvictionCandidate& candidate : candidates) {\n+        candidate_setup_fn(candidate);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540728197",
      "id" : 540728197,
      "in_reply_to_id" : 540580372,
      "line" : 833,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcyODE5Nw==",
      "original_commit_id" : "6767d63d02cc8a670f3d409db1c78a77fdcb5363",
      "original_line" : 833,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 77,
      "pull_request_review_id" : 549839330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540728197",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 6767d63d02cc8a670f3d409db1c78a77fdcb5363",
      "created_at" : "2020-12-11T09:47:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-743091962",
      "id" : 743091962,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MzA5MTk2Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-11T09:47:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/743091962",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r541039284"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541039284"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "From PR Review club:\r\n\r\n**Q: Why is eviction guaranteed if we have at least 29 eviction candidates?**\r\n\r\nThe code in net.cpp (https://github.com/bitcoin/bitcoin/blob/fabecce/src/net.cpp#L954-L968) protects at most 28 peers from eviction (4 by net group, 8 by lowest ping time, 4 by last time of novel tx, up to 8 non-tx-relay peers by last novel block time, and 4 more peers by last novel block time). So any additional peers are guaranteed to be candidates for eviction.\r\n\r\n**Q: Why is non-eviction guaranteed if we have no more than 20 eviction candidates? Is 20 the highest number of nodes that guarantees non-eviction?**\r\n\r\nThe protection at [net.cpp::961](https://github.com/bitcoin/bitcoin/blob/fabecce/src/net.cpp#L961) for up to 8 non-tx-relay peers may, or may not apply to the randomly generated eviction candidates since `!n.fRelayTxes && n.fRelevantServices` will evaluate to `randbool`. So we cannot count them in the _guaranteed_ non-eviction? \r\n\r\nSo, guaranteed non-eviction is only on 4(CompareNetGroupKeyed) + 8(ReverseCompareNodeMinPingTime) + 4(CompareNodeTXTime) + 4(CompareNodeBlockTime) = 20.",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-11T15:43:48Z",
      "diff_hunk" : "@@ -771,4 +773,133 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (NodeEvictionCandidate& candidate : candidates) {\n+        candidate_setup_fn(candidate);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r541039284",
      "id" : 541039284,
      "in_reply_to_id" : 540580372,
      "line" : 833,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzOTI4NA==",
      "original_commit_id" : "6767d63d02cc8a670f3d409db1c78a77fdcb5363",
      "original_line" : 833,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 77,
      "pull_request_review_id" : 550212407,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541039284",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r541058759"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541058759"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@practicalswift the review club meeting log about your PR is here, if useful: https://bitcoincore.reviews/20477 ",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-11T16:12:13Z",
      "diff_hunk" : "@@ -771,4 +773,133 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (NodeEvictionCandidate& candidate : candidates) {\n+        candidate_setup_fn(candidate);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r541058759",
      "id" : 541058759,
      "in_reply_to_id" : 540580372,
      "line" : 833,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1ODc1OQ==",
      "original_commit_id" : "6767d63d02cc8a670f3d409db1c78a77fdcb5363",
      "original_line" : 833,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 77,
      "pull_request_review_id" : 550236824,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541058759",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Will review properly as soon as my laptop is done with the gitian builds for 3 RCs...until then, it's basically unusable.",
      "created_at" : "2020-12-11T16:13:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-743284528",
      "id" : 743284528,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MzI4NDUyOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-11T16:13:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/743284528",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r543441452"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543441452"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks! Now assert eviction at >= 29 candidates and non-eviction at <= 20 candidates. Please re-review :)",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-15T15:24:38Z",
      "diff_hunk" : "@@ -771,4 +773,133 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (NodeEvictionCandidate& candidate : candidates) {\n+        candidate_setup_fn(candidate);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r543441452",
      "id" : 543441452,
      "in_reply_to_id" : 540580372,
      "line" : 833,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0MTQ1Mg==",
      "original_commit_id" : "6767d63d02cc8a670f3d409db1c78a77fdcb5363",
      "original_line" : 833,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 77,
      "pull_request_review_id" : 552574280,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543441452",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated to address @dhruv's feedback. Should hopefully be ready for final review. Please re-review :)",
      "created_at" : "2020-12-15T15:25:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-745364380",
      "id" : 745364380,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NTM2NDM4MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-15T15:25:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745364380",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r543514057"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543514057"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think these <=20/>=29 tests are very useful, will need to be updated whenever any changes are made to the eviction logic, and aren't very realistic (in general, nodes have many more than 29 inbound slots).",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-15T16:52:39Z",
      "diff_hunk" : "@@ -771,4 +773,133 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (NodeEvictionCandidate& candidate : candidates) {\n+        candidate_setup_fn(candidate);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r543514057",
      "id" : 543514057,
      "in_reply_to_id" : 540580372,
      "line" : 833,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxNDA1Nw==",
      "original_commit_id" : "6767d63d02cc8a670f3d409db1c78a77fdcb5363",
      "original_line" : 833,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 77,
      "pull_request_review_id" : 552664110,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543514057",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r543523003"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543523003"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'll happily adjust to the consensus opinion, but I'll let others chime in before changing anything in order to avoid another round of change+revert :)",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-15T17:03:18Z",
      "diff_hunk" : "@@ -771,4 +773,133 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (NodeEvictionCandidate& candidate : candidates) {\n+        candidate_setup_fn(candidate);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r543523003",
      "id" : 543523003,
      "in_reply_to_id" : 540580372,
      "line" : 833,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyMzAwMw==",
      "original_commit_id" : "6767d63d02cc8a670f3d409db1c78a77fdcb5363",
      "original_line" : 833,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 77,
      "pull_request_review_id" : 552674487,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543523003",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r543627802"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543627802"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Even if we remove the <=20 assertion, we are already checking non-eviction <=20 (it's implicit in the tests). So the tests will need need to updated when changes are made anyway. I am not sure I understand why that's undesirable.\r\n\r\nI think it is useful to test that eviction does indeed happen (not just that protections are provided) when it should. After all, `SelectNodeToEvict` should select a node to evict :) Without the >=29 assertion, does this test guarantee that?\r\n\r\nAll that said, @jnewbery is infinitely more qualified than I am. I'm happy with whatever you all decide and will learn from it.",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-15T19:30:21Z",
      "diff_hunk" : "@@ -771,4 +773,133 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (NodeEvictionCandidate& candidate : candidates) {\n+        candidate_setup_fn(candidate);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r543627802",
      "id" : 543627802,
      "in_reply_to_id" : 540580372,
      "line" : 833,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYyNzgwMg==",
      "original_commit_id" : "6767d63d02cc8a670f3d409db1c78a77fdcb5363",
      "original_line" : 833,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : 77,
      "pull_request_review_id" : 552799150,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543627802",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK `1c9b235`",
      "created_at" : "2020-12-15T19:42:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-745522711",
      "id" : 745522711,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NTUyMjcxMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-15T19:42:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745522711",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/856960?v=4",
         "events_url" : "https://api.github.com/users/dhruv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dhruv/followers",
         "following_url" : "https://api.github.com/users/dhruv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dhruv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dhruv",
         "id" : 856960,
         "login" : "dhruv",
         "node_id" : "MDQ6VXNlcjg1Njk2MA==",
         "organizations_url" : "https://api.github.com/users/dhruv/orgs",
         "received_events_url" : "https://api.github.com/users/dhruv/received_events",
         "repos_url" : "https://api.github.com/users/dhruv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dhruv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dhruv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dhruv"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "cr ACK 6767d63d02cc8a670f3d409db1c78a77fdcb5363 ð¤ \r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\ncr ACK 6767d63d02cc8a670f3d409db1c78a77fdcb5363 ð¤ \r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUgJLwwAljffgO2Xw1Iez563pRA0ztSBIkuzEBPGf9nYifcbQJsfPMCdLzuu3MPQ\r\nZgfWPQNmtEuSTNq0R4Hl+XaPmBcoS5LDOTfxJWsQtb+kE0uXVfN1nRu4+d91/Sor\r\n+NT9Ach7YRVvJPOZZc0euxyka0pxLwX3+LdXa1k26gL2teT5knaROnCfSxenrFrO\r\nYIzbBfkn2lm/TMu4FhC2hW+OZon4zfHHCPzJYkQR2FByixLDqIIEOJiOY9ycLJQm\r\nys9xGzn0lZz0/hw4ApEe2b+lLREn/6YMjPNefo0hWcADAYDbjsvEYBsFm0Z6m5Mw\r\nBXA4lhUPWes5QboZ1LCxrEdxGG10uj8LwIBwESp/KVpZ53w0f9yU+mBQ68bruAHh\r\n5hFAJmriES6q8Ml/q2b3IUq8tXwOBM+2poGR8MtTYV6Obk/3eus2bA33EVsfNzm3\r\nZXzo/F1yQvXlD1kSDU3Aez1yodeLK3GQNoTKaPIGeIwOM3sPhDhJ6REMYskLM4tt\r\nPxqHvOZz\r\n=Gf1H\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `23398d20d71a2405d911d0dc99e4fc62b592150f49fa6c17afd6d588c418522c  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e89294010823398d20d71a2405d911d0dc99e4fc62b592150f49fa6c17afd6d588c418522cf0107fd7398bc90e0be7a605322137d2ed9108fff01002bd7f23a0a9a6df040ad1fb6a53ce5e08f1045fd9dbbbf008a9f142f6512d6a5e0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff0102cc72ffccbaac7120b1f3f99933682b808f1045fd9dbbaf0080e361c96f960f3860083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010461c5cf5d05a38312544cb8d5b6c4b8408f1045fd9dbbaf0087ee78d84418393070083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6df0108fcf32ebf4bd8336aeba0cb60420e84d08f020e09db3e429c6645c18d52d92c85db443d9945c22630cb987573b2856fd9aa9aa08f0200b5a8780a62f3f7df85192d5e0105257ef184ac37603bce482a379453152e1e908f1045fd9dbbaf008277420a4c865ad980083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
      "created_at" : "2020-12-16T10:04:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746022436",
      "id" : 746022436,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NjAyMjQzNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-16T10:04:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746022436",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "cr ACK 1c9b235c330fe7b9b71f687ef14cb10fe588172b ð²\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\ncr ACK 1c9b235c330fe7b9b71f687ef14cb10fe588172b ð²\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjQWgv/TnEWYjD/Ws2y2WL23agZIEyXZwlxbLCJTWkydKzBnOrPdP1QOBl3DZ95\r\n1ICN5MfBErZtO825TG8NU2VfCesJRIJKV4996nw7GqpN+KfBlkYHNipYfoF9xdHB\r\nJ0MT/97/wsrsWGhYEdwx3ftk0CHMNNDMN++N4BSx3h314jGnuNzV4DiUoz2ea9X3\r\n1IAsitmrqa37xIlLIvdLSwRVDcWQyJ7oQ+NUo2KsSztXJ6XEpZcUAqhfRwuS9Ku4\r\nR3DIJHLXKk8PUEXlnmDWVtfnhuhGW4g3V6ZJdUId7OfUr85H/rGSxSeejqSqxLt/\r\n8hGiRsuftelXPfd7SOAjRW5h6x6NFCJBgcVVOYKzjvjyknyH3it3IrPi9WFwLLWS\r\n98fNiUtiE2SsXOUFXxbbyalCZlQols/pBklibFoPNPhfHCT7ZPvazINGBJwkwxVS\r\nGL1IIAKftgsUJhmiSDy/LHfHwXC2vOL2ipdPLJuR7CPLPj9iBZ2picP4h3zRpSo2\r\nlubdxdSX\r\n=z6dl\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `3a47dabfa2f12ebc4fbd136dcd7771912bfcd7ed7ce86ba72f473c364fba70a0  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401083a47dabfa2f12ebc4fbd136dcd7771912bfcd7ed7ce86ba72f473c364fba70a0f010b438fe0e601d86841026faaaaf5a7f5e08fff01071cd1dfe154052ccbeee0f24f9e9acd108f1045fd9dc30f008a0ca2a256c0e69180083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff0108866883bd2ed9744c592c7cb9dfcc2e408f1045fd9dc2ff008a95c1c9a664641660083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff0109dd05ccbc7815398d0399c92373b228f08f1045fd9dc32f0080f1b2b81731ae62a0083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010d9c46dfac07e0e8de83409f86c44694708f1045fd9dc2ff0086ec4bf813030481b0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6d)\r\n\r\n</details>\r\n",
      "created_at" : "2020-12-16T10:06:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746025413",
      "id" : 746025413,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NjAyNTQxMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-16T10:06:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746025413",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I ACKed both versions. Let me know which one to merge.",
      "created_at" : "2020-12-16T10:07:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746026813",
      "id" : 746026813,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NjAyNjgxMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-16T10:07:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746026813",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "code review ACK 1c9b235c33\r\n\r\nEither are fine to merge.",
      "created_at" : "2020-12-16T10:11:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746033217",
      "id" : 746033217,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NjAzMzIxNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-16T10:11:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746033217",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "wait for meeee ð",
      "created_at" : "2020-12-16T10:36:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746065399",
      "id" : 746065399,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NjA2NTM5OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-16T10:36:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746065399",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544197436"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544197436"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fbba7d8aada5b1d7a63ad4133 add `#include <optional.h>` header\r\n\r\nperhaps call this `SelectConnectionToEvict()` for symmetry with `AttemptToEvictConnection()`, or `SelectPeerToEvict()` as a peer is a node that is not ours",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-16T10:48:38Z",
      "diff_hunk" : "@@ -910,43 +895,8 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     elements.erase(elements.end() - eraseSize, elements.end());\n }\n \n-/** Try to find a connection to evict when the node is full.\n- *  Extreme care must be taken to avoid opening the node to attacker\n- *   triggered network partitioning.\n- *  The strategy used here is to protect a small number of peers\n- *   for each of several distinct characteristics which are difficult\n- *   to forge.  In order to partition a node the attacker must be\n- *   simultaneously better at all of them than honest peers.\n- */\n-bool CConnman::AttemptToEvictConnection()\n+[[nodiscard]] Optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544197436",
      "id" : 544197436,
      "line" : 899,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE5NzQzNg==",
      "original_commit_id" : "1c9b235c330fe7b9b71f687ef14cb10fe588172b",
      "original_line" : 899,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 43,
      "pull_request_review_id" : 553565563,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544197436",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544198510"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544198510"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fbba7d8aada5b1d7a63ad4 could be const",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-16T10:50:11Z",
      "diff_hunk" : "@@ -1016,10 +966,52 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front().id;\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+    {\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);\n+        }\n+    }\n+    Optional<NodeId> node_id_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544198510",
      "id" : 544198510,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE5ODUxMA==",
      "original_commit_id" : "1c9b235c330fe7b9b71f687ef14cb10fe588172b",
      "original_line" : 1008,
      "original_position" : 120,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 553566807,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544198510",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544209146"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544209146"
         }
      },
      "author_association" : "MEMBER",
      "body" : "6767d63d02cc8a670f3d409db1 ref to const?\r\n```suggestion\r\nbool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId>& node_ids, FastRandomContext& random_context)\r\n```",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-16T11:07:04Z",
      "diff_hunk" : "@@ -771,4 +773,147 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544209146",
      "id" : 544209146,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIwOTE0Ng==",
      "original_commit_id" : "1c9b235c330fe7b9b71f687ef14cb10fe588172b",
      "original_line" : 798,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 553579878,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544209146",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544211318"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544211318"
         }
      },
      "author_association" : "MEMBER",
      "body" : "6767d63d02cc8a670f3d409 ref to const here as well\r\n```suggestion\r\nbool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId>& node_ids, FastRandomContext& random_context)\r\n```",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-16T11:10:19Z",
      "diff_hunk" : "@@ -771,4 +773,147 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544211318",
      "id" : 544211318,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIxMTMxOA==",
      "original_commit_id" : "1c9b235c330fe7b9b71f687ef14cb10fe588172b",
      "original_line" : 811,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 553582377,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544211318",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 1c9b235c330fe7b9b71f modulo a few suggestions",
      "created_at" : "2020-12-16T11:30:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746144573",
      "id" : 746144573,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NjE0NDU3Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-16T11:30:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746144573",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544240631"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544240631"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Now including `optional.h`.\r\n\r\nRegarding the naming: I see your point but given `NodeEvictionCandidate` inputs I think `SelectNodeToEvict` works.",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-16T11:58:08Z",
      "diff_hunk" : "@@ -910,43 +895,8 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     elements.erase(elements.end() - eraseSize, elements.end());\n }\n \n-/** Try to find a connection to evict when the node is full.\n- *  Extreme care must be taken to avoid opening the node to attacker\n- *   triggered network partitioning.\n- *  The strategy used here is to protect a small number of peers\n- *   for each of several distinct characteristics which are difficult\n- *   to forge.  In order to partition a node the attacker must be\n- *   simultaneously better at all of them than honest peers.\n- */\n-bool CConnman::AttemptToEvictConnection()\n+[[nodiscard]] Optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544240631",
      "id" : 544240631,
      "in_reply_to_id" : 544197436,
      "line" : 899,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0MDYzMQ==",
      "original_commit_id" : "1c9b235c330fe7b9b71f687ef14cb10fe588172b",
      "original_line" : 899,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 43,
      "pull_request_review_id" : 553616736,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544240631",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544241023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544241023"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good catch! Fixed!",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-16T11:58:48Z",
      "diff_hunk" : "@@ -1016,10 +966,52 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front().id;\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+    {\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);\n+        }\n+    }\n+    Optional<NodeId> node_id_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544241023",
      "id" : 544241023,
      "in_reply_to_id" : 544198510,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0MTAyMw==",
      "original_commit_id" : "1c9b235c330fe7b9b71f687ef14cb10fe588172b",
      "original_line" : 1008,
      "original_position" : 120,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 553617204,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544241023",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544241063"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544241063"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good catch! Fixed!",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-16T11:58:52Z",
      "diff_hunk" : "@@ -771,4 +773,147 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544241063",
      "id" : 544241063,
      "in_reply_to_id" : 544209146,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0MTA2Mw==",
      "original_commit_id" : "1c9b235c330fe7b9b71f687ef14cb10fe588172b",
      "original_line" : 798,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 553617250,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544241063",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544241113"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544241113"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good catch! Fixed!",
      "commit_id" : "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "created_at" : "2020-12-16T11:58:58Z",
      "diff_hunk" : "@@ -771,4 +773,147 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544241113",
      "id" : 544241113,
      "in_reply_to_id" : 544211318,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0MTExMw==",
      "original_commit_id" : "1c9b235c330fe7b9b71f687ef14cb10fe588172b",
      "original_line" : 811,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/test/net_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 553617315,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-16T12:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544241113",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jonatack Thanks for reviewing! Feedback addressed: please re-review :)",
      "created_at" : "2020-12-16T12:01:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746181940",
      "id" : 746181940,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NjE4MTk0MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-16T12:01:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746181940",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK fee88237e03c21bf81f21098e6b89ecfa5327cee\r\n\r\nThanks for adding this nicely done coverage! Looking forward to more.",
      "created_at" : "2020-12-16T12:16:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746201615",
      "id" : 746201615,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NjIwMTYxNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-16T12:16:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746201615",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK fee88237e03c21bf81f21098e6b89ecfa5327cee ð¼\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK fee88237e03c21bf81f21098e6b89ecfa5327cee ð¼\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUiu/Av/RLQ2/lM0mJ7uTlvDebTgk57QGAdIs4rv+t9X7wUizqNhEjFHU2KC0HS0\r\nhU6QjHZelMuy0IvIRrcT33LCZkczPQbEQ4ZMAV5VZhuRNvAisi1PHxueX5U+oT83\r\nUKS899fiy7VN3RD7g7E/sMDNuGAo1hSV7MgYQMOlCG8dSJ3bbuF2d1jNEYqJQ7oa\r\nMkmdtB0SwvCOtZyvcsVDI8yC8UJ5r2ybgE+bYfMK9BzMUyWQriWmOnoVQBrnwb5j\r\nZr7g/4pnq04078EuaBVP981P+Pc4pj6Eo63iIinabl74aLU3hsHa0bnUCkpihBSg\r\nstooipOqKXQsOS/jI1XyElhclE3EolEE6+0QIXFpx3H7AlkovPdF/LeeezH0dVDB\r\nhSl7VrdKrTxP7kjSBKBMOiPbzBdVSqo6ktaqhBI7YXlDepR7V54/PlDs7QEcM91r\r\n3iEvD/wbMFJQZHzHEbmCINPXBwdOh9MleFgm0dgTMor7djOpaxgbYq/2Y5Bx4/4K\r\ns1ZuLUUS\r\n=f3JL\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `fb125172e7abd1e8e484ae4f527e5e86e05737d1b1e006310dca8dbb38203afc  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e892940108fb125172e7abd1e8e484ae4f527e5e86e05737d1b1e006310dca8dbb38203afcf01021bd9625059be8619f831b67c585e18708fff01047bc36d91c428388a4477ef64b7e946e08f1207a5438daa431ce45f7483dec3c3dbf3b7d8834007f7c23a78aa2a27d6e64087508f1045fd9fde2f008063996b0f7f67d2c0083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff01061190039bdd1fbfbabee96c824f4a40e08f12071c03c42d2b08d21b3b13974e874eb9a28988e8ad3d8ba93d17e43b9faa3f3b708f1045fd9fde1f0089052e62b0b37905f0083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff010b3f711330b0e9f7c1217942c198ef08108f02028c6ec707950e038eefb921e4bb2ab74cd13c60d03bcc17dbc9ab8cab9c5f20a08f120d9e9f61eeeba3a6da1845028e41b8e7072429c02b168ba997847f36474941b5208f020c0e631cbe0b411022c8fb6a38cf34212b9bbd91125314d7ee3627dd30e03606c08f1045fd9fde2f008e67a6537946812580083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6df010fea4c6daa41c07668282ff82e88a6e4808f1207d4951d5924eeae2fde3701dafb4f4b7d4da87674f902db740b5f9542a90607208f02083062c158565455dad7a807a546fab2433a251138f8665ab19c4fafc960e120108f0206c7957cbeb8becfd6bbf12fb19d778c276c0f53775dca11bb6d1cfa71985adcb08f1045fd9fde2f008784c47c1cbfbe60a0083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
      "created_at" : "2020-12-16T12:30:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746217675",
      "id" : 746217675,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0NjIxNzY3NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-16T12:30:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746217675",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
