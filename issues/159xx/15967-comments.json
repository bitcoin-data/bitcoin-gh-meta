[
   {
      "author_association" : "MEMBER",
      "body" : "Confirming that there appears to be an inconsistency:\r\n\r\n```\r\n$ grep -B11 '^        if (!ActivateBestChain(state, chainparams)) {' src/validation.cpp\r\nbool LoadChainTip(const CChainParams& chainparams)\r\n{\r\n    AssertLockHeld(cs_main);\r\n\r\n    if (chainActive.Tip() && chainActive.Tip()->GetBlockHash() == pcoinsTip->GetBestBlock()) return true;\r\n\r\n    if (pcoinsTip->GetBestBlock().IsNull() && mapBlockIndex.size() == 1) {\r\n        // In case we just added the genesis block, connect it now, so\r\n        // that we always have a chainActive.Tip() when we return.\r\n        LogPrintf(\"%s: Connecting genesis block...\\n\", __func__);\r\n        CValidationState state;\r\n        if (!ActivateBestChain(state, chainparams)) {\r\n$ grep -A2 -E '^bool ActivateBestChain' src/validation.cpp\r\nbool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {\r\n    return g_chainstate.ActivateBestChain(state, chainparams, std::move(pblock));\r\n}\r\n$ grep -A5 -E '^bool CChainState::ActivateBestChain\\(' src/validation.cpp\r\nbool CChainState::ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {\r\n    // Note that while we're often called here from ProcessNewBlock, this is\r\n    // far from a guarantee. Things in the P2P/RPC will often end up calling\r\n    // us in the middle of ProcessNewBlock - do not assume pblock is set\r\n    // sanely for performance or correctness!\r\n    AssertLockNotHeld(cs_main);\r\n$ git diff\r\ndiff --git a/src/validation.h b/src/validation.h\r\nindex 7ab6adaf3..5f19f32b4 100644\r\n--- a/src/validation.h\r\n+++ b/src/validation.h\r\n@@ -257,7 +257,7 @@ bool GetTransaction(const uint256& hash, CTransactionRef& tx, const Consensus::P\r\n  * May not be called with cs_main held. May not be called in a\r\n  * validationinterface callback.\r\n  */\r\n-bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock = std::shared_ptr<const CBlock>());\r\n+bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock = std::shared_ptr<const CBlock>()) LOCKS_EXCLUDED(cs_main);\r\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\r\n\r\n /** Guess verification progress (as a fraction between 0.0=genesis and 1.0=current tip). */\r\n\r\n$ make\r\nÃ¢ÂÂ¦\r\n validation.cpp:3959:14: error: cannot call function 'ActivateBestChain' while mutex 'cs_main' is held [-Werror,-Wthread-safety-analysis]\r\n        if (!ActivateBestChain(state, chainparams)) {\r\n             ^\r\n1 error generated.\r\n```\r\n\r\nI just submitted #15971 to add compile-time checking for some negative locking requirements in the validation code, but that PR does not address this case.\r\n\r\nUpdated: Had totally forgotten that I submitted #15721 -- which adds `LOCKS_EXCLUDED(cs_main)` to `CChainState::ActivateBestChain` -- back in April too :-)",
      "created_at" : "2019-05-07T09:59:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/15967#issuecomment-490016965",
      "id" : 490016965,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15967",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5MDAxNjk2NQ==",
      "updated_at" : "2019-05-07T16:50:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/490016965",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
